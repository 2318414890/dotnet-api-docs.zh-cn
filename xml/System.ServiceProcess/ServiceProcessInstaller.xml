<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="65aa4409d6c7e76442c09281bf79b66d17d4342f" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48741287" /></Metadata><TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceProcessInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>安装一个可执行文件，该文件包含扩展 <see cref="T:System.ServiceProcess.ServiceBase" /> 的类。 该类由安装实用工具（如 InstallUtil.exe）在安装服务应用程序时调用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller>中的工作原理普遍适用于所有服务可执行文件。 安装实用程序使用它编写与你想要安装的服务相关联的注册表值。  
  
 若要安装的服务，创建的项目安装程序类继承自<xref:System.Configuration.Install.Installer>，并设置<xref:System.ComponentModel.RunInstallerAttribute>到类上`true`。 在项目中，实例化一个<xref:System.ServiceProcess.ServiceProcessInstaller>每个服务应用程序，另一个实例<xref:System.ServiceProcess.ServiceInstaller>应用程序中每个服务实例。 最后，添加<xref:System.ServiceProcess.ServiceProcessInstaller>实例和<xref:System.ServiceProcess.ServiceInstaller>到您的项目安装程序类的实例。  
  
 该实用工具 InstallUtil.exe 运行时，查找与服务程序集中的类<xref:System.ComponentModel.RunInstallerAttribute>设置为`true`。 通过将它们添加到类添加到服务程序集<xref:System.Configuration.Install.Installer.Installers%2A>项目安装程序与关联的集合。 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`，安装实用工具会忽略项目安装程序。  
  
 实例的<xref:System.ServiceProcess.ServiceProcessInstaller>，可以修改的属性包括指定登录的用户以外的其他帐户下运行服务应用程序。 可以指定特定<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>并<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>对其下为服务应运行，也可以使用<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>来指定计算机的系统帐户、 本地或网络服务帐户或用户帐户下运行该服务。  
  
> [!NOTE]
>  计算机的系统帐户不是管理员帐户相同。  
  
 通常情况下，不调用方法上<xref:System.ServiceProcess.ServiceInstaller>在代码中; 它们通常称为仅由安装实用工具。 安装实用工具会自动调用<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>和<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType>在安装过程中的方法。 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(或<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) 上所有以前安装的组件。  
  
 应用程序的安装例程会维护有关已安装，使用项目安装程序的组件自动信息<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 此状态信息将持续更新作为<xref:System.ServiceProcess.ServiceProcessInstaller>实例和每个<xref:System.ServiceProcess.ServiceInstaller>实用工具安装实例。 它是通常不需要为你的代码可以显式修改此状态信息。  
  
 实例化<xref:System.ServiceProcess.ServiceProcessInstaller>基类构造函数中，将导致<xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>调用。  
  
   
  
## Examples  
 下面的示例创建名为 MyProjectInstaller，继承的项目安装程序<xref:System.Configuration.Install.Installer>。 假定没有服务可执行文件，其中包含两个服务，"Hello World 服务 1"和"Hello World 服务 2"。 MyProjectInstaller （这将由安装实用工具调用），为构造函数内<xref:System.ServiceProcess.ServiceInstaller>对于每个服务，创建对象和一个<xref:System.ServiceProcess.ServiceProcessInstaller>创建可执行文件。 安装实用程序识别为有效的安装程序，MyProjectInstaller<xref:System.ComponentModel.RunInstallerAttribute>属性设置为`true`。  
  
 可选属性在进程安装程序和服务安装程序设置，安装程序添加到之前<xref:System.Configuration.Install.Installer.Installers%2A>集合。 当安装实用工具访问 MyProjectInstaller 时，将对象添加到<xref:System.Configuration.Install.Installer.Installers%2A>集合通过调用<xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType>将反过来安装。 在过程中，安装程序维护，指示已安装哪些对象，以便每个对象可以依次在发生安装失败时的状态信息。  
  
 通常情况下，您将不显式实例化您的项目安装程序类。 您可以创建它，并添加<xref:System.ComponentModel.RunInstallerAttribute>，但安装实用程序实际调用，并因此实例化类。  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberSignature Language="F#" Value="member this.Account : System.ServiceProcess.ServiceAccount with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置运行该服务应用程序时所使用的帐户类型。</summary>
        <value><see cref="T:System.ServiceProcess.ServiceAccount" />，它定义系统运行此服务时所使用的帐户类型。 默认值为 <see langword="User" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>属性是`User`，则<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>属性用于定义服务应用程序运行的帐户。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>对允许以不同的系统帐户的帐户下运行的服务。 这可以例如，允许无用户登录时自动启动重新启动，在该服务。 如果将任一<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>或<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>为空，并且已设置<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>到`User`，系统将提示您输入有效的用户名和密码在安装时。  
  
 您还可以指定的本地系统帐户或本地运行的服务或网络服务。 请参阅<xref:System.ServiceProcess.ServiceAccount>枚举类型的帐户的详细信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceProcessInstaller.CopyFromComponent comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">表示服务进程的 <see cref="T:System.ComponentModel.IComponent" />。</param>
        <summary>在没有 <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> 类特定行为的情况下实现基类 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不应在代码中调用此方法。 上的基类方法<xref:System.Configuration.Install.ComponentInstaller>是`abstract`，因此此处派生类中实现它。 但是，没有任何<xref:System.ServiceProcess.ServiceProcessInstaller>类特定于方法的实现中的处理。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HelpText : string" Usage="System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取为服务安装选项显示的帮助文本。</summary>
        <value>帮助文本，提供为在特定帐户下运行服务而设置用户名和密码的步骤说明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 手动启动服务时，可以使用此帮助文本。 它指示用户如何输入用户名和密码信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</param>
        <summary>将服务应用程序信息写入注册表。 该方法旨在由自动调用适当方法的安装工具使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，不调用方法上<xref:System.ServiceProcess.ServiceProcessInstaller>在代码中; 它们通常称为仅由安装实用工具。 安装实用工具会自动调用<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>在安装过程中的方法。 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>上以前安装的所有组件。 此方法将安装传递给基类<xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType>方法。  
  
 通常情况下，您将不会调用方法上<xref:System.ServiceProcess.ServiceInstaller>在代码中; 它们通常称为仅由安装实用工具。 安装实用工具会自动调用<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>和<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType>在安装过程中的方法。 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(或<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) 上所有以前安装的组件  
  
 应用程序的安装例程会维护有关已安装，使用项目安装程序的组件自动信息<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 此状态信息传递到<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A>作为`stateSaver`参数，将持续更新作为<xref:System.ServiceProcess.ServiceProcessInstaller>实例和每个<xref:System.ServiceProcess.ServiceInstaller>实用工具安装实例。 它是通常不需要为你的代码可以显式修改此状态信息。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> 将基类方法引发的任何异常传递给调用方法或<xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall>事件处理程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stateSaver" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与运行服务应用程序时所使用用户帐户关联的密码。</summary>
        <value>与运行服务时所使用帐户关联的密码。 默认值为空字符串("")。 该属性非公共属性，并且从不序列化。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>对允许以不同的系统帐户的帐户下运行的服务。 这可以例如，允许无用户登录时自动启动重新启动，在该服务。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 并<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>进行处理以安全的方式，因为它们永远不会序列化或保存到的安装状态 (项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) 或其他位置的公共访问权限。  
  
 设置<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>允许要在安装时自动与服务相关联的帐户。 如果将任一<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>或<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>为空，并且已设置<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>到`User`，系统将提示您输入有效的用户名和密码在安装时。  
  
 运行在单独的帐户服务的另一种方法是使用计算机的系统帐户。 该帐户，这是截然不同的管理员帐户，不需要密码。 系统帐户的权限可能会超过当前已登录用户。 系统帐户下运行，而不是用户帐户可以避免出现问题导致用户缺少权限的服务要求  
  
 如果<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>而不是任何值`User`，使用指定帐户 （本地或网络服务或本地系统），则即使<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>属性进行填充。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</param>
        <summary>回滚由安装过程写到注册表的服务应用程序信息。 该方法旨在由自动处理适当方法的安装工具使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，不调用方法上<xref:System.ServiceProcess.ServiceProcessInstaller>在代码中; 它们通常称为仅由安装实用工具。 安装实用工具会自动调用<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>在安装过程中的方法。 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>上生成了异常的对象。  
  
 应用程序的安装例程会维护有关已安装，使用项目安装程序的组件自动信息<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 此状态信息传递到<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>作为`savedState`参数，将持续更新作为<xref:System.ServiceProcess.ServiceProcessInstaller>实例和每个<xref:System.ServiceProcess.ServiceInstaller>实用工具安装实例。 它是通常不需要为你的代码可以显式修改此状态信息。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> 将基类方法引发的任何异常传递给调用方法或<xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall>事件处理程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="savedState" /> 为 <see langword="null" />。  
  
或 
<paramref name="savedState" /> 已损坏或不存在。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Username : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置运行服务应用程序时将使用的用户帐户。</summary>
        <value>运行服务时将使用的帐户。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>对允许以不同的系统帐户的帐户下运行的服务。 这可以例如，允许无用户登录时自动启动重新启动，在该服务。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 并<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>进行处理以安全的方式，因为它们永远不会序列化或保存到的安装状态 (项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) 或其他位置的公共访问权限。  
  
 设置<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>允许要在安装时自动与服务相关联的帐户。 如果将任一<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>或<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>为空，并且已设置<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>到`User`，系统将提示您输入有效的用户名和密码在安装时。  
  
 运行在单独的帐户服务的另一种方法是使用计算机的系统帐户。 该帐户，这是截然不同的管理员帐户，不需要密码。 系统帐户的权限可能会超过当前已登录用户。 系统帐户下运行，而不是用户帐户可以避免出现问题导致用户缺少权限的服务要求  
  
 如果<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>而不是任何值`User`，使用指定的帐户 （本地或网络服务或本地系统），即使<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>属性进行填充。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>