<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b38ce9c25d631c2dde01d2084bafbb98967c9b5" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36410105" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Installs a class that extends <see cref="T:System.ServiceProcess.ServiceBase" /> to implement a service. This class is called by the install utility when installing a service application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller>功能正常运行特定于其关联的服务。 安装实用程序使用它来写入与 HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services 注册表项中的子项的服务关联的注册表值。 此子项中其 ServiceName 由标识服务。 子项还包括可执行文件或与该服务所属的.dll 的名称。  
  
 若要安装服务，创建继承自项目安装程序类<xref:System.Configuration.Install.Installer>类，并将设置<xref:System.ComponentModel.RunInstallerAttribute>到类中的属性`true`。 在项目中，创建一个<xref:System.ServiceProcess.ServiceProcessInstaller>每个服务应用程序，另一个实例<xref:System.ServiceProcess.ServiceInstaller>应用程序中每个服务的实例。 在您项目安装程序类的构造函数，将设置为服务使用的安装属性<xref:System.ServiceProcess.ServiceProcessInstaller>和<xref:System.ServiceProcess.ServiceInstaller>实例，并将实例添加到<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
> [!NOTE]
>  建议添加安装程序实例; 使用构造函数但是，如果你需要将添加到<xref:System.Configuration.Install.Installer.Installers%2A>中的集合<xref:System.ServiceProcess.ServiceInstaller.Install%2A>方法，请务必执行上述相同的元素添加到集合中<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。  
  
 为派生自的所有类<xref:System.Configuration.Install.Installer>类的状态<xref:System.Configuration.Install.Installer.Installers%2A>集合必须在相同<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。 但是，您可以避免在对集合进行维护<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法如果你安装程序将实例添加到<xref:System.Configuration.Install.Installer.Installers%2A>在自定义安装程序类构造函数的集合。当调用安装实用工具时，它会查找<xref:System.ComponentModel.RunInstallerAttribute>属性。 如果属性是`true`，安装已添加到的所有服务，该实用程序<xref:System.Configuration.Install.Installer.Installers%2A>与项目安装程序相关联的集合。 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`或不存在，则安装实用工具忽略项目安装程序。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller>与项目安装类安装信息普遍适用于所有关联<xref:System.ServiceProcess.ServiceInstaller>项目中的实例。 如果此服务已将它隔离从安装项目中的其他服务的任何内容，此方法被安装该特定于服务的信息。  
  
> [!NOTE]
>  至关重要的<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>能与<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>类派生自的<xref:System.ServiceProcess.ServiceBase>。 通常情况下，值<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>在服务应用程序的可执行文件的 main （） 函数中设置服务的属性。 服务控制管理器使用<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>属性可以查找服务在服务内此可执行文件。  
  
 你可以修改其他属性上<xref:System.ServiceProcess.ServiceInstaller>之前或之后将其添加到<xref:System.Configuration.Install.Installer.Installers%2A>项目安装程序的集合。 例如，服务的<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>可能设置为启动自动在重新启动服务或要求用户手动启动此服务。  
  
 通常情况下，你将不调用对象方法<xref:System.ServiceProcess.ServiceInstaller>在代码中; 它们是通常只能由调用安装实用程序。 安装实用程序将自动调用<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>和<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType>在安装过程中的方法。 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(或<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) 上所有以前安装的组件。  
  
 安装实用工具调用<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>删除的对象。  
  
 应用程序的安装例程维护自动有关组件已安装，使用项目安装程序的信息<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 此状态信息将持续更新作为<xref:System.ServiceProcess.ServiceProcessInstaller>实例和每个<xref:System.ServiceProcess.ServiceInstaller>由实用工具安装实例。 它是通常情况下不必为你的代码来显式修改状态信息。  
  
 当执行安装时，它会自动创建<xref:System.Diagnostics.EventLogInstaller>安装与关联的事件日志源<xref:System.ServiceProcess.ServiceBase>派生类。 <xref:System.Diagnostics.EventLog.Log%2A>此源的属性由设置<xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>到计算机的应用程序日志的构造函数。 当你将设置<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>的<xref:System.ServiceProcess.ServiceInstaller>(应等于<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>的服务)，则<xref:System.Diagnostics.EventLog.Source%2A>自动设置为相同的值。 在安装失败，源的安装以及以前安装的服务已回滚。  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法尝试在运行时将其停止服务。 这是成功与否，<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>撤消所做的更改<xref:System.ServiceProcess.ServiceInstaller.Install%2A>。 如果为事件日志记录创建了新的源，源已删除。  
  
   
  
## Examples  
 下面的示例创建一个项目安装程序，调用`MyProjectInstaller`，它继承自<xref:System.Configuration.Install.Installer>。 假定没有服务可执行文件，包含两个服务，"Hello World 服务 1"和"Hello World 服务 2"。 中的构造函数`MyProjectInstaller`（这将由调用安装实用程序），<xref:System.ServiceProcess.ServiceInstaller>有关其中每个服务，并创建对象<xref:System.ServiceProcess.ServiceProcessInstaller>创建的可执行文件。 为使安装实用工具来识别`MyProjectInstaller`作为有效的安装程序中，<xref:System.ComponentModel.RunInstallerAttribute>属性设置为`true`。  
  
 可选属性设置的过程安装程序并服务安装程序安装程序添加到之前<xref:System.Configuration.Install.Installer.Installers%2A>集合。 安装实用程序的访问时`MyProjectInstaller`，添加到对象<xref:System.Configuration.Install.Installer.Installers%2A>集合通过调用<xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType>将反过来安装。 在过程中，安装程序将维护指示已安装的对象，以便每个可以进行备份反过来，安装失败时的状态信息。  
  
 通常情况下，你不会显式创建项目安装程序类的实例。 您可以创建它并添加<xref:System.ComponentModel.RunInstallerAttribute>属性的语法，但它是由安装实用工具来实际调用，并因此实例化类。  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceInstaller" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要安装服务，创建继承自项目安装程序类<xref:System.Configuration.Install.Installer>类，并将设置<xref:System.ComponentModel.RunInstallerAttribute>到类中的属性`true`。 在项目中，创建一个<xref:System.ServiceProcess.ServiceProcessInstaller>每个服务应用程序，另一个实例<xref:System.ServiceProcess.ServiceInstaller>应用程序中每个服务的实例。 在您项目安装程序类的构造函数，将设置为服务使用的安装属性<xref:System.ServiceProcess.ServiceProcessInstaller>和<xref:System.ServiceProcess.ServiceInstaller>实例，并将实例添加到<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>构造函数自动生成事件日志源其<xref:System.Diagnostics.EventLog.Log%2A>属性设置为计算机的应用程序日志和<xref:System.Diagnostics.EventLogInstaller>。 当你将设置<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>的<xref:System.ServiceProcess.ServiceInstaller>，应等于<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>的服务，<xref:System.Diagnostics.EventLog.Source%2A>的事件日志的属性自动设置为相同的值。 安装失败的情况下，源会自动删除。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>构造函数集<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>属性`ServiceStartMode.Manual`指定用户启动服务。 你可以重置将属性设为`ServiceStartMode.Automatic`指定当计算机重新启动时启动服务。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> from which to copy.</param>
        <summary>Copies properties from an instance of <see cref="T:System.ServiceProcess.ServiceBase" /> to this installer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 极少数情况下将在代码中调用此方法。 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 通常只能由设计器调用。  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 将保存的服务名称`component`参数<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>的<xref:System.ServiceProcess.ServiceInstaller>实例。 (因为参数必须是派生自的类的实例<xref:System.ServiceProcess.ServiceBase>，`component`要确保<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>属性。)  
  
> [!NOTE]
>  如果使用 Visual Studio 设计器，在当用户单击的设计时调用此方法`Add Installer`上指定此类为其安装程序的组件。 安装程序不需要它可以从实时组件并将其存储在安装时使用的所有信息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The component you are associating with this installer does not inherit from <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the service should be delayed from starting until other automatically started services are running.</summary>
        <value>
          <see langword="true" /> 对延迟自动启动的服务;否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A>属性可以应用到任何服务，但它将被忽略，除非服务的启动模式是<xref:System.ServiceProcess.ServiceStartMode.Automatic>。 该设置将生效的下次重新启动系统。 服务控制管理器不能保证服务特定的开始时间。  
  
 延迟的自动启动服务不能加载顺序组的成员，但它可以依赖于另一个自动启动服务。 如果应用程序调用延迟的自动启动服务，然后加载它，则调用将失败。  
  
 不支持延迟的自动启动的操作系统，请将此属性设置不起。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the description for the service.</summary>
        <value>服务的说明。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ServiceProcess.ServiceInstaller.Description%2A>属性来描述向用户已安装的服务的用途。 显示已安装的服务的详细信息的应用程序中，用户可以查看服务说明。  
  
 例如，使用 Windows XP，你可以查看与服务控制命令行实用工具 (Sc.exe) 的服务说明或可以查看中的服务说明**服务**节点**计算机管理**控制台。  
  
   
  
## Examples  
 下面的代码示例设置新的 Windows 服务应用程序的安装属性。 该示例设置的服务名称，以及显示名称和说明。 分配后该服务的安装属性，该示例将添加<xref:System.ServiceProcess.ServiceInstaller>对象传递给<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the friendly name that identifies the service to the user.</summary>
        <value>与交互式工具经常使用的服务关联的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>使用时，例如，服务控制管理器中以提供服务的用户可读的描述性名称。 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>一个注册表值，但将绝不会用作注册表项。 因此，限制<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>不适用于属性值。 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 用作 HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services 注册表项，因此，将被限制。  
  
 显示名称永远不会由安装实用程序用来标识服务，因此如果没有选择，选择在限制的名称，因为没有为<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Installs the service by writing service application information to the registry. This method is meant to be used by installation tools, which process the appropriate methods automatically.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，你将不调用对象方法<xref:System.ServiceProcess.ServiceInstaller>在代码中; 它们是通常只能由调用安装实用程序。 安装实用程序将自动调用<xref:System.ServiceProcess.ServiceInstaller.Install%2A>在安装过程中的方法。 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>上生成异常的对象。  
  
 应用程序的安装例程维护自动有关已安装，使用项目安装程序的组件的信息<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 此状态信息传递给<xref:System.ServiceProcess.ServiceInstaller.Install%2A>作为`stateSaver`参数，将持续更新作为<xref:System.ServiceProcess.ServiceProcessInstaller>实例和每个<xref:System.ServiceProcess.ServiceInstaller>由实用工具安装实例。 它是通常情况下不必为你的代码来显式修改此状态信息。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller>与项目安装类安装信息普遍适用于所有关联<xref:System.ServiceProcess.ServiceInstaller>项目中的实例。 如果此服务已将它隔离从安装项目中的其他服务的任何内容，此方法被安装该特定于服务的信息。  
  
 若要安装服务，创建继承自项目安装程序类<xref:System.Configuration.Install.Installer>类，并将设置<xref:System.ComponentModel.RunInstallerAttribute>到类中的属性`true`。 在项目中，创建一个<xref:System.ServiceProcess.ServiceProcessInstaller>每个服务应用程序，另一个实例<xref:System.ServiceProcess.ServiceInstaller>应用程序中每个服务的实例。 在您项目安装程序类的构造函数，将设置为服务使用的安装属性<xref:System.ServiceProcess.ServiceProcessInstaller>和<xref:System.ServiceProcess.ServiceInstaller>实例，并将实例添加到<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
> [!NOTE]
>  建议添加安装程序实例; 使用构造函数但是，如果你需要将添加到<xref:System.Configuration.Install.Installer.Installers%2A>中的集合<xref:System.ServiceProcess.ServiceInstaller.Install%2A>方法，请务必执行上述相同的元素添加到集合中<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。  
  
 为派生自的所有类<xref:System.Configuration.Install.Installer>类的状态<xref:System.Configuration.Install.Installer.Installers%2A>集合必须在相同<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。 但是，您可以避免在对集合进行维护<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法如果你安装程序将实例添加到<xref:System.Configuration.Install.Installer.Installers%2A>在自定义安装程序类构造函数的集合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The installation does not contain a <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> for the executable.  -or-  The file name for the assembly is <see langword="null" /> or an empty string.  -or-  The service name is invalid.  -or-  The Service Control Manager could not be opened.</exception>
        <exception cref="T:System.ArgumentException">The display name for the service is more than 255 characters in length.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The system could not generate a handle to the service.  -or-  A service with that name is already installed.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> to which you are comparing the current installer.</param>
        <summary>Indicates whether two installers would install the same service.</summary>
        <returns>
          <see langword="true" /> if calling <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> on both of these installers would result in installing the same service; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> 例如，指示两个安装程序是否将安装在相同的用户帐户下相同的服务。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Rolls back service application information written to the registry by the installation procedure. This method is meant to be used by installation tools, which process the appropriate methods automatically.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，你将不调用对象方法<xref:System.ServiceProcess.ServiceInstaller>在代码中; 它们是通常只能由调用安装实用程序。 安装实用程序将自动调用<xref:System.ServiceProcess.ServiceInstaller.Install%2A>在安装过程中的方法。 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>上生成异常的对象。  
  
 应用程序的安装例程维护自动有关组件已安装，使用项目安装程序的信息<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 此状态信息传递给<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>作为`savedState`参数，将持续更新作为<xref:System.ServiceProcess.ServiceProcessInstaller>实例和每个<xref:System.ServiceProcess.ServiceInstaller>由实用工具安装实例。 它是通常情况下不必为你的代码来显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the name used by the system to identify this service. This property must be identical to the <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> of the service you want to install.</summary>
        <value>要安装的服务名称。 在尝试安装服务安装实用程序之前，必须设置此值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 至关重要的<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>能与<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>类派生自的<xref:System.ServiceProcess.ServiceBase>。 通常情况下，值<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>在服务应用程序的可执行文件的 main （） 函数中设置服务的属性。 服务控制管理器使用<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>属性可以查找服务在服务内此可执行文件。  
  
 当你将设置<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>服务安装程序，<xref:System.Diagnostics.EventLog.Source%2A>相关联的事件日志设置为相同的值。 这允许服务自动登录到计算机上的应用程序日志服务命令 （例如启动和停止） 调用。  
  
> [!NOTE]
>  如果按相同名称的源已存在的计算机上，但日志而不是应用程序日志中，将引发异常。 如果源存在，并且与应用程序日志关联，该源可用于报告命令调用服务，并不会引发异常。  
  
 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>不能为`null`或长度为零。 其最大大小为 256 个字符。 它还不能包含向前或向后斜杠 / 或\\，或来自 ASCII 字符字符设置为，值小于十进制值 32。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> property is invalid.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the services that must be running for this service to run.</summary>
        <value>此安装程序与关联的服务可以运行之前必须运行的服务数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 服务可能需要其他服务正在运行，才能启动。 此属性中的信息写入到注册表中的键。 当用户 （或在自动启动系统） 尝试运行该服务时，服务控制管理器 (SCM) 验证每个数组中的服务已经启动。  
  
 如果数组中的任何服务未然后运行，则 SCM 将尝试启动它们。 这包括服务与`Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>。  
  
 如果此服务所依赖的任何服务启动失败时，将无法启动此服务。 如果系统未启动，因为没有在系统级别来检测该处理异常，不会引发异常。 决定如何处理服务启动失败，并在你的代码中实现这。 通常情况下，对话框向用户显示在启动时如果无法启动服务。  
  
 如果服务未启动，会在应用程序事件日志中写入一个条目。  
  
 此服务所依赖的服务不需要处于同一可执行文件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates how and when this service is started.</summary>
        <value>A<see cref="T:System.ServiceProcess.ServiceStartMode" />表示该服务已启动的方式。 默认值是<see langword="Manual" />，它指定，该服务将不自动重新启动后。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>指定，在重新启动后自动启动该服务或用户必须手动启动该服务。 服务也被禁用，指定，不能启动，手动或以编程方式，直至启用。  
  
 无法更改<xref:System.ServiceProcess.ServiceInstaller>安装后的属性值。 若要更改<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>，你必须卸载并重新安装你的服务，或者手动更改使用服务控制管理器的设置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The start mode is not a value of the <see cref="T:System.ServiceProcess.ServiceStartMode" /> enumeration.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Uninstalls the service by removing information about it from the registry.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 卸载在卸载之前停止该服务的第一个尝试。 如果不停止该服务，不捕获到异常，并方法继续删除服务。  
  
 通常情况下，你将不调用对象方法<xref:System.ServiceProcess.ServiceInstaller>在代码中; 它们是通常只能由调用安装实用程序。 InstallUtil 用于卸载服务，以及安装它们。卸载命令行调用中将一个交换机。  
  
 应用程序的卸载例程维护自动有关组件的信息正在卸载，使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 此状态信息传递给<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>作为`savedState`参数，将持续更新作为<xref:System.ServiceProcess.ServiceProcessInstaller>实例和每个<xref:System.ServiceProcess.ServiceInstaller>由实用工具安装实例。 它是通常情况下不必为你的代码来显式修改此状态信息。  
  
 为派生自的所有类<xref:System.Configuration.Install.Installer>类的状态<xref:System.Configuration.Install.Installer.Installers%2A>集合必须在相同<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。 但是，您可以避免在对集合进行维护<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法如果你安装程序将实例添加到<xref:System.Configuration.Install.Installer.Installers%2A>在自定义安装程序类构造函数的集合。  
  
 因此，如果一个服务卸载失败，这不会影响内的其他服务 （通常是相同的安装项目） 正在卸载，没有用于卸载，回滚机制。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">The Service Control Manager could not be opened.  -or-  The system could not get a handle to the service.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>