<Type Name="ServiceBase" FullName="System.ServiceProcess.ServiceBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d659a5675f8e308404ab56d663607e4230bf1530" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceBase : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceBase extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceBase&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceBase : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="65ae1-101">为将作为服务应用程序的一部分而存在的服务提供基类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="65ae1-101">Provides a base class for a service that will exist as part of a service application.</span>
      </span>
      <span data-ttu-id="65ae1-102">在创建新的服务类时，必须从 <see cref="T:System.ServiceProcess.ServiceBase" /> 派生。</span>
      <span class="sxs-lookup">
        <span data-stu-id="65ae1-102">
          <see cref="T:System.ServiceProcess.ServiceBase" /> must be derived from when creating a new service class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-103">派生自<xref:System.ServiceProcess.ServiceBase>在服务应用程序中定义服务类时。</span><span class="sxs-lookup"><span data-stu-id="65ae1-103">Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application.</span></span> <span data-ttu-id="65ae1-104">任何有用的服务重写<xref:System.ServiceProcess.ServiceBase.OnStart%2A>和<xref:System.ServiceProcess.ServiceBase.OnStop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-104">Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods.</span></span> <span data-ttu-id="65ae1-105">对于附加功能，您可以重写<xref:System.ServiceProcess.ServiceBase.OnPause%2A>和<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>用在响应中的服务状态的更改的特定行为。</span><span class="sxs-lookup"><span data-stu-id="65ae1-105">For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.</span></span>  
  
 <span data-ttu-id="65ae1-106">服务是不支持用户界面的长时间运行可执行文件不可能在登录的用户帐户下运行。</span><span class="sxs-lookup"><span data-stu-id="65ae1-106">A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.</span></span> <span data-ttu-id="65ae1-107">服务可运行无任何用户在登录到计算机。</span><span class="sxs-lookup"><span data-stu-id="65ae1-107">The service can run without any user being logged on to the computer.</span></span>  
  
 <span data-ttu-id="65ae1-108">默认情况下，服务不是管理员帐户相同的系统帐户下运行。</span><span class="sxs-lookup"><span data-stu-id="65ae1-108">By default, services run under the System account, which is not the same as the Administrator account.</span></span> <span data-ttu-id="65ae1-109">无法更改系统帐户的权限。</span><span class="sxs-lookup"><span data-stu-id="65ae1-109">You cannot change the rights of the System account.</span></span> <span data-ttu-id="65ae1-110">或者，可以使用<xref:System.ServiceProcess.ServiceProcessInstaller>以指定将在其下运行服务的用户帐户。</span><span class="sxs-lookup"><span data-stu-id="65ae1-110">Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.</span></span>  
  
 <span data-ttu-id="65ae1-111">可执行文件可以包含多个服务，但必须包含一个单独<xref:System.ServiceProcess.ServiceInstaller>为每个服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-111">An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service.</span></span> <span data-ttu-id="65ae1-112"><xref:System.ServiceProcess.ServiceInstaller>实例向系统注册该服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-112">The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system.</span></span> <span data-ttu-id="65ae1-113">安装程序还将每个服务与事件日志可用于记录服务命令相关联。</span><span class="sxs-lookup"><span data-stu-id="65ae1-113">The installer also associates each service with an event log that you can use to record service commands.</span></span> <span data-ttu-id="65ae1-114">`main()`可执行文件中的函数定义应运行哪些服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-114">The `main()` function in the executable defines which services should run.</span></span> <span data-ttu-id="65ae1-115">该服务的当前工作目录是系统目录中，而非可执行文件所在的目录。</span><span class="sxs-lookup"><span data-stu-id="65ae1-115">The current working directory of the service is the system directory, not the directory in which the executable is located.</span></span>  
  
 <span data-ttu-id="65ae1-116">当你启动服务时，系统查找可执行文件，并运行<xref:System.ServiceProcess.ServiceBase.OnStart%2A>为该服务，可执行文件中包含的方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-116">When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable.</span></span> <span data-ttu-id="65ae1-117">但是，运行该服务不是与运行可执行文件相同。</span><span class="sxs-lookup"><span data-stu-id="65ae1-117">However, running the service is not the same as running the executable.</span></span> <span data-ttu-id="65ae1-118">可执行文件仅加载服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-118">The executable only loads the service.</span></span> <span data-ttu-id="65ae1-119">访问此服务时 （例如，启动和停止） 通过服务控制管理器。</span><span class="sxs-lookup"><span data-stu-id="65ae1-119">The service is accessed (for example, started and stopped) through the Service Control Manager.</span></span>  
  
 <span data-ttu-id="65ae1-120">可执行文件调用<xref:System.ServiceProcess.ServiceBase>派生类的构造函数的第一个时间调用服务上的启动。</span><span class="sxs-lookup"><span data-stu-id="65ae1-120">The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service.</span></span> <span data-ttu-id="65ae1-121"><xref:System.ServiceProcess.ServiceBase.OnStart%2A>构造函数执行后立即调用命令处理方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-121">The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes.</span></span> <span data-ttu-id="65ae1-122">构造函数不执行此服务已加载，在首次后再次在需要分隔从由构造函数执行的处理，所以<xref:System.ServiceProcess.ServiceBase.OnStart%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-122">The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="65ae1-123">可以通过释放任何资源<xref:System.ServiceProcess.ServiceBase.OnStop%2A>应在中创建<xref:System.ServiceProcess.ServiceBase.OnStart%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-123">Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="65ae1-124">创建资源的构造函数中会阻止它们正在正确创建，如果服务启动后再次<xref:System.ServiceProcess.ServiceBase.OnStop%2A>已发布资源。</span><span class="sxs-lookup"><span data-stu-id="65ae1-124">Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.</span></span>  
  
 <span data-ttu-id="65ae1-125">服务控制管理器 (SCM) 使您能够与服务交互。</span><span class="sxs-lookup"><span data-stu-id="65ae1-125">The Service Control Manager (SCM) provides a way to interact with the service.</span></span> <span data-ttu-id="65ae1-126">SCM 可用于将开始、 停止、 暂停、 继续或自定义命令传递到服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-126">You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.</span></span> <span data-ttu-id="65ae1-127">SCM 使用的值<xref:System.ServiceProcess.ServiceBase.CanStop%2A>和<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>若要确定服务是否接受停止，暂停或继续命令。</span><span class="sxs-lookup"><span data-stu-id="65ae1-127">The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands.</span></span> <span data-ttu-id="65ae1-128">停止、 暂停和继续启用 SCM 的上下文菜单仅当在对应的属性<xref:System.ServiceProcess.ServiceBase.CanStop%2A>或<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`true`服务类中。</span><span class="sxs-lookup"><span data-stu-id="65ae1-128">Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class.</span></span> <span data-ttu-id="65ae1-129">如果启用，则将命令传递到服务，和<xref:System.ServiceProcess.ServiceBase.OnStop%2A>， <xref:System.ServiceProcess.ServiceBase.OnPause%2A>，或<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="65ae1-129">If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called.</span></span> <span data-ttu-id="65ae1-130">如果<xref:System.ServiceProcess.ServiceBase.CanStop%2A>， <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>，或<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`false`，相应的命令处理方法 (如<xref:System.ServiceProcess.ServiceBase.OnStop%2A>) 将不会处理，即使已实现的方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-130">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.</span></span>  
  
 <span data-ttu-id="65ae1-131">你可以使用<xref:System.ServiceProcess.ServiceController>类以编程方式执行操作 SCM 执行使用用户界面。</span><span class="sxs-lookup"><span data-stu-id="65ae1-131">You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface.</span></span> <span data-ttu-id="65ae1-132">你可以自动执行可在控制台中的任务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-132">You can automate the tasks available in the console.</span></span> <span data-ttu-id="65ae1-133">如果<xref:System.ServiceProcess.ServiceBase.CanStop%2A>， <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>，或<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`true`但尚未实现相应的命令处理方法 (如<xref:System.ServiceProcess.ServiceBase.OnStop%2A>) 系统引发异常，并将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="65ae1-133">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.</span></span>  
  
 <span data-ttu-id="65ae1-134">不需要实现<xref:System.ServiceProcess.ServiceBase.OnStart%2A>， <xref:System.ServiceProcess.ServiceBase.OnStop%2A>，或在任何其他方法<xref:System.ServiceProcess.ServiceBase>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-134">You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="65ae1-135">但是，服务的行为中所述<xref:System.ServiceProcess.ServiceBase.OnStart%2A>，因此应在最低限度上，重写此成员。</span><span class="sxs-lookup"><span data-stu-id="65ae1-135">However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden.</span></span> <span data-ttu-id="65ae1-136">`main()`函数的可执行文件中注册服务可执行文件与服务控制管理器中，通过调用<xref:System.ServiceProcess.ServiceBase.Run%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-136">The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method.</span></span> <span data-ttu-id="65ae1-137"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>属性<xref:System.ServiceProcess.ServiceBase>对象传递给<xref:System.ServiceProcess.ServiceBase.Run%2A>方法必须与匹配<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>该服务的服务安装程序的属性。</span><span class="sxs-lookup"><span data-stu-id="65ae1-137">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.</span></span>  
  
 <span data-ttu-id="65ae1-138">你可以使用`InstallUtil.exe`以在你的系统上安装服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-138">You can use `InstallUtil.exe` to install services on your system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65ae1-139">你可以指定日志而不是应用程序事件日志，以接收通知的服务调用，两者都不<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>也不<xref:System.ServiceProcess.ServiceBase.EventLog%2A>属性可以写入自定义日志。</span><span class="sxs-lookup"><span data-stu-id="65ae1-139">You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log.</span></span> <span data-ttu-id="65ae1-140">设置<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>到`false`如果你不想要使用自动日志记录。</span><span class="sxs-lookup"><span data-stu-id="65ae1-140">Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-141">创建 <see cref="T:System.ServiceProcess.ServiceBase" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-141">Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceBase" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-142">不创建的实例<xref:System.ServiceProcess.ServiceBase>类。</span><span class="sxs-lookup"><span data-stu-id="65ae1-142">Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class.</span></span> <span data-ttu-id="65ae1-143">相反，派生自<xref:System.ServiceProcess.ServiceBase>并实例化派生的类。</span><span class="sxs-lookup"><span data-stu-id="65ae1-143">Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class.</span></span> <span data-ttu-id="65ae1-144">你需要从继承的类的构造函数中实现所需的最低<xref:System.ServiceProcess.ServiceBase>设置<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>在组件。</span><span class="sxs-lookup"><span data-stu-id="65ae1-144">The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component.</span></span> <span data-ttu-id="65ae1-145">没有任何其他处理特定要求的构造函数中。</span><span class="sxs-lookup"><span data-stu-id="65ae1-145">No other processing is specifically required in the constructor.</span></span> <span data-ttu-id="65ae1-146">应处理中的大多数初始化<xref:System.ServiceProcess.ServiceBase.OnStart%2A>而不是构造函数中。</span><span class="sxs-lookup"><span data-stu-id="65ae1-146">You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor.</span></span> <span data-ttu-id="65ae1-147">否则，为已停止后重新启动服务时，对象将被重新初始化不能保证。</span><span class="sxs-lookup"><span data-stu-id="65ae1-147">Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.</span></span>  
  
 <span data-ttu-id="65ae1-148">如果你在派生类中重写构造函数，请在代码中调用基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="65ae1-148">If you override the constructor in your derived class, call the base class constructor in your code.</span></span>  
  
 <span data-ttu-id="65ae1-149"><xref:System.ServiceProcess.ServiceBase>构造函数集<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>到`true`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-149">The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`.</span></span> <span data-ttu-id="65ae1-150">如果你不希望自动登录到服务的调用从服务控制管理器 (SCM)，设置<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>到`false`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-150">If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`.</span></span>  
  
 <span data-ttu-id="65ae1-151">如果可执行文件包含单个服务，系统在开始从 SCM 中，选择、 运行析构函数，如果调用停止时调用服务的构造函数。</span><span class="sxs-lookup"><span data-stu-id="65ae1-151">If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.</span></span>  
  
 <span data-ttu-id="65ae1-152">如果可执行文件包含多个服务，一个服务上的启动调用时，构造函数要调用的可执行文件中的所有服务，但只有指定的服务会启动。</span><span class="sxs-lookup"><span data-stu-id="65ae1-152">If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.</span></span> <span data-ttu-id="65ae1-153">当所有服务已都停止，不单独在每个服务已都停止时，将在一起运行的服务的析构函数。</span><span class="sxs-lookup"><span data-stu-id="65ae1-153">Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65ae1-154">如果重写基类构造函数，则应在派生类的构造函数中显式调用它。</span><span class="sxs-lookup"><span data-stu-id="65ae1-154">If you override the base class constructor, you should explicitly call it in the constructor of your derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      </Docs>
    </Member>
    <Member MemberName="AutoLog">
      <MemberSignature Language="C#" Value="public bool AutoLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoLog As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoLog { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBAutoLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-155">指示是否在事件日志中报告“开始”、“停止”、“暂停”以及“继续”命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-155">Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-156">为 <see langword="true" /> 时在事件日志中报告信息；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-156">
              <see langword="true" /> to report information in the event log; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-157">设置<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>到`true`指示服务启动、 停止、 暂停、 用于报告命令失败，以及状态更改信息的应用程序事件日志并继续在服务上的事件。</span><span class="sxs-lookup"><span data-stu-id="65ae1-157">Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.</span></span> <span data-ttu-id="65ae1-158">服务的名称用作日志的<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-158">The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="65ae1-159">若要向自定义的事件日志而不是应用程序日志中报告的信息，请设置<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>到`false`和写入命令处理方法中的说明<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>， <xref:System.ServiceProcess.ServiceBase.OnPause%2A>，或<xref:System.ServiceProcess.ServiceBase.OnStop%2A>发送到相应的日志。</span><span class="sxs-lookup"><span data-stu-id="65ae1-159">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65ae1-160"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>，它向事件日志中，源字符串之前必须先设置服务尝试写入到事件日志。</span><span class="sxs-lookup"><span data-stu-id="65ae1-160">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.</span></span> <span data-ttu-id="65ae1-161">尝试访问事件日志设置源名称之前引发异常。</span><span class="sxs-lookup"><span data-stu-id="65ae1-161">Trying to access the event log before the source name is set throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandlePowerEvent">
      <MemberSignature Language="C#" Value="public bool CanHandlePowerEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandlePowerEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandlePowerEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandlePowerEvent { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-162">获取或设置一个值，该值指示服务是否可以处理计算机电源状态更改通知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-162">Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-163">如果服务处理 <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> 类中指示的计算机电源状态更改，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-163">
              <see langword="true" /> if the service handles the computer power status changes indicated in the <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> class, otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-164">当计算机电源状态更改时，服务控制管理器 (SCM) 验证服务是否接受使用的值的电源事件命令<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-164">When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.</span></span>  
  
 <span data-ttu-id="65ae1-165">如果<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>是`true`，则将命令传递到服务和<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>如果定义会调用方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-165">If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined.</span></span> <span data-ttu-id="65ae1-166">如果<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>未实现在派生类中，则 SCM 处理通过空基类 power 事件<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-166">If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ae1-167">此属性将在服务启动后被修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-167">This property is modified after the service was started.</span>
          </span>
        </exception>
        <altmember cref="T:System.ServiceProcess.PowerBroadcastStatus" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandleSessionChangeEvent">
      <MemberSignature Language="C#" Value="public bool CanHandleSessionChangeEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandleSessionChangeEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandleSessionChangeEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandleSessionChangeEvent { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-168">获取或设置一个值，该值指示服务是否可以处理从终端服务器会话接收到的会话更改事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-168">Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-169">如果服务可以处理终端服务器会话更改事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-169">
              <see langword="true" /> if the service can handle Terminal Server session change events; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ae1-170">此属性将在服务启动后被修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-170">This property is modified after the service was started.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-171">获取或设置指示服务是否可以暂停并再继续的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-171">Gets or sets a value indicating whether the service can be paused and resumed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-172">如果服务可以暂停，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-172">
              <see langword="true" /> if the service can be paused; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-173">设置的值<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>服务的构造函数中的属性。</span><span class="sxs-lookup"><span data-stu-id="65ae1-173">Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service.</span></span>  
  
 <span data-ttu-id="65ae1-174">服务已暂停，它会停止正在进行的工作。</span><span class="sxs-lookup"><span data-stu-id="65ae1-174">When a service is paused, it halts what it is doing.</span></span> <span data-ttu-id="65ae1-175">当你继续 （不管是通过服务控制管理器或以编程方式），服务<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>运行。</span><span class="sxs-lookup"><span data-stu-id="65ae1-175">When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.</span></span>  
  
 <span data-ttu-id="65ae1-176">暂停请求发送到服务，可以节省系统资源。</span><span class="sxs-lookup"><span data-stu-id="65ae1-176">Sending a Pause request to the service can conserve system resources.</span></span> <span data-ttu-id="65ae1-177">暂停可能不会释放所有系统资源，但停止。</span><span class="sxs-lookup"><span data-stu-id="65ae1-177">Pause may not release all system resources, but Stop does.</span></span> <span data-ttu-id="65ae1-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> 和<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>通常实现来执行较少处理比<xref:System.ServiceProcess.ServiceBase.OnStop%2A>和<xref:System.ServiceProcess.ServiceBase.OnStart%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span>  
  
 <span data-ttu-id="65ae1-179">当<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`true`，重写<xref:System.ServiceProcess.ServiceBase.OnPause%2A>和<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>以指定服务控制管理器 (SCM) 将暂停或继续请求传递给你的服务时应执行的处理。</span><span class="sxs-lookup"><span data-stu-id="65ae1-179">When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="65ae1-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 应为撤消中的处理实现<xref:System.ServiceProcess.ServiceBase.OnPause%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="65ae1-181">如果<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`false`、 SCM 不会传递暂停或继续向服务，因此请求<xref:System.ServiceProcess.ServiceBase.OnPause%2A>和<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>方法将不会调用，即使它们实现。</span><span class="sxs-lookup"><span data-stu-id="65ae1-181">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="65ae1-182">SCM 中,`Pause`和`Continue`控件被禁用时<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`false`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-182">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ae1-183">服务已启动。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-183">The service has already been started.</span>
          </span>
          <span data-ttu-id="65ae1-184">在服务启动后不能更改 <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-184">The <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> property cannot be changed once the service has started.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-185">获取或设置一个值，该值指示系统关闭时是否应通知服务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-185">Gets or sets a value indicating whether the service should be notified when the system is shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-186">如果系统关闭时应通知服务，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-186">
              <see langword="true" /> if the service should be notified when the system is shutting down; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="65ae1-187">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-187">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-188">如果<xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>是`true`，当系统关闭时通知服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-188">If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down.</span></span> <span data-ttu-id="65ae1-189">在关闭，<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>如果它已实现派生类中调用方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-189">At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65ae1-190">只有系统应会导致<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>方法来执行; 服务可以调用它，但这不建议这样做。</span><span class="sxs-lookup"><span data-stu-id="65ae1-190">Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ae1-191">服务已启动。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-191">The service has already been started.</span>
          </span>
          <span data-ttu-id="65ae1-192">在服务启动后不能更改 <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-192">The <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> property cannot be changed once the service has started.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-193">获取或设置一个值，该值指示服务启动后是否可以停止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-193">Gets or sets a value indicating whether the service can be stopped once it has started.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-194">如果服务可以停止并调用了 <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-194">
              <see langword="true" /> if the service can be stopped and the <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> method called; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-195">服务控制管理器 (SCM) 当在服务上调用时停止时，验证服务是否接受使用的值的停止命令<xref:System.ServiceProcess.ServiceBase.CanStop%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-195">When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>.</span></span> <span data-ttu-id="65ae1-196">对于大多数服务的值<xref:System.ServiceProcess.ServiceBase.CanStop%2A>是`true`，但某些操作系统服务，例如，不允许用户将其停止。</span><span class="sxs-lookup"><span data-stu-id="65ae1-196">For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them.</span></span>  
  
 <span data-ttu-id="65ae1-197">如果<xref:System.ServiceProcess.ServiceBase.CanStop%2A>是`true`，停止命令传递给服务和<xref:System.ServiceProcess.ServiceBase.OnStop%2A>定义后调用方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-197">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="65ae1-198">如果<xref:System.ServiceProcess.ServiceBase.OnStop%2A>未在派生类中，停止命令通过空基类的 SCM 句柄实现<xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-198">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ae1-199">服务已启动。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-199">The service has already been started.</span>
          </span>
          <span data-ttu-id="65ae1-200">在服务启动后不能更改 <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-200">The <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> property cannot be changed once the service has started.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="65ae1-201">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-201">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ae1-202">处置由 <see cref="T:System.ServiceProcess.ServiceBase" /> 占用的资源（内存除外）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-202">Disposes of the resources (other than memory) used by the <see cref="T:System.ServiceProcess.ServiceBase" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-203">调用<xref:System.ServiceProcess.ServiceBase.Dispose%2A>在派生类中 (也通过它在<xref:System.ServiceProcess.ServiceBase>类) 在完成使用派生的类时。</span><span class="sxs-lookup"><span data-stu-id="65ae1-203">Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class.</span></span> <span data-ttu-id="65ae1-204"><xref:System.ServiceProcess.ServiceBase.Dispose%2A>方法使派生的类中不可用状态。</span><span class="sxs-lookup"><span data-stu-id="65ae1-204">The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state.</span></span> <span data-ttu-id="65ae1-205">在调用<xref:System.ServiceProcess.ServiceBase.Dispose%2A>，必须释放对派生类的所有引用和<xref:System.ServiceProcess.ServiceBase>以便可以通过垃圾回收回收它们占用的内存。</span><span class="sxs-lookup"><span data-stu-id="65ae1-205">After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65ae1-206">始终调用<xref:System.ServiceProcess.ServiceBase.Dispose%2A>在发布到类派生自最后一个引用之前<xref:System.ServiceProcess.ServiceBase>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-206">Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="65ae1-207">否则为资源<xref:System.ServiceProcess.ServiceBase>和派生的类使用的将垃圾回收调用对象的析构函数之前不会释放。</span><span class="sxs-lookup"><span data-stu-id="65ae1-207">Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.</span></span>  
  
 <span data-ttu-id="65ae1-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> 通常实现来处理中的代码<xref:System.ServiceProcess.ServiceBase.OnPause%2A>组合通过调用<xref:System.ServiceProcess.ServiceBase.Dispose%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>.</span></span> <span data-ttu-id="65ae1-209">如果你选择执行此操作在派生类中，则通常实现<xref:System.ServiceProcess.ServiceBase.OnStart%2A>以分配任何<xref:System.ServiceProcess.ServiceBase.Dispose%2A>发布。</span><span class="sxs-lookup"><span data-stu-id="65ae1-209">If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="EventLog">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.EventLog EventLog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLog EventLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.EventLog" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventLog As EventLog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::EventLog ^ EventLog { System::Diagnostics::EventLog ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-210">获取一个事件日志，它可用于将服务命令调用的通知（如“开始”和“停止”）写入“应用程序”事件日志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-210">Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-211">
            <see cref="T:System.Diagnostics.EventLog" /> 实例，它的源注册到 Application 日志中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-211">An <see cref="T:System.Diagnostics.EventLog" /> instance whose source is registered to the Application log.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-212">构造函数初始化<xref:System.ServiceProcess.ServiceBase.EventLog%2A>到具有的实例的属性<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>和<xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType>属性集。</span><span class="sxs-lookup"><span data-stu-id="65ae1-212">The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType> properties set.</span></span> <span data-ttu-id="65ae1-213">源是<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>的服务，并在日志已计算机的应用程序日志。</span><span class="sxs-lookup"><span data-stu-id="65ae1-213">The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log.</span></span> <span data-ttu-id="65ae1-214">这些值自动设置，不能更改服务命令的自动日志记录功能。</span><span class="sxs-lookup"><span data-stu-id="65ae1-214">These values are set automatically and cannot be changed for automatic logging of service commands.</span></span>  
  
 <span data-ttu-id="65ae1-215">当<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>是`true`，启动、 停止、 暂停、 继续和自定义命令记录自动在应用程序事件日志。</span><span class="sxs-lookup"><span data-stu-id="65ae1-215">When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.</span></span> <span data-ttu-id="65ae1-216">你可以使用<xref:System.ServiceProcess.ServiceBase.EventLog%2A>属性将其他消息写入到以及该日志。</span><span class="sxs-lookup"><span data-stu-id="65ae1-216">You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well.</span></span> <span data-ttu-id="65ae1-217">组件调用<xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType>使用此<xref:System.ServiceProcess.ServiceBase.EventLog%2A>成员。</span><span class="sxs-lookup"><span data-stu-id="65ae1-217">The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member.</span></span>  
  
 <span data-ttu-id="65ae1-218">若要向自定义的事件日志而不是应用程序日志中报告的信息，请设置<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>到`false`和写入命令处理方法中的说明<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>， <xref:System.ServiceProcess.ServiceBase.OnPause%2A>，或<xref:System.ServiceProcess.ServiceBase.OnStop%2A>发送到相应的日志。</span><span class="sxs-lookup"><span data-stu-id="65ae1-218">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-219">获取或设置服务的退出代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-219">Gets or sets the exit code for the service.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-220">服务的退出代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-220">The exit code for the service.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-221">设置<xref:System.ServiceProcess.ServiceBase.ExitCode%2A>属性在停止服务，以指示错误到服务控制管理器之前的非零值。</span><span class="sxs-lookup"><span data-stu-id="65ae1-221">Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxNameLength">
      <MemberSignature Language="C#" Value="public const int MaxNameLength = 80;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxNameLength = (80)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxNameLength As Integer  = 80" />
      <MemberSignature Language="C++ CLI" Value="public: int MaxNameLength = 80;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-222">指示服务名称的最大大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-222">Indicates the maximum size for a service name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-223">ServiceName 和 DisplayName 都具有在服务类上设置属性时，必须遵守的大小限制。</span><span class="sxs-lookup"><span data-stu-id="65ae1-223">ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
      </Docs>
    </Member>
    <Member MemberName="OnContinue">
      <MemberSignature Language="C#" Value="protected virtual void OnContinue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContinue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnContinue" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContinue ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContinue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-224">在派生类中实现时，<see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> 于“服务控制管理器”(SCM) 将“继续”命令发送到服务时运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-224">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> runs when a Continue command is sent to the service by the Service Control Manager (SCM).</span>
          </span>
          <span data-ttu-id="65ae1-225">指定要在服务暂停后恢复正常功能时采取的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-225">Specifies actions to take when a service resumes normal functioning after being paused.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-226">实现<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>镜像你的应用程序响应<xref:System.ServiceProcess.ServiceBase.OnPause%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-226">Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span> <span data-ttu-id="65ae1-227">当你继续 （不管是通过服务控制台或以编程方式），服务<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>处理运行时，和服务再次变为活动状态。</span><span class="sxs-lookup"><span data-stu-id="65ae1-227">When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="65ae1-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 需要时重写<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="65ae1-229">如果<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`false`、 SCM 不会传递暂停或继续向服务，因此请求<xref:System.ServiceProcess.ServiceBase.OnPause%2A>和<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>方法将不会调用，即使它们实现。</span><span class="sxs-lookup"><span data-stu-id="65ae1-229">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="65ae1-230">SCM 中,`Pause`和`Continue`控件被禁用时<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`false`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-230">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCustomCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCustomCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCustomCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCustomCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCustomCommand(int command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="65ae1-231">发送给服务的命令消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-231">The command message sent to the service.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ae1-232">在派生类中实现时，<see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> 于“服务控制管理器”(SCM) 向服务传递自定义命令时执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-232">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> executes when the Service Control Manager (SCM) passes a custom command to the service.</span>
          </span>
          <span data-ttu-id="65ae1-233">指定要在具有指定参数值的命令出现时采取的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-233">Specifies actions to take when a command with the specified parameter value occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> 允许你指定启动、 停止、 暂停和继续服务以外的其他功能。</span><span class="sxs-lookup"><span data-stu-id="65ae1-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.</span></span>  
  
 <span data-ttu-id="65ae1-235">SCM 将不检查自定义的命令，来验证服务是否支持`command`参数中传递。</span><span class="sxs-lookup"><span data-stu-id="65ae1-235">The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in.</span></span> <span data-ttu-id="65ae1-236">它的自定义命令将直接传递到该服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-236">It passes the custom command directly to the service.</span></span> <span data-ttu-id="65ae1-237">如果服务不能识别`command`参数，它不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="65ae1-237">If the service does not recognize the `command` parameter, it does nothing.</span></span>  
  
 <span data-ttu-id="65ae1-238">为由引发自定义命令<xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>中的语句<xref:System.ServiceProcess.ServiceController>组件。</span><span class="sxs-lookup"><span data-stu-id="65ae1-238">Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component.</span></span> <span data-ttu-id="65ae1-239">使用交换语句或如果...然后使用条件来处理在服务定义的自定义命令。</span><span class="sxs-lookup"><span data-stu-id="65ae1-239">Use a switch statement or if..then condition to handle the custom commands you define on your service.</span></span>  
  
 <span data-ttu-id="65ae1-240">可以在你的应用程序中定义，也可以在中使用的自定义命令的唯一值<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>是那些介于 128 到 255 之间。</span><span class="sxs-lookup"><span data-stu-id="65ae1-240">The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255.</span></span> <span data-ttu-id="65ae1-241">低于 128 的整数对应于系统保留值。</span><span class="sxs-lookup"><span data-stu-id="65ae1-241">Integers below 128 correspond to system-reserved values.</span></span>  
  
 <span data-ttu-id="65ae1-242">如果<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>属性是`true`，自定义命令，与所有其他命令一样将项写入事件日志以报告方法执行是成功还是失败。</span><span class="sxs-lookup"><span data-stu-id="65ae1-242">If the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> property is `true`, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPause ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-243">在派生类中实现时，该方法于“服务控制管理器”(SCM) 将“暂停”命令发送到服务时执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-243">When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).</span>
          </span>
          <span data-ttu-id="65ae1-244">指定要在服务暂停时采取的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-244">Specifies actions to take when a service pauses.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-245">使用<xref:System.ServiceProcess.ServiceBase.OnPause%2A>以指定当服务接收暂停命令时发生的处理。</span><span class="sxs-lookup"><span data-stu-id="65ae1-245">Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command.</span></span> <span data-ttu-id="65ae1-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> 需要时重写<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="65ae1-247">当你继续已暂停的服务 （不管是通过服务控制台或以编程方式），<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>处理运行，和服务再次成为活动。</span><span class="sxs-lookup"><span data-stu-id="65ae1-247">When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="65ae1-248">暂停命令仅允许你的应用程序对特定事件做出反应。</span><span class="sxs-lookup"><span data-stu-id="65ae1-248">The Pause command only allows your application to react to a specific event.</span></span> <span data-ttu-id="65ae1-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> 没有任何影响到未定义要执行的操作的服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.</span></span>  
  
 <span data-ttu-id="65ae1-250">暂停请求发送到服务可以节省系统资源，因为暂停不需要释放所有系统资源。</span><span class="sxs-lookup"><span data-stu-id="65ae1-250">Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.</span></span> <span data-ttu-id="65ae1-251">例如，如果线程已开启，过程暂停服务，而不是停止它可以使线程能够保持打开状态，而无需重新分配它们时该服务将继续。</span><span class="sxs-lookup"><span data-stu-id="65ae1-251">For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.</span></span> <span data-ttu-id="65ae1-252">如果你定义暂停释放所有系统资源，它的行为类似停止命令。</span><span class="sxs-lookup"><span data-stu-id="65ae1-252">If you define Pause to release all system resources, it behaves like a Stop command.</span></span>  
  
 <span data-ttu-id="65ae1-253">设置<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>到`true`，并重写<xref:System.ServiceProcess.ServiceBase.OnPause%2A>和<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>以指定应发生 SCM 将暂停或继续请求传递给你的服务时的处理。</span><span class="sxs-lookup"><span data-stu-id="65ae1-253">Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="65ae1-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 应为撤消中的处理实现<xref:System.ServiceProcess.ServiceBase.OnPause%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="65ae1-255">如果<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`false`、 SCM 不会传递暂停或继续向服务，因此请求<xref:System.ServiceProcess.ServiceBase.OnPause%2A>和<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>即使实现，将不会调用方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-255">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented.</span></span> <span data-ttu-id="65ae1-256">SCM 中,`Pause`和`Continue`控件被禁用时<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>是`false`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-256">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPowerEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPowerEvent(valuetype System.ServiceProcess.PowerBroadcastStatus powerStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnPowerEvent (powerStatus As PowerBroadcastStatus) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnPowerEvent(System::ServiceProcess::PowerBroadcastStatus powerStatus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="powerStatus" Type="System.ServiceProcess.PowerBroadcastStatus" />
      </Parameters>
      <Docs>
        <param name="powerStatus">
          <span data-ttu-id="65ae1-257">
            <see cref="T:System.ServiceProcess.PowerBroadcastStatus" />，指示来自系统的有关电源状态的通知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-257">A <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> that indicates a notification from the system about its power status.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ae1-258">当在派生类中实现时，该方法于计算机电源状态更改时执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-258">When implemented in a derived class, executes when the computer's power status has changed.</span>
          </span>
          <span data-ttu-id="65ae1-259">这适用于膝上型计算机进入挂起模式时的情况，该模式不同于系统关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-259">This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65ae1-260">当在派生类中实现时，应用程序的需要将确定要返回的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-260">When implemented in a derived class, the needs of your application determine what value to return.</span>
          </span>
          <span data-ttu-id="65ae1-261">例如，如果传递了 <see langword="QuerySuspend" /> 广播状态，则可以通过返回 <see langword="false" /> 来使应用程序拒绝查询。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-261">For example, if a <see langword="QuerySuspend" /> broadcast status is passed, you could cause your application to reject the query by returning <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-262">使用<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>指定时发生中指示的系统事件的处理<xref:System.ServiceProcess.PowerBroadcastStatus>枚举时发生-例如，计算机置于挂起模式，或指示电池电量不足。</span><span class="sxs-lookup"><span data-stu-id="65ae1-262">Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.</span></span>  
  
 <span data-ttu-id="65ae1-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> 需要时重写<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionChange">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionChange(valuetype System.ServiceProcess.SessionChangeDescription changeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionChange (changeDescription As SessionChangeDescription)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionChange(System::ServiceProcess::SessionChangeDescription changeDescription);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeDescription" Type="System.ServiceProcess.SessionChangeDescription" />
      </Parameters>
      <Docs>
        <param name="changeDescription">
          <span data-ttu-id="65ae1-264">标识更改类型的结构。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-264">A structure that identifies the change type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ae1-265">从终端服务器会话接收到更改事件时执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-265">Executes when a change event is received from a Terminal Server session.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-266">必须设置<xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>属性`true`以启用此方法的执行。</span><span class="sxs-lookup"><span data-stu-id="65ae1-266">You must set the <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> property to `true` to enable the execution of this method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
        <altmember cref="T:System.ServiceProcess.SessionChangeDescription" />
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-267">在派生类中实现时，该方法于系统即将关闭时执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-267">When implemented in a derived class, executes when the system is shutting down.</span>
          </span>
          <span data-ttu-id="65ae1-268">该方法指定应在系统即将关闭前执行的处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-268">Specifies what should occur immediately prior to the system shutting down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-269">使用<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>以指定当系统关闭时出现的处理。</span><span class="sxs-lookup"><span data-stu-id="65ae1-269">Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down.</span></span>  
  
 <span data-ttu-id="65ae1-270">仅在操作系统关闭的情况下，不是在计算机处于关闭状态时，将发生此事件。</span><span class="sxs-lookup"><span data-stu-id="65ae1-270">This event occurs only when the operating system is shut down, not when the computer is turned off.</span></span>  
  
 <span data-ttu-id="65ae1-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> 需要时重写<xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStart (args As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStart(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="65ae1-272">启动命令传递的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-272">Data passed by the start command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ae1-273">当在派生类中实现时，在下列情况下执行：在“服务控制管理器”(SCM) 向服务发送“开始”命令时，或者在操作系统启动时（对于自动启动的服务）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-273">When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).</span>
          </span>
          <span data-ttu-id="65ae1-274">指定服务启动时采取的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-274">Specifies actions to take when the service starts.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-275">使用<xref:System.ServiceProcess.ServiceBase.OnStart%2A>指定进行当服务收到启动命令的处理。</span><span class="sxs-lookup"><span data-stu-id="65ae1-275">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command.</span></span> <span data-ttu-id="65ae1-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> 是在其中指定服务行为的方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service.</span></span> <span data-ttu-id="65ae1-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> 可以采用自变量作为一种方法传递数据，但这种用法很少见。</span><span class="sxs-lookup"><span data-stu-id="65ae1-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="65ae1-278">不使用构造函数来执行应采用的处理<xref:System.ServiceProcess.ServiceBase.OnStart%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-278">Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="65ae1-279">使用<xref:System.ServiceProcess.ServiceBase.OnStart%2A>来处理您的服务的所有初始化。</span><span class="sxs-lookup"><span data-stu-id="65ae1-279">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service.</span></span> <span data-ttu-id="65ae1-280">当应用程序的可执行文件时调用的构造函数运行时，不是在服务运行时。</span><span class="sxs-lookup"><span data-stu-id="65ae1-280">The constructor is called when the application's executable runs, not when the service runs.</span></span> <span data-ttu-id="65ae1-281">可执行文件运行之前<xref:System.ServiceProcess.ServiceBase.OnStart%2A>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-281">The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="65ae1-282">当你继续，例如，构造函数不会再调用因为 SCM 已持有该对象在内存中。</span><span class="sxs-lookup"><span data-stu-id="65ae1-282">When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.</span></span> <span data-ttu-id="65ae1-283">如果<xref:System.ServiceProcess.ServiceBase.OnStop%2A>释放资源分配构造函数中而不是在<xref:System.ServiceProcess.ServiceBase.OnStart%2A>，所需的资源不会创建第二个调用服务时，将再次。</span><span class="sxs-lookup"><span data-stu-id="65ae1-283">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.</span></span>  
  
 <span data-ttu-id="65ae1-284">服务可以设置为自动启动计算机时通过设置重新启动<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>上服务的安装程序分发给<xref:System.ServiceProcess.ServiceStartMode.Automatic>。</span><span class="sxs-lookup"><span data-stu-id="65ae1-284">Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span></span> <span data-ttu-id="65ae1-285">在这种情况下，<xref:System.ServiceProcess.ServiceBase.OnStart%2A>将在系统启动时调用。</span><span class="sxs-lookup"><span data-stu-id="65ae1-285">In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.</span></span>  
  
 <span data-ttu-id="65ae1-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> 应在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="65ae1-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="65ae1-287">服务很有用，<xref:System.ServiceProcess.ServiceBase.OnStart%2A>和<xref:System.ServiceProcess.ServiceBase.OnStop%2A>应同时实现在服务类。</span><span class="sxs-lookup"><span data-stu-id="65ae1-287">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 <span data-ttu-id="65ae1-288">处理中的服务的初始化参数<xref:System.ServiceProcess.ServiceBase.OnStart%2A>方法，不在 Main 方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-288">Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method.</span></span> <span data-ttu-id="65ae1-289">中的自变量`args`参数数组可以在服务控制台中的服务的属性窗口中手动设置。</span><span class="sxs-lookup"><span data-stu-id="65ae1-289">The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console.</span></span> <span data-ttu-id="65ae1-290">不保存在控制台中输入的自变量;从控制面板启动该服务，它们是为一次性地传递服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-290">The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.</span></span> <span data-ttu-id="65ae1-291">必须的存在自动启动服务时的自变量可以放置在服务的注册表项的 ImagePath 字符串值 (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\ * \<服务名称 >*)。</span><span class="sxs-lookup"><span data-stu-id="65ae1-291">Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<service name>*).</span></span> <span data-ttu-id="65ae1-292">你可以从注册表使用获取自变量<xref:System.Environment.GetCommandLineArgs%2A>方法，例如： `string[] imagePathArgs = Environment.GetCommandLineArgs();`。</span><span class="sxs-lookup"><span data-stu-id="65ae1-292">You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStop" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStop ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-293">在派生类中实现时，该方法于“服务控制管理器”(SCM) 将“停止”命令发送到服务时执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-293">When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).</span>
          </span>
          <span data-ttu-id="65ae1-294">指定服务停止运行时采取的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-294">Specifies actions to take when a service stops running.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-295">使用<xref:System.ServiceProcess.ServiceBase.OnStop%2A>指定进行当服务收到停止命令的处理。</span><span class="sxs-lookup"><span data-stu-id="65ae1-295">Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command.</span></span>  
  
 <span data-ttu-id="65ae1-296">当 SCM 收到停止命令时，它使用的值<xref:System.ServiceProcess.ServiceBase.CanStop%2A>以验证该服务是否接受停止命令。</span><span class="sxs-lookup"><span data-stu-id="65ae1-296">When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands.</span></span> <span data-ttu-id="65ae1-297">如果<xref:System.ServiceProcess.ServiceBase.CanStop%2A>是`true`，停止命令将传递到服务，与<xref:System.ServiceProcess.ServiceBase.OnStop%2A>定义后调用方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-297">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="65ae1-298">如果<xref:System.ServiceProcess.ServiceBase.OnStop%2A>未实现在服务中，则 SCM 处理停止命令。</span><span class="sxs-lookup"><span data-stu-id="65ae1-298">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command.</span></span>  
  
 <span data-ttu-id="65ae1-299">如果<xref:System.ServiceProcess.ServiceBase.CanStop%2A>是`false`，SCM 忽略停止命令。</span><span class="sxs-lookup"><span data-stu-id="65ae1-299">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command.</span></span> <span data-ttu-id="65ae1-300">它将不传递到服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-300">It is not passed to the service.</span></span> <span data-ttu-id="65ae1-301">停止命令返回，并引发异常。</span><span class="sxs-lookup"><span data-stu-id="65ae1-301">The Stop command returns and throws an exception.</span></span>  
  
 <span data-ttu-id="65ae1-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> 应在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="65ae1-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="65ae1-303">服务很有用，<xref:System.ServiceProcess.ServiceBase.OnStart%2A>和<xref:System.ServiceProcess.ServiceBase.OnStop%2A>应同时实现在服务类。</span><span class="sxs-lookup"><span data-stu-id="65ae1-303">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RequestAdditionalTime">
      <MemberSignature Language="C#" Value="public void RequestAdditionalTime (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestAdditionalTime(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestAdditionalTime (milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestAdditionalTime(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds">
          <span data-ttu-id="65ae1-304">请求的时间（以毫秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-304">The requested time in milliseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ae1-305">为挂起操作请求额外的时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-305">Requests additional time for a pending operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-306"><xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A>方法用于进行调用的重写<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>， <xref:System.ServiceProcess.ServiceBase.OnPause%2A>， <xref:System.ServiceProcess.ServiceBase.OnStart%2A>，或<xref:System.ServiceProcess.ServiceBase.OnStop%2A>方法来请求挂起的操作，以防服务控制管理器 (SCM) 标记为额外的时间为未响应的服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-306">The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.</span></span>  <span data-ttu-id="65ae1-307">如果挂起的操作不是继续、 暂停、 开始、 或停止，<xref:System.InvalidOperationException>引发。</span><span class="sxs-lookup"><span data-stu-id="65ae1-307">If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ae1-308">服务不处于挂起状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-308">The service is not in a pending state.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-309">为服务可执行文件提供主入口点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-309">Provides the main entry point for a service executable.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (service As ServiceBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::ServiceProcess::ServiceBase ^ service);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.ServiceProcess.ServiceBase" />
      </Parameters>
      <Docs>
        <param name="service">
          <span data-ttu-id="65ae1-310">
            <see cref="T:System.ServiceProcess.ServiceBase" />，指示要启动的服务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-310">A <see cref="T:System.ServiceProcess.ServiceBase" /> which indicates a service to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ae1-311">在服务控制管理器 (SCM) 中注册服务的可执行文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-311">Registers the executable for a service with the Service Control Manager (SCM).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-312">调用此重载`main()`函数的可执行文件中注册该服务与服务控制管理器服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-312">Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager.</span></span> <span data-ttu-id="65ae1-313">调用后<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>，服务控制管理器发出一个 Start 命令，这会导致调用<xref:System.ServiceProcess.ServiceBase.OnStart%2A>服务中的方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-313">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service.</span></span> <span data-ttu-id="65ae1-314">直到执行启动命令，该服务才会开始。</span><span class="sxs-lookup"><span data-stu-id="65ae1-314">The service is not started until the Start command is executed.</span></span>  
  
 <span data-ttu-id="65ae1-315"><xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>作为基本相同的方法中调用方法<xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType>Windows 窗体应用程序。</span><span class="sxs-lookup"><span data-stu-id="65ae1-315">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="65ae1-316">如果<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>是`true`，如果指定的服务，向事件日志写入的一个条目`service`参数无法启动。</span><span class="sxs-lookup"><span data-stu-id="65ae1-316">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if the service specified by the `service` parameter fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="65ae1-317">
            <paramref name="service" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-317">
              <paramref name="service" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase[] services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase[] services) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (services As ServiceBase())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(cli::array &lt;System::ServiceProcess::ServiceBase ^&gt; ^ services);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="System.ServiceProcess.ServiceBase[]" />
      </Parameters>
      <Docs>
        <param name="services">
          <span data-ttu-id="65ae1-318">一组 ServiceBase 实例，指示要启动的服务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-318">An array of ServiceBase instances, which indicate services to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ae1-319">在服务控制管理器 (SCM) 中注册多项服务的可执行文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-319">Registers the executable for multiple services with the Service Control Manager (SCM).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-320">调用此重载`main()`函数的可执行文件中注册这些服务与服务控制管理器服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-320">Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager.</span></span> <span data-ttu-id="65ae1-321">调用后<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>，服务控制管理器发出开始命令，这会导致在调用<xref:System.ServiceProcess.ServiceBase.OnStart%2A>中服务的方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-321">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services.</span></span> <span data-ttu-id="65ae1-322">直到执行 Start 命令后，不会启动服务。</span><span class="sxs-lookup"><span data-stu-id="65ae1-322">The services are not started until the Start commands are executed.</span></span>  
  
 <span data-ttu-id="65ae1-323"><xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>作为基本相同的方法中调用方法<xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType>Windows 窗体应用程序的方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-323">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> method for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="65ae1-324">如果<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>是`true`，如果数组中的任何服务无法启动，向事件日志写入的一个条目。</span><span class="sxs-lookup"><span data-stu-id="65ae1-324">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if any service in the array fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="65ae1-325">未提供要启动的服务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-325">You did not supply a service to start.</span>
          </span>
          <span data-ttu-id="65ae1-326">该数组可能为 <see langword="null" /> 或空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-326">The array might be <see langword="null" /> or empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="protected IntPtr ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ServiceHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IntPtr ServiceHandle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-327">获取服务的服务控制句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-327">Gets the service control handle for the service.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-328">一个 <see cref="T:System.IntPtr" /> 结构，包含服务的服务控制句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-328">An <see cref="T:System.IntPtr" /> structure that contains the service control handle for the service.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-329">服务控制句柄用于通信的服务控制管理器 (SCM)。</span><span class="sxs-lookup"><span data-stu-id="65ae1-329">The service control handle is used to communicate with the Service Control Manager (SCM).</span></span>  <span data-ttu-id="65ae1-330">句柄可以用于更新使用的非托管的调用服务的服务控制管理器的状态信息`SetServiceStatus`函数。</span><span class="sxs-lookup"><span data-stu-id="65ae1-330">The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="65ae1-331">用于访问非托管代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-331">for access to unmanaged code.</span>
          </span>
          <span data-ttu-id="65ae1-332">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-332">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceMainCallback">
      <MemberSignature Language="C#" Value="public void ServiceMainCallback (int argCount, IntPtr argPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceMainCallback(int32 argCount, native int argPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceMainCallback (argCount As Integer, argPointer As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceMainCallback(int argCount, IntPtr argPointer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argCount" Type="System.Int32" />
        <Parameter Name="argPointer" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="argCount">
          <span data-ttu-id="65ae1-333">参数数组中的参数个数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-333">The number of arguments in the argument array.</span>
          </span>
        </param>
        <param name="argPointer">
          <span data-ttu-id="65ae1-334">指向参数数组的 <see cref="T:System.IntPtr" /> 结构。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-334">An <see cref="T:System.IntPtr" /> structure that points to an array of arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ae1-335">注册命令处理程序并启动服务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-335">Registers the command handler and starts the service.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-336">获取或设置用于向系统标识服务的简短名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-336">Gets or sets the short name used to identify the service to the system.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ae1-337">服务的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-337">The name of the service.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-338"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>标识的服务到服务控制管理器。</span><span class="sxs-lookup"><span data-stu-id="65ae1-338">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager.</span></span> <span data-ttu-id="65ae1-339">此属性的值必须与记录中的服务的名称相同<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>相应的安装程序类的属性。</span><span class="sxs-lookup"><span data-stu-id="65ae1-339">The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property of the corresponding installer class.</span></span> <span data-ttu-id="65ae1-340">在代码中，<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>通常设置的服务`main()`函数的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="65ae1-340">In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable.</span></span>  
  
 <span data-ttu-id="65ae1-341"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>还用于指定<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>与关联<xref:System.ServiceProcess.ServiceBase.EventLog%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="65ae1-341">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property.</span></span> <span data-ttu-id="65ae1-342">这<xref:System.ServiceProcess.ServiceBase.EventLog%2A>是服务命令信息写入应用程序日志的实例。</span><span class="sxs-lookup"><span data-stu-id="65ae1-342">This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.</span></span>  
  
 <span data-ttu-id="65ae1-343"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>，它向事件日志中，源字符串之前必须先设置该服务将写入事件日志。</span><span class="sxs-lookup"><span data-stu-id="65ae1-343">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log.</span></span> <span data-ttu-id="65ae1-344">尝试设置的源名称之前访问事件日志会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="65ae1-344">Trying to access the event log before the source name is set causes an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ae1-345">服务已启动。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-345">The service has already been started.</span>
          </span>
          <span data-ttu-id="65ae1-346">在服务启动后不能更改 <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-346">The <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> property cannot be changed once the service has started.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="65ae1-347">指定的名称为零长度字符串，或长于 <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />，就或者指定的名称包含前斜线或后斜线字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-347">The specified name is a zero-length string or is longer than <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />, or the specified name contains forward slash or backslash characters.</span>
          </span>
        </exception>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65ae1-348">停止执行服务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ae1-348">Stops the executing service.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ae1-349"><xref:System.ServiceProcess.ServiceBase.Stop%2A>方法设置的服务状态，以指示停止处于挂起状态和调用<xref:System.ServiceProcess.ServiceBase.OnStop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="65ae1-349">The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.</span></span>  <span data-ttu-id="65ae1-350">应用程序停止后，服务状态将设置为已停止。</span><span class="sxs-lookup"><span data-stu-id="65ae1-350">After the application is stopped, the service state is set to stopped.</span></span> <span data-ttu-id="65ae1-351">如果应用程序是托管的服务，则卸载应用程序域。</span><span class="sxs-lookup"><span data-stu-id="65ae1-351">If the application is a hosted service, the application domain is unloaded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
  </Members>
</Type>