<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ServiceBase.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d659a5675f8e308404ab56d663607e4230bf1530.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d659a5675f8e308404ab56d663607e4230bf1530</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceProcess.ServiceBase">
          <source>Provides a base class for a service that will exist as part of a service application.</source>
          <target state="translated">为将作为服务应用程序的一部分而存在的服务提供基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ServiceProcess.ServiceBase">
          <source><ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> must be derived from when creating a new service class.</source>
          <target state="translated">在创建新的服务类时，必须从 <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> 派生。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Derive from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> when defining your service class in a service application.</source>
          <target state="translated">派生自<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>在服务应用程序中定义服务类时。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Any useful service overrides the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods.</source>
          <target state="translated">任何有用的服务重写<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>For additional functionality, you can override <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> with specific behavior in response to changes in the service state.</source>
          <target state="translated">对于附加功能，您可以重写<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>用在响应中的服务状态的更改的特定行为。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.</source>
          <target state="translated">服务是不支持用户界面的长时间运行可执行文件不可能在登录的用户帐户下运行。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The service can run without any user being logged on to the computer.</source>
          <target state="translated">服务可运行无任何用户在登录到计算机。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>By default, services run under the System account, which is not the same as the Administrator account.</source>
          <target state="translated">默认情况下，服务不是管理员帐户相同的系统帐户下运行。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You cannot change the rights of the System account.</source>
          <target state="translated">无法更改系统帐户的权限。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Alternatively, you can use a <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> to specify a user account under which the service will run.</source>
          <target state="translated">或者，可以使用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph>以指定将在其下运行服务的用户帐户。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>An executable can contain more than one service but must contain a separate <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> for each service.</source>
          <target state="translated">可执行文件可以包含多个服务，但必须包含一个单独<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph>为每个服务。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance registers the service with the system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph>实例向系统注册该服务。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The installer also associates each service with an event log that you can use to record service commands.</source>
          <target state="translated">安装程序还将每个服务与事件日志可用于记录服务命令相关联。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">`main()`</ph> function in the executable defines which services should run.</source>
          <target state="translated"><ph id="ph1">`main()`</ph>可执行文件中的函数定义应运行哪些服务。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The current working directory of the service is the system directory, not the directory in which the executable is located.</source>
          <target state="translated">该服务的当前工作目录是系统目录中，而非可执行文件所在的目录。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>When you start a service, the system locates the executable and runs the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method for that service, contained within the executable.</source>
          <target state="translated">当你启动服务时，系统查找可执行文件，并运行<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>为该服务，可执行文件中包含的方法。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>However, running the service is not the same as running the executable.</source>
          <target state="translated">但是，运行该服务不是与运行可执行文件相同。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The executable only loads the service.</source>
          <target state="translated">可执行文件仅加载服务。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The service is accessed (for example, started and stopped) through the Service Control Manager.</source>
          <target state="translated">访问此服务时 （例如，启动和停止） 通过服务控制管理器。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The executable calls the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> derived class's constructor the first time you call Start on the service.</source>
          <target state="translated">可执行文件调用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>派生类的构造函数的第一个时间调用服务上的启动。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> command-handling method is called immediately after the constructor executes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>构造函数执行后立即调用命令处理方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated">构造函数不执行此服务已加载，在首次后再次在需要分隔从由构造函数执行的处理，所以<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Any resources that can be released by <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should be created in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated">可以通过释放任何资源<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>应在中创建<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Creating resources in the constructor prevents them from being created properly if the service is started again after <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> has released the resources.</source>
          <target state="translated">创建资源的构造函数中会阻止它们正在正确创建，如果服务启动后再次<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>已发布资源。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The Service Control Manager (SCM) provides a way to interact with the service.</source>
          <target state="translated">服务控制管理器 (SCM) 使您能够与服务交互。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.</source>
          <target state="translated">SCM 可用于将开始、 停止、 暂停、 继续或自定义命令传递到服务。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The SCM uses the values of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> to determine whether the service accepts Stop, Pause, or Continue commands.</source>
          <target state="translated">SCM 使用的值<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>若要确定服务是否接受停止，暂停或继续命令。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph3">`true`</ph> in the service class.</source>
          <target state="translated">停止、 暂停和继续启用 SCM 的上下文菜单仅当在对应的属性<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph3">`true`</ph>服务类中。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>If enabled, the command is passed to the service, and <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> is called.</source>
          <target state="translated">如果启用，则将命令传递到服务，和<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>，或<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>, the corresponding command-handling method (such as <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) will not be processed, even if you have implemented the method.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>，或<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph4">`false`</ph>，相应的命令处理方法 (如<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) 将不会处理，即使已实现的方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> class to do programmatically what the SCM does using a user interface.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph>类以编程方式执行操作 SCM 执行使用用户界面。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can automate the tasks available in the console.</source>
          <target state="translated">你可以自动执行可在控制台中的任务。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`true`</ph> but you have not implemented a corresponding command-handling method (such as <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) the system throws an exception and ignores the command.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>，或<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph4">`true`</ph>但尚未实现相应的命令处理方法 (如<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) 系统引发异常，并将忽略该命令。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You do not have to implement <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>, or any other method in <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
          <target state="translated">不需要实现<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>，或在任何其他方法<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>However, the service's behavior is described in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, so at minimum, this member should be overridden.</source>
          <target state="translated">但是，服务的行为中所述<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>，因此应在最低限度上，重写此成员。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">`main()`</ph> function of the executable registers the service in the executable with the Service Control Manager by calling the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`main()`</ph>函数的可执行文件中注册服务可执行文件与服务控制管理器中，通过调用<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> object passed to the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph> method must match the <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property of the service installer for that service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>对象传递给<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph>方法必须与匹配<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph>该服务的服务安装程序的属性。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can use <ph id="ph1">`InstallUtil.exe`</ph> to install services on your system.</source>
          <target state="translated">你可以使用<ph id="ph1">`InstallUtil.exe`</ph>以在你的系统上安装服务。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can specify a log other than the Application event log to receive notification of service calls, but neither the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> nor the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property can write to a custom log.</source>
          <target state="translated">你可以指定日志而不是应用程序事件日志，以接收通知的服务调用，两者都不<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>也不<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>属性可以写入自定义日志。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph> if you do not want to use automatic logging.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>到<ph id="ph2">`false`</ph>如果你不想要使用自动日志记录。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> class.</source>
          <target state="translated">创建 <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Do not create an instance of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class.</source>
          <target state="translated">不创建的实例<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Instead, derive from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> and instantiate your derived class.</source>
          <target state="translated">相反，派生自<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>并实例化派生的类。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>The minimum you need to implement in the constructor for a class inherited from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> is to set the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> on your component.</source>
          <target state="translated">你需要从继承的类的构造函数中实现所需的最低<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>设置<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>在组件。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>No other processing is specifically required in the constructor.</source>
          <target state="translated">没有任何其他处理特定要求的构造函数中。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>You should handle most initialization in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> rather than in the constructor.</source>
          <target state="translated">应处理中的大多数初始化<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>而不是构造函数中。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.</source>
          <target state="translated">否则，为已停止后重新启动服务时，对象将被重新初始化不能保证。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If you override the constructor in your derived class, call the base class constructor in your code.</source>
          <target state="translated">如果你在派生类中重写构造函数，请在代码中调用基类构造函数。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> constructor sets <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>构造函数集<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>到<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果你不希望自动登录到服务的调用从服务控制管理器 (SCM)，设置<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>到<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.</source>
          <target state="translated">如果可执行文件包含单个服务，系统在开始从 SCM 中，选择、 运行析构函数，如果调用停止时调用服务的构造函数。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.</source>
          <target state="translated">如果可执行文件包含多个服务，一个服务上的启动调用时，构造函数要调用的可执行文件中的所有服务，但只有指定的服务会启动。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.</source>
          <target state="translated">当所有服务已都停止，不单独在每个服务已都停止时，将在一起运行的服务的析构函数。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If you override the base class constructor, you should explicitly call it in the constructor of your derived class.</source>
          <target state="translated">如果重写基类构造函数，则应在派生类的构造函数中显式调用它。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</source>
          <target state="translated">指示是否在事件日志中报告“开始”、“停止”、“暂停”以及“继续”命令。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report information in the event log; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">为 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 时在事件日志中报告信息；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>Setting <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`true`</ph> instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>到<ph id="ph2">`true`</ph>指示服务启动、 停止、 暂停、 用于报告命令失败，以及状态更改信息的应用程序事件日志并继续在服务上的事件。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>The name of the service is used as the log's <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">服务的名称用作日志的<ph id="ph1">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>To report information to a custom event log rather than the Application log, set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph> and write instructions within the command-handling methods <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to post to the appropriate log.</source>
          <target state="translated">若要向自定义的事件日志而不是应用程序日志中报告的信息，请设置<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>到<ph id="ph2">`false`</ph>和写入命令处理方法中的说明<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>，或<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>发送到相应的日志。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>，它向事件日志中，源字符串之前必须先设置服务尝试写入到事件日志。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>Trying to access the event log before the source name is set throws an exception.</source>
          <target state="translated">尝试访问事件日志设置源名称之前引发异常。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</source>
          <target state="translated">获取或设置一个值，该值指示服务是否可以处理计算机电源状态更改通知。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service handles the computer power status changes indicated in the <ph id="ph2">&lt;see cref="T:System.ServiceProcess.PowerBroadcastStatus" /&gt;</ph> class, otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果服务处理 <ph id="ph2">&lt;see cref="T:System.ServiceProcess.PowerBroadcastStatus" /&gt;</ph> 类中指示的计算机电源状态更改，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>.</source>
          <target state="translated">当计算机电源状态更改时，服务控制管理器 (SCM) 验证服务是否接受使用的值的电源事件命令<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the command is passed to the service and the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> method is called if defined.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>是<ph id="ph2">`true`</ph>，则将命令传递到服务和<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph>如果定义会调用方法。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> is not implemented in the derived class, the SCM handles the power event through the empty base class <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph>未实现在派生类中，则 SCM 处理通过空基类 power 事件<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>This property is modified after the service was started.</source>
          <target state="translated">此属性将在服务启动后被修改。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent">
          <source>Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</source>
          <target state="translated">获取或设置一个值，该值指示服务是否可以处理从终端服务器会话接收到的会话更改事件。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service can handle Terminal Server session change events; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果服务可以处理终端服务器会话更改事件，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent">
          <source>This property is modified after the service was started.</source>
          <target state="translated">此属性将在服务启动后被修改。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>Gets or sets a value indicating whether the service can be paused and resumed.</source>
          <target state="translated">获取或设置指示服务是否可以暂停并再继续的值。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service can be paused; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果服务可以暂停，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>Set the value of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property in the constructor for the service.</source>
          <target state="translated">设置的值<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>服务的构造函数中的属性。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>When a service is paused, it halts what it is doing.</source>
          <target state="translated">服务已暂停，它会停止正在进行的工作。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>When you continue the service (either through the Service Control Manager or programmatically), <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> runs.</source>
          <target state="translated">当你继续 （不管是通过服务控制管理器或以编程方式），服务<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>运行。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>Sending a Pause request to the service can conserve system resources.</source>
          <target state="translated">暂停请求发送到服务，可以节省系统资源。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>Pause may not release all system resources, but Stop does.</source>
          <target state="translated">暂停可能不会释放所有系统资源，但停止。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> are often implemented to perform less processing than <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>通常实现来执行较少处理比<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>When <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`true`</ph>, override <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph2">`true`</ph>，重写<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>以指定服务控制管理器 (SCM) 将暂停或继续请求传递给你的服务时应执行的处理。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> should be implemented to undo the processing in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> 应为撤消中的处理实现<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if they are implemented.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph2">`false`</ph>、 SCM 不会传递暂停或继续向服务，因此请求<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>方法将不会调用，即使它们实现。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>In the SCM, the <ph id="ph1">`Pause`</ph> and <ph id="ph2">`Continue`</ph> controls are disabled when <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">SCM 中,<ph id="ph1">`Pause`</ph>和<ph id="ph2">`Continue`</ph>控件被禁用时<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>The service has already been started.</source>
          <target state="translated">服务已启动。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>The <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /&gt;</ph> property cannot be changed once the service has started.</source>
          <target state="translated">在服务启动后不能更改 <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>Gets or sets a value indicating whether the service should be notified when the system is shutting down.</source>
          <target state="translated">获取或设置一个值，该值指示系统关闭时是否应通知服务。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service should be notified when the system is shutting down; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果系统关闭时应通知服务，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the service is notified when the system is shutting down.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>是<ph id="ph2">`true`</ph>，当系统关闭时通知服务。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>At shutdown, the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> method is called if it has been implemented in your derived class.</source>
          <target state="translated">在关闭，<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph>如果它已实现派生类中调用方法。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>Only the system should cause the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> method to execute; the service can call it, but this is not recommended.</source>
          <target state="translated">只有系统应会导致<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph>方法来执行; 服务可以调用它，但这不建议这样做。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>The service has already been started.</source>
          <target state="translated">服务已启动。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>The <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /&gt;</ph> property cannot be changed once the service has started.</source>
          <target state="translated">在服务启动后不能更改 <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>Gets or sets a value indicating whether the service can be stopped once it has started.</source>
          <target state="translated">获取或设置一个值，该值指示服务启动后是否可以停止。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service can be stopped and the <ph id="ph2">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnStop" /&gt;</ph> method called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果服务可以停止并调用了 <ph id="ph2">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnStop" /&gt;</ph> 方法，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>.</source>
          <target state="translated">服务控制管理器 (SCM) 当在服务上调用时停止时，验证服务是否接受使用的值的停止命令<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>For most services, the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`true`</ph>, but some operating system services, for example, do not allow the user to stop them.</source>
          <target state="translated">对于大多数服务的值<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>是<ph id="ph2">`true`</ph>，但某些操作系统服务，例如，不允许用户将其停止。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the Stop command is passed to the service and the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method is called if it is defined.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>是<ph id="ph2">`true`</ph>，停止命令传递给服务和<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>定义后调用方法。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>未在派生类中，停止命令通过空基类的 SCM 句柄实现<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>The service has already been started.</source>
          <target state="translated">服务已启动。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>The <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanStop" /&gt;</ph> property cannot be changed once the service has started.</source>
          <target state="translated">在服务启动后不能更改 <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanStop" /&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">若要释放托管资源和非托管资源，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；若仅释放非托管资源，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>Disposes of the resources (other than memory) used by the <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph>.</source>
          <target state="translated">处置由 <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> 占用的资源（内存除外）。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>Call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> in your derived class (and through it, in the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class) when you are finished using the derived class.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>在派生类中 (也通过它在<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>类) 在完成使用派生的类时。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> method leaves the derived class in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>方法使派生的类中不可用状态。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>After calling <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>, you must release all references to the derived class and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> so the memory they were occupying can be reclaimed by garbage collection.</source>
          <target state="translated">在调用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>，必须释放对派生类的所有引用和<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>以便可以通过垃圾回收回收它们占用的内存。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>Always call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> before you release your last reference to the class derived from <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
          <target state="translated">始终调用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>在发布到类派生自最后一个引用之前<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>Otherwise, the resources <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> and the derived class are using will not be freed until garbage collection calls the objects' destructors.</source>
          <target state="translated">否则为资源<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>和派生的类使用的将垃圾回收调用对象的析构函数之前不会释放。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is often implemented to process the code in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, combined with a call to <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> 通常实现来处理中的代码<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>组合通过调用<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>If you choose to do this in your derived class, it is customary to implement <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to allocate whatever <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> released.</source>
          <target state="translated">如果你选择执行此操作在派生类中，则通常实现<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>以分配任何<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>发布。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</source>
          <target state="translated">获取一个事件日志，它可用于将服务命令调用的通知（如“开始”和“停止”）写入“应用程序”事件日志。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>An <ph id="ph1">&lt;see cref="T:System.Diagnostics.EventLog" /&gt;</ph> instance whose source is registered to the Application log.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.EventLog" /&gt;</ph> 实例，它的源注册到 Application 日志中。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>The constructor initializes the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property to an instance with the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType&gt;</ph> properties set.</source>
          <target state="translated">构造函数初始化<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>到具有的实例的属性<ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType&gt;</ph>属性集。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>The source is the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> of the service, and the log is the computer's Application log.</source>
          <target state="translated">源是<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>的服务，并在日志已计算机的应用程序日志。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>These values are set automatically and cannot be changed for automatic logging of service commands.</source>
          <target state="translated">这些值自动设置，不能更改服务命令的自动日志记录功能。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>When <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>是<ph id="ph2">`true`</ph>，启动、 停止、 暂停、 继续和自定义命令记录自动在应用程序事件日志。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property to write additional messages to that log as well.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>属性将其他消息写入到以及该日志。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>The component calls <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType&gt;</ph> using this <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> member.</source>
          <target state="translated">组件调用<ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType&gt;</ph>使用此<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>成员。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>To report information to a custom event log rather than the Application log, set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph> and write instructions within the command-handling methods <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to post to the appropriate log.</source>
          <target state="translated">若要向自定义的事件日志而不是应用程序日志中报告的信息，请设置<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>到<ph id="ph2">`false`</ph>和写入命令处理方法中的说明<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>，或<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>发送到相应的日志。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ExitCode">
          <source>Gets or sets the exit code for the service.</source>
          <target state="translated">获取或设置服务的退出代码。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ExitCode">
          <source>The exit code for the service.</source>
          <target state="translated">服务的退出代码。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ExitCode">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ExitCode%2A&gt;</ph> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ExitCode%2A&gt;</ph>属性在停止服务，以指示错误到服务控制管理器之前的非零值。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="F:System.ServiceProcess.ServiceBase.MaxNameLength">
          <source>Indicates the maximum size for a service name.</source>
          <target state="translated">指示服务名称的最大大小。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ServiceProcess.ServiceBase.MaxNameLength">
          <source>ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.</source>
          <target state="translated">ServiceName 和 DisplayName 都具有在服务类上设置属性时，必须遵守的大小限制。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>When implemented in a derived class, <ph id="ph1">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /&gt;</ph> runs when a Continue command is sent to the service by the Service Control Manager (SCM).</source>
          <target state="translated">在派生类中实现时，<ph id="ph1">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /&gt;</ph> 于“服务控制管理器”(SCM) 将“继续”命令发送到服务时运行。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>Specifies actions to take when a service resumes normal functioning after being paused.</source>
          <target state="translated">指定要在服务暂停后恢复正常功能时采取的操作。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to mirror your application's response to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.</source>
          <target state="translated">实现<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>镜像你的应用程序响应<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>When you continue the service (either through the Services console or programmatically), the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> processing runs, and the service becomes active again.</source>
          <target state="translated">当你继续 （不管是通过服务控制台或以编程方式），服务<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>处理运行时，和服务再次变为活动状态。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> 需要时重写<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>属性是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if they are implemented.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph2">`false`</ph>、 SCM 不会传递暂停或继续向服务，因此请求<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>方法将不会调用，即使它们实现。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>In the SCM, the <ph id="ph1">`Pause`</ph> and <ph id="ph2">`Continue`</ph> controls are disabled when <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">SCM 中,<ph id="ph1">`Pause`</ph>和<ph id="ph2">`Continue`</ph>控件被禁用时<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>The command message sent to the service.</source>
          <target state="translated">发送给服务的命令消息。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>When implemented in a derived class, <ph id="ph1">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /&gt;</ph> executes when the Service Control Manager (SCM) passes a custom command to the service.</source>
          <target state="translated">在派生类中实现时，<ph id="ph1">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /&gt;</ph> 于“服务控制管理器”(SCM) 向服务传递自定义命令时执行。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>Specifies actions to take when a command with the specified parameter value occurs.</source>
          <target state="translated">指定要在具有指定参数值的命令出现时采取的操作。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> 允许你指定启动、 停止、 暂停和继续服务以外的其他功能。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>The SCM does not examine the custom command to verify whether the service supports the <ph id="ph1">`command`</ph> parameter passed in.</source>
          <target state="translated">SCM 将不检查自定义的命令，来验证服务是否支持<ph id="ph1">`command`</ph>参数中传递。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>It passes the custom command directly to the service.</source>
          <target state="translated">它的自定义命令将直接传递到该服务。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>If the service does not recognize the <ph id="ph1">`command`</ph> parameter, it does nothing.</source>
          <target state="translated">如果服务不能识别<ph id="ph1">`command`</ph>参数，它不执行任何操作。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>Custom commands are raised by an <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A&gt;</ph> statement in a <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component.</source>
          <target state="translated">为由引发自定义命令<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A&gt;</ph>中的语句<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph>组件。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>Use a switch statement or if..then condition to handle the custom commands you define on your service.</source>
          <target state="translated">使用交换语句或如果...然后使用条件来处理在服务定义的自定义命令。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>The only values for a custom command that you can define in your application or use in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> are those between 128 and 255.</source>
          <target state="translated">可以在你的应用程序中定义，也可以在中使用的自定义命令的唯一值<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph>是那些介于 128 到 255 之间。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>Integers below 128 correspond to system-reserved values.</source>
          <target state="translated">低于 128 的整数对应于系统保留值。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>属性是<ph id="ph2">`true`</ph>，自定义命令，与所有其他命令一样将项写入事件日志以报告方法执行是成功还是失败。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).</source>
          <target state="translated">在派生类中实现时，该方法于“服务控制管理器”(SCM) 将“暂停”命令发送到服务时执行。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>Specifies actions to take when a service pauses.</source>
          <target state="translated">指定要在服务暂停时采取的操作。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> to specify the processing that occurs when the service receives a Pause command.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>以指定当服务接收暂停命令时发生的处理。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> 需要时重写<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>属性是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>When you continue a paused service (either through the Services console or programmatically), the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> processing is run, and the service becomes active again.</source>
          <target state="translated">当你继续已暂停的服务 （不管是通过服务控制台或以编程方式），<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>处理运行，和服务再次成为活动。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>The Pause command only allows your application to react to a specific event.</source>
          <target state="translated">暂停命令仅允许你的应用程序对特定事件做出反应。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> does nothing to the service that you do not define it to do.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> 没有任何影响到未定义要执行的操作的服务。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.</source>
          <target state="translated">暂停请求发送到服务可以节省系统资源，因为暂停不需要释放所有系统资源。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.</source>
          <target state="translated">例如，如果线程已开启，过程暂停服务，而不是停止它可以使线程能够保持打开状态，而无需重新分配它们时该服务将继续。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>If you define Pause to release all system resources, it behaves like a Stop command.</source>
          <target state="translated">如果你定义暂停释放所有系统资源，它的行为类似停止命令。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>Set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> to <ph id="ph2">`true`</ph>, and override <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>到<ph id="ph2">`true`</ph>，并重写<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>以指定应发生 SCM 将暂停或继续请求传递给你的服务时的处理。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> should be implemented to undo the processing in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> 应为撤消中的处理实现<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if implemented.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph2">`false`</ph>、 SCM 不会传递暂停或继续向服务，因此请求<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>即使实现，将不会调用方法。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>In the SCM, the <ph id="ph1">`Pause`</ph> and <ph id="ph2">`Continue`</ph> controls are disabled when <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">SCM 中,<ph id="ph1">`Pause`</ph>和<ph id="ph2">`Continue`</ph>控件被禁用时<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>是<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ServiceProcess.PowerBroadcastStatus" /&gt;</ph> that indicates a notification from the system about its power status.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceProcess.PowerBroadcastStatus" /&gt;</ph>，指示来自系统的有关电源状态的通知。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>When implemented in a derived class, executes when the computer's power status has changed.</source>
          <target state="translated">当在派生类中实现时，该方法于计算机电源状态更改时执行。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</source>
          <target state="translated">这适用于膝上型计算机进入挂起模式时的情况，该模式不同于系统关闭。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>When implemented in a derived class, the needs of your application determine what value to return.</source>
          <target state="translated">当在派生类中实现时，应用程序的需要将确定要返回的值。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>For example, if a <ph id="ph1">&lt;see langword="QuerySuspend" /&gt;</ph> broadcast status is passed, you could cause your application to reject the query by returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">例如，如果传递了 <ph id="ph1">&lt;see langword="QuerySuspend" /&gt;</ph> 广播状态，则可以通过返回 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 来使应用程序拒绝查询。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> to specify the processing that occurs when the system event indicated in the <ph id="ph2">&lt;xref:System.ServiceProcess.PowerBroadcastStatus&gt;</ph> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph>指定时发生中指示的系统事件的处理<ph id="ph2">&lt;xref:System.ServiceProcess.PowerBroadcastStatus&gt;</ph>枚举时发生-例如，计算机置于挂起模式，或指示电池电量不足。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> 需要时重写<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>属性是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)">
          <source>A structure that identifies the change type.</source>
          <target state="translated">标识更改类型的结构。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)">
          <source>Executes when a change event is received from a Terminal Server session.</source>
          <target state="translated">从终端服务器会话接收到更改事件时执行。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)">
          <source>You must set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A&gt;</ph> property to <ph id="ph2">`true`</ph> to enable the execution of this method.</source>
          <target state="translated">必须设置<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A&gt;</ph>属性<ph id="ph2">`true`</ph>以启用此方法的执行。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source>When implemented in a derived class, executes when the system is shutting down.</source>
          <target state="translated">在派生类中实现时，该方法于系统即将关闭时执行。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source>Specifies what should occur immediately prior to the system shutting down.</source>
          <target state="translated">该方法指定应在系统即将关闭前执行的处理。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> to specify the processing that occurs when the system shuts down.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph>以指定当系统关闭时出现的处理。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source>This event occurs only when the operating system is shut down, not when the computer is turned off.</source>
          <target state="translated">仅在操作系统关闭的情况下，不是在计算机处于关闭状态时，将发生此事件。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> 需要时重写<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>属性是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Data passed by the start command.</source>
          <target state="translated">启动命令传递的数据。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).</source>
          <target state="translated">当在派生类中实现时，在下列情况下执行：在“服务控制管理器”(SCM) 向服务发送“开始”命令时，或者在操作系统启动时（对于自动启动的服务）。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Specifies actions to take when the service starts.</source>
          <target state="translated">指定服务启动时采取的操作。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to specify the processing that occurs when the service receives a Start command.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>指定进行当服务收到启动命令的处理。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> is the method in which you specify the behavior of the service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> 是在其中指定服务行为的方法。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> can take arguments as a way to pass data, but this usage is rare.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> 可以采用自变量作为一种方法传递数据，但这种用法很少见。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Do not use the constructor to perform processing that should be in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated">不使用构造函数来执行应采用的处理<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to handle all initialization of your service.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>来处理您的服务的所有初始化。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>The constructor is called when the application's executable runs, not when the service runs.</source>
          <target state="translated">当应用程序的可执行文件时调用的构造函数运行时，不是在服务运行时。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>The executable runs before <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated">可执行文件运行之前<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.</source>
          <target state="translated">当你继续，例如，构造函数不会再调用因为 SCM 已持有该对象在内存中。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> releases resources allocated in the constructor rather than in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, the needed resources would not be created again the second time the service is called.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>释放资源分配构造函数中而不是在<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>，所需的资源不会创建第二个调用服务时，将再次。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Services can be set to start automatically when the computer reboots by setting the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> on the service's installer to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph>.</source>
          <target state="translated">服务可以设置为自动启动计算机时通过设置重新启动<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph>上服务的安装程序分发给<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>In such a situation, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> would be called at system startup.</source>
          <target state="translated">在这种情况下，<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>将在系统启动时调用。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> is expected to be overridden in the derived class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> 应在派生类中重写。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>For the service to be useful, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should both be implemented in your service class.</source>
          <target state="translated">服务很有用，<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>应同时实现在服务类。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Process initialization arguments for the service in the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method, not in the Main method.</source>
          <target state="translated">处理中的服务的初始化参数<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>方法，不在 Main 方法。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>The arguments in the <ph id="ph1">`args`</ph> parameter array can be set manually in the properties window for the service in the Services console.</source>
          <target state="translated">中的自变量<ph id="ph1">`args`</ph>参数数组可以在服务控制台中的服务的属性窗口中手动设置。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.</source>
          <target state="translated">不保存在控制台中输入的自变量;从控制面板启动该服务，它们是为一次性地传递服务。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services<ph id="ph1">\\</ph><bpt id="p1">*</bpt><ph id="ph2">\&lt;</ph>service name&gt;<ept id="p1">*</ept>).</source>
          <target state="translated">必须的存在自动启动服务时的自变量可以放置在服务的注册表项的 ImagePath 字符串值 (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services<ph id="ph1">\\</ph> <bpt id="p1">*</bpt> <ph id="ph2">\&lt;</ph>服务名称 &gt;<ept id="p1">*</ept>)。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>You can obtain the arguments from the registry using the <ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> method, for example:  <ph id="ph2">`string[] imagePathArgs = Environment.GetCommandLineArgs();`</ph>.</source>
          <target state="translated">你可以从注册表使用获取自变量<ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph>方法，例如： <ph id="ph2">`string[] imagePathArgs = Environment.GetCommandLineArgs();`</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).</source>
          <target state="translated">在派生类中实现时，该方法于“服务控制管理器”(SCM) 将“停止”命令发送到服务时执行。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>Specifies actions to take when a service stops running.</source>
          <target state="translated">指定服务停止运行时采取的操作。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to specify the processing that occurs when the service receives a Stop command.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>指定进行当服务收到停止命令的处理。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>When the SCM receives a Stop command, it uses the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> to verify whether the service accepts Stop commands.</source>
          <target state="translated">当 SCM 收到停止命令时，它使用的值<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>以验证该服务是否接受停止命令。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the Stop command is passed to the service, and the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method is called if it is defined.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>是<ph id="ph2">`true`</ph>，停止命令将传递到服务，与<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>定义后调用方法。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is not implemented in the service, the SCM handles the Stop command.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>未实现在服务中，则 SCM 处理停止命令。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM ignores the Stop command.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>是<ph id="ph2">`false`</ph>，SCM 忽略停止命令。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>It is not passed to the service.</source>
          <target state="translated">它将不传递到服务。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>The Stop command returns and throws an exception.</source>
          <target state="translated">停止命令返回，并引发异常。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is expected to be overridden in the derived class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> 应在派生类中重写。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>For the service to be useful, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should both be implemented in your service class.</source>
          <target state="translated">服务很有用，<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>应同时实现在服务类。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>The requested time in milliseconds.</source>
          <target state="translated">请求的时间（以毫秒为单位）。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>Requests additional time for a pending operation.</source>
          <target state="translated">为挂起操作请求额外的时间。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A&gt;</ph> method is intended to be called by the overridden <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A&gt;</ph>方法用于进行调用的重写<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>，或<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>方法来请求挂起的操作，以防服务控制管理器 (SCM) 标记为额外的时间为未响应的服务。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>If the pending operation is not a continue, pause, start, or stop, an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
          <target state="translated">如果挂起的操作不是继续、 暂停、 开始、 或停止，<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>The service is not in a pending state.</source>
          <target state="translated">服务不处于挂起状态。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="T:System.ServiceProcess.ServiceBase">
          <source>Provides the main entry point for a service executable.</source>
          <target state="translated">为服务可执行文件提供主入口点。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> which indicates a service to start.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph>，指示要启动的服务。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>Registers the executable for a service with the Service Control Manager (SCM).</source>
          <target state="translated">在服务控制管理器 (SCM) 中注册服务的可执行文件。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>Call this overload in the <ph id="ph1">`main()`</ph> function of the service executable to register the service with the Service Control Manager.</source>
          <target state="translated">调用此重载<ph id="ph1">`main()`</ph>函数的可执行文件中注册该服务与服务控制管理器服务。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>After you call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29&gt;</ph>, the Service Control Manager issues a Start command, which results in a call to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method in the service.</source>
          <target state="translated">调用后<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29&gt;</ph>，服务控制管理器发出一个 Start 命令，这会导致调用<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>服务中的方法。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>The service is not started until the Start command is executed.</source>
          <target state="translated">直到执行启动命令，该服务才会开始。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType&gt;</ph> method is called in much the same way as <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType&gt;</ph> for Windows Forms applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType&gt;</ph>作为基本相同的方法中调用方法<ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType&gt;</ph>Windows 窗体应用程序。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, an entry is written to the event log if the service specified by the <ph id="ph3">`service`</ph> parameter fails to start.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>是<ph id="ph2">`true`</ph>，如果指定的服务，向事件日志写入的一个条目<ph id="ph3">`service`</ph>参数无法启动。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source><ph id="ph1">&lt;paramref name="service" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="service" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>An array of ServiceBase instances, which indicate services to start.</source>
          <target state="translated">一组 ServiceBase 实例，指示要启动的服务。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>Registers the executable for multiple services with the Service Control Manager (SCM).</source>
          <target state="translated">在服务控制管理器 (SCM) 中注册多项服务的可执行文件。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>Call this overload in the <ph id="ph1">`main()`</ph> function of the service executable to register the services with the Service Control Manager.</source>
          <target state="translated">调用此重载<ph id="ph1">`main()`</ph>函数的可执行文件中注册这些服务与服务控制管理器服务。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>After you call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29&gt;</ph>, the Service Control Manager issues Start commands, which result in calls to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> methods in the services.</source>
          <target state="translated">调用后<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29&gt;</ph>，服务控制管理器发出开始命令，这会导致在调用<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>中服务的方法。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>The services are not started until the Start commands are executed.</source>
          <target state="translated">直到执行 Start 命令后，不会启动服务。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType&gt;</ph> method is called in much the same way as the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType&gt;</ph> method for Windows Forms applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType&gt;</ph>作为基本相同的方法中调用方法<ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType&gt;</ph>Windows 窗体应用程序的方法。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, an entry is written to the event log if any service in the array fails to start.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>是<ph id="ph2">`true`</ph>，如果数组中的任何服务无法启动，向事件日志写入的一个条目。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>You did not supply a service to start.</source>
          <target state="translated">未提供要启动的服务。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>The array might be <ph id="ph1">&lt;see langword="null" /&gt;</ph> or empty.</source>
          <target state="translated">该数组可能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 或空。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>Gets the service control handle for the service.</source>
          <target state="translated">获取服务的服务控制句柄。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> structure that contains the service control handle for the service.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 结构，包含服务的服务控制句柄。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>The service control handle is used to communicate with the Service Control Manager (SCM).</source>
          <target state="translated">服务控制句柄用于通信的服务控制管理器 (SCM)。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>The handle can be used to update the service control manager's status information for the calling service using the unmanaged <ph id="ph1">`SetServiceStatus`</ph> function.</source>
          <target state="translated">句柄可以用于更新使用的非托管的调用服务的服务控制管理器的状态信息<ph id="ph1">`SetServiceStatus`</ph>函数。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>for access to unmanaged code.</source>
          <target state="translated">用于访问非托管代码。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)">
          <source>The number of arguments in the argument array.</source>
          <target state="translated">参数数组中的参数个数。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> structure that points to an array of arguments.</source>
          <target state="translated">指向参数数组的 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 结构。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)">
          <source>Registers the command handler and starts the service.</source>
          <target state="translated">注册命令处理程序并启动服务。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>Gets or sets the short name used to identify the service to the system.</source>
          <target state="translated">获取或设置用于向系统标识服务的简短名称。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The name of the service.</source>
          <target state="translated">服务的名称。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> identifies the service to the Service Control Manager.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>标识的服务到服务控制管理器。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The value of this property must be identical to the name recorded for the service in the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType&gt;</ph> property of the corresponding installer class.</source>
          <target state="translated">此属性的值必须与记录中的服务的名称相同<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType&gt;</ph>相应的安装程序类的属性。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>In code, the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> of the service is usually set in the <ph id="ph2">`main()`</ph> function of the executable.</source>
          <target state="translated">在代码中，<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>通常设置的服务<ph id="ph2">`main()`</ph>函数的可执行文件。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> is also used to specify the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph> associated with the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>还用于指定<ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph>与关联<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>This <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> is an instance that writes service command information to the Application log.</source>
          <target state="translated">这<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>是服务命令信息写入应用程序日志的实例。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>, which supplies the source string for the event log, must be set before the service writes to the event log.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>，它向事件日志中，源字符串之前必须先设置该服务将写入事件日志。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>Trying to access the event log before the source name is set causes an exception to be thrown.</source>
          <target state="translated">尝试设置的源名称之前访问事件日志会导致引发异常。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The service has already been started.</source>
          <target state="translated">服务已启动。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /&gt;</ph> property cannot be changed once the service has started.</source>
          <target state="translated">在服务启动后不能更改 <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The specified name is a zero-length string or is longer than <ph id="ph1">&lt;see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" /&gt;</ph>, or the specified name contains forward slash or backslash characters.</source>
          <target state="translated">指定的名称为零长度字符串，或长于 <ph id="ph1">&lt;see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" /&gt;</ph>，就或者指定的名称包含前斜线或后斜线字符。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Stop">
          <source>Stops the executing service.</source>
          <target state="translated">停止执行服务。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Stop">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Stop%2A&gt;</ph> method sets the service state to indicate a stop is pending and calls the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Stop%2A&gt;</ph>方法设置的服务状态，以指示停止处于挂起状态和调用<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Stop">
          <source>After the application is stopped, the service state is set to stopped.</source>
          <target state="translated">应用程序停止后，服务状态将设置为已停止。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Stop">
          <source>If the application is a hosted service, the application domain is unloaded.</source>
          <target state="translated">如果应用程序是托管的服务，则卸载应用程序域。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>