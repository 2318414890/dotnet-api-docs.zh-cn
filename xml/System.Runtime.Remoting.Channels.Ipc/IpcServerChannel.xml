<Type Name="IpcServerChannel" FullName="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba05a87a78f75e1edab18d55f3189b145b38d9bd" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36536751" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class IpcServerChannel : System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelReceiver, System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IpcServerChannel extends System.Object implements class System.Runtime.Remoting.Channels.IChannel, class System.Runtime.Remoting.Channels.IChannelReceiver, class System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" />
  <TypeSignature Language="VB.NET" Value="Public Class IpcServerChannel&#xA;Implements IChannel, IChannelReceiver, ISecurableChannel" />
  <TypeSignature Language="C++ CLI" Value="public ref class IpcServerChannel : System::Runtime::Remoting::Channels::IChannel, System::Runtime::Remoting::Channels::IChannelReceiver, System::Runtime::Remoting::Channels::ISecurableChannel" />
  <TypeSignature Language="F#" Value="type IpcServerChannel = class&#xA;    interface IChannelReceiver&#xA;    interface IChannel&#xA;    interface ISecurableChannel" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelReceiver</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.ISecurableChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>为远程调用实现使用 IPC 系统传输消息的服务器信道。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 远程处理基础结构使用的通道用于传输远程调用。 当客户端调用远程对象时，则会将调用序列化到一条消息是由客户端通道发送和接收的服务器信道。 收到的消息后，它是反序列化和处理。 任何返回的值是由服务器通道传输和接收的客户端通道。  
  
 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>类同一台计算机上的应用程序域之间使用 Windows 进程间通信 (IPC) 将开机传输消息。 同一台计算机上的应用程序域之间进行通信，IPC 通道时，TCP 或 HTTP 通道比快得多。  
  
 若要在服务器端上执行其他处理的消息，指定的实现<xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider>接口处理的所有消息都可通过<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>传递实例。  
  
 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>实例接受二进制或 SOAP 格式中序列化的消息。  
  
 A<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>对象有关联的配置属性，可以在设置配置文件在运行时 (通过调用静态<xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=nameWithType>方法) 或以编程方式 (通过将传递<xref:System.Collections.IDictionary>集合到<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A>构造函数）。 有关这些配置属性的列表，请参阅的文档<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A>构造函数。  
  
> [!CAUTION]
>  设置时`exclusiveAddressUse`属性`false`中`properties`参数，多个<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>为相同命名管道，可以注册对象。 在这种情况下请求可以转到任何注册的通道。 此设置被视为安全还使用 alc 时，才才。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>类。  
  
 [!code-cpp[Remoting_Ipc#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#10)]
 [!code-csharp[Remoting_Ipc#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#10)]  
  
 前面的代码用于公开以下远程对象。  
  
 [!code-cpp[Remoting_Ipc#0](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/counter.cpp#0)]
 [!code-csharp[Remoting_Ipc#0](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/counter.cs#0)]  
  
 远程使用此对象的客户端的示例，请参阅<xref:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel>。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (portName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::String ^ portName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : string -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel portName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="portName">信道要使用的 IPC 端口的名称。</param>
        <summary>用指定的 IPC 端口名初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此构造函数。  
  
 [!code-cpp[Remoting_Ipc#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#11)]
 [!code-csharp[Remoting_Ipc#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IDictionary, sinkProvider As IServerChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::Collections::IDictionary ^ properties, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : System.Collections.IDictionary * System.Runtime.Remoting.Channels.IServerChannelSinkProvider -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel (properties, sinkProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它为信道要使用的配置属性指定值。</param>
        <param name="sinkProvider">信道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现。</param>
        <summary>使用指定的信道属性和接收器初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关通道配置属性的详细信息，请参阅[通道和格式化程序配置属性](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe)。  
  
 如果不需要接收器功能，设置`sinkProvider`参数`null`。  
  
> [!CAUTION]
>  设置时`exclusiveAddressUse`属性`false`中`properties`参数，多个<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>为相同命名管道，可以注册对象。 在这种情况下请求可以转到任何注册的通道。 此设置被视为安全还使用 alc 时，才才。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#41](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#41)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#41](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string name, string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, portName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::String ^ name, System::String ^ portName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : string * string -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel (name, portName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">信道的名称。</param>
        <param name="portName">信道要使用的 IPC 端口的名称。</param>
        <summary>用指定的信道名称和 IPC 端口名称初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数设置<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A>属性使用`name`参数。 如果你想要注册多个通道，每个通道都必须具有唯一的名称。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#42](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#42)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#42](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, class System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Security.AccessControl.CommonSecurityDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IDictionary, sinkProvider As IServerChannelSinkProvider, securityDescriptor As CommonSecurityDescriptor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::Collections::IDictionary ^ properties, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider, System::Security::AccessControl::CommonSecurityDescriptor ^ securityDescriptor);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : System.Collections.IDictionary * System.Runtime.Remoting.Channels.IServerChannelSinkProvider * System.Security.AccessControl.CommonSecurityDescriptor -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel (properties, sinkProvider, securityDescriptor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
        <Parameter Name="securityDescriptor" Type="System.Security.AccessControl.CommonSecurityDescriptor" />
      </Parameters>
      <Docs>
        <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它为信道要使用的配置属性指定值。</param>
        <param name="sinkProvider">信道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现。</param>
        <param name="securityDescriptor">要由信道使用的 <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" />。</param>
        <summary>使用指定的信道属性、接收器和安全说明符初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关通道配置属性的详细信息，请参阅[通道和格式化程序配置属性](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe)。  
  
 如果不需要接收器功能，设置`sinkProvider`参数`null`。 如果不需要的安全描述符，设置`securityDescriptor`参数`null`。  
  
> [!CAUTION]
>  设置时`exclusiveAddressUse`属性`false`中`properties`参数，多个<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>为相同命名管道，可以注册对象。 在这种情况下请求可以转到任何注册的通道。 此设置被视为安全还使用 alc 时，才才。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string name, string portName, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string portName, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, portName As String, sinkProvider As IServerChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::String ^ name, System::String ^ portName, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : string * string * System.Runtime.Remoting.Channels.IServerChannelSinkProvider -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel (name, portName, sinkProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="name">信道的名称。</param>
        <param name="portName">信道要使用的 IPC 端口的名称。</param>
        <param name="sinkProvider">信道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现。</param>
        <summary>使用指定的信道名称、IPC 端口名称和接收器初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数设置<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A>属性使用`name`参数。 如果你想要注册多个通道，每个通道都必须具有唯一的名称。  
  
 如果不需要接收器功能，设置`sinkProvider`参数`null`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#43](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#43)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#43](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelData">
      <MemberSignature Language="C#" Value="public object ChannelData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ChannelData" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelData As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ChannelData { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelData : obj" Usage="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取通道特定的数据。</summary>
        <value>包含特定于信道的数据的 <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管实例的形式返回<xref:System.Object?displayProperty=nameWithType>类，此属性的值可以强制转换为的实例<xref:System.Runtime.Remoting.Channels.ChannelDataStore>描述的通道<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>对象侦听。  
  
   
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData%2A> 属性。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#15](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#15)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#15](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelName">
      <MemberSignature Language="C#" Value="public string ChannelName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChannelName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ChannelName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelName : string" Usage="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前信道的名称。</summary>
        <value>包含信道名称的 <see cref="T:System.String" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个已注册的通道具有一个唯一名称。 该名称用于检索特定通道时调用<xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>方法。 默认名称为"ipc server"。  
  
   
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> 属性。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#12](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#12)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#12](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelPriority">
      <MemberSignature Language="C#" Value="public int ChannelPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChannelPriority" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChannelPriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelPriority : int" Usage="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前信道的优先级。</summary>
        <value>一个整数，指示分配给此信道的优先级。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 优先级控制在哪个通道将出现在的数据的顺序<xref:System.Runtime.Remoting.ObjRef>实例; 出现在较低的优先级通道之前的更高优先级通道。 客户端尝试连接到中列出的顺序中的服务器信道<xref:System.Runtime.Remoting.ObjRef>实例。 默认优先级为 20;允许负的优先级。  
  
   
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority%2A> 属性。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#13](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#13)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#13](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChannelUri">
      <MemberSignature Language="C#" Value="public string GetChannelUri ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetChannelUri() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChannelUri () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetChannelUri();" />
      <MemberSignature Language="F#" Value="member this.GetChannelUri : unit -&gt; string" Usage="ipcServerChannel.GetChannelUri " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前信道的 URI。</summary>
        <returns>一个 <see cref="T:System.String" /> 包含信道的 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 客户端使用的通道 URI 来指定远程服务器通道。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri%2A>方法。  
  
 [!code-cpp[Remoting_Ipc#12](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#12)]
 [!code-csharp[Remoting_Ipc#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrlsForUri">
      <MemberSignature Language="C#" Value="public virtual string[] GetUrlsForUri (string objectUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetUrlsForUri(string objectUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUrlsForUri (objectUri As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetUrlsForUri(System::String ^ objectUri);" />
      <MemberSignature Language="F#" Value="abstract member GetUrlsForUri : string -&gt; string[]&#xA;override this.GetUrlsForUri : string -&gt; string[]" Usage="ipcServerChannel.GetUrlsForUri objectUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="objectUri">需要其 URL 的对象的 URI。</param>
        <summary>返回具有指定 URI 的对象的所有 URL 的数组，该对象承载在当前的 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> 实例上。</summary>
        <returns>具有指定 URI 的对象的 URL 的数组，该对象承载在当前的 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> 实例上。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法的<xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri%2A> 方法。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#19)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecured">
      <MemberSignature Language="C#" Value="public bool IsSecured { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecured" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.IsSecured" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSecured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSecured { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSecured : bool with get, set" Usage="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.IsSecured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个布尔值，该值指示当前信道是否安全。</summary>
        <value>一个布尔值，指示当前实例是否安全。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public string Parse (string url, out string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Parse(string url, [out] string&amp; objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (url As String, ByRef objectURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Parse(System::String ^ url, [Runtime::InteropServices::Out] System::String ^ % objectURI);" />
      <MemberSignature Language="F#" Value="abstract member Parse : string *  -&gt; string&#xA;override this.Parse : string *  -&gt; string" Usage="ipcServerChannel.Parse (url, objectURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="objectURI" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">从中提取远程已知对象的 URI 的 URL。</param>
        <param name="objectURI">当此方法返回时，包含含有远程已知对象的 URI 的 <see cref="T:System.String" /> 实例。</param>
        <summary>从指定 URL 提取信道 URI 和远程已知对象 URI。</summary>
        <returns>当前信道的 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个对象的 URI 是唯一标识特定对象实例的值。  
  
   
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse%2A> 方法。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#19)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="public void StartListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StartListening(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit&#xA;override this.StartListening : obj -&gt; unit" Usage="ipcServerChannel.StartListening data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">指定初始化状态的对象，如果不想将特定状态传递到信道，则为 <see langword="null" />。</param>
        <summary>指示当前信道开始侦听请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不需要调用此方法以开始侦听新初始化的通道。  
  
 使用此方法重新启动后的通道上侦听<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening%2A>调用方法来停止侦听通道。  
  
 数据对象可以用于将特定的初始化状态传递到通道。 如果不希望将特定状态传递到通道，将传递`null`作为`data`参数值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">指定的侦听端口不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="public void StopListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StopListening(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit&#xA;override this.StopListening : obj -&gt; unit" Usage="ipcServerChannel.StopListening data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">指定初始化状态的对象，如果不想将特定状态传递到信道，则为 <see langword="null" />。</param>
        <summary>指示当前信道停止侦听请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法以停止侦听通道上。 若要重新开始侦听，使用<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening%2A>方法。  
  
 数据对象可以用于将特定的初始化状态传递到通道。 如果不希望将特定状态传递到通道，将传递`null`作为`data`参数值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>