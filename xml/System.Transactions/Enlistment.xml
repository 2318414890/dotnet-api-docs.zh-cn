<Type Name="Enlistment" FullName="System.Transactions.Enlistment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5dacb6e0d9a3eb1837291d29c765d3aadae3c06c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527931" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Enlistment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Enlistment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.Enlistment" />
  <TypeSignature Language="VB.NET" Value="Public Class Enlistment" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enlistment" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>促进登记的事务参与者和事务管理器之间在事务的最后阶段中的通信。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Transactions.Transaction.EnlistVolatile%2A>和<xref:System.Transactions.Transaction.EnlistDurable%2A>方法<xref:System.Transactions.Transaction>对象调用来登记在事务中的参与者，它们将返回此对象，该对象描述登记。  
  
 在事务提交的最后阶段，事务管理器将此对象传递给资源管理器实现<xref:System.Transactions.IEnlistmentNotification>已登记在事务中的接口。 具体而言，事务管理器调用<xref:System.Transactions.IEnlistmentNotification.Commit%2A>或<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>的参与者，具体取决于是否后者已决定提交或回滚事务的方法。 参与者应调用<xref:System.Transactions.Enlistment.Done%2A>的此对象，以允许事务管理器知道它已完成其工作的方法。  
  
 可以调用登记<xref:System.Transactions.Enlistment.Done%2A>已调用方法之前的任何时候<xref:System.Transactions.PreparingEnlistment.Prepared%2A>中准备阶段。  通过此操作，该登记投只读的票，这意味着它投票提交的事务，但不需要接收最终结果。 请注意之后,<xref:System.Transactions.Enlistment.Done%2A>方法调用，从事务管理器登记的参与者接收到的任何进一步的通知。  
  
   
  
## Examples  
 下面的示例演示如何实现<xref:System.Transactions.IEnlistmentNotification>接口，以及何时<xref:System.Transactions.Enlistment.Done%2A>应该调用方法。  
  
 [!code-csharp[Tx_Enlist#2](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)]
 [!code-vb[Tx_Enlist#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型是线程安全的。</threadsafe>
    <altmember cref="T:System.Transactions.PreparingEnlistment" />
    <altmember cref="T:System.Transactions.IEnlistmentNotification" />
  </Docs>
  <Members>
    <Member MemberName="Done">
      <MemberSignature Language="C#" Value="public void Done ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Done() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Enlistment.Done" />
      <MemberSignature Language="VB.NET" Value="Public Sub Done ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Done();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示事务参与者已完成其工作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在事务提交的最后阶段，事务管理器调用参与者<xref:System.Transactions.IEnlistmentNotification.Commit%2A>，<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>或<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>的参与者，具体取决于事务是提交还是回滚的方法。 资源管理器应执行任何工作完成事务，它已完成通过调用随后又通知事务管理器所需<xref:System.Transactions.Enlistment.Done%2A>方法`enlistment`参数。  
  
 如果资源管理器已持久登记，但未通过调用响应<xref:System.Transactions.Enlistment.Done%2A>方法，事务管理器不确定的资源管理器已收到相应通知调用。 在这种情况下，事务管理器将继续等待响应，并且保留信息与此事务。  如果<xref:System.Transactions.Enlistment.Done%2A>是永远不会调用，这段信息是围绕无限期保留在内存中或在系统级资源。 这会导致无法回收资源。 对于分布式事务，这可能最终填满 MSDTC 日志将停止 MSDTC 过程。 在由事务的情况下<xref:System.Transactions>，这会导致资源管理器的进程的内存消耗的逐步地持续增长。 因此，很重要，则调用<xref:System.Transactions.Enlistment.Done%2A>方法后资源管理器，可使用你准备工作。  
  
 可以调用登记<xref:System.Transactions.Enlistment.Done%2A>已调用方法之前的任何时候<xref:System.Transactions.PreparingEnlistment.Prepared%2A>中准备阶段。 通过此操作，该登记投只读的票，这意味着它投票提交的事务，但不需要接收最终结果。 请注意，调用此方法后，登记的参与者接收到任何进一步通知从事务管理器。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Transactions.PreparingEnlistment" />
        <altmember cref="T:System.Transactions.IEnlistmentNotification" />
      </Docs>
    </Member>
  </Members>
</Type>