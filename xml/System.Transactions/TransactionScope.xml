<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TransactionScope.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c72147f3ec967d71b609f35b6ae02d5cf13f169f7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72147f3ec967d71b609f35b6ae02d5cf13f169f7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Transactions.TransactionScope">
          <source>Makes a code block transactional.</source>
          <target state="translated">使代码块成为事务性代码。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Transactions.TransactionScope">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> infrastructure provides both an explicit programming model based on the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class, as well as an implicit programming model using the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, in which transactions are automatically managed by the infrastructure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions&gt;</ph>基础结构提供这两个显式编程模型基于<ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph>类，以及隐式编程模型使用<ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph>类，在其中事务自动管理基础结构。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>We recommend that you create implicit transactions using the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, so that the ambient transaction context is automatically managed for you.</source>
          <target state="translated">我们建议你创建使用隐式事务<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>类，以便为你自动管理的环境事务上下文。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>You should also use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</source>
          <target state="translated">你还应使用<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>和<ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph>跨多个函数调用或多个线程调用需要在同一事务的使用的应用程序的类。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>For more information on this model, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">在此模型上的详细信息，请参阅<bpt id="p1">[</bpt>实现隐式事务使用事务范围<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept>主题。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>For more information on writing a transactional application, see <bpt id="p1">[</bpt>Writing A Transactional Application<ept id="p1">](~/docs/framework/data/transactions/writing-a-transactional-application.md)</ept>.</source>
          <target state="translated">编写事务应用程序的详细信息，请参阅<bpt id="p1">[</bpt>编写一个事务应用程序<ept id="p1">](~/docs/framework/data/transactions/writing-a-transactional-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Upon instantiating a <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> by the <ph id="ph2">`new`</ph> statement, the transaction manager determines which transaction to participate in.</source>
          <target state="translated">在实例化<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>通过<ph id="ph2">`new`</ph>语句，事务管理器确定参与的事务。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Once determined, the scope always participates in that transaction.</source>
          <target state="translated">一旦确定，该范围将始终参与该事务。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The decision is based on two factors: whether an ambient transaction is present and the value of the <ph id="ph1">`TransactionScopeOption`</ph> parameter in the constructor.</source>
          <target state="translated">此决策基于两个因素：是否存在环境事务以及构造函数中 <ph id="ph1">`TransactionScopeOption`</ph> 参数的值。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The ambient transaction is the transaction your code executes in.</source>
          <target state="translated">你的代码中执行的事务是在环境事务。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>You can obtain a reference to the ambient transaction by calling the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class.</source>
          <target state="translated">可通过调用 <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> 类的静态 <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> 属性，获取对环境事务的引用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>For more information on how this parameter is used, see the "Transaction Flow Management" section of the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">有关如何使用此参数的详细信息，请参阅的"事务流管理"部分<bpt id="p1">[</bpt>实现隐式事务使用事务范围<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept>主题。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>If no exception occurs within the transaction scope (that is, between the initialization of the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object and the calling of its <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method), then the transaction in which the scope participates is allowed to proceed.</source>
          <target state="translated">如果在事务范围内未不发生任何异常 (即，之间的初始化<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>对象，并的调用其<ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph>方法)，则作用域所参与的事务允许以继续。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>If an exception does occur within the transaction scope, the transaction in which it participates will be rolled back.</source>
          <target state="translated">如果异常确实发生在事务范围内，它所参与的事务将回滚。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>When your application completes all work it wants to perform in a transaction, you should call the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> method only once to inform that transaction manager that it is acceptable to commit the transaction.</source>
          <target state="translated">在你的应用程序完成所有工作时它想要在事务中执行，应调用<ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph>方法一次，以通知该事务管理器是可接受提交事务。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Failing to call this method aborts the transaction.</source>
          <target state="translated">无法调用此方法将中止事务。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>A call to the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method marks the end of the transaction scope.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph>方法将标记的事务范围的末尾。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Exceptions that occur after calling this method may not affect the transaction.</source>
          <target state="translated">在调用此方法之后所发生的异常不会影响事务。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>If you modify the value of <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> inside a scope, an exception is thrown when <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> is called.</source>
          <target state="translated">如果修改的值<ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph>内一个作用域，将引发异常时<ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>However, at the end of the scope, the previous value is restored.</source>
          <target state="translated">但是，在作用域的结束时，以前的值将恢复。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>In addition, if you call <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> on <ph id="ph2">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> inside a transaction scope that created the transaction, the transaction aborts at the end of the scope.</source>
          <target state="translated">此外，如果你调用<ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph>上<ph id="ph2">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph>在事务范围创建事务，事务将中止范围的末尾。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class to define a block of code to participate in a transaction.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>类来定义要参与事务的代码块。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.Transactions.TransactionScope">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>This constructor creates a new transaction scope with the transaction scope option equal to <ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption.Required&gt;</ph>.</source>
          <target state="translated">此构造函数创建新的事务范围具有的事务作用域选项等于<ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption.Required&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>This means that a transaction is required by the new scope and the ambient transaction is used if one already exists.</source>
          <target state="translated">也就是说，通过新作用域需要使用事务，如果已存在使用该环境事务。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>Otherwise, it creates a new transaction before entering the scope.</source>
          <target state="translated">否则，在进入范围之前创建新的事务。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> 类的新实例，并将指定的事务设置为环境事务，以便该范围中进行的事务性工作使用此事务。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">要设置为环境事务（以便该范围中进行的事务性工作使用此事务）的事务。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> 枚举的实例，描述了当使用 Task 或 async/await .NET 异步编程模式时，与事务范围关联的环境事务将跨线程连续任务执行。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[在 .NET Framework 4.5.1 和更高版本中受支持]</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> 类的新实例，并将指定的事务设置为环境事务，以便该范围中进行的事务性工作使用此事务。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[在 .NET Framework 4.5.1 和更高版本中受支持]</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified asynchronous flow option.</source>
          <target state="translated">使用指定的异步流选项初始化 <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified requirements.</source>
          <target state="translated">以指定的要求初始化 <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">要设置为环境事务（以便该范围中进行的事务性工作使用此事务）的事务。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> after which the transaction scope times out and aborts the transaction.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 之后，事务范围将超时并中止此事务。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> 枚举的实例，描述了当使用 Task 或 async/await .NET 异步编程模式时，与事务范围关联的环境事务将跨线程连续任务执行。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[在 .NET Framework 4.5.1 和更高版本中受支持]</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">使用指定的超时时间值初始化 <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> 类的新实例，并将指定的事务设置为环境事务，以便该范围中进行的事务性工作使用此事务。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> 枚举的实例，描述与此事务范围关联的事务要求。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> structure that describes the transaction options to use if a new transaction is created.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> 结构描述要在创建新事务时使用的事务选项。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>If an existing transaction is used, the timeout value in this parameter applies to the transaction scope.</source>
          <target state="translated">如果使用现有的事务，则此参数中的超时值将应用于该事务范围。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>If that time expires before the scope is disposed, the transaction is aborted.</source>
          <target state="translated">如果该时间在范围被释放之前到期，则事务将中止。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> 枚举的实例，描述了当使用 Task 或 async/await .NET 异步编程模式时，与事务范围关联的环境事务将跨线程连续任务执行。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[在 .NET Framework 4.5.1 和更高版本中受支持]</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified requirements and asynchronous flow option.</source>
          <target state="translated">以指定的要求和异步流选项初始化 <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> 枚举的实例，描述与此事务范围关联的事务要求。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified requirements.</source>
          <target state="translated">以指定的要求初始化 <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>When you use the <ph id="ph1">`transactionOptions`</ph> parameter to specify an <ph id="ph2">&lt;xref:System.Transactions.IsolationLevel&gt;</ph>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level.</source>
          <target state="translated">当你使用<ph id="ph1">`transactionOptions`</ph>参数来指定<ph id="ph2">&lt;xref:System.Transactions.IsolationLevel&gt;</ph>，和作用域创建一个事务更高版本、 新的事务程序与指定的隔离级别。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.</source>
          <target state="translated">如果隔离级别与事务一起传入，事务必须具有完全相同的隔离级别，或引发异常。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.Complete">
          <source>Indicates that all operations within the scope are completed successfully.</source>
          <target state="translated">指示范围中的所有操作都已成功完成。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>When you are satisfied that all operations within the scope are completed successfully, you should call this method only once to inform that transaction manager that the state across all resources is consistent, and the transaction can be committed.</source>
          <target state="translated">当您满意后，范围内的所有操作都已成功都完成，应调用此方法仅一次通知该事务管理器，跨所有资源的状态不一致，并且可以提交事务。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>It is very good practice to put the call as the last statement in the <ph id="ph1">`using`</ph> block.</source>
          <target state="translated">它是很好的做法，以将该调用的最后一个语句作为<ph id="ph1">`using`</ph>块。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>For more information on how this method is used, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">有关如何使用此方法的详细信息，请参阅<bpt id="p1">[</bpt>实现隐式事务使用事务范围<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept>主题。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>Failing to call this method aborts the transaction, because the transaction manager interprets this as a system failure, or exceptions thrown within the scope of transaction.</source>
          <target state="translated">无法调用此方法将中止事务，因为事务管理器将此解释为系统故障时，或在事务范围内引发的异常。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>However, you should also note that calling this method does not guarantee a commit of the transaction.</source>
          <target state="translated">但是，您应该注意调用此方法不能保证提交事务。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>It is merely a way of informing the transaction manager of your status.</source>
          <target state="translated">它只是一种将状态通知给事务管理器的方式。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>After calling this method, you can no longer access the ambient transaction via the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> property, and trying to do so results in an exception being thrown.</source>
          <target state="translated">调用此方法后，你不能再访问环境事务通过<ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph>属性，并尝试执行的操作是导致引发异常。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>The actual work of commit between the resources manager happens at the <ph id="ph1">`End Using`</ph> statement if the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object created the transaction.</source>
          <target state="translated">处发生之间的资源管理器提交的实际工作<ph id="ph1">`End Using`</ph>语句如果<ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph>创建事务对象。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>If it did not create the transaction, the commit occurs whenever <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> is called by the owner of the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object.</source>
          <target state="translated">如果该对象未创建事务，则每当 <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> 对象的所有者调用 <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> 时都会执行提交。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether this method was called on the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object.</source>
          <target state="translated">此时，事务管理器调用资源管理器，并告知用户提交或回滚，基于是否上调用了此方法<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class to define a block of code to participate in a transaction.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>类来定义要参与事务的代码块。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.Complete">
          <source>This method has already been called once.</source>
          <target state="translated">此方法已被调用过一次。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Ends the transaction scope.</source>
          <target state="translated">结束事务范围。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Calling this method marks the end of the transaction scope.</source>
          <target state="translated">调用此方法将标记事务范围的末尾。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>If the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object created the transaction and <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> was called on the scope, the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object attempts to commit the transaction when this method is called.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>创建对象的事务和<ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph>的作用域中，调用了<ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph>对象尝试提交事务，当调用此方法。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>The use of the C# <ph id="ph1">`using`</ph> construction ensures that this method is called even if an exception occurs.</source>
          <target state="translated">使用 C#<ph id="ph1">`using`</ph>构造可确保即使发生异常时，调用此方法。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Exceptions that occur after calling this method may not affect the transaction.</source>
          <target state="translated">在调用此方法之后所发生的异常不会影响事务。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>This method also restores the ambient transaction to it original state.</source>
          <target state="translated">此方法还将还原的环境事务到其原始状态。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.TransactionAbortedException&gt;</ph> is thrown if the transaction is not actually committed.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Transactions.TransactionAbortedException&gt;</ph>也不会实际提交事务时引发。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>This method is synchronous and blocks until the transaction has been committed or aborted.</source>
          <target state="translated">此方法是同步方法，并阻止，直到提交或中止事务。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Because of this, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</source>
          <target state="translated">因此，你应在 Windows 窗体 (WinForm) 应用程序中，使用此方法时请格外小心，或可能出现死锁。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</source>
          <target state="translated">如果调用中一个 WinForm 控件事件 （例如，单击的按钮），此方法，并且使用同步<ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>方法来指示要执行中间处理事务，一些 UI 任务 （例如，不断变化的颜色） 的控件死锁将发生这种情况。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>This is because the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method is synchronous and blocks the worker thread until the UI thread finishes its job.</source>
          <target state="translated">这是因为<ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>方法是同步方法，并阻止工作线程，直到用户界面线程完成其作业。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</source>
          <target state="translated">但是，在我们的方案，UI 线程正在还等待工作线程以提交事务。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</source>
          <target state="translated">结果是，所有线程都无法继续并且作用域将无限期等待完成的提交。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> wherever possible, because it is asynchronous and thus less prone to deadlock.</source>
          <target state="translated">应使用<ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>而非<ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>只要有可能，因为它是异步的因此不太容易发生死锁。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>For more information on how this method is used, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">有关如何使用此方法的详细信息，请参阅<bpt id="p1">[</bpt>实现隐式事务使用事务范围<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept>主题。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class to define a block of code to participate in a transaction.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>类来定义要参与事务的代码块。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>