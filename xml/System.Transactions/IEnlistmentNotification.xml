<Type Name="IEnlistmentNotification" FullName="System.Transactions.IEnlistmentNotification">
  <Metadata><Meta Name="ms.openlocfilehash" Value="515c5331c81a97a49b80dee630ada21a4e303897" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58696255" /></Metadata><TypeSignature Language="C#" Value="public interface IEnlistmentNotification" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnlistmentNotification" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.IEnlistmentNotification" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnlistmentNotification" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnlistmentNotification" />
  <TypeSignature Language="F#" Value="type IEnlistmentNotification = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>描述一个接口，资源管理器应实现该接口以在登记参与时为事务管理器提供两阶段提交通知回调。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为了使资源管理器以参与事务，它必须通过事务管理器在事务中登记。 <xref:System.Transactions.Transaction> 类定义了一组提供此功能的方法，这些方法的名称以 `Enlist` 开头。 不同`Enlist`方法对应于不同类型的资源管理器可能具有的登记。  
  
 此类描述资源管理器应实现以在登记参与时事务管理器提供两阶段提交通知回调的接口。 有关每个资源管理器的实现<xref:System.Transactions.IEnlistmentNotification>接口，则应使用其在登记<xref:System.Transactions.Transaction.EnlistVolatile%2A>方法或<xref:System.Transactions.Transaction.EnlistDurable%2A>方法的<xref:System.Transactions.Transaction>类，具体取决于所需的资源是可变或持久性。 登记和 2PC 的更多信息，请参阅[登记为参与者在事务中的资源](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md)并[单阶段和多阶段中提交事务](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md)分别。  
  
 通过以下方法中，事务管理器会在两阶段提交协议的不同阶段通知登记的对象。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|事务管理器将询问参与者它们是否能够提交该事务时，此方法登记的对象由事务管理器的事务，在第一个阶段中用作回调。|  
|<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|如果事务是提交的此方法登记的对象由事务管理器在事务的第二个阶段中用作回调。|  
|<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|如果该事务被中止 （即，回滚），此方法登记的对象由事务管理器在事务的第二个阶段中用作回调。|  
|<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|如果事务不确定，此方法登记的对象由事务管理器在事务的第二个阶段中用作回调。|  
  
> [!NOTE]
>  您应注意，按顺序，或按特定顺序可能不会发送通知。  
  
   
  
## Examples  
 下面的示例显示了此接口，以及该对象登记在事务中使用的参与者为实现<xref:System.Transactions.Transaction.EnlistVolatile%2A>方法。  
  
 [!code-csharp[Tx_Enlist#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]
 [!code-vb[Tx_Enlist#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Transactions.ISinglePhaseNotification" />
    <related type="Article" href="https://msdn.microsoft.com/library/786a12c2-d530-49f4-9c59-5c973e15a11d">在事务中将资源登记为参与者</related>
    <related type="Article" href="https://msdn.microsoft.com/library/694ea153-e4db-41ae-96ac-9ac66dcb69a9">在单阶段和多阶段中提交事务</related>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Commit : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Commit enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.Enlistment" /> 对象。</param>
        <summary>通知登记的对象事务正在提交。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 时指示所有参与者提交事务，事务管理器做出的承诺，在第二个阶段调用此方法的登记的对象。  
  
 资源管理器应执行任何工作需要完成交易记录，并随后告知它已完成通过调用 TM<xref:System.Transactions.Enlistment.Done%2A>方法`enlistment`参数。  
  
 如果资源管理器已持久登记，但不响应通过调用<xref:System.Transactions.Enlistment.Done%2A>方法中，事务管理器不能确定资源管理器已接收<xref:System.Transactions.IEnlistmentNotification.Commit%2A>调用。 在这种情况下，事务管理器将继续等待响应，并维护与此事务相关的信息。  如果<xref:System.Transactions.Enlistment.Done%2A>是永远不会调用，这条信息是围绕无限期保留在内存中或在系统范围资源。 这会导致无法回收资源。 在分布式事务的情况下这可能最终填满 MSDTC 日志将停止 MSDTC 过程。 在管理的事务的情况下<xref:System.Transactions>，这会导致在资源管理器的进程的内存使用情况的逐步地持续增长。 因此，很重要，则调用<xref:System.Transactions.Enlistment.Done%2A>方法一旦资源管理器通过您准备工作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InDoubt">
      <MemberSignature Language="C#" Value="public void InDoubt (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InDoubt(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InDoubt(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member InDoubt : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.InDoubt enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.Enlistment" /> 对象。</param>
        <summary>通知登记的对象事务的状态不确定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当事务管理器调用到单个持久资源，单阶段提交操作，然后与持久资源的连接丢失之前得到事务结果，易失性资源调用此方法。 此时，不能安全地确定事务结果。  
  
 作为<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>被视为一个事务的最终状态，不应调用<xref:System.Transactions.IEnlistmentNotification.Commit%2A>或<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>后调用<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>。  
  
> [!NOTE]
>  此方法对于易失性资源的实现应在受影响的数据执行它了解任何恢复或封锁操作。  它还必须调用<xref:System.Transactions.Enlistment.Done%2A>上的方法上`enlistment`完成其工作时的参数。  
  
 如果资源管理器已持久登记，但不响应通过调用<xref:System.Transactions.Enlistment.Done%2A>方法中，事务管理器不能确定资源管理器已接收<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>调用。 在这种情况下，事务管理器将继续等待响应，并维护与此事务相关的信息。  如果<xref:System.Transactions.Enlistment.Done%2A>是永远不会调用，这条信息是围绕无限期保留在内存中或在系统范围资源。 这会导致无法回收资源。 在分布式事务的情况下这可能最终填满 MSDTC 日志将停止 MSDTC 过程。 在管理的事务的情况下<xref:System.Transactions>，这会导致在资源管理器的进程的内存使用情况的逐步地持续增长。 因此，很重要，则调用<xref:System.Transactions.Enlistment.Done%2A>方法一旦资源管理器通过您准备工作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class System.Transactions.PreparingEnlistment preparingEnlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Prepare(System::Transactions::PreparingEnlistment ^ preparingEnlistment);" />
      <MemberSignature Language="F#" Value="abstract member Prepare : System.Transactions.PreparingEnlistment -&gt; unit" Usage="iEnlistmentNotification.Prepare preparingEnlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preparingEnlistment" Type="System.Transactions.PreparingEnlistment" />
      </Parameters>
      <Docs>
        <param name="preparingEnlistment">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.PreparingEnlistment" /> 对象。</param>
        <summary>通知登记的对象事务正在为提交做准备。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事务管理器时调用此方法的已登记的资源管理器在阶段 1 的承诺，它会要求参与者它们是否能够提交该事务。  
  
 在实现持久资源管理器时，应记录你在此阶段的准备记录。 记录应包含所有必要的信息来执行恢复。 这包括<xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A>属性，用于传递给事务管理器中<xref:System.Transactions.TransactionManager.Reenlist%2A>在恢复过程的方法。 有关恢复的详细信息，请参阅[Performing Recovery](https://msdn.microsoft.com/library/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)。  
  
 资源管理器应完成所有工作，必须完成后再调用<xref:System.Transactions.PreparingEnlistment.Prepared%2A>方法的`preparingEnlistment`参数以指示承诺对其投票。 应确保这一点在提交、 回滚或置疑接收任何第 2 阶段通知此类之前。 这是因为第 2 阶段通知可以发生在调用的同一线程上内联<xref:System.Transactions.PreparingEnlistment.Prepared%2A>在第 1 阶段的方法。 因此，在调用 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 后，您不应执行任何预计在收到第 2 阶段通知前就可完成的操作（如释放锁定）。  
  
 您还可以调用的方法`preparingEnlistment`参数来指示回滚一票。  
  
 如果你想要只是观察并做出响应的事务，进度的对象不参与它，此方法的实现应调用<xref:System.Transactions.Enlistment.Done%2A>方法的`preparingEnlistment`完成其工作时的参数。 通过这样做，资源管理器将不会收到任何第 2 阶段通知。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Rollback : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Rollback enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.Enlistment" /> 对象。</param>
        <summary>通知登记的对象事务正在回滚（中止）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当事务正在回滚 （中止），因为一个或多个事务参与者无法提交事务时，事务管理器将调用此方法的登记的对象。  
  
 资源管理器应执行任何工作需要完成交易记录，并随后告知它已完成通过调用 TM<xref:System.Transactions.Enlistment.Done%2A>方法`enlistment`参数。  
  
 如果资源管理器已持久登记，但不响应通过调用<xref:System.Transactions.Enlistment.Done%2A>方法中，事务管理器不能确定资源管理器已接收<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>调用。 在这种情况下，事务管理器将继续等待响应，并维护与此事务相关的信息。  如果<xref:System.Transactions.Enlistment.Done%2A>是永远不会调用，这条信息是围绕无限期保留在内存中或在系统范围资源。 这会导致无法回收资源。 在分布式事务的情况下这可能最终填满 MSDTC 日志将停止 MSDTC 过程。 在管理的事务的情况下<xref:System.Transactions>，这会导致在资源管理器的进程的内存使用情况的逐步地持续增长。 因此，很重要，则调用<xref:System.Transactions.Enlistment.Done%2A>方法一旦资源管理器通过您准备工作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>