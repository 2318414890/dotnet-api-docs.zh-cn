<Type Name="IEnlistmentNotification" FullName="System.Transactions.IEnlistmentNotification">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0dcde52862800efd6574c0aa26e24371b65d56c6" /><Meta Name="ms.sourcegitcommit" Value="3efce15f3841385ee3ba24bd71ff0c0cf9a47815" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/03/2019" /><Meta Name="ms.locfileid" Value="58873912" /></Metadata><TypeSignature Language="C#" Value="public interface IEnlistmentNotification" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnlistmentNotification" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.IEnlistmentNotification" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnlistmentNotification" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnlistmentNotification" />
  <TypeSignature Language="F#" Value="type IEnlistmentNotification = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="bea6d-101">描述一个接口，资源管理器应实现该接口以在登记参与时为事务管理器提供两阶段提交通知回调。</span><span class="sxs-lookup"><span data-stu-id="bea6d-101">Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea6d-102">为了使资源管理器以参与事务，它必须通过事务管理器在事务中登记。</span><span class="sxs-lookup"><span data-stu-id="bea6d-102">In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager.</span></span> <span data-ttu-id="bea6d-103"><xref:System.Transactions.Transaction> 类定义了一组提供此功能的方法，这些方法的名称以 `Enlist` 开头。</span><span class="sxs-lookup"><span data-stu-id="bea6d-103">The <xref:System.Transactions.Transaction> class defines a set of methods whose names begin with `Enlist` that provide this functionality.</span></span> <span data-ttu-id="bea6d-104">不同的 `Enlist` 方法对应于资源管理器可能具有的不同登记类型。</span><span class="sxs-lookup"><span data-stu-id="bea6d-104">The different `Enlist` methods correspond to the different types of enlistment that a resource manager may have.</span></span>  
  
 <span data-ttu-id="bea6d-105">此类描述资源管理器应实现以在登记参与时事务管理器提供两阶段提交通知回调的接口。</span><span class="sxs-lookup"><span data-stu-id="bea6d-105">This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</span></span> <span data-ttu-id="bea6d-106">有关每个资源管理器的实现<xref:System.Transactions.IEnlistmentNotification>接口，则应使用其在登记<xref:System.Transactions.Transaction.EnlistVolatile%2A>方法或<xref:System.Transactions.Transaction.EnlistDurable%2A>方法的<xref:System.Transactions.Transaction>类，具体取决于所需的资源是可变或持久性。</span><span class="sxs-lookup"><span data-stu-id="bea6d-106">For each resource manager's implementation of the <xref:System.Transactions.IEnlistmentNotification> interface, you should enlist it using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class, depending on whether your resource is volatile or durable.</span></span> <span data-ttu-id="bea6d-107">登记和 2PC 的更多信息，请参阅[登记为参与者在事务中的资源](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md)并[单阶段和多阶段中提交事务](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md)分别。</span><span class="sxs-lookup"><span data-stu-id="bea6d-107">For more information on enlistment and 2PC, see [Enlisting Resources as Participants in a Transaction](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md) and [Committing a Transaction in Single-Phase and Multi-Phase](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md) respectively.</span></span>  
  
 <span data-ttu-id="bea6d-108">通过以下方法中，事务管理器会在两阶段提交协议的不同阶段通知登记的对象。</span><span class="sxs-lookup"><span data-stu-id="bea6d-108">The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.</span></span>  
  
|<span data-ttu-id="bea6d-109">方法</span><span class="sxs-lookup"><span data-stu-id="bea6d-109">Method</span></span>|<span data-ttu-id="bea6d-110">描述</span><span class="sxs-lookup"><span data-stu-id="bea6d-110">Description</span></span>|  
|------------|-----------------|  
|<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|<span data-ttu-id="bea6d-111">事务管理器将询问参与者它们是否能够提交该事务时，此方法登记的对象由事务管理器的事务，在第一个阶段中用作回调。</span><span class="sxs-lookup"><span data-stu-id="bea6d-111">This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.</span></span>|  
|<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|<span data-ttu-id="bea6d-112">如果事务是提交的此方法登记的对象由事务管理器在事务的第二个阶段中用作回调。</span><span class="sxs-lookup"><span data-stu-id="bea6d-112">This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is committed.</span></span>|  
|<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|<span data-ttu-id="bea6d-113">如果该事务被中止 （即，回滚），此方法登记的对象由事务管理器在事务的第二个阶段中用作回调。</span><span class="sxs-lookup"><span data-stu-id="bea6d-113">This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back).</span></span>|  
|<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|<span data-ttu-id="bea6d-114">如果事务不确定，此方法登记的对象由事务管理器在事务的第二个阶段中用作回调。</span><span class="sxs-lookup"><span data-stu-id="bea6d-114">This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="bea6d-115">您应注意，按顺序，或按特定顺序可能不会发送通知。</span><span class="sxs-lookup"><span data-stu-id="bea6d-115">You should be aware that notifications might not be sent sequentially, or in a particular order.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bea6d-116">下面的示例显示了此接口，以及该对象登记在事务中使用的参与者为实现<xref:System.Transactions.Transaction.EnlistVolatile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bea6d-116">The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.</span></span>  
  
 [!code-csharp[Tx_Enlist#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]
 [!code-vb[Tx_Enlist#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Transactions.ISinglePhaseNotification" />
    <related type="Article" href="https://msdn.microsoft.com/library/786a12c2-d530-49f4-9c59-5c973e15a11d"><span data-ttu-id="bea6d-117">在事务中将资源登记为参与者</span><span class="sxs-lookup"><span data-stu-id="bea6d-117">Enlisting Resources as Participants in a Transaction</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/694ea153-e4db-41ae-96ac-9ac66dcb69a9"><span data-ttu-id="bea6d-118">在单阶段和多阶段中提交事务</span><span class="sxs-lookup"><span data-stu-id="bea6d-118">Committing a Transaction in Single-Phase and Multi-Phase</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Commit : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Commit enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment"><span data-ttu-id="bea6d-119">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.Enlistment" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="bea6d-119">An <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</span></span></param>
        <summary><span data-ttu-id="bea6d-120">通知登记的对象事务正在提交。</span><span class="sxs-lookup"><span data-stu-id="bea6d-120">Notifies an enlisted object that a transaction is being committed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea6d-121">时指示所有参与者提交事务，事务管理器做出的承诺，在第二个阶段调用此方法的登记的对象。</span><span class="sxs-lookup"><span data-stu-id="bea6d-121">The transaction manager calls this method of an enlisted object during the second phase of a commitment, when it instructs all participants to commit the transaction.</span></span>  
  
 <span data-ttu-id="bea6d-122">资源管理器应执行任何工作需要完成交易记录，并随后告知它已完成通过调用 TM<xref:System.Transactions.Enlistment.Done%2A>方法`enlistment`参数。</span><span class="sxs-lookup"><span data-stu-id="bea6d-122">The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.</span></span>  
  
 <span data-ttu-id="bea6d-123">如果资源管理器已持久登记，但不响应通过调用<xref:System.Transactions.Enlistment.Done%2A>方法中，事务管理器不能确定资源管理器已接收<xref:System.Transactions.IEnlistmentNotification.Commit%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="bea6d-123">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Commit%2A> call.</span></span> <span data-ttu-id="bea6d-124">在这种情况下，事务管理器将继续等待响应，并维护与此事务相关的信息。</span><span class="sxs-lookup"><span data-stu-id="bea6d-124">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="bea6d-125">如果<xref:System.Transactions.Enlistment.Done%2A>是永远不会调用，这条信息是围绕无限期保留在内存中或在系统范围资源。</span><span class="sxs-lookup"><span data-stu-id="bea6d-125">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="bea6d-126">这会导致无法回收资源。</span><span class="sxs-lookup"><span data-stu-id="bea6d-126">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="bea6d-127">在分布式事务的情况下这可能最终填满 MSDTC 日志将停止 MSDTC 过程。</span><span class="sxs-lookup"><span data-stu-id="bea6d-127">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="bea6d-128">在管理的事务的情况下<xref:System.Transactions>，这会导致在资源管理器的进程的内存使用情况的逐步地持续增长。</span><span class="sxs-lookup"><span data-stu-id="bea6d-128">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="bea6d-129">因此，很重要，则调用<xref:System.Transactions.Enlistment.Done%2A>方法一旦资源管理器通过您准备工作。</span><span class="sxs-lookup"><span data-stu-id="bea6d-129">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InDoubt">
      <MemberSignature Language="C#" Value="public void InDoubt (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InDoubt(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InDoubt(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member InDoubt : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.InDoubt enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment"><span data-ttu-id="bea6d-130">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.Enlistment" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="bea6d-130">An <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</span></span></param>
        <summary><span data-ttu-id="bea6d-131">通知登记的对象事务的状态不确定。</span><span class="sxs-lookup"><span data-stu-id="bea6d-131">Notifies an enlisted object that the status of a transaction is in doubt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea6d-132">当事务管理器调用到单个持久资源，单阶段提交操作，然后与持久资源的连接丢失之前得到事务结果，易失性资源调用此方法。</span><span class="sxs-lookup"><span data-stu-id="bea6d-132">This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result.</span></span> <span data-ttu-id="bea6d-133">此时，不能安全地确定事务结果。</span><span class="sxs-lookup"><span data-stu-id="bea6d-133">At that point, the transaction outcome cannot be safely determined.</span></span>  
  
 <span data-ttu-id="bea6d-134">作为<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>被视为一个事务的最终状态，不应调用<xref:System.Transactions.IEnlistmentNotification.Commit%2A>或<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>后调用<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>。</span><span class="sxs-lookup"><span data-stu-id="bea6d-134">As <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> is considered to be a final state for a transaction, you should not call <xref:System.Transactions.IEnlistmentNotification.Commit%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> after calling <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea6d-135">此方法对于易失性资源的实现应在受影响的数据执行它了解任何恢复或封锁操作。</span><span class="sxs-lookup"><span data-stu-id="bea6d-135">Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.</span></span>  <span data-ttu-id="bea6d-136">它还必须调用<xref:System.Transactions.Enlistment.Done%2A>上的方法上`enlistment`完成其工作时的参数。</span><span class="sxs-lookup"><span data-stu-id="bea6d-136">It must also call the <xref:System.Transactions.Enlistment.Done%2A> method on the on the `enlistment` parameter when it has finished its work.</span></span>  
  
 <span data-ttu-id="bea6d-137">如果资源管理器已持久登记，但不响应通过调用<xref:System.Transactions.Enlistment.Done%2A>方法中，事务管理器不能确定资源管理器已接收<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="bea6d-137">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> call.</span></span> <span data-ttu-id="bea6d-138">在这种情况下，事务管理器将继续等待响应，并维护与此事务相关的信息。</span><span class="sxs-lookup"><span data-stu-id="bea6d-138">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="bea6d-139">如果<xref:System.Transactions.Enlistment.Done%2A>是永远不会调用，这条信息是围绕无限期保留在内存中或在系统范围资源。</span><span class="sxs-lookup"><span data-stu-id="bea6d-139">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="bea6d-140">这会导致无法回收资源。</span><span class="sxs-lookup"><span data-stu-id="bea6d-140">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="bea6d-141">在分布式事务的情况下这可能最终填满 MSDTC 日志将停止 MSDTC 过程。</span><span class="sxs-lookup"><span data-stu-id="bea6d-141">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="bea6d-142">在管理的事务的情况下<xref:System.Transactions>，这会导致在资源管理器的进程的内存使用情况的逐步地持续增长。</span><span class="sxs-lookup"><span data-stu-id="bea6d-142">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="bea6d-143">因此，很重要，则调用<xref:System.Transactions.Enlistment.Done%2A>方法一旦资源管理器通过您准备工作。</span><span class="sxs-lookup"><span data-stu-id="bea6d-143">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class System.Transactions.PreparingEnlistment preparingEnlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Prepare(System::Transactions::PreparingEnlistment ^ preparingEnlistment);" />
      <MemberSignature Language="F#" Value="abstract member Prepare : System.Transactions.PreparingEnlistment -&gt; unit" Usage="iEnlistmentNotification.Prepare preparingEnlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preparingEnlistment" Type="System.Transactions.PreparingEnlistment" />
      </Parameters>
      <Docs>
        <param name="preparingEnlistment"><span data-ttu-id="bea6d-144">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.PreparingEnlistment" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="bea6d-144">A <see cref="T:System.Transactions.PreparingEnlistment" /> object used to send a response to the transaction manager.</span></span></param>
        <summary><span data-ttu-id="bea6d-145">通知登记的对象事务正在为提交做准备。</span><span class="sxs-lookup"><span data-stu-id="bea6d-145">Notifies an enlisted object that a transaction is being prepared for commitment.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea6d-146">事务管理器时调用此方法的已登记的资源管理器在阶段 1 的承诺，它会要求参与者它们是否能够提交该事务。</span><span class="sxs-lookup"><span data-stu-id="bea6d-146">The transaction manager calls this method of an enlisted resource manager during the phase 1 of a commitment, when it asks participants whether they can commit the transaction.</span></span>  
  
 <span data-ttu-id="bea6d-147">在实现持久资源管理器时，应记录你在此阶段的准备记录。</span><span class="sxs-lookup"><span data-stu-id="bea6d-147">When you are implementing a durable resource manager, you should log your prepare record during this phase.</span></span> <span data-ttu-id="bea6d-148">记录应包含所有必要的信息来执行恢复。</span><span class="sxs-lookup"><span data-stu-id="bea6d-148">The record should contain all the necessary information to perform recovery.</span></span> <span data-ttu-id="bea6d-149">这包括<xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A>属性，用于传递给事务管理器中<xref:System.Transactions.TransactionManager.Reenlist%2A>在恢复过程的方法。</span><span class="sxs-lookup"><span data-stu-id="bea6d-149">This includes the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property, which is passed to the transaction manager in the <xref:System.Transactions.TransactionManager.Reenlist%2A> method during recovery.</span></span> <span data-ttu-id="bea6d-150">有关恢复的详细信息，请参阅[Performing Recovery](https://msdn.microsoft.com/library/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)。</span><span class="sxs-lookup"><span data-stu-id="bea6d-150">For more information on recovery, see [Performing Recovery](https://msdn.microsoft.com/library/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).</span></span>  
  
 <span data-ttu-id="bea6d-151">资源管理器应完成所有工作，必须完成后再调用<xref:System.Transactions.PreparingEnlistment.Prepared%2A>方法的`preparingEnlistment`参数以指示承诺对其投票。</span><span class="sxs-lookup"><span data-stu-id="bea6d-151">Your resource manager should complete all work that must be finished before calling the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method of the `preparingEnlistment` parameter to indicate its vote for commitment.</span></span> <span data-ttu-id="bea6d-152">应确保这一点在提交、 回滚或置疑接收任何第 2 阶段通知此类之前。</span><span class="sxs-lookup"><span data-stu-id="bea6d-152">You should make sure that this is accomplished before receiving any phase 2 notification such as commit, rollback or in doubt.</span></span> <span data-ttu-id="bea6d-153">这是因为第 2 阶段通知可以发生在调用的同一线程上内联<xref:System.Transactions.PreparingEnlistment.Prepared%2A>在第 1 阶段的方法。</span><span class="sxs-lookup"><span data-stu-id="bea6d-153">This is because phase 2 notifications can happen inline on the same thread that called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method in phase 1.</span></span> <span data-ttu-id="bea6d-154">因此，在调用 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 后，您不应执行任何预计在收到第 2 阶段通知前就可完成的操作（如释放锁定）。</span><span class="sxs-lookup"><span data-stu-id="bea6d-154">As such, you should not do any work after the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.</span></span>  
  
 <span data-ttu-id="bea6d-155">您还可以调用的方法`preparingEnlistment`参数来指示回滚一票。</span><span class="sxs-lookup"><span data-stu-id="bea6d-155">You can also call the method of the `preparingEnlistment` parameter to indicate a vote for rollback.</span></span>  
  
 <span data-ttu-id="bea6d-156">如果你想要只是观察并做出响应的事务，进度的对象不参与它，此方法的实现应调用<xref:System.Transactions.Enlistment.Done%2A>方法的`preparingEnlistment`完成其工作时的参数。</span><span class="sxs-lookup"><span data-stu-id="bea6d-156">If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <xref:System.Transactions.Enlistment.Done%2A> method of the `preparingEnlistment` parameter when it has finished its work.</span></span> <span data-ttu-id="bea6d-157">通过这样做，资源管理器将不会收到任何第 2 阶段通知。</span><span class="sxs-lookup"><span data-stu-id="bea6d-157">By doing so, your resource manager would not receive any phase 2 notification.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Rollback : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Rollback enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment"><span data-ttu-id="bea6d-158">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.Enlistment" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="bea6d-158">A <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</span></span></param>
        <summary><span data-ttu-id="bea6d-159">通知登记的对象事务正在回滚（中止）。</span><span class="sxs-lookup"><span data-stu-id="bea6d-159">Notifies an enlisted object that a transaction is being rolled back (aborted).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea6d-160">当事务正在回滚 （中止），因为一个或多个事务参与者无法提交事务时，事务管理器将调用此方法的登记的对象。</span><span class="sxs-lookup"><span data-stu-id="bea6d-160">The transaction manager calls this method of an enlisted object when the transaction is being rolled back (aborted) due to the inability of one or more transaction participants to commit the transaction.</span></span>  
  
 <span data-ttu-id="bea6d-161">资源管理器应执行任何工作需要完成交易记录，并随后告知它已完成通过调用 TM<xref:System.Transactions.Enlistment.Done%2A>方法`enlistment`参数。</span><span class="sxs-lookup"><span data-stu-id="bea6d-161">The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.</span></span>  
  
 <span data-ttu-id="bea6d-162">如果资源管理器已持久登记，但不响应通过调用<xref:System.Transactions.Enlistment.Done%2A>方法中，事务管理器不能确定资源管理器已接收<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="bea6d-162">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> call.</span></span> <span data-ttu-id="bea6d-163">在这种情况下，事务管理器将继续等待响应，并维护与此事务相关的信息。</span><span class="sxs-lookup"><span data-stu-id="bea6d-163">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="bea6d-164">如果<xref:System.Transactions.Enlistment.Done%2A>是永远不会调用，这条信息是围绕无限期保留在内存中或在系统范围资源。</span><span class="sxs-lookup"><span data-stu-id="bea6d-164">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="bea6d-165">这会导致无法回收资源。</span><span class="sxs-lookup"><span data-stu-id="bea6d-165">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="bea6d-166">在分布式事务的情况下这可能最终填满 MSDTC 日志将停止 MSDTC 过程。</span><span class="sxs-lookup"><span data-stu-id="bea6d-166">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="bea6d-167">在管理的事务的情况下<xref:System.Transactions>，这会导致在资源管理器的进程的内存使用情况的逐步地持续增长。</span><span class="sxs-lookup"><span data-stu-id="bea6d-167">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="bea6d-168">因此，很重要，则调用<xref:System.Transactions.Enlistment.Done%2A>方法一旦资源管理器通过您准备工作。</span><span class="sxs-lookup"><span data-stu-id="bea6d-168">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>