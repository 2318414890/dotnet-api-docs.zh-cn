<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HttpContent.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5dbc2474e82bbf7313a8c6c6e37f60bd375518eea.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbc2474e82bbf7313a8c6c6e37f60bd375518eea</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpContent">
          <source>A base class representing an HTTP entity body and content headers.</source>
          <target state="translated">表示 HTTP 实体正文和内容标头的基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpContent">
          <source>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter.</source>
          <target state="translated">将 HTTP 内容序列化为字节流，并将其复制到作为 <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 参数提供的流对象。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpContent">
          <source>This operation does not block.</source>
          <target state="translated">此操作不会阻止。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>The target stream.</source>
          <target state="translated">目标流。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter.</source>
          <target state="translated">将 HTTP 内容序列化为字节流，并将其复制到作为 <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 参数提供的流对象。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written to the stream object passed as the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象将完成的所有内容都已写入流对象作为传递<ph id="ph2">`stream`</ph>参数。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The target stream.</source>
          <target state="translated">目标流。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Information about the transport (channel binding token, for example).</source>
          <target state="translated">有关传输的信息（例如信道绑定令牌）。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This parameter may be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">此参数可以为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter.</source>
          <target state="translated">将 HTTP 内容序列化为字节流，并将其复制到作为 <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 参数提供的流对象。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written to the stream object passed as the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象将完成的所有内容都已写入流对象作为传递<ph id="ph2">`stream`</ph>参数。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>Serialize the HTTP content to a memory stream as an asynchronous operation.</source>
          <target state="translated">采用异步操作将 HTTP 内容序列化到内存流。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written to the memory stream.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象都完成后的所有内容已写入到内存流。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>Once the operation completes, the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property on the returned task object contains the memory stream that that represents the HTTP content.</source>
          <target state="translated">操作完成后，<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph>返回的任务对象上的属性包含内存流，它代表 HTTP 内容。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>The returned stream can then be used to read the content using various stream APIs.</source>
          <target state="translated">然后可以使用返回的流读取使用各种流 Api 的内容。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CreateContentReadStreamAsync%2A&gt;</ph> method buffers the content to a memory stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CreateContentReadStreamAsync%2A&gt;</ph>方法缓冲到内存流的内容。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>Derived classes can override this behavior if there is a better way to retrieve the content as stream.</source>
          <target state="translated">如果没有更好的方法来检索作为流的内容，派生的类可以重写此行为。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>For example, a byte array or a string could use a more efficient method way such as wrapping a read-only <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> around the bytes or string.)</source>
          <target state="translated">例如，一个字节数组或字符串可以使用更高效的方法方法如包装的只读<ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>字节或字符串周围。)</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpContent">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> and optionally disposes of the managed resources.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> 使用的非托管资源，并可根据需要释放托管资源。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.Dispose">
          <source>Releases the unmanaged resources and disposes of the managed resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph>.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> 使用的非托管资源和托管资源。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to releases only unmanaged resources.</source>
          <target state="translated">如果释放托管资源和非托管资源，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果仅释放非托管资源，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> and optionally disposes of the managed resources.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> 使用的非托管资源，并可根据需要释放托管资源。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">此方法称为由公共<ph id="ph1">`Dispose()`</ph>方法和<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> 调用受保护<ph id="ph2">`Dispose(Boolean)`</ph>方法替换<ph id="ph3">`disposing`</ph>参数设置为<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.When the <ph id="ph5">`disposing`</ph> parameter is <ph id="ph6">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph7">&lt;xref:System.Net.Http.HttpContent&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 调用<ph id="ph2">`Dispose`</ph>与<ph id="ph3">`disposing`</ph>设置为<ph id="ph4">`false`</ph>。当<ph id="ph5">`disposing`</ph>参数是<ph id="ph6">`true`</ph>，此方法释放由任何托管对象持有的全部资源此<ph id="ph7">&lt;xref:System.Net.Http.HttpContent&gt;</ph>引用。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">此方法调用每个引用对象的 <ph id="ph1">`Dispose()`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Net.Http.HttpContent.Headers">
          <source>Gets the HTTP content headers as defined in RFC 2616.</source>
          <target state="translated">获取 RFC 2616 中定义的 HTTP 内容标头。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Http.HttpContent.Headers">
          <source>The content headers as defined in RFC 2616.</source>
          <target state="translated">RFC 2616 中定义的内容标头。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpContent">
          <source>Serialize the HTTP content to a memory buffer as an asynchronous operation.</source>
          <target state="translated">以异步操作方式将 HTTP 内容序列化到内存缓冲区。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpContent">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>Serialize the HTTP content to a memory buffer as an asynchronous operation.</source>
          <target state="translated">以异步操作方式将 HTTP 内容序列化到内存缓冲区。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after all of the content has been serialized to the memory buffer.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>对象都完成后的所有内容已序列化到内存缓冲区。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>After content is serialized to a memory buffer, calls to one of the  <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</ph> methods will copy the content of the memory buffer to the target stream.</source>
          <target state="translated">内容序列化到内存缓冲区后，会调用之一<ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</ph>方法会将内存缓冲区的内容复制到目标流。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>The maximum size, in bytes, of the buffer to use.</source>
          <target state="translated">要使用的缓冲区最大大小。（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>Serialize the HTTP content to a memory buffer as an asynchronous operation.</source>
          <target state="translated">以异步操作方式将 HTTP 内容序列化到内存缓冲区。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after all of the content has been serialized to the memory buffer.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>对象都完成后的所有内容已序列化到内存缓冲区。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>After content is serialized to a memory buffer, calls to one of the  <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</ph> methods will copy the content of the memory buffer to the target stream.</source>
          <target state="translated">内容序列化到内存缓冲区后，会调用之一<ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</ph>方法会将内存缓冲区的内容复制到目标流。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>If the content exceeds the value  passed in the <ph id="ph1">`maxBufferSize`</ph> parameter , an exception is thrown.</source>
          <target state="translated">如果内容超过中传递的值<ph id="ph1">`maxBufferSize`</ph>参数，将引发异常。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>Serialize the HTTP content to a byte array as an asynchronous operation.</source>
          <target state="translated">将 HTTP 内容序列化到字节数组，此为异步操作。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written as a byte array.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象都完成后的所有内容已写入字节数组的形式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>Once the operation completes, the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property on the returned task object contains the byte array with the HTTP content.</source>
          <target state="translated">操作完成后，<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph>返回的任务对象上的属性包含的 HTTP 内容的字节数组。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>Serialize the HTTP content and return a stream that represents the content as an asynchronous operation.</source>
          <target state="translated">将 HTTP 内容序列化并返回将内容表示为异步操作的流。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the stream that represents content has been read.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象将在后完成所有流表示内容已被读取。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>Once the operation completes, the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property on the returned task object contains the stream that that represents the HTTP content.</source>
          <target state="translated">操作完成后，<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph>返回的任务对象上的属性包含表示 HTTP 内容的流。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>The returned stream can then be used to read the content using various stream APIs.</source>
          <target state="translated">然后可以使用返回的流读取使用各种流 Api 的内容。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>Serialize the HTTP content to a string as an asynchronous operation.</source>
          <target state="translated">将 HTTP 内容序列化到字符串，此为异步操作。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written as a string.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象都完成后的所有内容已作为字符串写入。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>Once the operation completes, the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property on the returned task object contains the string with the HTTP content.</source>
          <target state="translated">操作完成后，<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph>返回的任务对象上的属性包含字符串的 HTTP 内容。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The target stream.</source>
          <target state="translated">目标流。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Information about the transport (channel binding token, for example).</source>
          <target state="translated">有关传输的信息（例如信道绑定令牌）。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This parameter may be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">此参数可以为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Serialize the HTTP content to a stream as an asynchronous operation.</source>
          <target state="translated">将 HTTP 内容序列化到流，此为异步操作。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been serialized to the stream object passed in the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象都完成后的所有内容已序列化到传入的流对象<ph id="ph2">`stream`</ph>参数。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>The length in bytes of the HTTP content.</source>
          <target state="translated">HTTP 内容的长度（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>Determines whether the HTTP content has a valid length in bytes.</source>
          <target state="translated">确定 HTTP 内容是否具有有效的长度（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is a valid length; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="length" /&gt;</ph> 是有效长度，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.TryComputeLength%2A&gt;</ph> method gives a HTTP content the ability to calculate the content length.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Http.HttpContent.TryComputeLength%2A&gt;</ph>方法使 HTTP 内容能够计算内容的长度。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>This is useful for content types which are able to easily calculate the content length.</source>
          <target state="translated">这可用于内容类型，它们是能够轻松地计算出的内容长度。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果计算内容的长度不能或昂贵 （需要系统的数据进行缓冲整个内容序列化将的成本要高或需要系统分配的大量的内存位置），此方法可以返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>If this method returns <ph id="ph1">`false`</ph>, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.</source>
          <target state="translated">如果此方法返回<ph id="ph1">`false`</ph>，这意味着，需要分块的传输或者是必须发送到服务器之前缓冲内容。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>