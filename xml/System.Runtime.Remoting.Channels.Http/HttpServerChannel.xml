<Type Name="HttpServerChannel" FullName="System.Runtime.Remoting.Channels.Http.HttpServerChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce1ea28bc695af132baa1695d48f2c7df575b61b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36536595" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpServerChannel : System.Runtime.Remoting.Channels.BaseChannelWithProperties, System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelReceiver, System.Runtime.Remoting.Channels.IChannelReceiverHook" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpServerChannel extends System.Runtime.Remoting.Channels.BaseChannelWithProperties implements class System.Runtime.Remoting.Channels.IChannel, class System.Runtime.Remoting.Channels.IChannelReceiver, class System.Runtime.Remoting.Channels.IChannelReceiverHook" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpServerChannel&#xA;Inherits BaseChannelWithProperties&#xA;Implements IChannel, IChannelReceiver, IChannelReceiverHook" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpServerChannel : System::Runtime::Remoting::Channels::BaseChannelWithProperties, System::Runtime::Remoting::Channels::IChannel, System::Runtime::Remoting::Channels::IChannelReceiver, System::Runtime::Remoting::Channels::IChannelReceiverHook" />
  <TypeSignature Language="F#" Value="type HttpServerChannel = class&#xA;    inherit BaseChannelWithProperties&#xA;    interface IChannelReceiver&#xA;    interface IChannel&#xA;    interface IChannelReceiverHook" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.Remoting.Channels.BaseChannelWithProperties</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelReceiver</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelReceiverHook</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>为远程调用实现使用 HTTP 协议传输消息的服务器信道。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 信道跨越远程处理边界 （例如，在应用程序域的计算机） 之间传输消息。 <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>类传输使用 HTTP 协议的消息。  
  
 .NET Framework 远程处理基础结构使用的通道用于传输远程调用。 当客户端进行到的远程对象调用时，则会将调用序列化到一条消息是由客户端通道发送和接收的服务器信道。 然后，它是反序列化和处理。 任何返回的值是由服务器通道传输和接收的客户端通道。  
  
 若要执行其他处理的消息在服务器端，你可以指定的实现<xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider>通过由其处理的所有消息<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>传递。  
  
 <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>接受二进制或 SOAP 格式中序列化的消息。  
  
 A<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>对象有关联的配置属性，可以在设置配置文件在运行时 (通过调用静态<xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=nameWithType>方法) 或以编程方式 (通过将传递<xref:System.Collections.IDictionary>集合到<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.%23ctor%2A>构造函数）。 有关这些配置属性的列表，请参阅的文档<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.%23ctor%2A>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>要设置远程处理服务器和其客户端对象。 此示例包含三个部分：  
  
-   一台服务器  
  
-   客户端  
  
-   使用服务器和客户端的远程对象  
  
 下面的代码示例演示服务器。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#20](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/server.cpp#20)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#20](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/server.cs#20)]  
  
 下面的代码示例演示了此服务器的客户端。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#30](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/client.cpp#30)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#30](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/client.cs#30)]  
  
 下面的代码示例演示使用在服务器和客户端的远程对象。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#40](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/common.cpp#40)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#40](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/common.cs#40)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpServerChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpServerChannel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpServerChannel (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpServerChannel(int port);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Http.HttpServerChannel : int -&gt; System.Runtime.Remoting.Channels.Http.HttpServerChannel" Usage="new System.Runtime.Remoting.Channels.Http.HttpServerChannel port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">信道侦听的端口。</param>
        <summary>初始化在指定端口上侦听的 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要请求，动态分配可用的端口，设置`port`参数设为 0 （零）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IDictionary, sinkProvider As IServerChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpServerChannel(System::Collections::IDictionary ^ properties, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Http.HttpServerChannel : System.Collections.IDictionary * System.Runtime.Remoting.Channels.IServerChannelSinkProvider -&gt; System.Runtime.Remoting.Channels.Http.HttpServerChannel" Usage="new System.Runtime.Remoting.Channels.Http.HttpServerChannel (properties, sinkProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="properties">包含当前信道配置信息的信道属性的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="sinkProvider">要用于 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 的新实例的 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" />。</param>
        <summary>使用指定的信道属性和接收器初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关通道配置属性的详细信息，请参阅[通道和格式化程序配置属性](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe)。  
  
 如果不需要接收器功能，设置`sinkProvider`参数`null`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#12](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/server2.cpp#12)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#12](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/server2.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">配置属性的格式设置不正确。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpServerChannel (string name, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpServerChannel(System::String ^ name, int port);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Http.HttpServerChannel : string * int -&gt; System.Runtime.Remoting.Channels.Http.HttpServerChannel" Usage="new System.Runtime.Remoting.Channels.Http.HttpServerChannel (name, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name">信道的名称。</param>
        <param name="port">信道侦听的端口。</param>
        <summary>使用给定名称初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 类的新实例，该实例侦听指定的端口。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数设置<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelName%2A>属性使用`name`参数。 如果你想要注册多个通道，每个通道都必须具有唯一的名称。  
  
 若要请求，动态分配可用的端口，设置`port`参数设为 0 （零）。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#13](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/server2.cpp#13)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#13](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/server2.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpServerChannel (string name, int port, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, int32 port, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.String,System.Int32,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, port As Integer, sinkProvider As IServerChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpServerChannel(System::String ^ name, int port, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Http.HttpServerChannel : string * int * System.Runtime.Remoting.Channels.IServerChannelSinkProvider -&gt; System.Runtime.Remoting.Channels.Http.HttpServerChannel" Usage="new System.Runtime.Remoting.Channels.Http.HttpServerChannel (name, port, sinkProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="name">信道的名称。</param>
        <param name="port">信道侦听的端口。</param>
        <param name="sinkProvider">要由信道使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />。</param>
        <summary>在指定的端口以给定的名称初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 类的新实例，该实例侦听指定的端口并使用指定的接收器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数设置<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelName%2A>属性使用`name`参数。  
  
 若要请求，动态分配可用的端口，设置`port`参数设为 0 （零）。  
  
 如果不需要接收器功能，设置`sinkProvider`参数`null`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#14](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/server2.cpp#14)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#14](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/server2.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHookChannelUri">
      <MemberSignature Language="C#" Value="public void AddHookChannelUri (string channelUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHookChannelUri(string channelUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.AddHookChannelUri(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHookChannelUri (channelUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHookChannelUri(System::String ^ channelUri);" />
      <MemberSignature Language="F#" Value="abstract member AddHookChannelUri : string -&gt; unit&#xA;override this.AddHookChannelUri : string -&gt; unit" Usage="httpServerChannel.AddHookChannelUri channelUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channelUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="channelUri">信道挂钩必须对其进行侦听的 URI。</param>
        <summary>添加信道挂钩必须对其进行侦听的 URI。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelData">
      <MemberSignature Language="C#" Value="public object ChannelData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ChannelData" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelData As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ChannelData { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelData : obj" Usage="System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取通道特定的数据。</summary>
        <value>包含特定于信道的数据的 <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管实例的形式返回<xref:System.Object?displayProperty=nameWithType>，此属性的值可以强制转换为的实例<xref:System.Runtime.Remoting.Channels.ChannelDataStore>描述的通道<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>对象侦听。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelName">
      <MemberSignature Language="C#" Value="public string ChannelName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChannelName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ChannelName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelName : string" Usage="System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前信道的名称。</summary>
        <value>一个包含信道名称的 <see cref="T:System.String" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个已注册的通道具有一个唯一名称。 此名称用于检索特定通道时调用<xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelPriority">
      <MemberSignature Language="C#" Value="public int ChannelPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChannelPriority" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChannelPriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelPriority : int" Usage="System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前信道的优先级。</summary>
        <value>一个整数，表示分配给该信道的优先级。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 优先级控制在哪个通道将出现在的数据的顺序<xref:System.Runtime.Remoting.ObjRef>实例; 出现在较低的优先级通道之前的更高优先级通道。 客户端尝试连接到中列出的顺序中的服务器信道<xref:System.Runtime.Remoting.ObjRef>实例。 默认优先级为 1;允许负的优先级。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelScheme">
      <MemberSignature Language="C#" Value="public string ChannelScheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChannelScheme" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelScheme" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelScheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ChannelScheme { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelScheme : string" Usage="System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelScheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要挂钩到的侦听器的类型（例如“http”）。</summary>
        <value>要挂钩到的侦听器类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此值不区分大小写。  
  
   
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelScheme%2A> 属性。 此代码示例摘自更大的示例为提供<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>类。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#21](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/server.cpp#21)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#21](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/server.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelSinkChain">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.IServerChannelSink ChannelSinkChain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Channels.IServerChannelSink ChannelSinkChain" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelSinkChain" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelSinkChain As IServerChannelSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Remoting::Channels::IServerChannelSink ^ ChannelSinkChain { System::Runtime::Remoting::Channels::IServerChannelSink ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelSinkChain : System.Runtime.Remoting.Channels.IServerChannelSink" Usage="System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelSinkChain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.IServerChannelSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前信道正在使用的信道接收器链。</summary>
        <value>当前信道正在使用的信道接收器链。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelSinkChain%2A> 属性。 此代码示例摘自更大的示例为提供<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>类。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#23](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/server.cpp#23)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#23](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/server.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChannelUri">
      <MemberSignature Language="C#" Value="public string GetChannelUri ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetChannelUri() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.GetChannelUri" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChannelUri () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetChannelUri();" />
      <MemberSignature Language="F#" Value="member this.GetChannelUri : unit -&gt; string" Usage="httpServerChannel.GetChannelUri " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前信道的 URI。</summary>
        <returns>当前信道的 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.GetChannelUri%2A> 方法。 此代码示例摘自更大的示例为提供<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>类。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#22](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/server.cpp#22)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#22](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/server.cs#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrlsForUri">
      <MemberSignature Language="C#" Value="public virtual string[] GetUrlsForUri (string objectUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetUrlsForUri(string objectUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.GetUrlsForUri(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUrlsForUri (objectUri As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetUrlsForUri(System::String ^ objectUri);" />
      <MemberSignature Language="F#" Value="abstract member GetUrlsForUri : string -&gt; string[]&#xA;override this.GetUrlsForUri : string -&gt; string[]" Usage="httpServerChannel.GetUrlsForUri objectUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="objectUri">需要其 URL 的对象的 URI。</param>
        <summary>返回具有指定 URI 的对象的所有 URL 的数组，该对象承载在当前的 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /> 上。</summary>
        <returns>具有指定 URI 的对象的所有 URL 的数组，该对象承载在当前的 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /> 上。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将使用当前方法的<xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.GetUrlsForUri%2A> 方法。 此代码示例摘自更大的示例为提供<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>类。  
  
 [!code-cpp[HttpChannel.GetUrlsFromUri#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpChannel.GetUrlsFromUri/CPP/class1.cpp#1)]
 [!code-csharp[HttpChannel.GetUrlsFromUri#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpChannel.GetUrlsFromUri/CS/class1.cs#1)]
 [!code-vb[HttpChannel.GetUrlsFromUri#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpChannel.GetUrlsFromUri/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Runtime.Remoting.Channels.Http.HttpServerChannel.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">要检索的信道属性的键。</param>
        <summary>返回指定的信道属性。</summary>
        <value>一个 <see cref="T:System.Object" />，表示由 <paramref name="key" /> 指定的信道属性。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public override System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Keys" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Runtime.Remoting.Channels.Http.HttpServerChannel.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与信道属性关联的键的 <see cref="T:System.Collections.ICollection" /> 。</summary>
        <value>与信道属性关联的键的 <see cref="T:System.Collections.ICollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通道属性用于在运行时配置通道。 有关可能通道属性和示例的列表，请参阅[ &#91; \<topic://cpconchannelformatterconfigurationproperties >&#93;](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public string Parse (string url, out string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Parse(string url, [out] string&amp; objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Parse(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (url As String, ByRef objectURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Parse(System::String ^ url, [Runtime::InteropServices::Out] System::String ^ % objectURI);" />
      <MemberSignature Language="F#" Value="abstract member Parse : string *  -&gt; string&#xA;override this.Parse : string *  -&gt; string" Usage="httpServerChannel.Parse (url, objectURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="objectURI" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">从中提取 URI 的 URL。</param>
        <param name="objectURI">当此方法返回时，包含含有远程已知对象的 URI 的 <see cref="T:System.String" />。 此参数未经初始化即被传递。</param>
        <summary>从指定 URL 提取信道 URI 和远程已知对象 URI。</summary>
        <returns>信道 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Parse%2A> 方法。 此代码示例摘自更大的示例为提供<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>类。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#25](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/server.cpp#25)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#25](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/server.cs#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="public void StartListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StartListening(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit&#xA;override this.StartListening : obj -&gt; unit" Usage="httpServerChannel.StartListening data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">对于 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />，应始终为 <see langword="null" />。</param>
        <summary>指示当前信道开始侦听请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不需要调用此方法以开始侦听新初始化的通道。  
  
 使用此方法重新启动后的通道上侦听<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.StopListening%2A>调用方法来停止侦听通道。  
  
 如果您的通道使用动态分配的端口号，则重新开始侦听时，可能会更改端口号。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="public void StopListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StopListening(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit&#xA;override this.StopListening : obj -&gt; unit" Usage="httpServerChannel.StopListening data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">对于 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />，应始终为 <see langword="null" />。</param>
        <summary>指示当前信道停止侦听请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法以停止侦听通道上。 若要重新开始侦听，使用<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.StartListening%2A>方法。  
  
 如果您的通道使用动态分配的端口号，则重新开始侦听时，可能会更改端口号。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WantsToListen">
      <MemberSignature Language="C#" Value="public bool WantsToListen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WantsToListen" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.WantsToListen" />
      <MemberSignature Language="VB.NET" Value="Public Property WantsToListen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WantsToListen { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WantsToListen : bool with get, set" Usage="System.Runtime.Remoting.Channels.Http.HttpServerChannel.WantsToListen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个布尔值，该值指示是否需要将 <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiverHook" /> 挂接到外部侦听器服务。</summary>
        <value>一个布尔值，该值指示是否需要将 <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiverHook" /> 挂接到外部侦听器服务。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel.WantsToListen%2A> 属性。 此代码示例摘自更大的示例为提供<xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel>类。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#24](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CPP/server.cpp#24)]
 [!code-csharp[System.Runtime.Remoting.Channels.Http.HttpServerChannel#24](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Http.HttpServerChannel/CS/server.cs#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>