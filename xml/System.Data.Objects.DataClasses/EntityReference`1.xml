<Type Name="EntityReference&lt;TEntity&gt;" FullName="System.Data.Objects.DataClasses.EntityReference&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="948e47dfbd85b87b3148962ea0ea5cde3b04cd3a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37678445" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EntityReference&lt;TEntity&gt; : System.Data.Objects.DataClasses.EntityReference where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityReference`1&lt;class TEntity&gt; extends System.Data.Objects.DataClasses.EntityReference" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.EntityReference`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityReference(Of TEntity)&#xA;Inherits EntityReference" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class EntityReference sealed : System::Data::Objects::DataClasses::EntityReference" />
  <TypeSignature Language="F#" Value="type EntityReference&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit EntityReference" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.EntityReference</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEntity">引用的实体类型。</typeparam>
    <summary>Represents a related end of an association with a multiplicity of zero or one.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当相关端的重数为零或一时，导航属性返回一个 <xref:System.Data.Objects.DataClasses.EntityReference%601> 对象。 有关详细信息，请参阅[NavigationProperty 元素 (CSDL)](http://msdn.microsoft.com/library/5829a238-a50e-4c81-901d-7b54fc00f27e)。  
  
 <xref:System.Data.Objects.DataClasses.EntityReference%601> 对象可能在关系的另一端具有相应的 <xref:System.Data.Objects.DataClasses.EntityCollection%601>（一对多关系）或 <xref:System.Data.Objects.DataClasses.EntityReference%601>（一对一关系）。 当 <xref:System.Data.Objects.DataClasses.EntityReference%601> 和 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 模型位于同一关系的相反端时，该关系的完整性维持在对象级别。  
  
 此类不能被继承。  
  
   
  
## Examples  
 此示例演示如何使用 <xref:System.Data.Objects.DataClasses.EntityReference%601> 对象更改 `SalesOrderHeader` 对象和表示订单发货地址的相关 `Address` 对象之间的关系。  
  
 [!code-csharp[DP ObjectServices Concepts#ChangeObjectRelationship](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#changeobjectrelationship)]
 [!code-vb[DP ObjectServices Concepts#ChangeObjectRelationship](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#changeobjectrelationship)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Attach : 'Entity -&gt; unit" Usage="entityReference.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">The object being attached.</param>
        <summary>Creates a many-to-one or one-to-one relationship between two objects in the object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityReference%601.Attach%2A> 方法用于定义当对象和相关对象已经附加到一个对象上下文时，这两个对象之间的关系。 如果相关对象尚未附加到对象上下文，将相关对象设置为 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 属性。 两个对象都分离时，还可以通过将相关对象设置为 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 属性，然后附加对象图中的根对象来定义关系。 有关详细信息，请参阅[附加和分离对象](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
 与此 <xref:System.Data.Objects.DataClasses.EntityReference%601> 关联的对象以及附加到它的所有对象必须处于 <xref:System.Data.EntityState.Unchanged> 或 <xref:System.Data.EntityState.Modified> 状态。  
  
 处于 <xref:System.Data.EntityState.Deleted> 状态的对象只能在 <xref:System.Data.Objects.ObjectStateManager> 已经跟踪关系实例时附加。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">When the <paramref name="entity" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> cannot be related to the current related end. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TEntity&gt; CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As ObjectQuery(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ CreateSourceQuery();" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityReference.CreateSourceQuery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an equivalent object query that returns the related object.</summary>
        <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that returns the related object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于获得一个在执行时返回相关对象的新 <xref:System.Data.Objects.ObjectQuery%601> 实例。 对于更复杂的联接、联合或筛选查询，或者使用 <xref:System.Data.Objects.MergeOption.NoTracking> 选项返回处于已分离状态的引用对象，这可以作为起点。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When the object is in an <see cref="F:System.Data.EntityState.Added" /> state.  -or-  When the object is in a <see cref="F:System.Data.EntityState.Detached" /> state with a <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" /> other than <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Data.Objects.MergeOption -&gt; unit" Usage="entityReference.Load mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">Specifies how the object should be returned if it already exists in the <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Loads the related object for this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> with the specified merge option.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于加载相关对象。  
  
 加载后，从 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 属性访问相关对象。  
  
 若要显式加载相关对象，必须调用导航属性所返回的相关端的 `Load` 方法。 对于一对多关系，请调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> 的 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法，而对于一对一关系，请调用 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> 的 <xref:System.Data.Objects.DataClasses.EntityReference%601>。 这样可将相关对象数据加载到对象上下文中。 当查询返回结果时，您可以通过使用对象的集合进行枚举`foreach`循环 (`For Each...Next`在 Visual Basic 中)，并有条件地调用`Load`方法<xref:System.Data.Objects.DataClasses.EntityReference%601>和<xref:System.Data.Objects.DataClasses.EntityCollection%601>中每个实体的属性结果。  
  
 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A>方法加载相关的对象从数据源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。  
  
> [!NOTE]
>  当您在 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> (C#) 或 `foreach` (Visual Basic) 枚举过程中调用 `For Each` 方法时，对象服务会尝试打开一个新的数据读取器。 除非您已经通过在连接字符串中指定 `multipleactiveresultsets=true` 启用了多个活动结果集，否则此操作将失败。 还可以将查询的结果加载到一个 <xref:System.Collections.Generic.List%601> 集合中。 这样将关闭数据读取器，并允许您对集合进行枚举来加载引用的对象。  
 
此方法调用内部`RelatedEnd.ValidateLoad`方法，然后再加载相关对象，该验证的对象调用<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>具有正确的条件。 `RelatedEnd.ValidateLoad`方法检查：

* 一个有效<xref:System.Data.Objects.ObjectContext>存在。
* 该实体不在<xref:System.Data.EntityState.Deleted>状态。
* <xref:System.Data.Objects.MergeOption> 有关<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>必须是<xref:System.Data.Objects.MergeOption.NoTracking>当且仅当源实体是<xref:System.Data.Objects.MergeOption.NoTracking>。 如果源实体已检索与任何其他<xref:System.Data.Objects.MergeOption>，则<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A><xref:System.Data.Objects.MergeOption>可以是任何内容，但是<xref:System.Data.Objects.MergeOption.NoTracking>(例如，实体可以加载后<xref:System.Data.Objects.MergeOption.OverwriteChanges>和<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>选项可以是<xref:System.Data.Objects.MergeOption.AppendOnly>).
* 如果`mergeOption`是<xref:System.Data.Objects.MergeOption.NoTracking>，<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>不调用已经加载实体和<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>对非空，不跟踪不调用<xref:System.Data.Objects.DataClasses.RelatedEnd>。

 当在已加载相关的对象<xref:System.Data.Objects.ObjectContext>，则<xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A>方法强制执行<xref:System.Data.Objects.MergeOption>指定的`mergeOption`参数。 有关详细信息，请参阅[标识解析、 状态管理和更改跟踪](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The source of the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> is <see langword="null" />.  -or-  A query returned more than one related end.  -or-  A query returned zero related ends, and one related end was expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnRefDeserialized">
      <MemberSignature Language="C#" Value="public void OnRefDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnRefDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnRefDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnRefDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnRefDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityReference.OnRefDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">The serialized stream.</param>
        <summary>This method is used internally to serialize related entity objects.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSerializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnSerializing : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityReference.OnSerializing context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnSerializing</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">The serialized stream.</param>
        <summary>This method is used internally to serialize related entity objects.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public TEntity Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TEntity Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityReference`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TEntity Value { TEntity get(); void set(TEntity value); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'Entity with get, set" Usage="System.Data.Objects.DataClasses.EntityReference&lt;'Entity (requires 'Entity : null)&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the related object returned by this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
        <value>此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 返回的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果设置的值和当前值相同，则不赋值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>