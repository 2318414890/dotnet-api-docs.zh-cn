<Type Name="ComplexObject" FullName="System.Data.Objects.DataClasses.ComplexObject">
  <TypeSignature Language="C#" Value="public abstract class ComplexObject : System.Data.Objects.DataClasses.StructuralObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ComplexObject extends System.Data.Objects.DataClasses.StructuralObject" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.ComplexObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ComplexObject&#xA;Inherits StructuralObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComplexObject abstract : System::Data::Objects::DataClasses::StructuralObject" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.StructuralObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract(IsReference=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7b0f2-101">复杂类型的基类。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-101">Base class for complex types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b0f2-102"><xref:System.Data.Objects.DataClasses.ComplexObject> 实现复杂类型的基本功能。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-102"><xref:System.Data.Objects.DataClasses.ComplexObject> implements the basic functionality for complex types.</span></span> <span data-ttu-id="7b0f2-103">有关详细信息，请参阅[复杂类型对象](http://msdn.microsoft.com/library/34d5c570-a891-42b8-80ae-20e96eedc3af)。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-103">For more information, see [Complex Type Objects](http://msdn.microsoft.com/library/34d5c570-a891-42b8-80ae-20e96eedc3af).</span></span>  
  
 <span data-ttu-id="7b0f2-104">在实现自定义数据类与概念模型时，我们建议您表示复杂类型的数据类继承自<xref:System.Data.Objects.DataClasses.ComplexObject>。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-104">When implementing custom data classes with a conceptual model, we recommend that your data classes that represent complex types inherit from <xref:System.Data.Objects.DataClasses.ComplexObject>.</span></span> <span data-ttu-id="7b0f2-105">有关详细信息，请参阅[自定义对象](http://msdn.microsoft.com/library/af6f07ce-2261-4c65-87cf-d018ad082921)。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-105">For more information, see [Customizing Objects](http://msdn.microsoft.com/library/af6f07ce-2261-4c65-87cf-d018ad082921).</span></span>  
  
 <span data-ttu-id="7b0f2-106">复杂类型可以是实体类型的属性或其他复杂类型的属性。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-106">A complex type can be a property of an entity type or of another complex type.</span></span>  
  
 <span data-ttu-id="7b0f2-107">复杂类型由实体类型的非标量属性返回。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-107">Complex types are returned by non-scalar properties of entity types.</span></span> <span data-ttu-id="7b0f2-108">这样允许在实体内组织标量属性。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-108">This enables scalar properties to be organized within entities.</span></span> <span data-ttu-id="7b0f2-109">与实体相似，复杂类型由标量属性或者其他复杂类型属性组成。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-109">Like entities, complex types consist of scalar properties or other complex type properties.</span></span> <span data-ttu-id="7b0f2-110">不能在没有关联的实体类型的情况下使用复杂类型。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-110">A complex type cannot be used without an associated entity type.</span></span> <span data-ttu-id="7b0f2-111">因为复杂类型没有键，则不能没有关联的实体类型管理复杂类型对象。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-111">Because complex types do not have keys, complex type objects cannot be managed without an associated entity type.</span></span> <span data-ttu-id="7b0f2-112">有关详细信息，请参阅[复杂类型对象](http://msdn.microsoft.com/library/34d5c570-a891-42b8-80ae-20e96eedc3af)。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-112">For more information, see [Complex Type Objects](http://msdn.microsoft.com/library/34d5c570-a891-42b8-80ae-20e96eedc3af).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b0f2-113">在下面的示例中，自定义数据类`OrderInfo`继承自<xref:System.Data.Objects.DataClasses.ComplexObject>且是否映射至`OrderInfo`概念模型中定义的复杂类型。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-113">In the following example, the custom data class `OrderInfo` inherits from <xref:System.Data.Objects.DataClasses.ComplexObject> and is mapped to the `OrderInfo` complex type defined in the conceptual model.</span></span>  
  
 [!code-csharp[DP EntityObject Concepts#EntityObject](~/samples/snippets/csharp/VS_Snippets_Data/DP EntityObject Concepts/CS/SalesObjects.cs#entityobject)]
 [!code-vb[DP EntityObject Concepts#EntityObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP EntityObject Concepts/VB/SalesObjects.vb#entityobject)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ComplexObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ComplexObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7b0f2-114">创建 <see cref="T:System.Data.Objects.DataClasses.ComplexObject" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-114">Creates an instance of <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportPropertyChanged">
      <MemberSignature Language="C#" Value="protected override sealed void ReportPropertyChanged (string property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ReportPropertyChanged(string property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ReportPropertyChanged (property As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ReportPropertyChanged(System::String ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property"><span data-ttu-id="7b0f2-115">已更改的属性的名称。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-115">The name of the changed property.</span></span></param>
        <summary><span data-ttu-id="7b0f2-116">通知更改跟踪器，某个复杂对象的属性已更改。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-116">Notifies the change tracker that a property of a complex object has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b0f2-117">当复杂类型由 Entity Data Model 工具生成时，在属性更改后将调用 <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A> 方法，以将 <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> 中的缓存值作为属性的原始值提交。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-117">When a complex type is generated by the Entity Data Model tools, the <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A> method is called after a property change to commit the cached value in the <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> as the original value of the property.</span></span>  
  
 <span data-ttu-id="7b0f2-118">此方法调用更改跟踪器中的 <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-118">This method calls the <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged%2A> method in the change tracker.</span></span>  
  
 <span data-ttu-id="7b0f2-119">跟踪对自定义复杂对象的属性作出的更改时，必须调用 <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-119">When tracking changes that are made to the property of a custom complex object, you must call <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A>.</span></span> <span data-ttu-id="7b0f2-120">对于从 <xref:System.Data.Objects.DataClasses.ComplexObject> 继承的复杂对象应采用此操作。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-120">Do this when the complex object inherits from <xref:System.Data.Objects.DataClasses.ComplexObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b0f2-121"><paramref name="property" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-121"><paramref name="property" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReportPropertyChanging">
      <MemberSignature Language="C#" Value="protected override sealed void ReportPropertyChanging (string property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ReportPropertyChanging(string property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ReportPropertyChanging (property As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ReportPropertyChanging(System::String ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property"><span data-ttu-id="7b0f2-122">更改的属性的名称。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-122">The name of the changing property.</span></span></param>
        <summary><span data-ttu-id="7b0f2-123">通知更改跟踪器，对复杂对象的属性更改挂起。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-123">Notifies the change tracker that a property change is pending on a complex object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b0f2-124">当复杂类型由 Entity Data Model 工具生成时，在属性更改前将调用 <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A> 方法将属性的当前值缓存在 <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> 中，以便能够将此值用作该属性的原始值。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-124">When a complex type is generated by the Entity Data Model tools, the <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A> method is called before a property change to cache the current value of the property in the <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> so that this value can be used as the original value for the property.</span></span>  
  
 <span data-ttu-id="7b0f2-125">此方法调用更改跟踪器中的 <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-125">This method calls the <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging%2A> method in the change tracker.</span></span>  
  
 <span data-ttu-id="7b0f2-126">跟踪对自定义复杂对象的属性作出的更改时，必须调用 <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-126">When tracking changes that are made to the property of a custom complex object, you must call <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A>.</span></span> <span data-ttu-id="7b0f2-127">对于从 <xref:System.Data.Objects.DataClasses.ComplexObject> 继承的复杂对象应采用此操作。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-127">Do this when the complex object inherits from <xref:System.Data.Objects.DataClasses.ComplexObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7b0f2-128"><paramref name="property" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7b0f2-128"><paramref name="property" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>