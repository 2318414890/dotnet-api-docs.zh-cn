<Type Name="XamlMemberInvoker" FullName="System.Xaml.Schema.XamlMemberInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="06593ac583c0f24c3b973fbdbfba42e69f84af7c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720201" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlMemberInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlMemberInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlMemberInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlMemberInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlMemberInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="72fbb-101">提供一个扩展点，该扩展点可通过除反射之外的其他技术来访问 XAML 成员的成员特征。</span>
      <span class="sxs-lookup">
        <span data-stu-id="72fbb-101">Provides an extension point that can access member characteristics of a XAML member through techniques other than reflection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72fbb-102">用途<xref:System.Xaml.Schema.XamlMemberInvoker>是能够进行可扩展的 XAML 类型系统、 架构和一个有效的运行时不依赖于完全 CLR 功能，例如 CLR 特性，通过反射信息<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依次类推。</span><span class="sxs-lookup"><span data-stu-id="72fbb-102">The purpose of <xref:System.Xaml.Schema.XamlMemberInvoker> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span> <span data-ttu-id="72fbb-103">子类<xref:System.Xaml.Schema.XamlMemberInvoker>被用作输入参数的 XAML 架构类的备用构造函数如<xref:System.Xaml.XamlMember>。</span><span class="sxs-lookup"><span data-stu-id="72fbb-103">Subclasses of <xref:System.Xaml.Schema.XamlMemberInvoker> are used as input parameters for the alternate constructors of XAML schema classes such as <xref:System.Xaml.XamlMember>.</span></span> <span data-ttu-id="72fbb-104">你可以子类<xref:System.Xaml.XamlMember>并将传递<xref:System.Xaml.Schema.XamlMemberInvoker>通过到基构造函数。</span><span class="sxs-lookup"><span data-stu-id="72fbb-104">You subclass <xref:System.Xaml.XamlMember> and pass the <xref:System.Xaml.Schema.XamlMemberInvoker> through to the base constructor.</span></span> <span data-ttu-id="72fbb-105">以及定义<xref:System.Xaml.Schema.XamlMemberInvoker>构造函数，你还必须提供替代至少的一些`Lookup`方法<xref:System.Xaml.XamlMember>。</span><span class="sxs-lookup"><span data-stu-id="72fbb-105">Along with defining a <xref:System.Xaml.Schema.XamlMemberInvoker> for the constructor, you must also provide overrides for at least some of the `Lookup` methods of <xref:System.Xaml.XamlMember>.</span></span>  
  
 <span data-ttu-id="72fbb-106"><xref:System.Xaml.Schema.XamlMemberInvoker> 具有默认的实现。</span><span class="sxs-lookup"><span data-stu-id="72fbb-106"><xref:System.Xaml.Schema.XamlMemberInvoker> has a default implementation.</span></span> <span data-ttu-id="72fbb-107">默认实现到 XAML 架构类型的默认实现中遵循类似的模型<xref:System.Xaml.XamlType>和<xref:System.Xaml.XamlMember>: CLR 类型系统用于实例化、 值和查找操作，包括使用 CLR 特性<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依次类推。</span><span class="sxs-lookup"><span data-stu-id="72fbb-107">The default implementation follows a similar model to the default implementation of XAML schema types <xref:System.Xaml.XamlType> and <xref:System.Xaml.XamlMember>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span>  
  
 <span data-ttu-id="72fbb-108"><xref:System.Xaml.Schema.XamlMemberInvoker> 提供用于基本 get 和 set 操作方法 (<xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A>;<xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A>).</span><span class="sxs-lookup"><span data-stu-id="72fbb-108"><xref:System.Xaml.Schema.XamlMemberInvoker> provides methods for basic get and set operations (<xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A>; <xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A>).</span></span> <span data-ttu-id="72fbb-109">它还提供了属性<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>和<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>，但它们不是虚拟。</span><span class="sxs-lookup"><span data-stu-id="72fbb-109">It also provides the properties <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> and <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>, but these are not virtual.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72fbb-110">有可能获取<xref:System.Xaml.Schema.XamlMemberInvoker>表示 XAML 指令，它将作为 System.Xaml 实现中的专用类实现的值。</span><span class="sxs-lookup"><span data-stu-id="72fbb-110">It may be possible to obtain a <xref:System.Xaml.Schema.XamlMemberInvoker> value that represents a XAML directive, which is implemented as a private class in the System.Xaml implementation.</span></span> <span data-ttu-id="72fbb-111">如果你尝试调用<xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A>或<xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A>上此调用程序会引发异常。</span><span class="sxs-lookup"><span data-stu-id="72fbb-111">If you attempt to call <xref:System.Xaml.Schema.XamlMemberInvoker.GetValue%2A> or <xref:System.Xaml.Schema.XamlMemberInvoker.SetValue%2A> on this invoker, an exception is thrown.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72fbb-112">初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-112">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlMemberInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlMemberInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="72fbb-113">初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-113">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72fbb-114">默认实现为空。</span><span class="sxs-lookup"><span data-stu-id="72fbb-114">The default implementation is empty.</span></span>  
  
 <span data-ttu-id="72fbb-115">内部调用此构造函数提供的值<xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A>。</span><span class="sxs-lookup"><span data-stu-id="72fbb-115">This constructor is invoked internally to provide a value for <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A>.</span></span> <span data-ttu-id="72fbb-116">有关<xref:System.Xaml.Schema.XamlMemberInvoker>子类化，请应或者使用<xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29>构造的签名或提供重写调用<xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29>作为基类。</span><span class="sxs-lookup"><span data-stu-id="72fbb-116">For a <xref:System.Xaml.Schema.XamlMemberInvoker> subclass, it is expected that you either use the <xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29> signature for construction or provide an override that calls <xref:System.Xaml.Schema.XamlMemberInvoker.%23ctor%28System.Xaml.XamlMember%29> as base.</span></span> <span data-ttu-id="72fbb-117">提供<xref:System.Xaml.XamlMember>实现的默认模式 where<xref:System.Xaml.Schema.XamlMemberInvoker>不可变。</span><span class="sxs-lookup"><span data-stu-id="72fbb-117">Providing the <xref:System.Xaml.XamlMember> implements a default pattern where <xref:System.Xaml.Schema.XamlMemberInvoker> is immutable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMemberInvoker (System.Xaml.XamlMember member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlMember member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (member As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMemberInvoker(System::Xaml::XamlMember ^ member);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="72fbb-118">与此 <see cref="T:System.Xaml.XamlMember" /> 相关的特定 XAML 成员的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-118">The <see cref="T:System.Xaml.XamlMember" /> value for the specific XAML member relevant to this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72fbb-119">基于提供的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-119">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlMember" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72fbb-120">此构造函数调用，内部根据<xref:System.Xaml.XamlMember>其中<xref:System.Xaml.Schema.XamlMemberInvoker>用于构造。</span><span class="sxs-lookup"><span data-stu-id="72fbb-120">This constructor is called internally based on the <xref:System.Xaml.XamlMember> where the <xref:System.Xaml.Schema.XamlMemberInvoker> is used for construction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72fbb-121">
            <paramref name="member" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-121">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual object GetValue (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValue (instance As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValue(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="72fbb-122">成员的所有者类型的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-122">An instance of the owner type for the member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72fbb-123">从实例中获取相关属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-123">Gets a value of the relevant property from an instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72fbb-124">请求的属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-124">The requested property value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72fbb-125">
            <paramref name="instance" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-125">
              <paramref name="instance" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72fbb-126">已在基于未知 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上调用了此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-126">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlMember" />.</span>
          </span>
          <span data-ttu-id="72fbb-127">- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-127">**-or-**</span>
          </span>
          <span data-ttu-id="72fbb-128">在只写成员上调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-128">Invoked this method on a write-only member.</span>
          </span>
          <span data-ttu-id="72fbb-129">- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-129">**-or-**</span>
          </span>
          <span data-ttu-id="72fbb-130">
            <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-130">
              <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="72fbb-131">基实现，包括内部帮助程序调用<c>ThrowIfUnknown</c>。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-131">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span>
            </span>
            <span data-ttu-id="72fbb-132">此帮助器始终引发情况下其中<see cref="T:System.Xaml.Schema.XamlMemberInvoker" />基于未知<see cref="T:System.Xaml.XamlMember" />，其中包括情况<see cref="P:System.Xaml.XamlMember.UnderlyingMember" />的<see cref="T:System.Xaml.XamlMember" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-132">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlMember" />, which includes cases where the <see cref="P:System.Xaml.XamlMember.UnderlyingMember" /> of the <see cref="T:System.Xaml.XamlMember" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="72fbb-133">基实现引发如果<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-133">The base implementation throws if <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="72fbb-134">对于静态属性 (<see cref="P:System.Reflection.MethodBase.IsStatic" />是<see langword="true" />每<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />) 默认实现调用<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />上<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />传递<see langword="null" />作为第一个参数并打包<paramref name="instance" />在第二个。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-134">For static properties (<see cref="P:System.Reflection.MethodBase.IsStatic" /> is <see langword="true" /> per <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />) the default implementation calls <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> on <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> passing <see langword="null" /> as the first parameter and packaged <paramref name="instance" /> in the second.</span>
            </span>
            <span data-ttu-id="72fbb-135">对于非静态属性，它调用<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />，并将转发<paramref name="instance" />作为第一个参数和第二个参数的空包。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-135">For non-static properties, it calls <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> and forwards the <paramref name="instance" /> as the first parameter and an empty package as the second parameter.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (object instance, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object instance, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValue (instance As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ instance, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="72fbb-136">成员的所有者类型的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-136">An instance of the owner type for the member.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="72fbb-137">要设置的属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-137">The property value to set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72fbb-138">对实例设置相关属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-138">Sets a value of the relevant property on an instance.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72fbb-139">
            <paramref name="instance" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-139">
              <paramref name="instance" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72fbb-140">已在基于未知 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上调用了此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-140">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlMember" />.</span>
          </span>
          <span data-ttu-id="72fbb-141">- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-141">**-or-**</span>
          </span>
          <span data-ttu-id="72fbb-142">在只读成员上调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-142">Invoked this method on a read-only member.</span>
          </span>
          <span data-ttu-id="72fbb-143">- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-143">**-or-**</span>
          </span>
          <span data-ttu-id="72fbb-144">
            <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-144">
              <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="72fbb-145">基实现，包括内部帮助程序调用<c>ThrowIfUnknown</c>。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-145">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span>
            </span>
            <span data-ttu-id="72fbb-146">此帮助器始终引发情况下其中<see cref="T:System.Xaml.Schema.XamlMemberInvoker" />基于未知<see cref="T:System.Xaml.XamlMember" />，其中包括情况<see cref="P:System.Xaml.XamlMember.UnderlyingMember" />的<see cref="T:System.Xaml.XamlMember" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-146">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlMember" />, which includes cases where the <see cref="P:System.Xaml.XamlMember.UnderlyingMember" /> of the <see cref="T:System.Xaml.XamlMember" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="72fbb-147">基实现引发如果<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-147">The base implementation throws if <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="72fbb-148">对于静态属性 (<see cref="P:System.Reflection.MethodBase.IsStatic" />是<see langword="true" />每<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />) 默认实现调用<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />上<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />传递<see langword="null" />作为第一个参数并打包<paramref name="instance" />和<paramref name="value" />为第二个参数。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-148">For static properties (<see cref="P:System.Reflection.MethodBase.IsStatic" /> is <see langword="true" /> per <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />) the default implementation calls <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> on <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> passing <see langword="null" /> as the first parameter and packaging <paramref name="instance" /> and <paramref name="value" /> as the second parameter.</span>
            </span>
            <span data-ttu-id="72fbb-149">对于非静态属性，它调用<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />，并将转发<paramref name="instance" />作为第一个参数和<paramref name="value" />第二个参数。</span>
            <span class="sxs-lookup">
              <span data-stu-id="72fbb-149">For non-static properties, it calls <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> and forwards <paramref name="instance" /> as first parameter and <paramref name="value" /> as second parameter.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValue">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.Schema.ShouldSerializeResult ShouldSerializeValue (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Xaml.Schema.ShouldSerializeResult ShouldSerializeValue(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldSerializeValue (instance As Object) As ShouldSerializeResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::Schema::ShouldSerializeResult ShouldSerializeValue(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.ShouldSerializeResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="72fbb-150">具有要检查其持久性的属性的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-150">The instance with the property to be examined for persistence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72fbb-151">指示是否需要通过序列化过程保持值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-151">Indicates whether the value needs to be persisted by serialization processes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72fbb-152">枚举的一个值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-152">A value of the enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72fbb-153">默认实现返回<xref:System.Xaml.Schema.ShouldSerializeResult.Default>XAML 成员是否<xref:System.Xaml.XamlMember.IsUnknown%2A>，或如果没有与 CLR 反射相关`ShouldSerialize`默认反射通过基础成员上找不到方法。</span><span class="sxs-lookup"><span data-stu-id="72fbb-153">The default implementation returns <xref:System.Xaml.Schema.ShouldSerializeResult.Default> if the XAML member itself is <xref:System.Xaml.XamlMember.IsUnknown%2A>, or if no CLR-reflection relevant `ShouldSerialize` method is found on the underlying member through default reflection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingGetter">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo UnderlyingGetter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo UnderlyingGetter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingGetter As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ UnderlyingGetter { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="72fbb-154">获取 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，该方法为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性获取值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-154">Gets the <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that gets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="72fbb-155">为与此 <see cref="T:System.Reflection.MethodInfo" /> 相关的属性获取值的 CLR 方法的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />，或者为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-155">The <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that gets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, or <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72fbb-156">此属性依赖于调用<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>构造<xref:System.Xaml.XamlMember>。</span><span class="sxs-lookup"><span data-stu-id="72fbb-156">This property relies on calling <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A> on the constructing <xref:System.Xaml.XamlMember>.</span></span> <span data-ttu-id="72fbb-157">对于未知<xref:System.Xaml.XamlMember>，或用例其中<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>返回`null`，此属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="72fbb-157">For an unknown <xref:System.Xaml.XamlMember>, or for cases where <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A> returns `null`, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSetter">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo UnderlyingSetter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo UnderlyingSetter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingSetter As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ UnderlyingSetter { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="72fbb-158">获取 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，该方法为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性设置值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-158">Gets the <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that sets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="72fbb-159">为与此 <see cref="T:System.Reflection.MethodInfo" /> 相关的属性设置值的 CLR 方法的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />，或者为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-159">The <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that sets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, or <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72fbb-160">此属性依赖于调用<xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>构造<xref:System.Xaml.XamlMember>。</span><span class="sxs-lookup"><span data-stu-id="72fbb-160">This property relies on calling <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> on the constructing <xref:System.Xaml.XamlMember>.</span></span> <span data-ttu-id="72fbb-161">对于未知<xref:System.Xaml.XamlMember>，或用例其中<xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>返回`null`，此属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="72fbb-161">For an unknown <xref:System.Xaml.XamlMember>, or for cases where <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> returns `null`, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlMemberInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlMemberInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlMemberInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlMemberInvoker ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="72fbb-162">提供一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-162">Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="72fbb-163">一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72fbb-163">A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72fbb-164">提供此值<xref:System.Xaml.Schema.XamlMemberInvoker>System.Xaml 参数定义 API 将通常会导致调用的代码引发异常。</span><span class="sxs-lookup"><span data-stu-id="72fbb-164">Supplying this value for a <xref:System.Xaml.Schema.XamlMemberInvoker> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>