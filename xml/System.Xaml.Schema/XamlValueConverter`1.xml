<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlValueConverter`1.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac582f14de8f717b193872473b74a49ccbceec4793c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82f14de8f717b193872473b74a49ccbceec4793c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>The CLR base class for the particular converter that this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> represents.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 所表示的特定转换器的 CLR 基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>Typically this is one of the following: <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>; <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>; <ph id="ph3">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>;</source>
          <target state="translated">它通常为以下类之一：<ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>；<ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>；<ph id="ph3">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>；</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>Provides a common API surface for techniques that generate initialization or serialization values for XAML based on input other than the eventual destination type.</source>
          <target state="translated">提供一个公共 API 接口，此接口适用于根据最终目标类型以外的输入为 XAML 生成初始化或序列化值的技术。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>This includes markup extensions and type converters.</source>
          <target state="translated">此类型包括标记扩展和类型转换器。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>Instances of this type are returned by methods of the XAML schema API such as <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph>.</source>
          <target state="translated">此类型的实例方法所返回的 XAML 架构 API 的如<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>The generic implementation of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> provides indirection for the System.Xaml assembly so that the basic XAML schema and type system does not have to take dependencies on different value conversion techniques that are typically implementations in other assemblies.</source>
          <target state="translated">通用实现<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>System.Xaml 程序集提供间接寻址，以便基本的 XAML 架构和类型系统不需要采取通常是在其他实现的转换技术的不同值的依赖关系程序集。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> can be constructed with a null implementation type, but such a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> will return <ph id="ph3">`null`</ph> for <ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>可以使用一种 null 实现类型，但这样构造<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>将返回<ph id="ph3">`null`</ph>为<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>Constructor signatures for <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> use a <ph id="ph2">`converterType`</ph> parameter that references the specific type that implements the conversion behavior.</source>
          <target state="translated">构造函数签名<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>使用<ph id="ph2">`converterType`</ph>引用了实现转换行为的特定类型的参数。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>For a properly functioning <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> (one that has a nonnull <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>), the <ph id="ph3">`converterType`</ph> type is expected to be castable to the <ph id="ph4">`TConverterBase`</ph> constraint.</source>
          <target state="translated">有关正常<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>(即具有非空<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>)，则<ph id="ph3">`converterType`</ph>类型应可强制转换为<ph id="ph4">`TConverterBase`</ph>约束。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>A mismatch condition is not enforced by constructors, but might produce an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> at run time.</source>
          <target state="translated">不匹配条件不强制执行由构造函数，但可能会产生<ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>在运行时。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that implements the converter behavior.</source>
          <target state="translated">实现转换器行为的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
          <source>The target/destination <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的目标 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> class, based on a converter implementing <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> and the target/destination type of the <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated">基于实现 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 的目标类型的转换器，初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that implements the converter behavior.</source>
          <target state="translated">实现转换器行为的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
          <source>The target/destination <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的目标 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
          <source>The string name.</source>
          <target state="translated">字符串名称。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> class, based on a converter implementing <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> the target/destination type of the <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>, and a string name.</source>
          <target state="translated">基于实现 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 的目标类型的转换器以及一个字符串值，初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
          <source>If <ph id="ph1">`name`</ph> is provided as <ph id="ph2">`null`</ph>, a default name is generated based on either <ph id="ph3">`converterType`</ph> or <ph id="ph4">`targetType`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`name`</ph>作为提供<ph id="ph2">`null`</ph>，默认名称生成基于<ph id="ph3">`converterType`</ph>或<ph id="ph4">`targetType`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
          <source>All three parameters are <ph id="ph1">&lt;see langword="null" /&gt;</ph> (at least one is required to be non-null).</source>
          <target state="translated">所有三个参数都为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>（至少需要有一个为非 null）。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
          <source>Gets a created instance of the converter implementation.</source>
          <target state="translated">获取转换器实现的已创建实例。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
          <source>A created instance of the converter implementation, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">转换器实现的已创建实例，或者为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> calls the protected default implementation of <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph> to get its value (and might be accessing a stored value if <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> was already called once on this <ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> 调用的受保护的默认实现<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph>若要获取其值 (和可能正在访问存储的值，如果<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>已在这一次调用<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> can be constructed with a null implementation type, but such a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> will return <ph id="ph3">`null`</ph> for <ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>可以使用一种 null 实现类型，但这样构造<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>将返回<ph id="ph3">`null`</ph>为<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> for the class that implements the converter behavior.</source>
          <target state="translated">获取实现转换器行为的类的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> for the class that implements the converter behavior.</source>
          <target state="translated">实现转换器行为的类的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
          <source>Returns an instance of the converter implementation.</source>
          <target state="translated">返回转换器实现的实例。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
          <source>An instance of the converter implementation, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">转换器实现的实例，或者为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph> is protected.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph> 受保护。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
          <source>To get a converter instance with a public API, get the value of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>.</source>
          <target state="translated">若要获取具有一个公共 API 的转换器实例，请获取的值<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> can be constructed with a null implementation type, but such a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> will return <ph id="ph3">`null`</ph> for <ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>可以使用一种 null 实现类型，但这样构造<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>将返回<ph id="ph3">`null`</ph>为<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
          <source>Converter did not implement the correct base type.</source>
          <target state="translated">转换器未实现正确的基类型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlValueConverter`1">
          <source>Determines whether this instance of <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> and an object have the same value.</source>
          <target state="translated">确定 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 的此实例与对象是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
          <source>The object to compare.</source>
          <target state="translated">要比较的对象。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
          <source>Determines whether this instance of <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> and a specified object, which must also be a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, have the same value.</source>
          <target state="translated">确定此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 实例是否与指定的对象（也必须是 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>）具有相同的值。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is a <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> and its value is the same as this instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 为 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 并且它的值与此实例相同，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> to compare.</source>
          <target state="translated">要比较的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
          <source>Determines whether this instance of <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> and another <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object have the same value.</source>
          <target state="translated">确定 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 的此实例与另一个 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 对象是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="other" /&gt;</ph> is a <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> and its value is the same as this instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="other" /&gt;</ph> 为 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 并且它的值与此实例相同，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
          <source>Returns the hash code for this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated">返回此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 的哈希代码。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
          <source>An integer hash code.</source>
          <target state="translated">整数哈希代码。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlValueConverter`1.Name">
          <source>Gets a string name for this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated">获取此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 的字符串名称。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlValueConverter`1.Name">
          <source>A string name for this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 的字符串名称。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlValueConverter`1.Name">
          <source>The value of this property is established by one of the following:</source>
          <target state="translated">此属性的值建立的以下项之一：</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlValueConverter`1.Name">
          <source>A constructor parameter (see <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.%23ctor%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">构造函数参数 (请参阅<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.%23ctor%2A?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlValueConverter`1.Name">
          <source>Internal logic that processes other constructor inputs and forms a string.</source>
          <target state="translated">内部处理其他构造函数的输入，并形成字符串的逻辑。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> objects have the same value.</source>
          <target state="translated">确定两个指定的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 对象是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="converter1" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="converter2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的值与 <ph id="ph2">&lt;paramref name="converter1" /&gt;</ph> 的值相同，则为 <ph id="ph3">&lt;paramref name="converter2" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> objects have different values.</source>
          <target state="translated">确定两个指定的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 对象是否具有不同的值。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="converter1" /&gt;</ph> is different than the value of <ph id="ph3">&lt;paramref name="converter2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="converter1" /&gt;</ph> 的值与 <ph id="ph3">&lt;paramref name="converter2" /&gt;</ph> 的值不同，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
          <source>Gets the target/destination <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的目标 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
          <source>The target/destination <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的目标 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated">返回一个表示此 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>.</source>
          <target state="translated">表示此 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ToString%2A&gt;</ph> value is based on <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ToString%2A&gt;</ph>值基于<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>