<Type Name="AsyncResult" FullName="System.Runtime.Remoting.Messaging.AsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="549aa8f3cad4f0bb8d6ff10a2c2d4aeb2488b2fb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36535737" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AsyncResult : IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit AsyncResult extends System.Object implements class System.IAsyncResult, class System.Runtime.Remoting.Messaging.IMessageSink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.AsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncResult&#xA;Implements IAsyncResult, IMessageSink" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncResult : IAsyncResult, System::Runtime::Remoting::Messaging::IMessageSink" />
  <TypeSignature Language="F#" Value="type AsyncResult = class&#xA;    interface IAsyncResult&#xA;    interface IMessageSink" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Messaging.IMessageSink</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="958fe-101">封装对委托的异步操作的结果。</span>
      <span class="sxs-lookup">
        <span data-stu-id="958fe-101">Encapsulates the results of an asynchronous operation on a delegate.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-102"><xref:System.Runtime.Remoting.Messaging.AsyncResult>类结合使用带有使用委托进行异步方法调用。</span><span class="sxs-lookup"><span data-stu-id="958fe-102">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is used in conjunction with asynchronous method calls made using delegates.</span></span> <span data-ttu-id="958fe-103"><xref:System.IAsyncResult>从该委托的返回`BeginInvoke`方法可以强制转换为<xref:System.Runtime.Remoting.Messaging.AsyncResult>。</span><span class="sxs-lookup"><span data-stu-id="958fe-103">The <xref:System.IAsyncResult> returned from the delegate's `BeginInvoke` method can be cast to an <xref:System.Runtime.Remoting.Messaging.AsyncResult>.</span></span> <span data-ttu-id="958fe-104"><xref:System.Runtime.Remoting.Messaging.AsyncResult>具有<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>属性，保存委托对象上调用异步调用。</span><span class="sxs-lookup"><span data-stu-id="958fe-104">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> has the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property that holds the delegate object on which the asynchronous call was invoked.</span></span>  
  
 <span data-ttu-id="958fe-105">有关详细信息`BeginInvoke`和异步调用使用委托，请参阅[异步编程使用委托](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)。</span><span class="sxs-lookup"><span data-stu-id="958fe-105">For more information about `BeginInvoke` and asynchronous calls using delegates, see [Asynchronous Programming Using Delegates](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="958fe-106">下面的示例演示如何使用<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>属性来获取<xref:System.Threading.WaitHandle>，以及如何在委托上等待的异步调用。</span><span class="sxs-lookup"><span data-stu-id="958fe-106">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="958fe-107">当异步调用完成时 <xref:System.Threading.WaitHandle> 会收到信号，而你可以通过调用 <xref:System.Threading.WaitHandle.WaitOne%2A> 方法来等待它。</span><span class="sxs-lookup"><span data-stu-id="958fe-107">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="958fe-108">此示例由两个类，包含以异步方式调用的方法的类和类，其中包含`Main`进行调用的方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-108">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="958fe-109">有关详细信息和使用委托来以异步方式调用方法的更多示例，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="958fe-109">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncDelegate">
      <MemberSignature Language="C#" Value="public virtual object AsyncDelegate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncDelegate As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ AsyncDelegate { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncDelegate : obj" Usage="System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="958fe-110">获取在其上调用异步调用的委托对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-110">Gets the delegate object on which the asynchronous call was invoked.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="958fe-111">在其上调用异步调用的委托对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-111">The delegate object on which the asynchronous call was invoked.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-112"><xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>属性可以强制转换为用户定义的委托的实际类。</span><span class="sxs-lookup"><span data-stu-id="958fe-112">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property can be cast to the actual class of the user-defined delegate.</span></span>  
  
 <span data-ttu-id="958fe-113">例如，如果用于进行异步调用的委托的类型是`MyDelegate`，此属性返回的委托必须强制转换为`MyDelegate`。</span><span class="sxs-lookup"><span data-stu-id="958fe-113">For example, if the delegate that was used to make the asynchronous call is of type `MyDelegate`, the delegate that is returned by this property must be cast to `MyDelegate`.</span></span> <span data-ttu-id="958fe-114">然后，该回调方法可以调用该委托的`EndInvoke`具有正确签名，以便获取结果的异步方法调用的方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-114">The callback method can then call the delegate's `EndInvoke` method with the correct signature, in order to obtain the results of the asynchronous method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="958fe-115">下面的代码示例演示如何使用<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>属性获取用于进行异步调用，若要调用的委托`EndInvoke`。</span><span class="sxs-lookup"><span data-stu-id="958fe-115">The following code example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property to get the delegate that was used to make the asynchronous call, in order to call `EndInvoke`.</span></span> <span data-ttu-id="958fe-116">示例强制转换<xref:System.IAsyncResult>，即回调方法的唯一参数为<xref:System.Runtime.Remoting.Messaging.AsyncResult>对象。</span><span class="sxs-lookup"><span data-stu-id="958fe-116">The example casts the <xref:System.IAsyncResult>, which is the only parameter of the callback method, to an <xref:System.Runtime.Remoting.Messaging.AsyncResult> object.</span></span>  
  
 <span data-ttu-id="958fe-117">此示例由两个类，包含以异步方式调用的方法的类和类，其中包含`Main`进行调用的方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-117">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="958fe-118">有关详细信息的方式此回调示例工作，以及来异步调用方法的更多示例使用委托，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="958fe-118">For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncProcessMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Messaging.IMessageSink replySink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsyncProcessMessage (msg As IMessage, replySink As IMessageSink) As IMessageCtrl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessageCtrl ^ AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Messaging::IMessageSink ^ replySink);" />
      <MemberSignature Language="F#" Value="abstract member AsyncProcessMessage : System.Runtime.Remoting.Messaging.IMessage * System.Runtime.Remoting.Messaging.IMessageSink -&gt; System.Runtime.Remoting.Messaging.IMessageCtrl&#xA;override this.AsyncProcessMessage : System.Runtime.Remoting.Messaging.IMessage * System.Runtime.Remoting.Messaging.IMessageSink -&gt; System.Runtime.Remoting.Messaging.IMessageCtrl" Usage="asyncResult.AsyncProcessMessage (msg, replySink)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageCtrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="replySink" Type="System.Runtime.Remoting.Messaging.IMessageSink" />
      </Parameters>
      <Docs>
        <param name="msg">
          <span data-ttu-id="958fe-119">请求的 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-119">The request <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</span>
          </span>
        </param>
        <param name="replySink">
          <span data-ttu-id="958fe-120">响应的 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-120">The response <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> interface.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="958fe-121">实现 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-121">Implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="958fe-122">不返回任何值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-122">No value is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-123"><xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A>方法<xref:System.Runtime.Remoting.Messaging.IMessageSink>接口与无关<xref:System.Runtime.Remoting.Messaging.AsyncResult>类。</span><span class="sxs-lookup"><span data-stu-id="958fe-123">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A> method of the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface is not relevant to the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class.</span></span> <span data-ttu-id="958fe-124">通过实现<xref:System.Runtime.Remoting.Messaging.AsyncResult>引发<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="958fe-124">Implementation by <xref:System.Runtime.Remoting.Messaging.AsyncResult> throws a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="958fe-125">相反，获取<xref:System.Runtime.Remoting.Messaging.AsyncResult>通过强制转换为<xref:System.IAsyncResult>使用委托进行异步调用所返回的接口。</span><span class="sxs-lookup"><span data-stu-id="958fe-125">Instead, obtain an <xref:System.Runtime.Remoting.Messaging.AsyncResult> by casting the <xref:System.IAsyncResult> interface returned by an asynchronous call made using a delegate.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public virtual object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.Runtime.Remoting.Messaging.AsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="958fe-126">获取作为 <see langword="BeginInvoke" /> 方法调用的最后一个参数而提供的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-126">Gets the object provided as the last parameter of a <see langword="BeginInvoke" /> method call.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="958fe-127">作为 <see langword="BeginInvoke" /> 方法调用的最后一个参数而提供的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-127">The object provided as the last parameter of a <see langword="BeginInvoke" /> method call.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-128">有关详细信息`BeginInvoke`方法，请参阅[异步编程使用委托](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)。</span><span class="sxs-lookup"><span data-stu-id="958fe-128">For more information about the `BeginInvoke` method, see [Asynchronous Programming Using Delegates](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="958fe-129">下面的代码示例演示如何<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A>属性用于将信息传递给回调方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-129">The following code example demonstrates how the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> property is used to pass information to a callback method.</span></span> <span data-ttu-id="958fe-130">最后一个参数`BeginInvoke`方法调用是一个格式字符串，该回调方法用来设置输出消息的格式。</span><span class="sxs-lookup"><span data-stu-id="958fe-130">The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.</span></span>  
  
 <span data-ttu-id="958fe-131">此示例由两个类，包含以异步方式调用的方法的类和类，其中包含`Main`进行调用的方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-131">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="958fe-132">有关详细信息的方式此回调示例工作，以及来异步调用方法的更多示例使用委托，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="958fe-132">For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="958fe-133">获取封装 Win32 同步句柄并允许实现各种同步方案的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-133">Gets a <see cref="T:System.Threading.WaitHandle" /> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="958fe-134">封装 Win32 同步句柄并允许实现各种同步方案的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-134">A <see cref="T:System.Threading.WaitHandle" /> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-135"><xref:System.Threading.WaitHandle>返回此方法在异步操作完成时自动收到信号。</span><span class="sxs-lookup"><span data-stu-id="958fe-135">The <xref:System.Threading.WaitHandle> returned by this method is automatically signaled when the asynchronous operation has completed.</span></span>  
  
 <span data-ttu-id="958fe-136">在调用时，不会自动关闭等待句柄`EndInvoke`上用于进行调用的异步方法的委托。</span><span class="sxs-lookup"><span data-stu-id="958fe-136">The wait handle is not closed automatically when you call `EndInvoke` on the delegate that was used to make the asynchronous method call.</span></span> <span data-ttu-id="958fe-137">如果释放对等待句柄的所有引用，则当垃圾回收功能回收此等待句柄时将释放系统资源。</span><span class="sxs-lookup"><span data-stu-id="958fe-137">If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</span></span> <span data-ttu-id="958fe-138">若要在完成使用等待句柄时，就会立即释放系统资源，调用<xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-138">To free the system resources as soon as you are finished using the wait handle, call the <xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="958fe-139">显式关闭或释放可释放对象时，垃圾回收的工作效率更高。</span><span class="sxs-lookup"><span data-stu-id="958fe-139">Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="958fe-140"><xref:System.Threading.WaitHandle>中包含<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>属性可以用于异步调用完成之前阻止当前线程。</span><span class="sxs-lookup"><span data-stu-id="958fe-140">The <xref:System.Threading.WaitHandle> contained in the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property can be used to block the current thread until the asynchronous call is complete.</span></span> <span data-ttu-id="958fe-141">但是，<xref:System.Threading.WaitHandle>将忽略<xref:System.AsyncCallback>，如果在已指定一个`BeginInvoke`调用。</span><span class="sxs-lookup"><span data-stu-id="958fe-141">However the <xref:System.Threading.WaitHandle> will ignore the <xref:System.AsyncCallback>, if one was specified during the `BeginInvoke` call.</span></span> <span data-ttu-id="958fe-142">因此，这种情况可以出现在应用程序关闭之前<xref:System.AsyncCallback>执行完毕，即使<xref:System.Threading.WaitHandle>使用到异步调用完成之前的块。</span><span class="sxs-lookup"><span data-stu-id="958fe-142">Therefore, a situation can occur where the application shuts down before the <xref:System.AsyncCallback> has finished executing, even if a <xref:System.Threading.WaitHandle> is used to block until the asynchronous call completion.</span></span> <span data-ttu-id="958fe-143">有关这种情况的示例，请参阅示例<xref:System.Runtime.Remoting.Messaging.AsyncResult>类，并删除<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>语句。</span><span class="sxs-lookup"><span data-stu-id="958fe-143">For an example of such a situation, see the example for the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class, and remove the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> statement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="958fe-144">下面的示例演示如何使用<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>属性来获取<xref:System.Threading.WaitHandle>，以及如何在委托上等待的异步调用。</span><span class="sxs-lookup"><span data-stu-id="958fe-144">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="958fe-145">当异步调用完成时 <xref:System.Threading.WaitHandle> 会收到信号，而你可以通过调用 <xref:System.Threading.WaitHandle.WaitOne%2A> 方法来等待它。</span><span class="sxs-lookup"><span data-stu-id="958fe-145">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="958fe-146">此示例由两个类，包含以异步方式调用的方法的类和类，其中包含`Main`进行调用的方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-146">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="958fe-147">有关详细信息和使用委托来以异步方式调用方法的更多示例，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="958fe-147">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public virtual bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="958fe-148">获取一个值，该值指示 <see langword="BeginInvoke" /> 调用是否同步完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-148">Gets a value indicating whether the <see langword="BeginInvoke" /> call completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="958fe-149">如果 <see langword="true" /> 调用同步完成，则为 <see langword="BeginInvoke" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-149">
              <see langword="true" /> if the <see langword="BeginInvoke" /> call completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-150">如果检测到它的`BeginInvoke`同步在完成的调用<xref:System.AsyncCallback>委托，它是可能的线程中调用 BeginInvoke 是当前线程。</span><span class="sxs-lookup"><span data-stu-id="958fe-150">If it is detected that the `BeginInvoke` call completed synchronously in the <xref:System.AsyncCallback> delegate, it is probable that the thread that called BeginInvoke is the current thread.</span></span> <span data-ttu-id="958fe-151">大多数提供程序<xref:System.IAsyncResult>接口将不使用该功能，并将返回默认`false`。</span><span class="sxs-lookup"><span data-stu-id="958fe-151">Most providers of the <xref:System.IAsyncResult> interface will not use the capability and will return a default `false`.</span></span>  
  
 <span data-ttu-id="958fe-152">当前实现<xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A>始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="958fe-152">Current implementation of <xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A> always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvokeCalled">
      <MemberSignature Language="C#" Value="public bool EndInvokeCalled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndInvokeCalled" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled" />
      <MemberSignature Language="VB.NET" Value="Public Property EndInvokeCalled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndInvokeCalled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EndInvokeCalled : bool with get, set" Usage="System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="958fe-153">获取或设置一个值，该值指示是否已在当前 <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> 上调用 <see langword="EndInvoke" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-153">Gets or sets a value indicating whether <see langword="EndInvoke" /> has been called on the current <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="958fe-154">如果已在当前 <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> 上调用 <see langword="true" />，则为 <see langword="EndInvoke" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-154">
              <see langword="true" /> if <see langword="EndInvoke" /> has been called on the current <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReplyMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage GetReplyMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReplyMessage () As IMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessage ^ GetReplyMessage();" />
      <MemberSignature Language="F#" Value="abstract member GetReplyMessage : unit -&gt; System.Runtime.Remoting.Messaging.IMessage&#xA;override this.GetReplyMessage : unit -&gt; System.Runtime.Remoting.Messaging.IMessage" Usage="asyncResult.GetReplyMessage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="958fe-155">获取异步调用的响应消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-155">Gets the response message for the asynchronous call.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="958fe-156">一条远程处理消息，表示对远程对象上的方法调用的响应。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-156">A remoting message that should represent a response to a method call on a remote object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-157"><xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>方法可以返回的对象后<xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-157">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method can return an object after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method is called.</span></span> <span data-ttu-id="958fe-158"><xref:System.Runtime.Remoting.Messaging.IMessage>返回值可以强制转换为<xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>。</span><span class="sxs-lookup"><span data-stu-id="958fe-158">The <xref:System.Runtime.Remoting.Messaging.IMessage> return value can be cast to an <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.</span></span>  
  
 <span data-ttu-id="958fe-159">但是，不需要直接调用这些方法之一。</span><span class="sxs-lookup"><span data-stu-id="958fe-159">However, you do not need to call either of these methods directly.</span></span> <span data-ttu-id="958fe-160">它们旨在供使用的.NET framework 远程处理基础结构。</span><span class="sxs-lookup"><span data-stu-id="958fe-160">They are intended for use by the remoting infrastructure of the .NET Framework.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public virtual bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="958fe-161">获取一个值，该值指示服务器是否已完成该调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-161">Gets a value indicating whether the server has completed the call.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="958fe-162">服务器完成该调用后，为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-162">
              <see langword="true" /> after the server has completed the call; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-163">服务器必须使用外部议定的任何客户端提供资源后它将设置共享语义<xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>属性`true`。</span><span class="sxs-lookup"><span data-stu-id="958fe-163">The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property to `true`.</span></span> <span data-ttu-id="958fe-164">因此，它是安全的客户端后销毁资源<xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>属性返回`true`。</span><span class="sxs-lookup"><span data-stu-id="958fe-164">Thus, it is safe for the client to destroy the resources after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="958fe-165">下面的示例演示如何使用<xref:System.IAsyncResult.IsCompleted%2A>属性<xref:System.Runtime.Remoting.Messaging.AsyncResult>返回`BeginInvoke`来发现异步调用何时完成。</span><span class="sxs-lookup"><span data-stu-id="958fe-165">The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.Runtime.Remoting.Messaging.AsyncResult> returned by `BeginInvoke` to discover when an asynchronous call completes.</span></span> <span data-ttu-id="958fe-166">从服务于用户界面的线程执行异步调用时需要执行此操作。</span><span class="sxs-lookup"><span data-stu-id="958fe-166">You might do this when making the asynchronous call from a thread that services the user interface.</span></span> <span data-ttu-id="958fe-167">对完成情况进行轮询允许在 <xref:System.Threading.ThreadPool> 线程中执行异步调用时继续执行调用线程。</span><span class="sxs-lookup"><span data-stu-id="958fe-167">Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.</span></span>  
  
 <span data-ttu-id="958fe-168">此示例由两个类，包含以异步方式调用的方法的类和类，其中包含`Main`进行调用的方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-168">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="958fe-169">有关详细信息和使用委托来以异步方式调用方法的更多示例，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="958fe-169">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Messaging.IMessageSink NextSink" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSink As IMessageSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Remoting::Messaging::IMessageSink ^ NextSink { System::Runtime::Remoting::Messaging::IMessageSink ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSink : System.Runtime.Remoting.Messaging.IMessageSink" Usage="System.Runtime.Remoting.Messaging.AsyncResult.NextSink" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.Remoting.Messaging.IMessageSink.NextSink</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="958fe-170">获取接收器链中的下一个消息接收器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-170">Gets the next message sink in the sink chain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="958fe-171">一个 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 接口，表示接收器链上的下一个消息接收器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-171">An <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> interface that represents the next message sink in the sink chain.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-172">当前实现<xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A>返回`null`。</span><span class="sxs-lookup"><span data-stu-id="958fe-172">The current implementation of <xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A> returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMessageCtrl">
      <MemberSignature Language="C#" Value="public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMessageCtrl(class System.Runtime.Remoting.Messaging.IMessageCtrl mc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetMessageCtrl (mc As IMessageCtrl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetMessageCtrl(System::Runtime::Remoting::Messaging::IMessageCtrl ^ mc);" />
      <MemberSignature Language="F#" Value="abstract member SetMessageCtrl : System.Runtime.Remoting.Messaging.IMessageCtrl -&gt; unit&#xA;override this.SetMessageCtrl : System.Runtime.Remoting.Messaging.IMessageCtrl -&gt; unit" Usage="asyncResult.SetMessageCtrl mc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mc" Type="System.Runtime.Remoting.Messaging.IMessageCtrl" />
      </Parameters>
      <Docs>
        <param name="mc">
          <span data-ttu-id="958fe-173">当前远程方法调用的 <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-173">The <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> for the current remote method call.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="958fe-174">为当前远程方法调用设置一个 <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" />，这为在调度异步消息后控制异步消息提供了一种方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-174">Sets an <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-175">不需要调用<xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-175">You do not need to call the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncProcessMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SyncProcessMessage (msg As IMessage) As IMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessage ^ SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage ^ msg);" />
      <MemberSignature Language="F#" Value="abstract member SyncProcessMessage : System.Runtime.Remoting.Messaging.IMessage -&gt; System.Runtime.Remoting.Messaging.IMessage&#xA;override this.SyncProcessMessage : System.Runtime.Remoting.Messaging.IMessage -&gt; System.Runtime.Remoting.Messaging.IMessage" Usage="asyncResult.SyncProcessMessage msg" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
      </Parameters>
      <Docs>
        <param name="msg">
          <span data-ttu-id="958fe-176">远程对象上的方法调用的响应消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-176">A response message to a method call on a remote object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="958fe-177">异步处理远程对象上的方法调用返回的响应消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-177">Synchronously processes a response message returned by a method call on a remote object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="958fe-178">返回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="958fe-178">Returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="958fe-179"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A>方法实现<xref:System.Runtime.Remoting.Messaging.IMessageSink>接口。</span><span class="sxs-lookup"><span data-stu-id="958fe-179">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method implements the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface.</span></span> <span data-ttu-id="958fe-180">不需要直接调用此方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-180">You do not need to call this method directly.</span></span> <span data-ttu-id="958fe-181">它被旨在使用由.NET framework 远程处理基础结构。</span><span class="sxs-lookup"><span data-stu-id="958fe-181">It is intended for use by the remoting infrastructure of the .NET Framework.</span></span>  
  
 <span data-ttu-id="958fe-182"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> 调用的使用者代码<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="958fe-182"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> invokes the consumer code's <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="958fe-183">它还将设置<xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>返回实例<xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="958fe-183">It also sets the <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> instance returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method.</span></span> <span data-ttu-id="958fe-184">如果`msg`形参属于类型<xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>，会返回相同对象<xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>。</span><span class="sxs-lookup"><span data-stu-id="958fe-184">If the `msg` parameter is of type <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>, the same object is returned by <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>.</span></span> <span data-ttu-id="958fe-185">否则，返回一条包含远程处理异常的答复消息。</span><span class="sxs-lookup"><span data-stu-id="958fe-185">Otherwise, a reply message that contains a remoting exception is returned.</span></span>  
  
 <span data-ttu-id="958fe-186"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> 此外会修改返回的值<xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="958fe-186"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> also modifies the value returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>