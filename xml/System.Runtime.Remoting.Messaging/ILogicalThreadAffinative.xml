<Type Name="ILogicalThreadAffinative" FullName="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="11600b4c6c27db5d82abf8e22b33be9547f64f82" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30485181" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ILogicalThreadAffinative" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogicalThreadAffinative" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogicalThreadAffinative" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILogicalThreadAffinative" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>标记可以在 <see cref="T:System.AppDomain" /> 中传播到 <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> 外部的对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当在另一个对象进行远程方法调用<xref:System.AppDomain>，当前<xref:System.Runtime.Remoting.Messaging.CallContext>类生成<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>传播以及对远程位置的调用。 仅对象公开<xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative>接口，并存储在<xref:System.Runtime.Remoting.Messaging.CallContext>外部传播<xref:System.AppDomain>。 不支持此接口的对象不会传输中<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>带有远程方法调用的实例。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative>界面传输[主体和标识对象](~/docs/standard/security/principal-and-identity-objects.md)到远程位置以进行标识。 若要查看的代码`HelloServiceClass`示例中使用的类，请参阅例如<xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A>方法。 若要查看此示例中使用的服务器类的代码，请参阅示例<xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A>类。 若要查看示例中使用的客户端类的代码，请参阅示例<xref:System.Runtime.Remoting.Messaging.CallContext>类。  
  
 [!code-cpp[CallContext#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CallContext/CPP/service.cpp#2)]
 [!code-csharp[CallContext#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CallContext/CS/service.cs#2)]
 [!code-vb[CallContext#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CallContext/VB/service.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>