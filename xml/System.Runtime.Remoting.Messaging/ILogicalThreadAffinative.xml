<Type Name="ILogicalThreadAffinative" FullName="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="804c93041141c1324411f1b67473c2a27f307cd9" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37467417" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ILogicalThreadAffinative" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogicalThreadAffinative" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogicalThreadAffinative" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILogicalThreadAffinative" />
  <TypeSignature Language="F#" Value="type ILogicalThreadAffinative = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f1a50-101">标记可以在 <see cref="T:System.AppDomain" /> 中传播到 <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> 外部的对象。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f1a50-101">Marks an object that can propagate outside of an <see cref="T:System.AppDomain" /> in a <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1a50-102">远程方法调用对在另一个对象<xref:System.AppDomain>，当前<xref:System.Runtime.Remoting.Messaging.CallContext>类生成<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>的传输以及对远程位置的调用。</span><span class="sxs-lookup"><span data-stu-id="f1a50-102">When a remote method call is made to an object in another <xref:System.AppDomain>, the current <xref:System.Runtime.Remoting.Messaging.CallContext> class generates a <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> that travels along with the call to the remote location.</span></span> <span data-ttu-id="f1a50-103">仅对象公开<xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative>接口，并存储在<xref:System.Runtime.Remoting.Messaging.CallContext>外部传播<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="f1a50-103">Only objects that expose the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface and are stored in the <xref:System.Runtime.Remoting.Messaging.CallContext> are propagated outside the <xref:System.AppDomain>.</span></span> <span data-ttu-id="f1a50-104">不支持此接口的对象不以传输<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>具有远程方法调用的实例。</span><span class="sxs-lookup"><span data-stu-id="f1a50-104">Objects that do not support this interface are not transmitted in <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> instances with remote method calls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1a50-105">下面的代码示例演示如何将<xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative>界面传输[主体和标识对象](~/docs/standard/security/principal-and-identity-objects.md)到远程位置以进行标识。</span><span class="sxs-lookup"><span data-stu-id="f1a50-105">The following code example demonstrates the use of the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface to transmit [Principal and Identity Objects](~/docs/standard/security/principal-and-identity-objects.md) to a remote location for identification.</span></span> <span data-ttu-id="f1a50-106">若要查看的代码`HelloServiceClass`示例中使用的类，示例，请参阅<xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f1a50-106">To view the code for the `HelloServiceClass` class used in the sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> method.</span></span> <span data-ttu-id="f1a50-107">若要查看此示例中使用的服务器类的代码，请参阅示例<xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A>类。</span><span class="sxs-lookup"><span data-stu-id="f1a50-107">To view the code for the server class used in this sample, see example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> class.</span></span> <span data-ttu-id="f1a50-108">若要查看本示例中使用的客户端类的代码，请参阅示例<xref:System.Runtime.Remoting.Messaging.CallContext>类。</span><span class="sxs-lookup"><span data-stu-id="f1a50-108">To view the code for the client class used in the sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext> class.</span></span>  
  
 [!code-cpp[CallContext#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CallContext/CPP/service.cpp#2)]
 [!code-csharp[CallContext#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CallContext/CS/service.cs#2)]
 [!code-vb[CallContext#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CallContext/VB/service.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>