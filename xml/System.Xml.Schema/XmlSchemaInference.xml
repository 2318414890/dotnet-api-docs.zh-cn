<Type Name="XmlSchemaInference" FullName="System.Xml.Schema.XmlSchemaInference">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6889eb7fcc2cf7ce539fbcb89fd1e5cfdf7ef58b" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52732740" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlSchemaInference" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlSchemaInference extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaInference" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlSchemaInference" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaInference sealed" />
  <TypeSignature Language="F#" Value="type XmlSchemaInference = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>从 XML 文档推理出 XML 架构定义语言 (XSD) 架构。 不能继承 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   不要使用来自未知或不受信任的源或位置的架构。 执行此操作将影响你的代码的安全性。  
> -   XML 架构 （包括内联架构） 是本质上是容易受到拒绝服务攻击;不接受不受信任的方案中。  
> -   架构验证错误消息和异常可能会公开的内容模型的架构文件的 URI 路径的敏感信息。 请注意不公开此信息向不受信任调用方。  
  
 <xref:System.Xml.Schema.XmlSchemaInference>类中<xref:System.Xml.Schema?displayProperty=nameWithType>命名空间，可推断 XML 架构定义语言 (XSD) 架构的 XML 文档结构。 <xref:System.Xml.Schema.XmlSchemaInference> 类输出的 XML 架构可以验证 XML 文档。  
  
 <xref:System.Xml.Schema.XmlSchemaInference>类支持 W3C XML 架构和 XML 架构标准。 它可以用于推断新的架构或以优化现有的架构。  
  
   
  
## Examples  
 此示例使用 XML 文件作为输入，并生成可验证的示例 XML 的架构。  
  
 [!code-cpp[XmlSchemaInferenceExamples#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#1)]
 [!code-csharp[XmlSchemaInferenceExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#1)]
 [!code-vb[XmlSchemaInferenceExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#1)]  
  
 下面是输入的 XML 文件。  
  
 [!code-xml[XmlSchemaInferenceExamples#5](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xml#5)]  
  
 以下是从 XML 文档推理出的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#6](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xsd#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaInference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaInference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaInference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferSchema">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从指定的 XML 文档推理出 XML 架构定义语言 (XSD) 架构。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferSchema">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaSet InferSchema(class System.Xml.XmlReader instanceDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function InferSchema (instanceDocument As XmlReader) As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchemaSet ^ InferSchema(System::Xml::XmlReader ^ instanceDocument);" />
      <MemberSignature Language="F#" Value="member this.InferSchema : System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchemaSet" Usage="xmlSchemaInference.InferSchema instanceDocument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="instanceDocument">
          <see cref="T:System.Xml.XmlReader" /> 对象，该对象包含要从其推理出架构的 XML 文档。</param>
        <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 对象包含的 XML 文档推理出 XML 架构定义语言 (XSD) 架构。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，该对象包含推理出的架构。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法来推断一个或多个 W3C XML 架构定义语言 (XSD) 架构，从 XML 实例文档中包含<xref:System.Xml.XmlReader>指定的对象。 如果 XML 文档包含的元素和属性从多个命名空间，则生成多个架构： 一个用于在文档中使用每个命名空间。 主要的架构是可以验证整个 XML 文档的架构和目标命名空间是 XML 文档的文档元素的命名空间相同。  
  
 以下是使用时要考虑的重要说明<xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法。  
  
-   <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法将忽略任何`xsi:type`， `xsi:schemaLocation`，或`xsi:noNamespaceSchemaLocation`XML 文档中的属性。  
  
-   如果<xref:System.Xml.XmlReader>类型化对象，它包含类型信息将被忽略。  
  
-   如果<xref:System.Xml.XmlReader>对象定位在元素上不是 XML 文档的根元素，仅为该元素推断的架构。 如果<xref:System.Xml.XmlReader>对象未定位在元素上，<xref:System.Xml.XmlReader.Read%2A>上调用方法<xref:System.Xml.XmlReader>直到遇到一个元素的参数 (例如，当<xref:System.Xml.XmlReader.NodeType%2A>是<xref:System.Xml.XmlNodeType.Element>)。 在此情况中，推断过程开始从该元素。 如果没有元素遇到文档中，结束前一直<xref:System.ArgumentException>引发。  
  
   
  
## Examples  
 此示例使用 XML 文件作为输入，并生成可验证的示例 XML 的架构。  
  
 [!code-cpp[XmlSchemaInferenceExamples#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#1)]
 [!code-csharp[XmlSchemaInferenceExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#1)]
 [!code-vb[XmlSchemaInferenceExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#1)]  
  
 下面是输入的 XML 文件。  
  
 [!code-xml[XmlSchemaInferenceExamples#5](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xml#5)]  
  
 以下是从 XML 文档推理出的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#6](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xsd#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML 文档不是格式良好的文档。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
          <see cref="T:System.Xml.XmlReader" /> 对象不位于根节点或元素上。 架构推理过程中出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="InferSchema">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument, System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaSet InferSchema(class System.Xml.XmlReader instanceDocument, class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function InferSchema (instanceDocument As XmlReader, schemas As XmlSchemaSet) As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchemaSet ^ InferSchema(System::Xml::XmlReader ^ instanceDocument, System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.InferSchema : System.Xml.XmlReader * System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaSet" Usage="xmlSchemaInference.InferSchema (instanceDocument, schemas)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceDocument" Type="System.Xml.XmlReader" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="instanceDocument">
          <see cref="T:System.Xml.XmlReader" /> 对象，该对象包含要从其推理出架构的 XML 文档。</param>
        <param name="schemas">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，包含用于精炼推理出的架构的现有架构。</param>
        <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 对象包含的 XML 文档推理出 XML 架构定义语言 (XSD) 架构，并通过用相同目标命名空间指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象中的现有架构精炼已推理出的架构。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，该对象包含推理出的架构。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法来推断一个或多个 W3C XML 架构定义语言 (XSD) 架构，从 XML 实例文档中包含<xref:System.Xml.XmlReader>指定的对象。 如果 XML 文档包含来自多个命名空间元素和属性，则会生成多个架构： 一个用于在文档中使用每个命名空间。 主要的架构是可以验证整个 XML 文档的架构和目标命名空间是 XML 文档的文档元素的命名空间相同。  
  
 以下是使用时要考虑的重要说明<xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法。  
  
-   <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法将忽略任何`xsi:type`， `xsi:schemaLocation`，或`xsi:noNamespaceSchemaLocation`XML 文档中的属性。  
  
-   如果<xref:System.Xml.XmlReader>类型化对象，它包含类型信息将被忽略。  
  
-   如果<xref:System.Xml.XmlReader>对象定位在元素上不是 XML 文档的根元素，仅为该元素推断的架构。 如果<xref:System.Xml.XmlReader>对象未定位在元素上，<xref:System.Xml.XmlReader.Read%2A>上调用方法<xref:System.Xml.XmlReader>直到遇到一个元素的参数 (例如，当<xref:System.Xml.XmlReader.NodeType%2A>是<xref:System.Xml.XmlNodeType.Element>)。 在此情况中，推断过程开始从该元素。 如果没有元素遇到文档中，结束前一直<xref:System.ArgumentException>引发。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaSet>对象作为参数，并对其元素传递<xref:System.Xml.XmlReader>对象所处定义中的架构之一<xref:System.Xml.Schema.XmlSchemaSet>，推断出的架构用于优化中的现有架构<xref:System.Xml.Schema.XmlSchemaSet>参数具有相同目标命名空间;否则，为命名空间推断新架构。  
  
   
  
## Examples  
 下面的代码示例使用 XML 文档作为输入 1 并生成可验证 XML 文档 1 的架构。 示例代码然后将 XML 文档 2 和重新定义了从基于 XML 文档 2 中找到的更改的 XML 文档 1，生成的架构。  
  
 以下是 XML 文档 1。  
  
 [!code-xml[XmlSchemaInferenceExamples#13](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/item1.xml#13)]  
  
 下面是 2 的 XML 文档。  
  
 [!code-xml[XmlSchemaInferenceExamples#14](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/item2.xml#14)]  
  
 下面的代码示例将来自中包含的第一个 XML 文档的架构推断`reader`，然后对推断出的架构中包含的第二个 XML 文档中找到的更改进行优化`reader1`。 该示例代码使用第一个重载<xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法来推断架构，第二个重载<xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法来优化中的现有架构<xref:System.Xml.Schema.XmlSchemaSet>对象。  
  
 [!code-cpp[XmlSchemaInferenceExamples#4](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#4)]
 [!code-csharp[XmlSchemaInferenceExamples#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#4)]
 [!code-vb[XmlSchemaInferenceExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#4)]  
  
 下面的架构是从 1 的 XML 文档推断的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#15](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/InferSchema1.xml#15)]  
  
 下面的架构是架构的基于 XML 文档 2 上面的精炼的版本。  
  
 [!code-xml[XmlSchemaInferenceExamples#16](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/InferSchema2.xml#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML 文档不是格式良好的文档。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
          <see cref="T:System.Xml.XmlReader" /> 对象不位于根节点或元素上。 架构推理过程中出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Occurrence">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaInference.InferenceOption Occurrence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaInference/InferenceOption Occurrence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaInference.Occurrence" />
      <MemberSignature Language="VB.NET" Value="Public Property Occurrence As XmlSchemaInference.InferenceOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaInference::InferenceOption Occurrence { System::Xml::Schema::XmlSchemaInference::InferenceOption get(); void set(System::Xml::Schema::XmlSchemaInference::InferenceOption value); };" />
      <MemberSignature Language="F#" Value="member this.Occurrence : System.Xml.Schema.XmlSchemaInference.InferenceOption with get, set" Usage="System.Xml.Schema.XmlSchemaInference.Occurrence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaInference+InferenceOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值，该值影响从 XML 文档推理出的架构匹配项声明。</summary>
        <value>
          <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>，在 XML 文档中遇到的第一个时间元素，架构声明将被推断为`minOccurs="1"`。 当遇到特性时，架构声明将被推断为`use="required"`。  
  
 如果<xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>，元素架构声明均推断为`minOccurs="0"`，和属性架构声明均推断为`use="optional"`。  
  
 默认值<xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A>属性是<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>。  
  
   
  
## Examples  
 此示例演示了如何匹配项受<xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A>属性。 代码示例将匹配项从 XML 文件推断两个不同的方式： 放宽和受限制。 下面是示例 XML 文件。  
  
 [!code-xml[XmlSchemaInferenceExamples#7](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/Occurrence1.xml#7)]  
  
 下面的代码示例指示<xref:System.Xml.Schema.XmlSchemaInference>类宽松方式推断元素和属性的匹配项。  
  
 [!code-cpp[XmlSchemaInferenceExamples#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#2)]
 [!code-csharp[XmlSchemaInferenceExamples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#2)]
 [!code-vb[XmlSchemaInferenceExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#2)]  
  
 因为<xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>，生成下面的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#8](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/Occurrence2.xml#8)]  
  
 在示例代码中，如果<xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A>属性未设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>，则<xref:System.Xml.Schema.XmlSchemaInference>类具有默认设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>并生成下面的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#9](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/Occurrence3.xml#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInference">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaInference.InferenceOption TypeInference { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaInference/InferenceOption TypeInference" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaInference.TypeInference" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeInference As XmlSchemaInference.InferenceOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaInference::InferenceOption TypeInference { System::Xml::Schema::XmlSchemaInference::InferenceOption get(); void set(System::Xml::Schema::XmlSchemaInference::InferenceOption value); };" />
      <MemberSignature Language="F#" Value="member this.TypeInference : System.Xml.Schema.XmlSchemaInference.InferenceOption with get, set" Usage="System.Xml.Schema.XmlSchemaInference.TypeInference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaInference+InferenceOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置影响从 XML 文档推理出的类型的 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值。</summary>
        <value>
          <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>，具有简单内容的 XML 文档中元素和属性的推断的类型始终是`xs:string`。 如果<xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>，推断更具体的类型，如`xs:date`， `xs:decimal`， `xs:unsignedByte`，依次类推。  
  
 默认值<xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A>属性是<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>。  
  
   
  
## Examples  
 此示例演示了如何受类型推理<xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A>属性。 示例代码将从 XML 文件的类型推断两个不同的方式： 放宽和受限制。 下面是示例 XML 文件。  
  
 [!code-xml[XmlSchemaInferenceExamples#10](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/TypeInference1.xml#10)]  
  
 下面的代码示例指示<xref:System.Xml.Schema.XmlSchemaInference>类推断`xs:string`的元素和特性具有简单内容。  
  
 [!code-cpp[XmlSchemaInferenceExamples#3](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#3)]
 [!code-csharp[XmlSchemaInferenceExamples#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#3)]
 [!code-vb[XmlSchemaInferenceExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#3)]  
  
 因为<xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>，生成下面的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#11](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/TypeInference2.xml#11)]  
  
 在示例代码中，如果<xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A>属性未设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>，则<xref:System.Xml.Schema.XmlSchemaInference>类具有默认设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>并生成下面的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#12](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/TypeInference3.xml#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>