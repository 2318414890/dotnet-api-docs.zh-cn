<Type Name="ProfileBase" FullName="System.Web.Profile.ProfileBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cce05297b6356f2c0b2129f60d0e16625a1f2d86" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46662267" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProfileBase : System.Configuration.SettingsBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProfileBase extends System.Configuration.SettingsBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Profile.ProfileBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileBase&#xA;Inherits SettingsBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileBase : System::Configuration::SettingsBase" />
  <TypeSignature Language="F#" Value="type ProfileBase = class&#xA;    inherit SettingsBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.SettingsBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供对配置文件属性值和信息的非类型化访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 使用<xref:System.Web.Profile.ProfileBase>类，以创建用户配置文件使用的类。 ASP.NET 具有启用了用户配置文件的应用程序启动时，创建新的类的类型`ProfileCommon`，后者又继承<xref:System.Web.Profile.ProfileBase>类。 强类型化访问器添加到`ProfileCommon`配置节中定义的每个属性的类。 强类型化访问器`ProfileCommon`类调用<xref:System.Web.Profile.ProfileBase.GetPropertyValue%2A>并<xref:System.Web.Profile.ProfileBase.SetPropertyValue%2A>方法的<xref:System.Web.Profile.ProfileBase>基类，以检索并分别将配置文件设置属性值。 实例`ProfileCommon`类设置的值为<xref:System.Web.HttpContext.Profile%2A>ASP.NET 应用程序的属性。  
  
 若要在 ASP.NET 应用程序中创建用户配置文件的实例，建议你使用<xref:System.Web.Profile.ProfileBase.Create%2A>方法。  
  
## <a name="notes-to-inheritors"></a>对继承者的说明   

可以创建继承的自定义配置文件实现<xref:System.Web.Profile.ProfileBase>抽象类，并定义用户配置文件的配置元素中未指定的属性。 可以在 web.config 文件中指定自定义用户配置文件类型`inherits`配置元素，如下面的示例中所示的属性。 有关代码`EmployeeProfile`类包含在本主题的示例部分。 

[!code-xml[System.Web.Profile.ProfileBase-Config](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/CS/config.xml)]  

## Examples  
 下面的代码示例显示了 Web.config 文件，指定包含的用户配置文件`ZipCode`类型的属性`string`和一个`RecentSearchList`类型的属性<xref:System.Collections.Specialized.StringCollection>。 生成<xref:System.Web.HttpContext.Profile%2A>属性与当前<xref:System.Web.HttpContext>将具有强类型化访问器为每个指定的属性。  
  
```xml  
<configuration>  
  <system.web>  
    <anonymousIdentification enabled="true" />  
  
    <profile enabled="true" defaultProvider="SqlProvider" >  
      <properties>  
        <add name="ZipCode" allowAnonymous="true" />  
        <add name="RecentSearchList"  
          type="System.Collections.Specialized.StringCollection"  
          serializeAs="Xml"  
          allowAnonymous="true" />  
      </properties>  
    </profile>  
  </system.web>  
</configuration>  
```  
  
 下面的示例演示在 ASP.NET 页面读取，并设置`ZipCode`为用户配置文件指定的属性。 然后再尝试运行此代码，设置为默认的提供程序`AspNetSqlProvider`在网站上的 ASP.NET 配置设置。  
  
 [!code-aspx-csharp[System.Web.Profile.HttpProfileBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/VB/defaultvb.aspx#1)]  
  
 下面的代码示例定义继承的类<xref:System.Web.Profile.ProfileBase>类，以创建自定义配置文件。 中指定的自定义配置文件的类型`inherits`应用程序的 Web.config 文件中的配置元素的属性。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，用于接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-csharp[System.Web.Profile.ProfileBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.ProfileBase/CS/employeeprofile.cs#1)]
 [!code-vb[System.Web.Profile.ProfileBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.ProfileBase/VB/employeeprofile.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProfileBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProfileBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.Profile.ProfileBase" /> 类的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 使用<xref:System.Web.Profile.ProfileBase>类，以创建用户配置文件使用的类。 ASP.NET 具有启用了用户配置文件的应用程序启动时，创建新的类的类型`ProfileCommon`，后者又继承<xref:System.Web.Profile.ProfileBase>类。 强类型化访问器添加到`ProfileCommon`配置节中定义的每个属性的类。 强类型化访问器`ProfileCommon`类调用<xref:System.Web.Profile.ProfileBase.GetPropertyValue%2A>并<xref:System.Web.Profile.ProfileBase.SetPropertyValue%2A>方法的<xref:System.Web.Profile.ProfileBase>基类，以检索并分别将配置文件设置属性值。 实例`ProfileCommon`类设置的值为<xref:System.Web.HttpContext.Profile%2A>ASP.NET 应用程序的属性。  
  
> [!NOTE]
>  用于生成存储中的类的基类<xref:System.Web.HttpContext.Profile%2A>可以使用重写属性`inherits`属性配置文件的一部分。 在这种情况下将指定的自定义类继承自<xref:System.Web.Profile.ProfileBase>基类。  
  
 此构造函数不是应用程序代码中使用。 若要创建用户配置文件的实例，使用<xref:System.Web.Profile.ProfileBase.Create%2A>方法。  
  
   
  
## Examples  
 以下 Web.config 文件指定包含的用户配置文件`ZipCode`类型的属性`string`和一个`RecentSearchList`类型的属性<xref:System.Collections.Specialized.StringCollection>。 生成<xref:System.Web.HttpContext.Profile%2A>属性与当前<xref:System.Web.HttpContext>将具有强类型化访问器为每个指定的属性。  
  
```xml  
<configuration>  
   <connectionStrings>  
       <add name="SqlServices" connectionString="Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
   </connectionStrings>  
  
  <system.web>  
   <anonymousIdentification enabled="true" />  
  
   <profile defaultProvider="SqlProvider" >  
     <providers>  
       <add  
         name="SqlProvider"  
         connectionStringName="SqlServices"  
         applicationName="ProfileBaseApplication"  
         type="System.Web.Profile.SqlProfileProvider" />  
     </providers>  
  
     <properties>  
       <add name="ZipCode" allowAnonymous="true" />  
       <add name="RecentSearchList"  
            type="System.Collections.Specialized.StringCollection"  
            serializeAs="Xml"  
            allowAnonymous="true" />  
      </properties>  
    </profile>  
   </system.web>  
</configuration>  
```  
  
 以下 ASP.NET 页面读取，并设置`ZipCode`为用户配置文件指定的属性。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，用于接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Profile.HttpProfileBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/VB/defaultvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Web.config 文件的节中的 <see langword="enabled" /> 特性为 <see langword="false" />。</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">未能创建在 Web.config 文件的节中指定的属性类型。  
  
或 
将 Web.config 文件的节中某个属性的 <see langword="allowAnonymous" /> 特性设置为 <see langword="true" />，并将元素的 <see langword="enabled" /> 特性设置为 <see langword="false" />。  
  
或 
将 Web.config 文件节中某个属性的 <see langword="serializeAs" /> 特性设置为 <see cref="F:System.Configuration.SettingsSerializeAs.Binary" />，指定的 <see langword="type" /> 的 <see cref="P:System.Type.IsSerializable" /> 属性将返回 <see langword="false" />。  
  
或 
未能在 <see cref="P:System.Web.Profile.ProfileManager.Providers" /> 集合中找到使用配置文件属性的 <see langword="provider" /> 特性指定的提供程序名称。  
  
或 
未能找到为配置文件属性指定的 <see langword="type" />。  
  
或 
使用与基类中的属性名称匹配的名称指定配置文件属性，基类在节的 <see langword="inherits" /> 特性中指定。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建用户配置文件的实例。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileBase Create (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileBase Create(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileBase.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (username As String) As ProfileBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Profile::ProfileBase ^ Create(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Web.Profile.ProfileBase" Usage="System.Web.Profile.ProfileBase.Create username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要为其创建配置文件的用户的名称。</param>
        <summary>ASP.NET 使用它为指定的用户名创建配置文件的一个实例。</summary>
        <returns>表示指定用户的配置文件的 <see cref="T:System.Web.Profile.ProfileBase" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Profile.ProfileBase.Create%2A>方法创建并初始化新的配置文件实例并使用自定义配置文件的应用程序对象或管理用户配置文件在非 ASP.NET 环境中的非常有用。  
  
 此重载<xref:System.Web.Profile.ProfileBase.Create%2A>方法假设指定的用户名身份验证的用户。  
  
   
  
## Examples  
 下面的代码示例创建自定义配置文件对象的实例，设置一个属性，并将该配置文件保存到数据源。  
  
 [!code-csharp[System.Web.Profile.ProfileBase.Create#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.ProfileBase.Create/CS/profileBaseCreatecs.aspx.cs#1)]
 [!code-vb[System.Web.Profile.ProfileBase.Create#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.ProfileBase.Create/VB/profileBaseCreatevb.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Web.config 文件的节中的 <see langword="enabled" /> 特性为 <see langword="false" />。</exception>
        <exception cref="T:System.Web.HttpException">当前承载权限级别低于 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" />。</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">未能创建在 Web.config 文件的节中指定的属性类型。  
  
或 
将 Web.config 文件的节中某个属性的 <see langword="allowAnonymous" /> 特性设置为 <see langword="true" />，并将元素的 <see langword="enabled" /> 特性设置为 <see langword="false" />。  
  
或 
将 Web.config 文件节中某个属性的 <see langword="serializeAs" /> 特性设置为 <see cref="F:System.Configuration.SettingsSerializeAs.Binary" />，指定的 <see langword="type" /> 的 <see cref="P:System.Type.IsSerializable" /> 属性将返回 <see langword="false" />。  
  
或 
未能在 <see cref="P:System.Web.Profile.ProfileManager.Providers" /> 集合中找到使用配置文件属性的 <see langword="provider" /> 特性指定的提供程序名称。  
  
或 
未能找到为配置文件属性指定的 <see langword="type" />。  
  
或 
使用与基类中的属性名称匹配的名称指定配置文件属性，基类在节的 <see langword="inherits" /> 特性中指定。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileBase Create (string username, bool isAuthenticated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileBase Create(string username, bool isAuthenticated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileBase.Create(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (username As String, isAuthenticated As Boolean) As ProfileBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Profile::ProfileBase ^ Create(System::String ^ username, bool isAuthenticated);" />
      <MemberSignature Language="F#" Value="static member Create : string * bool -&gt; System.Web.Profile.ProfileBase" Usage="System.Web.Profile.ProfileBase.Create (username, isAuthenticated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="isAuthenticated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">要为其创建配置文件的用户的名称。</param>
        <param name="isAuthenticated">
          <see langword="true" /> 指示用户是经过身份验证的用户；<see langword="false" /> 指示用户是匿名用户。</param>
        <summary>ASP.NET 使用它为指定的用户名创建配置文件的一个实例。 带有一个参数，用来指示用户是经过身份验证的用户还是匿名用户。</summary>
        <returns>表示指定用户的配置文件的 <see cref="T:System.Web.Profile.ProfileBase" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Profile.ProfileBase.Create%2A>方法创建并初始化新的配置文件实例并使用自定义配置文件的应用程序对象或管理用户配置文件在非 ASP.NET 环境中的非常有用。  
  
 此重载<xref:System.Web.Profile.ProfileBase.Create%2A>方法可以用于创建身份验证的用户或匿名用户的配置文件。  
  
   
  
## Examples  
 下面的代码示例创建自定义配置文件对象的实例，设置一个属性，并将该配置文件保存到数据源。  
  
 [!code-csharp[System.Web.Profile.ProfileBase.Create#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.ProfileBase.Create/CS/profileBaseCreatecs.aspx.cs#2)]
 [!code-vb[System.Web.Profile.ProfileBase.Create#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.ProfileBase.Create/VB/profileBaseCreatevb.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Web.config 文件的节中的 <see langword="enabled" /> 特性为 <see langword="false" />。</exception>
        <exception cref="T:System.Web.HttpException">当前承载权限级别低于 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" />。</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">未能创建在 Web.config 文件的节中指定的属性类型。  
  
或 
将 Web.config 文件的节中某个属性的 <see langword="allowAnonymous" /> 特性设置为 <see langword="true" />，并将元素的 <see langword="enabled" /> 特性设置为 <see langword="false" />。  
  
或 
将 Web.config 文件节中某个属性的 <see langword="serializeAs" /> 特性设置为 <see cref="F:System.Configuration.SettingsSerializeAs.Binary" />，指定的 <see langword="type" /> 的 <see cref="P:System.Type.IsSerializable" /> 属性将返回 <see langword="false" />。  
  
或 
未能在 <see cref="P:System.Web.Profile.ProfileManager.Providers" /> 集合中找到使用配置文件属性的 <see langword="provider" /> 特性指定的提供程序名称。  
  
或 
未能找到为配置文件属性指定的 <see langword="type" />。  
  
或 
使用与基类中的属性名称匹配的名称指定配置文件属性，基类在节的 <see langword="inherits" /> 特性中指定。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetProfileGroup">
      <MemberSignature Language="C#" Value="public System.Web.Profile.ProfileGroupBase GetProfileGroup (string groupName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Profile.ProfileGroupBase GetProfileGroup(string groupName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileBase.GetProfileGroup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProfileGroup (groupName As String) As ProfileGroupBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Profile::ProfileGroupBase ^ GetProfileGroup(System::String ^ groupName);" />
      <MemberSignature Language="F#" Value="member this.GetProfileGroup : string -&gt; System.Web.Profile.ProfileGroupBase" Usage="profileBase.GetProfileGroup groupName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileGroupBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupName">属性组的名称。</param>
        <summary>获取按组名标识的属性组。</summary>
        <returns>利用指定组名进行配置的属性组的 <see cref="T:System.Web.Profile.ProfileGroupBase" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配置文件属性可分解为更好地组织的组。 <xref:System.Web.Profile.ProfileBase.GetProfileGroup%2A>属性可用来检索属性的一组按组名称。 此外可以通过指定组名称作为的成员访问组中的配置文件属性`Profile`每一页上提供的属性。 例如，`ZipCode`配置文件属性的成员`Address`无法使用访问配置文件组`Profile.Address.ZipCode`。  
  
   
  
## Examples  
 以下 Web.config 文件指定包含组名为的属性组的用户配置文件`Address`。 为生成的分组的属性<xref:System.Web.HttpContext.Profile%2A>属性与当前<xref:System.Web.HttpContext>将前面的组名称。 例如 `Profile.Address.Street`。  
  
```xml  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString=  
      "Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
        name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
    </authorization>  
  
    <membership defaultProvider="SqlProvider"   
      userIsOnlineTimeWindow="15">  
      <providers>  
        <clear />  
        <add   
          name="SqlProvider"   
          type="System.Web.Security.SqlMembershipProvider"   
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"   
          requiresUniqueEmail="false"  
          passwordFormat="Hashed"  
          applicationName="MyApplication" />  
      </providers>  
    </membership>  
  
    <profile defaultProvider="SqlProvider">  
      <providers>  
        <add  
          name="SqlProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication"  
          type="System.Web.Profile.SqlProfileProvider" />  
  
      </providers>  
  
      <properties>  
        <add name="ZipCode" />  
        <group name="Address">  
          <add name="Street" />  
          <add name="City" />  
          <add name="State" />  
          <add name="CountryOrRegion" />  
        </group>  
      </properties>  
    </profile>  
  </system.web>  
</configuration>  
```  
  
 以下 ASP.NET 页面读取并设置为用户配置文件指定的分组的属性。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，用于接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/VB/defaultvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未在配置节中找到指定的配置文件属性组名。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValue">
      <MemberSignature Language="C#" Value="public object GetPropertyValue (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyValue(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileBase.GetPropertyValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyValue (propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPropertyValue(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.GetPropertyValue : string -&gt; obj" Usage="profileBase.GetPropertyValue propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">配置文件属性的名称。</param>
        <summary>获取配置文件属性的值。</summary>
        <returns>指定的配置文件属性的值，类型化为 <see langword="object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 使用<xref:System.Web.Profile.ProfileBase>类，以创建用户配置文件使用的类。 ASP.NET 具有启用了用户配置文件的应用程序启动时，创建新的类的类型`ProfileCommon`，后者又继承<xref:System.Web.Profile.ProfileBase>类。 强类型化访问器添加到`ProfileCommon`配置节中定义的每个属性的类。 强类型化访问器`ProfileCommon`类调用<xref:System.Web.Profile.ProfileBase.GetPropertyValue%2A>方法来检索从非类型化的值<xref:System.Web.Profile.ProfileProvider>生成访问器，然后将强制转换为指定类型和属性值的形式返回。  
  
 可以使用<xref:System.Web.Profile.ProfileBase.GetPropertyValue%2A>方法来按名称检索你的应用程序的用户配置文件的属性值。 返回的值是非类型化，并且必须强制转换为特定对象类型时检索。 对于配置文件属性值对的强类型访问，可以访问属性按名称在每个页上，提供的配置文件属性的成员等`Profile.CustomerAddress`。  
  
   
  
## Examples  
 下面的代码示例显示了在 ASP.NET 页面读取，并设置`ZipCode`为用户配置文件指定的属性。 指定用户配置文件的属性的 Web.config 文件的示例，请参阅为提供的示例<xref:System.Web.Profile.ProfileBase>类。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，用于接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Profile.HttpProfileBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/VB/defaultvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">尝试为匿名配置文件中 <see langword="allowAnonymous" /> 特性为 <see langword="false" /> 的属性设置一个属性值。</exception>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">没有为当前配置文件定义的属性。  
  
或 
当前配置文件中不存在指定的配置文件属性名。  
  
或 
指定的配置文件属性的提供程序不能识别所指定的属性。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (string username, bool isAuthenticated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize(string username, bool isAuthenticated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileBase.Initialize(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (username As String, isAuthenticated As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize(System::String ^ username, bool isAuthenticated);" />
      <MemberSignature Language="F#" Value="member this.Initialize : string * bool -&gt; unit" Usage="profileBase.Initialize (username, isAuthenticated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="isAuthenticated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">要为其初始化配置文件的用户的名称。</param>
        <param name="isAuthenticated">
          <see langword="true" /> 指示用户是经过身份验证的用户；<see langword="false" /> 指示用户是匿名用户。</param>
        <summary>初始化当前用户的配置文件属性值和信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不适于在您的代码中使用。 使用其中一个<xref:System.Web.Profile.ProfileBase.Create%2A>重载来创建用户配置文件的实例。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="IsAnonymous">
      <MemberSignature Language="C#" Value="public bool IsAnonymous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnonymous" />
      <MemberSignature Language="DocId" Value="P:System.Web.Profile.ProfileBase.IsAnonymous" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnonymous As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnonymous { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnonymous : bool" Usage="System.Web.Profile.ProfileBase.IsAnonymous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指示用户配置文件是否用于匿名用户的值。</summary>
        <value>如果用户配置文件是用于匿名用户，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用配置部分启用匿名访问的用户配置文件和`allowAnonymous`用来指定配置文件属性的配置元素的属性。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.Profile.ProfileBase.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="System.Web.Profile.ProfileBase.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值表明是否修改了任何配置文件属性。</summary>
        <value>如果修改了任何配置文件属性，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Profile.ProfileBase.IsDirty%2A>属性可以由配置文件提供程序期间<xref:System.Configuration.SettingsBase.Save%2A>方法来确定属性是否由组成的基元类型、 字符串或<xref:System.DateTime>对象已更改。 然后通过中的配置文件提供程序更新已更改的属性<xref:System.Configuration.SettingsBase.Save%2A>方法。 <xref:System.Configuration.SettingsBase.Save%2A>调用方法时自动页面执行结束时如果<xref:System.Web.Profile.ProfileManager.AutomaticSaveEnabled%2A>属性 `true`  
  
 配置文件提供程序中调用<xref:System.Configuration.SettingsBase.Save%2A>方法不能显式确定是否使用自定义类类型或复杂类型，如集合、 配置文件属性已更改。 可以使用<xref:System.Web.Profile.ProfileModule.ProfileAutoSaving>事件以确定是否已修改的自定义对象，然后继续进行自动保存已修改的对象或取消自动保存，如果不修改了任何对象。 默认行为<xref:System.Web.Profile.ProfileBase>类是设置<xref:System.Web.Profile.ProfileBase.IsDirty%2A>属性设置为`true`访问属性的自定义或复杂类型的第一个时间属性。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override object this[string propertyName] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.Profile.ProfileBase.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides Property Item(propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ propertyName); void set(System::String ^ propertyName, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Web.Profile.ProfileBase.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">配置文件属性的名称。</param>
        <summary>获取或设置按属性名进行索引的配置文件属性值。</summary>
        <value>指定的配置文件属性的值，类型化为 <see langword="object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可用于检索或按名称将应用程序设置的用户配置文件的属性值。 返回的值被类型化为`object`并且必须强制转换为特定对象类型时检索。 强类型化访问配置文件属性值，您可以将属性按名称访问作为的成员`Profile`属性可在每个页面，例如， `Profile.CustomerAddress`。  
  
   
  
## Examples  
 下面的代码示例通过将绑定中列出的用户配置文件中的属性名称<xref:System.Configuration.SettingsProperty.Name%2A>属性从静态<xref:System.Web.Profile.ProfileBase.Properties%2A>系列<xref:System.Configuration.SettingsProperty>对象添加到<xref:System.Web.UI.WebControls.GridView>控件。 所选的属性值检索名称使用<xref:System.Web.Profile.ProfileBase.Item%2A>集合。 指定用户配置文件的属性的 Web.config 文件的示例，请参阅为提供的示例<xref:System.Web.Profile.ProfileBase>类。  
  
 [!code-aspx-csharp[System.Web.Profile.HttpProfileBase#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/CS/ViewProfilecs.aspx#2)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileBase#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/VB/ViewProfilevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">尝试为匿名配置文件中 <see langword="allowAnonymous" /> 特性为 <see langword="false" /> 的属性设置一个属性值。</exception>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">没有为当前配置文件定义的属性。  
  
或 
当前配置文件中不存在指定的配置文件属性名。  
  
或 
指定的配置文件属性的提供程序不能识别所指定的属性。</exception>
        <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">尝试设置标记为只读的属性值。</exception>
        <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">尝试使用不兼容的类型给属性赋值。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="LastActivityDate">
      <MemberSignature Language="C#" Value="public DateTime LastActivityDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LastActivityDate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Profile.ProfileBase.LastActivityDate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastActivityDate As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LastActivityDate { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LastActivityDate : DateTime" Usage="System.Web.Profile.ProfileBase.LastActivityDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取最近一次读取或修改配置文件的日期和时间。</summary>
        <value>默认提供程序最近一次读取或修改配置文件的日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认配置文件提供程序仅修改此属性的值。 对配置文件属性的默认配置文件提供程序以外的提供程序所做的更改不会影响的值<xref:System.Web.Profile.ProfileBase.LastActivityDate%2A>属性。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="LastUpdatedDate">
      <MemberSignature Language="C#" Value="public DateTime LastUpdatedDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LastUpdatedDate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Profile.ProfileBase.LastUpdatedDate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastUpdatedDate As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LastUpdatedDate { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LastUpdatedDate : DateTime" Usage="System.Web.Profile.ProfileBase.LastUpdatedDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取最近一次修改配置文件的日期和时间。</summary>
        <value>默认提供程序最近一次修改配置文件的日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认配置文件提供程序仅修改此属性的值。 对配置文件属性的默认配置文件提供程序以外的提供程序所做的更改不会影响的值<xref:System.Web.Profile.ProfileBase.LastUpdatedDate%2A>属性。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public static System.Configuration.SettingsPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Configuration.SettingsPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Web.Profile.ProfileBase.Properties" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Properties As SettingsPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Configuration::SettingsPropertyCollection ^ Properties { System::Configuration::SettingsPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.SettingsPropertyCollection" Usage="System.Web.Profile.ProfileBase.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取配置文件中每个属性的 <see cref="T:System.Configuration.SettingsProperty" /> 对象的集合。</summary>
        <value>应用程序配置文件中每个属性的 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 对象的 <see cref="T:System.Configuration.SettingsProperty" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可用于获取有关配置应用程序，包括属性名称和类型的配置文件属性的信息。 你还可以引用<xref:System.Web.Profile.ProfileProvider>的每个属性。 一个<xref:System.Web.Profile.ProfileProvider>管理存储和检索的属性值与其他数据源。  
  
   
  
## Examples  
 下面的代码示例通过将绑定中列出的用户配置文件中的属性名称<xref:System.Configuration.SettingsProperty.Name%2A>属性从静态<xref:System.Web.Profile.ProfileBase.Properties%2A>系列<xref:System.Configuration.SettingsProperty>对象添加到<xref:System.Web.UI.WebControls.GridView>控件。 所选的属性值检索名称使用<xref:System.Web.Profile.ProfileBase.Item%2A>集合。 指定用户配置文件的属性的 Web.config 文件的示例，请参阅为提供的示例<xref:System.Web.Profile.ProfileBase>类。  
  
 [!code-aspx-csharp[System.Web.Profile.HttpProfileBase#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/CS/ViewProfilecs.aspx#2)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileBase#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/VB/ViewProfilevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">未能创建在 Web.config 文件的节中指定的属性类型。  
  
或 
将 Web.config 文件的节中某个属性的 <see langword="allowAnonymous" /> 特性设置为 <see langword="true" />，并将元素的 <see langword="enabled" /> 特性设置为 <see langword="false" />。  
  
或 
将 Web.config 文件节中某个属性的 <see langword="serializeAs" /> 特性设置为 <see cref="F:System.Configuration.SettingsSerializeAs.Binary" />，指定的 <see langword="type" /> 的 <see cref="P:System.Type.IsSerializable" /> 属性将返回 <see langword="false" />。  
  
或 
未能在 <see cref="P:System.Web.Profile.ProfileManager.Providers" /> 集合中找到使用配置文件属性的 <see langword="provider" /> 特性指定的提供程序名称。  
  
或 
未能找到为配置文件属性指定的 <see langword="type" />。  
  
或 
使用与基类中的属性名称匹配的名称指定配置文件属性，基类在节的 <see langword="inherits" /> 特性中指定。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public override void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileBase.Save" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Save();" />
      <MemberSignature Language="F#" Value="abstract member Save : unit -&gt; unit&#xA;override this.Save : unit -&gt; unit" Usage="profileBase.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用已更改的配置文件属性值更新配置文件数据源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Profile.ProfileBase.Save%2A>方法将修改后的配置文件属性值写入到数据源。 配置文件提供程序可以减少在数据源的活动量执行更新时，才<xref:System.Web.Profile.ProfileBase.IsDirty%2A>属性设置为`true`。 这是默认情况下<xref:System.Web.Profile.SqlProfileProvider>。 之后<xref:System.Web.Profile.ProfileBase.Save%2A>方法将属性值保存到数据源<xref:System.Web.Profile.ProfileBase.IsDirty%2A>设置为`false`。  
  
 可以使用<xref:System.Web.Profile.ProfileModule.ProfileAutoSaving>事件，以便实现确定是否已修改一个配置文件属性与自定义类型或复杂类型的自定义逻辑和继续自动保存修改的对象或如果没有对象具有取消自动保存已修改。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValue">
      <MemberSignature Language="C#" Value="public void SetPropertyValue (string propertyName, object propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPropertyValue(string propertyName, object propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileBase.SetPropertyValue(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPropertyValue (propertyName As String, propertyValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPropertyValue(System::String ^ propertyName, System::Object ^ propertyValue);" />
      <MemberSignature Language="F#" Value="member this.SetPropertyValue : string * obj -&gt; unit" Usage="profileBase.SetPropertyValue (propertyName, propertyValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">要设置的属性的名称。</param>
        <param name="propertyValue">要分配给属性的值。</param>
        <summary>设置配置文件属性的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 使用<xref:System.Web.Profile.ProfileBase>类，以创建用户配置文件使用的类。 ASP.NET 具有启用了用户配置文件的应用程序启动时，创建新的类的类型`ProfileCommon`，后者又继承<xref:System.Web.Profile.ProfileBase>类。 强类型化访问器添加到`ProfileCommon`配置节中定义的每个属性的类。 强类型化访问器`ProfileCommon`类调用<xref:System.Web.Profile.ProfileBase.SetPropertyValue%2A>方法来传递属性值复制到<xref:System.Web.Profile.ProfileProvider>要存储在数据源。  
  
 可以使用<xref:System.Web.Profile.ProfileBase.SetPropertyValue%2A>方法来按名称指定应用程序的用户配置文件中的属性值。 值为非类型化，并在运行时，不是编译时将执行类型检查。 强类型化访问配置文件属性值，您可以将属性按名称访问作为的成员`Profile`属性可在每一页上，例如， `Profile.CustomerAddress`。  
  
   
  
## Examples  
 下面的代码示例显示了在 ASP.NET 页面读取，并设置`ZipCode`为用户配置文件指定的属性。 指定用户配置文件的属性的 Web.config 文件的示例，请参阅为提供的示例<xref:System.Web.Profile.ProfileBase>类。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，用于接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Profile.HttpProfileBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileBase/VB/defaultvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">尝试为匿名配置文件中 <see langword="allowAnonymous" /> 特性为 <see langword="false" /> 的属性设置一个属性值。</exception>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">没有为当前配置文件定义的属性。  
  
或 
当前配置文件中不存在指定的配置文件属性名。  
  
或 
指定的配置文件属性的提供程序不能识别所指定的属性。</exception>
        <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">尝试设置标记为只读的属性的值。</exception>
        <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">尝试使用不兼容的类型给属性赋值。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public string UserName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Profile.ProfileBase.UserName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserName : string" Usage="System.Web.Profile.ProfileBase.UserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该配置文件的用户名。</summary>
        <value>配置文件的用户名，或分配给配置文件的匿名用户标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Profile.ProfileBase.UserName%2A>属性返回的经过身份验证的用户的配置文件与之关联的名称，或者如果分配给该配置文件的匿名用户标识符<xref:System.Web.Profile.ProfileBase.IsAnonymous%2A>属性是`true`。  
  
 使用配置部分启用匿名访问的用户配置文件和`allowAnonymous`用来指定配置文件属性的配置元素的属性。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
  </Members>
</Type>