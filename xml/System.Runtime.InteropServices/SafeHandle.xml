<Type Name="SafeHandle" FullName="System.Runtime.InteropServices.SafeHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a48931738181122e75f0ec0a410b8d3e63a6436d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36537778" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit SafeHandle extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SafeHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SafeHandle&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SafeHandle abstract : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type SafeHandle = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Handles</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0577b-101">Represents a wrapper class for operating system handles.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0577b-101">Represents a wrapper class for operating system handles.</span>
      </span>
      <span data-ttu-id="0577b-102">This class must be inherited.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0577b-102">This class must be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-103"><xref:System.Runtime.InteropServices.SafeHandle>类提供句柄资源，阻止从正在过早地通过垃圾回收回收和回收了 Windows，以引用非预期的非托管的对象的句柄的临界终止。</span><span class="sxs-lookup"><span data-stu-id="0577b-103">The <xref:System.Runtime.InteropServices.SafeHandle> class provides critical finalization of handle resources, preventing handles from being reclaimed prematurely by garbage collection and from being recycled by Windows to reference unintended unmanaged objects.</span></span>  
  
 <span data-ttu-id="0577b-104">本主题包括以下部分：</span><span class="sxs-lookup"><span data-stu-id="0577b-104">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="0577b-105">[为什么 SafeHandle？](#Why) </span><span class="sxs-lookup"><span data-stu-id="0577b-105">[Why SafeHandle?](#Why) </span></span>  
 <span data-ttu-id="0577b-106">[SafeHandle 能做什么](#Does) </span><span class="sxs-lookup"><span data-stu-id="0577b-106">[What SafeHandle does](#Does) </span></span>  
 [<span data-ttu-id="0577b-107">派生自 SafeHandle 类</span><span class="sxs-lookup"><span data-stu-id="0577b-107">Classes derived from SafeHandle</span></span>](#Derived)  
  
<a name="Why"></a>   
## <a name="why-safehandle"></a><span data-ttu-id="0577b-108">为什么 SafeHandle？</span><span class="sxs-lookup"><span data-stu-id="0577b-108">Why SafeHandle?</span></span>  
 <span data-ttu-id="0577b-109">在.NET Framework 2.0 版中，所有操作系统句柄无法仅封装在之前<xref:System.IntPtr>托管包装器对象。</span><span class="sxs-lookup"><span data-stu-id="0577b-109">Before the .NET Framework version 2.0, all operating system handles could only be encapsulated in the <xref:System.IntPtr> managed wrapper object.</span></span> <span data-ttu-id="0577b-110">虽然这是一种简便的方式与本机代码进行互操作，无法使用异步异常，如线程意外中止或堆栈溢出将句柄已泄漏。</span><span class="sxs-lookup"><span data-stu-id="0577b-110">While this was a convenient way to interoperate with native code, handles could be leaked by asynchronous exceptions, such as a thread aborting unexpectedly or a stack overflow.</span></span> <span data-ttu-id="0577b-111">清理操作系统资源障碍，这些异步的例外是，它们可以在你的应用程序几乎任意位置发生。</span><span class="sxs-lookup"><span data-stu-id="0577b-111">These asynchronous exceptions are an obstacle to cleaning up operating system resources, and they can occur almost anywhere in your app.</span></span>  
  
 <span data-ttu-id="0577b-112">尽管重写到<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法允许清理非托管资源时是对象的垃圾回收，在某些情况下，可以通过执行平台中的方法时的垃圾回收回收可终结对象调用调用。</span><span class="sxs-lookup"><span data-stu-id="0577b-112">Although overrides to the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method allow cleanup of unmanaged resources when an object is being garbage collected, in some circumstances, finalizable objects can be reclaimed by garbage collection while executing a method within a platform invoke call.</span></span> <span data-ttu-id="0577b-113">如果终结器释放句柄传递给该平台 invoke 调用，它可能会导致处理损坏。</span><span class="sxs-lookup"><span data-stu-id="0577b-113">If a finalizer frees the handle passed to that platform invoke call, it could lead to handle corruption.</span></span> <span data-ttu-id="0577b-114">当你的方法在平台期间被阻止时，可能还会回收句柄调用，如时读取文件。</span><span class="sxs-lookup"><span data-stu-id="0577b-114">The handle could also be reclaimed while your method is blocked during a platform invoke call, such as while reading a file.</span></span>  
  
 <span data-ttu-id="0577b-115">更严重的是，因为 Windows 积极回收句柄，句柄无法被回收，并指向可能包含敏感数据的另一个资源。</span><span class="sxs-lookup"><span data-stu-id="0577b-115">More critically, because Windows aggressively recycles handles, a handle could be recycled and point to another resource that might contain sensitive data.</span></span> <span data-ttu-id="0577b-116">这被称为回收攻击和可以会损坏数据，并会安全威胁。</span><span class="sxs-lookup"><span data-stu-id="0577b-116">This is known as a recycle attack and can potentially corrupt data and be a security threat.</span></span>  
  
<a name="Does"></a>   
## <a name="what-safehandle-does"></a><span data-ttu-id="0577b-117">SafeHandle 能做什么</span><span class="sxs-lookup"><span data-stu-id="0577b-117">What SafeHandle does</span></span>  
 <span data-ttu-id="0577b-118"><xref:System.Runtime.InteropServices.SafeHandle>类简化了一些这些对象的生存期问题，并与平台集成调用，以便操作系统资源不会泄漏。</span><span class="sxs-lookup"><span data-stu-id="0577b-118">The <xref:System.Runtime.InteropServices.SafeHandle> class simplifies several of these object lifetime issues, and is integrated with platform invoke so that operating system resources are not leaked.</span></span> <span data-ttu-id="0577b-119"><xref:System.Runtime.InteropServices.SafeHandle>类通过分配和释放而不会中断句柄来解析对象生存期问题。</span><span class="sxs-lookup"><span data-stu-id="0577b-119">The <xref:System.Runtime.InteropServices.SafeHandle> class resolves object lifetime issues by assigning and releasing handles without interruption.</span></span> <span data-ttu-id="0577b-120">它包含的重要终结器，以确保句柄已关闭，并且保证能运行，在意外期间<xref:System.AppDomain>卸载，即使在平台 invoke 调用的情况下假定处于损坏状态。</span><span class="sxs-lookup"><span data-stu-id="0577b-120">It contains a critical finalizer that ensures that the handle is closed and is guaranteed to run during unexpected <xref:System.AppDomain> unloads, even in cases when the platform invoke call is assumed to be in a corrupted state.</span></span>  
  
 <span data-ttu-id="0577b-121">因为<xref:System.Runtime.InteropServices.SafeHandle>继承自<xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>，先于任何关键终结器被调用的非关键终结器。</span><span class="sxs-lookup"><span data-stu-id="0577b-121">Because <xref:System.Runtime.InteropServices.SafeHandle> inherits from <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, all the noncritical finalizers are called before any of the critical finalizers.</span></span> <span data-ttu-id="0577b-122">在相同的垃圾回收传递期间将不再实时的对象调用终结器。</span><span class="sxs-lookup"><span data-stu-id="0577b-122">The finalizers are called on objects that are no longer live during the same garbage collection pass.</span></span> <span data-ttu-id="0577b-123">例如，<xref:System.IO.FileStream>对象可以运行正常的终结器，以刷新现有的缓冲数据，而没有被泄漏或回收的句柄的风险。</span><span class="sxs-lookup"><span data-stu-id="0577b-123">For example, a <xref:System.IO.FileStream> object can run a normal finalizer to flush out existing buffered data without the risk of the handle being leaked or recycled.</span></span> <span data-ttu-id="0577b-124">一般用途，不应之间关键和非关键终结器此非常弱排序。</span><span class="sxs-lookup"><span data-stu-id="0577b-124">This very weak ordering between critical and noncritical finalizers is not intended for general use.</span></span> <span data-ttu-id="0577b-125">它存在主要是为了帮助中的现有库迁移通过允许这些库使用<xref:System.Runtime.InteropServices.SafeHandle>而无需更改它们的语义。</span><span class="sxs-lookup"><span data-stu-id="0577b-125">It exists primarily to assist in the migration of existing libraries by allowing those libraries to use <xref:System.Runtime.InteropServices.SafeHandle> without altering their semantics.</span></span> <span data-ttu-id="0577b-126">此外，重要终结器及任何它调用，如<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType>方法，必须在受约束的执行区域。</span><span class="sxs-lookup"><span data-stu-id="0577b-126">Additionally, the critical finalizer and anything it calls, such as the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType> method, must be in a constrained execution region.</span></span> <span data-ttu-id="0577b-127">这会施加哪些代码可以编写在终结器的调用关系图上的约束。</span><span class="sxs-lookup"><span data-stu-id="0577b-127">This imposes constraints on what code can be written within the finalizer's call graph.</span></span>  
  
 <span data-ttu-id="0577b-128">平台调用操作自动递增引用计数的句柄包装<xref:System.Runtime.InteropServices.SafeHandle>和递减它们完成后。</span><span class="sxs-lookup"><span data-stu-id="0577b-128">Platform invoke operations automatically increment the reference count of handles encapsulated by a <xref:System.Runtime.InteropServices.SafeHandle> and decrement them upon completion.</span></span> <span data-ttu-id="0577b-129">这可确保，不会回收或意外关闭句柄。</span><span class="sxs-lookup"><span data-stu-id="0577b-129">This ensures that the handle will not be recycled or closed unexpectedly.</span></span>  
  
 <span data-ttu-id="0577b-130">在构造时，可以指定基础句柄的所有权<xref:System.Runtime.InteropServices.SafeHandle>通过提供到值的对象`ownsHandle`中的参数<xref:System.Runtime.InteropServices.SafeHandle>类构造函数。</span><span class="sxs-lookup"><span data-stu-id="0577b-130">You can specify ownership of the underlying handle when constructing <xref:System.Runtime.InteropServices.SafeHandle> objects by supplying a value to the `ownsHandle` argument in the <xref:System.Runtime.InteropServices.SafeHandle> class constructor.</span></span> <span data-ttu-id="0577b-131">此参数控制是否<xref:System.Runtime.InteropServices.SafeHandle>对象后释放此对象将释放句柄。</span><span class="sxs-lookup"><span data-stu-id="0577b-131">This controls whether the <xref:System.Runtime.InteropServices.SafeHandle> object will release the handle after the object has been disposed.</span></span>  <span data-ttu-id="0577b-132">这可用于具有特殊生存期要求的句柄或使用其生存期由其他人控制的句柄。</span><span class="sxs-lookup"><span data-stu-id="0577b-132">This is useful for handles with peculiar lifetime requirements or for consuming a handle whose lifetime is controlled by someone else.</span></span>  
  
<a name="Derived"></a>   
## <a name="classes-derived-from-safehandle"></a><span data-ttu-id="0577b-133">派生自 SafeHandle 类</span><span class="sxs-lookup"><span data-stu-id="0577b-133">Classes derived from SafeHandle</span></span>  
 <span data-ttu-id="0577b-134"><xref:System.Runtime.InteropServices.SafeHandle> 是一个抽象的包装类操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="0577b-134"><xref:System.Runtime.InteropServices.SafeHandle> is an abstract wrapper class for operating system handles.</span></span> <span data-ttu-id="0577b-135">从此类派生比较困难。</span><span class="sxs-lookup"><span data-stu-id="0577b-135">Deriving from this class is difficult.</span></span> <span data-ttu-id="0577b-136">但可以使用 <xref:Microsoft.Win32.SafeHandles> 命名空间中可提供以下项的安全句柄的派生类。</span><span class="sxs-lookup"><span data-stu-id="0577b-136">Instead, use the derived classes in the <xref:Microsoft.Win32.SafeHandles> namespace that provide safe handles for the following:</span></span>  
  
-   <span data-ttu-id="0577b-137">文件 (<xref:Microsoft.Win32.SafeHandles.SafeFileHandle>类)。</span><span class="sxs-lookup"><span data-stu-id="0577b-137">Files (the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class).</span></span>  
  
-   <span data-ttu-id="0577b-138">内存映射文件 (<xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle>类)。</span><span class="sxs-lookup"><span data-stu-id="0577b-138">Memory mapped files (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> class).</span></span>  
  
-   <span data-ttu-id="0577b-139">管道 (<xref:Microsoft.Win32.SafeHandles.SafePipeHandle>类)。</span><span class="sxs-lookup"><span data-stu-id="0577b-139">Pipes (the <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> class).</span></span>  
  
-   <span data-ttu-id="0577b-140">内存视图 (<xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle>类)。</span><span class="sxs-lookup"><span data-stu-id="0577b-140">Memory views (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> class).</span></span>  
  
-   <span data-ttu-id="0577b-141">加密构造 ( <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>， <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>， <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>，和<xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle>类)。</span><span class="sxs-lookup"><span data-stu-id="0577b-141">Cryptography constructs (the <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> classes).</span></span>  
  
-   <span data-ttu-id="0577b-142">进程 (<xref:Microsoft.Win32.SafeHandles.SafeProcessHandle>类)。</span><span class="sxs-lookup"><span data-stu-id="0577b-142">Processes (the <xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> class).</span></span>  
  
-   <span data-ttu-id="0577b-143">注册表项 (<xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle>类)。</span><span class="sxs-lookup"><span data-stu-id="0577b-143">Registry keys (the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> class).</span></span>  
  
-   <span data-ttu-id="0577b-144">等待句柄 (<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>类)。</span><span class="sxs-lookup"><span data-stu-id="0577b-144">Wait handles (the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0577b-145">下面的代码示例创建一个操作系统文件句柄，派生自的自定义安全句柄<xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>。</span><span class="sxs-lookup"><span data-stu-id="0577b-145">The following code example creates a custom safe handle for an operating system file handle, deriving from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.</span></span> <span data-ttu-id="0577b-146">它从文件中读取字节，并显示其十六进制值。</span><span class="sxs-lookup"><span data-stu-id="0577b-146">It reads bytes from a file and displays their hexadecimal values.</span></span> <span data-ttu-id="0577b-147">它还包含一个错误测试工具，从而导致线程中止，但释放句柄值。</span><span class="sxs-lookup"><span data-stu-id="0577b-147">It also contains a fault testing harness that causes the thread to abort, but the handle value is freed.</span></span>  <span data-ttu-id="0577b-148">使用时<xref:System.IntPtr>表示句柄，句柄偶尔泄漏由于异步线程中止。</span><span class="sxs-lookup"><span data-stu-id="0577b-148">When using an <xref:System.IntPtr> to represent handles, the handle is occasionally leaked due to the asynchronous thread abort.</span></span>  
  
 <span data-ttu-id="0577b-149">你将需要的文本文件中编译的应用程序所在的文件夹。</span><span class="sxs-lookup"><span data-stu-id="0577b-149">You will need a text file in the same folder as the compiled application.</span></span> <span data-ttu-id="0577b-150">假定你将应用程序"HexViewer"，是命令行用法：</span><span class="sxs-lookup"><span data-stu-id="0577b-150">Assuming that you name the application "HexViewer", the command line usage is:</span></span>  
  
 `HexViewer <filename> -Fault`  
  
 <span data-ttu-id="0577b-151">（可选） 指定`-Fault`有意尝试泄漏通过中止某个窗口中的线程句柄。</span><span class="sxs-lookup"><span data-stu-id="0577b-151">Optionally specify `-Fault` to intentionally attempt to leak the handle by aborting the thread in a certain window.</span></span> <span data-ttu-id="0577b-152">使用 Windows Perform.exe 工具来监视时将故障注入的句柄计数。</span><span class="sxs-lookup"><span data-stu-id="0577b-152">Use the Windows Perform.exe tool to monitor handle counts while injecting faults.</span></span>  
  
 [!code-csharp[SafeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="0577b-153">对继承者的完全信任。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0577b-153">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="0577b-154">此成员不能由部分受信任的代码继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0577b-154">This member cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <permission cref="T:System.Security.SecurityCriticalAttribute">
      <span data-ttu-id="0577b-155">需要完全信任直接调用方。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0577b-155">requires full trust for the immediate caller.</span>
      </span>
      <span data-ttu-id="0577b-156">此成员不能由部分受信任或不透明的代码。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0577b-156">This member cannot be used by partially trusted or transparent code.</span>
      </span>
    </permission>
    <block subset="none" type="overrides">
      <span data-ttu-id="0577b-157">
        <para>创建派生自类<see cref="T:System.Runtime.InteropServices.SafeHandle" />，你必须知道如何创建和释放操作系统句柄。此过程是不同的不同的句柄类型，因为一些使用 [CloseHandle] (https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)函数，而其他使用更具体的函数，如 [UnmapViewOfFile] (https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx)或 [FindClose] (https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx)。为此，你必须创建的派生的类<see cref="T:System.Runtime.InteropServices.SafeHandle" />你想要在安全句柄中包装每个操作系统句柄类型。当从 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 继承时，必须重写下面的成员：<see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 和 <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />。你还应提供默认构造函数调用基构造函数具有一个值，表示一个无效句柄的值，和一个<see cref="T:System.Boolean" />值，该值指示是否通过拥有的本机句柄<see cref="T:System.Runtime.InteropServices.SafeHandle" />并因此应释放时<see cref="T:System.Runtime.InteropServices.SafeHandle" />已释放。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="0577b-157">
          <para>To create a class derived from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must know how to create and free an operating system handle. This process is different for different handle types because some use the [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) function, while others use more specific functions such as [UnmapViewOfFile](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx) or [FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx). For this reason, you must create a derived class of <see cref="T:System.Runtime.InteropServices.SafeHandle" /> for each operating system handle type that you want to wrap in a safe handle.  When you inherit from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must override the following members: <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> and <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />.  You should also provide a default constructor that calls the base constructor with a value that represent an invalid handle value, and a <see cref="T:System.Boolean" /> value indicating whether the native handle is owned by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> and consequently should be freed when that <see cref="T:System.Runtime.InteropServices.SafeHandle" /> has been disposed.</para>
        </span>
      </span>
    </block>
    <altmember cref="N:Microsoft.Win32.SafeHandles" />
    <altmember cref="T:System.Runtime.InteropServices.CriticalHandle" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int invalidHandleValue, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (invalidHandleValue As IntPtr, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle(IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.SafeHandle : nativeint * bool -&gt; System.Runtime.InteropServices.SafeHandle" Usage="new System.Runtime.InteropServices.SafeHandle (invalidHandleValue, ownsHandle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="invalidHandleValue" Type="System.IntPtr" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidHandleValue">
          <span data-ttu-id="0577b-158">The value of an invalid handle (usually 0 or -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-158">The value of an invalid handle (usually 0 or -1).</span>
          </span>
          <span data-ttu-id="0577b-159">Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> should return <see langword="true" /> for this value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-159">Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> should return <see langword="true" /> for this value.</span>
          </span>
        </param>
        <param name="ownsHandle">
          <span data-ttu-id="0577b-160">
            <see langword="true" /> to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle" /> release the handle during the finalization phase; otherwise, <see langword="false" /> (not recommended).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-160">
              <see langword="true" /> to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle" /> release the handle during the finalization phase; otherwise, <see langword="false" /> (not recommended).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0577b-161">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class with the specified invalid handle value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-161">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class with the specified invalid handle value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-162">如果`ownsHandle`参数是`false`，<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>在于： 绝不调用; 因此，不建议使用此参数的值作为你的代码可能会泄漏资源。</span><span class="sxs-lookup"><span data-stu-id="0577b-162">If the `ownsHandle` parameter is `false`, <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> is never called; thus, it is not recommended to use this parameter value as your code may leak resources.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="0577b-163">The derived class resides in an assembly without unmanaged code access permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-163">The derived class resides in an assembly without unmanaged code access permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="0577b-164">对继承者的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-164">for full trust for inheritors.</span>
          </span>
          <span data-ttu-id="0577b-165">此成员不能由部分受信任的代码继承。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-165">This member cannot be inherited by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="0577b-166">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-166">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="0577b-167">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-167">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="safeHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0577b-168">Marks the handle for releasing and freeing resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-168">Marks the handle for releasing and freeing resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-169">调用<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法允许资源被释放。</span><span class="sxs-lookup"><span data-stu-id="0577b-169">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="0577b-170">这如果其他线程正在使用的相同的安全句柄对象时可能不会立即发生，但不再具备这种情况时，就会立即将发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="0577b-170">This might not happen immediately if other threads are using the same safe handle object, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="0577b-171">尽管大多数类使用<xref:System.Runtime.InteropServices.SafeHandle>类不需要提供了终结器，有时这是必要 （例如，清空文件缓冲区，或编写一些数据回发到内存）。</span><span class="sxs-lookup"><span data-stu-id="0577b-171">Although most classes that use the <xref:System.Runtime.InteropServices.SafeHandle> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="0577b-172">在这种情况下，类可以提供保证之前运行了终结器<xref:System.Runtime.InteropServices.SafeHandle>重要终结器运行。</span><span class="sxs-lookup"><span data-stu-id="0577b-172">In this case, the class can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="0577b-173">调用<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法完成后使用<xref:System.Runtime.InteropServices.SafeHandle>对象。</span><span class="sxs-lookup"><span data-stu-id="0577b-173">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0577b-174">始终调用<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>在发布到最后一个引用之前<xref:System.Runtime.InteropServices.SafeHandle>对象。</span><span class="sxs-lookup"><span data-stu-id="0577b-174">Always call <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="0577b-175">否则，在垃圾回收器调用 <xref:System.Runtime.InteropServices.SafeHandle> 对象的 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="0577b-175">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-176">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-176">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-177">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-177">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-178">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-178">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousAddRef">
      <MemberSignature Language="C#" Value="public void DangerousAddRef (ref bool success);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousAddRef(bool&amp; success) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousAddRef (ByRef success As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousAddRef(bool % success);" />
      <MemberSignature Language="F#" Value="member this.DangerousAddRef :  -&gt; unit" Usage="safeHandle.DangerousAddRef success" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="success" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="success">
          <span data-ttu-id="0577b-179">
            <see langword="true" /> if the reference counter was successfully incremented; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-179">
              <see langword="true" /> if the reference counter was successfully incremented; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0577b-180">Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instances.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-180">Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instances.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-181"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>方法会阻止公共语言运行时回收使用一个句柄的内存 (当运行时调用时会出现此情况<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>方法)。</span><span class="sxs-lookup"><span data-stu-id="0577b-181">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> method prevents the common language runtime from reclaiming memory used by a handle (which occurs when the runtime calls the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method).</span></span> <span data-ttu-id="0577b-182">你可以使用此方法手动递增上的引用计数<xref:System.Runtime.InteropServices.SafeHandle>实例。</span><span class="sxs-lookup"><span data-stu-id="0577b-182">You can use this method to manually increment the reference count on a <xref:System.Runtime.InteropServices.SafeHandle> instance.</span></span> <span data-ttu-id="0577b-183"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 返回布尔值使用`ref`参数 (`success`)，该值指示是否已成功递增引用计数。</span><span class="sxs-lookup"><span data-stu-id="0577b-183"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> returns a Boolean value using a `ref` parameter (`success`) that indicates whether the reference count was incremented successfully.</span></span> <span data-ttu-id="0577b-184">这允许程序逻辑发生故障时回退。</span><span class="sxs-lookup"><span data-stu-id="0577b-184">This allows your program logic to back out in case of failure.</span></span> <span data-ttu-id="0577b-185">应设置`success`到`false`之前调用<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>。</span><span class="sxs-lookup"><span data-stu-id="0577b-185">You should set `success` to `false` before calling <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="0577b-186">如果`success`是`true`，匹配对的调用来避免资源泄漏<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>与相应地调用<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>。</span><span class="sxs-lookup"><span data-stu-id="0577b-186">If `success` is `true`, avoid resource leaks by matching the call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> with a corresponding call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0577b-187">此方法适用于高级用户，始终必须谨慎使用。</span><span class="sxs-lookup"><span data-stu-id="0577b-187">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="0577b-188">若要避免泄露句柄资源，始终内线程中止不会中断处理受约束的执行区域 (CER)，调用此方法。</span><span class="sxs-lookup"><span data-stu-id="0577b-188">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-189">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-189">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-190">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-190">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-191">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-191">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      </Docs>
    </Member>
    <Member MemberName="DangerousGetHandle">
      <MemberSignature Language="C#" Value="public IntPtr DangerousGetHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int DangerousGetHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr DangerousGetHandle();" />
      <MemberSignature Language="F#" Value="member this.DangerousGetHandle : unit -&gt; nativeint" Usage="safeHandle.DangerousGetHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0577b-192">Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-192">Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0577b-193">An <see langword="IntPtr" /> representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-193">An <see langword="IntPtr" /> representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span>
          </span>
          <span data-ttu-id="0577b-194">If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, this method still returns the original handle value, which can be a stale value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-194">If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, this method still returns the original handle value, which can be a stale value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-195">你可以使用此方法从实例中检索实际句柄值<xref:System.Runtime.InteropServices.SafeHandle>派生类。</span><span class="sxs-lookup"><span data-stu-id="0577b-195">You can use this method to retrieve the actual handle value from an instance of the <xref:System.Runtime.InteropServices.SafeHandle> derived class.</span></span> <span data-ttu-id="0577b-196">此方法所需的向后兼容性因为.NET Framework 中的许多属性返回`IntPtr`处理类型。</span><span class="sxs-lookup"><span data-stu-id="0577b-196">This method is needed for backwards compatibility because many properties in the .NET Framework return `IntPtr` handle types.</span></span> <span data-ttu-id="0577b-197">`IntPtr` 句柄类型是特定于平台的类型用于表示指针或句柄。</span><span class="sxs-lookup"><span data-stu-id="0577b-197">`IntPtr` handle types are platform-specific types used to represent a pointer or a handle.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0577b-198">使用<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>方法会造成安全风险，因为，如果句柄已标记为无效与<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>，<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>仍返回原始的、 可能失效的句柄值。</span><span class="sxs-lookup"><span data-stu-id="0577b-198">Using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> method can pose security risks because, if the handle has been marked as invalid with <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>, <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> still returns the original, potentially stale handle value.</span></span> <span data-ttu-id="0577b-199">返回的句柄也可以是任何时候回收。</span><span class="sxs-lookup"><span data-stu-id="0577b-199">The returned handle can also be recycled at any point.</span></span> <span data-ttu-id="0577b-200">在最好的情况，这意味着该句柄可能会突然停止工作。</span><span class="sxs-lookup"><span data-stu-id="0577b-200">At best, this means the handle might suddenly stop working.</span></span> <span data-ttu-id="0577b-201">在坏的情况下，如果句柄或句柄表示的资源公开到不受信任的代码，这可能导致重新使用或返回句柄上的回收安全攻击。</span><span class="sxs-lookup"><span data-stu-id="0577b-201">At worst, if the handle or the resource that the handle represents is exposed to untrusted code, this can lead to a recycling security attack on the reused or returned handle.</span></span> <span data-ttu-id="0577b-202">例如，不受信任的调用方可以查询返回的只是句柄上的数据，并接收完全不相关的资源信息。</span><span class="sxs-lookup"><span data-stu-id="0577b-202">For example, an untrusted caller can query data on the handle just returned and receive information for an entirely unrelated resource.</span></span> <span data-ttu-id="0577b-203">请参阅<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>和<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>有关使用的详细信息的方法<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0577b-203">See the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> and the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> methods for more information about using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> methodsafely.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-204">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-204">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-205">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-205">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-206">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-206">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousRelease">
      <MemberSignature Language="C#" Value="public void DangerousRelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousRelease() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousRelease ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousRelease();" />
      <MemberSignature Language="F#" Value="member this.DangerousRelease : unit -&gt; unit" Usage="safeHandle.DangerousRelease " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0577b-207">Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-207">Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-208"><xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>方法是对应于<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>。</span><span class="sxs-lookup"><span data-stu-id="0577b-208">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method is the counterpart to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="0577b-209">你应始终匹配调用<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>通过成功调用的方法<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>。</span><span class="sxs-lookup"><span data-stu-id="0577b-209">You should always match a call to the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method with a successful call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0577b-210">此方法适用于高级用户，始终必须谨慎使用。</span><span class="sxs-lookup"><span data-stu-id="0577b-210">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="0577b-211">若要避免泄露句柄资源，始终内线程中止不会中断处理受约束的执行区域 (CER)，调用此方法。</span><span class="sxs-lookup"><span data-stu-id="0577b-211">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span> <span data-ttu-id="0577b-212">同样，仅在<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>调用都会导致资源泄漏，<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>调用都会导致无效句柄状态变得可见到其他线程。</span><span class="sxs-lookup"><span data-stu-id="0577b-212">In the same way that unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> calls can cause resource leaks, unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls can cause invalid handle states to become visible to other threads.</span></span> <span data-ttu-id="0577b-213">不会公开<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>或<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>对不受信任的代码的调用。</span><span class="sxs-lookup"><span data-stu-id="0577b-213">Do not expose <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> or <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls to untrusted code.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-214">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-214">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-215">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-215">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-216">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-216">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0577b-217">Releases the resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-217">Releases the resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="safeHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0577b-218">Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-218">Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-219">调用<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法允许资源被释放。</span><span class="sxs-lookup"><span data-stu-id="0577b-219">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="0577b-220">这如果其他线程正在使用安全句柄的同一个实例时可能不会立即发生，但不再具备这种情况时，就会立即将发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="0577b-220">This might not happen immediately if other threads are using the same instance of the safe handle, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="0577b-221">虽然大多数类使用<xref:System.Runtime.InteropServices.SafeHandle>不需要提供了终结器，有时这是必要 （例如，来清空文件缓冲区或某些数据写回内存）。</span><span class="sxs-lookup"><span data-stu-id="0577b-221">Although most classes using <xref:System.Runtime.InteropServices.SafeHandle> do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="0577b-222">在这种情况下，它们可以提供一个保证之前运行的终结器<xref:System.Runtime.InteropServices.SafeHandle>重要终结器运行。</span><span class="sxs-lookup"><span data-stu-id="0577b-222">In this case, they can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="0577b-223">调用<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法完成后使用<xref:System.Runtime.InteropServices.SafeHandle>对象。</span><span class="sxs-lookup"><span data-stu-id="0577b-223">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="0577b-224"><xref:System.Runtime.InteropServices.SafeHandle.Close%2A>方法使<xref:System.Runtime.InteropServices.SafeHandle>中不可用状态的对象。</span><span class="sxs-lookup"><span data-stu-id="0577b-224">The <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method leaves the <xref:System.Runtime.InteropServices.SafeHandle> object in an unusable state.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0577b-225">始终调用<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法在发布到最后一个引用之前<xref:System.Runtime.InteropServices.SafeHandle>对象。</span><span class="sxs-lookup"><span data-stu-id="0577b-225">Always call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="0577b-226">否则，在垃圾回收器调用 <xref:System.Runtime.InteropServices.SafeHandle> 对象的 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="0577b-226">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-227">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-227">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-228">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-228">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-229">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-229">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="safeHandle.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="0577b-230">
            <see langword="true" /> for a normal dispose operation; <see langword="false" /> to finalize the handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-230">
              <see langword="true" /> for a normal dispose operation; <see langword="false" /> to finalize the handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0577b-231">Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class specifying whether to perform a normal dispose operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-231">Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class specifying whether to perform a normal dispose operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-232">你应永远不会显式调用<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法替换`disposing`参数设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="0577b-232">You should never explicitly call the <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method with the `disposing` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-233">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-233">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-234">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-234">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-235">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-235">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SafeHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="safeHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0577b-236">Frees all resources associated with the handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-236">Frees all resources associated with the handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-237"><xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A>方法是的析构函数<xref:System.Runtime.InteropServices.SafeHandle>类。</span><span class="sxs-lookup"><span data-stu-id="0577b-237">The <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method is the destructor for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span> <span data-ttu-id="0577b-238">应用程序代码不应直接调用此方法。</span><span class="sxs-lookup"><span data-stu-id="0577b-238">Application code should not call this method directly.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-239">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-239">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-240">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-240">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-241">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-241">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="handle">
      <MemberSignature Language="C#" Value="protected IntPtr handle;" />
      <MemberSignature Language="ILAsm" Value=".field family native int handle" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberSignature Language="VB.NET" Value="Protected handle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: IntPtr handle;" />
      <MemberSignature Language="F#" Value="val mutable handle : nativeint" Usage="System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0577b-242">Specifies the handle to be wrapped.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-242">Specifies the handle to be wrapped.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-243">公开不公开句柄 (即，派生类的外部)。</span><span class="sxs-lookup"><span data-stu-id="0577b-243">Do not expose the handle publicly (that is, outside of the derived class).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0577b-244">Gets a value indicating whether the handle is closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-244">Gets a value indicating whether the handle is closed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0577b-245">如果句柄已关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-245">
              <see langword="true" /> if the handle is closed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-246"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A>方法返回一个值，该值指示是否<xref:System.Runtime.InteropServices.SafeHandle>对象的句柄不再与本机资源相关联。</span><span class="sxs-lookup"><span data-stu-id="0577b-246">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a value indicating whether the <xref:System.Runtime.InteropServices.SafeHandle> object's handle is no longer associated with a native resource.</span></span> <span data-ttu-id="0577b-247">这不同于的定义<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>属性，用于计算是否给定句柄是否始终被视为无效。</span><span class="sxs-lookup"><span data-stu-id="0577b-247">This differs from the definition of the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property, which computes whether a given handle is always considered invalid.</span></span> <span data-ttu-id="0577b-248"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A>方法返回`true`在以下情况下的值：</span><span class="sxs-lookup"><span data-stu-id="0577b-248">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a `true` value in the following cases:</span></span>  
  
-   <span data-ttu-id="0577b-249"><xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>调用了方法。</span><span class="sxs-lookup"><span data-stu-id="0577b-249">The <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method was called.</span></span>  
  
-   <span data-ttu-id="0577b-250"><xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法或<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>调用了方法，并且有没有对引用<xref:System.Runtime.InteropServices.SafeHandle>其他线程上的对象。</span><span class="sxs-lookup"><span data-stu-id="0577b-250">The <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method or <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method was called and there are no references to the <xref:System.Runtime.InteropServices.SafeHandle> object on other threads.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-251">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-251">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-252">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-252">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-253">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-253">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IsInvalid">
      <MemberSignature Language="C#" Value="public abstract bool IsInvalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvalid" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsInvalid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsInvalid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInvalid : bool" Usage="System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0577b-254">When overridden in a derived class, gets a value indicating whether the handle value is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-254">When overridden in a derived class, gets a value indicating whether the handle value is invalid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0577b-255">如果句柄值无效，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-255">
              <see langword="true" /> if the handle value is invalid; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-256">派生的类必须实现<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>属性，以便公共语言运行时能够确定是否需要关键完成。</span><span class="sxs-lookup"><span data-stu-id="0577b-256">Derived classes must implement the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property so that the common language runtime can determine whether critical finalization is required.</span></span> <span data-ttu-id="0577b-257">派生的类必须提供一个适合它们支持的句柄的常规类型的实现 （0 或-1 是无效的）。</span><span class="sxs-lookup"><span data-stu-id="0577b-257">Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid).</span></span> <span data-ttu-id="0577b-258">这些类可以然后进一步派生为特定的安全句柄类型。</span><span class="sxs-lookup"><span data-stu-id="0577b-258">These classes can then be further derived for specific safe handle types.</span></span>  
  
 <span data-ttu-id="0577b-259">与不同<xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A>属性，用于报告是否<xref:System.Runtime.InteropServices.SafeHandle>对象已完成使用基础句柄，<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>属性前者是否给定句柄值是否始终被视为无效。</span><span class="sxs-lookup"><span data-stu-id="0577b-259">Unlike the <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> property, which reports whether the <xref:System.Runtime.InteropServices.SafeHandle> object has finished using the underlying handle, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property calculates whether the given handle value is always considered invalid.</span></span> <span data-ttu-id="0577b-260">因此，<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>属性始终返回相同的值的任何一个的句柄值。</span><span class="sxs-lookup"><span data-stu-id="0577b-260">Therefore, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property always returns the same value for any one handle value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0577b-261">下面的示例检查已成功打开一个文件。</span><span class="sxs-lookup"><span data-stu-id="0577b-261">The following example checks if a file was opened successfully.</span></span> <span data-ttu-id="0577b-262">此代码示例摘自更大的示例为提供<xref:System.Runtime.InteropServices.SafeHandle>类。</span><span class="sxs-lookup"><span data-stu-id="0577b-262">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#2](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-263">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-263">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-264">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-264">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-265">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-265">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="protected abstract bool ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReleaseHandle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; bool" Usage="safeHandle.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0577b-266">When overridden in a derived class, executes the code required to free the handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-266">When overridden in a derived class, executes the code required to free the handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0577b-267">
            <see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-267">
              <see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0577b-268">In this case, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-268">In this case, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-269"><xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>方法保证仅一次，并且仅当该句柄定义为有效时通过调用<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0577b-269">The <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method is guaranteed to be called only once and only if the handle is valid as defined by the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property.</span></span> <span data-ttu-id="0577b-270">实现此方法在你<xref:System.Runtime.InteropServices.SafeHandle>派生类，以执行释放句柄所需的任何代码。</span><span class="sxs-lookup"><span data-stu-id="0577b-270">Implement this method in your <xref:System.Runtime.InteropServices.SafeHandle> derived classes to execute any code that is required to free the handle.</span></span> <span data-ttu-id="0577b-271">因为函数之一<xref:System.Runtime.InteropServices.SafeHandle>要保证防止资源泄漏中的实现的代码<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>必须永远不会失败。</span><span class="sxs-lookup"><span data-stu-id="0577b-271">Because one of the functions of <xref:System.Runtime.InteropServices.SafeHandle> is to guarantee prevention of resource leaks, the code in your implementation of <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> must never fail.</span></span> <span data-ttu-id="0577b-272">垃圾回收器调用<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>常规终结器已运行了垃圾回收在同一时间的对象之后。</span><span class="sxs-lookup"><span data-stu-id="0577b-272">The garbage collector calls <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> after normal finalizers have been run for objects that were garbage collected at the same time.</span></span> <span data-ttu-id="0577b-273">垃圾回收器可保证的资源来调用此方法并方法将不中断时正在进行。</span><span class="sxs-lookup"><span data-stu-id="0577b-273">The garbage collector guarantees the resources to invoke this method and that the method will not be interrupted while it is in progress.</span></span> <span data-ttu-id="0577b-274">此方法将准备作为受约束的执行区域 (CER) 中，在实例构造时 （以及其静态确定的调用关系图中的所有方法） 中。</span><span class="sxs-lookup"><span data-stu-id="0577b-274">This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph).</span></span> <span data-ttu-id="0577b-275">尽管这会使线程中止中断，但是你仍必须注意不要引入在重写任何错误路径<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0577b-275">Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method.</span></span> <span data-ttu-id="0577b-276">具体而言，适用<xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute>属性设为从调用任何方法<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>。</span><span class="sxs-lookup"><span data-stu-id="0577b-276">In particular, apply the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to any methods you call from <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>.</span></span> <span data-ttu-id="0577b-277">在大多数情况下应为此代码：</span><span class="sxs-lookup"><span data-stu-id="0577b-277">In most cases this code should be:</span></span>  
  
 `ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)`  
  
 <span data-ttu-id="0577b-278">此外，对于简单清理 (例如，调用 Win32 API`CloseHandle`上的文件句柄) 你可以检查单个平台 invoke 调用的返回值。</span><span class="sxs-lookup"><span data-stu-id="0577b-278">Additionally, for simple cleanup (for example, calling the Win32 API `CloseHandle` on a file handle) you can check the return value for the single platform invoke call.</span></span> <span data-ttu-id="0577b-279">对于复杂清理，可能有大量程序逻辑和许多方法调用，其中一些可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0577b-279">For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail.</span></span> <span data-ttu-id="0577b-280">你必须确保程序逻辑的这种情况下每个具有回退的代码。</span><span class="sxs-lookup"><span data-stu-id="0577b-280">You must ensure that your program logic has fallback code for each of those cases.</span></span>  
  
 <span data-ttu-id="0577b-281">如果<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>返回`false`出于任何原因，它会生成[releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)托管调试助手。</span><span class="sxs-lookup"><span data-stu-id="0577b-281">If <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> returns `false` for any reason, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span></span>  <span data-ttu-id="0577b-282">这有助于检测你尝试释放资源无法正常工作的情况。</span><span class="sxs-lookup"><span data-stu-id="0577b-282">This helps you detect cases where your attempt to release resources fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0577b-283">下面的代码示例释放句柄，并且是更大的示例为提供的一部分<xref:System.Runtime.InteropServices.SafeHandle>类。</span><span class="sxs-lookup"><span data-stu-id="0577b-283">The following code example releases the handle and is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#3](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-284">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-284">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-285">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-285">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-286">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-286">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandle">
      <MemberSignature Language="C#" Value="protected void SetHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.SetHandle : nativeint -&gt; unit" Usage="safeHandle.SetHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="0577b-287">The pre-existing handle to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-287">The pre-existing handle to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0577b-288">Sets the handle to the specified pre-existing handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-288">Sets the handle to the specified pre-existing handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-289">使用<xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A>方法只有在需要支持预先存在的句柄 （例如，如果结构中返回的句柄），因为.NET Framework COM 互操作的基础结构不支持封送处理输出的结构中的句柄。</span><span class="sxs-lookup"><span data-stu-id="0577b-289">Use the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling output handles in a structure.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-290">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-290">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-291">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-291">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-292">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-292">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandleAsInvalid">
      <MemberSignature Language="C#" Value="public void SetHandleAsInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHandleAsInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHandleAsInvalid ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHandleAsInvalid();" />
      <MemberSignature Language="F#" Value="member this.SetHandleAsInvalid : unit -&gt; unit" Usage="safeHandle.SetHandleAsInvalid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0577b-293">Marks a handle as no longer used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-293">Marks a handle as no longer used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0577b-294">调用<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>方法仅当你知道你句柄不再引用的资源时。</span><span class="sxs-lookup"><span data-stu-id="0577b-294">Call the <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method only when you know that your handle no longer references a resource.</span></span> <span data-ttu-id="0577b-295">执行此操作不会更改的值<xref:System.Runtime.InteropServices.SafeHandle.handle>字段; 它仅标记句柄为已关闭。</span><span class="sxs-lookup"><span data-stu-id="0577b-295">Doing so does not change the value of the <xref:System.Runtime.InteropServices.SafeHandle.handle> field; it only marks the handle as closed.</span></span> <span data-ttu-id="0577b-296">然后，句柄可能包含一个潜在的陈旧的值。</span><span class="sxs-lookup"><span data-stu-id="0577b-296">The handle might then contain a potentially stale value.</span></span> <span data-ttu-id="0577b-297">此调用的效果是，不会释放资源。</span><span class="sxs-lookup"><span data-stu-id="0577b-297">The effect of this call is that no attempt is made to free the resources.</span></span>  
  
 <span data-ttu-id="0577b-298">与<xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A>方法，请使用<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>仅当你需要支持预先存在的句柄。</span><span class="sxs-lookup"><span data-stu-id="0577b-298">As with the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method, use <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> only if you need to support a pre-existing handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0577b-299">表示调用非托管的代码的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-299">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="0577b-300">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-300">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="0577b-301">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0577b-301">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>