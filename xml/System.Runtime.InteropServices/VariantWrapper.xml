<Type Name="VariantWrapper" FullName="System.Runtime.InteropServices.VariantWrapper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="756043660b69b0075e319179d9908a02a325c276" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30485011" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VariantWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit VariantWrapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.VariantWrapper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VariantWrapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class VariantWrapper sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将 <see langword="VT_VARIANT | VT_BYREF" /> 类型的数据从托管代码封送到非托管代码。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用途<xref:System.Runtime.InteropServices.VariantWrapper>是封送处理到相应的托管的类型时添加一级间接寻址`VARIANT`类型。  
  
 你可以使用此类包装<xref:System.Object>的互操作封送处理程序将作为传递`VT_VARIANT | VT_BYREF`。 在版本 1.0 和 1.1 版.NET Framework 中，它无法封送 variant 数据类型的`VT_VARIANT | VT_BYREF`到非托管代码。 互操作封送处理程序传递托管类型的变体 (例如，`VT_BSTR | VT_BYREF`为<xref:System.String>，或`VT_I4 | VT_BYREF`为<xref:System.Int32>)，但不是`VT_VARIANT | VT_BYREF`。  
  
 使用的一个优点`VT_VARIANT | VT_BYREF`变体类型是可以在方法调用期间更改数据的类型。 例如，可以传递`VT_VARIANT | VT_BYREF`变量类型的包含`VT_BSTR`和 get variant 类型返回包含`VT_I4`方法调用后。 由于 COM 互操作封送处理程序无法知道何时传递`VT_BSTR | VT_BYREF`以及何时传递`VT_VARIANT | VT_BYREF`，它指向包含一个变量`BSTR`的参数声明为`VARIANT *`，你可以通过使用指示该封送处理<xref:System.Runtime.InteropServices.VariantWrapper>.  
  
 请注意，不支持早期绑定;你可以使用<xref:System.Runtime.InteropServices.VariantWrapper>仅在调用时<xref:System.Type.InvokeMember%2A>或使用早期绑定方式调用仅支持调度的接口。 在 C# 中，你还必须使用`ref`关键字来指定`ByRef`类型的任何参数的语义<xref:System.Runtime.InteropServices.VariantWrapper>。 在 Visual Basic 中，`ByRef`语义会自动添加为每个隐式后期绑定调用。 此外请注意，嵌套<xref:System.Runtime.InteropServices.VariantWrapper>对象和数组<xref:System.Runtime.InteropServices.VariantWrapper>不支持对象。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.VariantWrapper>类用于包装<xref:System.Object>的互操作封送处理程序将作为传递`VT_VARIANT | VT_BYREF`。  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VariantWrapper (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VariantWrapper(System::Object ^ obj);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要封送的对象。</param>
        <summary>使用指定的 <see cref="T:System.Object" /> 参数初始化 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.VariantWrapper>类用于包装<xref:System.Object>的互操作封送处理程序将作为传递`VT_VARIANT | VT_BYREF`。  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrappedObject">
      <MemberSignature Language="C#" Value="public object WrappedObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrappedObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WrappedObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WrappedObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象包装的对象。</summary>
        <value>由 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象包装的对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>