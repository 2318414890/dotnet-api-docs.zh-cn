<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ComEventInterfaceAttribute.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c19e3e30b907b02a912088930b5eacc74ab95c40.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c19e3e30b907b02a912088930b5eacc74ab95c40</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.</source>
          <target state="translated">标识源接口和实现事件接口方法的类，事件接口在从 COM 类型库中导入组件类时生成。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>You can apply this attribute to interfaces, although the <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> typically applies it for you when it imports a type library.</source>
          <target state="translated">你可以将此特性应用于接口，尽管<bpt id="p1">[</bpt>Tlbimp.exe （类型库导入程序）<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept>通常为您应用导入类型库时。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>When a source interface is imported from a type library, any methods it implements are added as events to a generated event interface.</source>
          <target state="translated">当从类型库导入源接口时，它实现任何方法将添加事件向生成的事件接口。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>Tlbimp.exe applies <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComEventInterfaceAttribute&gt;</ph> to the event interface to identify the managed class that implements the methods of the event interface and implements the original source interface.</source>
          <target state="translated">Tlbimp.exe 适用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComEventInterfaceAttribute&gt;</ph>为事件接口来标识它实现事件接口方法，并实现原始的源接口的托管的类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>The common language runtime uses this attribute at run time to perform the following tasks:</source>
          <target state="translated">公共语言运行时在运行时使用此属性执行以下任务：</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>Associate events exposed by the interface to their implementation in the event provider class.</source>
          <target state="translated">相关联的事件公开其实现的接口在事件提供程序类。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>Link the events to the original COM source interface.</source>
          <target state="translated">将事件链接到原始 COM 源接口。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>You rarely apply this attribute.</source>
          <target state="translated">极少数情况下应用此特性。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>However, if you plan to write source code that produces metadata that closely simulates metadata produced by Tlbimp.exe, you should create a event interface for each original source interface.</source>
          <target state="translated">但是，如果你打算编写生成密切模拟由 Tlbimp.exe 生成的元数据的元数据的源代码，你应创建每个原始的源接口的事件接口。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>For a detailed description about how Tlbimp.exe imports events, see <bpt id="p1">[</bpt>Imported Member Conversion<ept id="p1">](http://msdn.microsoft.com/library/7a272adf-41d7-4409-b0e2-5c0c5ef5266d)</ept>.</source>
          <target state="translated">有关如何 Tlbimp.exe 导入事件的详细说明，请参阅<bpt id="p1">[</bpt>导入成员转换<ept id="p1">](http://msdn.microsoft.com/library/7a272adf-41d7-4409-b0e2-5c0c5ef5266d)</ept>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
          <source>For instruction about how to expose a COM event to a .NET client, see <bpt id="p1">[</bpt>How to: Handle Events Raised by a COM Source<ept id="p1">](http://msdn.microsoft.com/library/12bb67bd-91a2-4554-82fb-bdba3d2c8b04)</ept>.</source>
          <target state="translated">有关如何公开到.NET 客户端的 COM 事件的说明，请参阅<bpt id="p1">[</bpt>如何： 处理由 COM 源的事件引发<ept id="p1">](http://msdn.microsoft.com/library/12bb67bd-91a2-4554-82fb-bdba3d2c8b04)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that contains the original source interface from the type library.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>，其中包含类型库中的原始源接口。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
          <source>COM uses this interface to call back to the managed class.</source>
          <target state="translated">COM 使用此接口回调到托管类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that contains the class that implements the methods of the event interface.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>，其中包含实现事件接口方法的类。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /&gt;</ph> class with the source interface and event provider class.</source>
          <target state="translated">用源接口和事件提供程序类初始化 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
          <source>Gets the class that implements the methods of the event interface.</source>
          <target state="translated">获取实现事件接口方法的类。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that contains the class that implements the methods of the event interface.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>，其中包含实现事件接口方法的类。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
          <source>This value is set to the type of the event provider class generated by the <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept>.</source>
          <target state="translated">此值设置为生成的事件提供程序类的类型<bpt id="p1">[</bpt>Tlbimp.exe （类型库导入程序）<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
          <source>Tlbimp.exe appends the source interface name with EventProvider.</source>
          <target state="translated">Tlbimp.exe 追加 EventProvider 与源接口名称。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
          <source>For example, IMyInterface becomes IMyInterfaceEventProvider.</source>
          <target state="translated">例如，IMyInterface 将成为 IMyInterfaceEventProvider。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
          <source>Gets the original source interface from the type library.</source>
          <target state="translated">从类型库获取原始源接口。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> containing the source interface.</source>
          <target state="translated">一个包含源接口的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
          <source>A source interface has at least one event member, and typically one for each method of the source interface.</source>
          <target state="translated">源接口，并且在至少一个事件成员，通常一个源接口的每个方法。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
          <source>COM uses this interface to call back to the managed class.</source>
          <target state="translated">COM 使用此接口回调到托管类。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>