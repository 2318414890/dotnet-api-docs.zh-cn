<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="23e3cd02f7b0f8ccc396f11c5abc9af18628f6b7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480301" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指示由非托管动态链接库 (DLL) 公开为静态入口点的特性化方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以将此特性应用于方法。  
  
 <xref:System.Runtime.InteropServices.DllImportAttribute>属性提供调用从非托管 DLL 导出的函数所需的信息。 是最低要求，你必须提供包含入口点的 dll 的名称。  
  
 将此特性应用直接向 C# 和 c + + 方法的定义。但是，Visual Basic 编译器发出此属性，当你使用`Declare`语句。 包括的复杂方法定义<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>， <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>， <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>， <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>， <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>，或<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段，将此特性应用直接向 Visual Basic 方法定义。  
  
 **请注意**JScript 不支持此属性。 可以使用 C# 或 Visual Basic 包装类才能从 JScript 程序访问非托管的 API 方法。  
  
 有关使用平台调用到非托管 Dll 中访问函数的服务，请参阅[使用非托管 DLL 函数](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)。  
  
> [!NOTE]
>  <xref:System.Runtime.InteropServices.DllImportAttribute>不支持泛型类型的封送处理。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>属性导入 Win32`MessageBox`函数。  代码示例然后调用导入的方法。  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName">包含非托管方法的 DLL 的名称。 如果 DLL 包含在某个程序集中，则可以包含程序集显示名称。</param>
        <summary>使用包含要导入的方法的 DLL 的名称初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果非托管的 DLL 文件中包含一个程序集，例如，通过使用链接器或`/linkresource`编译器选项，你可以作为的一部分指定的程序集显示名称`dllName`。 例如，如果名为非托管 DLL`unmanaged.dll`中名为的托管程序集包含`MyAssembly`，可能会指定该属性，如下面的代码中所示。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>属性导入 Win32`MessageBox`函数。  代码示例然后调用导入的方法。  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`true`、 最佳映射行为启用的; 否则为最佳映射已被禁用。 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>字段是`true`默认情况下。 此字段的设置的替代的任何级别设置<xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType>属性。  
  
 公共语言运行时将转换为 ANSI 字符的任何托管 Unicode 字符传递给 Windows 98 或 Windows me 上执行非托管的方法 最佳的映射，可以在不存在完全匹配时提供近似匹配字符互操作封送处理程序。 例如，该封送处理 Unicode 版权将字符转换为 c 接受 ANSI 字符的非托管方法。 某些字符缺少最佳的表示形式;这些字符称为无法映射。 通常，无法映射的字符将转换为默认值？ANSI 字符。  
  
> [!CAUTION]
>  某些 Unicode 字符都转换为危险的字符，如反斜杠\\字符，会在无意中更改路径。 通过设置<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段`true`，通过引发异常，可以发出不可映射到调用方的字符是否存在。  
  
> [!CAUTION]
>  无法更改默认值由提供<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>和<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段时将托管的数组传递其元素是 ANSI 字符或 Lpstr 到非托管的安全数组。 最佳的映射始终处于启用状态并不会引发异常。 请注意此组合可能会危及你的安全模型。  
  
   
  
## Examples  
 在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是`Declare`语句，以在托管代码中定义 DLL 函数。 设置<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>字段是这种情况下之一。 下面的示例演示如何应用严格字符映射到的平台的安全调用方法定义通过指定 ANSI 字符集、 禁用最佳映射行为，并在未映射的 Unicode 字符上引发异常。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示入口点的调用约定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此字段设置为之一<xref:System.Runtime.InteropServices.CallingConvention>枚举成员。 默认值为<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>字段是<xref:System.Runtime.InteropServices.CallingConvention.Winapi>，反过来使用默认<xref:System.Runtime.InteropServices.CallingConvention.StdCall>约定。  
  
 有关详细信息，请参阅 MSDN 库中的调用约定。  
  
   
  
## Examples  
 在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是`Declare`语句，以在托管代码中定义 DLL 函数。 设置<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>字段是这种情况下之一。  
  
 System.Runtime.InteropServices.DllImportAttribute#1  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示如何向方法封送字符串参数，并控制名称重整。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将此域的成员与使用<xref:System.Runtime.InteropServices.CharSet>枚举指定的字符串参数的封送处理行为并指定要调用 （给定的确切名称或以"A"或"W"结尾的名称） 的入口点名称。 对于 C# 和 Visual Basic 的默认枚举成员是`CharSet.Ansi`和 c + + 的默认枚举成员是`CharSet.None`，这等同于`CharSet.Ansi`。 在 Visual Basic 中，你使用`Declare`语句以指定`CharSet`字段。  
  
 <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>字段会影响的行为`CharSet`字段在确定要调用的入口点名称。 有关详细的说明和示例的封送处理字符串和名称匹配与关联的行为`CharSet`字段中，请参阅[指定字符集](~/docs/framework/interop/specifying-a-character-set.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>属性导入 Win32`MessageBox`函数。  代码示例然后调用导入的方法。  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示要调用的 DLL 入口点的名称或序号。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以通过提供一个字符串，指示包含入口点 DLL 的名称指定的入口点名称或其序号可识别的入口点。 序号以 # 符号，例如，#1 作为前缀。 如果省略此字段时，公共语言运行时使用的名称的.net 方法标记有<xref:System.Runtime.InteropServices.DllImportAttribute>。  
  
 有关其他信息，请参阅[标识 Dll 中的函数](~/docs/framework/interop/identifying-functions-in-dlls.md)。 有关示例用于演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>字段中，请参阅[指定入口点](~/docs/framework/interop/specifying-an-entry-point.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>属性导入 Win32`MessageBox`函数。  此代码示例使用<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>属性来指定要导入的函数，然后更改该名称与`MyNewMessageBoxMethod`。  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 字段是否使公共语言运行时在非托管 DLL 中搜索入口点名称，而不使用指定的入口点名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`false`，调用入口点名称以字母 A 追加时<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>字段设置为`CharSet.Ansi`，并调用且必须以字母 W 追加的入口点名称时<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>字段设置为`CharSet.Unicode`。 通常情况下，托管的编译器将此字段设置。  
  
 下表显示之间的关系<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet>和<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>字段，基于所规定的编程语言的默认值。 您可以重写默认设置，但这样时要格外小心。  
  
|语言|ANSI|Unicode|自动|  
|--------------|----------|-------------|----------|  
|Visual Basic|ExactSpelling:=True|ExactSpelling:=True|ExactSpelling:=False|  
|C#|ExactSpelling=false|ExactSpelling=false|ExactSpelling=false|  
|C++|ExactSpelling=false|ExactSpelling=false|ExactSpelling=false|  
  
   
  
## Examples  
 在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`语句，以在托管代码中定义 DLL 函数。 设置<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>字段是这种情况下之一。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示是否直接转换具有 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值的非托管方法，或是否自动将 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值转换为异常。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段`true`直接翻译与非托管的签名`HRESULT`或`retval`值; 将其设置为`false`自动转换`HRESULT`或`retval`为异常的值。 默认情况下，<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段是`true`。  
  
 当`true`，生成的方法签名返回一个整数值，包含`HRESULT`值。  在这种情况下，你必须手动检查返回值并相应地做出响应应用程序中。  
  
 当你将设置<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段`false`，生成的方法签名包含 void 返回类型而不是一个整数 (`HRESULT`) 返回类型。  当非托管的方法生成`HRESULT`，运行时自动将忽略返回值`S_OK`（或 0），并且不引发异常。  有关`HRESULT`以外的其他 s `S_OK`，运行时自动引发了异常，对应于`HRESULT`。  请注意，<xref:System.Runtime.InteropServices.DllImportAttribute>属性仅执行此转换为返回的方法`HRESULT`。  
  
 你可能决定更改默认的错误报告行为从`HRESULT`到在异常更好地适应于错误报告的应用程序的结构的情况下的异常。  
  
 此字段是类似于<xref:System.Runtime.InteropServices.PreserveSigAttribute>; 但是，与<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段，默认值为该特性是`false`。  
  
 在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`语句，以在托管代码中定义 DLL 函数。 设置<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段是这种情况下之一。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Runtime.InteropServices.DllImportAttribute>导入非托管`SHAutoComplete`函数一次与<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段设置为`true`再<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段设置为`false`。  此代码示例会导致`SHAutoComplete`函数生成异常一次的任何错误和`HRESULT`下一步。  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示被调用方在从属性化方法返回之前是否调用 <see langword="SetLastError" /> Win32 API 函数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true` 若要指示被调用方将调用`SetLastError`; 否则为`false`。 默认值为 `false`。  
  
 在运行时封送处理程序调用`GetLastError`和缓存返回的值，防止它被覆盖的其他 API 调用。 你可以通过调用检索错误代码<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>。  
  
   
  
## Examples  
 在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`语句，以在托管代码中定义 DLL 函数。 设置<xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>字段是这种情况下之一。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true` 若要指示互操作封送处理程序将转换不可映射的字符; 每次将引发异常`false` ，则指示<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段将被禁用。 此字段是`false`默认情况下。  
  
 公共语言运行时将转换为 ANSI 字符的任何托管 Unicode 字符传递给 Windows 98 或 Windows me 上执行非托管的方法 最佳的映射，可以在不存在完全匹配时提供近似匹配字符互操作封送处理程序。 例如，该封送处理 Unicode 版权将字符转换为 c 接受 ANSI 字符的非托管方法。 某些字符缺少最佳的表示形式;这些字符称为无法映射。 通常，无法映射的字符将转换为默认值？ANSI 字符。  
  
> [!CAUTION]
>  某些 Unicode 字符都转换为危险的字符，如反斜杠\\字符，会在无意中更改路径。 通过设置<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段`true`，通过引发异常，可以发出不可映射到调用方的字符是否存在。  
  
> [!CAUTION]
>  无法更改默认值由提供<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>和<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段时将托管的数组传递其元素是 ANSI 字符或 Lpstr 到非托管的安全数组。 最佳的映射始终处于启用状态并不会引发异常。 请注意此组合可能会危及你的安全模型。  
  
   
  
## Examples  
 在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>DLL 函数定义在托管代码中，而不是使用`Declare`语句。 设置<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段是这种情况下之一。 下面的示例演示如何应用严格字符映射到的平台的安全调用方法定义通过指定 ANSI 字符集、 禁用最佳映射行为，并在未映射的 Unicode 字符上引发异常。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含入口点的 DLL 文件的名称。</summary>
        <value>包含入口点的 DLL 文件的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以提供的完整或相对路径。 如果你不提供任何路径，该 DLL 将做当前路径中必须是在运行时，除非以某种其他方式加载该 DLL。 请注意，但是，使用完全限定的路径会导致错误，如果 DLL 移动。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>