<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="23e3cd02f7b0f8ccc396f11c5abc9af18628f6b7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480301" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ae7b1-101">指示由非托管动态链接库 (DLL) 公开为静态入口点的特性化方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ae7b1-101">Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-102">你可以将此特性应用于方法。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-102">You can apply this attribute to methods.</span></span>  
  
 <span data-ttu-id="ae7b1-103"><xref:System.Runtime.InteropServices.DllImportAttribute>属性提供调用从非托管 DLL 导出的函数所需的信息。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-103">The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL.</span></span> <span data-ttu-id="ae7b1-104">是最低要求，你必须提供包含入口点的 dll 的名称。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-104">As a minimum requirement, you must supply the name of the DLL containing the entry point.</span></span>  
  
 <span data-ttu-id="ae7b1-105">将此特性应用直接向 C# 和 c + + 方法的定义。但是，Visual Basic 编译器发出此属性，当你使用`Declare`语句。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-105">You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement.</span></span> <span data-ttu-id="ae7b1-106">包括的复杂方法定义<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>， <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>， <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>， <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>， <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>，或<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段，将此特性应用直接向 Visual Basic 方法定义。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-106">For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.</span></span>  
  
 <span data-ttu-id="ae7b1-107">**请注意**JScript 不支持此属性。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-107">**Note** JScript does not support this attribute.</span></span> <span data-ttu-id="ae7b1-108">可以使用 C# 或 Visual Basic 包装类才能从 JScript 程序访问非托管的 API 方法。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-108">You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</span></span>  
  
 <span data-ttu-id="ae7b1-109">有关使用平台调用到非托管 Dll 中访问函数的服务，请参阅[使用非托管 DLL 函数](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-109">For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ae7b1-110"><xref:System.Runtime.InteropServices.DllImportAttribute>不支持泛型类型的封送处理。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-110">The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-111">下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>属性导入 Win32`MessageBox`函数。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-111">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="ae7b1-112">代码示例然后调用导入的方法。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-112">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName">
          <span data-ttu-id="ae7b1-113">包含非托管方法的 DLL 的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-113">The name of the DLL that contains the unmanaged method.</span>
          </span>
          <span data-ttu-id="ae7b1-114">如果 DLL 包含在某个程序集中，则可以包含程序集显示名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-114">This can include an assembly display name, if the DLL is included in an assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae7b1-115">使用包含要导入的方法的 DLL 的名称初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-116">如果非托管的 DLL 文件中包含一个程序集，例如，通过使用链接器或`/linkresource`编译器选项，你可以作为的一部分指定的程序集显示名称`dllName`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-116">If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`.</span></span> <span data-ttu-id="ae7b1-117">例如，如果名为非托管 DLL`unmanaged.dll`中名为的托管程序集包含`MyAssembly`，可能会指定该属性，如下面的代码中所示。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-117">For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-118">下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>属性导入 Win32`MessageBox`函数。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-118">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="ae7b1-119">代码示例然后调用导入的方法。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-119">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ae7b1-120">将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-120">Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-121">如果`true`、 最佳映射行为启用的; 否则为最佳映射已被禁用。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-121">If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</span></span> <span data-ttu-id="ae7b1-122"><xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>字段是`true`默认情况下。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-122">The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default.</span></span> <span data-ttu-id="ae7b1-123">此字段的设置的替代的任何级别设置<xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-123">Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> attribute.</span></span>  
  
 <span data-ttu-id="ae7b1-124">公共语言运行时将转换为 ANSI 字符的任何托管 Unicode 字符传递给 Windows 98 或 Windows me 上执行非托管的方法</span><span class="sxs-lookup"><span data-stu-id="ae7b1-124">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="ae7b1-125">最佳的映射，可以在不存在完全匹配时提供近似匹配字符互操作封送处理程序。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-125">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="ae7b1-126">例如，该封送处理 Unicode 版权将字符转换为 c 接受 ANSI 字符的非托管方法。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-126">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="ae7b1-127">某些字符缺少最佳的表示形式;这些字符称为无法映射。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-127">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="ae7b1-128">通常，无法映射的字符将转换为默认值？ANSI 字符。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-128">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae7b1-129">某些 Unicode 字符都转换为危险的字符，如反斜杠\\字符，会在无意中更改路径。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-129">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="ae7b1-130">通过设置<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段`true`，通过引发异常，可以发出不可映射到调用方的字符是否存在。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-130">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae7b1-131">无法更改默认值由提供<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>和<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段时将托管的数组传递其元素是 ANSI 字符或 Lpstr 到非托管的安全数组。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-131">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="ae7b1-132">最佳的映射始终处于启用状态并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-132">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="ae7b1-133">请注意此组合可能会危及你的安全模型。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-133">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-134">在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是`Declare`语句，以在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-134">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="ae7b1-135">设置<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>字段是这种情况下之一。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-135">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases.</span></span> <span data-ttu-id="ae7b1-136">下面的示例演示如何应用严格字符映射到的平台的安全调用方法定义通过指定 ANSI 字符集、 禁用最佳映射行为，并在未映射的 Unicode 字符上引发异常。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-136">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ae7b1-137">指示入口点的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-137">Indicates the calling convention of an entry point.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-138">此字段设置为之一<xref:System.Runtime.InteropServices.CallingConvention>枚举成员。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-138">You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members.</span></span> <span data-ttu-id="ae7b1-139">默认值为<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>字段是<xref:System.Runtime.InteropServices.CallingConvention.Winapi>，反过来使用默认<xref:System.Runtime.InteropServices.CallingConvention.StdCall>约定。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-139">The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.</span></span>  
  
 <span data-ttu-id="ae7b1-140">有关详细信息，请参阅 MSDN 库中的调用约定。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-140">For more information, see Calling Convention in the MSDN library.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-141">在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是`Declare`语句，以在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-141">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="ae7b1-142">设置<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>字段是这种情况下之一。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-142">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.</span></span>  
  
 <span data-ttu-id="ae7b1-143">System.Runtime.InteropServices.DllImportAttribute#1</span><span class="sxs-lookup"><span data-stu-id="ae7b1-143">System.Runtime.InteropServices.DllImportAttribute#1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ae7b1-144">指示如何向方法封送字符串参数，并控制名称重整。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-144">Indicates how to marshal string parameters to the method and controls name mangling.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-145">将此域的成员与使用<xref:System.Runtime.InteropServices.CharSet>枚举指定的字符串参数的封送处理行为并指定要调用 （给定的确切名称或以"A"或"W"结尾的名称） 的入口点名称。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-145">Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</span></span> <span data-ttu-id="ae7b1-146">对于 C# 和 Visual Basic 的默认枚举成员是`CharSet.Ansi`和 c + + 的默认枚举成员是`CharSet.None`，这等同于`CharSet.Ansi`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-146">The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`.</span></span> <span data-ttu-id="ae7b1-147">在 Visual Basic 中，你使用`Declare`语句以指定`CharSet`字段。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-147">In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.</span></span>  
  
 <span data-ttu-id="ae7b1-148"><xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>字段会影响的行为`CharSet`字段在确定要调用的入口点名称。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-148">The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke.</span></span> <span data-ttu-id="ae7b1-149">有关详细的说明和示例的封送处理字符串和名称匹配与关联的行为`CharSet`字段中，请参阅[指定字符集](~/docs/framework/interop/specifying-a-character-set.md)。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-149">For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-150">下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>属性导入 Win32`MessageBox`函数。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-150">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="ae7b1-151">代码示例然后调用导入的方法。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-151">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ae7b1-152">指示要调用的 DLL 入口点的名称或序号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-152">Indicates the name or ordinal of the DLL entry point to be called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-153">你可以通过提供一个字符串，指示包含入口点 DLL 的名称指定的入口点名称或其序号可识别的入口点。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-153">You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</span></span> <span data-ttu-id="ae7b1-154">序号以 # 符号，例如，#1 作为前缀。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-154">Ordinals are prefixed with the # sign, for example, #1.</span></span> <span data-ttu-id="ae7b1-155">如果省略此字段时，公共语言运行时使用的名称的.net 方法标记有<xref:System.Runtime.InteropServices.DllImportAttribute>。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-155">If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>  
  
 <span data-ttu-id="ae7b1-156">有关其他信息，请参阅[标识 Dll 中的函数](~/docs/framework/interop/identifying-functions-in-dlls.md)。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-156">For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md).</span></span> <span data-ttu-id="ae7b1-157">有关示例用于演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>字段中，请参阅[指定入口点](~/docs/framework/interop/specifying-an-entry-point.md)。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-157">For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-158">下面的代码示例演示如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>属性导入 Win32`MessageBox`函数。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-158">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="ae7b1-159">此代码示例使用<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>属性来指定要导入的函数，然后更改该名称与`MyNewMessageBoxMethod`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-159">The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ae7b1-160">控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 字段是否使公共语言运行时在非托管 DLL 中搜索入口点名称，而不使用指定的入口点名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-160">Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-161">如果`false`，调用入口点名称以字母 A 追加时<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>字段设置为`CharSet.Ansi`，并调用且必须以字母 W 追加的入口点名称时<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>字段设置为`CharSet.Unicode`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-161">If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to the `CharSet.Unicode`.</span></span> <span data-ttu-id="ae7b1-162">通常情况下，托管的编译器将此字段设置。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-162">Typically, managed compilers set this field.</span></span>  
  
 <span data-ttu-id="ae7b1-163">下表显示之间的关系<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet>和<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>字段，基于所规定的编程语言的默认值。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-163">The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language.</span></span> <span data-ttu-id="ae7b1-164">您可以重写默认设置，但这样时要格外小心。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-164">You can override the default setting, but do so with caution.</span></span>  
  
|<span data-ttu-id="ae7b1-165">语言</span><span class="sxs-lookup"><span data-stu-id="ae7b1-165">Language</span></span>|<span data-ttu-id="ae7b1-166">ANSI</span><span class="sxs-lookup"><span data-stu-id="ae7b1-166">ANSI</span></span>|<span data-ttu-id="ae7b1-167">Unicode</span><span class="sxs-lookup"><span data-stu-id="ae7b1-167">Unicode</span></span>|<span data-ttu-id="ae7b1-168">自动</span><span class="sxs-lookup"><span data-stu-id="ae7b1-168">Auto</span></span>|  
|--------------|----------|-------------|----------|  
|<span data-ttu-id="ae7b1-169">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="ae7b1-169">Visual Basic</span></span>|<span data-ttu-id="ae7b1-170">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="ae7b1-170">ExactSpelling:=True</span></span>|<span data-ttu-id="ae7b1-171">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="ae7b1-171">ExactSpelling:=True</span></span>|<span data-ttu-id="ae7b1-172">ExactSpelling:=False</span><span class="sxs-lookup"><span data-stu-id="ae7b1-172">ExactSpelling:=False</span></span>|  
|<span data-ttu-id="ae7b1-173">C#</span><span class="sxs-lookup"><span data-stu-id="ae7b1-173">C#</span></span>|<span data-ttu-id="ae7b1-174">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="ae7b1-174">ExactSpelling=false</span></span>|<span data-ttu-id="ae7b1-175">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="ae7b1-175">ExactSpelling=false</span></span>|<span data-ttu-id="ae7b1-176">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="ae7b1-176">ExactSpelling=false</span></span>|  
|<span data-ttu-id="ae7b1-177">C++</span><span class="sxs-lookup"><span data-stu-id="ae7b1-177">C++</span></span>|<span data-ttu-id="ae7b1-178">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="ae7b1-178">ExactSpelling=false</span></span>|<span data-ttu-id="ae7b1-179">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="ae7b1-179">ExactSpelling=false</span></span>|<span data-ttu-id="ae7b1-180">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="ae7b1-180">ExactSpelling=false</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-181">在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`语句，以在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-181">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="ae7b1-182">设置<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>字段是这种情况下之一。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-182">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ae7b1-183">指示是否直接转换具有 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值的非托管方法，或是否自动将 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值转换为异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-183">Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-184">设置<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段`true`直接翻译与非托管的签名`HRESULT`或`retval`值; 将其设置为`false`自动转换`HRESULT`或`retval`为异常的值。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-184">Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions.</span></span> <span data-ttu-id="ae7b1-185">默认情况下，<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段是`true`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-185">By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.</span></span>  
  
 <span data-ttu-id="ae7b1-186">当`true`，生成的方法签名返回一个整数值，包含`HRESULT`值。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-186">When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.</span></span>  <span data-ttu-id="ae7b1-187">在这种情况下，你必须手动检查返回值并相应地做出响应应用程序中。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-187">In this case, you must manually inspect the return value and respond accordingly in your application.</span></span>  
  
 <span data-ttu-id="ae7b1-188">当你将设置<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段`false`，生成的方法签名包含 void 返回类型而不是一个整数 (`HRESULT`) 返回类型。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-188">When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.</span></span>  <span data-ttu-id="ae7b1-189">当非托管的方法生成`HRESULT`，运行时自动将忽略返回值`S_OK`（或 0），并且不引发异常。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-189">When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.</span></span>  <span data-ttu-id="ae7b1-190">有关`HRESULT`以外的其他 s `S_OK`，运行时自动引发了异常，对应于`HRESULT`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-190">For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.</span></span>  <span data-ttu-id="ae7b1-191">请注意，<xref:System.Runtime.InteropServices.DllImportAttribute>属性仅执行此转换为返回的方法`HRESULT`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-191">Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.</span></span>  
  
 <span data-ttu-id="ae7b1-192">你可能决定更改默认的错误报告行为从`HRESULT`到在异常更好地适应于错误报告的应用程序的结构的情况下的异常。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-192">You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.</span></span>  
  
 <span data-ttu-id="ae7b1-193">此字段是类似于<xref:System.Runtime.InteropServices.PreserveSigAttribute>; 但是，与<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段，默认值为该特性是`false`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-193">This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.</span></span>  
  
 <span data-ttu-id="ae7b1-194">在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`语句，以在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-194">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="ae7b1-195">设置<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段是这种情况下之一。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-195">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-196">下面的代码示例使用<xref:System.Runtime.InteropServices.DllImportAttribute>导入非托管`SHAutoComplete`函数一次与<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段设置为`true`再<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>字段设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-196">The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.</span></span>  <span data-ttu-id="ae7b1-197">此代码示例会导致`SHAutoComplete`函数生成异常一次的任何错误和`HRESULT`下一步。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-197">This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ae7b1-198">指示被调用方在从属性化方法返回之前是否调用 <see langword="SetLastError" /> Win32 API 函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-198">Indicates whether the callee calls the <see langword="SetLastError" /> Win32 API function before returning from the attributed method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-199">`true` 若要指示被调用方将调用`SetLastError`; 否则为`false`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-199">`true` to indicate that the callee will call `SetLastError`; otherwise, `false`.</span></span> <span data-ttu-id="ae7b1-200">默认值为 `false`。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-200">The default is `false`.</span></span>  
  
 <span data-ttu-id="ae7b1-201">在运行时封送处理程序调用`GetLastError`和缓存返回的值，防止它被覆盖的其他 API 调用。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-201">The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls.</span></span> <span data-ttu-id="ae7b1-202">你可以通过调用检索错误代码<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-202">You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-203">在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`语句，以在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-203">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="ae7b1-204">设置<xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>字段是这种情况下之一。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-204">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ae7b1-205">启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-205">Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-206">`true` 若要指示互操作封送处理程序将转换不可映射的字符; 每次将引发异常`false` ，则指示<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段将被禁用。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-206">`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled.</span></span> <span data-ttu-id="ae7b1-207">此字段是`false`默认情况下。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-207">This field is `false` by default.</span></span>  
  
 <span data-ttu-id="ae7b1-208">公共语言运行时将转换为 ANSI 字符的任何托管 Unicode 字符传递给 Windows 98 或 Windows me 上执行非托管的方法</span><span class="sxs-lookup"><span data-stu-id="ae7b1-208">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="ae7b1-209">最佳的映射，可以在不存在完全匹配时提供近似匹配字符互操作封送处理程序。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-209">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="ae7b1-210">例如，该封送处理 Unicode 版权将字符转换为 c 接受 ANSI 字符的非托管方法。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-210">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="ae7b1-211">某些字符缺少最佳的表示形式;这些字符称为无法映射。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-211">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="ae7b1-212">通常，无法映射的字符将转换为默认值？ANSI 字符。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-212">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae7b1-213">某些 Unicode 字符都转换为危险的字符，如反斜杠\\字符，会在无意中更改路径。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-213">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="ae7b1-214">通过设置<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段`true`，通过引发异常，可以发出不可映射到调用方的字符是否存在。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-214">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae7b1-215">无法更改默认值由提供<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>和<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段时将托管的数组传递其元素是 ANSI 字符或 Lpstr 到非托管的安全数组。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-215">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="ae7b1-216">最佳的映射始终处于启用状态并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-216">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="ae7b1-217">请注意此组合可能会危及你的安全模型。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-217">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae7b1-218">在某些情况下，Visual Basic 开发人员使用<xref:System.Runtime.InteropServices.DllImportAttribute>DLL 函数定义在托管代码中，而不是使用`Declare`语句。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-218">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement.</span></span> <span data-ttu-id="ae7b1-219">设置<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>字段是这种情况下之一。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-219">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases.</span></span> <span data-ttu-id="ae7b1-220">下面的示例演示如何应用严格字符映射到的平台的安全调用方法定义通过指定 ANSI 字符集、 禁用最佳映射行为，并在未映射的 Unicode 字符上引发异常。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-220">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ae7b1-221">获取包含入口点的 DLL 文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-221">Gets the name of the DLL file that contains the entry point.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ae7b1-222">包含入口点的 DLL 文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae7b1-222">The name of the DLL file that contains the entry point.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae7b1-223">你可以提供的完整或相对路径。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-223">You can provide a full or relative path.</span></span> <span data-ttu-id="ae7b1-224">如果你不提供任何路径，该 DLL 将做当前路径中必须是在运行时，除非以某种其他方式加载该 DLL。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-224">If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</span></span> <span data-ttu-id="ae7b1-225">请注意，但是，使用完全限定的路径会导致错误，如果 DLL 移动。</span><span class="sxs-lookup"><span data-stu-id="ae7b1-225">Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>