<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="GCHandle.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5946c1ad89f5a538ac3d94bc1906117001ed964b3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">946c1ad89f5a538ac3d94bc1906117001ed964b3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Provides a way to access a managed object from unmanaged memory.</source>
          <target state="translated">提供用于从非托管内存访问托管对象的方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> structure is used with the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandleType&gt;</ph> enumeration to create a handle corresponding to any managed object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>结构用于<ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandleType&gt;</ph>枚举，以创建对应于任何托管对象的句柄。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>This handle can be one of four types: <ph id="ph1">`Weak`</ph>, <ph id="ph2">`WeakTrackResurrection`</ph>, <ph id="ph3">`Normal`</ph>, or <ph id="ph4">`Pinned`</ph>.</source>
          <target state="translated">此句柄可以是四种类型之一： <ph id="ph1">`Weak`</ph>， <ph id="ph2">`WeakTrackResurrection`</ph>， <ph id="ph3">`Normal`</ph>，或<ph id="ph4">`Pinned`</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>When the handle has been allocated, you can use it to prevent the managed object from being collected by the garbage collector when an unmanaged client holds the only reference.</source>
          <target state="translated">当已分配了句柄时，可用于防止在非托管客户端保留唯一的引用时，垃圾回收器正在收集托管的对象。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Without such a handle, the object can be collected by the garbage collector before completing its work on behalf of the unmanaged client.</source>
          <target state="translated">没有这样的句柄，该对象可以在收集垃圾回收器在完成其工作代表非托管客户端之前。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>You can also use <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> to create a pinned object that returns a memory address to prevent the garbage collector from moving the object in memory.</source>
          <target state="translated">你还可以使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>创建钉住的对象返回的内存地址可防止垃圾回收器移动对象在内存中。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>When the handle goes out of scope you must explicitly release it by calling the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> method; otherwise, memory leaks may occur.</source>
          <target state="translated">当该句柄超出范围时您必须显式释放它通过调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph>方法; 否则为内存泄漏可能会出现。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>When you free a pinned handle, the associated object will be unpinned and will become eligible for garbage collection, if there are no other references to it.</source>
          <target state="translated">当释放固定句柄时，关联的对象将解除固定，并且将成为适合进行垃圾回收，如果不有任何其他引用了它。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">下面的示例演示<ph id="ph1">`App`</ph>创建托管的对象使用的句柄类<ph id="ph2">`GCHandle.Alloc`</ph>方法，以防止将托管的对象收集。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">调用<ph id="ph1">`EnumWindows`</ph>方法将传递委托与托管的对象 （两者都声明为托管类型，但不是显示），并将强制转换的句柄<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">非托管的函数将类型作为回调函数的参数传递回调用方。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>Retrieves the address of an object in a <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph> handle.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph> 句柄中检索对象的地址。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>The address of the pinned object as an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 形式的固定对象的地址。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>This method is used to get a stable pointer to the object.</source>
          <target state="translated">此方法用于获取指向对象的稳定的指针。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>Pinning an object prevents the garbage collector from moving it around in memory, thereby reducing the efficiency of the garbage collector.</source>
          <target state="translated">固定对象可防止垃圾回收器在内存中，从而减少垃圾回收器的效率移动它。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>The handle is any type other than <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph>.</source>
          <target state="translated">该句柄是 <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph> 以外的任何类型。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Allocates a handle for the specified object.</source>
          <target state="translated">为指定的对象分配句柄。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>The object that uses the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 的对象。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>Allocates a <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /&gt;</ph> handle for the specified object.</source>
          <target state="translated">为指定的对象分配 <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /&gt;</ph> 句柄。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> that protects the object from garbage collection.</source>
          <target state="translated">一个新的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>，它保护对象不被垃圾回收。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> must be released with <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> when it is no longer needed.</source>
          <target state="translated">当不再需要 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 时，必须通过 <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> 将其释放。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Normal&gt;</ph> handles are opaque, which means that you cannot resolve the address of the object it contains through the handle.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Normal&gt;</ph> 句柄是对象的不透明的这意味着你无法解析它包含通过该句柄的地址。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">下面的示例演示<ph id="ph1">`App`</ph>创建托管的对象使用的句柄类<ph id="ph2">`GCHandle.Alloc`</ph>方法，以防止将托管的对象收集。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">调用<ph id="ph1">`EnumWindows`</ph>方法将传递委托与托管的对象 （两者都声明为托管类型，但不是显示），并将强制转换的句柄<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">非托管的函数将类型作为回调函数的参数传递回调用方。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>An instance with nonprimitive (non-blittable) members cannot be pinned.</source>
          <target state="translated">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>The object that uses the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 的对象。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandleType" /&gt;</ph> values, indicating the type of <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> to create.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandleType" /&gt;</ph> 值之一，指示要创建的 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>Allocates a handle of the specified type for the specified object.</source>
          <target state="translated">为指定的对象分配指定类型的句柄。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> of the specified type.</source>
          <target state="translated">指定的类型的新 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> must be released with <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> when it is no longer needed.</source>
          <target state="translated">当不再需要 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 时，必须通过 <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> 将其释放。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>An instance with nonprimitive (non-blittable) members cannot be pinned.</source>
          <target state="translated">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">要与当前 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象进行比较的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object is equal to the current <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">确定指定的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象是否等同于当前的 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object is equal to the current <ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果指定的 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象等于当前的 <ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source>Two <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> objects are equal if they point to the same memory handle.</source>
          <target state="translated">两个<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>对象是否相等，如果它们指向同一内存句柄。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>Releases a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The caller must ensure that for a given handle, <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> is called only once.</source>
          <target state="translated">调用方必须确保为给定句柄<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph>只能调用一次。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">下面的示例演示<ph id="ph1">`App`</ph>创建托管的对象使用的句柄类<ph id="ph2">`GCHandle.Alloc`</ph>方法，以防止将托管的对象收集。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">调用<ph id="ph1">`EnumWindows`</ph>方法将传递委托与托管的对象 （两者都声明为托管类型，但不是显示），并将强制转换的句柄<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">非托管的函数将类型作为回调函数的参数传递回调用方。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The handle was freed or never initialized.</source>
          <target state="translated">该句柄已被释放或从未初始化。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> handle to a managed object to create a <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object from.</source>
          <target state="translated">某个托管对象的 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 句柄，将从该句柄创建 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object created from a handle to a managed object.</source>
          <target state="translated">返回从某个托管对象的句柄创建的新 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object that corresponds to the value parameter.</source>
          <target state="translated">对应于值参数的新的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>The following code example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`App`</ph>创建托管的对象使用的句柄类<ph id="ph2">`GCHandle.Alloc`</ph>方法，以防止将托管的对象收集。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> object.</source>
          <target state="translated">调用<ph id="ph1">`EnumWindows`</ph>方法将传递委托与托管的对象 （两者都声明为托管类型，但不是显示），并将强制转换的句柄<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">非托管的函数将类型作为回调函数的参数传递回调用方。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>The value of the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter is <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 参数的值为 <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
          <source>Returns an identifier for the current <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">返回当前 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象的标识符。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
          <source>An identifier for the current <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象的标识符。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.GetHashCode%2A&gt;</ph> method returns an integer representation of the internal memory handle encapsulated by the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> structure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.GetHashCode%2A&gt;</ph>方法返回的整数表示形式封装的内部内存句柄<ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>结构。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>Gets a value indicating whether the handle is allocated.</source>
          <target state="translated">获取一个值，该值指示是否分配了句柄。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is allocated; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果分配了句柄，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>Use this property when using <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> handles to determine if the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> is still available.</source>
          <target state="translated">使用此属性时使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph>句柄来确定如果<ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>仍然可用。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>When the garbage collector collects the object, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> handle can still be resurrected in the finalizer.</source>
          <target state="translated">当垃圾回收器收集对象，<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph>仍在终结器中重新恢复句柄。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>In that case, the handle is not allocated (it is lost when the garbage collector attempts to collect the object), even though the target object is valid.</source>
          <target state="translated">在这种情况下，不分配了句柄 （它位于丢失垃圾回收器尝试回收该对象时），即使目标对象是否有效。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">与 <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept> 参数进行比较的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">与 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 参数进行比较的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>Returns a value indicating whether two <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> objects are equal.</source>
          <target state="translated">返回一个值，该值指示两个 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象是否相等。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="a" /&gt;</ph> and <ph id="ph3">&lt;paramref name="b" /&gt;</ph> parameters are equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="a" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="b" /&gt;</ph> 参数相等，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此运算符的等效方法是<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Converts the value of a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to another type.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象的值转换为其他类型。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that indicates the handle for which the conversion is required.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>，它指示需要该转换的句柄。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> is stored using an internal integer representation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 以内部整数表示形式存储。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>The stored <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object using an internal integer representation.</source>
          <target state="translated">使用内部整数表示形式的已存储 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>This method allows you to retrieve a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> from an integer value.</source>
          <target state="translated">此方法允许您检索<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>从整数值。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> for which the integer is required.</source>
          <target state="translated">需要该整数的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> is stored using an internal integer representation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 以内部整数表示形式存储。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>The integer value.</source>
          <target state="translated">整数值。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>This method can be used to retrieve the integer value from a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>.</source>
          <target state="translated">此方法可以用于检索从整数值<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">与 <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept> 参数进行比较的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">与 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 参数进行比较的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>Returns a value indicating whether two <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> objects are not equal.</source>
          <target state="translated">返回一个值，该值指示两个 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象是否不相等。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="a" /&gt;</ph> and <ph id="ph3">&lt;paramref name="b" /&gt;</ph> parameters are not equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="a" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="b" /&gt;</ph> 参数相等，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此运算符的等效方法是<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>Gets or sets the object this handle represents.</source>
          <target state="translated">获取或设置该句柄表示的对象。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The object this handle represents.</source>
          <target state="translated">该句柄表示的对象。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">下面的示例演示<ph id="ph1">`App`</ph>创建托管的对象使用的句柄类<ph id="ph2">`GCHandle.Alloc`</ph>方法，以防止将托管的对象收集。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">调用<ph id="ph1">`EnumWindows`</ph>方法将传递委托与托管的对象 （两者都声明为托管类型，但不是显示），并将强制转换的句柄<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">非托管的函数将类型作为回调函数的参数传递回调用方。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The handle was freed, or never initialized.</source>
          <target state="translated">该句柄被释放，或从未初始化。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to retrieve an internal integer representation from.</source>
          <target state="translated">要从中检索内部整数表示形式的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>Returns the internal integer representation of a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象的内部整数表示形式。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object that represents a <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">表示 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> 对象的 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>The following code example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`App`</ph>创建托管的对象使用的句柄类<ph id="ph2">`GCHandle.Alloc`</ph>方法，以防止将托管的对象收集。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> object.</source>
          <target state="translated">调用<ph id="ph1">`EnumWindows`</ph>方法将传递委托与托管的对象 （两者都声明为托管类型，但不是显示），并将强制转换的句柄<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">非托管的函数将类型作为回调函数的参数传递回调用方。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>