<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeIdentifierAttribute.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e3595c96371b89df9d1c67c77fd50fdaaf4ba7f7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3595c96371b89df9d1c67c77fd50fdaaf4ba7f7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
          <source>Provides support for type equivalence.</source>
          <target state="translated">为类型等效提供支持。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph> attribute is primarily emitted by compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph>属性主要由编译器发出。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
          <source>It serves two purposes:</source>
          <target state="translated">它有两个用途：</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
          <source>For all imported types, it indicates that the type is intended to be used for type equivalence.</source>
          <target state="translated">对于所有导入类型，它指示类型旨在用于类型等效性。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
          <source>For types that don’t have GUIDs in their type library, it has a constructor that takes two strings (<ph id="ph1">`scope`</ph> and <ph id="ph2">`identifier`</ph>).</source>
          <target state="translated">对于不具有其类型库中的 Guid 的类型，它具有构造函数采用两个字符串 (<ph id="ph1">`scope`</ph>和<ph id="ph2">`identifier`</ph>)。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
          <source>These are combined into a GUID and become the key that is used for type equivalence.</source>
          <target state="translated">这些组合成一个 GUID，并成为了用于类型等效性的键。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
          <source>Type equivalence is discussed in the <ph id="ph1">&lt;xref:System.Type.IsEquivalentTo%2A?displayProperty=nameWithType&gt;</ph> topic.</source>
          <target state="translated">中介绍了类型等效性<ph id="ph1">&lt;xref:System.Type.IsEquivalentTo%2A?displayProperty=nameWithType&gt;</ph>主题。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /&gt;</ph> class.</source>
          <target state="translated">创建 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /&gt;</ph> class.</source>
          <target state="translated">创建 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
          <source>This constructor overload does not accept parameters.</source>
          <target state="translated">此构造函数重载不接受参数。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
          <source>Therefore, interfaces that have this attribute use the type's GUID and simple name to establish type equivalence.</source>
          <target state="translated">因此，具有此属性的接口使用该类型的 GUID 和简单名称建立类型等效性。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
          <source>The first type equivalence string.</source>
          <target state="translated">第一个类型等效性字符串。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
          <source>The second type equivalence string.</source>
          <target state="translated">第二个类型等效性字符串。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /&gt;</ph> class with the specified scope and identifier.</source>
          <target state="translated">用指定的范围和标识符创建 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">`scope`</ph> and <ph id="ph2">`identifier`</ph> parameters are used to establish type equivalence.</source>
          <target state="translated"><ph id="ph1">`scope`</ph>和<ph id="ph2">`identifier`</ph>参数用于建立类型等效性。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
          <source>They are combined into a GUID and become the key that is used for type equivalence.</source>
          <target state="translated">它们组合成一个 GUID，并成为了用于类型等效性的键。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
          <source>This constructor is particularly useful for types that do not have GUIDs in their type library.</source>
          <target state="translated">此构造函数很适合用于不具有其类型库中的 Guid 的类型。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph> class internally maintains the <ph id="ph2">`scope`</ph> and <ph id="ph3">`identifier`</ph> parameters as private members.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph>类在内部维护<ph id="ph2">`scope`</ph>和<ph id="ph3">`identifier`</ph>作为私有成员的参数。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
          <source>Gets the value of the <ph id="ph1">&lt;paramref name="identifier" /&gt;</ph> parameter that was passed to the <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /&gt;</ph> constructor.</source>
          <target state="translated">获取传递给 <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /&gt;</ph> 构造函数的 <ph id="ph1">&lt;paramref name="identifier" /&gt;</ph> 参数的值。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
          <source>The value of the constructor's <ph id="ph1">&lt;paramref name="identifier" /&gt;</ph> parameter.</source>
          <target state="translated">构造函数的 <ph id="ph1">&lt;paramref name="identifier" /&gt;</ph> 参数的值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
          <source>Gets the value of the <ph id="ph1">&lt;paramref name="scope" /&gt;</ph> parameter that was passed to the <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /&gt;</ph> constructor.</source>
          <target state="translated">获取传递给 <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /&gt;</ph> 构造函数的 <ph id="ph1">&lt;paramref name="scope" /&gt;</ph> 参数的值。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
          <source>The value of the constructor's <ph id="ph1">&lt;paramref name="scope" /&gt;</ph> parameter.</source>
          <target state="translated">构造函数的 <ph id="ph1">&lt;paramref name="scope" /&gt;</ph> 参数的值。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>