<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeLibExporterFlags.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac594b250d1aad80183d587a331761e29537a3162c3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94b250d1aad80183d587a331761e29537a3162c3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.TypeLibExporterFlags">
          <source>Indicates how a type library should be produced.</source>
          <target state="translated">指示应该如何生成类型库。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.TypeLibExporterFlags">
          <source>Used with <ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib%2A&gt;</ph>.</source>
          <target state="translated">与使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.CallerResolvedReferences">
          <source>Allows the caller to explicitly resolve type library references without consulting the registry.</source>
          <target state="translated">允许调用方无需参考注册表便可显式解析类型库引用。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.ExportAs32Bit">
          <source>When compiling on a 64-bit computer, specifies that the Type Library Exporter (Tlbexp.exe) generates a 32-bit type library.</source>
          <target state="translated">在 64 位计算机上编译时，指定类型库导出程序 (Tlbexp.exe) 生成一个 32 位的类型库。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.ExportAs32Bit">
          <source>All data types are transformed appropriately.</source>
          <target state="translated">所有数据类型都将进行相应转换。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.ExportAs64Bit">
          <source>When compiling on a 32-bit computer, specifies that the Type Library Exporter (Tlbexp.exe) generates a 64-bit type library.</source>
          <target state="translated">在 32 位计算机上编译时，指定类型库导出程序 (Tlbexp.exe) 生成一个 64 位的类型库。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.ExportAs64Bit">
          <source>All data types are transformed appropriately.</source>
          <target state="translated">所有数据类型都将进行相应转换。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.None">
          <source>Specifies no flags.</source>
          <target state="translated">不指定任何标志。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.None">
          <source>This is the default.</source>
          <target state="translated">这是默认设置。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.OldNames">
          <source>When exporting type libraries, the .NET Framework resolves type name conflicts by decorating the type with the name of the namespace; for example, <ph id="ph1">&lt;see langword="System.Windows.Forms.HorizontalAlignment" /&gt;</ph> is exported as <ph id="ph2">&lt;see langword="System_Windows_Forms_HorizontalAlignment" /&gt;</ph>.</source>
          <target state="translated">导出类型库时，.NET Framework 通过使用命名空间的名称修饰类型来解决类型名称冲突；例如，<ph id="ph1">&lt;see langword="System.Windows.Forms.HorizontalAlignment" /&gt;</ph> 导出为 <ph id="ph2">&lt;see langword="System_Windows_Forms_HorizontalAlignment" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.OldNames">
          <source>When there is a conflict with the name of a type that is not visible from COM, the .NET Framework exports the undecorated name.</source>
          <target state="translated">如果与在 COM 不可见的类型的名称有冲突，则 .NET Framework 导出未经修饰的名称。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.OldNames">
          <source>Set the <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.TypeLibExporterFlags.OldNames" /&gt;</ph> flag or use the <ph id="ph2">&lt;see langword="/oldnames" /&gt;</ph> option in the Type Library Exporter (Tlbexp.exe) to force the .NET Framework to export the decorated name.</source>
          <target state="translated">设置 <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.TypeLibExporterFlags.OldNames" /&gt;</ph> 标志或使用类型库导出程序 (Tlbexp.exe) 中的 <ph id="ph2">&lt;see langword="/oldnames" /&gt;</ph> 选项来强制 .NET Framework 导出修饰过的名称。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.OldNames">
          <source>Note that exporting the decorated name was the default behavior in versions prior to the .NET Framework version 2.0.</source>
          <target state="translated">注意，在 .NET Framework 2.0 版之前的版本中，导出修饰过的名称是默认行为。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.OnlyReferenceRegistered">
          <source>Exports references to types that were imported from COM as <ph id="ph1">&lt;see langword="IUnknown" /&gt;</ph> if the type does not have a registered type library.</source>
          <target state="translated">如果从 COM 导入的类型没有注册的类型库，则将对此类型的引用导出为 <ph id="ph1">&lt;see langword="IUnknown" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.TypeLibExporterFlags.OnlyReferenceRegistered">
          <source>Set this flag when you want the type library exporter to look for dependent types in the registry rather than in the same directory as the input assembly.</source>
          <target state="translated">如果要让类型库导出程序在注册表中而不是在与输入程序集相同的目录中查找依赖类型，则设置此标志。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>