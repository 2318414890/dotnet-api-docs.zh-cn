<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ClassInterfaceAttribute.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac522885b9e9704325229ae4e4688727e3be90e630f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22885b9e9704325229ae4e4688727e3be90e630f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.</source>
          <target state="translated">指示在完全生成某个接口后为要向 COM 公开的类生成的类接口类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>You can apply this attribute to assemblies or classes.</source>
          <target state="translated">可以将此特性应用于程序集或多个类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>This attribute controls whether the Type Library Exporter (Tlbexp.exe) automatically generates a class interface for the attributed class.</source>
          <target state="translated">此属性控制是否类型库导出程序 (Tlbexp.exe) 自动生成特性化类的类接口。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>A class interface carries the same name as the class itself, but the name is prefixed with an underscore.</source>
          <target state="translated">类接口执行相同的名称和类本身，但名称的前面带下划线。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>When exposed, the class interface contains all the <ph id="ph1">`public`</ph>, non- <ph id="ph2">`static`</ph> members of the managed class, including members inherited from its base class.</source>
          <target state="translated">类接口公开时，包含所有<ph id="ph1">`public`</ph>、 非-<ph id="ph2">`static`</ph>托管类，包括成员的成员从其基类继承。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Managed classes cannot access a class interface and have no need to as they can access the class members directly.</source>
          <target state="translated">托管的类不能访问的类接口和也无需，因为它们可以直接访问类成员。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Tlbexp.exe generates a unique interface identifier (IID) for the class interface.</source>
          <target state="translated">Tlbexp.exe 生成类接口的唯一的接口标识符 (IID)。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Class interfaces can be dual or dispatch-only interfaces.</source>
          <target state="translated">类接口可以是双重或仅支持调度的接口。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Optionally, you can suppress the generation of the class interface and provide a custom interface instead.</source>
          <target state="translated">或者，可以取消生成的类接口，并改为提供自定义接口。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>You expose or suppress a class interface by specifying a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType?displayProperty=nameWithType&gt;</ph> enumeration member.</source>
          <target state="translated">公开或通过指定取消类接口<ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType?displayProperty=nameWithType&gt;</ph>枚举成员。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>When you apply <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> to an assembly, the attribute pertains to all classes in the assembly unless the individual classes override the setting with their own attribute.</source>
          <target state="translated">当你将<ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph>到程序集中，该属性与在程序集中的所有类除非单个类重写其自己的属性的设置。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Although class interfaces eliminate the task of explicitly defining interfaces for each class, their use in production applications is strongly discouraged.</source>
          <target state="translated">尽管类接口消除显式定义的每个类的接口的任务，在生产应用程序中的使用它们是强烈建议不要使用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Dual class interfaces allow clients to bind to a specific interface layout that is subject to change as the class evolves.</source>
          <target state="translated">双类接口允许客户端将绑定到特定的接口布局会发生更改，如类的发展。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>For example, consider a managed class that exposes a class interface to COM clients.</source>
          <target state="translated">例如，考虑将类接口公开到 COM 客户端的托管的类。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>The first version of the class contains methods <ph id="ph1">`North`</ph> and <ph id="ph2">`South`</ph>.</source>
          <target state="translated">类的第一个版本包含方法<ph id="ph1">`North`</ph>和<ph id="ph2">`South`</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>An unmanaged client can bind to the class interface, which provides <ph id="ph1">`North`</ph> as the first method in the class interface and method <ph id="ph2">`South`</ph> as the second method.</source>
          <target state="translated">非托管客户端可以将绑定到类接口，从而提供<ph id="ph1">`North`</ph>作为第一种方法中的类接口和方法<ph id="ph2">`South`</ph>作为第二种方法。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Now consider the next version of the class, which has a new method, <ph id="ph1">`East`</ph>, inserted between methods <ph id="ph2">`North`</ph> and <ph id="ph3">`South`</ph>.</source>
          <target state="translated">现在请考虑下一版本的类，该类有一个新方法，<ph id="ph1">`East`</ph>方法之间插入<ph id="ph2">`North`</ph>和<ph id="ph3">`South`</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Unmanaged clients that try to bind to the new class through the old class interface end up calling method <ph id="ph1">`East`</ph> when they intend to call method <ph id="ph2">`South`</ph>, because the positioning of methods within the interface has changed.</source>
          <target state="translated">尝试将绑定到通过旧的类接口的新类的非托管的客户端在调用方法<ph id="ph1">`East`</ph>当他们想要调用方法<ph id="ph2">`South`</ph>，因为接口内方法的位置已更改。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Moreover, any change to the layout of a base class also affects the layout of the class interface for all derived classes.</source>
          <target state="translated">此外，对基类的布局的任何更改还会影响所有的派生类的类接口的布局。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Managed clients, which bind directly to classes, do not exhibit the same versioning problems.</source>
          <target state="translated">管理客户端，哪些绑定直接到类，不显示的相同的版本控制问题。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>For specific guidelines on using a class interface, see <bpt id="p1">[</bpt>COM Callable Wrapper<ept id="p1">](~/docs/framework/interop/com-callable-wrapper.md)</ept>.</source>
          <target state="translated">有关使用类接口的特定指南，请参阅<bpt id="p1">[</bpt>COM 可调用包装<ept id="p1">](~/docs/framework/interop/com-callable-wrapper.md)</ept>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> always applies to imported classes the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.None?displayProperty=nameWithType&gt;</ph> enumeration member to indicate that existing COM classes never expose managed interfaces.</source>
          <target state="translated"><bpt id="p1">[</bpt>Tlbimp.exe （类型库导入程序）<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept>始终将应用到导入类<ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.None?displayProperty=nameWithType&gt;</ph>枚举成员，表示现有的 COM 类从不公开托管接口。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>The following example shows how to apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> with the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph> value <ph id="ph3">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch&gt;</ph>, which generates an <ph id="ph4">`IDispatch`</ph> interface for <ph id="ph5">`MyClass`</ph>.</source>
          <target state="translated">下面的示例演示如何将应用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph>与<ph id="ph2">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph>值<ph id="ph3">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch&gt;</ph>，这将生成<ph id="ph4">`IDispatch`</ph>接口<ph id="ph5">`MyClass`</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
          <source>Describes the type of interface that is generated for a class.</source>
          <target state="translated">描述为类生成的接口的类型。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> enumeration value.</source>
          <target state="translated">使用指定的 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 枚举值初始化 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
          <source>This constructor takes an underlying 16-bit signed integer that represents each <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph> enumeration member.</source>
          <target state="translated">此构造函数采用的基础的 16 位有符号的整数来表示每个<ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph>枚举成员。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> uses this constructor.</source>
          <target state="translated"><bpt id="p1">[</bpt>Tlbimp.exe （类型库导入程序）<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept>使用此构造函数。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> values that describes the type of interface that is generated for a class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 值之一，描述为类生成的接口的类型。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> enumeration member.</source>
          <target state="translated">使用指定的 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 枚举成员初始化 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
          <source>For readable code that is less prone to error, always use this constructor.</source>
          <target state="translated">有关可读的代码是更不易出错，请始终使用此构造函数。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> value that describes which type of interface should be generated for the class.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 值，该值描述应为该类生成的接口的类型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> value that describes which type of interface should be generated for the class.</source>
          <target state="translated">描述应该为该类生成哪种类型的接口的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 值。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>