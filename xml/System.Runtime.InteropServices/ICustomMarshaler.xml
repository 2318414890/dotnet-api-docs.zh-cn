<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="39f080201b9247188e6562c5fd981137ce4f6fec" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36538226" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用于处理方法调用的自定义包装器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 封送处理程序提供的功能的旧和新的接口之间的桥梁。 自定义封送处理提供以下好处：  
  
-   它使客户端应用程序被设计为可与旧接口以实现新接口的服务器与一同使用。  
  
-   它使客户端生成的应用程序可以使用新接口用于实现旧接口的服务器。  
  
 如果你有一个接口，这带来了不同的封送处理行为或以不同的方式公开到组件对象模型 (COM)，你可以设计而不是使用互操作封送处理程序自定义封送处理程序。 通过使用自定义封送处理程序，你可以尽量减少新的.NET Framework 组件和现有的 COM 组件之间的区别。  
  
 例如，假设你正在开发的托管的接口名`INew`。 当通过标准的 COM 可调用包装 (CCW) 情况下，向 COM 公开此接口时，它与托管接口具有相同的方法，并使用互操作封送处理程序中内置的封送处理规则。 现在，假设的已知 COM 接口调用`IOld`已经提供了与相同的功能`INew`接口。 通过设计时自定义封送处理程序，你可以提供的非托管的实现`IOld`，只需将调用委托给的托管实现`INew`接口。 因此，自定义封送处理程序作为托管和非托管接口之间的桥梁。  
  
> [!NOTE]
>  当从托管代码调用到非托管代码仅支持调度的接口上时，不会调用自定义封。  
  
## <a name="defining-the-marshaling-type"></a>定义封送处理类型  
 你可以构建自定义封送处理程序之前，必须定义将被封送托管和非托管接口。 通常，这些接口执行相同的功能，但以不同的方式公开给托管和非托管对象。  
  
 托管的编译器生成的元数据，从托管的接口，并生成接口看起来像任何其他托管的接口。 下面的示例演示一个典型的接口。  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 定义在接口定义语言 (IDL) 的非托管的类型，并使用 Microsoft 接口定义语言 (MIDL) 编译器进行编译。 你的库语句中定义该接口，并将其分配使用通用唯一标识符 (UUID) 属性的接口 ID，如以下示例所示。  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 MIDL 编译器将产生多个输出文件。 如果接口在 Old.idl 中定义的定义输出文件 Old_i.c`const`变量与接口标识符 (IID) 的接口，如以下示例所示。  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Midl，也会产生 Old.h 文件。 它包含可以在 c + + 源代码中包括的接口的 c + + 定义。  
  
## <a name="implementing-the-icustommarshaler-interface"></a>实现 ICustomMarshaler 接口  
 你自定义封送处理程序必须实现<xref:System.Runtime.InteropServices.ICustomMarshaler>接口，以提供给运行时适当的包装器。  
  
 下面的 C# 代码显示由所有自定义封必须实现的基接口。  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler>接口包含提供转换支持、 清理支持以及有关数据要封送处理信息的方法。  
  
|类型的操作|ICustomMarshaler 方法|描述|  
|-----------------------|-----------------------------|-----------------|  
|（从本机托管代码） 的转换|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|将指向本机数据的封送到托管对象。 此方法返回的自定义运行时可调用包装 (RCW)，但可以封送作为参数传递的非托管的接口。 封送处理程序应返回该类型的自定义 RCW 的实例。|  
|（从托管到本机代码） 的转换|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|将托管的对象封送到本机数据的指针。 此方法返回的自定义 COM 可调用包装 (CCW) 可以封送作为参数传递的托管的接口。 封送处理程序应返回该类型的自定义的 CCW 的实例。|  
|清理 （本机代码）|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|使封送处理程序以进行本机数据 (CCW) 返回的清除<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法。|  
|清理 （托管代码）|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|使该封送处理清理返回托管数据 (RCW)<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法。|  
|（有关本机代码） 的信息|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|返回要封送处理的非托管数据的大小。|  
  
### <a name="conversion"></a>转换  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 将指向本机数据的封送到托管对象。 此方法返回的自定义运行时可调用包装 (RCW)，但可以封送作为参数传递的非托管的接口。 封送处理程序应返回该类型的自定义 RCW 的实例。  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 将托管的对象封送到本机数据的指针。 此方法返回的自定义 COM 可调用包装 (CCW) 可以封送作为参数传递的托管的接口。 封送处理程序应返回该类型的自定义的 CCW 的实例。  
  
### <a name="cleanup"></a>清理  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 使封送处理程序以进行本机数据 (CCW) 返回的清除<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法。  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 使该封送处理清理返回托管数据 (RCW)<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法。  
  
### <a name="size-information"></a>大小信息  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 返回要封送处理的非托管数据的大小。  
  
## <a name="implementing-the-getinstance-method"></a>实现 GetInstance 方法  
 除了实现<xref:System.Runtime.InteropServices.ICustomMarshaler>接口，必须实现自定义封`static`调用方法`GetInstance`接受<xref:System.String>作为参数且其返回类型为<xref:System.Runtime.InteropServices.ICustomMarshaler>。 这`static`由公共语言运行时的 COM 互操作层，若要实例化自定义封送处理程序的实例调用方法。 字符串传递给`GetInstance`是该方法可用于自定义返回自定义封送处理程序 cookie。  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>应用 MarshalAsAttribute  
 若要使用自定义封送处理程序，必须应用<xref:System.Runtime.InteropServices.MarshalAsAttribute>属性设为的参数或正封送的字段。  
  
 你还必须传递<xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType>枚举值到<xref:System.Runtime.InteropServices.MarshalAsAttribute>构造函数。 此外，还必须指定<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>字段的命名参数，则下列选项之一：  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> （必需）： 自定义封送处理程序的程序集限定名称。 名称应包含的命名空间和类的自定义封送处理程序。 如果在使用中的程序集未定义自定义封送处理程序，必须指定在其中定义程序集的名称。  
  
    > [!NOTE]
    >  你可以使用<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>字段而不是<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>字段。 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> 将可以更轻松地指定的类型。  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> （可选）： 传递给自定义封送处理程序的 cookie。 Cookie 可用于向封送处理程序中提供的其他信息。 例如，如果同一封送处理程序用于提供大量的包装，cookie 将标识特定的包装。 Cookie 传递给`GetInstance`封送处理程序方法。  
  
 <xref:System.Runtime.InteropServices.MarshalAsAttribute>特性标识自定义封送处理程序，使其可以激活适当的包装。 然后，公共语言运行时的互操作服务检查该属性，并创建要封送处理的自变量 （参数或字段） 需求的自定义封送处理程序的第一个时间。  
  
 然后，运行时调用<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>和<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>上激活正确的包装，以处理调用自定义封送处理程序的方法。  
  
## <a name="using-a-custom-marshaler"></a>使用自定义封送处理程序  
 自定义封送处理程序完成后，你可以将其用作自定义包装特定类型。 下面的示例演示的定义`IUserData`托管的接口：  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 在下面的示例中，`IUserData`接口使用`NewOldMarshaler`自定义封送处理程序以启用非托管客户端应用程序传递`IOld`接口`DoSomeStuff`方法。 托管的说明`DoSomeStuff`方法采用`INew`接口，如前面的示例中所示，而非托管的版本的`DoSomeStuff`采用`IOld`的接口指针，如下面的示例中所示。  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 通过导出的托管的定义生成的类型库`IUserData`而不是标准定义此示例中所示的非托管定义。 <xref:System.Runtime.InteropServices.MarshalAsAttribute>应用于属性`INew`自变量中的托管定义`DoSomeStuff`方法指示的参数使用了自定义封送处理程序，如以下示例所示。  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 在前面的示例中，第一个参数提供给<xref:System.Runtime.InteropServices.MarshalAsAttribute>属性是<xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType>枚举值`UnmanagedType.CustomMarshaler`。  
  
 第二个参数是<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>字段，它提供的自定义封送处理程序的程序集限定名称。 此名称组成的命名空间和类的自定义封送处理程序 (`MarshalType="MyCompany.NewOldMarshaler"`)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">要销毁的托管对象。</param>
        <summary>不再需要时执行必要的托管数据的清除。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">指向要销毁的非托管数据的指针。</param>
        <summary>不再需要时执行必要的非托管数据的清除。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回要封送的本机数据的大小。</summary>
        <returns>本机数据的大小（以字节为单位）。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">要转换的托管对象。</param>
        <summary>将托管数据转换为非托管数据。</summary>
        <returns>指向托管对象的 COM 视图的指针。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">指向要包装的非托管数据的指针。</param>
        <summary>将非托管数据转换为托管数据。</summary>
        <returns>表示 COM 数据的托管视图的对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>