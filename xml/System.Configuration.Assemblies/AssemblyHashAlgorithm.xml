<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AssemblyHashAlgorithm.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5060dff181314dfc69c0d9ba87fc12a49fb4e75cb.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">060dff181314dfc69c0d9ba87fc12a49fb4e75cb</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source>Specifies all the hash algorithms used for hashing files and for generating the strong name.</source>
          <target state="translated">指定用于哈希文件和用于生成强名称的所有哈希算法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source>A <ph id="ph1">`hash function``H`</ph> is a transformation that takes an input <ph id="ph2">`m`</ph> and returns a fixed-size string, which is called the hash value <ph id="ph3">`h`</ph> (that is, <ph id="ph4">`h`</ph><ph id="ph5"> = </ph><ph id="ph6">`H`</ph> (<ph id="ph7">`m`</ph>)).</source>
          <target state="translated">A<ph id="ph1">`hash function``H`</ph>是采用一个输入一个转换<ph id="ph2">`m`</ph>并返回一个固定大小的字符串，它调用的哈希值<ph id="ph3">`h`</ph>(即， <ph id="ph4">`h`</ph> <ph id="ph5"> = </ph> <ph id="ph6">`H`</ph> (<ph id="ph7">`m`</ph>))。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source>Hash functions with just this property have a variety of general computational uses, but when employed in cryptography, the hash functions are usually chosen to have some additional properties.</source>
          <target state="translated">仅带有此属性的哈希函数具有一系列的常规计算用途，但当用于加密，通常选择哈希函数可以具有一些附加的属性。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source>The basic requirements for a cryptographic hash function are:</source>
          <target state="translated">加密哈希函数的基本要求如下：</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source>The input can be of any length.</source>
          <target state="translated">输入可以是任意长度。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source>The output has a fixed length.</source>
          <target state="translated">输出具有固定的长度。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source><ph id="ph1">`H`</ph> (<ph id="ph2">`x)`</ph> is relatively easy to compute for any given x.</source>
          <target state="translated"><ph id="ph1">`H`</ph> (<ph id="ph2">`x)`</ph>相对轻松地计算对于任何给定的 x。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source><ph id="ph1">`H`</ph> (<ph id="ph2">`x`</ph>) is one-way.</source>
          <target state="translated"><ph id="ph1">`H`</ph> (<ph id="ph2">`x`</ph>) 是单向的。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source><ph id="ph1">`H`</ph> (<ph id="ph2">`x`</ph>) is collision-free.</source>
          <target state="translated"><ph id="ph1">`H`</ph> (<ph id="ph2">`x`</ph>) 是避免了冲突。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source>The hash value represents concisely the longer message or document from which it was computed; this value is called the message digest.</source>
          <target state="translated">哈希值表示确切地更长的消息或从其计算它; 的文档此值称为消息摘要。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source>You can think of a message digest as a digital fingerprint of the larger document.</source>
          <target state="translated">可以将消息摘要视为较大的文档的数字指纹。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
          <source>Examples of well-known hash functions are MD2 and SHA.</source>
          <target state="translated">已知的哈希函数的示例包括 MD2 和 SHA。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
          <source>Retrieves the MD5 message-digest algorithm.</source>
          <target state="translated">检索 MD5 消息摘要算法。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
          <source>MD5 was developed by Rivest in 1991.</source>
          <target state="translated">MD5 是 Rivest 在 1991 年开发的。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
          <source>It is basically MD4 with safety-belts and while it is slightly slower than MD4, it helps provide more security.</source>
          <target state="translated">它与 MD4 基本相同，只是增加了安全性。它虽然比 MD4 稍慢一些，但更安全。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
          <source>The algorithm consists of four distinct rounds, which has a slightly different design from that of MD4.</source>
          <target state="translated">该算法包括四个不同的步骤，其设计与 MD4 的略有不同。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
          <source>Message-digest size, as well as padding requirements, remain the same.</source>
          <target state="translated">消息摘要的大小以及填充要求保持不变。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
          <source>A mask indicating that there is no hash algorithm.</source>
          <target state="translated">一个掩码，它指示无哈希算法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
          <source>If you specify <ph id="ph1">&lt;see langword="None" /&gt;</ph> for a multi-module assembly, the common language runtime defaults to the SHA1 algorithm, since multi-module assemblies need to generate a hash.</source>
          <target state="translated">如果为多模块程序集指定 <ph id="ph1">&lt;see langword="None" /&gt;</ph>，则公共语言运行时默认采用 SHA1 算法，因为多模块程序集需要生成哈希。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1">
          <source>A mask used to retrieve a revision of the Secure Hash Algorithm that corrects an unpublished flaw in SHA.</source>
          <target state="translated">用于检索“安全哈希算法”修订版的掩码，该修订版更正了 SHA 中的一个未发布的错误。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA256">
          <source>A mask used to retrieve a version of the Secure Hash Algorithm with a hash size of 256 bits.</source>
          <target state="translated">用于检索“安全哈希算法”的版本的掩码，其哈希值大小为 256 位。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA384">
          <source>A mask used to retrieve a version of the Secure Hash Algorithm with a hash size of 384 bits.</source>
          <target state="translated">用于检索“安全哈希算法”的版本的掩码，其哈希值大小为 384 位。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA512">
          <source>A mask used to retrieve a version of the Secure Hash Algorithm with a hash size of 512 bits.</source>
          <target state="translated">用于检索“安全哈希算法”的版本的掩码，其哈希值大小为 512 位。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>