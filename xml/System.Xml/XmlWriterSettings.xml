<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3708673d1f08f8830ae66ec198637d8f7a756e30" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061568" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定在由 <see cref="T:System.Xml.XmlWriter" /> 方法创建的 <see cref="Overload:System.Xml.XmlWriter.Create" /> 对象上支持的一组功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter.Create%2A>方法是用于获取的首选的机制<xref:System.Xml.XmlWriter>实例。 <xref:System.Xml.XmlWriter.Create%2A>方法使用<xref:System.Xml.XmlWriterSettings>类，以指定要在中实现的功能<xref:System.Xml.XmlWriter>创建的对象。  
  
> [!NOTE]
>  如果你使用<xref:System.Xml.XmlWriter>对象<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法，则应使用<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A>属性来获取<xref:System.Xml.XmlWriterSettings>具有正确设置的对象。 这样可以确保所创建的 <xref:System.Xml.XmlWriter> 对象的输出设置是正确的。  
  
 <xref:System.Xml.XmlWriterSettings>类提供了属性该控件的数据一致性和输出格式。  
  
 有关数据一致性检查和自动更正，使用这些属性：  
  
|Property|指定|“值”|默认|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|是否要检查的字符合法的 XML 中字符集，由 W3C 定义。|`true` 或 `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|是否要检查输出的格式正确的 XML 1.0 文档或片段。|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> （文档级别）、 <xref:System.Xml.ConformanceLevel.Fragment> （片段级别），或<xref:System.Xml.ConformanceLevel.Auto>（自动检测）|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> （文档级一致性）|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|是否将结束标记添加到闭合的所有元素时<xref:System.Xml.XmlWriter.Close%2A>调用方法。|`true` 或 `false`|`true`|  
  
 若要指定输出格式，使用这些属性：  
  
|Property|指定|“值”|默认|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|使用编码的文本。|<xref:System.Text.Encoding?displayProperty=nameWithType> 值|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|是否缩进元素|`true` 或 `false`|`false` （没有缩进）|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|字符缩进时要使用字符串 (时使用<xref:System.Xml.XmlWriterSettings.Indent%2A>设置为`true`)。|String|两个空格|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|要用于换行符的字符串。|String|`\r\n` （回车符、 换行符）|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|如何处理换行符。|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType> 值： <xref:System.Xml.NewLineHandling.Entitize> （规范化） <xref:System.Xml.NewLineHandling.Replace> （替换），或<xref:System.Xml.NewLineHandling.None>（保留不变）|<xref:System.Xml.NewLineHandling.Replace> (将替换为指定的字符<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|是否在单独的行上写入属性 (没有时生效<xref:System.Xml.XmlWriterSettings.Indent%2A>是`false`)。|`true` 或 `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|是否写入 XML 声明。|`true` 或 `false`|`false`|  
  
   
  
## Examples  
 下面的示例创建<xref:System.Xml.XmlWriter>，写入 XML 文件，并在新行上写入每个属性。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 该示例产生下面的输出：  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlWriterSettings" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示的实例的初始属性值<xref:System.Xml.XmlWriterSettings>。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|两个空格。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` （回车符、 换行符）。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
   
  
## Examples  
 下面的示例创建<xref:System.Xml.XmlWriter>用于缩进制表符的对象。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可对特定的 <see cref="T:System.Xml.XmlWriter" /> 实例使用异步 <see cref="T:System.Xml.XmlWriter" /> 方法。</summary>
        <value>
          则可以使用异步方法，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须将此值设置为`true`当你创建一个新<xref:System.Xml.XmlWriter>实例如果你想要使用异步<xref:System.Xml.XmlWriter>该实例上的方法。 后<xref:System.Xml.XmlWriter>创建实例，<xref:System.Xml.XmlWriterSettings.Async%2A>属性是只读的。 此属性的默认值为 `false`。  
  
 通过将忽略此标志<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>重载。 这意味着，如果你创建一个新<xref:System.Xml.XmlWriter>基于现有<xref:System.Xml.XmlWriter>，异步行为取决于输入<xref:System.Xml.XmlWriter>，并且不能使用<xref:System.Xml.XmlWriterSettings.Async%2A>更改异步行为的标志。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否应检查 XML 编写器以确保文档中的所有字符都符合 W3C [XML 1.0 建议](https://www.w3.org/TR/REC-xml/#charsets)中的“2.2 字符”部分。</summary>
        <value>
          如果进行字符检查，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xml.XmlWriter>对象支持字符检查，它将引发异常，如果任何字符都是合法的 XML 字符的"2.2 字符"部分的 W3C 指定范围之外[XML 1.0 建议](https://www.w3.org/TR/REC-xml/#charsets)。  
  
 字符检查不会检查 XML 名称中有非法字符或检查所有的 XML 名称有效。 这些检查是一致性检查的一部分，并且始终执行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Xml.XmlWriterSettings" /> 实例的副本。</summary>
        <returns>克隆的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 克隆<xref:System.Xml.XmlWriterSettings>而不会影响原始对象上的设置可以修改对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示调用 <see cref="M:System.Xml.XmlWriter.Close" /> 方法时 <see cref="T:System.Xml.XmlWriter" /> 是否也应关闭基础流或 <see cref="T:System.IO.TextWriter" />。</summary>
        <value>
          如果还应该关闭该基础流或 <see cref="T:System.IO.TextWriter" />，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当您想要 XML 写入流，然后将额外信息添加到后流的末尾时，此设置很有用<xref:System.Xml.XmlWriter>完成写入。  
  
 此属性仅适用于<xref:System.Xml.XmlWriter>到流内容的输出的 XML 实例或<xref:System.IO.TextWriter>; 否则为将忽略此设置。  
  
   
  
## Examples  
 下面的示例将 XML 片段写入内存流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置的 XML 写入器检查 XML 输出的一致性级别。</summary>
        <value>指定一致性级别（文档、片段或自动检测）的枚举值之一。 默认值为 <see cref="F:System.Xml.ConformanceLevel.Document" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType>属性配置为检查并确保正在写入的流符合特定的规则集的 XML 编写器。 若要查看其符合格式正确的 XML 1.0 文档或文档片段的规则，可以检查 XML 数据。 下表介绍的三个设置。 默认值为文档级别的一致性。  
  
|设置|描述|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|确保 XML 输出符合[格式良好的 XML 1.0 文档规则](https://www.w3.org/TR/REC-xml/#sec-well-formed)和可由任何兼容的处理器的处理。<br /><br /> 文档一致性检查包括大部分片段级别检查，还请确保以下：<br /><br /> -顶级项没有 XML 声明、 DTD、 元素、 注释、 空白区域或处理指令以外的任何节点。<br />XML 数据将具有一个且仅有一个顶级元素节点。<br /><br /> XML 编写器不会分析写入的 DTD 信息。 用户负责确保 DTD 格式正确。|  
|<xref:System.Xml.ConformanceLevel.Fragment>|确保 XML 输出符合[格式正确的 XML 1.0 文档片段的规则](https://www.w3.org/TR/REC-xml/#wf-entities)。<br /><br /> 此设置可以接受最高层中有多个根元素或文本节点的 XML 数据。 此检查级别确保任何处理器可以将正在读取的流作为 XML 1.0 外部分析的实体使用。<br /><br /> 文档片段中不允许 DTD 信息。|  
|<xref:System.Xml.ConformanceLevel.Auto>|指定的 XML 编写器应确定的一致性检查基于传入数据的级别。 当你不知道是否生成的 XML 将格式正确的 XML 文档或片段时，此设置可以很有用。<br /><br /> 在下列情况下应用文档一致性检查：<br /><br /> -如果<xref:System.Xml.XmlWriter.WriteStartDocument%2A>调用方法。<br />-如果写入 DTD 信息。<br /><br /> 如果 XML 数据包含以下方法之一，将应用片断一致性检查：<br /><br /> 在根级别的文本、 CDATA 或 EntityReference 节点。<br />的在根级别多个元素。<br />的在根级别任何元素。<br /><br /> 如果存在冲突，例如在根级别尝试写入文本节点和 DTD 时，将引发 <xref:System.Xml.XmlException>。<br /><br /> 如果你包装另一个<xref:System.Xml.XmlWriter>对象，在外部对象不执行任何其他一致性检查; 这从左到基础对象。|  
  
 如果 XML 编写器检测到违反指定的一致性级别的任何信息，它会引发异常。 在某些情况下，XML 编写器会自动更正一致性错误。 例如，编写器关闭闭合的属性而不引发异常。 下表显示了各种一致性冲突将在每个设置得到处理。  
  
|条件|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|找到 DTD 信息。|不为此设置的冲突。 但是，XML 编写器不会检查 DTD;用户必须确保 DTD 是格式正确。|<xref:System.Xml.XmlException> 则会引发。|应用文档一致性检查。|  
|调用 <xref:System.Xml.XmlWriter.WriteStartDocument%2A>。|不被视为违反了为此设置。|<xref:System.Xml.XmlException> 则会引发。|应用文档一致性检查。|  
|多次调用了 <xref:System.Xml.XmlWriter.WriteStartDocument%2A>。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|  
|一个文本值将显示在顶级 （不会低于元素或属性节点）。|<xref:System.Xml.XmlException> 则会引发。|不被视为冲突。|应用片断一致性检查。|  
|多个元素或没有元素出现在最高级别。|<xref:System.Xml.XmlException> 则会引发。|不被视为冲突。|应用片断一致性检查。|  
|顶级项是空格。|不被视为冲突。|不被视为冲突。|不被视为冲突。|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> 未调用，以便终止属性节点。|修复由 XML 编写器。|修复由 XML 编写器。|修复由 XML 编写器。|  
|XML 编写器处于嵌套不正确的状态 (例如，<xref:System.Xml.XmlWriter.WriteStartElement%2A>调用后跟<xref:System.Xml.XmlWriter.WriteEndAttribute%2A>)。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|  
|顶级项是一个特性。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|  
|发现多个连续的文本节点。|不会被视为冲突，但它是要串联文本节点的用户的责任。|不会被视为冲突，但它是要串联文本节点的用户的责任。|不会被视为冲突，但它是要串联文本节点的用户的责任。|  
|相同的命名空间前缀在元素中声明两次。|XML 编写器生成第二个命名空间的新前缀。|XML 编写器生成第二个命名空间的新前缀。|XML 编写器生成第二个命名空间的新前缀。|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> 指定前缀和不在该范围内声明的命名空间或前缀都与不同的命名空间关联。|XML 编写器写出必要的命名空间节点。|XML 编写器写出必要的命名空间节点。|XML 编写器写出必要的命名空间节点。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 指定前缀和不在该范围内声明的命名空间。|XML 编写器写出必要的命名空间节点。|XML 编写器写出必要的命名空间节点。|XML 编写器写出必要的命名空间节点。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 指定了前缀和命名空间中，但前缀是与不同的范围内命名空间关联。|XML 编写器将忽略指定的前缀，并查找正确的前缀或生成新的前缀。|XML 编写器将忽略指定的前缀，并查找正确的前缀或生成新的前缀。|XML 编写器将忽略指定的前缀，并查找正确的前缀或生成新的前缀。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 用于写入元素内容的范围内使用不存在的命名空间。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 用于写入属性内容通过作用域内不存在的命名空间。|XML 编写器写入的必要的命名空间声明。|XML 编写器写入的必要的命名空间声明。|XML 编写器写入的必要的命名空间声明。|  
|`xml:space`属性不包含有效的值。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|  
|遇到无效的名称。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|  
|`xml`前缀到 URI 不匹配。|这种类型的冲突不会检查 XML 编写器。|这种类型的冲突不会检查 XML 编写器。|这种类型的冲突不会检查 XML 编写器。|  
|`xml`前缀不符合http://www.w3.org/XML/1998/namespaceURI。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|  
|`xmlns`前缀或本地名称不匹配到的 URI。|这种类型的冲突不会检查 XML 编写器。|这种类型的冲突不会检查 XML 编写器。|这种类型的冲突不会检查 XML 编写器。|  
|`xmlns`前缀或本地名称不匹配到http://www.w3.org/2000/xmlnsURI。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|<xref:System.Xml.XmlException> 则会引发。|  
  
   
  
## Examples  
 下面的示例将 XML 片段写入内存流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.XmlWriter" /> 是否未转义 URI 属性。</summary>
        <value>
          <see langword="true" /> 如果<see cref="T:System.Xml.XmlWriter" />未转义 URI 属性; 否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要使用的文本编码的类型。</summary>
        <value>要使用的文本编码。 默认值为 <see langword="Encoding.UTF8" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter>在一次，而不是逐个字符进行编码的字符的缓冲区。 将引发异常<xref:System.Xml.XmlWriter.Flush%2A>遇到任何编码错误时调用方法。  
  
 <xref:System.Xml.XmlWriterSettings.Encoding%2A>属性仅适用于<xref:System.Xml.XmlWriter>创建使用指定的实例<xref:System.IO.Stream>或包含指定的文件名称。 如果<xref:System.Xml.XmlWriter>创建实例与指定<xref:System.IO.TextWriter>、<xref:System.Xml.XmlWriterSettings.Encoding%2A>属性进行编码的基础中被重写<xref:System.IO.TextWriter>。 例如，如果此属性设置为 Unicode (utf-16) 上，为特定<xref:System.Xml.XmlWriter>，但基础编写器<xref:System.IO.StreamWriter>(它派生自<xref:System.IO.TextWriter>) 使用设置为 UTF8 其编码，则输出将为 utf-8 编码。  
  
 如果<xref:System.Xml.XmlWriter>使用其他输出参数，创建实例<xref:System.Xml.XmlWriterSettings.Encoding%2A>忽略属性。  
  
 如下示例中：  
  
-   <xref:System.Xml.XmlWriterSettings.Encoding%2A> 的默认值为 `Encoding.UTF8`。  
  
-   <xref:System.IO.StreamWriter>设置为`Encoding.Unicode`和<xref:System.IO.StreamWriter>的编码重写<xref:System.Xml.XmlWriterSettings.Encoding%2A>设置。  
  
-   输出将为`Encoding.Unicode`。  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  不接受<xref:System.Text.Encoding>不受信任源中的对象。  
  
   
  
## Examples  
 下面的示例将 XML 片段写入内存流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示是否缩进元素的值。</summary>
        <value>
          如果将各元素分别写入新行并将其缩进，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于<xref:System.Xml.XmlWriter>实例输出文本内容; 否则，将忽略此设置。  
  
 只要该元素不包含混合的内容，则将缩进元素。 一次<xref:System.Xml.XmlWriter.WriteString%2A>或<xref:System.Xml.XmlWriter.WriteWhitespace%2A>调用方法来写出混合的元素内容，<xref:System.Xml.XmlWriter>停止缩进。 缩进恢复后关闭混合内容元素。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Xml.XmlWriter>用于缩进制表符的对象。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缩进时要使用的字符串。 在 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 属性设置为 <see langword="true" /> 时使用此设置。</summary>
        <value>缩进时要使用的字符串。 它可以设置为任何字符串值。 但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。 默认值为两个空格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于<xref:System.Xml.XmlWriter>实例输出文本内容; 否则，将忽略此设置。 <xref:System.Xml.XmlWriter>缩进字符将导致无效的 XML 时引发异常。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Xml.XmlWriter>用于缩进制表符的对象。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">分配给 <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> 的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在写入 XML 内容时 <see cref="T:System.Xml.XmlWriter" /> 是否应移除重复的命名空间声明。 写入器的默认行为是输出写入器的命名空间解析程序中存在的所有命名空间声明。</summary>
        <value>用于指定是否在 <see cref="T:System.Xml.NamespaceHandling" /> 中移除重复的命名空间声明的 <see cref="T:System.Xml.XmlWriter" /> 枚举。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要用于换行符的字符串。</summary>
        <value>要用于换行符的字符串。 它可以设置为任何字符串值。 但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。 默认值是<c>\r\n</c> （回车符返回，新行）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于<xref:System.Xml.XmlWriter>实例输出文本内容; 否则，将忽略此设置。 <xref:System.Xml.XmlWriter>行中断符将导致无效的 XML 时引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">分配给 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否将输出中的换行符规范化。</summary>
        <value>
          <see cref="T:System.Xml.NewLineHandling" /> 值之一。 默认值为 <see cref="F:System.Xml.NewLineHandling.Replace" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此设置在写入文本内容或属性的值时适用。 每个<xref:System.Xml.NewLineHandling>值如下所述：  
  
-   <xref:System.Xml.NewLineHandling.Entitize>设置告知<xref:System.Xml.XmlWriter>来替换不会规范化否则保留的新行字符<xref:System.Xml.XmlReader>与字符实体。 这是非常有用的往返规范化读取输出的位置<xref:System.Xml.XmlReader>。 其他规范化规则适用于属性值，在往返过程自`\t`，`\n`和`\r`用属性值时在规范化中空格替换<xref:System.Xml.XmlReader>。  
  
-   <xref:System.Xml.NewLineHandling.Replace>设置告知<xref:System.Xml.XmlWriter>来替换与新行字符`\r\n`，这是由 Microsoft Windows 操作系统的新行格式。 这有助于确保该文件可以正确显示记事本或 Microsoft Word 应用程序。 此设置还将在属性中的新行替换为要保留这些字符的字符实体。 这是默认值。  
  
-   <xref:System.Xml.NewLineHandling.None>设置告知<xref:System.Xml.XmlWriter>将保持不变的输入。 如果不需要任何新行处理，使用此设置。 这是有用的当读取输出<xref:System.Xml.XmlReader>，不会执行任何规范化操作 (例如，<xref:System.Xml.XmlTextReader>使用默认设置。)  
  
 下表显示的输出<xref:System.Xml.XmlWriter.WriteString%2A>方法时提供的输入值，具体取决于<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>属性设置。 表格显示输出显示在写入文本内容时，还在写入属性值时。  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Entitize|& #D; \n|\n|&#D;|\t|  
|替换|\r\n|\r\n|\r\n|\t|  
|无|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Entitize|&AMP; #D; 和 #A;|&AMP; #A;|&#D;|&\#9;|  
|替换|&AMP; #D; 和 #A;|&AMP; #A;|&#D;|&\#9;|  
|无|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  <xref:System.Xml.XmlWriter>编写 CDATA 节、 注释或处理指令中的内容时具有以下行为。 新行永远不会替换其字符实体，即使<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>属性设置为<xref:System.Xml.NewLineHandling.Entitize>。 这是因为在 CDATA 节、 注释或处理指令中无法识别的字符实体。 如果<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>属性设置为<xref:System.Xml.NewLineHandling.None>或<xref:System.Xml.NewLineHandling.Replace>，编写一个文本节点值时的行为都将是相同。  
  
 下表描述规范化<xref:System.Xml.XmlReader>返回为每个输入空白。 有关详细信息，请参阅部分的 W3C 2.11 和 3.3.3 [XML 1.0 建议](https://www.w3.org/TR/REC-xml/)。  
  
> [!NOTE]
>  规范化的读取器可以是任何<xref:System.Xml.XmlReader>创建对象<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法。 这些对象始终执行换行符规范化和特性的完整规范化。 <xref:System.Xml.XmlTextReader>对象也可以是规范化的读取器，如果它是<xref:System.Xml.XmlTextReader.Normalization%2A>属性设置为`true`。  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|文本节点值|\n|\n|\n|\t|  
|特性值|单个的空间|单个的空间|单个的空间|单个的空间|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在新行上写入属性。</summary>
        <value>
          如果将特性写入单独的行，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。  
  
 <block subset="none" type="note"><para>  
 如果 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 属性值为 <see langword="false" />，则此设置无效。  
  
</para></block>  
  
 如果 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> 设置为 <see langword="true" />，则每个属性都会写入到一个新行并应用一个额外的缩进级别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于<xref:System.Xml.XmlWriter>实例输出文本内容; 否则，将忽略此设置。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Xml.XmlWriter>，写入 XML 文件，并在新行上写入每个属性。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 该示例产生下面的输出：  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否省略 XML 声明。</summary>
        <value>
          如果省略 XML 声明，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />，即编写 XML 声明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于<xref:System.Xml.XmlWriter>实例输出文本内容; 否则，将忽略此设置。  
  
 如果<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>设置为`false`，自动写入 XML 声明  
  
 如果始终编写 XML 声明<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>设置为<xref:System.Xml.ConformanceLevel.Document>，即使<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>设置为`true`。  
  
 如果永远不会编写 XML 声明<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>设置为<xref:System.Xml.ConformanceLevel.Fragment>。 你可以调用<xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>显式写出 XML 声明。  
  
   
  
## Examples  
 下面的示例将 XML 片段写入内存流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于串行化 <see cref="T:System.Xml.XmlWriter" /> 输出的方法。</summary>
        <value>
          <see cref="T:System.Xml.XmlOutputMethod" /> 值之一。 默认值为 <see cref="F:System.Xml.XmlOutputMethod.Xml" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性指定用于将输出序列化为的方法。 可以使用 HTML 规则、 XML 1.0 规则等序列化输出。 此设置由 XSLT 处理器设置，并且由 Visual Studio 内部使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将设置类的成员重置为各自的默认值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示的默认属性值的实例<xref:System.Xml.XmlWriterSettings>。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|两个空格。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在调用 <see cref="M:System.Xml.XmlWriter.Close" /> 方法时 <see cref="T:System.Xml.XmlWriter" /> 是否会向所有未关闭的元素标记添加结束标记。</summary>
        <value>
          如果将抛售所有未关闭元素标记，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此标志设置为`false`，输出 XML 文件可能不是格式正确。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>