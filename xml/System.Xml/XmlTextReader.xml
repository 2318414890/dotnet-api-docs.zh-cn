<Type Name="XmlTextReader" FullName="System.Xml.XmlTextReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d65c84e03d688ae1cc9e84543f40ac3de31a0a32" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37731665" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo, IXmlNamespaceResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo, System::Xml::IXmlNamespaceResolver" />
  <TypeSignature Language="F#" Value="type XmlTextReader = class&#xA;    inherit XmlReader&#xA;    interface IXmlLineInfo&#xA;    interface IXmlNamespaceResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="36db1-101">Represents a reader that provides fast, non-cached, forward-only access to XML data.</span>
      <span class="sxs-lookup">
        <span data-stu-id="36db1-101">Represents a reader that provides fast, non-cached, forward-only access to XML data.</span>
      </span>
      <span data-ttu-id="36db1-102">Starting with the .NET Framework 2.0, we recommend that you use the <see cref="T:System.Xml.XmlReader" /> class instead.</span>
      <span class="sxs-lookup">
        <span data-stu-id="36db1-102">Starting with the .NET Framework 2.0, we recommend that you use the <see cref="T:System.Xml.XmlReader" /> class instead.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-103">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-103">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-104"><xref:System.Xml.XmlTextReader> 提供对 XML 数据的流的只进、 只读访问。</span><span class="sxs-lookup"><span data-stu-id="36db1-104"><xref:System.Xml.XmlTextReader> provides forward-only, read-only access to a stream of XML data.</span></span> <span data-ttu-id="36db1-105">当前节点指读取器所处的节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-105">The current node refers to the node on which the reader is positioned.</span></span> <span data-ttu-id="36db1-106">读取器高级使用任何一种读取方法和属性反映了当前节点的值。</span><span class="sxs-lookup"><span data-stu-id="36db1-106">The reader is advanced using any of the read methods and properties reflect the value of the current node.</span></span>  
  
 <span data-ttu-id="36db1-107">此类实现<xref:System.Xml.XmlReader>并符合 W3C 可扩展标记语言 (XML) 1.0 和 XML 建议中的命名空间。</span><span class="sxs-lookup"><span data-stu-id="36db1-107">This class implements <xref:System.Xml.XmlReader> and conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</span></span> <span data-ttu-id="36db1-108">`XmlTextReader` 提供了以下功能：</span><span class="sxs-lookup"><span data-stu-id="36db1-108">`XmlTextReader` provides the following functionality:</span></span>  
  
-   <span data-ttu-id="36db1-109">强制格式正确的 XML 的规则。</span><span class="sxs-lookup"><span data-stu-id="36db1-109">Enforces the rules of well-formed XML.</span></span>  
  
-   <span data-ttu-id="36db1-110">`XmlTextReader` 不提供数据验证。</span><span class="sxs-lookup"><span data-stu-id="36db1-110">`XmlTextReader` does not provide data validation.</span></span>  
  
-   <span data-ttu-id="36db1-111">检查`DocumentType`节点的格式是否正确。</span><span class="sxs-lookup"><span data-stu-id="36db1-111">Checks that `DocumentType` nodes are well-formed.</span></span> <span data-ttu-id="36db1-112">`XmlTextReader` 检查 DTD 的格式良好，但不会验证使用 DTD。</span><span class="sxs-lookup"><span data-stu-id="36db1-112">`XmlTextReader` checks the DTD for well-formedness, but does not validate using the DTD.</span></span>  
  
-   <span data-ttu-id="36db1-113">节点位置<xref:System.Xml.XmlTextReader.NodeType%2A>是`XmlNodeType.EntityReference`，一个单一的空`EntityReference`返回节点 (即<xref:System.Xml.XmlTextReader.Value%2A>属性是`String.Empty`)。</span><span class="sxs-lookup"><span data-stu-id="36db1-113">For nodes where <xref:System.Xml.XmlTextReader.NodeType%2A> is `XmlNodeType.EntityReference`, a single empty `EntityReference` node is returned (that is, the <xref:System.Xml.XmlTextReader.Value%2A> property is `String.Empty`).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36db1-114">在 DTD 中的实体的实际声明称为`Entity`节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-114">The actual declarations of entities in the DTD are called `Entity` nodes.</span></span> <span data-ttu-id="36db1-115">数据中引用这些节点，它们被称为`EntityReference`节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-115">When you refer to these nodes in your data, they are called `EntityReference` nodes.</span></span>  
  
-   <span data-ttu-id="36db1-116">不展开默认属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-116">Does not expand default attributes.</span></span>  
  
 <span data-ttu-id="36db1-117">因为`XmlTextReader`不执行额外检查所需的数据验证，它提供快速的格式是否正确分析器。</span><span class="sxs-lookup"><span data-stu-id="36db1-117">Because the `XmlTextReader` does not perform the extra checks required for data validation, it provides a fast well-formedness parser.</span></span>  
  
 <span data-ttu-id="36db1-118">若要执行数据验证，请使用验证<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="36db1-118">To perform data validation, use a validating <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="36db1-119">从中读取 XML 数据<xref:System.Xml.XmlDocument>，使用<xref:System.Xml.XmlNodeReader>。</span><span class="sxs-lookup"><span data-stu-id="36db1-119">To read XML data from an <xref:System.Xml.XmlDocument>, use <xref:System.Xml.XmlNodeReader>.</span></span>  
  
 <span data-ttu-id="36db1-120">`XmlTextReader` 引发<xref:System.Xml.XmlException>的 XML 分析错误。</span><span class="sxs-lookup"><span data-stu-id="36db1-120">`XmlTextReader` throws an <xref:System.Xml.XmlException> on XML parse errors.</span></span> <span data-ttu-id="36db1-121">引发异常后读取器状态不是可预测的。</span><span class="sxs-lookup"><span data-stu-id="36db1-121">After an exception is thrown the state of the reader is not predictable.</span></span> <span data-ttu-id="36db1-122">例如，报告的节点类型可能不同于当前节点的实际节点类型。</span><span class="sxs-lookup"><span data-stu-id="36db1-122">For example, the reported node type may be different than the actual node type of the current node.</span></span> <span data-ttu-id="36db1-123">使用<xref:System.Xml.XmlTextReader.ReadState%2A>属性检查是否在读取器处于错误状态。</span><span class="sxs-lookup"><span data-stu-id="36db1-123">Use the <xref:System.Xml.XmlTextReader.ReadState%2A> property to check whether a reader is in error state.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="36db1-124">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="36db1-124">Security Considerations</span></span>  
 <span data-ttu-id="36db1-125">以下是使用时应考虑的事项<xref:System.Xml.XmlTextReader>类。</span><span class="sxs-lookup"><span data-stu-id="36db1-125">The following are things to consider when using the <xref:System.Xml.XmlTextReader> class.</span></span>  
  
-   <span data-ttu-id="36db1-126">引发的异常<xref:System.Xml.XmlTextReader>可能会泄露冒泡到应用程序不希望的路径信息。</span><span class="sxs-lookup"><span data-stu-id="36db1-126">Exceptions thrown the <xref:System.Xml.XmlTextReader> can disclose path information that you do not want bubbled up to the application.</span></span> <span data-ttu-id="36db1-127">应用程序必须捕获异常并进行相应的处理。</span><span class="sxs-lookup"><span data-stu-id="36db1-127">Your applications must catch exceptions and process them appropriately.</span></span>  
  
-   <span data-ttu-id="36db1-128">默认情况下启用 DTD 处理。</span><span class="sxs-lookup"><span data-stu-id="36db1-128">DTD processing is enabled by default.</span></span> <span data-ttu-id="36db1-129">禁用 DTD 处理，如果您担心拒绝服务问题或如果您在处理不可信的源。</span><span class="sxs-lookup"><span data-stu-id="36db1-129">Disable DTD processing if you are concerned about Denial of Service issues or if you are dealing with untrusted sources.</span></span> <span data-ttu-id="36db1-130">设置<xref:System.Xml.XmlTextReader.DtdProcessing%2A>属性设置为<xref:System.Xml.DtdProcessing.Prohibit>中禁用 DTD 处理。</span><span class="sxs-lookup"><span data-stu-id="36db1-130">Set the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property to <xref:System.Xml.DtdProcessing.Prohibit> to disable DTD processing.</span></span>  
  
     <span data-ttu-id="36db1-131">如果启用了 DTD 处理，可以使用 <xref:System.Xml.XmlSecureResolver> 限制 <xref:System.Xml.XmlTextReader> 可以访问的资源。</span><span class="sxs-lookup"><span data-stu-id="36db1-131">If you have DTD processing enabled, you can use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the <xref:System.Xml.XmlTextReader> can access.</span></span> <span data-ttu-id="36db1-132">还可以设计应用程序以使 XML 处理受内存和时间的约束。</span><span class="sxs-lookup"><span data-stu-id="36db1-132">You can also design your application so that the XML processing is memory and time constrained.</span></span> <span data-ttu-id="36db1-133">例如，在 ASP.NET 应用程序中配置超时限制。</span><span class="sxs-lookup"><span data-stu-id="36db1-133">For example, configure time-out limits in your ASP.NET application.</span></span>  
  
-   <span data-ttu-id="36db1-134">XML 数据可以包含对外部资源，例如 DTD 文件的引用。</span><span class="sxs-lookup"><span data-stu-id="36db1-134">XML data can include references to external resources such as a DTD file.</span></span> <span data-ttu-id="36db1-135">默认情况下，外部资源使用没有用户凭据的 <xref:System.Xml.XmlUrlResolver> 对象进行解析。</span><span class="sxs-lookup"><span data-stu-id="36db1-135">By default external resources are resolved using an <xref:System.Xml.XmlUrlResolver> object with no user credentials.</span></span> <span data-ttu-id="36db1-136">通过执行下列操作之一，可以使此操作更加安全：</span><span class="sxs-lookup"><span data-stu-id="36db1-136">You can secure this further by doing one of the following:</span></span>  
  
    -   <span data-ttu-id="36db1-137">通过将 <xref:System.Xml.XmlTextReader> 属性设置为 <xref:System.Xml.XmlTextReader.XmlResolver%2A> 对象限制 <xref:System.Xml.XmlSecureResolver> 可访问的资源。</span><span class="sxs-lookup"><span data-stu-id="36db1-137">Restrict the resources that the <xref:System.Xml.XmlTextReader> can access by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.</span></span>  
  
    -   <span data-ttu-id="36db1-138">通过将 <xref:System.Xml.XmlReader> 属性设置为 <xref:System.Xml.XmlTextReader.XmlResolver%2A>，不允许 `null` 打开任何外部资源。</span><span class="sxs-lookup"><span data-stu-id="36db1-138">Do not allow the <xref:System.Xml.XmlReader> to open any external resources by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to `null`.</span></span>  
  
-   <span data-ttu-id="36db1-139">XML 数据可以包含大量属性、命名空间声明、嵌套元素等，需要大量的时间来处理。</span><span class="sxs-lookup"><span data-stu-id="36db1-139">XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process.</span></span> <span data-ttu-id="36db1-140">若要限制发送到的输入的大小<xref:System.Xml.XmlTextReader>、 创建自定义的 IStream 实现并将其提供<xref:System.Xml.XmlTextReader>。</span><span class="sxs-lookup"><span data-stu-id="36db1-140">To limit the size of the input that is sent to the <xref:System.Xml.XmlTextReader>, create a custom IStream implementation and supply it the <xref:System.Xml.XmlTextReader>.</span></span>  
  
-   <span data-ttu-id="36db1-141"><xref:System.Xml.XmlReader.ReadValueChunk%2A>方法可用于处理大数据的数据流。</span><span class="sxs-lookup"><span data-stu-id="36db1-141">The <xref:System.Xml.XmlReader.ReadValueChunk%2A> method can be used to handle large streams of data.</span></span> <span data-ttu-id="36db1-142">此方法一次读取少量的字符，而不是为整个值分配单个字符串。</span><span class="sxs-lookup"><span data-stu-id="36db1-142">This method reads a small number of characters at a time instead of allocating a single string for the whole value.</span></span>  
  
-   <span data-ttu-id="36db1-143">默认情况下不展开常规实体。</span><span class="sxs-lookup"><span data-stu-id="36db1-143">By default general entities are not expanded.</span></span> <span data-ttu-id="36db1-144">常规实体在调用 <xref:System.Xml.XmlTextReader.ResolveEntity%2A> 方法时展开。</span><span class="sxs-lookup"><span data-stu-id="36db1-144">General entities are expanded when you call the <xref:System.Xml.XmlTextReader.ResolveEntity%2A> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="36db1-145">
        <para>此类具有继承要求。需要完全信任继承<see langword="XmlTextReader" />。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="36db1-145">
          <para>This class has an inheritance demand. Full trust is required to inherit from <see langword="XmlTextReader" />.</para>
        </span>
      </span>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-146">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-146">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-147">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-147">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-148">Initializes a new instance of the <see langword="XmlTextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-148">Initializes a new instance of the <see langword="XmlTextReader" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="36db1-149">The stream containing the XML data to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-149">The stream containing the XML data to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-150">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-150">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-151">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-151">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-152"><xref:System.Xml.XmlTextReader>解码流使用<xref:System.Text.Encoding?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="36db1-152">The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-153">
            <paramref name="input" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-153">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="36db1-154">The <see langword="TextReader" /> containing the XML data to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-154">The <see langword="TextReader" /> containing the XML data to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-155">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-155">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-156">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-156">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-157">假定`TextReader`已设置为正确的编码。</span><span class="sxs-lookup"><span data-stu-id="36db1-157">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="36db1-158">这可供客户端从流中的多部分 MIME 方案已读取的一些事项。</span><span class="sxs-lookup"><span data-stu-id="36db1-158">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-159">下面的示例加载到一个 XML 字符串`XmlTextReader`对象使用<xref:System.IO.StringReader>类。</span><span class="sxs-lookup"><span data-stu-id="36db1-159">The following example loads an XML string into the `XmlTextReader` object using the <xref:System.IO.StringReader> class.</span></span>  
  
 [!code-cpp[XmlTextReader.cctor1#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.cctor1/CPP/rdrcctor1.cpp#1)]
 [!code-csharp[XmlTextReader.cctor1#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.cctor1/CS/rdrcctor1.cs#1)]
 [!code-vb[XmlTextReader.cctor1#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.cctor1/VB/rdrcctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader url" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="36db1-160">The URL for the file containing the XML data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-160">The URL for the file containing the XML data.</span>
          </span>
          <span data-ttu-id="36db1-161">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-161">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-162">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-162">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-163">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-163">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-164">如果需要访问凭据的资源位于该文件，则使用<xref:System.Xml.XmlTextReader.XmlResolver%2A>属性来指定所需的凭据。</span><span class="sxs-lookup"><span data-stu-id="36db1-164">If the file is located on a resource that requires access credentials, use the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to specify the necessary credentials.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36db1-165">在 1.1 版中[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，部分受信任的代码不能设置`XmlResolver`属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-165">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], partially trusted code cannot set the `XmlResolver` property.</span></span> <span data-ttu-id="36db1-166">解决方法是创建<xref:System.Xml.XmlUrlResolver>使用必要的凭据，将传递到 URI<xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType>方法，并再构造`XmlTextReader`使用生成<xref:System.IO.Stream>对象。</span><span class="sxs-lookup"><span data-stu-id="36db1-166">The workaround is to create an <xref:System.Xml.XmlUrlResolver> with the necessary credentials, pass the URI to the <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> method, and then construct the `XmlTextReader` using the resulting <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="36db1-167">解决方法是在下面的 C# 代码中所述。</span><span class="sxs-lookup"><span data-stu-id="36db1-167">The workaround is described in the following C# code.</span></span>  
  
```csharp  
// Create a resolver with the necessary credentials.  
XmlUrlResolver resolver = new XmlUrlResolver();  
NetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);  
resolver.Credentials = nc;   
// Get a Stream object containing the XML file.  
Uri myUri = new Uri ("http://myServer/data/books.xml");  
Stream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));  
// Construct a reader using the Stream object.  
XmlTextReader reader = new XmlTextReader(s);  
```  
  
   
  
## Examples  
 <span data-ttu-id="36db1-168">下面的示例读取 XML 文件，并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-168">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-169">该示例使用该文件，`items.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-169">The example uses the file, `items.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="36db1-170">The specified file cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-170">The specified file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="36db1-171">Part of the filename or directory cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-171">Part of the filename or directory cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-172">
            <paramref name="url" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-172">
              <paramref name="url" /> is an empty string.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.WebException">
          <span data-ttu-id="36db1-173">The remote filename cannot be resolved.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-173">The remote filename cannot be resolved.</span>
          </span>
          <span data-ttu-id="36db1-174">-or-  An error occurred while processing the request.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-174">-or-  An error occurred while processing the request.</span>
          </span>
        </exception>
        <exception cref="T:System.UriFormatException">
          <span data-ttu-id="36db1-175">
            <paramref name="url" /> is not a valid URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-175">
              <paramref name="url" /> is not a valid URI.</span>
          </span>
        </exception>
        <altmember cref="P:System.Xml.XmlTextReader.XmlResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader (System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader(System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader nt" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nt">
          <span data-ttu-id="36db1-176">The <see langword="XmlNameTable" /> to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-176">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-177">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-177">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-178">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-178">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="36db1-179">The stream containing the XML data to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-179">The stream containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="36db1-180">The <see langword="XmlNameTable" /> to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-180">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-181">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-181">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-182">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-182">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-183"><xref:System.Xml.XmlTextReader>解码流使用<xref:System.Text.Encoding?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="36db1-183">The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="36db1-184">如果指定的名称表，此构造函数使用该表中已定义的名称。</span><span class="sxs-lookup"><span data-stu-id="36db1-184">If you specify a name table, this constructor uses the names defined already in that table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="36db1-185">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-185">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="36db1-186">The <see langword="TextReader" /> containing the XML data to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-186">The <see langword="TextReader" /> containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="36db1-187">The <see langword="XmlNameTable" /> to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-187">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-188">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-188">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-189">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-189">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-190">假定`TextReader`已设置为正确的编码。</span><span class="sxs-lookup"><span data-stu-id="36db1-190">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="36db1-191">这可供客户端从流中的多部分 MIME 方案已读取的一些事项。</span><span class="sxs-lookup"><span data-stu-id="36db1-191">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="36db1-192">The <paramref name="nt" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-192">The <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="36db1-193">The URL to use for resolving external resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-193">The URL to use for resolving external resources.</span>
          </span>
          <span data-ttu-id="36db1-194">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-194">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
        </param>
        <param name="input">
          <span data-ttu-id="36db1-195">The stream containing the XML data to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-195">The stream containing the XML data to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-196">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-196">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-197">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-197">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-198">
            <paramref name="input" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-198">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="36db1-199">The URL to use for resolving external resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-199">The URL to use for resolving external resources.</span>
          </span>
          <span data-ttu-id="36db1-200">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-200">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
        </param>
        <param name="input">
          <span data-ttu-id="36db1-201">The <see langword="TextReader" /> containing the XML data to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-201">The <see langword="TextReader" /> containing the XML data to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-202">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-202">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-203">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-203">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-204">假定`TextReader`已设置为正确的编码。</span><span class="sxs-lookup"><span data-stu-id="36db1-204">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="36db1-205">这可供客户端从流中的多部分 MIME 方案已读取的一些事项。</span><span class="sxs-lookup"><span data-stu-id="36db1-205">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="36db1-206">The URL for the file containing the XML data to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-206">The URL for the file containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="36db1-207">The <see langword="XmlNameTable" /> to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-207">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-208">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-208">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-209">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-209">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="36db1-210">The <paramref name="nt" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-210">The <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="36db1-211">The specified file cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-211">The specified file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="36db1-212">Part of the filename or directory cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-212">Part of the filename or directory cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-213">
            <paramref name="url" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-213">
              <paramref name="url" /> is an empty string.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.WebException">
          <span data-ttu-id="36db1-214">The remote filename cannot be resolved.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-214">The remote filename cannot be resolved.</span>
          </span>
          <span data-ttu-id="36db1-215">-or-  An error occurred while processing the request.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-215">-or-  An error occurred while processing the request.</span>
          </span>
        </exception>
        <exception cref="T:System.UriFormatException">
          <span data-ttu-id="36db1-216">
            <paramref name="url" /> is not a valid URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-216">
              <paramref name="url" /> is not a valid URI.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As Stream, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">
          <span data-ttu-id="36db1-217">The stream containing the XML fragment to parse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-217">The stream containing the XML fragment to parse.</span>
          </span>
        </param>
        <param name="fragType">
          <span data-ttu-id="36db1-218">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-218">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span>
          </span>
          <span data-ttu-id="36db1-219">This also determines what the fragment can contain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-219">This also determines what the fragment can contain.</span>
          </span>
          <span data-ttu-id="36db1-220">(See table below.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-220">(See table below.)</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="36db1-221">The <see cref="T:System.Xml.XmlParserContext" /> in which the <c>xmlFragment</c> is to be parsed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-221">The <see cref="T:System.Xml.XmlParserContext" /> in which the <c>xmlFragment</c> is to be parsed.</span>
          </span>
          <span data-ttu-id="36db1-222">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-222">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-223">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-223">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-224">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-224">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-225">此构造函数将给定的字符串分析为 XML 的片段。</span><span class="sxs-lookup"><span data-stu-id="36db1-225">This constructor parses the given string as a fragment of XML.</span></span> <span data-ttu-id="36db1-226">如果 XML 片段的元素或属性，可以跳过格式正确的 XML 文档的根级别规则。</span><span class="sxs-lookup"><span data-stu-id="36db1-226">If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</span></span>  
  
 <span data-ttu-id="36db1-227">下表列出了有效值`fragType`。</span><span class="sxs-lookup"><span data-stu-id="36db1-227">The following table lists valid values for `fragType`.</span></span>  
  
|<span data-ttu-id="36db1-228">XmlNodeType</span><span class="sxs-lookup"><span data-stu-id="36db1-228">XmlNodeType</span></span>|<span data-ttu-id="36db1-229">片段可能包含</span><span class="sxs-lookup"><span data-stu-id="36db1-229">Fragment May Contain</span></span>|  
|-----------------|--------------------------|  
|`Element`|<span data-ttu-id="36db1-230">任何有效的元素内容 （例如，元素、 注释、 处理指令、 CDATA 部分、 文本和实体引用的任意组合）。</span><span class="sxs-lookup"><span data-stu-id="36db1-230">Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</span></span><br /><br /> <span data-ttu-id="36db1-231">还可以提供 XML 声明。</span><span class="sxs-lookup"><span data-stu-id="36db1-231">An XML declaration can also be supplied.</span></span> <span data-ttu-id="36db1-232">这允许您指定的编码的 XML 片段，而不是无需将其设置上<xref:System.Xml.XmlParserContext>对象。</span><span class="sxs-lookup"><span data-stu-id="36db1-232">This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.</span></span>|  
|`Attribute`|<span data-ttu-id="36db1-233">属性 （在引号内的部分） 的值。</span><span class="sxs-lookup"><span data-stu-id="36db1-233">The value of an attribute (the part inside the quotes).</span></span>|  
|`Document`|<span data-ttu-id="36db1-234">整个 XML 文档的内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-234">The contents of an entire XML document.</span></span> <span data-ttu-id="36db1-235">这会强制文档级别规则。</span><span class="sxs-lookup"><span data-stu-id="36db1-235">This enforces document level rules.</span></span>|  
  
 <span data-ttu-id="36db1-236">读取器使用下列方法确定流的编码。</span><span class="sxs-lookup"><span data-stu-id="36db1-236">The reader uses the following to determine the encoding of the stream.</span></span>  
  
1.  <span data-ttu-id="36db1-237">检查<xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType>属性来确定的编码。</span><span class="sxs-lookup"><span data-stu-id="36db1-237">Checks the <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> property to determine the encoding.</span></span>  
  
2.  <span data-ttu-id="36db1-238">如果`Encoding`属性是`null`，读取器检查流的开始处的字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="36db1-238">If the `Encoding` property is `null`, the reader checks for a byte-order mark at the beginning of the stream.</span></span>  
  
3.  <span data-ttu-id="36db1-239">如果`Encoding`属性是`null`，并找到无字节顺序标记，则读取器假设在 utf-8 中编码流。</span><span class="sxs-lookup"><span data-stu-id="36db1-239">If the `Encoding` property is `null`, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="36db1-240">
            <paramref name="fragType" /> is not an Element, Attribute, or Document <see langword="XmlNodeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-240">
              <paramref name="fragType" /> is not an Element, Attribute, or Document <see langword="XmlNodeType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-241">
            <paramref name="xmlFragment" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-241">
              <paramref name="xmlFragment" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="36db1-242">The URL to use for resolving external resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-242">The URL to use for resolving external resources.</span>
          </span>
          <span data-ttu-id="36db1-243">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-243">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
          <span data-ttu-id="36db1-244">If <c>url</c> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-244">If <c>url</c> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span>
          </span>
        </param>
        <param name="input">
          <span data-ttu-id="36db1-245">The stream containing the XML data to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-245">The stream containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="36db1-246">The <see langword="XmlNameTable" /> to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-246">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-247">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-247">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-248">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-248">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="36db1-249">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-249">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="36db1-250">The URL to use for resolving external resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-250">The URL to use for resolving external resources.</span>
          </span>
          <span data-ttu-id="36db1-251">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-251">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
          <span data-ttu-id="36db1-252">If <c>url</c> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-252">If <c>url</c> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span>
          </span>
        </param>
        <param name="input">
          <span data-ttu-id="36db1-253">The <see langword="TextReader" /> containing the XML data to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-253">The <see langword="TextReader" /> containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="36db1-254">The <see langword="XmlNameTable" /> to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-254">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-255">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-255">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-256">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-256">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-257">假定`TextReader`已设置为正确的编码。</span><span class="sxs-lookup"><span data-stu-id="36db1-257">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="36db1-258">这可供客户端从流中的多部分 MIME 方案已读取的一些事项。</span><span class="sxs-lookup"><span data-stu-id="36db1-258">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-259">The <paramref name="nt" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-259">The <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As String, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">
          <span data-ttu-id="36db1-260">The string containing the XML fragment to parse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-260">The string containing the XML fragment to parse.</span>
          </span>
        </param>
        <param name="fragType">
          <span data-ttu-id="36db1-261">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-261">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span>
          </span>
          <span data-ttu-id="36db1-262">This also determines what the fragment string can contain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-262">This also determines what the fragment string can contain.</span>
          </span>
          <span data-ttu-id="36db1-263">(See table below.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-263">(See table below.)</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="36db1-264">The <see cref="T:System.Xml.XmlParserContext" /> in which the <c>xmlFragment</c> is to be parsed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-264">The <see cref="T:System.Xml.XmlParserContext" /> in which the <c>xmlFragment</c> is to be parsed.</span>
          </span>
          <span data-ttu-id="36db1-265">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-265">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-266">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified string, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-266">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified string, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-267">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-267">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-268">此构造函数将给定的字符串分析为 XML 的片段。</span><span class="sxs-lookup"><span data-stu-id="36db1-268">This constructor parses the given string as a fragment of XML.</span></span> <span data-ttu-id="36db1-269">如果 XML 片段的元素或属性，可以跳过格式正确的 XML 文档的根级别规则。</span><span class="sxs-lookup"><span data-stu-id="36db1-269">If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</span></span> <span data-ttu-id="36db1-270">此构造函数可以处理从返回的字符串<xref:System.Xml.XmlReader.ReadInnerXml%2A>。</span><span class="sxs-lookup"><span data-stu-id="36db1-270">This constructor can handle strings returned from <xref:System.Xml.XmlReader.ReadInnerXml%2A>.</span></span>  
  
 <span data-ttu-id="36db1-271">下表列出了有效值`fragType`和读取器如何分析每个不同的节点类型。</span><span class="sxs-lookup"><span data-stu-id="36db1-271">The following table lists valid values for `fragType` and how the reader parses each of the different node types.</span></span>  
  
|<span data-ttu-id="36db1-272">XmlNodeType</span><span class="sxs-lookup"><span data-stu-id="36db1-272">XmlNodeType</span></span>|<span data-ttu-id="36db1-273">片段可能包含</span><span class="sxs-lookup"><span data-stu-id="36db1-273">Fragment May Contain</span></span>|  
|-----------------|--------------------------|  
|<span data-ttu-id="36db1-274">元素</span><span class="sxs-lookup"><span data-stu-id="36db1-274">Element</span></span>|<span data-ttu-id="36db1-275">任何有效的元素内容 （例如，元素、 注释、 处理指令、 CDATA 部分、 文本和实体引用的任意组合）。</span><span class="sxs-lookup"><span data-stu-id="36db1-275">Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</span></span><br /><br /> <span data-ttu-id="36db1-276">还可以提供 XML 声明。</span><span class="sxs-lookup"><span data-stu-id="36db1-276">An XML declaration can also be supplied.</span></span> <span data-ttu-id="36db1-277">这允许您指定的编码的 XML 片段，而不是无需将其设置上<xref:System.Xml.XmlParserContext>对象。</span><span class="sxs-lookup"><span data-stu-id="36db1-277">This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.</span></span>|  
|<span data-ttu-id="36db1-278">特性</span><span class="sxs-lookup"><span data-stu-id="36db1-278">Attribute</span></span>|<span data-ttu-id="36db1-279">属性 （在引号内的部分） 的值。</span><span class="sxs-lookup"><span data-stu-id="36db1-279">The value of an attribute (the part inside the quotes).</span></span>|  
|<span data-ttu-id="36db1-280">Document</span><span class="sxs-lookup"><span data-stu-id="36db1-280">Document</span></span>|<span data-ttu-id="36db1-281">整个 XML 文档的内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-281">The contents of an entire XML document.</span></span> <span data-ttu-id="36db1-282">这会强制文档级别规则。</span><span class="sxs-lookup"><span data-stu-id="36db1-282">This enforces document level rules.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="36db1-283">下面的示例分析 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="36db1-283">The following example parses an XML fragment.</span></span> <span data-ttu-id="36db1-284">它使用`XmlParserContext`并将其<xref:System.Xml.XmlNamespaceManager>处理命名空间解析。</span><span class="sxs-lookup"><span data-stu-id="36db1-284">It uses the `XmlParserContext` and its <xref:System.Xml.XmlNamespaceManager> to handle namespace resolution.</span></span>  
  
 [!code-cpp[XmlTextReader.Cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Cctor/CPP/readfrag.cpp#1)]
 [!code-csharp[XmlTextReader.Cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Cctor/CS/readfrag.cs#1)]
 [!code-vb[XmlTextReader.Cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Cctor/VB/readfrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="36db1-285">
            <paramref name="fragType" /> is not an <see langword="Element" />, <see langword="Attribute" />, or <see langword="Document" /><see langword="XmlNodeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-285">
              <paramref name="fragType" /> is not an <see langword="Element" />, <see langword="Attribute" />, or <see langword="Document" /><see langword="XmlNodeType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-286">
            <paramref name="xmlFragment" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-286">
              <paramref name="xmlFragment" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlParserContext" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AttributeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeCount : int" Usage="System.Xml.XmlTextReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-287">Gets the number of attributes on the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-287">Gets the number of attributes on the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-288">当前节点上的属性数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-288">The number of attributes on the current node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-289">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-289">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-290">此属性是与相关`Element`，`DocumentType`和`XmlDeclaration`仅限节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-290">This property is relevant to `Element`, `DocumentType` and `XmlDeclaration` nodes only.</span></span> <span data-ttu-id="36db1-291">（其他节点类型没有属性。）</span><span class="sxs-lookup"><span data-stu-id="36db1-291">(Other node types do not have attributes.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-292">下面的示例显示当前节点上的所有属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-292">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseURI : string" Usage="System.Xml.XmlTextReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-293">Gets the base URI of the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-293">Gets the base URI of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-294">当前节点的基 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-294">The base URI of the current node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-295">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-295">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-296">联网的 XML 文档的聚合使用各种 W3C 标准包含机制的数据块组成，因此包含来自不同位置的节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-296">A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places.</span></span> <span data-ttu-id="36db1-297">DTD 实体就是一个例子，但这并不局限于 Dtd。</span><span class="sxs-lookup"><span data-stu-id="36db1-297">DTD entities are an example of this, but this is not limited to DTDs.</span></span> <span data-ttu-id="36db1-298">基 URI 将指示您从这些节点的源位置。</span><span class="sxs-lookup"><span data-stu-id="36db1-298">The base URI tells you where these nodes came from.</span></span> <span data-ttu-id="36db1-299">如果没有要返回的节点没有基 URI （例如，它们已从分析的内存中字符串），`String.Empty`返回。</span><span class="sxs-lookup"><span data-stu-id="36db1-299">If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), `String.Empty` is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-300">下面的示例显示有关每个节点的基 URI。</span><span class="sxs-lookup"><span data-stu-id="36db1-300">The following example displays the base URI for each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-301">该示例使用该文件，`baseuri.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-301">The example uses the file, `baseuri.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.BaseURI Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadBinaryContent : bool" Usage="System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-302">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the binary content read methods.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-302">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the binary content read methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-303">如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-303">
              <see langword="true" /> if the binary content read methods are implemented; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="36db1-304">
            <see cref="T:System.Xml.XmlTextReader" /> 类始终返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-304">The <see cref="T:System.Xml.XmlTextReader" /> class always returns <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-305">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-305">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-306">二进制内容读取方法包括<xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>， <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>， <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>，和<xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="36db1-306">The binary content read methods include the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>, and <xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public override bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadValueChunk As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadValueChunk { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadValueChunk : bool" Usage="System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-307">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-307">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-308">如果 <see cref="T:System.Xml.XmlTextReader" /> 实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-308">
              <see langword="true" /> if the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="36db1-309">
            <see cref="T:System.Xml.XmlTextReader" /> 类始终返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-309">The <see cref="T:System.Xml.XmlTextReader" /> class always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-310">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-310">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-311"><xref:System.Xml.XmlTextReader>将引发<xref:System.NotSupportedException>如果<xref:System.Xml.XmlReader.ReadValueChunk%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="36db1-311">The <xref:System.Xml.XmlTextReader> throws a <xref:System.NotSupportedException> if the <xref:System.Xml.XmlReader.ReadValueChunk%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanResolveEntity : bool" Usage="System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-312">Gets a value indicating whether this reader can parse and resolve entities.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-312">Gets a value indicating whether this reader can parse and resolve entities.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-313">如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-313">
              <see langword="true" /> if the reader can parse and resolve entities; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="36db1-314">
            <see langword="XmlTextReader" /> 类始终返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-314">The <see langword="XmlTextReader" /> class always returns <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-315">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-315">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-316">这是在更改[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]发布。</span><span class="sxs-lookup"><span data-stu-id="36db1-316">This is a change in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] release.</span></span> <span data-ttu-id="36db1-317">在上一版本中，`XmlTextReader`类无法解析实体和`CanResolveEntity`始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="36db1-317">In previous versions, the `XmlTextReader` class could not resolve entities and `CanResolveEntity` always returned `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlTextReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-318">Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to <see langword="Closed" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-318">Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to <see langword="Closed" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-319">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-319">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-320">此方法也会释放读取时占用任何资源。</span><span class="sxs-lookup"><span data-stu-id="36db1-320">This method also releases any resources held while reading.</span></span> <span data-ttu-id="36db1-321">如果此读取器已构造使用一个流，此方法还会调用`Close`对基础流。</span><span class="sxs-lookup"><span data-stu-id="36db1-321">If this reader was constructed using a stream, this method also calls `Close` on the underlying stream.</span></span>  
  
 <span data-ttu-id="36db1-322">如果`Close`已被调用，不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="36db1-322">If `Close` has already been called, no action is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Xml.XmlTextReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-323">Gets the depth of the current node in the XML document.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-323">Gets the depth of the current node in the XML document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-324">XML 文档中当前节点的深度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-324">The depth of the current node in the XML document.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-325">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-325">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-326">以下示例显示每个节点，包括其深度、 行号和行位置。</span><span class="sxs-lookup"><span data-stu-id="36db1-326">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlTextReader.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-327">Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-327">Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-328">
            <see cref="T:System.Xml.DtdProcessing" /> 枚举。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-328">The <see cref="T:System.Xml.DtdProcessing" /> enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36db1-329"><xref:System.Xml.DtdProcessing>枚举包含用<xref:System.Xml.DtdProcessing.Prohibit>， <xref:System.Xml.DtdProcessing.Ignore>，和<xref:System.Xml.DtdProcessing.Parse>枚举器。</span><span class="sxs-lookup"><span data-stu-id="36db1-329">The <xref:System.Xml.DtdProcessing> enumeration contains the <xref:System.Xml.DtdProcessing.Prohibit>, <xref:System.Xml.DtdProcessing.Ignore>, and <xref:System.Xml.DtdProcessing.Parse> enumerators.</span></span> <span data-ttu-id="36db1-330"><xref:System.Xml.DtdProcessing.Parse> 是默认行为。</span><span class="sxs-lookup"><span data-stu-id="36db1-330"><xref:System.Xml.DtdProcessing.Parse> is the default behavior.</span></span> <span data-ttu-id="36db1-331"><xref:System.Xml.XmlTextReader.DtdProcessing%2A>属性替换了`ProhibitDTD`属性并添加了忽略 DOCTYPE 元素的功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-331">The <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property replaces the `ProhibitDTD` property and adds the ability to ignore the DOCTYPE element.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="36db1-332">如果<xref:System.Xml.XmlTextReader.DtdProcessing%2A>属性设置为<xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>，则<xref:System.Xml.XmlTextReader>不会报告 Dtd。</span><span class="sxs-lookup"><span data-stu-id="36db1-332">If the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property is set to <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>, the <xref:System.Xml.XmlTextReader> will not report the DTDs.</span></span> <span data-ttu-id="36db1-333">这意味着 DTD/DOCTYPE 上输出都将丢失。</span><span class="sxs-lookup"><span data-stu-id="36db1-333">This means that the DTD/DOCTYPE will be lost on output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Xml.XmlTextReader.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-334">Gets the encoding of the document.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-334">Gets the encoding of the document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-335">编码值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-335">The encoding value.</span>
          </span>
          <span data-ttu-id="36db1-336">如果不存在任何编码属性且不存在字节顺序标记，则这将默认为 UTF-8。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-336">If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-337">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-337">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-338">因为<xref:System.Xml.XmlTextReader>使用<xref:System.Text.Encoding?displayProperty=nameWithType>类，`XmlTextReader`还支持该类支持的所有编码。</span><span class="sxs-lookup"><span data-stu-id="36db1-338">Because <xref:System.Xml.XmlTextReader> uses the <xref:System.Text.Encoding?displayProperty=nameWithType> class, `XmlTextReader` also supports all encodings supported by that class.</span></span> <span data-ttu-id="36db1-339">此规则的例外是任何编码，如 UTF-7、utf 或 EBCDIC 映射`<?xml`到 utf-8 以外的其他字节值的序列。</span><span class="sxs-lookup"><span data-stu-id="36db1-339">The exception to this is any encoding, such as UTF-7 or EBCDIC, that maps the `<?xml` sequence to different byte values than UTF-8.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EntityHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityHandling As EntityHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::EntityHandling EntityHandling { System::Xml::EntityHandling get(); void set(System::Xml::EntityHandling value); };" />
      <MemberSignature Language="F#" Value="member this.EntityHandling : System.Xml.EntityHandling with get, set" Usage="System.Xml.XmlTextReader.EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-340">Gets or sets a value that specifies how the reader handles entities.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-340">Gets or sets a value that specifies how the reader handles entities.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-341">
            <see cref="T:System.Xml.EntityHandling" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-341">One of the <see cref="T:System.Xml.EntityHandling" /> values.</span>
          </span>
          <span data-ttu-id="36db1-342">如果未指定 <see langword="EntityHandling" />，它将默认为 <see langword="EntityHandling.ExpandCharEntities" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-342">If no <see langword="EntityHandling" /> is specified, it defaults to <see langword="EntityHandling.ExpandCharEntities" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-343">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-343">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-344">此属性可以在下一步后更改动态并且所需效果<xref:System.Xml.XmlTextReader.Read%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="36db1-344">This property can be changed on the fly and takes effect after the next <xref:System.Xml.XmlTextReader.Read%2A> call.</span></span>  
  
 <span data-ttu-id="36db1-345">当`EntityHandling`设置为`ExpandCharEntities`，属性值仅部分进行规范化。</span><span class="sxs-lookup"><span data-stu-id="36db1-345">When `EntityHandling` is set to `ExpandCharEntities`, attribute values are only partially normalized.</span></span> <span data-ttu-id="36db1-346">读取器规范化独立于相邻实体引用节点的内容的每个单独的文本节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-346">The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.</span></span>  
  
 <span data-ttu-id="36db1-347">为了说明该实体之间的区别处理模式，请考虑以下 XML:</span><span class="sxs-lookup"><span data-stu-id="36db1-347">To illustrate the difference between the entity handling modes consider the following XML:</span></span>  
  
```  
<!DOCTYPE doc [<!ENTITY num "123"]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EOF { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EOF : bool" Usage="System.Xml.XmlTextReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-348">Gets a value indicating whether the reader is positioned at the end of the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-348">Gets a value indicating whether the reader is positioned at the end of the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-349">如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-349">
              <see langword="true" /> if the reader is positioned at the end of the stream; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-350">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-350">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-351">Gets the value of an attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-351">Gets the value of an attribute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-352">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-352">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : int -&gt; string" Usage="xmlTextReader.GetAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">
          <span data-ttu-id="36db1-353">The index of the attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-353">The index of the attribute.</span>
          </span>
          <span data-ttu-id="36db1-354">The index is zero-based.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-354">The index is zero-based.</span>
          </span>
          <span data-ttu-id="36db1-355">(The first attribute has index 0.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-355">(The first attribute has index 0.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-356">Gets the value of the attribute with the specified index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-356">Gets the value of the attribute with the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-357">The value of the specified attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-357">The value of the specified attribute.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-358">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-358">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-359">此方法不移动读取器。</span><span class="sxs-lookup"><span data-stu-id="36db1-359">This method does not move the reader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-360">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-360">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string -&gt; string" Usage="xmlTextReader.GetAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="36db1-361">The qualified name of the attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-361">The qualified name of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-362">Gets the value of the attribute with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-362">Gets the value of the attribute with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-363">The value of the specified attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-363">The value of the specified attribute.</span>
          </span>
          <span data-ttu-id="36db1-364">If the attribute is not found, <see langword="null" /> is returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-364">If the attribute is not found, <see langword="null" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-365">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-365">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-366">此方法不移动读取器。</span><span class="sxs-lookup"><span data-stu-id="36db1-366">This method does not move the reader.</span></span>  
  
 <span data-ttu-id="36db1-367">如果读取器定位在`DocumentType`节点，此方法可用于获取 PUBLIC 和 SYSTEM 文本，例如， `reader.GetAttribute("PUBLIC")`</span><span class="sxs-lookup"><span data-stu-id="36db1-367">If the reader is positioned on a `DocumentType` node, this method can be used to get the PUBLIC and SYSTEM literals, for example, `reader.GetAttribute("PUBLIC")`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-368">下面的示例获取的 ISBN 属性的值。</span><span class="sxs-lookup"><span data-stu-id="36db1-368">The following example gets the value of the ISBN attribute.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-369">该示例使用该文件，`attrs.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-369">The example uses the file, `attrs.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.GetAttribute1 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string * string -&gt; string" Usage="xmlTextReader.GetAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="36db1-370">The local name of the attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-370">The local name of the attribute.</span>
          </span>
        </param>
        <param name="namespaceURI">
          <span data-ttu-id="36db1-371">The namespace URI of the attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-371">The namespace URI of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-372">Gets the value of the attribute with the specified local name and namespace URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-372">Gets the value of the attribute with the specified local name and namespace URI.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-373">The value of the specified attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-373">The value of the specified attribute.</span>
          </span>
          <span data-ttu-id="36db1-374">If the attribute is not found, <see langword="null" /> is returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-374">If the attribute is not found, <see langword="null" /> is returned.</span>
          </span>
          <span data-ttu-id="36db1-375">This method does not move the reader.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-375">This method does not move the reader.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-376">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-376">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-377">下面的 XML 包含特定命名空间中的一个属性：</span><span class="sxs-lookup"><span data-stu-id="36db1-377">The following XML contains an attribute in a specific namespace:</span></span>  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 <span data-ttu-id="36db1-378">可以查找`dt:type`属性使用一个参数 （前缀和本地名称） 或 （本地名称和命名空间 URI） 的两个参数：</span><span class="sxs-lookup"><span data-stu-id="36db1-378">You can lookup the `dt:type` attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):</span></span>  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 <span data-ttu-id="36db1-379">要查找`xmlns:dt`属性，请使用以下参数之一：</span><span class="sxs-lookup"><span data-stu-id="36db1-379">To lookup the `xmlns:dt` attribute, use one of the following arguments:</span></span>  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 <span data-ttu-id="36db1-380">此外可以获取此信息使用<xref:System.Xml.XmlTextReader.Prefix%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-380">You can also get this information using the <xref:System.Xml.XmlTextReader.Prefix%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetNamespacesInScope">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetNamespacesInScope(System::Xml::XmlNamespaceScope scope);" />
      <MemberSignature Language="F#" Value="member this.GetNamespacesInScope : System.Xml.XmlNamespaceScope -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="xmlTextReader.GetNamespacesInScope scope" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">
          <span data-ttu-id="36db1-381">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-381">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-382">Gets a collection that contains all namespaces currently in-scope.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-382">Gets a collection that contains all namespaces currently in-scope.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-383">An <see cref="T:System.Collections.IDictionary" /> object that contains all the current in-scope namespaces.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-383">An <see cref="T:System.Collections.IDictionary" /> object that contains all the current in-scope namespaces.</span>
          </span>
          <span data-ttu-id="36db1-384">If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-384">If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-385">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-385">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-386">字典包含前缀作为关键字的命名空间名称的集合。</span><span class="sxs-lookup"><span data-stu-id="36db1-386">The dictionary consists of a collection of namespace names keyed by prefix.</span></span> <span data-ttu-id="36db1-387">它可以用于枚举的范围内命名空间。</span><span class="sxs-lookup"><span data-stu-id="36db1-387">It can be used to enumerate the in-scope namespaces.</span></span> <span data-ttu-id="36db1-388">字典是断开连接的副本的读取器的命名空间列表。</span><span class="sxs-lookup"><span data-stu-id="36db1-388">The dictionary is a disconnected copy of the namespace list of the reader.</span></span> <span data-ttu-id="36db1-389">它将为读取器位置，当前在范围内命名空间列表中，更改保持不变。</span><span class="sxs-lookup"><span data-stu-id="36db1-389">It remains unchanged as the reader position, current in-scope namespace list, changes.</span></span>  
  
 <span data-ttu-id="36db1-390">下表描述了如何<xref:System.Xml.XmlNamespaceScope>枚举值会影响是否或不在默认和内置命名空间由<xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A>。</span><span class="sxs-lookup"><span data-stu-id="36db1-390">The following table describes how the <xref:System.Xml.XmlNamespaceScope> enumeration value affects the whether or not the default and built-in namespaces are returned by <xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A>.</span></span>  
  
|<span data-ttu-id="36db1-391">XmlNamespaceScope 值</span><span class="sxs-lookup"><span data-stu-id="36db1-391">XmlNamespaceScope Value</span></span>|<span data-ttu-id="36db1-392">xmlns: xml</span><span class="sxs-lookup"><span data-stu-id="36db1-392">xmlns:xml</span></span>|<span data-ttu-id="36db1-393">xmlns:xmlns</span><span class="sxs-lookup"><span data-stu-id="36db1-393">xmlns:xmlns</span></span>|<span data-ttu-id="36db1-394">xmlns=""</span><span class="sxs-lookup"><span data-stu-id="36db1-394">xmlns=""</span></span>|  
|-----------------------------|---------------|-----------------|---------------|  
|`All`|<span data-ttu-id="36db1-395">是</span><span class="sxs-lookup"><span data-stu-id="36db1-395">yes</span></span>|<span data-ttu-id="36db1-396">否</span><span class="sxs-lookup"><span data-stu-id="36db1-396">no</span></span>|<span data-ttu-id="36db1-397">否</span><span class="sxs-lookup"><span data-stu-id="36db1-397">no</span></span>|  
|`ExcludeXml`|<span data-ttu-id="36db1-398">否</span><span class="sxs-lookup"><span data-stu-id="36db1-398">no</span></span>|<span data-ttu-id="36db1-399">否</span><span class="sxs-lookup"><span data-stu-id="36db1-399">no</span></span>|<span data-ttu-id="36db1-400">否</span><span class="sxs-lookup"><span data-stu-id="36db1-400">no</span></span>|  
|`Local`|<span data-ttu-id="36db1-401">否</span><span class="sxs-lookup"><span data-stu-id="36db1-401">no</span></span>|<span data-ttu-id="36db1-402">否</span><span class="sxs-lookup"><span data-stu-id="36db1-402">no</span></span>|<span data-ttu-id="36db1-403">是</span><span class="sxs-lookup"><span data-stu-id="36db1-403">yes</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetRemainder">
      <MemberSignature Language="C#" Value="public System.IO.TextReader GetRemainder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextReader GetRemainder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetRemainder" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemainder () As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::TextReader ^ GetRemainder();" />
      <MemberSignature Language="F#" Value="member this.GetRemainder : unit -&gt; System.IO.TextReader" Usage="xmlTextReader.GetRemainder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-404">Gets the remainder of the buffered XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-404">Gets the remainder of the buffered XML.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-405">A <see cref="T:System.IO.TextReader" /> containing the remainder of the buffered XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-405">A <see cref="T:System.IO.TextReader" /> containing the remainder of the buffered XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-406">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-406">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-407">因为<xref:System.Xml.XmlTextReader>进行缓冲`Read`，它必须能够返回未使用的缓冲区的其余部分，以便不会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="36db1-407">Because <xref:System.Xml.XmlTextReader> does a buffered `Read`, it must be able to return the remainder of the unused buffer so that no data is lost.</span></span> <span data-ttu-id="36db1-408">这样，包与其他内容相同的流中的 XML 协议 （如多部分 MIME)。</span><span class="sxs-lookup"><span data-stu-id="36db1-408">This allows protocols (such as multi-part MIME) to package XML in the same stream as other things.</span></span>  
  
 <span data-ttu-id="36db1-409">调用此方法后<xref:System.Xml.XmlTextReader.EOF%2A>设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="36db1-409">After calling this method, <xref:System.Xml.XmlTextReader.EOF%2A> is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-410">下面的示例读取 XML 文档的第一个部分，然后使用`GetRemainder`完成读取使用第二个读取器的文档。</span><span class="sxs-lookup"><span data-stu-id="36db1-410">The following example reads the first part of an XML document and then uses `GetRemainder` to complete reading the document using a second reader.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-411">该示例使用输入的文件`tworeads.xml`。</span><span class="sxs-lookup"><span data-stu-id="36db1-411">The example uses the input file `tworeads.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.GetRemainder Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function HasLineInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasLineInfo();" />
      <MemberSignature Language="F#" Value="abstract member HasLineInfo : unit -&gt; bool&#xA;override this.HasLineInfo : unit -&gt; bool" Usage="xmlTextReader.HasLineInfo " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-412">Gets a value indicating whether the class can return line information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-412">Gets a value indicating whether the class can return line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-413">
            <see langword="true" /> if the class can return line information; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-413">
              <see langword="true" /> if the class can return line information; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-414">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-414">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Xml.XmlTextReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-415">Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> other than <see langword="String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-415">Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> other than <see langword="String.Empty" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-416">如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-416">
              <see langword="true" /> if the node on which the reader is currently positioned can have a <see langword="Value" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-417">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-417">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-418">下表列出具有要返回的值的节点类型。</span><span class="sxs-lookup"><span data-stu-id="36db1-418">The following table lists node types that have a value to return.</span></span>  
  
|<span data-ttu-id="36db1-419">节点类型</span><span class="sxs-lookup"><span data-stu-id="36db1-419">Node type</span></span>|<span data-ttu-id="36db1-420">“值”</span><span class="sxs-lookup"><span data-stu-id="36db1-420">Value</span></span>|  
|---------------|-----------|  
|`Attribute`|<span data-ttu-id="36db1-421">属性的值。</span><span class="sxs-lookup"><span data-stu-id="36db1-421">The value of the attribute.</span></span>|  
|`CDATA`|<span data-ttu-id="36db1-422">CDATA 节的内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-422">The content of the CDATA section.</span></span>|  
|`Comment`|<span data-ttu-id="36db1-423">注释的内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-423">The content of the comment.</span></span>|  
|`DocumentType`|<span data-ttu-id="36db1-424">内部子集。</span><span class="sxs-lookup"><span data-stu-id="36db1-424">The internal subset.</span></span>|  
|`ProcessingInstruction`|<span data-ttu-id="36db1-425">全部内容（不包括指令目标）。</span><span class="sxs-lookup"><span data-stu-id="36db1-425">The entire content, excluding the target.</span></span>|  
|`SignificantWhitespace`|<span data-ttu-id="36db1-426">混合内容模型中标记之间的空白区域。</span><span class="sxs-lookup"><span data-stu-id="36db1-426">The white space between markup in a mixed content model.</span></span>|  
|`Text`|<span data-ttu-id="36db1-427">文本节点的内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-427">The content of the text node.</span></span>|  
|`Whitespace`|<span data-ttu-id="36db1-428">标记之间的空白。</span><span class="sxs-lookup"><span data-stu-id="36db1-428">The white space between markup.</span></span>|  
|`XmlDeclaration`|<span data-ttu-id="36db1-429">声明的内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-429">The content of the declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="36db1-430">下面的示例显示的值可以是每个节点的值。</span><span class="sxs-lookup"><span data-stu-id="36db1-430">The following example displays the value for every node that can have a value.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-431">该示例使用该文件，`book1.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-431">The example uses the file, `book1.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.HasValue Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Xml.XmlTextReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-432">Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-432">Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-433">此属性始终返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-433">This property always returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="36db1-434">（<see cref="T:System.Xml.XmlTextReader" /> 不展开默认属性。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-434">(<see cref="T:System.Xml.XmlTextReader" /> does not expand default attributes.)</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-435">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-435">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-436">此属性仅适用于属性节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-436">This property applies only to attribute nodes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmptyElement { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmptyElement : bool" Usage="System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-437">Gets a value indicating whether the current node is an empty element (for example, <c>&lt;MyElement/&gt;</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-437">Gets a value indicating whether the current node is an empty element (for example, <c>&lt;MyElement/&gt;</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-438">
            <see langword="true" /> 如果当前节点是一个元素 (<see cref="P:System.Xml.XmlTextReader.NodeType" />等于<see langword="XmlNodeType.Element" />)，结尾<c> / &gt; </c>; 否则为<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-438">
              <see langword="true" /> if the current node is an element (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals <see langword="XmlNodeType.Element" />) that ends with <c>/&gt;</c>; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-439">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-439">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-440">此属性使您能够确定下面各项之间的差异：</span><span class="sxs-lookup"><span data-stu-id="36db1-440">This property enables you to determine the difference between the following:</span></span>  
  
 <span data-ttu-id="36db1-441">`<item num="123"/>` (`IsEmptyElement`是`true`)。</span><span class="sxs-lookup"><span data-stu-id="36db1-441">`<item num="123"/>` (`IsEmptyElement` is `true`).</span></span>  
  
 <span data-ttu-id="36db1-442">`<item num="123">` (`IsEmptyElement`是`false`，尽管元素内容为空)。</span><span class="sxs-lookup"><span data-stu-id="36db1-442">`<item num="123">` (`IsEmptyElement` is `false`, although element content is empty).</span></span>  
  
 <span data-ttu-id="36db1-443">相应`EndElement`节点不为空元素生成。</span><span class="sxs-lookup"><span data-stu-id="36db1-443">A corresponding `EndElement` node is not generated for empty elements.</span></span>  
  
 <span data-ttu-id="36db1-444">`IsEmptyElement` 只需报告在源文档中的元素必须为结束元素标记。</span><span class="sxs-lookup"><span data-stu-id="36db1-444">`IsEmptyElement` simply reports whether or not the element in the source document had an end element tag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-445">以下示例显示每个元素的文本内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-445">The following example displays the text content of each element.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-446">该示例使用该文件，`elems.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-446">The example uses the file, `elems.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[int] { System::String ^ get(int i); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^, System::String ^] { System::String ^ get(System::String ^ name, System::String ^ namespaceURI); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * string) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="namespaceURI">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int" Usage="System.Xml.XmlTextReader.LineNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-447">Gets the current line number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-447">Gets the current line number.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-448">当前行号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-448">The current line number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-449">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-449">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-450">此属性通常用于错误报告，但可以随时调用。</span><span class="sxs-lookup"><span data-stu-id="36db1-450">This property is most commonly used for error reporting, but can be called at any time.</span></span> <span data-ttu-id="36db1-451">此属性的起始值`1`。</span><span class="sxs-lookup"><span data-stu-id="36db1-451">The starting value for this property is `1`.</span></span>  
  
 <span data-ttu-id="36db1-452">结合<xref:System.Xml.XmlTextReader.LinePosition%2A>，值为`1,1`指示文档的开头。</span><span class="sxs-lookup"><span data-stu-id="36db1-452">Combined with <xref:System.Xml.XmlTextReader.LinePosition%2A>, a value of `1,1` indicates the start of the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-453">以下示例显示每个节点，包括其深度、 行号和行位置。</span><span class="sxs-lookup"><span data-stu-id="36db1-453">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LinePosition : int" Usage="System.Xml.XmlTextReader.LinePosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-454">Gets the current line position.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-454">Gets the current line position.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-455">当前行位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-455">The current line position.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-456">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-456">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-457">此属性通常用于错误报告，但可以随时调用。</span><span class="sxs-lookup"><span data-stu-id="36db1-457">This property is most commonly used for error reporting, but can be called at any time.</span></span> <span data-ttu-id="36db1-458">该属性的起始值是`1`。</span><span class="sxs-lookup"><span data-stu-id="36db1-458">The property's starting value is `1`.</span></span>  
  
 <span data-ttu-id="36db1-459">所指示的位置是文本的在标记中的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="36db1-459">The position indicated is the first character of text in the markup.</span></span>  
  
```  
<root>  
abc<tag/>  
</root>  
```  
  
 <span data-ttu-id="36db1-460">前面的 XML 文本，在第一行`LinePosition`的`2`对应于字符`r`; 在第二行`LinePosition`的`5`对应于字符`t`; 和第三行`LinePosition`的`3`对应于字符`r`。</span><span class="sxs-lookup"><span data-stu-id="36db1-460">On the first line of the preceding XML text, a `LinePosition` of `2` corresponds to the character `r`; on the second line, a `LinePosition` of `5` corresponds to the character `t`; and on the third line, a `LinePosition` of `3` corresponds to the character `r`.</span></span>  
  
 <span data-ttu-id="36db1-461">结合<xref:System.Xml.XmlTextReader.LineNumber%2A>，值为`1,1`指示文档的开头。</span><span class="sxs-lookup"><span data-stu-id="36db1-461">Combined with <xref:System.Xml.XmlTextReader.LineNumber%2A>, a value of `1,1` indicates the start of the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-462">以下示例显示每个节点，包括其深度、 行号和行位置。</span><span class="sxs-lookup"><span data-stu-id="36db1-462">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.XmlTextReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-463">Gets the local name of the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-463">Gets the local name of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-464">移除了前缀的当前节点的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-464">The name of the current node with the prefix removed.</span>
          </span>
          <span data-ttu-id="36db1-465">例如，<see langword="LocalName" />是<see langword="book" />元素<c> &lt;bk:book&gt;</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-465">For example, <see langword="LocalName" /> is <see langword="book" /> for the element <c>&lt;bk:book&gt;</c>.</span>
          </span>
          <span data-ttu-id="36db1-466">对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 <see langword="String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-466">For node types that do not have a name (like <see langword="Text" />, <see langword="Comment" />, and so on), this property returns <see langword="String.Empty" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-467">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-467">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-468">下面的示例显示每个节点的本地名称和，如果它们存在，前缀和命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="36db1-468">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-469">该示例使用该文件，`book2.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-469">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="override this.LookupNamespace : string -&gt; string" Usage="xmlTextReader.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <span data-ttu-id="36db1-470">The prefix whose namespace URI you want to resolve.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-470">The prefix whose namespace URI you want to resolve.</span>
          </span>
          <span data-ttu-id="36db1-471">To match the default namespace, pass an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-471">To match the default namespace, pass an empty string.</span>
          </span>
          <span data-ttu-id="36db1-472">This string does not have to be atomized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-472">This string does not have to be atomized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-473">Resolves a namespace prefix in the current element's scope.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-473">Resolves a namespace prefix in the current element's scope.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-474">The namespace URI to which the prefix maps or <see langword="null" /> if no matching prefix is found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-474">The namespace URI to which the prefix maps or <see langword="null" /> if no matching prefix is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-475">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-475">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-476">在以下 XML 中，如果读取器定位在`href`属性，该前缀`a`解析通过调用`reader.LookupNamespace("a")`。</span><span class="sxs-lookup"><span data-stu-id="36db1-476">In the following XML, if the reader is positioned on the `href` attribute, the prefix `a` is resolved by calling `reader.LookupNamespace("a")`.</span></span> <span data-ttu-id="36db1-477">返回的字符串是`urn:456`。</span><span class="sxs-lookup"><span data-stu-id="36db1-477">The returned string is `urn:456`.</span></span>  
  
```xml  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-478">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property is set to <see langword="true" /> and the <paramref name="prefix" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-478">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property is set to <see langword="true" /> and the <paramref name="prefix" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-479">Moves to the specified attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-479">Moves to the specified attribute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-480">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-480">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void MoveToAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : int -&gt; unit" Usage="xmlTextReader.MoveToAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">
          <span data-ttu-id="36db1-481">The index of the attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-481">The index of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-482">Moves to the attribute with the specified index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-482">Moves to the attribute with the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-483">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-483">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-484">下面的示例显示当前节点上的所有属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-484">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-485">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-485">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string -&gt; bool" Usage="xmlTextReader.MoveToAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="36db1-486">The qualified name of the attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-486">The qualified name of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-487">Moves to the attribute with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-487">Moves to the attribute with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-488">
            <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-488">
              <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="36db1-489">If <see langword="false" />, the reader's position does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-489">If <see langword="false" />, the reader's position does not change.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-490">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-490">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-491">在调用`MoveToAttribute`，则<xref:System.Xml.XmlTextReader.Name%2A>， <xref:System.Xml.XmlTextReader.NamespaceURI%2A>，和<xref:System.Xml.XmlTextReader.Prefix%2A>属性反映了该属性的属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-491">After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string * string -&gt; bool" Usage="xmlTextReader.MoveToAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="36db1-492">The local name of the attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-492">The local name of the attribute.</span>
          </span>
        </param>
        <param name="namespaceURI">
          <span data-ttu-id="36db1-493">The namespace URI of the attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-493">The namespace URI of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-494">Moves to the attribute with the specified local name and namespace URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-494">Moves to the attribute with the specified local name and namespace URI.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-495">
            <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-495">
              <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="36db1-496">If <see langword="false" />, the reader's position does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-496">If <see langword="false" />, the reader's position does not change.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-497">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-497">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-498">在调用`MoveToAttribute`，则<xref:System.Xml.XmlTextReader.Name%2A>， <xref:System.Xml.XmlTextReader.NamespaceURI%2A>，和<xref:System.Xml.XmlTextReader.Prefix%2A>属性反映了该属性的属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-498">After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToElement();" />
      <MemberSignature Language="F#" Value="override this.MoveToElement : unit -&gt; bool" Usage="xmlTextReader.MoveToElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-499">Moves to the element that contains the current attribute node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-499">Moves to the element that contains the current attribute node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-500">
            <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <see langword="false" /> if the reader is not positioned on an attribute (the position of the reader does not change).</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-500">
              <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <see langword="false" /> if the reader is not positioned on an attribute (the position of the reader does not change).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-501">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-501">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-502">此方法用于通过其属性导航后返回到该元素。</span><span class="sxs-lookup"><span data-stu-id="36db1-502">Use this method to return to an element after navigating through its attributes.</span></span> <span data-ttu-id="36db1-503">此方法将读取器移动到以下节点类型之一： `Element`， `DocumentType`，或`XmlDeclaration`。</span><span class="sxs-lookup"><span data-stu-id="36db1-503">This method moves the reader to one of the following node types: `Element`, `DocumentType`, or `XmlDeclaration`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-504">下面的示例显示当前节点上的所有属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-504">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToFirstAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToFirstAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToFirstAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-505">Moves to the first attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-505">Moves to the first attribute.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-506">
            <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false" /> (the position of the reader does not change).</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-506">
              <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false" /> (the position of the reader does not change).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-507">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-507">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-508">下面的示例获取的根节点的第一个属性的值。</span><span class="sxs-lookup"><span data-stu-id="36db1-508">The following example gets the value of the first attribute of the root node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-509">该示例使用该文件，`attrs.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-509">The example uses the file, `attrs.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.MoveToFirstAttribute Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToNextAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToNextAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToNextAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-510">Moves to the next attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-510">Moves to the next attribute.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-511">
            <see langword="true" /> if there is a next attribute; <see langword="false" /> if there are no more attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-511">
              <see langword="true" /> if there is a next attribute; <see langword="false" /> if there are no more attributes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-512">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-512">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-513">如果当前节点是元素节点，此方法等同于<xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>。</span><span class="sxs-lookup"><span data-stu-id="36db1-513">If the current node is an element node, this method is equivalent to <xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>.</span></span> <span data-ttu-id="36db1-514">如果`MoveToNextAttribute`返回`true`，读取器移动到下一步属性; 否则为读取器位置不会更改。</span><span class="sxs-lookup"><span data-stu-id="36db1-514">If `MoveToNextAttribute` returns `true`, the reader moves to the next attribute; otherwise, the position of the reader does not change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-515">下面的示例显示当前节点上的所有属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-515">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xml.XmlTextReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-516">Gets the qualified name of the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-516">Gets the qualified name of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-517">当前节点的限定名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-517">The qualified name of the current node.</span>
          </span>
          <span data-ttu-id="36db1-518">例如，<see langword="Name" />是<see langword="bk:book" />元素<c> &lt;bk:book&gt;</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-518">For example, <see langword="Name" /> is <see langword="bk:book" /> for the element <c>&lt;bk:book&gt;</c>.</span>
          </span>
          <span data-ttu-id="36db1-519">返回的名称取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-519">The name returned is dependent on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node.</span>
          </span>
          <span data-ttu-id="36db1-520">下列节点类型返回所列的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-520">The following node types return the listed values.</span>
          </span>
          <span data-ttu-id="36db1-521">所有其他节点类型返回空字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-521">All other node types return an empty string.</span>
          </span>
          <span data-ttu-id="36db1-522">
            <list type="table">
              <listheader>
                <term> 节点类型</term>
                <description>名称</description>
              </listheader>
              <item>
                <term>
                  <see langword="Attribute" />
                </term>
                <description>的属性的名称。</description>
              </item>
              <item>
                <term>
                  <see langword="DocumentType" />
                </term>
                <description> 文档类型名称。</description>
              </item>
              <item>
                <term>
                  <see langword="Element" />
                </term>
                <description> 标记名称。</description>
              </item>
              <item>
                <term>
                  <see langword="EntityReference" />
                </term>
                <description> 引用的实体的名称。</description>
              </item>
              <item>
                <term>
                  <see langword="ProcessingInstruction" />
                </term>
                <description> 处理指令的目标。</description>
              </item>
              <item>
                <term>
                  <see langword="XmlDeclaration" />
                </term>
                <description> 文本字符串<see langword="xml" />。  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-522">
              <list type="table">
                <listheader>
                  <term> Node Type  </term>
                  <description> Name  </description>
                </listheader>
                <item>
                  <term>
                    <see langword="Attribute" />
                  </term>
                  <description> The name of the attribute.  </description>
                </item>
                <item>
                  <term>
                    <see langword="DocumentType" />
                  </term>
                  <description> The document type name.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Element" />
                  </term>
                  <description> The tag name.  </description>
                </item>
                <item>
                  <term>
                    <see langword="EntityReference" />
                  </term>
                  <description> The name of the entity referenced.  </description>
                </item>
                <item>
                  <term>
                    <see langword="ProcessingInstruction" />
                  </term>
                  <description> The target of the processing instruction.  </description>
                </item>
                <item>
                  <term>
                    <see langword="XmlDeclaration" />
                  </term>
                  <description> The literal string <see langword="xml" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-523">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-523">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-524">下面的示例读取 XML 文件，并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-524">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-525">此示例使用文件`items.xml`。</span><span class="sxs-lookup"><span data-stu-id="36db1-525">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlTextReader.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-526">Gets or sets a value indicating whether to do namespace support.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-526">Gets or sets a value indicating whether to do namespace support.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-527">要进行命名空间支持，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-527">
              <see langword="true" /> to do namespace support; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="36db1-528">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-528">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-529">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-529">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-530">此属性确定读取器是否支持位于 www.w3.org/TR/REC-xml-names XML 建议中的 W3C 命名空间。</span><span class="sxs-lookup"><span data-stu-id="36db1-530">This property determines whether the reader supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</span></span>  
  
 <span data-ttu-id="36db1-531">`Namespaces`发生读的操作后，无法设置属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-531">The `Namespaces` property cannot be set after a read operation has occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-532">Setting this property after a read operation has occurred (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is not <see langword="ReadState.Initial" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-532">Setting this property after a read operation has occurred (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is not <see langword="ReadState.Initial" />).</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceURI : string" Usage="System.Xml.XmlTextReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-533">Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-533">Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-534">当前节点的命名空间 URI；否则为空字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-534">The namespace URI of the current node; otherwise an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-535">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-535">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-536">此属性是与相关`Element`和`Attribute`仅限节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-536">This property is relevant to `Element` and `Attribute` nodes only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-537">下面的示例显示每个节点的本地名称和，如果它们存在，前缀和命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="36db1-537">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-538">该示例使用该文件，`book2.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-538">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.XmlTextReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-539">Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-539">Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-540">
            <see langword="XmlNameTable" />，它使你能够获取该节点内字符串的原子化版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-540">The <see langword="XmlNameTable" /> enabling you to get the atomized version of a string within the node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-541">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-541">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-542">从返回的所有节点和属性名称<xref:System.Xml.XmlTextReader>使用原子化`NameTable`。</span><span class="sxs-lookup"><span data-stu-id="36db1-542">All node and attribute names returned from <xref:System.Xml.XmlTextReader> are atomized using the `NameTable`.</span></span> <span data-ttu-id="36db1-543">当多次返回相同的名称 (例如， `Customer`)，然后相同`String`对象返回为该名称。</span><span class="sxs-lookup"><span data-stu-id="36db1-543">When the same name is returned multiple times (for example, `Customer`), then the same `String` object is returned for that name.</span></span> <span data-ttu-id="36db1-544">这使您能够编写高效的代码，does 对象上而不是成本高昂的字符串比较这些字符串的比较。</span><span class="sxs-lookup"><span data-stu-id="36db1-544">This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.XmlTextReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-545">Gets the type of the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-545">Gets the type of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-546">
            <see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-546">One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-547">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-547">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-548">此属性永远不会返回以下`XmlNodeType`类型： `Document`， `DocumentFragment`， `Entity`， `EndEntity`，或`Notation`。</span><span class="sxs-lookup"><span data-stu-id="36db1-548">This property never returns the following `XmlNodeType` types: `Document`, `DocumentFragment`, `Entity`, `EndEntity`, or `Notation`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-549">下面的示例读取 XML 文件，并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-549">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-550">此示例使用文件`items.xml`。</span><span class="sxs-lookup"><span data-stu-id="36db1-550">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Normalization">
      <MemberSignature Language="C#" Value="public bool Normalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Normalization" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Normalization" />
      <MemberSignature Language="VB.NET" Value="Public Property Normalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Normalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Normalization : bool with get, set" Usage="System.Xml.XmlTextReader.Normalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-551">Gets or sets a value indicating whether to normalize white space and attribute values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-551">Gets or sets a value indicating whether to normalize white space and attribute values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-552">如果要进行规范化，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-552">
              <see langword="true" /> to normalize; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="36db1-553">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-553">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-554">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-554">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-555">此属性可以随时更改，将对下一个读取操作生效。</span><span class="sxs-lookup"><span data-stu-id="36db1-555">This property can be changed at any time and takes effect on the next read operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36db1-556">如果<xref:System.Xml.XmlTextReader>用来构造<xref:System.Xml.XmlValidatingReader>，以标准化属性值，请`Normalization`必须设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="36db1-556">If the <xref:System.Xml.XmlTextReader> is used to construct an <xref:System.Xml.XmlValidatingReader>, to normalize attribute values, `Normalization` must be set to `true`.</span></span>  
  
 <span data-ttu-id="36db1-557">如果`Normalization`设置为`false`，这还将禁用的字符范围检查数字实体。</span><span class="sxs-lookup"><span data-stu-id="36db1-557">If `Normalization` is set to `false`, this also disables character range checking for numeric entities.</span></span> <span data-ttu-id="36db1-558">因此，字符实体，例如`&#0;`，允许使用。</span><span class="sxs-lookup"><span data-stu-id="36db1-558">As a result, character entities, such as `&#0;`, are allowed.</span></span>  
  
 <span data-ttu-id="36db1-559">下面介绍属性值的标准化：</span><span class="sxs-lookup"><span data-stu-id="36db1-559">The following describes attribute value normalization:</span></span>  
  
-   <span data-ttu-id="36db1-560">对于字符引用，将所引用的字符追加到属性值。</span><span class="sxs-lookup"><span data-stu-id="36db1-560">For a character reference, append the referenced character to the attribute value.</span></span>  
  
-   <span data-ttu-id="36db1-561">对于实体引用，循环处理该实体的替换文本。</span><span class="sxs-lookup"><span data-stu-id="36db1-561">For an entity reference, recursively process the replacement text of the entity.</span></span>  
  
-   <span data-ttu-id="36db1-562">空白字符 （#x20、 #xD、 #xA、 #x9），#x20 追加到规范化的值。</span><span class="sxs-lookup"><span data-stu-id="36db1-562">For a white space character (#x20, #xD, #xA, #x9), append #x20 to the normalized value.</span></span> <span data-ttu-id="36db1-563">（仅单个 #x20 追加外部已分析实体的一部分或内部分析的实体的文本实体值的"#xD #xA"序列中）。</span><span class="sxs-lookup"><span data-stu-id="36db1-563">(Only a single #x20 is appended for a "#xD#xA" sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity.)</span></span>  
  
-   <span data-ttu-id="36db1-564">通过将其他字符追加到已标准化的值处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="36db1-564">Process other characters by appending them to the normalized value.</span></span>  
  
-   <span data-ttu-id="36db1-565">如果已声明的值不是 CDATA，放弃任何前导和尾随空格 (#x20) 字符和空格 (#x20) 字符的序列替换为单个空格 (#x20) 字符。</span><span class="sxs-lookup"><span data-stu-id="36db1-565">If the declared value is not CDATA, discard any leading and trailing space (#x20) characters and replace sequences of space (#x20) characters with a single space (#x20) character.</span></span>  
  
 <span data-ttu-id="36db1-566">`XmlTextReader`仅执行属性或 CDATA 规范化。</span><span class="sxs-lookup"><span data-stu-id="36db1-566">The `XmlTextReader` only performs attribute or CDATA normalization.</span></span> <span data-ttu-id="36db1-567">它不会执行特定于 DTD 的规范化，除非包装内`XmlValidatingReader`。</span><span class="sxs-lookup"><span data-stu-id="36db1-567">It does not do DTD-specific normalization unless wrapped within an `XmlValidatingReader`.</span></span>  
  
 <span data-ttu-id="36db1-568">请参阅有关规范化的进一步讨论符合 W3C XML 1.0 建议。</span><span class="sxs-lookup"><span data-stu-id="36db1-568">Refer to the W3C XML 1.0 recommendation for further discussion on normalization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-569">下面的示例演示读取器行为的规范化启用然后又关闭。</span><span class="sxs-lookup"><span data-stu-id="36db1-569">The following example shows reader behavior with normalization turned on and then off.</span></span>  
  
 [!code-cpp[XmlTextReader.Normalization#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Normalization/CPP/readnormal.cpp#1)]
 [!code-csharp[XmlTextReader.Normalization#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Normalization/CS/readnormal.cs#1)]
 [!code-vb[XmlTextReader.Normalization#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Normalization/VB/readnormal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-570">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-570">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="System.Xml.XmlTextReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-571">Gets the namespace prefix associated with the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-571">Gets the namespace prefix associated with the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-572">与当前节点关联的命名空间前缀。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-572">The namespace prefix associated with the current node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-573">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-573">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-574">下面的示例显示每个节点的本地名称和，如果它们存在，前缀和命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="36db1-574">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-575">该示例使用该文件，`book2.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-575">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-576">Gets or sets a value indicating whether to allow DTD processing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-576">Gets or sets a value indicating whether to allow DTD processing.</span>
          </span>
          <span data-ttu-id="36db1-577">This property is obsolete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-577">This property is obsolete.</span>
          </span>
          <span data-ttu-id="36db1-578">Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-578">Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-579">如果不允许 DTD 处理，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-579">
              <see langword="true" /> to disallow DTD processing; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="36db1-580">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-580">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-581">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-581">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-582">DTD 处理启用默认情况下向后兼容性。</span><span class="sxs-lookup"><span data-stu-id="36db1-582">DTD processing is enabled by default for backwards compatibility.</span></span> <span data-ttu-id="36db1-583">但是，除非应用程序需要 DTD 处理，应禁用此设置。</span><span class="sxs-lookup"><span data-stu-id="36db1-583">However, unless your application requires DTD processing, you should disable this setting.</span></span> <span data-ttu-id="36db1-584">禁用 DTD 处理对避免受到某些拒绝服务攻击非常有用。</span><span class="sxs-lookup"><span data-stu-id="36db1-584">Disabling DTD processing can be useful in preventing certain denial of service attacks.</span></span> <span data-ttu-id="36db1-585">如果设置为`true`，读取器将引发<xref:System.Xml.XmlException>时遇到任何 DTD 内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-585">If set to `true`, the reader throws an <xref:System.Xml.XmlException> when any DTD content is encountered.</span></span>  
  
 <span data-ttu-id="36db1-586">如果必须启用了 DTD 处理，需要注意的包括来自不受信任的源和可能的拒绝服务攻击的 Dtd。</span><span class="sxs-lookup"><span data-stu-id="36db1-586">If you have DTD processing enabled, you need to be aware of including DTDs from untrusted sources and possible denial of service attacks.</span></span> <span data-ttu-id="36db1-587">使用<xref:System.Xml.XmlSecureResolver>来限制的资源的<xref:System.Xml.XmlTextReader>可以访问。</span><span class="sxs-lookup"><span data-stu-id="36db1-587">Use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the <xref:System.Xml.XmlTextReader> can access.</span></span> <span data-ttu-id="36db1-588">还可以设计应用程序以使 XML 处理受内存和时间的约束。</span><span class="sxs-lookup"><span data-stu-id="36db1-588">You can also design your application so that the XML processing is memory and time constrained.</span></span> <span data-ttu-id="36db1-589">例如，在 ASP.NET 应用程序中配置超时限制</span><span class="sxs-lookup"><span data-stu-id="36db1-589">For example, configure time-out limits in your ASP.NET application</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char" Usage="System.Xml.XmlTextReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-590">Gets the quotation mark character used to enclose the value of an attribute node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-590">Gets the quotation mark character used to enclose the value of an attribute node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-591">用于括起属性节点的值的引号字符（" 或 '）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-591">The quotation mark character (" or ') used to enclose the value of an attribute node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-592">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-592">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-593">此属性仅适用于属性节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-593">This property applies only to an attribute node.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="xmlTextReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-594">Reads the next node from the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-594">Reads the next node from the stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-595">
            <see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-595">
              <see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes to read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-596">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-596">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-597">当首次创建并初始化一个读取器时，没有任何可用信息。</span><span class="sxs-lookup"><span data-stu-id="36db1-597">When a reader is first created and initialized, there is no information available.</span></span> <span data-ttu-id="36db1-598">必须调用`Read`读取的第一个节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-598">You must call `Read` to read the first node.</span></span>  
  
 <span data-ttu-id="36db1-599">此方法需要至少四个字节从数据流才能开始分析。</span><span class="sxs-lookup"><span data-stu-id="36db1-599">This method requires at least four bytes from the data stream in order to begin parsing.</span></span> <span data-ttu-id="36db1-600">如果返回少于四个字节，并且在流中没有更多数据，该方法将失败。</span><span class="sxs-lookup"><span data-stu-id="36db1-600">If fewer than four bytes are returned and there is no more data in the stream, the method will fail.</span></span> <span data-ttu-id="36db1-601">如果在流中没有更多的数据，该方法将阻止分析直到收到的第四个字节。</span><span class="sxs-lookup"><span data-stu-id="36db1-601">If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-602">下面的示例读取 XML 文件，并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-602">The following example reads an XML file and displays each node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-603">此示例使用文件`items.xml`。</span><span class="sxs-lookup"><span data-stu-id="36db1-603">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="36db1-604">An error occurred while parsing the XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-604">An error occurred while parsing the XML.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool ReadAttributeValue();" />
      <MemberSignature Language="F#" Value="override this.ReadAttributeValue : unit -&gt; bool" Usage="xmlTextReader.ReadAttributeValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-605">Parses the attribute value into one or more <see langword="Text" />, <see langword="EntityReference" />, or <see langword="EndEntity" /> nodes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-605">Parses the attribute value into one or more <see langword="Text" />, <see langword="EntityReference" />, or <see langword="EndEntity" /> nodes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-606">
            <see langword="true" /> if there are nodes to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-606">
              <see langword="true" /> if there are nodes to return.</span>
          </span>
          <span data-ttu-id="36db1-607">
            <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-607">
              <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</span>
          </span>
          <span data-ttu-id="36db1-608">An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of <see langword="String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-608">An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of <see langword="String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-609">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-609">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-610">使用此方法之后调用`MoveToAttribute`通读组成属性值的文本或实体引用节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-610">Use this method after calling `MoveToAttribute` to read through the text or entity reference nodes that make up the attribute value.</span></span> <span data-ttu-id="36db1-611"><xref:System.Xml.XmlReader.Depth%2A>的属性值的节点是一个加上属性节点的深度; 它递增和递减一个单步执行和跳出执行常规实体引用时。</span><span class="sxs-lookup"><span data-stu-id="36db1-611">The <xref:System.Xml.XmlReader.Depth%2A> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-612">下面的示例读取一个特性，其文本和实体节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-612">The following example reads an attribute with text and entity nodes.</span></span>  
  
 [!code-cpp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CPP/readattrval.cpp#1)]
 [!code-csharp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CS/readattrval.cs#1)]
 [!code-vb[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/VB/readattrval.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBase64">
      <MemberSignature Language="C#" Value="public int ReadBase64 (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBase64(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBase64 (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBase64(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBase64 (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="36db1-613">The array of characters that serves as the buffer to which the text contents are written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-613">The array of characters that serves as the buffer to which the text contents are written.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="36db1-614">The zero-based index into the array specifying where the method can begin to write to the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-614">The zero-based index into the array specifying where the method can begin to write to the buffer.</span>
          </span>
        </param>
        <param name="len">
          <span data-ttu-id="36db1-615">The number of bytes to write into the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-615">The number of bytes to write into the buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-616">Decodes Base64 and returns the decoded binary bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-616">Decodes Base64 and returns the decoded binary bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-617">The number of bytes written to the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-617">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-618">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-618">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-619">如<xref:System.Xml.XmlTextReader.ReadChars%2A>，可以连续调用此方法以读取大的嵌入文本流。</span><span class="sxs-lookup"><span data-stu-id="36db1-619">Like <xref:System.Xml.XmlTextReader.ReadChars%2A>, this method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="36db1-620">它对 Base64 内容进行解码并返回已解码的二进制字节 （例如，内联 Base64 编码 GIF 图像） 到缓冲区。</span><span class="sxs-lookup"><span data-stu-id="36db1-620">It decodes Base64 content and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</span></span> <span data-ttu-id="36db1-621">请参阅 RFC 1521。</span><span class="sxs-lookup"><span data-stu-id="36db1-621">See RFC 1521.</span></span> <span data-ttu-id="36db1-622">(您可以获得从 Rfc[征求意见文档网站](https://www.rfc-editor.org)。)</span><span class="sxs-lookup"><span data-stu-id="36db1-622">(You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-623">下面的示例读取包含 Base64 和 BinHex 数据的文件。</span><span class="sxs-lookup"><span data-stu-id="36db1-623">The following example reads a file containing Base64 and BinHex data.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-624">此示例使用文件 `binary.xml`</span><span class="sxs-lookup"><span data-stu-id="36db1-624">The sample uses the file `binary.xml`</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="36db1-625">The Base64 sequence is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-625">The Base64 sequence is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-626">The value of <paramref name="array" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-626">The value of <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-627">
            <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-627">
              <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBinHex">
      <MemberSignature Language="C#" Value="public int ReadBinHex (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBinHex(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBinHex (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBinHex(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBinHex (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="36db1-628">The byte array that serves as the buffer to which the decoded binary bytes are written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-628">The byte array that serves as the buffer to which the decoded binary bytes are written.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="36db1-629">The zero-based index into the array specifying where the method can begin to write to the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-629">The zero-based index into the array specifying where the method can begin to write to the buffer.</span>
          </span>
        </param>
        <param name="len">
          <span data-ttu-id="36db1-630">The number of bytes to write into the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-630">The number of bytes to write into the buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-631">Decodes <see langword="BinHex" /> and returns the decoded binary bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-631">Decodes <see langword="BinHex" /> and returns the decoded binary bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-632">The number of bytes written to your buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-632">The number of bytes written to your buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-633">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-633">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-634">如<xref:System.Xml.XmlTextReader.ReadChars%2A>，可以连续调用此方法以读取大的嵌入文本流。</span><span class="sxs-lookup"><span data-stu-id="36db1-634">Like <xref:System.Xml.XmlTextReader.ReadChars%2A>, this method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="36db1-635">解码时大大`BinHex`内容，并返回已解码的二进制字节 (例如，内联`BinHex`编码的 GIF 图像) 到缓冲区。</span><span class="sxs-lookup"><span data-stu-id="36db1-635">It decodes `BinHex` content and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-636">下面的示例读取一个文件，其中包含`Base64`和`BinHex`数据。</span><span class="sxs-lookup"><span data-stu-id="36db1-636">The following example reads a file containing `Base64` and `BinHex` data.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-637">此示例使用文件 `binary.xml`</span><span class="sxs-lookup"><span data-stu-id="36db1-637">The sample uses the file `binary.xml`</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="36db1-638">The <see langword="BinHex" /> sequence is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-638">The <see langword="BinHex" /> sequence is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-639">The value of <paramref name="array" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-639">The value of <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-640">
            <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-640">
              <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadChars">
      <MemberSignature Language="C#" Value="public int ReadChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadChars (buffer As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.ReadChars : char[] * int * int -&gt; int" Usage="xmlTextReader.ReadChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="36db1-641">The array of characters that serves as the buffer to which the text contents are written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-641">The array of characters that serves as the buffer to which the text contents are written.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="36db1-642">The position within <c>buffer</c> where the method can begin writing text contents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-642">The position within <c>buffer</c> where the method can begin writing text contents.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="36db1-643">The number of characters to write into <c>buffer</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-643">The number of characters to write into <c>buffer</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-644">Reads the text contents of an element into a character buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-644">Reads the text contents of an element into a character buffer.</span>
          </span>
          <span data-ttu-id="36db1-645">This method is designed to read large streams of embedded text by calling it successively.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-645">This method is designed to read large streams of embedded text by calling it successively.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-646">The number of characters read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-646">The number of characters read.</span>
          </span>
          <span data-ttu-id="36db1-647">This can be <see langword="0" /> if the reader is not positioned on an element or if there is no more text content to return in the current context.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-647">This can be <see langword="0" /> if the reader is not positioned on an element or if there is no more text content to return in the current context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-648">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-648">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-649">这是文本的最有效的方法来处理非常大的 XML 文档中嵌入流。</span><span class="sxs-lookup"><span data-stu-id="36db1-649">This is the most efficient way to process very large streams of text embedded in an XML document.</span></span> <span data-ttu-id="36db1-650">而不是分配大的字符串对象`ReadChars`返回一次一个缓冲区的文本内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-650">Rather than allocating large string objects, `ReadChars` returns text content a buffer at a time.</span></span> <span data-ttu-id="36db1-651">此方法用于处理只能在元素节点上。</span><span class="sxs-lookup"><span data-stu-id="36db1-651">This method is designed to work only on element nodes.</span></span> <span data-ttu-id="36db1-652">其他节点类型的原因`ReadChars`以返回`0`。</span><span class="sxs-lookup"><span data-stu-id="36db1-652">Other node types cause `ReadChars` to return `0`.</span></span>  
  
 <span data-ttu-id="36db1-653">在以下 XML 中，如果读取器定位在开始标记上`ReadChars`返回`test`，并将读取器后的结束标记。</span><span class="sxs-lookup"><span data-stu-id="36db1-653">In the following XML, if the reader is positioned on the start tag, `ReadChars` returns `test` and positions the reader after the end tag.</span></span>  
  
```xml  
<Item>test</Item>  
```  
  
 <span data-ttu-id="36db1-654">`ReadChars` 具有以下功能：</span><span class="sxs-lookup"><span data-stu-id="36db1-654">`ReadChars` has the following functionality:</span></span>  
  
-   <span data-ttu-id="36db1-655">此方法旨在仅元素节点上起作用。</span><span class="sxs-lookup"><span data-stu-id="36db1-655">This method is designed to work on element nodes only.</span></span> <span data-ttu-id="36db1-656">其他节点类型导致`ReadChars`返回 0。</span><span class="sxs-lookup"><span data-stu-id="36db1-656">Other node types cause `ReadChars` to return 0.</span></span>  
  
-   <span data-ttu-id="36db1-657">此方法返回的实际字符内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-657">This method returns the actual character content.</span></span> <span data-ttu-id="36db1-658">没有尝试解析实体、 CDATA 或遇到的任何其他标记。</span><span class="sxs-lookup"><span data-stu-id="36db1-658">There is no attempt to resolve entities, CDATA, or any other markup encountered.</span></span> <span data-ttu-id="36db1-659">`ReadChars` 返回开始标记和结束标记，其中包括标记之间的所有内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-659">`ReadChars` returns everything between the start tag and the end tag, including markup.</span></span>  
  
-   <span data-ttu-id="36db1-660">`ReadChars` 将忽略不是格式良好的 XML 标记。</span><span class="sxs-lookup"><span data-stu-id="36db1-660">`ReadChars` ignores XML markup that is not well-formed.</span></span> <span data-ttu-id="36db1-661">例如，当读取以下 XML 字符串`<A>1<A>2</A>`，`ReadChars`返回`1<A>2</A>`。</span><span class="sxs-lookup"><span data-stu-id="36db1-661">For example, when reading the following XML string `<A>1<A>2</A>`, `ReadChars` returns `1<A>2</A>`.</span></span> <span data-ttu-id="36db1-662">（从匹配的元素对返回标记并忽略其他。）</span><span class="sxs-lookup"><span data-stu-id="36db1-662">(It returns markup from the matching element pair and ignores others.)</span></span>  
  
-   <span data-ttu-id="36db1-663">此方法不执行任何规范化。</span><span class="sxs-lookup"><span data-stu-id="36db1-663">This method does not do any normalization.</span></span>  
  
-   <span data-ttu-id="36db1-664">当`ReadChars`已到达末尾的字符流，它将返回值 0 和读取器定位在结束标记之后。</span><span class="sxs-lookup"><span data-stu-id="36db1-664">When `ReadChars` has reached the end of the character stream, it returns the value 0 and the reader is positioned after the end tag.</span></span>  
  
-   <span data-ttu-id="36db1-665">方法使用时不可用时读取属性`ReadChars`。</span><span class="sxs-lookup"><span data-stu-id="36db1-665">Attribute read methods are not available while using `ReadChars`.</span></span>  
  
 <span data-ttu-id="36db1-666">例如，使用以下 XML:</span><span class="sxs-lookup"><span data-stu-id="36db1-666">For example, using the following XML:</span></span>  
  
```xml  
<thing>  
 some text  
</thing>  
<item>  
</item>  
```  
  
 <span data-ttu-id="36db1-667">读取器定位在`<item>`元素末尾的 while 循环。</span><span class="sxs-lookup"><span data-stu-id="36db1-667">The reader is positioned on the `<item>` element at the end of the while loop.</span></span>  
  
```csharp  
if (XmlNodeType.Element == reader.NodeType && "thing" == reader.Name)  
{  
 while(0 != reader.ReadChars(buffer, 0, 1)  
 {  
 // Do something.  
 // Attribute values are not available at this point.  
 }  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="36db1-668">下面的示例读取在 XML 中使用`ReadChars`。</span><span class="sxs-lookup"><span data-stu-id="36db1-668">The following example reads in XML using `ReadChars`.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-669">示例使用 `items.xml` 文件作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-669">The example uses the `items.xml` file as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="36db1-670">
            <paramref name="count" /> is greater than the space specified in the <paramref name="buffer" /> (buffer size - <paramref name="index" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-670">
              <paramref name="count" /> is greater than the space specified in the <paramref name="buffer" /> (buffer size - <paramref name="index" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-671">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-671">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-672">
            <paramref name="index" />
            <see langword="&lt; 0" /> or <paramref name="count" /><see langword="&lt; 0" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-672">
              <paramref name="index" />
              <see langword="&lt; 0" /> or <paramref name="count" /><see langword="&lt; 0" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="36db1-673">The buffer into which to copy the resulting text.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-673">The buffer into which to copy the resulting text.</span>
          </span>
          <span data-ttu-id="36db1-674">This value cannot be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-674">This value cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="36db1-675">The offset into the buffer where to start copying the result.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-675">The offset into the buffer where to start copying the result.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="36db1-676">The maximum number of bytes to copy into the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-676">The maximum number of bytes to copy into the buffer.</span>
          </span>
          <span data-ttu-id="36db1-677">The actual number of bytes copied is returned from this method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-677">The actual number of bytes copied is returned from this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-678">Reads the content and returns the <see langword="Base64" /> decoded binary bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-678">Reads the content and returns the <see langword="Base64" /> decoded binary bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-679">The number of bytes written to the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-679">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-680">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-680">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-681">此方法的内容流式处理、 解码`Base64`内容，并返回已解码的二进制字节 (例如，内联`Base64`-编码的 GIF 图像) 到缓冲区。</span><span class="sxs-lookup"><span data-stu-id="36db1-681">This method streams the content, decodes the `Base64` content, and returns the decoded binary bytes (for example, an inline `Base64`-encoded GIF image) into the buffer.</span></span> <span data-ttu-id="36db1-682">可以连续调用此方法，以读取大的嵌入文本流。</span><span class="sxs-lookup"><span data-stu-id="36db1-682">This method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="36db1-683">有关详细信息，请参阅 RFC 1521"MIME （多用途 Internet 邮件扩展） 部分一个： 用于指定和 Internet 消息正文的格式描述机制"。</span><span class="sxs-lookup"><span data-stu-id="36db1-683">For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</span></span> <span data-ttu-id="36db1-684">您可以获得从 Rfc[征求意见文档网站](https://www.rfc-editor.org)。</span><span class="sxs-lookup"><span data-stu-id="36db1-684">You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36db1-685">不应访问的任何读取器属性调用之间<xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>方法，直到该方法返回值 0。</span><span class="sxs-lookup"><span data-stu-id="36db1-685">You should not access any of the reader properties between calls to the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> method until the method returns the value 0.</span></span>  
  
 <span data-ttu-id="36db1-686">此方法具有以下行为：</span><span class="sxs-lookup"><span data-stu-id="36db1-686">This method has the following behavior:</span></span>  
  
-   <span data-ttu-id="36db1-687"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 它已达到处理字节流的末尾时返回的值为 0。</span><span class="sxs-lookup"><span data-stu-id="36db1-687"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> returns the value 0 when it has reached the end of the byte stream it was operating on.</span></span> <span data-ttu-id="36db1-688">读取器位于第一个非内容节点上。</span><span class="sxs-lookup"><span data-stu-id="36db1-688">The reader is positioned on the first non-content node.</span></span>  
  
-   <span data-ttu-id="36db1-689">如果您要求更少，或在其当前位置中保留的字节数比在流中读取器保留的精确数目。</span><span class="sxs-lookup"><span data-stu-id="36db1-689">If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</span></span>  
  
-   <span data-ttu-id="36db1-690"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 不支持对以下 XML 节点类型： `Element`， `XmlDeclaration`， `None`， `Document`， `DocumentType`， `Notation`， `Entity`， `DocumentFragment`。</span><span class="sxs-lookup"><span data-stu-id="36db1-690"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-691">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-691">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-692">
            <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported in the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-692">
              <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported in the current node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-693">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-693">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="36db1-694">The buffer into which to copy the resulting text.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-694">The buffer into which to copy the resulting text.</span>
          </span>
          <span data-ttu-id="36db1-695">This value cannot be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-695">This value cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="36db1-696">The offset into the buffer where to start copying the result.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-696">The offset into the buffer where to start copying the result.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="36db1-697">The maximum number of bytes to copy into the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-697">The maximum number of bytes to copy into the buffer.</span>
          </span>
          <span data-ttu-id="36db1-698">The actual number of bytes copied is returned from this method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-698">The actual number of bytes copied is returned from this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-699">Reads the content and returns the <see langword="BinHex" /> decoded binary bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-699">Reads the content and returns the <see langword="BinHex" /> decoded binary bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-700">The number of bytes written to the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-700">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-701">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-701">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-702">此方法的内容流式处理、 解码`BinHex`内容，并返回已解码的二进制字节 (例如，内联`BinHex`编码的 GIF 图像) 到缓冲区。</span><span class="sxs-lookup"><span data-stu-id="36db1-702">This method streams the content, decodes the `BinHex` content, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span> <span data-ttu-id="36db1-703">可以连续调用此方法，以读取大的嵌入文本流。</span><span class="sxs-lookup"><span data-stu-id="36db1-703">This method can be called successively to read large streams of embedded text.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36db1-704">不应访问的任何读取器属性调用之间<xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>方法，直到该方法返回值 0。</span><span class="sxs-lookup"><span data-stu-id="36db1-704">You should not access any of the reader properties between calls to the <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> method until the method returns the value 0.</span></span>  
  
 <span data-ttu-id="36db1-705">此方法具有以下行为：</span><span class="sxs-lookup"><span data-stu-id="36db1-705">This method has the following behavior:</span></span>  
  
-   <span data-ttu-id="36db1-706"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 它已达到处理字节流的末尾时返回的值为 0。</span><span class="sxs-lookup"><span data-stu-id="36db1-706"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> returns the value 0 when it has reached the end of the byte stream it was operating on.</span></span> <span data-ttu-id="36db1-707">读取器位于第一个非内容节点上。</span><span class="sxs-lookup"><span data-stu-id="36db1-707">The reader is positioned on the first non-content node.</span></span>  
  
-   <span data-ttu-id="36db1-708">如果您要求更少，或在其当前位置中保留的字节数比在流中读取器保留的精确数目。</span><span class="sxs-lookup"><span data-stu-id="36db1-708">If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</span></span>  
  
-   <span data-ttu-id="36db1-709"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 不支持对以下 XML 节点类型： `Element`， `XmlDeclaration`， `None`， `Document`， `DocumentType`， `Notation`， `Entity`， `DocumentFragment`。</span><span class="sxs-lookup"><span data-stu-id="36db1-709"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-710">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-710">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-711">
            <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-711">
              <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-712">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-712">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="36db1-713">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-713">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="36db1-714">The buffer into which to copy the resulting text.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-714">The buffer into which to copy the resulting text.</span>
          </span>
          <span data-ttu-id="36db1-715">This value cannot be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-715">This value cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="36db1-716">The offset into the buffer where to start copying the result.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-716">The offset into the buffer where to start copying the result.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="36db1-717">The maximum number of bytes to copy into the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-717">The maximum number of bytes to copy into the buffer.</span>
          </span>
          <span data-ttu-id="36db1-718">The actual number of bytes copied is returned from this method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-718">The actual number of bytes copied is returned from this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-719">Reads the element and decodes the Base64 content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-719">Reads the element and decodes the Base64 content.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-720">The number of bytes written to the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-720">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-721">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-721">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-722">此方法读取元素内容，对使用 Base64 编码，对其进行解码并返回已解码的二进制字节 （例如，内联 Base64 编码 GIF 图像） 到缓冲区。</span><span class="sxs-lookup"><span data-stu-id="36db1-722">This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</span></span> <span data-ttu-id="36db1-723">有关详细信息，请参阅 RFC 1521"MIME （多用途 Internet 邮件扩展） 部分一个： 用于指定和 Internet 消息正文的格式描述机制"。</span><span class="sxs-lookup"><span data-stu-id="36db1-723">For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</span></span> <span data-ttu-id="36db1-724">您可以获得从 Rfc[征求意见文档网站](https://www.rfc-editor.org)。</span><span class="sxs-lookup"><span data-stu-id="36db1-724">You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).</span></span>  
  
 <span data-ttu-id="36db1-725">此方法只能读取简单内容元素。</span><span class="sxs-lookup"><span data-stu-id="36db1-725">This method can only read simple-content elements.</span></span> <span data-ttu-id="36db1-726">元素可以包含文本、 空白、 有效空白、 CDATA 节、 注释和处理指令。</span><span class="sxs-lookup"><span data-stu-id="36db1-726">The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</span></span> <span data-ttu-id="36db1-727">它还可以包含实体引用，会自动扩展。</span><span class="sxs-lookup"><span data-stu-id="36db1-727">It can also contain entity references, which are automatically expanded.</span></span> <span data-ttu-id="36db1-728">元素不能具有子元素。</span><span class="sxs-lookup"><span data-stu-id="36db1-728">The element cannot have child elements.</span></span>  
  
 <span data-ttu-id="36db1-729">此方法是非常类似于<xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>方法，但它只能在元素节点类型上调用。</span><span class="sxs-lookup"><span data-stu-id="36db1-729">This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> method except that it can only be called on element node types.</span></span>  
  
 <span data-ttu-id="36db1-730">如果`count`值高于在文档中的字节数是否等于在文档中的字节数或<xref:System.Xml.XmlTextReader>读取该文档中的所有剩余字节，并返回读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="36db1-730">If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read.</span></span> <span data-ttu-id="36db1-731">下一步<xref:System.Xml.XmlTextReader>方法调用会返回 0 并将读取器移动到节点以下<xref:System.Xml.XmlNodeType.EndElement>。</span><span class="sxs-lookup"><span data-stu-id="36db1-731">The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType.EndElement>.</span></span>  
  
 <span data-ttu-id="36db1-732">如果您调用<xref:System.Xml.XmlTextReader.Read%2A>的所有元素内容使用之前，读取器的行为类似于第一个内容，然后<xref:System.Xml.XmlTextReader.Read%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="36db1-732">If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called.</span></span> <span data-ttu-id="36db1-733">这意味着读取器读取的所有文本，直到遇到结束元素。</span><span class="sxs-lookup"><span data-stu-id="36db1-733">This means that the reader reads all the text until the end element is encountered.</span></span> <span data-ttu-id="36db1-734">然后读取结束标记节点，读取下一个节点，然后将自身定位到下一个后续节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-734">It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-735">请参阅<xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType>若要查看使用此方法的示例。</span><span class="sxs-lookup"><span data-stu-id="36db1-735">See <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType> to see an example using this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-736">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-736">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-737">The current node is not an element node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-737">The current node is not an element node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-738">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-738">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="36db1-739">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-739">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="36db1-740">The element contains mixed-content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-740">The element contains mixed-content.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="36db1-741">The content cannot be converted to the requested type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-741">The content cannot be converted to the requested type.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="36db1-742">The buffer into which to copy the resulting text.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-742">The buffer into which to copy the resulting text.</span>
          </span>
          <span data-ttu-id="36db1-743">This value cannot be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-743">This value cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="36db1-744">The offset into the buffer where to start copying the result.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-744">The offset into the buffer where to start copying the result.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="36db1-745">The maximum number of bytes to copy into the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-745">The maximum number of bytes to copy into the buffer.</span>
          </span>
          <span data-ttu-id="36db1-746">The actual number of bytes copied is returned from this method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-746">The actual number of bytes copied is returned from this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-747">Reads the element and decodes the <see langword="BinHex" /> content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-747">Reads the element and decodes the <see langword="BinHex" /> content.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-748">The number of bytes written to the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-748">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-749">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-749">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-750">此方法读取元素内容中，将使用其解码`BinHex`编码，并返回已解码的二进制字节 (例如，内联`BinHex`编码的 GIF 图像) 到缓冲区。</span><span class="sxs-lookup"><span data-stu-id="36db1-750">This method reads the element content, decodes it using `BinHex` encoding, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span>  
  
 <span data-ttu-id="36db1-751">此方法只能读取简单内容元素。</span><span class="sxs-lookup"><span data-stu-id="36db1-751">This method can only read simple-content elements.</span></span> <span data-ttu-id="36db1-752">元素可以包含文本、 空白、 有效空白、 CDATA 节、 注释和处理指令。</span><span class="sxs-lookup"><span data-stu-id="36db1-752">The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</span></span> <span data-ttu-id="36db1-753">它还可以包含实体引用，会自动扩展。</span><span class="sxs-lookup"><span data-stu-id="36db1-753">It can also contain entity references, which are automatically expanded.</span></span> <span data-ttu-id="36db1-754">元素不能具有子元素。</span><span class="sxs-lookup"><span data-stu-id="36db1-754">The element cannot have child elements.</span></span>  
  
 <span data-ttu-id="36db1-755">此方法是非常类似于<xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>方法，但它只能在元素节点类型上调用。</span><span class="sxs-lookup"><span data-stu-id="36db1-755">This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> method except that it can only be called on element node types.</span></span>  
  
 <span data-ttu-id="36db1-756">如果`count`值高于在文档中的字节数是否等于在文档中的字节数或<xref:System.Xml.XmlTextReader>读取该文档中的所有剩余字节，并返回读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="36db1-756">If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read.</span></span> <span data-ttu-id="36db1-757">下一步<xref:System.Xml.XmlTextReader>方法调用会返回 0 并将读取器移动到节点以下<xref:System.Xml.XmlNodeType.EndElement>。</span><span class="sxs-lookup"><span data-stu-id="36db1-757">The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType.EndElement>.</span></span>  
  
 <span data-ttu-id="36db1-758">如果您调用<xref:System.Xml.XmlTextReader.Read%2A>的所有元素内容使用之前，读取器的行为类似于第一个内容，然后<xref:System.Xml.XmlTextReader.Read%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="36db1-758">If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called.</span></span> <span data-ttu-id="36db1-759">这意味着读取器读取的所有文本，直到遇到结束元素。</span><span class="sxs-lookup"><span data-stu-id="36db1-759">This means that the reader reads all the text until the end element is encountered.</span></span> <span data-ttu-id="36db1-760">然后读取结束标记节点，读取下一个节点，然后将自身定位到下一个后续节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-760">It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-761">请参阅<xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType>若要查看使用此方法的示例。</span><span class="sxs-lookup"><span data-stu-id="36db1-761">See <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType> to see an example using this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="36db1-762">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-762">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-763">The current node is not an element node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-763">The current node is not an element node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-764">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-764">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="36db1-765">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-765">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="36db1-766">The element contains mixed-content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-766">The element contains mixed-content.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="36db1-767">The content cannot be converted to the requested type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-767">The content cannot be converted to the requested type.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadState : System.Xml.ReadState" Usage="System.Xml.XmlTextReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-768">Gets the state of the reader.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-768">Gets the state of the reader.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-769">
            <see cref="T:System.Xml.ReadState" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-769">One of the <see cref="T:System.Xml.ReadState" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-770">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-770">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="override this.ReadString : unit -&gt; string" Usage="xmlTextReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-771">Reads the contents of an element or a text node as a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-771">Reads the contents of an element or a text node as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-772">The contents of the element or text node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-772">The contents of the element or text node.</span>
          </span>
          <span data-ttu-id="36db1-773">This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-773">This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.</span>
          </span>
          <span data-ttu-id="36db1-774">
            <see langword="Note:" /> The text node can be either an element or an attribute text node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-774">
              <see langword="Note:" /> The text node can be either an element or an attribute text node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-775">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-775">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-776">如果定位在元素上`ReadString`将所有文本、 有效空白，空白区域和`CData`部分节点类型在一起，并返回串联的数据作为元素内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-776">If positioned on an element, `ReadString` concatenates all text, significant white space, white space, and `CData` section node types together and returns the concatenated data as the element content.</span></span> <span data-ttu-id="36db1-777">它将停止时遇到任何标记，包括注释和处理指令。</span><span class="sxs-lookup"><span data-stu-id="36db1-777">It stops when any markup is encountered, including comments and processing instructions.</span></span> <span data-ttu-id="36db1-778">这可以在混合内容模型中发生，也可以在读取元素结束标记时发生。</span><span class="sxs-lookup"><span data-stu-id="36db1-778">This could occur in a mixed content model, or when an element end tag is read.</span></span>  
  
 <span data-ttu-id="36db1-779">如果定位在文本节点上`ReadString`执行相同的串联文本节点从到元素结束标记。</span><span class="sxs-lookup"><span data-stu-id="36db1-779">If positioned on a text node, `ReadString` performs the same concatenation from the text node to the element end tag.</span></span> <span data-ttu-id="36db1-780">如果读取器定位在属性文本节点上，则 `ReadString` 与读取器定位在元素开始标记上时的功能相同。</span><span class="sxs-lookup"><span data-stu-id="36db1-780">If the reader is positioned on an attribute text node, `ReadString` has the same functionality as if the reader were position on the element start tag.</span></span> <span data-ttu-id="36db1-781">它返回所有串联在一起的元素文本节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-781">It returns all the concatenated element text nodes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-782">以下示例显示每个元素的文本内容。</span><span class="sxs-lookup"><span data-stu-id="36db1-782">The following example displays the text content of each element.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-783">该示例使用该文件，`elems.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-783">The example uses the file, `elems.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="36db1-784">An error occurred while parsing the XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-784">An error occurred while parsing the XML.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-785">An invalid operation was attempted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-785">An invalid operation was attempted.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResetState" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetState ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetState();" />
      <MemberSignature Language="F#" Value="member this.ResetState : unit -&gt; unit" Usage="xmlTextReader.ResetState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-786">Resets the state of the reader to ReadState.Initial.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-786">Resets the state of the reader to ReadState.Initial.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-787">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-787">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-788">此方法使您可以分析单个流中的多个 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="36db1-788">This method enables you to parse multiple XML documents in a single stream.</span></span> <span data-ttu-id="36db1-789">当达到 XML 文档的结尾时，可以调用`ResetState`重置以准备下一步的 XML 文档读取器的状态。</span><span class="sxs-lookup"><span data-stu-id="36db1-789">When you reach the end of an XML document, you can call `ResetState` to reset the state of the reader in preparation for the next XML document.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="36db1-790">在流中的文档必须共享相同的编码。</span><span class="sxs-lookup"><span data-stu-id="36db1-790">The documents in the stream must share the same encoding.</span></span> <span data-ttu-id="36db1-791">如果不是这样，当`ResetState`称为<xref:System.Xml.XmlException>引发。</span><span class="sxs-lookup"><span data-stu-id="36db1-791">If this is not the case, when `ResetState` is called an <xref:System.Xml.XmlException> is thrown.</span></span> <span data-ttu-id="36db1-792">（这是从.NET Framework 1.1 及更早版本的行为发生变化）。</span><span class="sxs-lookup"><span data-stu-id="36db1-792">(This is a change in behavior from .NET Framework version 1.1 and earlier).</span></span>  
  
 <span data-ttu-id="36db1-793">以下属性不受`ResetState`。</span><span class="sxs-lookup"><span data-stu-id="36db1-793">The following properties are not affected by `ResetState`.</span></span>  
  
-   <xref:System.Xml.XmlTextReader.Normalization%2A>  
  
-   <xref:System.Xml.XmlTextReader.Namespaces%2A>  
  
-   <xref:System.Xml.XmlTextReader.XmlResolver%2A>  
  
-   <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-794">下面的示例分析单个流中的两个 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="36db1-794">The following example parses two XML documents in a single stream.</span></span>  
  
 [!code-cpp[XmlTextReader.ResetState#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ResetState/CPP/resetstate.cpp#1)]
 [!code-csharp[XmlTextReader.ResetState#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ResetState/CS/resetstate.cs#1)]
 [!code-vb[XmlTextReader.ResetState#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ResetState/VB/resetstate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-795">Calling <see langword="ResetState" /> if the reader was constructed using an <see cref="T:System.Xml.XmlParserContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-795">Calling <see langword="ResetState" /> if the reader was constructed using an <see cref="T:System.Xml.XmlParserContext" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="36db1-796">Documents in a single stream do not share the same encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-796">Documents in a single stream do not share the same encoding.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.ReadState" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResolveEntity();" />
      <MemberSignature Language="F#" Value="override this.ResolveEntity : unit -&gt; unit" Usage="xmlTextReader.ResolveEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-797">Resolves the entity reference for <see langword="EntityReference" /> nodes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-797">Resolves the entity reference for <see langword="EntityReference" /> nodes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-798">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-798">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-799">如果读取器定位在`EntityReference`节点 (`XmlNodeType.EntityReference`)，如果<xref:System.Xml.XmlTextReader.Read%2A>之后的调用此方法中，实体替换文本进行分析。</span><span class="sxs-lookup"><span data-stu-id="36db1-799">If the reader is positioned on an `EntityReference` node (`XmlNodeType.EntityReference`), if <xref:System.Xml.XmlTextReader.Read%2A> is called after calling this method, the entity replacement text is parsed.</span></span> <span data-ttu-id="36db1-800">完成实体替换文本后，`EndEntity`返回节点关闭实体引用作用域。</span><span class="sxs-lookup"><span data-stu-id="36db1-800">When the entity replacement text is finished, an `EndEntity` node is returned to close the entity reference scope.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36db1-801">调用此方法后，如果实体是一部分的属性值，则必须调用<xref:System.Xml.XmlTextReader.ReadAttributeValue%2A>来单步执行该实体。</span><span class="sxs-lookup"><span data-stu-id="36db1-801">After calling this method, if the entity is part of an attribute value, you must call <xref:System.Xml.XmlTextReader.ReadAttributeValue%2A> to step into the entity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Settings As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlReaderSettings ^ Settings { System::Xml::XmlReaderSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlReaderSettings" Usage="System.Xml.XmlTextReader.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public override void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Skip();" />
      <MemberSignature Language="F#" Value="override this.Skip : unit -&gt; unit" Usage="xmlTextReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36db1-802">Skips the children of the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-802">Skips the children of the current node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-803">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-803">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-804">在下面的 XML 输入，是否读取器定位在`<a>`节点或其属性、 调用任一`Skip`定位到读取器`<b>`节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-804">In the following XML input if the reader is positioned on the `<a>` node or any of its attributes, calling `Skip` positions the reader to the `<b>` node.</span></span>  
  
 <span data-ttu-id="36db1-805">如果读取器定位在叶节点上已 (如`<x>`节点或文本节点`abc`)，则调用`Skip`等同于调用<xref:System.Xml.XmlTextReader.Read%2A>。</span><span class="sxs-lookup"><span data-stu-id="36db1-805">If the reader is positioned on a leaf node already (such as the `<x>` node or the text node `abc`), calling `Skip` is the same as calling <xref:System.Xml.XmlTextReader.Read%2A>.</span></span>  
  
```xml  
<a name="bob" age="123">  
  <x/>abc<y/>  
</a>  
<b>  
 ...  
</b>  
```  
  
 <span data-ttu-id="36db1-806">此方法会检查格式正确的 XML。</span><span class="sxs-lookup"><span data-stu-id="36db1-806">This method checks for well-formed XML.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Xml.IXmlLineInfo.HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlLineInfo#HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Function HasLineInfo () As Boolean Implements IXmlLineInfo.HasLineInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Xml.IXmlLineInfo.HasLineInfo() = System::Xml::IXmlLineInfo::HasLineInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String) Implements IXmlNamespaceResolver.GetNamespacesInScope" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System::Xml::XmlNamespaceScope scope) = System::Xml::IXmlNamespaceResolver::GetNamespacesInScope;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">
          <span data-ttu-id="36db1-807">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-807">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-808">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-808">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-809">An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-809">An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36db1-810">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="36db1-810">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="36db1-811">它只能在 <xref:System.Xml.XmlTextReader> 实例被强制转换为 <xref:System.Xml.IXmlNamespaceResolver> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="36db1-811">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupNamespace (prefix As String) As String Implements IXmlNamespaceResolver.LookupNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupNamespace(System::String ^ prefix) = System::Xml::IXmlNamespaceResolver::LookupNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <span data-ttu-id="36db1-812">The prefix whose namespace URI you wish to find.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-812">The prefix whose namespace URI you wish to find.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-813">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-813">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-814">The namespace URI that is mapped to the prefix; <see langword="null" /> if the prefix is not mapped to a namespace URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-814">The namespace URI that is mapped to the prefix; <see langword="null" /> if the prefix is not mapped to a namespace URI.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36db1-815">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="36db1-815">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="36db1-816">它只能在 <xref:System.Xml.XmlTextReader> 实例被强制转换为 <xref:System.Xml.IXmlNamespaceResolver> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="36db1-816">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupPrefix (namespaceName As String) As String Implements IXmlNamespaceResolver.LookupPrefix" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupPrefix(System::String ^ namespaceName) = System::Xml::IXmlNamespaceResolver::LookupPrefix;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="36db1-817">The namespace URI whose prefix you wish to find.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-817">The namespace URI whose prefix you wish to find.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36db1-818">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-818">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36db1-819">The prefix that is mapped to the namespace URI; <see langword="null" /> if the namespace URI is not mapped to a prefix.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-819">The prefix that is mapped to the namespace URI; <see langword="null" /> if the namespace URI is not mapped to a prefix.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Xml.XmlTextReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-820">Gets the text value of the current node.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-820">Gets the text value of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-821">返回的值取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-821">The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node.</span>
          </span>
          <span data-ttu-id="36db1-822">下表列出具有要返回的值的节点类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-822">The following table lists node types that have a value to return.</span>
          </span>
          <span data-ttu-id="36db1-823">所有其他节点类型返回 <see langword="String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-823">All other node types return <see langword="String.Empty" />.</span>
          </span>
          <span data-ttu-id="36db1-824">
            <list type="table">
              <listheader>
                <term> 节点类型</term>
                <description>值</description>
              </listheader>
              <item>
                <term>
                  <see langword="Attribute" />
                </term>
                <description>属性的值。</description>
              </item>
              <item>
                <term>
                  <see langword="CDATA" />
                </term>
                <description> CDATA 节的内容。</description>
              </item>
              <item>
                <term>
                  <see langword="Comment" />
                </term>
                <description> 注释的内容。</description>
              </item>
              <item>
                <term>
                  <see langword="DocumentType" />
                </term>
                <description> 内部子集。</description>
              </item>
              <item>
                <term>
                  <see langword="ProcessingInstruction" />
                </term>
                <description> 全部内容，不包括目标。</description>
              </item>
              <item>
                <term>
                  <see langword="SignificantWhitespace" />
                </term>
                <description> 中的空白<see langword="xml:space" />= 'preserve' 范围。</description>
              </item>
              <item>
                <term>
                  <see langword="Text" />
                </term>
                <description> 文本节点的内容。</description>
              </item>
              <item>
                <term>
                  <see langword="Whitespace" />
                </term>
                <description> 标记之间的空白区域。</description>
              </item>
              <item>
                <term>
                  <see langword="XmlDeclaration" />
                </term>
                <description> 声明的内容。  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-824">
              <list type="table">
                <listheader>
                  <term> Node Type  </term>
                  <description> Value  </description>
                </listheader>
                <item>
                  <term>
                    <see langword="Attribute" />
                  </term>
                  <description> The value of the attribute.  </description>
                </item>
                <item>
                  <term>
                    <see langword="CDATA" />
                  </term>
                  <description> The content of the CDATA section.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Comment" />
                  </term>
                  <description> The content of the comment.  </description>
                </item>
                <item>
                  <term>
                    <see langword="DocumentType" />
                  </term>
                  <description> The internal subset.  </description>
                </item>
                <item>
                  <term>
                    <see langword="ProcessingInstruction" />
                  </term>
                  <description> The entire content, excluding the target.  </description>
                </item>
                <item>
                  <term>
                    <see langword="SignificantWhitespace" />
                  </term>
                  <description> The white space within an <see langword="xml:space" />= 'preserve' scope.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Text" />
                  </term>
                  <description> The content of the text node.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Whitespace" />
                  </term>
                  <description> The white space between markup.  </description>
                </item>
                <item>
                  <term>
                    <see langword="XmlDeclaration" />
                  </term>
                  <description> The content of the declaration.  </description>
                </item>
              </list>
            </span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-825">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-825">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-826">下面的示例读取 XML 文件，并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="36db1-826">The following example reads an XML file and displays each node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="36db1-827">此示例使用文件`items.xml`。</span><span class="sxs-lookup"><span data-stu-id="36db1-827">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="WhitespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.WhitespaceHandling WhitespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WhitespaceHandling WhitespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property WhitespaceHandling As WhitespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::WhitespaceHandling WhitespaceHandling { System::Xml::WhitespaceHandling get(); void set(System::Xml::WhitespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.WhitespaceHandling : System.Xml.WhitespaceHandling with get, set" Usage="System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WhitespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-828">Gets or sets a value that specifies how white space is handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-828">Gets or sets a value that specifies how white space is handled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-829">
            <see cref="T:System.Xml.WhitespaceHandling" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-829">One of the <see cref="T:System.Xml.WhitespaceHandling" /> values.</span>
          </span>
          <span data-ttu-id="36db1-830">默认值为 <see langword="WhitespaceHandling.All" />（返回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 节点）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-830">The default is <see langword="WhitespaceHandling.All" /> (returns <see langword="Whitespace" /> and <see langword="SignificantWhitespace" /> nodes).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-831">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-831">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-832">此属性可以随时更改，将对下一个读取操作生效。</span><span class="sxs-lookup"><span data-stu-id="36db1-832">This property can be changed at any time and takes effect on the next read operation.</span></span>  
  
 <span data-ttu-id="36db1-833">因为`XmlTextReader`没有 DTD 信息，可供`SignificantWhitepsace`中仅返回节点`xml:space='preserve'`作用域。</span><span class="sxs-lookup"><span data-stu-id="36db1-833">Because the `XmlTextReader` does not have DTD information available to it, `SignificantWhitepsace` nodes are only returned within an `xml:space='preserve'` scope.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-834">下面的示例读取 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="36db1-834">The following example reads an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="36db1-835">Invalid value specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-835">Invalid value specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="36db1-836">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-836">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlTextReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-837">Gets the current <see langword="xml:lang" /> scope.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-837">Gets the current <see langword="xml:lang" /> scope.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-838">当前 <see langword="xml:lang" /> 范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-838">The current <see langword="xml:lang" /> scope.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-839">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-839">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-840">此属性表示`xml:lang`中当前节点所在作用域。</span><span class="sxs-lookup"><span data-stu-id="36db1-840">This property represents the `xml:lang` scope within which the current node resides.</span></span> <span data-ttu-id="36db1-841">例如，下面是与 XML 片段`xml:lang`设置为美国英语的根元素中：</span><span class="sxs-lookup"><span data-stu-id="36db1-841">For example, here is an XML fragment with `xml:lang` set to US English in the root element:</span></span>  
  
 <span data-ttu-id="36db1-842">\<根 xml: lang ="en-我们"></span><span class="sxs-lookup"><span data-stu-id="36db1-842">\<root xml:lang="en-us"></span></span>  
  
 <span data-ttu-id="36db1-843">\<名称 > Fred \< /名称 ></span><span class="sxs-lookup"><span data-stu-id="36db1-843">\<name>Fred\</name></span></span>  
  
 <span data-ttu-id="36db1-844">\</root></span><span class="sxs-lookup"><span data-stu-id="36db1-844">\</root></span></span>  
  
 <span data-ttu-id="36db1-845">当读取器定位在`name`元素中，您可以使用此属性以发现它是美国英语的作用域中`xml:lang`属性。</span><span class="sxs-lookup"><span data-stu-id="36db1-845">When the reader is positioned on the `name` element, you can use this property to find that it is in the scope of a US English `xml:lang` attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-846">下面的示例显示`xml:lang`为每个节点的值。</span><span class="sxs-lookup"><span data-stu-id="36db1-846">The following example displays the `xml:lang` value for each of the nodes.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlLang#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlLang/CPP/readlang.cpp#1)]
 [!code-csharp[XmlTextReader.XmlLang#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlLang/CS/readlang.cs#1)]
 [!code-vb[XmlTextReader.XmlLang#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlLang/VB/readlang.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlTextReader.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-847">Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving DTD references.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-847">Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving DTD references.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-848">要使用的 <see langword="XmlResolver" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-848">The <see langword="XmlResolver" /> to use.</span>
          </span>
          <span data-ttu-id="36db1-849">如果设置为 <see langword="null" />，则不解析外部资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-849">If set to <see langword="null" />, external resources are not resolved.</span>
          </span>
          <span data-ttu-id="36db1-850">在 1.1 版中 [！INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，调用方必须受到完全信任才能指定<see langword="XmlResolver" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-850">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the caller must be fully trusted in order to specify an <see langword="XmlResolver" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-851">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-851">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="36db1-852">读取器使用`XmlResolver`解析到读取器加载的文件的位置以及用于解析 DTD 引用。</span><span class="sxs-lookup"><span data-stu-id="36db1-852">The reader uses `XmlResolver` to resolve the location of the file loaded into the reader and also to resolve DTD references.</span></span> <span data-ttu-id="36db1-853">例如，如果您的 XML 包含 DOCTYPE 声明`<!DOCTYPE book SYSTEM book.dtd>`读取器解析这个外部文件，并确保 DTD 的格式正确。</span><span class="sxs-lookup"><span data-stu-id="36db1-853">For example, if your XML included the DOCTYPE declaration, `<!DOCTYPE book SYSTEM book.dtd>` the reader resolves this external file and ensures that the DTD is well-formed.</span></span> <span data-ttu-id="36db1-854">读取器不使用 DTD 进行验证。</span><span class="sxs-lookup"><span data-stu-id="36db1-854">The reader does not use the DTD for validation.</span></span>  
  
 <span data-ttu-id="36db1-855">此属性可以随时更改，将对下一个读取操作生效。</span><span class="sxs-lookup"><span data-stu-id="36db1-855">This property can be changed at any time and takes effect on the next read operation.</span></span> <span data-ttu-id="36db1-856">如果此属性设置为`null`，则不解析读取器遇到的任何外部 DTD 引用。</span><span class="sxs-lookup"><span data-stu-id="36db1-856">If this property is set to `null`, any external DTD references encountered by the reader are not resolved.</span></span>  
  
 <span data-ttu-id="36db1-857">在 1.1 版中[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，如果未设置此属性，该应用程序的信任级别将确定默认行为。</span><span class="sxs-lookup"><span data-stu-id="36db1-857">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], if this property is not set, the trust level of the application determines the default behavior.</span></span>  
  
 <span data-ttu-id="36db1-858">`Fully trusted code:` 读取器使用默认值<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</span><span class="sxs-lookup"><span data-stu-id="36db1-858">`Fully trusted code:` The reader uses a default <xref:System.Xml.XmlUrlResolver> with no user credentials.</span></span> <span data-ttu-id="36db1-859">如果访问网络资源需要身份验证，使用`XmlResolver`属性来指定`XmlResolver`与所需的凭据。</span><span class="sxs-lookup"><span data-stu-id="36db1-859">If authentication is required to access a network resource, use the `XmlResolver` property to specify an `XmlResolver` with the necessary credentials.</span></span>  
  
 <span data-ttu-id="36db1-860">`Semi-trusted code:` `XmlResolver`属性设置为`null`。</span><span class="sxs-lookup"><span data-stu-id="36db1-860">`Semi-trusted code:` The `XmlResolver` property is set to `null`.</span></span> <span data-ttu-id="36db1-861">不解析外部资源。</span><span class="sxs-lookup"><span data-stu-id="36db1-861">External resources are not resolved.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-862">下面的示例使用`XmlResolver`属性来指定访问网络的文件所需的凭据。</span><span class="sxs-lookup"><span data-stu-id="36db1-862">The following example uses the `XmlResolver` property to specify the credentials necessary to access the networked file.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlResolver/CPP/rdr_resolver.cpp#1)]
 [!code-csharp[XmlTextReader.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlResolver/CS/rdr_resolver.cs#1)]
 [!code-vb[XmlTextReader.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlResolver/VB/rdr_resolver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlTextReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36db1-863">Gets the current <see langword="xml:space" /> scope.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-863">Gets the current <see langword="xml:space" /> scope.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36db1-864">
            <see cref="T:System.Xml.XmlSpace" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-864">One of the <see cref="T:System.Xml.XmlSpace" /> values.</span>
          </span>
          <span data-ttu-id="36db1-865">如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="36db1-865">If no <see langword="xml:space" /> scope exists, this property defaults to <see langword="XmlSpace.None" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="36db1-866">从.NET Framework 2.0 开始，我们建议您创建<xref:System.Xml.XmlReader>实例使用<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法，以充分利用新功能。</span><span class="sxs-lookup"><span data-stu-id="36db1-866">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36db1-867">下面的示例分析文件并返回有意义的空白，如果`xml:space='preserve'`发现作用域。</span><span class="sxs-lookup"><span data-stu-id="36db1-867">The following example parses a file and returns significant white space if an `xml:space='preserve'` scope is found.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlSpace#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlSpace/CPP/readspace.cpp#1)]
 [!code-csharp[XmlTextReader.XmlSpace#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlSpace/CS/readspace.cs#1)]
 [!code-vb[XmlTextReader.XmlSpace#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlSpace/VB/readspace.vb#1)]  
  
 <span data-ttu-id="36db1-868">该示例使用该文件，`authors.xml`作为输入。</span><span class="sxs-lookup"><span data-stu-id="36db1-868">The example uses the file, `authors.xml`, as input.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>