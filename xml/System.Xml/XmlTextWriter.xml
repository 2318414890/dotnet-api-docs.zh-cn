<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlTextWriter.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b2dfec50e813dc928679ed1e8424877f3b9f797b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2dfec50e813dc928679ed1e8424877f3b9f797b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</source>
          <target state="translated">表示提供快速、非缓存、只进方法的写入器，该方法生成包含 XML 数据（这些数据符合 W3C 可扩展标记语言 (XML) 1.0 和“XML 命名空间”建议）的流或文件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you use the <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> class instead.</source>
          <target state="translated">从 .NET Framework 2.0 开始，建议改用 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This class implements the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> class.</source>
          <target state="translated">此类实现<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> maintains a namespace stack corresponding to all the namespaces defined in the current element stack.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 维护对应的当前元素堆栈中定义的所有命名空间的命名空间堆栈。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Using <ph id="ph1">`XmlTextWriter`</ph> you can declare namespaces manually.</source>
          <target state="translated">使用<ph id="ph1">`XmlTextWriter`</ph>可以手动声明命名空间。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The above C# code produces the following output.</source>
          <target state="translated">上面的 C# 代码生成以下输出。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 提升到要避免使其重复上两个子元素的根元素的命名空间声明。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The child elements pick up the prefix from the namespace declaration.</source>
          <target state="translated">子元素选取从命名空间声明的前缀。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> also allows you to override the current namespace declaration.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 此外允许你重写当前命名空间声明。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the following example, the namespace URI "123" is overridden by "abc" to produce the XML element <ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>.</source>
          <target state="translated">在下面的示例中，命名空间 URI"123"已由"abc"要生成的 XML 元素<ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>By using the write methods that take a prefix as an argument you can also specify which prefix to use.</source>
          <target state="translated">通过使用需要作为自变量的前缀的写入方法还可以指定的前缀，以使用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text <ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>.</source>
          <target state="translated">在下面的示例中，两个不同的前缀映射到相同的命名空间 URI 以产生的 XML 文本<ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If there are multiple namespace declarations mapping different prefixes to the same namespace URI, <ph id="ph1">`XmlTextWriter`</ph> walks the stack of namespace declarations backwards and picks the closest one.</source>
          <target state="translated">如果有多个命名空间声明将不同的前缀映射到相同的命名空间 URI，<ph id="ph1">`XmlTextWriter`</ph>向后遍历的命名空间声明堆栈并选取最近一个命名空间。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the above C# example, because the <ph id="ph1">`WriteAttributeString`</ph> call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:</source>
          <target state="translated">在上面的 C# 示例，因为<ph id="ph1">`WriteAttributeString`</ph>调用未指定前缀，编写器使用推送到命名空间堆栈上的最后一个前缀，并生成下面的 XML:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If namespace conflicts occur, <ph id="ph1">`XmlTextWriter`</ph> resolves them by generating alternate prefixes.</source>
          <target state="translated">如果发生命名空间冲突，<ph id="ph1">`XmlTextWriter`</ph>解析它们通过生成的备用前缀。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>For example, if an attribute and element have the same prefix but different namespaces, <ph id="ph1">`XmlWriter`</ph> generates an alternate prefix for the attribute.</source>
          <target state="translated">例如，如果属性和元素具有相同前缀但不同的命名空间，<ph id="ph1">`XmlWriter`</ph>生成的属性的备用前缀。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The generated prefixes are named <ph id="ph1">`n{i}`</ph> where <ph id="ph2">`i`</ph> is a number beginning at 1.</source>
          <target state="translated">生成的前缀命名<ph id="ph1">`n{i}`</ph>其中<ph id="ph2">`i`</ph>是从 1 开始的数字。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The number is reset to 1 for each element.</source>
          <target state="translated">编号重置为 1。 对于每个元素。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes).</source>
          <target state="translated">命名空间 URI 与关联的属性必须具有的前缀 （默认值特性不适用于命名空间）。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This conforms to section 5.2 of the W3C Namespaces in XML recommendation.</source>
          <target state="translated">这符合 XML 建议中的 W3C 命名空间的第 5.2 节。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.</source>
          <target state="translated">如果属性引用的命名空间 URI，但未指定前缀，则编写器将生成该属性的前缀。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When writing an empty element, an additional space is added between tag name and the closing tag, for example <ph id="ph1">`&lt;item /&gt;`</ph>.</source>
          <target state="translated">当编写空元素，额外的空间之间添加标记名称和结束标记，例如<ph id="ph1">`&lt;item /&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This provides compatibility with older browsers.</source>
          <target state="translated">这提供了与较旧的浏览器兼容性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When a <ph id="ph1">`String`</ph> is used as method parameter, <ph id="ph2">`null`</ph> and <ph id="ph3">`String.Empty`</ph> are equivalent.</source>
          <target state="translated">当<ph id="ph1">`String`</ph>作为方法参数，使用<ph id="ph2">`null`</ph>和<ph id="ph3">`String.Empty`</ph>是等效的。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`String.Empty`</ph> follows the W3C rules.</source>
          <target state="translated"><ph id="ph1">`String.Empty`</ph> 遵循 W3C 规则。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>To write strongly typed data, use the <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph> class to convert data types to string.</source>
          <target state="translated">若要编写强类型化的数据，使用<ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph>类将数据类型转换为字符串。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>For example, the following C# code converts the data from <ph id="ph1">`Double`</ph> to <ph id="ph2">`String`</ph> and writes the element <ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>.</source>
          <target state="translated">例如，下面的 C# 代码将转换中的数据<ph id="ph1">`Double`</ph>到<ph id="ph2">`String`</ph>编写元素和<ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> does not check for the following:</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 不会检查以下：</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Invalid characters in attribute and element names.</source>
          <target state="translated">属性和元素名称中的无效字符。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Unicode characters that do not fit the specified encoding.</source>
          <target state="translated">不符合指定的编码的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If the Unicode characters do not fit the specified encoding, the <ph id="ph1">`XmlTextWriter`</ph> does not escape the Unicode characters into character entities.</source>
          <target state="translated">如果指定的编码，不能容纳的 Unicode 字符<ph id="ph1">`XmlTextWriter`</ph>未转义的 Unicode 字符到字符实体。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Duplicate attributes.</source>
          <target state="translated">重复的属性。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Characters in the DOCTYPE public identifier or system identifier.</source>
          <target state="translated">DOCTYPE 公共标识符或系统标识符中的字符。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Security Considerations</source>
          <target state="translated">安全注意事项</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The following items are things to consider when working with the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> class.</source>
          <target state="translated">以下各项是需要时使用，请考虑事项<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Exceptions thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> can disclose path information that you do not want bubbled up to the application.</source>
          <target state="translated">引发的异常<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>可能会泄漏你不希望的路径信息冒泡由应用程序。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Your applications must catch exceptions and process them appropriately.</source>
          <target state="translated">应用程序必须捕获异常并进行相应的处理。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When you pass the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> to another application the underlying stream is exposed to that application.</source>
          <target state="translated">在将 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 传递给另一个应用程序时，基础流会公开给该应用程序。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If you need to pass the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> to a semi-trusted application, you should use an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> object created by the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> method instead.</source>
          <target state="translated">如果需要将 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 传递给不完全可信的应用程序，应使用通过 <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> 方法创建的 <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>不会验证传递给任何数据<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>You should not pass arbitrary data to these methods.</source>
          <target state="translated">你不应将任意数据传递给这些方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.</source>
          <target state="translated">如果更改默认设置，则不能保证生成的输出是格式良好的 XML 数据。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Do not accept supporting components, such as an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object, from an untrusted source.</source>
          <target state="translated">不接受支持组件，如<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>中不受信任的源对象。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class.</source>
          <target state="translated">创建 <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>The <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> to write to.</source>
          <target state="translated">要向其中进行写入的 <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>It is assumed that the <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> is already set to the correct encoding.</source>
          <target state="translated">假定 <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> 已设置为正确的编码方式。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 创建 <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream to which you want to write.</source>
          <target state="translated">要对其写入的流。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The encoding to generate.</source>
          <target state="translated">要生成的编码。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>If encoding is <ph id="ph1">&lt;see langword="null" /&gt;</ph> it writes out the stream as UTF-8 and omits the encoding attribute from the <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>.</source>
          <target state="translated">如果编码方式为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则它以 UTF-8 的形式写出流并忽略 <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph> 中的编码特性。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class using the specified stream and encoding.</source>
          <target state="translated">使用指定的流和编码方式创建 <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The encoding is not supported or the stream cannot be written to.</source>
          <target state="translated">该编码方式不受支持或无法写入流。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="w" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="w" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename to write to.</source>
          <target state="translated">要写入的文件名。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>If the file exists, it truncates it and overwrites it with the new content.</source>
          <target state="translated">如果该文件存在，它将截断该文件并用新内容将其覆盖。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The encoding to generate.</source>
          <target state="translated">要生成的编码。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>If encoding is <ph id="ph1">&lt;see langword="null" /&gt;</ph> it writes the file out as UTF-8, and omits the encoding attribute from the <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>.</source>
          <target state="translated">如果编码方式为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，它将以 UTF-8 的形式写出该文件，并忽略 <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph> 中的编码特性。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Creates an instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph> class using the specified file.</source>
          <target state="translated">使用指定的文件创建 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</source>
          <target state="translated">编码方式不受支持；文件名为空；仅包含空格，或者包含一个或多个无效字符。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Access is denied.</source>
          <target state="translated">拒绝访问。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">文件名为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The directory to write to is not found.</source>
          <target state="translated">未找到要写入的目录。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</source>
          <target state="translated">文件名中包含不正确或无效的文件名、目录名或卷标语法。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>Gets the underlying stream object.</source>
          <target state="translated">获取基础流对象。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>The stream to which the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> is writing or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the <ph id="ph3">&lt;see langword="XmlTextWriter" /&gt;</ph> was constructed using a <ph id="ph4">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that does not inherit from the <ph id="ph5">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 正在向其写入的流；如果 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 是使用不从 <ph id="ph4">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 类继承的 <ph id="ph5">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> 构造的，则为 <ph id="ph3">&lt;see langword="XmlTextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a <ph id="ph1">`TextWriter`</ph> that is derived from the <ph id="ph2">`StreamWriter`</ph> class, this property is equivalent to the <ph id="ph3">&lt;xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">如果编写器已构造的使用<ph id="ph1">`TextWriter`</ph>、 派生自<ph id="ph2">`StreamWriter`</ph>类，此属性等效于<ph id="ph3">&lt;xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>, this property returns the <ph id="ph2">`Stream`</ph> passed to the constructor.</source>
          <target state="translated">如果编写器已构造的使用<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>，此属性返回<ph id="ph2">`Stream`</ph>传递到构造函数。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a file name, this property returns the <ph id="ph1">`Stream`</ph> representing the file.</source>
          <target state="translated">如果已使用的文件名称构造编写器，此属性返回<ph id="ph1">`Stream`</ph>表示该文件。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Closes this stream and the underlying stream.</source>
          <target state="translated">关闭此流和基础流。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Any elements or attributes left open are automatically closed.</source>
          <target state="translated">自动关闭任何元素或属性保持打开状态。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>This method does not throw any exceptions.</source>
          <target state="translated">此方法不引发任何异常。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">下面的示例将 XML 片段。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</source>
          <target state="translated">将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>This is called instead of <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Close%2A&gt;</ph> when you want to write more to the underlying stream without losing what is still in the buffer.</source>
          <target state="translated">这称为而不是<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Close%2A&gt;</ph>如果想要写入基础流但不丢失仍在缓冲区中。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>The following example writes out two XML fragments.</source>
          <target state="translated">下面的示例将写出两个 XML 片段。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Indicates how the output is formatted.</source>
          <target state="translated">指示如何对输出进行格式设置。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.Formatting" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Formatting" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The default is <ph id="ph1">&lt;see langword="Formatting.None" /&gt;</ph> (no special formatting).</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="Formatting.None" /&gt;</ph>（无特殊格式）。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>If the <ph id="ph1">`Indented`</ph> option is set, child elements are indented using the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.Indentation%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.IndentChar%2A&gt;</ph> properties.</source>
          <target state="translated">如果<ph id="ph1">`Indented`</ph>选项设置、 子元素缩进使用<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.Indentation%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.IndentChar%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Only element content is indented.</source>
          <target state="translated">仅元素内容将缩进。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The following C# code writes out HTML elements including mixed content:</source>
          <target state="translated">下面的 C# 代码写出包括混合的内容的 HTML 元素：</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The above code produces the following output:</source>
          <target state="translated">上面的代码生成以下输出：</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>When this is viewed in HTML no white space appears between the bold and italic elements.</source>
          <target state="translated">这在 HTML 中查看时不出现空白粗体和斜体元素之间。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>In fact, in this example, if indenting was added between these elements the word "Elephant" would be incorrectly broken.</source>
          <target state="translated">事实上，在此示例中，如果这些元素之间添加缩进"象"一词将是不正确地断开。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Writing any text content, excluding <ph id="ph1">`String.Empty`</ph> puts that element into mixed content mode.</source>
          <target state="translated">写入内容，不包括任何文本<ph id="ph1">`String.Empty`</ph>将该元素放入混合内容的模式。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Child elements do not inherit this "mixed" mode status.</source>
          <target state="translated">子元素不会继承此"混合"模式状态。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>A child element of a "mixed" element does indenting, unless it is also contains "mixed" content.</source>
          <target state="translated">"混合"元素的子元素进行缩进，除非它是还包含"混合"的内容。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Element content (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)</ph> and mixed content (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)</ph> are defined according to the XML 1.0 definitions of these terms.</source>
          <target state="translated">元素内容 (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)</ph>和混合内容 (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)</ph>根据这些术语的 XML 1.0 定义定义。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">下面的示例将 XML 片段。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Gets or sets how many IndentChars to write for each level in the hierarchy when <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>.</source>
          <target state="translated">获取或设置当 <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> 设置为 <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph> 时将为层次结构中的每个级别编写多少 IndentChar。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Number of <ph id="ph1">&lt;see langword="IndentChars" /&gt;</ph> for each level.</source>
          <target state="translated">每个级别的 <ph id="ph1">&lt;see langword="IndentChars" /&gt;</ph> 的数目。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The default is 2.</source>
          <target state="translated">默认值为 2。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Indentation is performed on following node types: <ph id="ph1">`DocumentType`</ph>, <ph id="ph2">`Element`</ph>, <ph id="ph3">`Comment`</ph>, <ph id="ph4">`ProcessingInstruction`</ph>, and <ph id="ph5">`CDATASection`</ph>.</source>
          <target state="translated">缩进执行对以下节点类型： <ph id="ph1">`DocumentType`</ph>， <ph id="ph2">`Element`</ph>， <ph id="ph3">`Comment`</ph>， <ph id="ph4">`ProcessingInstruction`</ph>，和<ph id="ph5">`CDATASection`</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>All other node types are not affected.</source>
          <target state="translated">所有其他节点类型不受影响。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The <ph id="ph1">`XmlTextWriter`</ph> does not indent the internal DTD subset.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph>不缩进内部的 DTD 子集。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>However, you could do the following to apply formatting to the internal DTD subset.</source>
          <target state="translated">但是，无法执行以下操作来将格式应用于内部的 DTD 子集。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">下面的示例将 XML 片段。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Setting this property to a negative value.</source>
          <target state="translated">将该属性设置为负值。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>Gets or sets which character to use for indenting when <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>.</source>
          <target state="translated">获取或设置当 <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> 设置为 <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph> 时哪个字符用于缩进。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The character to use for indenting.</source>
          <target state="translated">用于缩进的字符。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The default is space.</source>
          <target state="translated">默认为空格。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> allows you to set this property to any character.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 允许您将该属性设置为任意字符。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</source>
          <target state="translated">为了确保 XML 有效，你必须指定有效的空格字符 0x9、0x10、0x13 或 0x20。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Namespace URI whose prefix you want to find.</source>
          <target state="translated">要查找其前缀的命名空间 URI。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Returns the closest prefix defined in the current namespace scope for the namespace URI.</source>
          <target state="translated">返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>The matching prefix.</source>
          <target state="translated">匹配的前缀。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no matching namespace URI is found in the current scope.</source>
          <target state="translated">如果当前范围内未找到匹配的命名空间 URI，则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">下面的示例将写出一本书。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source><ph id="ph1">&lt;paramref name="ns" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ns" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>Gets or sets a value indicating whether to do namespace support.</source>
          <target state="translated">获取或设置一个值，该值指示是否进行命名空间支持。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to support namespaces; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果支持命名空间，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>This property determines whether the writer supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</source>
          <target state="translated">此属性确定编写器是否支持位于 www.w3.org/TR/REC-xml-names XML 建议中的 W3C 命名空间。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>You can only change this property when in the <ph id="ph1">&lt;see langword="WriteState.Start" /&gt;</ph> state.</source>
          <target state="translated">只能在处于 <ph id="ph1">&lt;see langword="WriteState.Start" /&gt;</ph> 状态时更改此属性。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Gets or sets which character to use to quote attribute values.</source>
          <target state="translated">获取或设置要用于引用属性值的字符。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>The character to use to quote attribute values.</source>
          <target state="translated">用于引用属性值的字符。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>This must be a single quote (<ph id="ph1">&amp;amp;</ph>#39;) or a double quote (<ph id="ph2">&amp;amp;</ph>#34;).</source>
          <target state="translated">这必须是单引号 (<ph id="ph1">&amp;amp;</ph>#39;) 或双引号 (<ph id="ph2">&amp;amp;</ph>#34;)。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>The default is a double quote.</source>
          <target state="translated">默认为双引号。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Setting this property to something other than either a single or double quote.</source>
          <target state="translated">将该属性设置为非单引号，也非双引号。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Byte array to encode.</source>
          <target state="translated">要进行编码的字节数组。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The position within the buffer indicating the start of the bytes to write.</source>
          <target state="translated">缓冲区中的位置，指示要写入的字节的起始位置。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">要写入的字节数。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Encodes the specified binary bytes as base64 and writes out the resulting text.</source>
          <target state="translated">将指定的二进制字节编码为 Base64 并写出结果文本。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The following example encodes an input file using <ph id="ph1">`WriteBase64`</ph> and generates a temporary XML file.</source>
          <target state="translated">下面的示例将编码输入的文件使用<ph id="ph1">`WriteBase64`</ph>并生成一个临时 XML 文件。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The temporary XML file is decoded using the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadBase64%2A&gt;</ph> method and compared to the original file.</source>
          <target state="translated">临时 XML 文件进行解码使用<ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadBase64%2A&gt;</ph>方法和与原始文件进行比较。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">缓冲区长度减去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Byte array to encode.</source>
          <target state="translated">要进行编码的字节数组。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The position in the buffer indicating the start of the bytes to write.</source>
          <target state="translated">缓冲区中指示要写入字节的起始位置的位置。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">要写入的字节数。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Encodes the specified binary bytes as binhex and writes out the resulting text.</source>
          <target state="translated">将指定的二进制字节编码为 BinHex 并写出结果文本。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">缓冲区长度减去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is Closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 为 Closed。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Text to place inside the CDATA block.</source>
          <target state="translated">要放置在 CDATA 块中的文本。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Writes out a <ph id="ph1">&amp;lt;</ph>![CDATA[...]]<ph id="ph2">&amp;gt;</ph> block containing the specified text.</source>
          <target state="translated">写出包含指定文本的 <ph id="ph1">&amp;lt;</ph>![CDATA[...]]<ph id="ph2">&amp;gt;</ph> 块。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes an empty CDATA block, for example <ph id="ph4">\&lt;</ph>![CDATA[]]]&gt;&lt;![CDATA[]&gt;.</source>
          <target state="translated">如果<ph id="ph1">`text`</ph>是<ph id="ph2">`null`</ph>或<ph id="ph3">`String.Empty`</ph>，此方法将写入到空 CDATA 块中，例如<ph id="ph4">\&lt;</ph>！ [CDATA []]] &gt;&lt; ！[CDATA [] &gt;。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下面的示例编写一个表示书的 XML 文件。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The text would result in a non-well formed XML document.</source>
          <target state="translated">该文本将导致格式不正确的 XML 文档。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Unicode character for which to generate a character entity.</source>
          <target state="translated">为其生成字符实体的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Forces the generation of a character entity for the specified Unicode character value.</source>
          <target state="translated">为指定的 Unicode 字符值强制生成字符实体。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>This method writes the Unicode character in hexadecimal character entity reference format.</source>
          <target state="translated">此方法以十六进制字符实体引用格式写入的 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The following example uses the <ph id="ph1">`WriteCharEntity`</ph> method to write an email address.</source>
          <target state="translated">下面的示例使用<ph id="ph1">`WriteCharEntity`</ph>方法写入电子邮件地址。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The character is in the surrogate pair character range, <ph id="ph1">&lt;see langword="0xd800" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;see langword="0xdfff" /&gt;</ph>; or the text would result in a non-well formed XML document.</source>
          <target state="translated">该字符应处于代理项对字符范围 <ph id="ph1">&lt;see langword="0xd800" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;see langword="0xdfff" /&gt;</ph> 内；否则该文本将导致格式不正确的 XML 文档。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Character array containing the text to write.</source>
          <target state="translated">包含要写入的文本的字符数组。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The position in the buffer indicating the start of the text to write.</source>
          <target state="translated">缓冲区中指示要写入文本的起始位置的位置。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">要写入的字符数。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Writes text one buffer at a time.</source>
          <target state="translated">以每次一个缓冲区的方式写入文本。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>This method can be used to write large amounts of text one buffer at a time.</source>
          <target state="translated">此方法可以用于一次写入大量的文本一个缓冲区。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Special handling must be done to ensure the <ph id="ph1">`WriteChars`</ph> method does not split surrogate pair characters across multiple buffer writes.</source>
          <target state="translated">必须进行特殊处理以确保<ph id="ph1">`WriteChars`</ph>方法没有将代理项对字符拆分跨多个缓冲区写入。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The XML specification defines the valid ranges for surrogate pairs.</source>
          <target state="translated">XML 规范定义的有效范围为代理项对。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>An exception is thrown if surrogate pair characters are written that would result in the surrogate pair characters being split in the buffer.</source>
          <target state="translated">如果这将导致代理项对字符进行 split 缓冲区中写入代理项对字符，将引发异常。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</source>
          <target state="translated">缓冲区长度减去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>；此调用导致代理项对字符被拆分或写入无效的代理项对。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is Closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 为 Closed。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Text to place inside the comment.</source>
          <target state="translated">要放在注释内的文本。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Writes out a comment <ph id="ph1">&amp;lt;</ph>!--...--<ph id="ph2">&amp;gt;</ph> containing the specified text.</source>
          <target state="translated">写出包含指定文本的注释 <ph id="ph1">&amp;lt;</ph>!--...--<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a <ph id="ph4">`Comment`</ph> with no data content, for example <ph id="ph5">\&lt;</ph>!----&gt;.</source>
          <target state="translated">如果<ph id="ph1">`text`</ph>是<ph id="ph2">`null`</ph>或<ph id="ph3">`String.Empty`</ph>，此方法将写入<ph id="ph4">`Comment`</ph>没有数据内容，例如<ph id="ph5">\&lt;</ph>！---&gt;。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下面的示例编写一个表示书的 XML 文件。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The text would result in a non-well formed XML document</source>
          <target state="translated">该文本将导致格式不正确的 XML 文档。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The name of the DOCTYPE.</source>
          <target state="translated">DOCTYPE 的名称。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This must be non-empty.</source>
          <target state="translated">它必须是非空的。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If non-null it also writes PUBLIC "pubid" "sysid" where <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> are replaced with the value of the given arguments.</source>
          <target state="translated">如果非 null，则它还写入 PUBLIC "pubid" "sysid"，这里的 <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> 和 <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> 用给定参数的值替换。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> is null and <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> is non-null it writes SYSTEM "sysid" where <bpt id="p3">&lt;c&gt;</bpt>sysid<ept id="p3">&lt;/c&gt;</ept> is replaced with the value of this argument.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> 为 null 而 <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> 非 null，则它编写 SYSTEM "sysid"，这里的 <bpt id="p3">&lt;c&gt;</bpt>sysid<ept id="p3">&lt;/c&gt;</ept> 用此参数的值替换。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If non-null it writes [subset] where subset is replaced with the value of this argument.</source>
          <target state="translated">如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>Writes the DOCTYPE declaration with the specified name and optional attributes.</source>
          <target state="translated">写出具有指定名称和可选属性的 DOCTYPE 声明。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This method does not check for invalid characters in <ph id="ph1">`pubid`</ph>, <ph id="ph2">`sysid`</ph> or <ph id="ph3">`subset`</ph>.</source>
          <target state="translated">此方法不会检查中的无效字符<ph id="ph1">`pubid`</ph>，<ph id="ph2">`sysid`</ph>或<ph id="ph3">`subset`</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>It also does not check that the internal subset is well-formed.</source>
          <target state="translated">它也不会检查内部子集的格式正确。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>不会验证传递给任何数据<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">你不应将任意数据传递给此方法。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下面的示例编写一个表示书的 XML 文件。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This method was called outside the prolog (after the root element).</source>
          <target state="translated">在序言码外部（根元素之后）调用了此方法。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>the value for <ph id="ph1">&lt;paramref name="name" /&gt;</ph> would result in invalid XML.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 的值将导致无效的 XML。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>Closes the previous <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /&gt;</ph> call.</source>
          <target state="translated">关闭上一个 <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /&gt;</ph> 调用。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>If you call <ph id="ph1">`WriteStartAttribute`</ph>, you can close the attribute with this method.</source>
          <target state="translated">如果调用<ph id="ph1">`WriteStartAttribute`</ph>，你可以使用此方法关闭该属性。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>You can also close the attribute by calling <ph id="ph1">`WriteStartAttribute`</ph> again, calling <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>, or calling <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>.</source>
          <target state="translated">你还可以通过调用关闭属性<ph id="ph1">`WriteStartAttribute`</ph>同样，调用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>，或调用<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>The following example writes out a book.</source>
          <target state="translated">下面的示例将写出一本书。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>Closes any open elements or attributes and puts the writer back in the Start state.</source>
          <target state="translated">关闭任何打开的元素或特性并将写入器重新设置为起始状态。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下面的示例编写一个表示书的 XML 文件。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>The XML document is invalid.</source>
          <target state="translated">XML 文档无效。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>Closes one element and pops the corresponding namespace scope.</source>
          <target state="translated">关闭一个元素并弹出相应的命名空间范围。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>If the element contains no content a short end tag "/&gt;" is written; otherwise a full end tag is written.</source>
          <target state="translated">如果元素不包含内容短结束标记"/ &gt;"写入;否则写入完整的结束标记。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下面的示例编写一个表示书的 XML 文件。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Name of the entity reference.</source>
          <target state="translated">实体引用的名称。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Writes out an entity reference as <ph id="ph1">&lt;see langword="&amp;amp;name;" /&gt;</ph>.</source>
          <target state="translated">按 <ph id="ph1">&lt;see langword="&amp;amp;name;" /&gt;</ph> 写出实体引用。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下面的示例编写一个表示书的 XML 文件。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>The text would result in a non-well formed XML document or <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated">该文本将导致格式不正确的 XML 文档；或者 <ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>Closes one element and pops the corresponding namespace scope.</source>
          <target state="translated">关闭一个元素并弹出相应的命名空间范围。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>This method always writes the full end tag.</source>
          <target state="translated">此方法始终写入完整的结束标记。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>This is useful when dealing with elements that must include a full end tag.</source>
          <target state="translated">必须包括完整的结束标记的元素在处理时，这非常有用。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>For example, browsers expect HTML script blocks to be closed with "<ph id="ph1">\&lt;</ph>/script&gt;".</source>
          <target state="translated">例如，浏览器要求 HTML 脚本块与要关闭" <ph id="ph1">\&lt;</ph> /&gt;"。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>The following example writes out an element with no content.</source>
          <target state="translated">下面的示例将写出具有任何内容的元素。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>It uses WriteFullEndElement to write the full end element tag.</source>
          <target state="translated">它使用 WriteFullEndElement 写入完整的结束元素标记。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Name to write.</source>
          <target state="translated">要写出的名称。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>.</source>
          <target state="translated">写出指定的名称，确保它是符合 W3C XML 1.0 建议 (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>) 的有效名称。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, <ph id="ph3">`WriteName`</ph> also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph>设置为<ph id="ph2">`true`</ph>，<ph id="ph3">`WriteName`</ph>还会检查的名称也是根据 XML 建议中的 W3C 命名空间有效。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid XML name; or <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph3">&lt;see langword="null" /&gt;</ph> or <ph id="ph4">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 不是有效的 XML 名称，或者 <ph id="ph2">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph4">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Name to write.</source>
          <target state="translated">要写出的名称。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Writes out the specified name, ensuring it is a valid <ph id="ph1">&lt;see langword="NmToken" /&gt;</ph> according to the W3C XML 1.0 recommendation (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>.</source>
          <target state="translated">写出指定的名称，确保它是符合 W3C XML 1.0 建议 (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>) 的有效 <ph id="ph1">&lt;see langword="NmToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid <ph id="ph2">&lt;see langword="NmToken" /&gt;</ph>; or <ph id="ph3">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph4">&lt;see langword="null" /&gt;</ph> or <ph id="ph5">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see langword="NmToken" /&gt;</ph>；或者 <ph id="ph3">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph5">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Name of the processing instruction.</source>
          <target state="translated">处理指令的名称。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Text to include in the processing instruction.</source>
          <target state="translated">要包括在处理指令中的文本。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Writes out a processing instruction with a space between the name and text as follows: <ph id="ph1">&amp;lt;</ph>?name text?<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">写出在名称和文本之间有空格的处理指令，如下所示：<ph id="ph1">&amp;lt;</ph>?name text?<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a <ph id="ph4">`ProcessingInstruction`</ph> with no data content, for example <ph id="ph5">\&lt;</ph>?name?&gt;.</source>
          <target state="translated">如果<ph id="ph1">`text`</ph>是<ph id="ph2">`null`</ph>或<ph id="ph3">`String.Empty`</ph>，此方法将写入<ph id="ph4">`ProcessingInstruction`</ph>没有数据内容，例如<ph id="ph5">\&lt;</ph>？ 名称？ &gt;。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下面的示例编写一个表示书的 XML 文件。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>The text would result in a non-well formed XML document.</source>
          <target state="translated">该文本将导致格式不正确的 XML 文档。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>This method is being used to create an XML declaration after <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /&gt;</ph> has already been called.</source>
          <target state="translated">调用了 <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /&gt;</ph> 后，使用此方法创建 XML 声明。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The local name to write.</source>
          <target state="translated">要写入的本地名称。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The namespace URI to associate with the name.</source>
          <target state="translated">与该名称关联的命名空间 URI。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Writes out the namespace-qualified name.</source>
          <target state="translated">写出命名空间限定的名称。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>This method looks up the prefix that is in scope for the given namespace.</source>
          <target state="translated">此方法查找位于给定命名空间范围内的前缀。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>For example, the following Microsoft Visual C# code:</source>
          <target state="translated">例如，下面的 Microsoft Visual C# 代码：</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Generates the following output:</source>
          <target state="translated">生成以下输出：</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>If <ph id="ph1">`ns`</ph> maps to the current default namespace, no prefix is generated.</source>
          <target state="translated">如果<ph id="ph1">`ns`</ph>生成映射到当前默认命名空间，没有前缀。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>When writing attribute values, this method generates a prefix if <ph id="ph1">`ns`</ph> is not found.</source>
          <target state="translated">如果在编写属性值时，此方法将生成前缀<ph id="ph1">`ns`</ph>找不到。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>When writing element content, it throws an exception if <ph id="ph1">`ns`</ph> is not found.</source>
          <target state="translated">在编写元素内容时，如果引发了异常<ph id="ph1">`ns`</ph>找不到。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>If this writer supports namespaces (<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>), this method also checks that the name is valid according to the W3C Namespaces in XML recommendation (<ph id="ph3">http://www.w3.org/TR/REC-xml-names)</ph>.</source>
          <target state="translated">如果此编写器支持命名空间 (<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph>设置为<ph id="ph2">`true`</ph>)，此方法还检查该名称是否有效根据 XML 建议中的 W3C 命名空间 (<ph id="ph3">http://www.w3.org/TR/REC-xml-names)</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The following example writes out a portion of a XSD schema.</source>
          <target state="translated">下面的示例将写出 XSD 架构的一部分。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is not a valid name according to the W3C Namespaces spec.</source>
          <target state="translated">根据 W3C 命名空间规范，<ph id="ph1">&lt;paramref name="localName" /&gt;</ph> 不是有效的名称。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Writes raw markup manually.</source>
          <target state="translated">手动写入原始标记。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>String containing the text to write.</source>
          <target state="translated">包含要写入的文本的字符串。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>Writes raw markup manually from a string.</source>
          <target state="translated">从字符串手动写入原始标记。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>This method does not escape special characters.</source>
          <target state="translated">此方法未转义特殊字符。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>不会验证传递给任何数据<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">你不应将任意数据传递给此方法。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>The following example writes a string using the <ph id="ph1">`WriteRaw`</ph> method.</source>
          <target state="translated">下面的示例将字符串使用<ph id="ph1">`WriteRaw`</ph>方法。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Character array containing the text to write.</source>
          <target state="translated">包含要写入的文本的字符数组。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The position within the buffer indicating the start of the text to write.</source>
          <target state="translated">缓冲区中的位置，指示要写入文本的起始位置。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">要写入的字符数。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Writes raw markup manually from a character buffer.</source>
          <target state="translated">从字符缓冲区手动写入原始标记。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>This method does not escape special characters.</source>
          <target state="translated">此方法未转义特殊字符。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>不会验证传递给任何数据<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">你不应将任意数据传递给此方法。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">缓冲区长度减去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="Namespace" /&gt;</ph> prefix of the attribute.</source>
          <target state="translated">特性的 <ph id="ph1">&lt;see langword="Namespace" /&gt;</ph> 前缀。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="LocalName" /&gt;</ph> of the attribute.</source>
          <target state="translated">特性的 <ph id="ph1">&lt;see langword="LocalName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="NamespaceURI" /&gt;</ph> of the attribute</source>
          <target state="translated">特性的 <ph id="ph1">&lt;see langword="NamespaceURI" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>Writes the start of an attribute.</source>
          <target state="translated">写入属性的开头。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>This is a more advanced version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> that allows you to write an attribute value using multiple write methods, such as <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>.</source>
          <target state="translated">这是更高级的版本<ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>，允许您写入属性值使用多个写方法，如<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">下面的示例将写出一本书。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Writes the XML declaration with the version "1.0".</source>
          <target state="translated">写入版本为“1.0”的 XML 声明。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>Writes the XML declaration with the version "1.0".</source>
          <target state="translated">写入版本为“1.0”的 XML 声明。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
          <target state="translated">由编写器的实现方式确定文档的编码级别。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
          <target state="translated">例如，如果<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>中指定的对象<ph id="ph2">`XmlTextWriter`</ph>构造函数，这将确定编码属性的值。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>This method does not create a standalone attribute.</source>
          <target state="translated">此方法不创建出独立特性。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called the writer validates that what you are writing is a well-formed XML document.</source>
          <target state="translated">当<ph id="ph1">`WriteStartDocument`</ph>称为编写器验证你正在编写是否格式良好的 XML 文档。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</source>
          <target state="translated">例如，它会检查 XML 声明是第一个节点，其中一个，并仅有一个根级元素存在，依此类推。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
          <target state="translated">如果未调用此方法，该编写器将假定 XML 片段写入，则并且不应用任何根级别规则。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception is thrown.</source>
          <target state="translated">如果<ph id="ph1">`WriteStartDocument`</ph>已调用，然后<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph>方法用于创建另一个 XML 声明，则会引发异常。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下面的示例编写一个表示书的 XML 文件。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>This is not the first write method called after the constructor.</source>
          <target state="translated">这不是在构造函数后调用的第一个写方法。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, it writes "standalone=yes"; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, it writes "standalone=no".</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则它将写入"standalone=yes"；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，则它将写入"standalone=no"。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>Writes the XML declaration with the version "1.0" and the standalone attribute.</source>
          <target state="translated">写入版本为“1.0”的 XML 声明和独立的属性。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
          <target state="translated">由编写器的实现方式确定文档的编码级别。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
          <target state="translated">例如，如果<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>中指定的对象<ph id="ph2">`XmlTextWriter`</ph>构造函数，这将确定编码属性的值。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called the writer validates that what you are writing is a well-formed XML document.</source>
          <target state="translated">当<ph id="ph1">`WriteStartDocument`</ph>称为编写器验证你正在编写是否格式良好的 XML 文档。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</source>
          <target state="translated">例如，它会检查 XML 声明是第一个节点，其中一个，并仅有一个根级元素存在，依此类推。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
          <target state="translated">如果未调用此方法，该编写器将假定 XML 片段写入，则并且不应用任何根级别规则。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception is thrown.</source>
          <target state="translated">如果<ph id="ph1">`WriteStartDocument`</ph>已调用，然后<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph>方法用于创建另一个 XML 声明，则会引发异常。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>This is not the first write method called after the constructor.</source>
          <target state="translated">这不是在构造函数后调用的第一个写方法。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The namespace prefix of the element.</source>
          <target state="translated">元素的命名空间前缀。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The local name of the element.</source>
          <target state="translated">元素的本地名称。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The namespace URI to associate with the element.</source>
          <target state="translated">与元素关联的命名空间 URI。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.</source>
          <target state="translated">如果此命名空间已在范围中并具有关联的前缀，则写入器还自动写入该前缀。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>Writes the specified start tag and associates it with the given namespace and prefix.</source>
          <target state="translated">写入指定的开始标记并将其与给定的命名空间和前缀关联起来。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>After calling this method you can either write attributes or create content using <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteComment%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteStartElement%2A&gt;</ph> for child elements.</source>
          <target state="translated">调用此方法您可以编写属性或创建之后内容使用<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteComment%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>，或<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteStartElement%2A&gt;</ph>子元素。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>You can close the element with <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph> at which time an end tag is written out.</source>
          <target state="translated">你可以关闭具有元素<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>哪些时间结束标记写出。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">下面的示例将写出一本书。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The writer is closed.</source>
          <target state="translated">编写器已关闭。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>Gets the state of the writer.</source>
          <target state="translated">获取写入器的状态。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.WriteState" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.WriteState" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Text to write.</source>
          <target state="translated">要写入的文本。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Writes the given text content.</source>
          <target state="translated">写入给定的文本内容。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source><ph id="ph1">`WriteString`</ph> does the following</source>
          <target state="translated"><ph id="ph1">`WriteString`</ph> 执行以下</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The characters <ph id="ph1">`&amp;`</ph>, <ph id="ph2">`&lt;`</ph>, and <ph id="ph3">`&gt;`</ph> are replaced with <ph id="ph4">`&amp;amp;`</ph>, <ph id="ph5">`&amp;lt;`</ph>, and <ph id="ph6">`&amp;gt;`</ph>, respectively.</source>
          <target state="translated">字符<ph id="ph1">`&amp;`</ph>， <ph id="ph2">`&lt;`</ph>，和<ph id="ph3">`&gt;`</ph>使用替换<ph id="ph4">`&amp;amp;`</ph>， <ph id="ph5">`&amp;lt;`</ph>，和<ph id="ph6">`&amp;gt;`</ph>分别。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD) are replaced with numeric character entities (<ph id="ph1">`&amp;#0;`</ph> through <ph id="ph2">`&amp;#0x1F`</ph>).</source>
          <target state="translated">在范围 0 x-0x1F （不包括空白字符 0x9、 0xA 和 0xD） 中的字符值替换为数字字符实体 (<ph id="ph1">`&amp;#0;`</ph>通过<ph id="ph2">`&amp;#0x1F`</ph>)。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>If <ph id="ph1">`WriteString`</ph> is called in the context of an attribute value, double and single quotes are replaced with <ph id="ph2">`&amp;quot;`</ph> and <ph id="ph3">`&amp;apos;`</ph> respectively.</source>
          <target state="translated">如果<ph id="ph1">`WriteString`</ph>调用在属性值的上下文中，双引号和单引号会用替换<ph id="ph2">`&amp;quot;`</ph>和<ph id="ph3">`&amp;apos;`</ph>分别。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>For example, this input string <ph id="ph1">`test&lt;item&gt;test`</ph> is written as</source>
          <target state="translated">例如，输入字符串<ph id="ph1">`test&lt;item&gt;test`</ph>编写为</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a text node with no data content.</source>
          <target state="translated">如果<ph id="ph1">`text`</ph>是<ph id="ph2">`null`</ph>或<ph id="ph3">`String.Empty`</ph>，此方法将写入任何数据内容的文本节点。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">下面的示例将 XML 片段。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The text string contains an invalid surrogate pair.</source>
          <target state="translated">文本字符串包含无效的代理项对。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The low surrogate.</source>
          <target state="translated">低代理项。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This must be a value between <ph id="ph1">&lt;see langword="0xDC00" /&gt;</ph> and <ph id="ph2">&lt;see langword="0xDFFF" /&gt;</ph>.</source>
          <target state="translated">它必须是介于 <ph id="ph1">&lt;see langword="0xDC00" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="0xDFFF" /&gt;</ph> 之间的值。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The high surrogate.</source>
          <target state="translated">高代理项。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This must be a value between <ph id="ph1">&lt;see langword="0xD800" /&gt;</ph> and <ph id="ph2">&lt;see langword="0xDBFF" /&gt;</ph>.</source>
          <target state="translated">它必须是介于 <ph id="ph1">&lt;see langword="0xD800" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="0xDBFF" /&gt;</ph> 之间的值。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>Generates and writes the surrogate character entity for the surrogate character pair.</source>
          <target state="translated">为代理项字符对生成并写入代理项字符实体。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This method is only applicable on systems that use UTF-16 encoding.</source>
          <target state="translated">此方法仅适用于使用 utf-16 编码的系统。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The surrogate character entity is written in hexadecimal format.</source>
          <target state="translated">以十六进制格式写入代理项字符实体。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The range for surrogate characters is <ph id="ph1">`#x10000`</ph> to <ph id="ph2">`#x10FFFF`</ph>.</source>
          <target state="translated">代理项字符的范围是<ph id="ph1">`#x10000`</ph>到<ph id="ph2">`#x10FFFF`</ph>。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The following formula is used to generate the surrogate character entity: (<ph id="ph1">`highChar`</ph><ph id="ph2"> - </ph><ph id="ph3">`0xD800`</ph>) * <ph id="ph4">`0x400`</ph> + (<ph id="ph5">`lowChar`</ph><ph id="ph6"> - </ph><ph id="ph7">`0xDC00`</ph>) + <ph id="ph8">`0x10000`</ph>.</source>
          <target state="translated">以下公式用于生成代理项字符实体: (<ph id="ph1">`highChar`</ph><ph id="ph2"> - </ph><ph id="ph3">`0xD800`</ph>) * <ph id="ph4">`0x400`</ph> + (<ph id="ph5">`lowChar`</ph><ph id="ph6"> - </ph><ph id="ph7">`0xDC00`</ph>) + <ph id="ph8">`0x10000`</ph>。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646].</source>
          <target state="translated">对于 HTML 和 XML，文档的字符集 （和数字字符引用的表示法） 基于 UCS [ISO 10646]。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate).</source>
          <target state="translated">源文档中的单个数字字符引用可能会因此在某些情况下对应于字符串 （一个高代理项和低代理项） 中的两个 16 位单位。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>These 16-bit units are referred to as a surrogate pair.</source>
          <target state="translated">这些 16 位单位称为代理项对。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>For more information regarding surrogates or characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located at <ph id="ph1">http://www.unicode.org</ph>, or section 2.2 of the W3C XML 1.0 Recommendation located at <ph id="ph2">http://www.w3.org/TR/REC-xml#charsets</ph>.</source>
          <target state="translated">有关代理项或多个字符的详细信息，请参阅的部分 3.7 的 Unicode 标准 3.0/Unicode 2.0 位于<ph id="ph1">http://www.unicode.org</ph>，或 W3C XML 1.0 建议的第 2.2 节位于<ph id="ph2">http://www.w3.org/TR/REC-xml#charsets</ph>。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>An invalid surrogate character pair was passed.</source>
          <target state="translated">传递了无效的代理项字符对。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The string of white space characters.</source>
          <target state="translated">空格字符的字符串。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Writes out the given white space.</source>
          <target state="translated">写出给定的空白区域。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>This method is used to manually format your document.</source>
          <target state="translated">此方法用于手动格式化文档。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Formatting%2A&gt;</ph> property to have the writer format the output automatically.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Formatting%2A&gt;</ph>属性自动设置输出格式编写。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The following example uses the <ph id="ph1">`WriteWhitespace`</ph> method to control how the file is formatted.</source>
          <target state="translated">下面的示例使用<ph id="ph1">`WriteWhitespace`</ph>方法可控制该文件的格式。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The string contains non-white space characters.</source>
          <target state="translated">字符串包含非空白字符。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>Gets the current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> scope.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> 范围。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>The current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there is no <ph id="ph3">&lt;see langword="xml:lang" /&gt;</ph> in the current scope.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph>；或者如果当前范围中没有 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，则为 <ph id="ph3">&lt;see langword="xml:lang" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>This property allows one component to find out what state another component has left the writer in.</source>
          <target state="translated">此属性允许要找出哪些状态另一个组件已离开的编写器中的一个组件。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>For example, perhaps one component wants to tell another which language help text to generate.</source>
          <target state="translated">例如，可能是一个组件想要告诉另一个要生成的语言帮助文本。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>The language information is communicated by writing an <ph id="ph1">`xml:lang`</ph> attribute.</source>
          <target state="translated">通过编写通信的语言信息<ph id="ph1">`xml:lang`</ph>属性。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph> representing the current <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> scope.</source>
          <target state="translated">获取表示当前 <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> 范围的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>An <ph id="ph1">&lt;see langword="XmlSpace" /&gt;</ph> representing the current <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> scope.</source>
          <target state="translated">一个表示当前 <ph id="ph1">&lt;see langword="XmlSpace" /&gt;</ph> 范围的 <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 含义</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> None</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 无</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This is the default if no <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph> scope exists.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 这是默认值，如果没有<ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>存在的作用域。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Default</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 默认值</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The current scope is <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="default".</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 当前作用域是<ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="default"。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Preserve</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Preserve</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The current scope is <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="preserve".</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 当前作用域是<ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="preserve"。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">从.NET Framework 2.0 开始，我们建议你创建<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>实例使用<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>类以利用新功能。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>This property allows one component to find out in what state another component has left the writer.</source>
          <target state="translated">此属性允许一个组件，若要了解在什么状态另一个组件已离开编写器。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>The following example uses the <ph id="ph1">`WriteWhitespace`</ph> method to control how the file is formatted.</source>
          <target state="translated">下面的示例使用<ph id="ph1">`WriteWhitespace`</ph>方法可控制该文件的格式。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>