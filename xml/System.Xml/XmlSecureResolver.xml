<Type Name="XmlSecureResolver" FullName="System.Xml.XmlSecureResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ceb22f9106618a3fefd9e4082d3f510f6122c3f" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52245885" /></Metadata><TypeSignature Language="C#" Value="public class XmlSecureResolver : System.Xml.XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSecureResolver extends System.Xml.XmlResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlSecureResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSecureResolver&#xA;Inherits XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSecureResolver : System::Xml::XmlResolver" />
  <TypeSignature Language="F#" Value="type XmlSecureResolver = class&#xA;    inherit XmlResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlResolver</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>通过包装 <see cref="T:System.Xml.XmlResolver" /> 对象和限制基础 <see cref="T:System.Xml.XmlResolver" /> 有权访问的资源，帮助保护 <see cref="T:System.Xml.XmlResolver" /> 的另一个实现。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlUrlResolver> 类是 <xref:System.Xml> 命名空间中所有类的默认解析器。 它用于加载 XML 文档和解析外部资源，如实体、 Dtd 或架构，并导入或包含指令。  
  
 可以通过指定覆盖此默认<xref:System.Xml.XmlResolver>对象使用。 例如，如果你想要限制的资源的基础<xref:System.Xml.XmlResolver>可以访问，则可以使用<xref:System.Xml.XmlSecureResolver>对象。  
  
 <xref:System.Xml.XmlSecureResolver> 包装的具体实现<xref:System.Xml.XmlResolver>和限制的资源的基础<xref:System.Xml.XmlResolver>有权访问。 例如，<xref:System.Xml.XmlSecureResolver>能够禁止跨域重定向，发生从嵌入的统一资源标识符 (URI) 引用。  
  
 当构造<xref:System.Xml.XmlSecureResolver>对象，提供有效<xref:System.Xml.XmlResolver>实现，连同一个 URL，证据对象或权限集的实例由<xref:System.Xml.XmlSecureResolver>来确定安全。 任一<xref:System.Security.PermissionSet?displayProperty=nameWithType>生成或使用现有和<xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=nameWithType>调用它来帮助保护基础<xref:System.Xml.XmlResolver>。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlSecureResolver> 对象可以包含敏感信息，例如用户凭据。 应为缓存时请小心<xref:System.Xml.XmlSecureResolver>对象，并不应将传递<xref:System.Xml.XmlSecureResolver>不可信的组件的对象。  
  
> [!IMPORTANT]
>  没有为.NET Framework 公共语言运行时 (CLR) 上运行的代码和集成在 Microsoft SQL Server 2005 在 CLR 上运行的代码的安全基础结构之间的差异。 这可能会导致 CLR 集成为.NET Framework CLR 以不同方式运行时使用的 SQL Server 上开发的代码的情况下。 其中一种差异会影响<xref:System.Xml.XmlSecureResolver>类具有基于 URL 证据时 (即，使用<xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%28System.String%29>方法或<xref:System.Xml.XmlSecureResolver.%23ctor%2A>构造函数)。 该策略的 SQL Server 的机制集成 CLR 的解决方法不使用<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Zone>信息。 相反，它会授予基于 GUID 时，服务器会加载程序集时的权限。 当你使用<xref:System.Xml.XmlSecureResolver>在 SQL Server 集成 CLR 中，使用指定的直接提供任何所需的证据<xref:System.Security.PermissionSet>。  
  
## <a name="to-use-a-secure-resolver"></a>若要使用安全冲突解决程序  
  
1.  使用正确的权限集创建 <xref:System.Xml.XmlSecureResolver> 对象。  
  
2.  创建使用 <xref:System.Xml.XmlReaderSettings> 对象的 <xref:System.Xml.XmlSecureResolver> 对象。  
  
     [!code-csharp[XmlSecureResolver_Samples#5a](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#5a)]
     [!code-vb[XmlSecureResolver_Samples#5a](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#5a)]  
  
3.  传递<xref:System.Xml.XmlReaderSettings>对象传递给<xref:System.Xml.XmlReader.Create%2A>方法在创建时<xref:System.Xml.XmlReader>对象。  
  
     [!code-csharp[XmlSecureResolver_Samples#5b](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#5b)]
     [!code-vb[XmlSecureResolver_Samples#5b](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#5b)]  
  
## <a name="to-restrict-access-by-using-a-url"></a>若要通过使用 URL 限制访问  
 使用<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>构造函数创建<xref:System.Xml.XmlSecureResolver>允许访问仅限本地 intranet 站点的对象。  
  
 [!code-csharp[XmlSecureResolver_Samples#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#3)]
 [!code-vb[XmlSecureResolver_Samples#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#3)]  
  
## <a name="to-restrict-access-by-using-a-permission-set"></a>若要通过使用权限集限制访问  
  
1.  创建 <xref:System.Net.WebPermission> 对象。  
  
     [!code-csharp[XmlSecureResolver_Samples#4a](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4a)]
     [!code-vb[XmlSecureResolver_Samples#4a](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4a)]  
  
2.  指定你想要允许访问的 Url。  
  
     [!code-csharp[XmlSecureResolver_Samples#4b](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4b)]
     [!code-vb[XmlSecureResolver_Samples#4b](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4b)]  
  
3.  将 Web 权限添加到 <xref:System.Security.PermissionSet> 对象中。  
  
     [!code-csharp[XmlSecureResolver_Samples#4c](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4c)]
     [!code-vb[XmlSecureResolver_Samples#4c](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4c)]  
  
4.  使用<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.PermissionSet%29>构造函数创建<xref:System.Xml.XmlSecureResolver>使用权限集的对象。  
  
     [!code-csharp[XmlSecureResolver_Samples#4d](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4d)]
     [!code-vb[XmlSecureResolver_Samples#4d](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4d)]  
  
     请参阅<xref:System.Xml.XmlSecureResolver.%23ctor%2A>另一个示例的参考页。  
  
## <a name="to-restrict-access-by-using-evidence"></a>若要通过使用证据限制访问  
 你可以通过使用限制访问权限<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>构造函数和指定<xref:System.Security.Policy.Evidence>。 <xref:System.Security.Policy.Evidence> 用于创建应用于基础 <xref:System.Security.PermissionSet> 的 <xref:System.Xml.XmlResolver>。 在打开任何资源之前，<xref:System.Xml.XmlSecureResolver> 在已创建的 <xref:System.Security.PermissionSet.PermitOnly%2A> 上调用 <xref:System.Security.PermissionSet>。  
  
 下面是证据的一些常见方案和每个提供的类型：  
  
-   如果您正在使用完全受信任的环境，使用您的程序集创建证据：  
  
     [!code-csharp[XmlSecureResolver_Samples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#1)]
     [!code-vb[XmlSecureResolver_Samples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#1)]  
  
-   如果您正在不完全受信任环境中，你有代码或从外部源的数据并且您了解外部源的来源和具有可验证的 URI，请使用 URI 创建证据：  
  
     [!code-csharp[XmlSecureResolver_Samples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#2)]
     [!code-vb[XmlSecureResolver_Samples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#2)]  
  
-   如果使用的不完全受信任的环境，具有代码或从外部源的数据，但不可以了解外部源的来源：  
  
     将 `evidence` 参数设置为 `null`。 这样将不允许对资源进行任何访问。  
  
     或  
  
     如果应用程序要求对资源进行一些访问，应向调用方请求数据。  
  
## <a name="to-use-the-secure-resolver-to-load-an-xslt-style-sheet"></a>若要使用的安全冲突解决程序将加载 XSLT 样式表  
  
1.  使用正确的权限集创建 <xref:System.Xml.XmlSecureResolver> 对象。  
  
2.  将 <xref:System.Xml.XmlSecureResolver> 传递到 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 方法。  
  
     [!code-csharp[XmlSecureResolver_Samples#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#6)]
     [!code-vb[XmlSecureResolver_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#6)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>此类具有继承要求。 需要完全信任继承<see cref="T:System.Xml.XmlSecureResolver" />类。</para></block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 三个构造函数提供了三种类型的访问限制：  
  
-   <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>构造函数通过使用 URL 限制访问。  
  
-   <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.PermissionSet%29>构造函数通过使用权限集限制访问。  
  
-   <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>构造函数通过使用证据限制访问。  
  
 请参阅限制这些类型的示例的构造函数参考主题。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.PermissionSet permissionSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver, class System.Security.PermissionSet permissionSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSecureResolver(System::Xml::XmlResolver ^ resolver, System::Security::PermissionSet ^ permissionSet);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlSecureResolver : System.Xml.XmlResolver * System.Security.PermissionSet -&gt; System.Xml.XmlSecureResolver" Usage="new System.Xml.XmlSecureResolver (resolver, permissionSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="permissionSet" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="resolver">由 <see cref="T:System.Xml.XmlSecureResolver" /> 包装的 XML 解析程序。</param>
        <param name="permissionSet">要应用于基础 <see cref="T:System.Xml.XmlResolver" /> 的权限集。 <see cref="T:System.Xml.XmlSecureResolver" /> 对基础 XML 解析程序调用 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> 方法之前，先对权限集调用 <see cref="M:System.Security.PermissionSet.PermitOnly" /> 方法。</param>
        <summary>使用指定的 <see cref="T:System.Xml.XmlResolver" /> 和 <see cref="T:System.Security.PermissionSet" /> 初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例构造<xref:System.Xml.XmlSecureResolver>通过使用自定义的权限集的对象。  
  
 [!code-cpp[XmlSecureResolver.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSecureResolver.cctor/CPP/secresolver.cpp#1)]
 [!code-csharp[XmlSecureResolver.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver.cctor/CS/secresolver.cs#1)]
 [!code-vb[XmlSecureResolver.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver.cctor/VB/secresolver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
        <altmember cref="T:System.Security.Policy.Evidence" />
        <altmember cref="T:System.Net.WebPermission" />
        <altmember cref="T:System.Security.SecurityManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSecureResolver(System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlSecureResolver : System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; System.Xml.XmlSecureResolver" Usage="new System.Xml.XmlSecureResolver (resolver, evidence)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="resolver">由 <see cref="T:System.Xml.XmlSecureResolver" /> 包装的 XML 解析程序。</param>
        <param name="evidence">用于创建将应用于基础 <see cref="T:System.Xml.XmlResolver" /> 的 <see cref="T:System.Security.PermissionSet" /> 的证据。 <see cref="T:System.Xml.XmlSecureResolver" /> 在对基础 <see cref="T:System.Xml.XmlResolver" /> 调用 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> 之前，先对创建的<see cref="T:System.Security.PermissionSet" /> 调用 <see cref="M:System.Security.PermissionSet.PermitOnly" /> 方法。</param>
        <summary>使用指定的 <see cref="T:System.Xml.XmlResolver" /> 和 <see cref="T:System.Security.Policy.Evidence" /> 初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面是证据的一些可能的方案和每个方案提供的类型：  
  
-   如果您正在使用完全受信任的环境，使用您的程序集创建证据：  
  
     [!code-csharp[XmlSecureResolver_Samples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#1)]
     [!code-vb[XmlSecureResolver_Samples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#1)]  
  
-   如果您正在不完全受信任环境中，你有代码或从外部源的数据并且您了解外部源的来源和具有可验证的 URI，请使用 URI 创建证据：  
  
     [!code-csharp[XmlSecureResolver_Samples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#2)]
     [!code-vb[XmlSecureResolver_Samples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#2)]  
  
-   如果使用的不完全受信任的环境，具有代码或从外部源的数据，但不可以了解外部源的来源：  
  
     将 `evidence` 参数设置为 `null`。 这样将不允许对资源进行任何访问。  
  
     或  
  
     如果应用程序要求对资源进行一些访问，应向调用方请求数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSecureResolver (System.Xml.XmlResolver resolver, string securityUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver, string securityUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver, securityUrl As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSecureResolver(System::Xml::XmlResolver ^ resolver, System::String ^ securityUrl);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlSecureResolver : System.Xml.XmlResolver * string -&gt; System.Xml.XmlSecureResolver" Usage="new System.Xml.XmlSecureResolver (resolver, securityUrl)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="securityUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver">由 <see cref="T:System.Xml.XmlSecureResolver" /> 包装的 XML 解析程序。</param>
        <param name="securityUrl">用于创建将应用于基础 <see cref="T:System.Xml.XmlResolver" /> 的<see cref="T:System.Security.PermissionSet" /> 的 URL。 <see cref="T:System.Xml.XmlSecureResolver" /> 在对基础 <see cref="T:System.Xml.XmlResolver" /> 调用 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> 之前，先对创建的 <see cref="T:System.Security.PermissionSet" /> 调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />。</param>
        <summary>使用提供的 <see cref="T:System.Xml.XmlResolver" /> 和 URL 初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  没有为.NET Framework 公共语言运行时 (CLR) 上运行的代码和集成在 Microsoft SQL Server 2005 在 CLR 上运行的代码的安全基础结构之间的差异。 这可能会导致 CLR 集成为.NET Framework CLR 以不同方式运行时使用的 SQL Server 上开发的代码的情况下。 其中一种差异会影响<xref:System.Xml.XmlSecureResolver>类具有基于 URL 证据时 (即，使用<xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A>方法或<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>构造函数)。 该策略的 SQL Server 的机制集成 CLR 的解决方法不使用<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Zone>信息。 相反，它会授予基于 GUID 时，服务器会加载程序集时的权限。 当你使用<xref:System.Xml.XmlSecureResolver>在 SQL Server 集成 CLR 中，使用指定的直接提供任何所需的证据<xref:System.Security.PermissionSet>。  
  
   
  
## Examples  
 此示例使用<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>构造函数创建<xref:System.Xml.XmlSecureResolver>允许访问仅限本地 intranet 站点的对象。  
  
 [!code-csharp[XmlSecureResolver_Samples#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#3)]
 [!code-vb[XmlSecureResolver_Samples#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEvidenceForUrl">
      <MemberSignature Language="C#" Value="public static System.Security.Policy.Evidence CreateEvidenceForUrl (string securityUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Policy.Evidence CreateEvidenceForUrl(string securityUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateEvidenceForUrl (securityUrl As String) As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Policy::Evidence ^ CreateEvidenceForUrl(System::String ^ securityUrl);" />
      <MemberSignature Language="F#" Value="static member CreateEvidenceForUrl : string -&gt; System.Security.Policy.Evidence" Usage="System.Xml.XmlSecureResolver.CreateEvidenceForUrl securityUrl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="securityUrl">用来创建证据的 URL。</param>
        <summary>使用提供的 URL 创建证据。</summary>
        <returns>从默认策略定义的提供的 URL 中生成的证据。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  没有为.NET Framework 公共语言运行时 (CLR) 上运行的代码和集成在 Microsoft SQL Server 2005 在 CLR 上运行的代码的安全基础结构之间的差异。 这可能会导致 CLR 集成为.NET Framework CLR 以不同方式运行时使用的 SQL Server 上开发的代码的情况下。 其中一种差异会影响<xref:System.Xml.XmlSecureResolver>类具有基于 URL 证据时 (即，使用<xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A>方法或<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>构造函数)。 该策略的 SQL Server 的机制集成 CLR 的解决方法不使用<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Zone>信息。 相反，它会授予基于 GUID 时，服务器会加载程序集时的权限。 当你使用<xref:System.Xml.XmlSecureResolver>在 SQL Server 集成 CLR 中，使用指定的直接提供任何所需的证据<xref:System.Security.PermissionSet>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlSecureResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlSecureResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置用于对 Web 请求进行身份验证的凭据。</summary>
        <value>用于对 Web 请求进行身份验证的凭据。 <see cref="T:System.Xml.XmlSecureResolver" /> 在基础 <see cref="T:System.Xml.XmlResolver" /> 上设置给定的凭据。 如果未设置该属性，则该值默认为 <see langword="null" />；即 <see cref="T:System.Xml.XmlSecureResolver" /> 没有用户凭据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例使用<xref:System.Xml.XmlSecureResolver>具有默认凭据，以解析并打开所需的网络资源<xref:System.Xml.XmlTextReader>。  
  
 [!code-cpp[XmlSecureResolver.Credentials#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSecureResolver.Credentials/CPP/secresolver2.cpp#1)]
 [!code-csharp[XmlSecureResolver.Credentials#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver.Credentials/CS/secresolver2.cs#1)]
 [!code-vb[XmlSecureResolver.Credentials#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver.Credentials/VB/secresolver2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="P:System.Net.CredentialCache.DefaultCredentials" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntity : Uri * string * Type -&gt; obj" Usage="xmlSecureResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">从 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
        <param name="role">当前未使用。</param>
        <param name="ofObjectToReturn">要返回的对象的类型。 当前版本只返回 <see cref="T:System.IO.Stream" /> 对象。</param>
        <summary>将 URI 映射到包含实际资源的对象。 此方法在对基础 <see cref="T:System.Xml.XmlResolver" /> 调用<see langword="GetEntity" /> 之前，先调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />，以临时设置构造函数中创建的 <see cref="T:System.Security.PermissionSet" />，从而打开该资源。</summary>
        <returns>通过在基础 <see cref="T:System.Xml.XmlResolver" /> 上调用 <see langword="GetEntity" /> 而返回的流。 如果指定 <see cref="T:System.IO.Stream" /> 以外的类型，方法将返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  你的应用程序可以缓解内存拒绝服务威胁<xref:System.Xml.XmlSecureResolver.GetEntity%2A>方法通过实现<xref:System.Runtime.InteropServices.ComTypes.IStream>，用于限制读取的字节数。 这有助于防止恶意代码尝试将传递到的字节数的无限流的情况下<xref:System.Xml.XmlSecureResolver.GetEntity%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see cref="T:System.IO.Stream" /> 类型。</exception>
        <exception cref="T:System.UriFormatException">指定的 URI 不是一个绝对 URI。</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="absoluteUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Exception">存在运行时错误（例如中断的服务器连接）。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlSecureResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">从 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
        <param name="role">当前未使用。</param>
        <param name="ofObjectToReturn">要返回的对象的类型。 当前版本只返回 <see cref="T:System.IO.Stream" /> 对象。</param>
        <summary>将 URI 异步映射到包含实际资源的对象。</summary>
        <returns>通过在基础 <see cref="T:System.Xml.XmlResolver" /> 上调用 <see langword="GetEntity" /> 而返回的流。 如果指定 <see cref="T:System.IO.Stream" /> 以外的类型，方法将返回 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public override Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlSecureResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">用于解析相对 URI 的基 URI。</param>
        <param name="relativeUri">要解析的 URI。 URI 可以是绝对的或相对的。 如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。 如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。</param>
        <summary>通过在基础 <see cref="T:System.Xml.XmlResolver" /> 上调用 <see langword="ResolveUri" />，从基 URI 和相对 URI 中解析绝对 URI。</summary>
        <returns>绝对 URI；如果不能解析相对 URI，则为 <see langword="null" />（通过在基础 <see cref="T:System.Xml.XmlResolver" /> 上调用 <see langword="ResolveUri" /> 来返回）。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="relativeUri" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>