<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b5d797b515515af78c99d7bae5dc98c881fba73b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527291" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">
      <span data-ttu-id="cc0dc-101">一个对象，包含回调方法在每次执行时要使用的信息。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cc0dc-101">An object containing information to be used by the callback method each time it executes.</span>
      </span>
    </param>
    <param name="timedOut">
      <span data-ttu-id="cc0dc-102">如果 <see cref="T:System.Threading.WaitHandle" /> 超时，则为 <see langword="true" />；如果其终止，则为 <see langword="false" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cc0dc-102">
          <see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="cc0dc-103">表示当 <see cref="T:System.Threading.WaitHandle" /> 超时或终止时要调用的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cc0dc-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc0dc-104"><xref:System.Threading.WaitOrTimerCallback> 表示你想要在已注册的等待句柄超时时，或处于有信号状态时执行的回调方法。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="cc0dc-105">通过将传递到回调方法创建委托<xref:System.Threading.WaitOrTimerCallback>构造函数。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="cc0dc-106">你的方法必须具有此处所示的签名。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="cc0dc-107">通过将传递创建已注册的等待句柄<xref:System.Threading.WaitOrTimerCallback>委托和<xref:System.Threading.WaitHandle>到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cc0dc-108">你的回调方法执行每次<xref:System.Threading.WaitHandle>超时或处于有信号状态。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="cc0dc-109">Visual Basic 用户可以省略<xref:System.Threading.WaitOrTimerCallback>构造函数，并且只需使用`AddressOf`运算符传递到回调方法时<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="cc0dc-110">Visual Basic 会自动调用正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="cc0dc-111">如果你想要将信息传递给你的回调方法，创建包含所需的信息的对象，并将其传递到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>当你创建的已注册的等待句柄。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="cc0dc-112">执行回调方法时，每次`state`参数包含此对象。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="cc0dc-113">有关使用回调方法以同步线程池线程的详细信息，请参阅[托管线程池](~/docs/standard/threading/the-managed-thread-pool.md)。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-113">For more information about using callback methods to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc0dc-114">下面的示例演示如何使用<xref:System.Threading.WaitOrTimerCallback>的委托来表示等待句柄处于有信号状态时执行的回调方法。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="cc0dc-115">该示例还演示如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>时要执行方法指定的回调方法指定的等待句柄处于有信号状态。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="cc0dc-116">在此示例中，回调方法是`WaitProc`和等待句柄是<xref:System.Threading.AutoResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="cc0dc-117">该示例定义了`TaskInfo`类来保存时它将执行传递给回调的信息。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="cc0dc-118">该示例创建`TaskInfo`对象并将其分配某些字符串数据。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="cc0dc-119"><xref:System.Threading.RegisteredWaitHandle>返回<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法分配给`Handle`字段`TaskInfo`对象，以便回调方法有权<xref:System.Threading.RegisteredWaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="cc0dc-120">除了`TaskInfo`对象，将会调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定<xref:System.Threading.AutoResetEvent>任务等待<xref:System.Threading.WaitOrTimerCallback>委托，表示`WaitProc`回调方法、 的一秒超时间隔和多个回调.</span><span class="sxs-lookup"><span data-stu-id="cc0dc-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="cc0dc-121">当主线程发出信号<xref:System.Threading.AutoResetEvent>通过调用其<xref:System.Threading.EventWaitHandle.Set%2A>方法，<xref:System.Threading.WaitOrTimerCallback>调用委托。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="cc0dc-122">`WaitProc`方法测试<xref:System.Threading.RegisteredWaitHandle>以确定是否发生了超时。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="cc0dc-123">如果由于等待句柄已收到信号，而调用的回调`WaitProc`方法注销<xref:System.Threading.RegisteredWaitHandle>，停止将后续回调。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="cc0dc-124">对于超时，该任务会继续等待。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="cc0dc-125">`WaitProc`方法结束时将消息输出到控制台。</span><span class="sxs-lookup"><span data-stu-id="cc0dc-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>