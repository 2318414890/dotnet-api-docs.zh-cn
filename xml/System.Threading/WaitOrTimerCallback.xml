<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="289e1b5b821956cddb25a0678cc80180a46e2875" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48724829" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">一个对象，包含回调方法在每次执行时要使用的信息。</param>
    <param name="timedOut">如果 <see cref="T:System.Threading.WaitHandle" /> 超时，则为 <see langword="true" />；如果其终止，则为 <see langword="false" />。</param>
    <summary>表示当 <see cref="T:System.Threading.WaitHandle" /> 超时或终止时要调用的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> 表示你想要的已注册的等待句柄将会超时或终止时执行的回调方法。 通过将传递到回调方法创建委托<xref:System.Threading.WaitOrTimerCallback>构造函数。 您的方法必须具有的签名如下所示。  
  
 表示通过创建已注册的等待句柄<xref:System.Threading.WaitOrTimerCallback>委托和一个<xref:System.Threading.WaitHandle>到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>。 回调方法执行每次<xref:System.Threading.WaitHandle>超时或发出信号。  
  
  
> [!NOTE]
>  Visual Basic 用户可以省略<xref:System.Threading.WaitOrTimerCallback>构造函数，并只需使用`AddressOf`运算符时将传递到回调方法<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>。 Visual Basic 会自动调用正确的委托构造函数。  
  
 如果你想要将信息传递给回调方法，创建包含所需的信息的对象并将其传递给<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>时创建的已注册的等待句柄。 在执行回调方法，每次`state`参数包含此对象。  
  
 有关使用回调方法来同步线程池线程的详细信息，请参阅[托管的线程池](~/docs/standard/threading/the-managed-thread-pool.md)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Threading.WaitOrTimerCallback>的委托来表示一个等待句柄发出信号时执行的回调方法。  
  
 该示例还演示如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>要指定的等待句柄发出信号时执行指定的回调方法的方法。 在此示例中，回调方法是`WaitProc`和等待句柄是<xref:System.Threading.AutoResetEvent>。  
  
 该示例定义了`TaskInfo`类来保存时它将执行传递给回调的信息。 此示例将创建`TaskInfo`对象，并将其分配一些字符串数据。 <xref:System.Threading.RegisteredWaitHandle>返回的<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定给`Handle`字段`TaskInfo`对象，以便回调方法有权访问<xref:System.Threading.RegisteredWaitHandle>。  
  
 除了`TaskInfo`对象，将会调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定<xref:System.Threading.AutoResetEvent>任务等待<xref:System.Threading.WaitOrTimerCallback>委托，表示`WaitProc`回调方法、 一秒的超时间隔和多个回调.  
  
 当主线程发出信号<xref:System.Threading.AutoResetEvent>通过调用其<xref:System.Threading.EventWaitHandle.Set%2A>方法，<xref:System.Threading.WaitOrTimerCallback>调用委托。 `WaitProc`方法测试<xref:System.Threading.RegisteredWaitHandle>以确定是否发生了超时。 如果由于等待句柄已收到信号，而调用的回调`WaitProc`方法将注销<xref:System.Threading.RegisteredWaitHandle>，停止进一步的回调。 在超时的情况下该任务会继续等待。 `WaitProc`方法结束通过将消息输出到控制台。  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">线程与线程处理</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">托管线程池</related>
  </Docs>
</Type>