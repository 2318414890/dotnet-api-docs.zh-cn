<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Thread.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac570043b3fb7b7bab63012cb47f77848879069524a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70043b3fb7b7bab63012cb47f77848879069524a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>Creates and controls a thread, sets its priority, and gets its status.</source>
          <target state="translated">创建和控制线程，设置其优先级并获取其状态。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>When a process starts, the common language runtime automatically creates a single foreground thread to execute application code.</source>
          <target state="translated">进程启动时，公共语言运行时将自动创建一个前台线程执行应用程序代码。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process.</source>
          <target state="translated">此主前台线程，以及一个进程可以创建一个或多个线程来执行与进程关联的程序代码的一部分。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>These threads can execute either in the foreground or in the background.</source>
          <target state="translated">在前台或在后台，可以执行这些线程。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>In addition, you can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> class to execute code on worker threads that are managed by the common language runtime.</source>
          <target state="translated">此外，你可以使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>类在由公共语言运行时管理的工作线程上执行代码。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>In this section</source>
          <target state="translated">本节内容</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source><bpt id="p1">[</bpt>Starting a thread<ept id="p1">](#Starting)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>启动线程<ept id="p1">](#Starting)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source><bpt id="p1">[</bpt>Retrieving Thread objects<ept id="p1">](#Retrieving)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>检索线程对象<ept id="p1">](#Retrieving)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source><bpt id="p1">[</bpt>Foreground and background threads<ept id="p1">](#Foreground)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>前台和后台线程<ept id="p1">](#Foreground)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source><bpt id="p1">[</bpt>Culture and threads<ept id="p1">](#Culture)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>区域性和线程<ept id="p1">](#Culture)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source><bpt id="p1">[</bpt>Getting information about and controlling threads<ept id="p1">](#Properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>获取相关信息和控制线程<ept id="p1">](#Properties)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Starting a thread</source>
          <target state="translated">启动线程</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor.</source>
          <target state="translated">通过提供一个委托，表示该线程是在其类构造函数中执行的方法启动线程。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>You then call the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> method to begin execution.</source>
          <target state="translated">然后，你调用<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>方法，以开始执行。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph>构造函数可以采用两个委托类型，具体取决于是否可以将自变量传递给要执行的方法之一：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>If the method has no arguments, you pass a <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> delegate to  the constructor.</source>
          <target state="translated">如果该方法不具有任何参数，则传递<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>委托给构造函数。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>It has the signature:</source>
          <target state="translated">它具有签名：</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The following example creates and starts a thread that executes the <ph id="ph1">`ExecuteInForeground`</ph> method.</source>
          <target state="translated">下面的示例创建并开始执行的线程<ph id="ph1">`ExecuteInForeground`</ph>方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds.</source>
          <target state="translated">方法显示某些线程属性，有关的信息，然后执行它暂停半秒钟和显示已用的秒数的循环。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.</source>
          <target state="translated">当线程执行至少五秒内时，则循环结束，并且该线程将终止执行。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>If the method has an argument, you pass a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate to the constructor.</source>
          <target state="translated">如果该方法具有一个自变量，则传递<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托给构造函数。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>It has the signature:</source>
          <target state="translated">它具有签名：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.</source>
          <target state="translated">然后，执行委托的方法可以强制转换 （在 C# 中) 或者 （在 Visual Basic 中) 将参数转换为适当的类型。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The following example is identical to the previous one, except that it calls the <ph id="ph1">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29&gt;</ph> constructor.</source>
          <target state="translated">下面的示例是上一，相同，但它会调用<ph id="ph1">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>This version of the <ph id="ph1">`ExecuteInForeground`</ph> method has a single parameter that represents the approximate number of milliseconds the loop is to execute.</source>
          <target state="translated">此版本的<ph id="ph1">`ExecuteInForeground`</ph>方法只有一个参数表示的毫秒所要执行的循环的大致数目。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>It is not necessary to retain a reference to a <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> object once you have started the thread.</source>
          <target state="translated">不需要保留对引用<ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph>对象后启动线程。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The thread continues to execute until the thread procedure is complete.</source>
          <target state="translated">线程继续执行，直到线程过程完成。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Retrieving Thread objects</source>
          <target state="translated">检索线程对象</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>You can use the static (<ph id="ph1">`Shared`</ph> in Visual Basic)  <ph id="ph2">&lt;xref:System.Threading.Thread.CurrentThread%2A&gt;</ph> property to retrieve a reference to the currently executing thread from the code that the thread is executing.</source>
          <target state="translated">您可以使用静态 (<ph id="ph1">`Shared`</ph>在 Visual Basic 中)<ph id="ph2">&lt;xref:System.Threading.Thread.CurrentThread%2A&gt;</ph>属性来检索对当前执行线程的线程正在执行的代码中的引用。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentThread%2A&gt;</ph> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentThread%2A&gt;</ph>属性来显示有关主应用程序线程、 另一个前台线程、 后台线程和一个线程池线程的信息。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Foreground and background threads</source>
          <target state="translated">前台和后台线程</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Instances of the <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> class represent either foreground threads or background threads.</source>
          <target state="translated">实例<ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph>类表示前台线程或后台线程。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated.</source>
          <target state="translated">后台线程相等前台线程有一个例外： 后台线程不会保留正运行的进程，如果所有前台线程已都终止。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.</source>
          <target state="translated">所有前台线程已都停止后，运行时将停止所有后台线程，并关闭。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>By default, the following threads execute in the foreground:</source>
          <target state="translated">默认情况下，以下线程在前台执行：</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The main application thread.</source>
          <target state="translated">主应用程序中的线程。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>All threads created by calling a <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> class constructor.</source>
          <target state="translated">通过调用创建的所有线程<ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The following threads execute in the background by default:</source>
          <target state="translated">默认情况下，在后台执行的以下线程：</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Thread pool threads, which are a pool of worker threads maintained by the runtime.</source>
          <target state="translated">线程池线程，是一个由运行时维护辅助线程池。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>You can configure the thread pool and schedule work on thread pool threads by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> class.</source>
          <target state="translated">可以通过使用线程池线程上配置的线程池和计划工作<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Task-based asynchronous operations automatically execute on thread pool threads.</source>
          <target state="translated">在线程池线程上自动执行基于任务的异步操作。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Task-based asynchronous operations use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> classes to implement the <bpt id="p1">[</bpt>task-based asynchronous pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept>.</source>
          <target state="translated">基于任务的异步操作使用<ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>类以实现<bpt id="p1">[</bpt>基于任务的异步模式<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>All threads that enter the managed execution environment from unmanaged code.</source>
          <target state="translated">从非托管代码进入托管的执行环境的所有线程。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>You can change a thread to execute in the background by setting the <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> property at any time.</source>
          <target state="translated">你可以更改线程在后台执行通过设置<ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph>在任何时候的属性。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.</source>
          <target state="translated">后台线程可用于任何操作都应继续，只要应用程序正在运行，但不是应阻止应用程序终止，如监视文件系统更改或传入套接字连接。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The following example illustrates the difference between foreground and background threads.</source>
          <target state="translated">下面的示例演示前景色和背景线程之间的差异。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>It is like the first example in the <bpt id="p1">[</bpt>Starting a thread<ept id="p1">](#Starting)</ept> section, except that it sets the thread to execute in the background before starting it.</source>
          <target state="translated">此操作就如同中的第一个示例<bpt id="p1">[</bpt>启动线程<ept id="p1">](#Starting)</ept>部分，只不过它将设置要在其开始之前在后台中执行的线程。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>As the output shows, the loop is interrupted before it executes for five seconds.</source>
          <target state="translated">如输出所示，在它的五秒内执行之前中断循环。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Culture and threads</source>
          <target state="translated">区域性和线程</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Each thread has a culture, represented by the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentCulture%2A&gt;</ph> property, and a UI culture, represented by the <ph id="ph2">&lt;xref:System.Threading.Thread.CurrentUICulture%2A&gt;</ph> property.</source>
          <target state="translated">每个线程具有区域性，由表示<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentCulture%2A&gt;</ph>属性和 UI 区域性，由表示<ph id="ph2">&lt;xref:System.Threading.Thread.CurrentUICulture%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread.</source>
          <target state="translated">当前区域性支持分析和格式设置，字符串比较和排序，诸如区分区域性的操作，还控制书写系统和线程使用的日历。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The current UI culture provides for culture-sensitive retrieval of resources in resource files.</source>
          <target state="translated">当前 UI 区域性提供的资源文件中的资源的区分区域性的检索。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created.</source>
          <target state="translated">实例化一个新线程时，其区域性和 UI 区域性定义由的当前系统区域性和 UI 区域性，而不是区域性和 UI 区域性从中创建新线程的线程。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <ph id="ph1">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29&gt;</ph> constructor from the primary thread is English (United States), and not French (France).</source>
          <target state="translated">这意味着，例如，如果当前系统区域性为英语 （美国），主应用程序线程的当前区域性为法语 （法国），通过调用创建一个新线程的区域性<ph id="ph1">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29&gt;</ph>从主线程的构造函数是英语 （美国） 和不是法语 （法国）。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>For more information, see the "Culture and threads" section of the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class topic.</source>
          <target state="translated">有关详细信息，请参阅的"区域性和线程"部分<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>This is not true of threads that execute asynchronous operations for apps that target the <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph> and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched.</source>
          <target state="translated">这是不正确的执行该目标的应用的异步操作的线程<ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>并且更高版本，在这种情况下，区域性和 UI 区域性中的属于的异步操作的上下文; 的线程上异步操作通过执行默认继承的区域性和 UI 区域性从中启动异步操作的线程。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>For more information, see the "Culture and task-based asynchronous operations" section of the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class topic.</source>
          <target state="translated">有关详细信息，请参阅 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 类主题中的“区域性和基于任务的异步操作”一节。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:</source>
          <target state="translated">你可以执行以下操作以确保的所有线程执行应用程序中共享相同的区域性和 UI 区域性：</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>You can pass a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents that culture to the <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate or the <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">你可以将传递<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>对象，表示该区域性<ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托或<ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>For apps running on the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">在上运行的应用程序<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>和更高版本，你可以定义的区域性和 UI 区域性要分配给通过设置的值创建应用程序域中的所有线程<ph id="ph2">&lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Note that this is a per-application domain setting.</source>
          <target state="translated">请注意这是每个应用程序域的设置。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>For more information and examples, see the "Culture and threads" section of the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class topic.</source>
          <target state="translated">有关详细信息和示例，请参阅的"区域性和线程"部分<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Getting information about and controlling threads</source>
          <target state="translated">获取相关信息和控制线程</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>You can retrieve a number of property values that provide information about a thread.</source>
          <target state="translated">你可以检索提供有关线程的信息的属性值的数目。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>In some cases, you can also set these property values to control the operation of the thread.</source>
          <target state="translated">在某些情况下，你还可以设置这些属性值可控制的操作的线程。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>These thread properties include:</source>
          <target state="translated">这些线程属性包括：</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>A name.</source>
          <target state="translated">名称。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Name%2A&gt;</ph> is a write-once property that you can use to identify a thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Name%2A&gt;</ph> 是可写的一次可用于标识线程的属性。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Its default value is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">其默认值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>A hash code, which you can retrieve by calling the <ph id="ph1">&lt;xref:System.Threading.Thread.GetHashCode%2A&gt;</ph> method.</source>
          <target state="translated">一个哈希代码，它可以通过调用检索<ph id="ph1">&lt;xref:System.Threading.Thread.GetHashCode%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.</source>
          <target state="translated">哈希代码可以用于唯一标识线程;在线程的生存期内，其哈希代码不会与来自其他线程，而不考虑从中获取值的应用程序域的值。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>A thread ID.</source>
          <target state="translated">线程 id。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The value of the read-only <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt;</ph> property is assigned by the runtime and uniquely identifies a thread within its process.</source>
          <target state="translated">只读的值<ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt;</ph>属性由运行时分配，并唯一地标识其进程中的线程。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>An operating-system <bpt id="p1">[</bpt>ThreadId<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx)</ept> has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads.</source>
          <target state="translated">因为非托管主机可以控制托管线程和非托管线程之间的关系，所以操作系统 <bpt id="p1">[</bpt>ThreadId<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx)</ept> 与托管线程之间没有固定的关系。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Specifically, a sophisticated host can use the <bpt id="p1">[</bpt>CLR Hosting API<ept id="p1">](https://msdn.microsoft.com/library/ms404385.aspx)</ept> to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.</source>
          <target state="translated">具体而言，一个复杂的主机可以使用<bpt id="p1">[</bpt>CLR 托管 API<ept id="p1">](https://msdn.microsoft.com/library/ms404385.aspx)</ept>调度多个托管的线程针对同一操作系统线程，或不同的操作系统线程之间移动托管的线程。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The thread's current state.</source>
          <target state="translated">线程的当前状态。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>For the duration of its existence, a thread is always in one or more of the states defined by the <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> property.</source>
          <target state="translated">其是否存在的持续时间内，线程是始终在一个或多个定义的状态<ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>A scheduling priority level, which is defined by the <ph id="ph1">&lt;xref:System.Threading.ThreadPriority&gt;</ph> property.</source>
          <target state="translated">计划的优先级别，通过定义<ph id="ph1">&lt;xref:System.Threading.ThreadPriority&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.</source>
          <target state="translated">虽然你可以设置此值，以请求线程的优先级，但它不被保证遵循所操作系统。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The read-only <ph id="ph1">&lt;xref:System.Threading.Thread.IsThreadPoolThread%2A&gt;</ph> property, which indicates whether a thread is  a thread pool thread.</source>
          <target state="translated">只读<ph id="ph1">&lt;xref:System.Threading.Thread.IsThreadPoolThread%2A&gt;</ph>属性，它指示线程是否是一个线程池线程。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>For more information, see the <bpt id="p1">[</bpt>Foreground and background threads<ept id="p1">](#Foreground)</ept> section.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>前台和后台线程<ept id="p1">](#Foreground)</ept>部分。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>The following example demonstrates simple threading functionality.</source>
          <target state="translated">下面的示例演示了简单的线程处理功能。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>This code produces output similar to the following:</source>
          <target state="translated">此代码生成类似于下面的输出：</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Thread">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source>A delegate that represents the methods to be invoked when this thread begins executing.</source>
          <target state="translated">一个委托，它表示此线程开始执行时要调用的方法。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> 类的新实例，指定允许对象在线程启动时传递给线程的委托。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source>A thread does not begin executing when it is created.</source>
          <target state="translated">线程不会开始执行时创建它。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source>To schedule the thread for execution, call the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> method.</source>
          <target state="translated">若要安排执行的线程，请调用<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source>To pass a data object to the thread, use the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;</ph> method overload.</source>
          <target state="translated">若要将数据对象传递给该线程，使用<ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;</ph>方法重载。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> constructor when creating a thread.</source>
          <target state="translated">Visual Basic 用户可以省略<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>构造函数创建线程时。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source>Use the <ph id="ph1">`AddressOf`</ph> operator when passing your method, for example <ph id="ph2">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.</source>
          <target state="translated">使用<ph id="ph1">`AddressOf`</ph>运算符传递你的方法，例如时<ph id="ph2">`Dim t As New Thread(AddressOf ThreadProc)`</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source>Visual Basic automatically calls the <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> constructor.</source>
          <target state="translated">Visual Basic 将自动调用<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source>The following example shows the syntax for creating and using a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate with a static method and an instance method.</source>
          <target state="translated">下面的示例演示了创建和使用的语法<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托，它具有一个静态方法和实例方法。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
          <source><ph id="ph1">&lt;paramref name="start" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="start" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.ThreadStart" /&gt;</ph> delegate that represents the methods to be invoked when this thread begins executing.</source>
          <target state="translated">表示开始执行此线程时要调用的方法的 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadStart" /&gt;</ph> 委托。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>A thread does not begin executing when it is created.</source>
          <target state="translated">线程不会开始执行时创建它。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>To schedule the thread for execution, call the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> method.</source>
          <target state="translated">若要安排执行的线程，请调用<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> constructor when creating a thread.</source>
          <target state="translated">Visual Basic 用户可以省略<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>构造函数创建线程时。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>Use the <ph id="ph1">`AddressOf`</ph> operator when passing your method for example <ph id="ph2">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.</source>
          <target state="translated">使用<ph id="ph1">`AddressOf`</ph>运算符，例如传递你的方法时<ph id="ph2">`Dim t As New Thread(AddressOf ThreadProc)`</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>Visual Basic automatically calls the <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> constructor.</source>
          <target state="translated">Visual Basic 将自动调用<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>The following code example shows how to create a thread that executes a static method.</source>
          <target state="translated">下面的代码示例演示如何创建线程执行的静态方法。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>The following code example shows how to create a thread that executes an instance method.</source>
          <target state="translated">下面的代码示例演示如何创建执行的实例方法的线程。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
          <source>The <ph id="ph1">&lt;paramref name="start" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="start" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.ParameterizedThreadStart" /&gt;</ph> delegate that represents the methods to be invoked when this thread begins executing.</source>
          <target state="translated">表示开始执行此线程时要调用的方法的 <ph id="ph1">&lt;see cref="T:System.Threading.ParameterizedThreadStart" /&gt;</ph> 委托。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</source>
          <target state="translated">线程要使用的最大堆栈大小（以字节为单位）；如果为 0，则使用可执行文件的文件头中指定的默认最大堆栈大小。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>Important   For partially trusted code, <bpt id="p1">&lt;c&gt;</bpt>maxStackSize<ept id="p1">&lt;/c&gt;</ept> is ignored if it is greater than the default stack size.</source>
          <target state="translated">重要事项   对于部分受信任的代码，如果 <bpt id="p1">&lt;c&gt;</bpt>maxStackSize<ept id="p1">&lt;/c&gt;</ept> 大于默认堆栈大小，则将其忽略。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>No exception is thrown.</source>
          <target state="translated">不引发异常。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> 类的新实例，指定允许对象在线程启动时传递给线程的委托，并指定线程的最大堆栈大小。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>Avoid using this constructor overload.</source>
          <target state="translated">避免使用此构造函数重载。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>The default stack size used by the <ph id="ph1">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29&gt;</ph> constructor overload is the recommended stack size for threads.</source>
          <target state="translated">使用的默认堆栈大小<ph id="ph1">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29&gt;</ph>构造函数重载是线程的建议的堆栈大小。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</source>
          <target state="translated">如果一个线程出现内存问题，最可能的原因编程错误，例如无限递归。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, only fully trusted code can set <ph id="ph2">`maxStackSize`</ph> to a value that is greater than the default stack size (1 megabyte).</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>、 完全受信任的代码可以设置只<ph id="ph2">`maxStackSize`</ph>为大于默认堆栈大小 （1 兆字节） 的值。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>If a larger value is specified for <ph id="ph1">`maxStackSize`</ph> when code is running with partial trust, <ph id="ph2">`maxStackSize`</ph> is ignored and the default stack size is used.</source>
          <target state="translated">如果为指定更大的值<ph id="ph1">`maxStackSize`</ph>时使用部分信任，运行代码<ph id="ph2">`maxStackSize`</ph>将被忽略，并且默认堆栈大小适用。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>No exception is thrown.</source>
          <target state="translated">不引发异常。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>Code at any trust level can set <ph id="ph1">`maxStackSize`</ph> to a value that is less than the default stack size.</source>
          <target state="translated">在任何信任级别的代码可以设置<ph id="ph1">`maxStackSize`</ph>为小于默认堆栈大小的值。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</source>
          <target state="translated">如果你正在开发的完全受信任的库，将由部分受信任的代码，并且你需要启动线程需要大量堆栈，则必须在创建线程之前, 声明完全信任或将使用默认堆栈大小。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>Do not do this unless you fully control the code that runs on the thread.</source>
          <target state="translated">除非你完全控制的线程运行的代码，则请执行此操作。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>If <ph id="ph1">`maxStackSize`</ph> is less than the minimum stack size, the minimum stack size is used.</source>
          <target state="translated">如果<ph id="ph1">`maxStackSize`</ph>小于比最小的堆栈大小，使用的最小的堆栈大小。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>If <ph id="ph1">`maxStackSize`</ph> is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</source>
          <target state="translated">如果<ph id="ph1">`maxStackSize`</ph>不是倍数的页大小，将其舍入到的页大小的下一个更大倍数。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</source>
          <target state="translated">例如，如果在 Windows Vista 上使用.NET Framework 2.0 版，256 KB （262144 字节） 是最小的堆栈大小，和的页大小为 64 KB （65536 字节为单位）。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, <ph id="ph1">`maxStackSize`</ph> is ignored, and the stack size specified in the executable header is used.</source>
          <target state="translated">在版本的 Windows XP 和 Windows Server 2003 之前的 Microsoft Windows<ph id="ph1">`maxStackSize`</ph>将被忽略，并使用可执行文件的标头中指定的堆栈大小。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>If you specify a very small stack size, you might need to disable stack-overflow probing.</source>
          <target state="translated">如果指定非常小的堆栈大小，你可能需要禁用堆栈溢出探测。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>When the stack is severely constrained, the probing can itself cause a stack overflow.</source>
          <target state="translated">当堆栈受到严重约束时，探测可以本身导致堆栈溢出。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source>To disable stack overflow probing, add the following to your application configuration file.</source>
          <target state="translated">若要禁用堆栈溢出探测，到应用程序配置文件添加以下内容。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="start" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="start" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="maxStackSize" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="maxStackSize" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.ThreadStart" /&gt;</ph> delegate that represents the methods to be invoked when this thread begins executing.</source>
          <target state="translated">表示开始执行此线程时要调用的方法的 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadStart" /&gt;</ph> 委托。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</source>
          <target state="translated">线程要使用的最大堆栈大小（以字节为单位）；如果为 0，则使用可执行文件的文件头中指定的默认最大堆栈大小。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>Important   For partially trusted code, <bpt id="p1">&lt;c&gt;</bpt>maxStackSize<ept id="p1">&lt;/c&gt;</ept> is ignored if it is greater than the default stack size.</source>
          <target state="translated">重要事项   对于部分受信任的代码，如果 <bpt id="p1">&lt;c&gt;</bpt>maxStackSize<ept id="p1">&lt;/c&gt;</ept> 大于默认堆栈大小，则将其忽略。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>No exception is thrown.</source>
          <target state="translated">不引发异常。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> class, specifying the maximum stack size for the thread.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> 类的新实例，指定线程的最大堆栈大小。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>Avoid using this constructor overload.</source>
          <target state="translated">避免使用此构造函数重载。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>The default stack size used by the <ph id="ph1">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29&gt;</ph> constructor overload is the recommended stack size for threads.</source>
          <target state="translated">使用的默认堆栈大小<ph id="ph1">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29&gt;</ph>构造函数重载是线程的建议的堆栈大小。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</source>
          <target state="translated">如果一个线程出现内存问题，最可能的原因编程错误，例如无限递归。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, only fully trusted code can set <ph id="ph2">`maxStackSize`</ph> to a value that is greater than the default stack size (1 megabyte).</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>、 完全受信任的代码可以设置只<ph id="ph2">`maxStackSize`</ph>为大于默认堆栈大小 （1 兆字节） 的值。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>If a larger value is specified for <ph id="ph1">`maxStackSize`</ph> when code is running with partial trust, <ph id="ph2">`maxStackSize`</ph> is ignored and the default stack size is used.</source>
          <target state="translated">如果为指定更大的值<ph id="ph1">`maxStackSize`</ph>时使用部分信任，运行代码<ph id="ph2">`maxStackSize`</ph>将被忽略，并且默认堆栈大小适用。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>No exception is thrown.</source>
          <target state="translated">不引发异常。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>Code at any trust level can set <ph id="ph1">`maxStackSize`</ph> to a value that is less than the default stack size.</source>
          <target state="translated">在任何信任级别的代码可以设置<ph id="ph1">`maxStackSize`</ph>为小于默认堆栈大小的值。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</source>
          <target state="translated">如果你正在开发的完全受信任的库，将由部分受信任的代码，并且你需要启动线程需要大量堆栈，则必须在创建线程之前, 声明完全信任或将使用默认堆栈大小。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>Do not do this unless you fully control the code that runs on the thread.</source>
          <target state="translated">除非你完全控制的线程运行的代码，则请执行此操作。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>If <ph id="ph1">`maxStackSize`</ph> is less than the minimum stack size, the minimum stack size is used.</source>
          <target state="translated">如果<ph id="ph1">`maxStackSize`</ph>小于比最小的堆栈大小，使用的最小的堆栈大小。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>If <ph id="ph1">`maxStackSize`</ph> is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</source>
          <target state="translated">如果<ph id="ph1">`maxStackSize`</ph>不是倍数的页大小，将其舍入到的页大小的下一个更大倍数。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</source>
          <target state="translated">例如，如果在 Windows Vista 上使用.NET Framework 2.0 版，256 KB （262144 字节） 是最小的堆栈大小，和的页大小为 64 KB （65536 字节为单位）。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, <ph id="ph1">`maxStackSize`</ph> is ignored, and the stack size specified in the executable header is used.</source>
          <target state="translated">在版本的 Windows XP 和 Windows Server 2003 之前的 Microsoft Windows<ph id="ph1">`maxStackSize`</ph>将被忽略，并使用可执行文件的标头中指定的堆栈大小。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>If you specify a very small stack size, you might need to disable stack-overflow probing.</source>
          <target state="translated">如果指定非常小的堆栈大小，你可能需要禁用堆栈溢出探测。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>When the stack is severely constrained, the probing can itself cause a stack overflow.</source>
          <target state="translated">当堆栈受到严重约束时，探测可以本身导致堆栈溢出。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source>To disable stack overflow probing, add the following to your application configuration file.</source>
          <target state="translated">若要禁用堆栈溢出探测，到应用程序配置文件添加以下内容。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="start" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="start" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="maxStackSize" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="maxStackSize" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>Raises a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph> in the thread on which it is invoked, to begin the process of terminating the thread.</source>
          <target state="translated">在调用此方法的线程上引发 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph>，以开始终止此线程的过程。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>Calling this method usually terminates the thread.</source>
          <target state="translated">调用此方法通常会终止线程。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort">
          <source>Raises a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph> in the thread on which it is invoked, to begin the process of terminating the thread.</source>
          <target state="translated">在调用此方法的线程上引发 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph>，以开始终止此线程的过程。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort">
          <source>Calling this method usually terminates the thread.</source>
          <target state="translated">调用此方法通常会终止线程。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>When this method is invoked on a thread, the system throws a <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> in the thread to abort it.</source>
          <target state="translated">在线程上调用此方法时，系统将引发<ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>在中止的线程中。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source><ph id="ph1">`ThreadAbortException`</ph> is a special exception that can be caught by application code, but is re-thrown at the end of the <ph id="ph2">`catch`</ph> block unless <ph id="ph3">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">`ThreadAbortException`</ph> 是可由应用程序代码中，捕获特殊异常但被重新引发末尾<ph id="ph2">`catch`</ph>除非阻止<ph id="ph3">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source><ph id="ph1">`ResetAbort`</ph> cancels the request to abort, and prevents the <ph id="ph2">`ThreadAbortException`</ph> from terminating the thread.</source>
          <target state="translated"><ph id="ph1">`ResetAbort`</ph> 取消请求中止，并防止<ph id="ph2">`ThreadAbortException`</ph>从终止此线程。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>Unexecuted <ph id="ph1">`finally`</ph> blocks are executed before the thread is aborted.</source>
          <target state="translated">快进<ph id="ph1">`finally`</ph>块执行之前在线程终止。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>When a thread calls <ph id="ph1">`Abort`</ph> on itself, the effect is similar to throwing an exception; the <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> happens immediately, and the result is predictable.</source>
          <target state="translated">当线程调用<ph id="ph1">`Abort`</ph>自身，结果类似于引发异常;<ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>立即，并且结果为可预测。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>However, if one thread calls <ph id="ph1">`Abort`</ph> on another thread, the abort interrupts whatever code is running.</source>
          <target state="translated">但是，如果一个线程调用<ph id="ph1">`Abort`</ph>上另一线程，则将中断运行的任何代码。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>There is also a chance that a static constructor could be aborted.</source>
          <target state="translated">此外，还有可能无法中止静态构造函数。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>In rare cases, this might prevent instances of that class from being created in that application domain.</source>
          <target state="translated">在极少数情况下，这可能会阻止在该应用程序域中创建该类的实例。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a <ph id="ph1">`finally`</ph> block is running, in which case the <ph id="ph2">`finally`</ph> block is aborted.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，则的可能无法中止线程时<ph id="ph1">`finally`</ph>运行块，在这种情况下<ph id="ph2">`finally`</ph>中止块。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>The thread is not guaranteed to abort immediately, or at all.</source>
          <target state="translated">线程不能保证中止立即，要么根本。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>This situation can occur if a thread does an unbounded amount of computation in the <ph id="ph1">`finally`</ph> blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</source>
          <target state="translated">如果一个线程非常的大量的计算中可以出现这种情况<ph id="ph1">`finally`</ph>作为终止过程，从而无限期延迟中止中调用的块。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>To wait until a thread has aborted, you can call the <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> method on the thread after calling the <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method, but there is no guarantee the wait will end.</source>
          <target state="translated">若要等待，直到线程已中止，你可以调用<ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>方法在调用线程上的<ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>方法，但不能保证，等待将结束。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>The thread that calls <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> might block if the thread that is being aborted is in a protected region of code, such as a <ph id="ph2">`catch`</ph> block, <ph id="ph3">`finally`</ph> block, or constrained execution region.</source>
          <target state="translated">调用的线程<ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>如果正在中止的线程处于受保护的代码区域，如可能会阻止<ph id="ph2">`catch`</ph>块，<ph id="ph3">`finally`</ph>块或受约束的执行区域。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>If the thread that calls <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> holds a lock that the aborted thread requires, a deadlock can occur.</source>
          <target state="translated">如果调用线程<ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>持有中止的线程需要，会出现死锁的锁。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>If <ph id="ph1">`Abort`</ph> is called on a thread that has not been started, the thread will abort when <ph id="ph2">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> is called.</source>
          <target state="translated">如果<ph id="ph1">`Abort`</ph>称为上尚未启动的线程，该线程将中止时<ph id="ph2">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>If <ph id="ph1">`Abort`</ph> is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</source>
          <target state="translated">如果<ph id="ph1">`Abort`</ph>调用上被阻止或正在休眠的线程，该线程中断，然后中止。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>If <ph id="ph1">`Abort`</ph> is called on a thread that has been suspended, a <ph id="ph2">&lt;xref:System.Threading.ThreadStateException&gt;</ph> is thrown in the thread that called <ph id="ph3">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.ThreadState.AbortRequested&gt;</ph> is added to the <ph id="ph5">&lt;xref:System.Threading.Thread.ThreadState%2A&gt;</ph> property of the thread being aborted.</source>
          <target state="translated">如果<ph id="ph1">`Abort`</ph>已挂起的线程上调用<ph id="ph2">&lt;xref:System.Threading.ThreadStateException&gt;</ph>调用线程中引发<ph id="ph3">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Threading.ThreadState.AbortRequested&gt;</ph>添加到<ph id="ph5">&lt;xref:System.Threading.Thread.ThreadState%2A&gt;</ph>正在中止的线程的属性。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> is not thrown in the suspended thread until <ph id="ph2">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph> is called.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>不会在之前已挂起的线程中引发<ph id="ph2">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>If <ph id="ph1">`Abort`</ph> is called on a managed thread while it is executing unmanaged code, a <ph id="ph2">`ThreadAbortException`</ph> is not thrown until the thread returns to managed code.</source>
          <target state="translated">如果<ph id="ph1">`Abort`</ph>执行非托管的代码时在托管线程上调用<ph id="ph2">`ThreadAbortException`</ph>直到返回到托管代码的线程不会引发。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>If two calls to <ph id="ph1">`Abort`</ph> come at the same time, it is possible for one call to set the state information and the other call to execute the <ph id="ph2">`Abort`</ph>.</source>
          <target state="translated">如果两次调用<ph id="ph1">`Abort`</ph>出现在同一时间，它是用于设置的状态信息的一个调用和执行的其他调用<ph id="ph2">`Abort`</ph>。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>However, an application cannot detect this situation.</source>
          <target state="translated">但是，应用程序无法检测到这种情况。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>After <ph id="ph1">`Abort`</ph> is invoked on a thread, the state of the thread includes <ph id="ph2">&lt;xref:System.Threading.ThreadState.AbortRequested&gt;</ph>.</source>
          <target state="translated">后<ph id="ph1">`Abort`</ph>调用线程的状态在一个线程上包括<ph id="ph2">&lt;xref:System.Threading.ThreadState.AbortRequested&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>After the thread has terminated as a result of a successful call to <ph id="ph1">`Abort`</ph>, the state of the thread is changed to <ph id="ph2">&lt;xref:System.Threading.ThreadState.Stopped&gt;</ph>.</source>
          <target state="translated">线程已终止由于成功调用后<ph id="ph1">`Abort`</ph>，线程的状态更改为<ph id="ph2">&lt;xref:System.Threading.ThreadState.Stopped&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>With sufficient permissions, a thread that is the target of an <ph id="ph1">`Abort`</ph> can cancel the abort using the <ph id="ph2">`ResetAbort`</ph> method.</source>
          <target state="translated">使用具有足够权限，线程，是目标的<ph id="ph1">`Abort`</ph>可以取消中止使用<ph id="ph2">`ResetAbort`</ph>方法。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>For an example that demonstrates calling the <ph id="ph1">`ResetAbort`</ph> method, see the <ph id="ph2">`ThreadAbortException`</ph> class.</source>
          <target state="translated">有关示例，演示如何调用<ph id="ph1">`ResetAbort`</ph>方法，请参阅<ph id="ph2">`ThreadAbortException`</ph>类。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort">
          <source>.NET Core only: This member is not supported.</source>
          <target state="translated">仅限 .NET Core：不支持此成员。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort">
          <source>The thread that is being aborted is currently suspended.</source>
          <target state="translated">正在中止的线程当前已挂起。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>for advanced operations on threads.</source>
          <target state="translated">有关线程的高级操作。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>An object that contains application-specific information, such as state, which can be used by the thread being aborted.</source>
          <target state="translated">一个对象，它包含应用程序特定的信息（如状态），该信息可供正被中止的线程使用。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>Raises a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination.</source>
          <target state="translated">引发在其上调用的线程中的 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph> 以开始处理终止线程，同时提供有关线程终止的异常信息。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>Calling this method usually terminates the thread.</source>
          <target state="translated">调用此方法通常会终止线程。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>When this method is invoked on a thread, the system throws a <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> in the thread to abort it.</source>
          <target state="translated">在线程上调用此方法时，系统将引发<ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>在中止的线程中。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source><ph id="ph1">`ThreadAbortException`</ph> is a special exception that can be caught by application code, but is re-thrown at the end of the <ph id="ph2">`catch`</ph> block unless <ph id="ph3">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">`ThreadAbortException`</ph> 是可由应用程序代码中，捕获特殊异常但被重新引发末尾<ph id="ph2">`catch`</ph>除非阻止<ph id="ph3">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source><ph id="ph1">`ResetAbort`</ph> cancels the request to abort, and prevents the <ph id="ph2">`ThreadAbortException`</ph> from terminating the thread.</source>
          <target state="translated"><ph id="ph1">`ResetAbort`</ph> 取消请求中止，并防止<ph id="ph2">`ThreadAbortException`</ph>从终止此线程。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>Unexecuted <ph id="ph1">`finally`</ph> blocks are executed before the thread is aborted.</source>
          <target state="translated">快进<ph id="ph1">`finally`</ph>块执行之前在线程终止。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>When a thread calls <ph id="ph1">`Abort`</ph> on itself, the effect is similar to throwing an exception; the <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> happens immediately, and the result is predictable.</source>
          <target state="translated">当线程调用<ph id="ph1">`Abort`</ph>自身，结果类似于引发异常;<ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>立即，并且结果为可预测。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>However, if one thread calls <ph id="ph1">`Abort`</ph> on another thread, the abort interrupts whatever code is running.</source>
          <target state="translated">但是，如果一个线程调用<ph id="ph1">`Abort`</ph>上另一线程，则将中断运行的任何代码。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>There is a chance that a static constructor could be aborted.</source>
          <target state="translated">没有静态构造函数可能被中止的机会。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>In rare cases, this might prevent instances of that class from being created in that application domain.</source>
          <target state="translated">在极少数情况下，这可能会阻止在该应用程序域中创建该类的实例。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a <ph id="ph1">`finally`</ph> block is running, in which case the <ph id="ph2">`finally`</ph> block is aborted.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，则的可能无法中止线程时<ph id="ph1">`finally`</ph>运行块，在这种情况下<ph id="ph2">`finally`</ph>中止块。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>The thread is not guaranteed to abort immediately, or at all.</source>
          <target state="translated">线程不能保证中止立即，要么根本。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>This situation can occur if a thread does an unbounded amount of computation in the <ph id="ph1">`finally`</ph> blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</source>
          <target state="translated">如果一个线程非常的大量的计算中可以出现这种情况<ph id="ph1">`finally`</ph>作为终止过程，从而无限期延迟中止中调用的块。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>To wait until a thread has aborted, you can call the <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> method on the thread after calling the <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method, but there is no guarantee that the wait will end.</source>
          <target state="translated">若要等待，直到线程已中止，你可以调用<ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>方法在调用线程上的<ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>方法，但不能保证在等待将结束。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>The thread that calls <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> might block if the thread that is being aborted is in a protected region of code, such as a <ph id="ph2">`catch`</ph> block, <ph id="ph3">`finally`</ph> block, or constrained execution region.</source>
          <target state="translated">调用的线程<ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>如果正在中止的线程处于受保护的代码区域，如可能会阻止<ph id="ph2">`catch`</ph>块，<ph id="ph3">`finally`</ph>块或受约束的执行区域。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>If the thread that calls <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> holds a lock that the aborted thread requires, a deadlock can occur.</source>
          <target state="translated">如果调用线程<ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>持有中止的线程需要，会出现死锁的锁。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>If <ph id="ph1">`Abort`</ph> is called on a thread that has not been started, the thread will abort when <ph id="ph2">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> is called.</source>
          <target state="translated">如果<ph id="ph1">`Abort`</ph>称为上尚未启动的线程，该线程将中止时<ph id="ph2">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>If <ph id="ph1">`Abort`</ph> is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</source>
          <target state="translated">如果<ph id="ph1">`Abort`</ph>调用上被阻止或正在休眠的线程，该线程中断，然后中止。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>If <ph id="ph1">`Abort`</ph> is called on a thread that has been suspended, a <ph id="ph2">&lt;xref:System.Threading.ThreadStateException&gt;</ph> is thrown in the thread that called <ph id="ph3">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.ThreadState.AbortRequested&gt;</ph> is added to the <ph id="ph5">&lt;xref:System.Threading.Thread.ThreadState%2A&gt;</ph> property of the thread being aborted.</source>
          <target state="translated">如果<ph id="ph1">`Abort`</ph>已挂起的线程上调用<ph id="ph2">&lt;xref:System.Threading.ThreadStateException&gt;</ph>调用线程中引发<ph id="ph3">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Threading.ThreadState.AbortRequested&gt;</ph>添加到<ph id="ph5">&lt;xref:System.Threading.Thread.ThreadState%2A&gt;</ph>正在中止的线程的属性。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> is not thrown in the suspended thread until <ph id="ph2">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph> is called.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>不会在之前已挂起的线程中引发<ph id="ph2">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>If <ph id="ph1">`Abort`</ph> is called on a managed thread while it is executing unmanaged code, a <ph id="ph2">`ThreadAbortException`</ph> is not thrown until the thread returns to managed code.</source>
          <target state="translated">如果<ph id="ph1">`Abort`</ph>执行非托管的代码时在托管线程上调用<ph id="ph2">`ThreadAbortException`</ph>直到返回到托管代码的线程不会引发。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>If two calls to <ph id="ph1">`Abort`</ph> come at the same time, it is possible for one call to set the state information and the other call to execute the <ph id="ph2">`Abort`</ph>.</source>
          <target state="translated">如果两次调用<ph id="ph1">`Abort`</ph>出现在同一时间，它是用于设置的状态信息的一个调用和执行的其他调用<ph id="ph2">`Abort`</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>However, an application cannot detect this situation.</source>
          <target state="translated">但是，应用程序无法检测到这种情况。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>After <ph id="ph1">`Abort`</ph> is invoked on a thread, the state of the thread includes <ph id="ph2">&lt;xref:System.Threading.ThreadState.AbortRequested&gt;</ph>.</source>
          <target state="translated">后<ph id="ph1">`Abort`</ph>调用线程的状态在一个线程上包括<ph id="ph2">&lt;xref:System.Threading.ThreadState.AbortRequested&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>After the thread has terminated as a result of a successful call to <ph id="ph1">`Abort`</ph>, the state of the thread is changed to <ph id="ph2">&lt;xref:System.Threading.ThreadState.Stopped&gt;</ph>.</source>
          <target state="translated">线程已终止由于成功调用后<ph id="ph1">`Abort`</ph>，线程的状态更改为<ph id="ph2">&lt;xref:System.Threading.ThreadState.Stopped&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>With sufficient permissions, a thread that is the target of an <ph id="ph1">`Abort`</ph> can cancel the abort using the <ph id="ph2">`ResetAbort`</ph> method.</source>
          <target state="translated">使用具有足够权限，线程，是目标的<ph id="ph1">`Abort`</ph>可以取消中止使用<ph id="ph2">`ResetAbort`</ph>方法。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>For an example that demonstrates calling the <ph id="ph1">`ResetAbort`</ph> method, see the <ph id="ph2">`ThreadAbortException`</ph> class.</source>
          <target state="translated">有关示例，演示如何调用<ph id="ph1">`ResetAbort`</ph>方法，请参阅<ph id="ph2">`ThreadAbortException`</ph>类。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>The following code example shows how to pass information to a thread that is being aborted.</source>
          <target state="translated">下面的代码示例演示如何将信息传递给正在中止的线程。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>.NET Core only: This member is not supported.</source>
          <target state="translated">仅限 .NET Core：不支持此成员。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>The thread that is being aborted is currently suspended.</source>
          <target state="translated">正在中止的线程当前已挂起。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>for advanced operations on threads.</source>
          <target state="translated">有关线程的高级操作。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Abort(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>Allocates an unnamed data slot on all the threads.</source>
          <target state="translated">在所有线程上分配未命名的数据槽。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>For better performance, use fields that are marked with the <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> attribute instead.</source>
          <target state="translated">为了获得更好的性能，请改用以 <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> 特性标记的字段。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>The allocated named data slot on all threads.</source>
          <target state="translated">所有线程上已分配的命名数据槽。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute) and data slots.</source>
          <target state="translated">.NET Framework 提供了有关使用线程本地存储区 (TLS) 的两种机制： 线程相关的静态字段 (即，使用标记的字段<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性) 和数据槽。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</source>
          <target state="translated">线程相关的静态字段提供更好的性能比数据槽，编译时类型检查。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>For more information about using TLS, see <bpt id="p1">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>.</source>
          <target state="translated">有关使用 TLS 的详细信息，请参阅<bpt id="p1">[</bpt>线程本地存储区： 线程相关的静态字段和数据槽<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>The slot is allocated on all threads.</source>
          <target state="translated">所有线程上分配槽。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>Threads use a local store memory mechanism to store thread-specific data.</source>
          <target state="translated">线程使用本地存储内存机制来存储线程特定的数据。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>The common language runtime allocates a multi-slot data store array to each process when it is created.</source>
          <target state="translated">创建时，公共语言运行时分配给每个进程的多插槽数据存储数组。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</source>
          <target state="translated">线程可以分配数据存储区中的数据槽、 存储和检索数据的槽中值和线程过期后释放槽以供重用。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>Data slots are unique per thread.</source>
          <target state="translated">数据槽是每个线程的唯一的。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>No other thread (not even a child thread) can get that data.</source>
          <target state="translated">没有其他线程 （甚至不是子线程） 可以获取该数据。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>The first example shows how to use a field that is marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to hold thread-specific information.</source>
          <target state="translated">第一个示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>特性来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>The second example shows how to use a data slot to do the same thing.</source>
          <target state="translated">第二个示例演示如何使用数据槽执行相同的操作。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source><bpt id="p1">**</bpt>First Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第一个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>The following example shows how to use a field that is marked with <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> to hold thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>This technique provides better performance than the technique that is shown in the second example.</source>
          <target state="translated">此方法提供更好的性能比第二个示例所示的技术。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source><bpt id="p1">**</bpt>Second Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第二个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateDataSlot">
          <source>The following code example demonstrates how to use a data slot to store thread-specific information.</source>
          <target state="translated">下面的代码示例演示如何使用的数据槽存储线程特定的信息。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The name of the data slot to be allocated.</source>
          <target state="translated">要分配的数据槽的名称。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>Allocates a named data slot on all threads.</source>
          <target state="translated">在所有线程上分配已命名的数据槽。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>For better performance, use fields that are marked with the <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> attribute instead.</source>
          <target state="translated">为了获得更好的性能，请改用以 <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> 特性标记的字段。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The allocated named data slot on all threads.</source>
          <target state="translated">所有线程上已分配的命名数据槽。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute) and data slots.</source>
          <target state="translated">.NET Framework 提供了有关使用线程本地存储区 (TLS) 的两种机制： 线程相关的静态字段 (即，使用标记的字段<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性) 和数据槽。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</source>
          <target state="translated">线程相关的静态字段提供更好的性能比数据槽，编译时类型检查。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>For more information about using TLS, see <bpt id="p1">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>.</source>
          <target state="translated">有关使用 TLS 的详细信息，请参阅<bpt id="p1">[</bpt>线程本地存储区： 线程相关的静态字段和数据槽<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>Threads use a local store memory mechanism to store thread-specific data.</source>
          <target state="translated">线程使用本地存储内存机制来存储线程特定的数据。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The common language runtime allocates a multi-slot data store array to each process when it is created.</source>
          <target state="translated">创建时，公共语言运行时分配给每个进程的多插槽数据存储数组。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</source>
          <target state="translated">线程可以分配数据存储区中的数据槽、 存储和检索数据的槽中值和线程过期后释放槽以供重用。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>Data slots are unique per thread.</source>
          <target state="translated">数据槽是每个线程的唯一的。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>No other thread (not even a child thread) can get that data.</source>
          <target state="translated">没有其他线程 （甚至不是子线程） 可以获取该数据。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>It is not necessary to use the <ph id="ph1">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A&gt;</ph> method to allocate a named data slot, because the <ph id="ph2">&lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt;</ph> method allocates the slot if it has not already been allocated.</source>
          <target state="translated">不需要使用<ph id="ph1">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A&gt;</ph>方法，以分配的命名的数据槽，因为<ph id="ph2">&lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt;</ph>方法分配槽，如果尚未分配。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>If the <ph id="ph1">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A&gt;</ph> method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A&gt;</ph>使用方法，因为它将引发异常，如果具有指定名称的槽已分配应该在程序启动时，主线程中调用它。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>There is no way to test whether a slot has already been allocated.</source>
          <target state="translated">没有方法来测试是否已分配一个槽。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>Slots allocated with this method must be freed with <ph id="ph1">&lt;xref:System.Threading.Thread.FreeNamedDataSlot%2A&gt;</ph>.</source>
          <target state="translated">使用此方法分配的槽必须释放与<ph id="ph1">&lt;xref:System.Threading.Thread.FreeNamedDataSlot%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The first example shows how to use a field that is marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to hold thread-specific information.</source>
          <target state="translated">第一个示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>特性来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The second example shows how to use a data slot to do the same thing.</source>
          <target state="translated">第二个示例演示如何使用数据槽执行相同的操作。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source><bpt id="p1">**</bpt>First Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第一个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The following example shows how to use a field that is marked with <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> to hold thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>This technique provides better performance than the technique that is shown in the second example.</source>
          <target state="translated">此方法提供更好的性能比第二个示例所示的技术。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source><bpt id="p1">**</bpt>Second Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第二个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The following example demonstrates how to use a named data slot to store thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用命名的数据槽以存储线程特定的信息。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>The example code does not use the <ph id="ph1">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A&gt;</ph> method, because the <ph id="ph2">&lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt;</ph> method allocates the slot if it has not already been allocated.</source>
          <target state="translated">此代码示例不使用<ph id="ph1">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A&gt;</ph>方法，因为<ph id="ph2">&lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt;</ph>方法分配槽，如果尚未分配。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>If the <ph id="ph1">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A&gt;</ph> method is used, it should be called in the main thread at program startup.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A&gt;</ph>方法时，应在程序启动主线程中调用它。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
          <source>A named data slot with the specified name already exists.</source>
          <target state="translated">已存在具有指定名称的命名的数据槽。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.ApartmentState">
          <source>Gets or sets the apartment state of this thread.</source>
          <target state="translated">获取或设置此线程的单元状态。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Threading.ApartmentState" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ApartmentState" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>The initial value is <ph id="ph1">&lt;see langword="Unknown" /&gt;</ph>.</source>
          <target state="translated">初始值为 <ph id="ph1">&lt;see langword="Unknown" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source><bpt id="p1">**</bpt>The <ph id="ph1">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph> property is obsolete.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph>属性已过时。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>The non-obsolete alternatives are the <ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph> method to retrieve the apartment state and the   <ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> method to set the apartment state.</source>
          <target state="translated">未过时的替代项为<ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>方法来检索其中的单元状态和<ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>方法以设置单元状态。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>In the .NET Framework versions 1.0 and 1.1, the <ph id="ph1">`ApartmentState`</ph> property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 中，<ph id="ph1">`ApartmentState`</ph>属性标记的线程以指示它将在单线程还是多线程单元中执行。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>This property can be set when the thread is in the <ph id="ph1">`Unstarted`</ph> or <ph id="ph2">`Running`</ph> thread state; however, it can be set only once for a thread.</source>
          <target state="translated">可以设置此属性，当线程处于<ph id="ph1">`Unstarted`</ph>或<ph id="ph2">`Running`</ph>线程状态; 但是，它可以只能设置一次一个线程。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>If the property has not been set, it returns <ph id="ph1">`Unknown`</ph>.</source>
          <target state="translated">如果尚未设置属性，它将返回<ph id="ph1">`Unknown`</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>An attempt to use the <ph id="ph1">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph> property to set the apartment state of a thread whose apartment state has already been set is ignored.</source>
          <target state="translated">尝试使用<ph id="ph1">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph>忽略属性设置已设置其单元状态的线程的单元状态。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>However, the <ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> method throws a <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> in this case.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>方法抛出异常<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>在这种情况下。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>In the .NET Framework version 2.0, new threads are initialized as <ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph> if their apartment state has not been set before they are started.</source>
          <target state="translated">在.NET Framework 2.0 版中，新的线程将初始化为<ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph>如果它们启动之前尚未设置其单元状态。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>The main application thread is initialized to <ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph> by default.</source>
          <target state="translated">主应用程序线程被初始化为<ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph>默认情况下。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>You can no longer set the main application thread to <ph id="ph1">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph> by setting the <ph id="ph2">&lt;xref:System.Threading.ApartmentState?displayProperty=nameWithType&gt;</ph> property on the first line of code.</source>
          <target state="translated">你无法再设置的主应用程序线程<ph id="ph1">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph>通过设置<ph id="ph2">&lt;xref:System.Threading.ApartmentState?displayProperty=nameWithType&gt;</ph>代码的第一行上的属性。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>Use the <ph id="ph1">&lt;xref:System.STAThreadAttribute&gt;</ph> instead.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.STAThreadAttribute&gt;</ph>相反。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the <bpt id="p1">[</bpt>/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)<ept id="p1">](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8)</ept> linker option.</source>
          <target state="translated">在.NET Framework 2.0 版中，你可以指定的 COM 线程模型为 c + + 应用程序使用<bpt id="p1">[</bpt>/CLRTHREADATTRIBUTE （设置 CLR 线程特性）<ept id="p1">](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8)</ept>链接器选项。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ApartmentState">
          <source>The following code example demonstrates how to set the apartment state of a thread.</source>
          <target state="translated">下面的代码示例演示如何设置线程的单元状态。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.ApartmentState">
          <source>An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<ph id="ph1">&lt;see langword="STA" /&gt;</ph>) or multithreaded apartment (<ph id="ph2">&lt;see langword="MTA" /&gt;</ph>)).</source>
          <target state="translated">尝试将此属性设置为不是有效单元状态的状态 （单线程单元 (<ph id="ph1">&lt;see langword="STA" /&gt;</ph>) 或多线程单元 (<ph id="ph2">&lt;see langword="MTA" /&gt;</ph>) 以外的状态）。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</source>
          <target state="translated">通知宿主执行将要进入一个代码区域，在该代码区域内线程中止或未经处理异常的影响可能会危害应用程序域中的其他任务。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</source>
          <target state="translated">公共语言运行时 (CLR)，如 Microsoft SQL Server 2005，主机可以建立不同的策略中的代码的关键和非关键区域的故障。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</source>
          <target state="translated">关键区域是一个线程中止或未经处理的异常的影响可能会不限于当前任务。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</source>
          <target state="translated">与此相反，中止或非关键区域的代码中的失败会影响仅在其中出错的任务。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>For example, consider a task that attempts to allocate memory while holding a lock.</source>
          <target state="translated">例如，考虑一个尝试持有的锁时分配内存的任务。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, because there can be other tasks in the domain waiting for the same lock.</source>
          <target state="translated">如果内存分配失败，正在中止当前任务不能确保稳定性<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>，因为在等待相同的锁的域可以是其他任务。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>If the current task is terminated, other tasks could be deadlocked.</source>
          <target state="translated">如果当前任务将被终止，则其他任务无法死锁。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>When a failure occurs in a critical region, the host might decide to unload the entire <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> rather than take the risk of continuing execution in a potentially unstable state.</source>
          <target state="translated">在关键区域中发生故障，主机可能会决定是否要卸载整个<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>而不是在可能不稳定状态中继续执行的风险。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>To inform the host that your code is entering a critical region, call <ph id="ph1">&lt;xref:System.Threading.Thread.BeginCriticalRegion%2A&gt;</ph>.</source>
          <target state="translated">若要通知宿主代码正在进入关键区域，调用<ph id="ph1">&lt;xref:System.Threading.Thread.BeginCriticalRegion%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.Thread.EndCriticalRegion%2A&gt;</ph> when execution returns to a non-critical region of code.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Threading.Thread.EndCriticalRegion%2A&gt;</ph>当执行返回到代码的非关键区域。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</source>
          <target state="translated">在 SQL Server 2005 下运行的代码中使用此方法需要要在最高的主机保护级别运行的代码。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginCriticalRegion">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Threading.Thread.BeginCriticalRegion%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.EndCriticalRegion%2A&gt;</ph> methods to divide a block of code into critical and non-critical regions.</source>
          <target state="translated">下面的示例演示了利用<ph id="ph1">&lt;xref:System.Threading.Thread.BeginCriticalRegion%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.EndCriticalRegion%2A&gt;</ph>方法将划分为关键和非关键区域的代码块。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</source>
          <target state="translated">通知主机托管代码将要执行依赖于当前物理操作系统线程的标识的指令。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</source>
          <target state="translated">公共语言运行时，如 Microsoft SQL Server 2005，某些主机提供其自己的线程管理。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</source>
          <target state="translated">提供其自己的线程管理的主机可以正在执行的任务在一个物理操作系统线程之间移动在任何时间。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>Most tasks are not affected by this switching.</source>
          <target state="translated">大多数任务不受这种切换。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</source>
          <target state="translated">但是，某些任务具有线程关联 — 也就是说，它们依赖于物理操作系统线程的标识。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>These tasks must inform the host when they execute code that should not be switched.</source>
          <target state="translated">这些任务必须通知宿主在其执行不会切换的代码。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <ph id="ph1">&lt;xref:System.Threading.Thread.BeginThreadAffinity%2A&gt;</ph> before acquiring the lock, and <ph id="ph2">&lt;xref:System.Threading.Thread.EndThreadAffinity%2A&gt;</ph> after releasing the lock.</source>
          <target state="translated">例如，如果应用程序调用一个系统 API 来获取操作系统锁定具有线程关联，例如 Win32 CRITICAL_SECTION 中，必须调用<ph id="ph1">&lt;xref:System.Threading.Thread.BeginThreadAffinity%2A&gt;</ph>之前获取锁，和<ph id="ph2">&lt;xref:System.Threading.Thread.EndThreadAffinity%2A&gt;</ph>后释放锁。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</source>
          <target state="translated">在 SQL Server 2005 下运行的代码中使用此方法需要要在最高的主机保护级别运行的代码。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Threading.Thread.BeginThreadAffinity%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.EndThreadAffinity%2A&gt;</ph> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</source>
          <target state="translated">下面的示例演示了利用<ph id="ph1">&lt;xref:System.Threading.Thread.BeginThreadAffinity%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.EndThreadAffinity%2A&gt;</ph>方法用于通知的代码块取决于物理操作系统线程的标识的主机。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.BeginThreadAffinity">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentContext">
          <source>Gets the current context in which the thread is executing.</source>
          <target state="translated">获取线程正在其中执行的当前上下文。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentContext">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Contexts.Context" /&gt;</ph> representing the current thread context.</source>
          <target state="translated">表示当前线程上下文的 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Contexts.Context" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentContext">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentContext">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentContext">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentCulture">
          <source>Gets or sets the culture for the current thread.</source>
          <target state="translated">获取或设置当前线程的区域性。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>An object that represents the culture for the current thread.</source>
          <target state="translated">表示当前线程的区域性的对象。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>以及其关联的对象，此属性所返回的对象确定的日期的默认格式、 时间、 数字、 货币值，排序顺序的文本、 大小写约定，和的字符串比较。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>See the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>类若要了解有关区域性名称和标识符，固定，非特定，和特定区域性之间的差异和区域性信息的方式会影响线程和应用程序域。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>See the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> property to learn how a thread's default culture is determined, and how users set culture information for their computers.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph>属性以了解如何确定线程的默认区域性，以及用户如何设置其计算机的区域性信息。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, you can set the <ph id="ph2">&lt;xref:System.Threading.Thread.CurrentCulture%2A&gt;</ph> property to a neutral culture.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>，你可以设置<ph id="ph2">&lt;xref:System.Threading.Thread.CurrentCulture%2A&gt;</ph>属性设置为非特定区域性。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>This is because the behavior of the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class has changed: When it represents a neutral culture, its property values (in particular, the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.Calendar%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.CultureInfo.CompareInfo%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Globalization.CultureInfo.NumberFormat%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Globalization.CultureInfo.TextInfo%2A&gt;</ph> properties) now reflect the specific culture that is associated with the neutral culture.</source>
          <target state="translated">这是因为的行为<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>类已更改： 时，它表示非特定区域性，其属性值 (具体而言， <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.Calendar%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Globalization.CultureInfo.CompareInfo%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Globalization.CultureInfo.NumberFormat%2A&gt;</ph>，和<ph id="ph6">&lt;xref:System.Globalization.CultureInfo.TextInfo%2A&gt;</ph>属性) 现在反映与非特定区域性关联的特定区域性。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>In earlier versions of the .NET Framework, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentCulture%2A&gt;</ph> property threw a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph> exception when a neutral culture was assigned.</source>
          <target state="translated">在早期版本的.NET Framework 中，<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentCulture%2A&gt;</ph>属性引发<ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>异常时分配的非特定区域性。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</source>
          <target state="translated">下面的代码示例显示允许 Windows 窗体，以显示在控制面板中设置的区域性中的用户界面的线程处理语句。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>Additional code is needed.</source>
          <target state="translated">需要附加代码。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentCulture">
          <source>The property is set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">属性设置为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>for setting the property.</source>
          <target state="translated">有关设置的属性。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentCulture">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentPrincipal">
          <source>Gets or sets the thread's current principal (for role-based security).</source>
          <target state="translated">获取或设置线程的当前负责人（对基于角色的安全性而言）。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentPrincipal">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Principal.IPrincipal" /&gt;</ph> value representing the security context.</source>
          <target state="translated">表示安全上下文的 <ph id="ph1">&lt;see cref="T:System.Security.Principal.IPrincipal" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentPrincipal">
          <source>The following code example shows how to set and retrieve the principal of a thread.</source>
          <target state="translated">下面的代码示例演示如何设置和检索线程的主体。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentPrincipal">
          <source>The caller does not have the permission required to set the principal.</source>
          <target state="translated">调用方没有设置该主体所需的权限。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentPrincipal">
          <source>to manipulate the principal object.</source>
          <target state="translated">若要操作的主体对象。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentPrincipal">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentThread">
          <source>Gets the currently running thread.</source>
          <target state="translated">获取当前正在运行的线程。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentThread">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> that is the representation of the currently running thread.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph>，表示当前正在运行的线程。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentThread">
          <source>The following example creates a task that in turn creates 20 child tasks.</source>
          <target state="translated">下面的示例创建反过来创建 20 个的子任务的任务。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentThread">
          <source>The application itself, as well as each task, calls the <ph id="ph1">`ShowThreadInformation`</ph> method, which uses the <ph id="ph2">&lt;xref:System.Threading.Thread.CurrentThread%2A&gt;</ph> property  to display information about the thread on which it is running.</source>
          <target state="translated">在应用程序本身，作为很好地为每个任务中，调用<ph id="ph1">`ShowThreadInformation`</ph>方法，它使用<ph id="ph2">&lt;xref:System.Threading.Thread.CurrentThread%2A&gt;</ph>属性来显示有关在其运行的线程的信息。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentThread">
          <source>Each child task generates 1 million random numbers between 1 and 1 million and returns their mean.</source>
          <target state="translated">每个子任务生成 1 亿个随机数字，介于 1 和 100 万个，并返回其平均值。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentThread">
          <source>The parent task calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType&gt;</ph> method to ensure that the child tasks have completed before displaying the mean returned by each task and calculating the mean of means.</source>
          <target state="translated">父任务调用<ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType&gt;</ph>方法，以确保子任务已完成之前显示每个任务返回的平均值和计算平均值的平均值。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentThread">
          <source>Note that while the application runs on a foreground thread, each task runs on a thread pool thread.</source>
          <target state="translated">请注意，当应用程序运行在前台线程上时，每个任务运行在线程池线程上。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</source>
          <target state="translated">获取或设置资源管理器使用的当前区域性以便在运行时查找区域性特定的资源。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>An object that represents the current culture.</source>
          <target state="translated">表示当前区域性的对象。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>The UI culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture.</source>
          <target state="translated">UI 区域性指定应用程序需要支持用户输入和输出，以及默认情况下与操作系统区域性相同的资源。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>See the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>类若要了解有关区域性名称和标识符，固定，非特定，和特定区域性之间的差异和区域性信息的方式会影响线程和应用程序域。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>See the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property to learn how a thread's default UI culture is determined.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>属性若要了解如何确定线程的默认 UI 区域性。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> returned by this property can be a neutral culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>返回此属性可以是一个非特定区域性。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>Neutral cultures should not be used with formatting methods such as <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">非特定区域性不应与等格式设置方法<ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>，和<ph id="ph3">&lt;xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>Use the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType&gt;</ph> method to get a specific culture, or use the <ph id="ph2">&lt;xref:System.Threading.Thread.CurrentCulture%2A&gt;</ph> property.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType&gt;</ph>方法以获取特定区域性，或者使用<ph id="ph2">&lt;xref:System.Threading.Thread.CurrentCulture%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType&gt;</ph> method throws <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> for the neutral cultures "zh-Hant" ("zh-CHT") and "zh-Hans" ("zh-CHS").</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType&gt;</ph>方法抛出异常<ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>非特定区域性"此不同 ("ZH-CHT") 和"中文-Hans"("ZH-CHS")。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>The following example determines whether the language of the current thread's UI culture is French.</source>
          <target state="translated">下面的示例确定是否当前线程的 UI 区域性的语言为法语。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>If it is not, it sets the UI culture of the current thread to English (United States).</source>
          <target state="translated">如果不是这样，它会将当前线程的 UI 区域性设置为英语 （美国）。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</source>
          <target state="translated">下面的代码示例显示允许 Windows 窗体，以显示在控制面板中设置的区域性中的用户界面的线程处理语句。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>Additional code is needed.</source>
          <target state="translated">需要附加代码。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>The property is set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">属性设置为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>The property is set to a culture name that cannot be used to locate a resource file.</source>
          <target state="translated">该属性设置为不能用于定位资源文件的区域性名称。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.CurrentUICulture">
          <source>Resource filenames must include only letters, numbers, hyphens or underscores.</source>
          <target state="translated">资源文件名必须仅包含字母、数字、连字符或下划线。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.</source>
          <target state="translated">对于当前线程关闭运行时可调用包装 (RCW) 的自动清理。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically.</source>
          <target state="translated">默认情况下，公共语言运行时 (CLR) 运行时可调用包装器会自动清理。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:</source>
          <target state="translated">在清除，这可能会导致某些应用程序的可重入性问题的过程的 CLR 泵消息满足以下异常条件：</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>The application does its own message pumping.</source>
          <target state="translated">应用程序执行自己消息泵处理。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>The application needs to control precisely when message pumping occurs.</source>
          <target state="translated">应用程序需要精确地控制何时消息泵处理时发生。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>Such applications can use the <ph id="ph1">&lt;xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A&gt;</ph> method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.</source>
          <target state="translated">此类应用程序可以使用<ph id="ph1">&lt;xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A&gt;</ph>方法，以防止 CLR 执行自动回收的运行时可调用包装器。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread.</source>
          <target state="translated">当已在一个线程上调用此方法时，自动清理无法重新启用该线程。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>When your application is ready to clean up runtime callable wrappers, use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType&gt;</ph> method to instruct the runtime to clean up all runtime callable wrappers in the current context.</source>
          <target state="translated">准备好清理运行时可调用包装你的应用程序时，请使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType&gt;</ph>方法，以指示运行时清理当前上下文中的所有运行时可调用包装。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>Message pumping occurs while the method executes.</source>
          <target state="translated">该方法将执行时发生消息泵处理。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.DisableComObjectEagerCleanup">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</source>
          <target state="translated">通知宿主执行将要进入一个代码区域，在该代码区域内线程中止或未经处理异常的影响限于当前任务。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</source>
          <target state="translated">公共语言运行时 (CLR)，如 Microsoft SQL Server 2005，主机可以建立不同的策略中的代码的关键和非关键区域的故障。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</source>
          <target state="translated">关键区域是一个线程中止或未经处理的异常的影响可能会不限于当前任务。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</source>
          <target state="translated">与此相反，中止或非关键区域的代码中的失败会影响仅在其中出错的任务。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>For example, consider a task that attempts to allocate memory while holding a lock.</source>
          <target state="translated">例如，考虑一个尝试持有的锁时分配内存的任务。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, because there can be other tasks in the domain waiting for the same lock.</source>
          <target state="translated">如果内存分配失败，正在中止当前任务不能确保稳定性<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>，因为在等待相同的锁的域可以是其他任务。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>If the current task is terminated, other tasks could be deadlocked.</source>
          <target state="translated">如果当前任务将被终止，则其他任务无法死锁。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>When a failure occurs in a critical region, the host might decide to unload the entire <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> rather than take the risk of continuing execution in a potentially unstable state.</source>
          <target state="translated">在关键区域中发生故障，主机可能会决定是否要卸载整个<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>而不是在可能不稳定状态中继续执行的风险。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>To inform the host that your code is entering a critical region, call <ph id="ph1">&lt;xref:System.Threading.Thread.BeginCriticalRegion%2A&gt;</ph>.</source>
          <target state="translated">若要通知宿主代码正在进入关键区域，调用<ph id="ph1">&lt;xref:System.Threading.Thread.BeginCriticalRegion%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.Thread.EndCriticalRegion%2A&gt;</ph> when execution returns to a non-critical region of code.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Threading.Thread.EndCriticalRegion%2A&gt;</ph>当执行返回到代码的非关键区域。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</source>
          <target state="translated">在 SQL Server 2005 下运行的代码中使用此方法需要要在最高的主机保护级别运行的代码。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndCriticalRegion">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Threading.Thread.BeginCriticalRegion%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.EndCriticalRegion%2A&gt;</ph> methods to divide a block of code into critical and non-critical regions.</source>
          <target state="translated">下面的示例演示了利用<ph id="ph1">&lt;xref:System.Threading.Thread.BeginCriticalRegion%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.EndCriticalRegion%2A&gt;</ph>方法将划分为关键和非关键区域的代码块。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</source>
          <target state="translated">通知宿主托管代码已执行完依赖于当前物理操作系统线程的标识的指令。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</source>
          <target state="translated">公共语言运行时，如 Microsoft SQL Server 2005，某些主机提供其自己的线程管理。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</source>
          <target state="translated">提供其自己的线程管理的主机可以正在执行的任务在一个物理操作系统线程之间移动在任何时间。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>Most tasks are not affected by this switching.</source>
          <target state="translated">大多数任务不受这种切换。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</source>
          <target state="translated">但是，某些任务具有线程关联 — 也就是说，它们依赖于物理操作系统线程的标识。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>These tasks must inform the host when they execute code that should not be switched.</source>
          <target state="translated">这些任务必须通知宿主在其执行不会切换的代码。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <ph id="ph1">&lt;xref:System.Threading.Thread.BeginThreadAffinity%2A&gt;</ph> before acquiring the lock, and <ph id="ph2">&lt;xref:System.Threading.Thread.EndThreadAffinity%2A&gt;</ph> after releasing the lock.</source>
          <target state="translated">例如，如果应用程序调用一个系统 API 来获取操作系统锁定具有线程关联，例如 Win32 CRITICAL_SECTION 中，必须调用<ph id="ph1">&lt;xref:System.Threading.Thread.BeginThreadAffinity%2A&gt;</ph>之前获取锁，和<ph id="ph2">&lt;xref:System.Threading.Thread.EndThreadAffinity%2A&gt;</ph>后释放锁。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</source>
          <target state="translated">在 SQL Server 2005 下运行的代码中使用此方法需要要在最高的主机保护级别运行的代码。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Threading.Thread.BeginThreadAffinity%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.EndThreadAffinity%2A&gt;</ph> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</source>
          <target state="translated">下面的示例演示了利用<ph id="ph1">&lt;xref:System.Threading.Thread.BeginThreadAffinity%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.EndThreadAffinity%2A&gt;</ph>方法用于通知的代码块取决于物理操作系统线程的标识的主机。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.EndThreadAffinity">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.ExecutionContext">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> object that contains information about the various contexts of the current thread.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> 对象，该对象包含有关当前线程的各种上下文的信息。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ExecutionContext">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> object that consolidates context information for the current thread.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> 对象，包含当前线程的上下文信息。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ExecutionContext">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> class provides a single container for all information relevant to a logical thread of execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>类提供了单个容器的执行逻辑线程相关的所有信息。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ExecutionContext">
          <source>This includes security context, call context, synchronization context, localization context, and transaction context.</source>
          <target state="translated">这包括安全上下文，调用上下文、 同步上下文，本地化上下文和事务上下文。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> object.</source>
          <target state="translated">确保垃圾回收器回收 <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> 对象时释放资源并执行其他清理操作。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Finalize">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.Threading.Thread.Finalize%2A&gt;</ph> when the current object is ready to be finalized.</source>
          <target state="translated">垃圾回收器调用<ph id="ph1">&lt;xref:System.Threading.Thread.Finalize%2A&gt;</ph>何时准备好完成当前的对象。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>The name of the data slot to be freed.</source>
          <target state="translated">要释放的数据槽的名称。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>Eliminates the association between a name and a slot, for all threads in the process.</source>
          <target state="translated">为进程中的所有线程消除名称与槽之间的关联。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>For better performance, use fields that are marked with the <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> attribute instead.</source>
          <target state="translated">为了获得更好的性能，请改用以 <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> 特性标记的字段。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute) and data slots.</source>
          <target state="translated">.NET Framework 提供了有关使用线程本地存储区 (TLS) 的两种机制： 线程相关的静态字段 (即，使用标记的字段<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性) 和数据槽。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</source>
          <target state="translated">线程相关的静态字段提供更好的性能比数据槽，编译时类型检查。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>For more information about using TLS, see <bpt id="p1">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>.</source>
          <target state="translated">有关使用 TLS 的详细信息，请参阅<bpt id="p1">[</bpt>线程本地存储区： 线程相关的静态字段和数据槽<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>After any thread calls <ph id="ph1">`FreeNamedDataSlot`</ph>, any other thread that calls <ph id="ph2">&lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt;</ph> with the same name will allocate a new slot associated with the name.</source>
          <target state="translated">任何线程调用后<ph id="ph1">`FreeNamedDataSlot`</ph>，调用的其他任何线程<ph id="ph2">&lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt;</ph>具有相同名称将分配一个与名称关联的新槽。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>Subsequent calls to <ph id="ph1">`GetNamedDataSlot`</ph> by any thread will return the new slot.</source>
          <target state="translated">后续调用<ph id="ph1">`GetNamedDataSlot`</ph>任何线程将返回新的槽。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>However, any thread that still has a <ph id="ph1">&lt;xref:System.LocalDataStoreSlot?displayProperty=nameWithType&gt;</ph> returned by an earlier call to <ph id="ph2">`GetNamedDataSlot`</ph> can continue to use the old slot.</source>
          <target state="translated">但是，任何线程仍具有<ph id="ph1">&lt;xref:System.LocalDataStoreSlot?displayProperty=nameWithType&gt;</ph>返回到以前通过调用<ph id="ph2">`GetNamedDataSlot`</ph>可以继续使用旧的槽。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>A slot that has been associated with a name is released only when every <ph id="ph1">`LocalDataStoreSlot`</ph> that was obtained prior to the call to <ph id="ph2">`FreeNamedDataSlot`</ph> has been released and garbage-collected.</source>
          <target state="translated">发布已与名称关联的槽仅当每个<ph id="ph1">`LocalDataStoreSlot`</ph>之前对的调用获得的<ph id="ph2">`FreeNamedDataSlot`</ph>已被释放并垃圾回收。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>Threads use a local store memory mechanism to store thread-specific data.</source>
          <target state="translated">线程使用本地存储内存机制来存储线程特定的数据。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>The common language runtime allocates a multi-slot data store array to each process when it is created.</source>
          <target state="translated">创建时，公共语言运行时分配给每个进程的多插槽数据存储数组。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</source>
          <target state="translated">线程可以分配数据存储区中的数据槽、 存储和检索数据的槽中值和线程过期后释放槽以供重用。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>Data slots are unique per thread.</source>
          <target state="translated">数据槽是每个线程的唯一的。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>No other thread (not even a child thread) can get that data.</source>
          <target state="translated">没有其他线程 （甚至不是子线程） 可以获取该数据。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>The first example shows how to use a field that is marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to hold thread-specific information.</source>
          <target state="translated">第一个示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>特性来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>The second example shows how to use a data slot to do the same thing.</source>
          <target state="translated">第二个示例演示如何使用数据槽执行相同的操作。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source><bpt id="p1">**</bpt>First Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第一个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>The following example shows how to use a field that is marked with <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> to hold thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>This technique provides better performance than the technique that is shown in the second example.</source>
          <target state="translated">此方法提供更好的性能比第二个示例所示的技术。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source><bpt id="p1">**</bpt>Second Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第二个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
          <source>The following example demonstrates how to use a named data slot to store thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用命名的数据槽以存储线程特定的信息。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetApartmentState">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Threading.ApartmentState" /&gt;</ph> value indicating the apartment state.</source>
          <target state="translated">返回表示单元状态的 <ph id="ph1">&lt;see cref="T:System.Threading.ApartmentState" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetApartmentState">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Threading.ApartmentState" /&gt;</ph> values indicating the apartment state of the managed thread.</source>
          <target state="translated">其中一个表示托管线程的单元状态的 <ph id="ph1">&lt;see cref="T:System.Threading.ApartmentState" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetApartmentState">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Threading.ApartmentState.Unknown" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.Threading.ApartmentState.Unknown" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetApartmentState">
          <source>This method, along with the <ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> method, replaces the <ph id="ph3">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph> property.</source>
          <target state="translated">此方法，以及<ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法，将替换<ph id="ph3">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetApartmentState">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> methods.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetApartmentState">
          <source>The code example creates a thread.</source>
          <target state="translated">代码示例创建一个线程。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetApartmentState">
          <source>Before the thread is started, <ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph> displays the initial <ph id="ph2">&lt;xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType&gt;</ph> state and <ph id="ph3">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> changes the state to <ph id="ph4">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在线程启动之前，<ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>显示初始<ph id="ph2">&lt;xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType&gt;</ph>状态和<ph id="ph3">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>将状态更改为<ph id="ph4">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetApartmentState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> method then returns <ph id="ph2">`false`</ph> when attempting to change the state to <ph id="ph3">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph> because the apartment state is already set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法然后返回<ph id="ph2">`false`</ph>时尝试的状态更改为<ph id="ph3">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph>因为已经设置了单元状态。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetApartmentState">
          <source>If the same operation had been attempted with <ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> would have been thrown.</source>
          <target state="translated">如果相同的操作已尝试使用<ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>，<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>将引发。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetApartmentState">
          <source>After the thread is started, the <ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> method is used again.</source>
          <target state="translated">在线程启动后，<ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法会再次使用。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetApartmentState">
          <source>This time it throws <ph id="ph1">&lt;xref:System.Threading.ThreadStateException&gt;</ph> because the thread has already been started.</source>
          <target state="translated">这次将引发<ph id="ph1">&lt;xref:System.Threading.ThreadStateException&gt;</ph>因为线程已启动。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetCompressedStack">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Threading.CompressedStack" /&gt;</ph> object that can be used to capture the stack for the current thread.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Threading.CompressedStack" /&gt;</ph> 对象，此对象可用于获取当前线程的堆栈。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetCompressedStack">
          <source>None.</source>
          <target state="translated">无。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetCompressedStack">
          <source>This method is no longer supported.</source>
          <target state="translated">不再支持此方法。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetCompressedStack">
          <source>In all cases.</source>
          <target state="translated">在所有情况下。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetCompressedStack">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetCompressedStack">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>The <ph id="ph1">&lt;see cref="T:System.LocalDataStoreSlot" /&gt;</ph> from which to get the value.</source>
          <target state="translated">要从其获取值的 <ph id="ph1">&lt;see cref="T:System.LocalDataStoreSlot" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>Retrieves the value from the specified slot on the current thread, within the current thread's current domain.</source>
          <target state="translated">在当前线程的当前域中从当前线程上指定的槽中检索值。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>For better performance, use fields that are marked with the <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> attribute instead.</source>
          <target state="translated">为了获得更好的性能，请改用以 <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> 特性标记的字段。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>The retrieved value.</source>
          <target state="translated">检索到的值。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute) and data slots.</source>
          <target state="translated">.NET Framework 提供了有关使用线程本地存储区 (TLS) 的两种机制： 线程相关的静态字段 (即，使用标记的字段<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性) 和数据槽。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</source>
          <target state="translated">线程相关的静态字段提供更好的性能比数据槽，编译时类型检查。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>For more information about using TLS, see <bpt id="p1">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>.</source>
          <target state="translated">有关使用 TLS 的详细信息，请参阅<bpt id="p1">[</bpt>线程本地存储区： 线程相关的静态字段和数据槽<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>Threads use a local store memory mechanism to store thread-specific data.</source>
          <target state="translated">线程使用本地存储内存机制来存储线程特定的数据。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>The common language runtime allocates a multi-slot data store array to each process when it is created.</source>
          <target state="translated">创建时，公共语言运行时分配给每个进程的多插槽数据存储数组。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</source>
          <target state="translated">线程可以分配数据存储区中的数据槽、 存储和检索数据的槽中值和线程过期后释放槽以供重用。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>Data slots are unique per thread.</source>
          <target state="translated">数据槽是每个线程的唯一的。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>No other thread (not even a child thread) can get that data.</source>
          <target state="translated">没有其他线程 （甚至不是子线程） 可以获取该数据。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.GetData%2A&gt;</ph> is a <ph id="ph2">`Shared`</ph> method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.GetData%2A&gt;</ph> 是<ph id="ph2">`Shared`</ph>始终将应用于当前正在执行的线程，即使你在调用它使用另一个线程是指变量的方法。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>To avoid confusion, use the class name when calling <ph id="ph1">`Shared`</ph> methods: <ph id="ph2">`Dim test As Object = Thread.GetData(testSlot)`</ph>.</source>
          <target state="translated">为了避免混淆，使用调用时<ph id="ph1">`Shared`</ph>方法： <ph id="ph2">`Dim test As Object = Thread.GetData(testSlot)`</ph>。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>The first example shows how to use a field that is marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to hold thread-specific information.</source>
          <target state="translated">第一个示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>特性来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>The second example shows how to use a data slot to do the same thing.</source>
          <target state="translated">第二个示例演示如何使用数据槽执行相同的操作。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source><bpt id="p1">**</bpt>First Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第一个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>The following example shows how to use a field that is marked with <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> to hold thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>This technique provides better performance than the technique that is shown in the second example.</source>
          <target state="translated">此方法提供更好的性能比第二个示例所示的技术。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source><bpt id="p1">**</bpt>Second Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第二个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
          <source>The following example demonstrates how to use a data slot to store thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用的数据槽以存储线程特定的信息。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetDomain">
          <source>Returns the current domain in which the current thread is running.</source>
          <target state="translated">返回当前线程正在其中运行的当前域。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetDomain">
          <source>An <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> representing the current application domain of the running thread.</source>
          <target state="translated">表示正在运行的线程的当前应用程序域的 <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetDomain">
          <source>The following code example shows how to retrieve the name and ID of the <ph id="ph1">`AppDomain`</ph> in which the thread is running.</source>
          <target state="translated">下面的代码示例演示如何检索的名称和 ID<ph id="ph1">`AppDomain`</ph>中的线程运行。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetDomainID">
          <source>Returns a unique application domain identifier.</source>
          <target state="translated">返回唯一的应用程序域标识符。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetDomainID">
          <source>A 32-bit signed integer uniquely identifying the application domain.</source>
          <target state="translated">唯一标识应用程序域的 32 位有符号整数。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetDomainID">
          <source>The following code example shows how to retrieve the name and ID of the <ph id="ph1">`AppDomain`</ph> in which the thread is running.</source>
          <target state="translated">下面的代码示例演示如何检索的名称和 ID<ph id="ph1">`AppDomain`</ph>中的线程运行。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetHashCode">
          <source>Returns a hash code for the current thread.</source>
          <target state="translated">返回当前线程的哈希代码。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetHashCode">
          <source>An integer hash code value.</source>
          <target state="translated">整数哈希代码值。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetHashCode">
          <source>The hash code is not guaranteed to be unique.</source>
          <target state="translated">不保证是唯一的哈希代码。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetHashCode">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt;</ph> property if you need a unique identifier for a managed thread.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt;</ph>属性，如果你需要为托管线程的唯一标识符。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>The name of the local data slot.</source>
          <target state="translated">本地数据槽的名称。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>Looks up a named data slot.</source>
          <target state="translated">查找命名的数据槽。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>For better performance, use fields that are marked with the <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> attribute instead.</source>
          <target state="translated">为了获得更好的性能，请改用以 <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> 特性标记的字段。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.LocalDataStoreSlot" /&gt;</ph> allocated for this thread.</source>
          <target state="translated">为此线程分配的 <ph id="ph1">&lt;see cref="T:System.LocalDataStoreSlot" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute) and data slots.</source>
          <target state="translated">.NET Framework 提供了有关使用线程本地存储区 (TLS) 的两种机制： 线程相关的静态字段 (即，使用标记的字段<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性) 和数据槽。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</source>
          <target state="translated">线程相关的静态字段提供更好的性能比数据槽，编译时类型检查。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>For more information about using TLS, see <bpt id="p1">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>.</source>
          <target state="translated">有关使用 TLS 的详细信息，请参阅<bpt id="p1">[</bpt>线程本地存储区： 线程相关的静态字段和数据槽<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>Threads use a local store memory mechanism to store thread-specific data.</source>
          <target state="translated">线程使用本地存储内存机制来存储线程特定的数据。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>The common language runtime allocates a multi-slot data store array to each process when it is created.</source>
          <target state="translated">创建时，公共语言运行时分配给每个进程的多插槽数据存储数组。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</source>
          <target state="translated">线程可以分配数据存储区中的数据槽、 存储和检索数据的槽中值和线程过期后释放槽以供重用。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>Data slots are unique per thread.</source>
          <target state="translated">数据槽是每个线程的唯一的。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>No other thread (not even a child thread) can get that data.</source>
          <target state="translated">没有其他线程 （甚至不是子线程） 可以获取该数据。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>If the named slot does not exist, a new slot is allocated.</source>
          <target state="translated">如果命名的槽不存在，将分配新的槽。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>Named data slots are public and can be manipulated by anyone.</source>
          <target state="translated">命名的数据槽都是公开的并可操作的任何人。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>The first example shows how to use a field that is marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to hold thread-specific information.</source>
          <target state="translated">第一个示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>特性来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>The second example shows how to use a data slot to do the same thing.</source>
          <target state="translated">第二个示例演示如何使用数据槽执行相同的操作。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source><bpt id="p1">**</bpt>First Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第一个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>The following example shows how to use a field that is marked with <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> to hold thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>This technique provides better performance than the technique that is shown in the second example.</source>
          <target state="translated">此方法提供更好的性能比第二个示例所示的技术。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source><bpt id="p1">**</bpt>Second Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第二个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
          <source>The following example demonstrates how to use a named data slot to store thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用命名的数据槽以存储线程特定的信息。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Interrupt">
          <source>Interrupts a thread that is in the <ph id="ph1">&lt;see langword="WaitSleepJoin" /&gt;</ph> thread state.</source>
          <target state="translated">中断处于 <ph id="ph1">&lt;see langword="WaitSleepJoin" /&gt;</ph> 线程状态的线程。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Interrupt">
          <source>If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.</source>
          <target state="translated">如果在等待、 休眠或联接状态，此线程不当前被阻塞，则下次开始阻止时它将被中断。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Interrupt">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> is thrown in the interrupted thread, but not until the thread blocks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> 在已中断线程，但此线程受到阻止之后才引发。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Interrupt">
          <source>If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.</source>
          <target state="translated">如果线程永远不会阻止，永远不会引发异常，并因此线程可能完成而不被中断。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Interrupt">
          <source>The following code example shows the behavior of a running thread when it is interrupted and subsequently gets blocked.</source>
          <target state="translated">在中断并随后被阻止时，下面的代码示例将显示正在运行的线程的行为。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Interrupt">
          <source>The caller does not have the appropriate <ph id="ph1">&lt;see cref="T:System.Security.Permissions.SecurityPermission" /&gt;</ph>.</source>
          <target state="translated">调用方没有适当的 <ph id="ph1">&lt;see cref="T:System.Security.Permissions.SecurityPermission" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Interrupt">
          <source>for advanced operations on threads.</source>
          <target state="translated">有关线程的高级操作。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Interrupt">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.IsAlive">
          <source>Gets a value indicating the execution status of the current thread.</source>
          <target state="translated">获取指示当前线程的执行状态的值。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsAlive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this thread has been started and has not terminated normally or aborted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此线程已启动并且尚未正常终止或中止，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.IsBackground">
          <source>Gets or sets a value indicating whether or not a thread is a background thread.</source>
          <target state="translated">获取或设置一个值，该值指示某个线程是否为后台线程。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this thread is or is to become a background thread; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此线程为或将成为后台线程，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>A thread is either a background thread or a foreground thread.</source>
          <target state="translated">线程是后台线程或前台线程。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating.</source>
          <target state="translated">后台线程均与前台线程相同，只不过后台线程不会阻止进程终止。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>Once all foreground threads belonging to a process have terminated, the common language runtime ends the process.</source>
          <target state="translated">属于某个进程的所有前台线程已都终止，公共语言运行时结束该进程。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>Any remaining background threads are stopped and do not complete.</source>
          <target state="translated">任何剩余的后台线程已停止，并不会完成。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>By default, the following threads execute in the foreground (that is, their <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>):</source>
          <target state="translated">默认情况下，以下线程执行在前台 (即，其<ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph>属性返回<ph id="ph2">`false`</ph>):</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>The primary thread (or main application thread).</source>
          <target state="translated">主线程 （或主应用程序线程）。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>All threads created by calling a <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> class constructor.</source>
          <target state="translated">通过调用创建的所有线程<ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>By default, the following threads execute in the background  (that is, their <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>):</source>
          <target state="translated">默认情况下，以下线程在后台执行 (即，其<ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph>属性返回<ph id="ph2">`true`</ph>):</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>Thread pool threads, which are a pool of worker threads maintained by the runtime.</source>
          <target state="translated">线程池线程，是一个由运行时维护辅助线程池。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>You can configure the thread pool and schedule work on thread pool threads by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> class.</source>
          <target state="translated">可以通过使用线程池线程上配置的线程池和计划工作<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>Task-based asynchronous operations automatically execute on thread pool threads.</source>
          <target state="translated">在线程池线程上自动执行基于任务的异步操作。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>All threads that enter the managed execution environment from unmanaged code.</source>
          <target state="translated">从非托管代码进入托管的执行环境的所有线程。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>The following example contrasts the behavior of foreground and background threads.</source>
          <target state="translated">下面的示例对比前台和后台线程的行为。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>It creates a foreground thread and a background thread.</source>
          <target state="translated">它将创建一个前台线程和后台线程。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>The foreground thread keeps the process running until completes its <ph id="ph1">`for`</ph> loop and terminates.</source>
          <target state="translated">前台线程前让进程一直运行，直到完成其<ph id="ph1">`for`</ph>循环并终止。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsBackground">
          <source>However, as the output from the example shows, because the foreground thread has finished execution, the process is terminated before the background thread has completed execution.</source>
          <target state="translated">但是，如示例输出所示，因为前台线程已完成执行，后台线程完成执行之前，已终止进程。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.IsBackground">
          <source>The thread is dead.</source>
          <target state="translated">线程终止。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.IsThreadPoolThread">
          <source>Gets a value indicating whether or not a thread belongs to the managed thread pool.</source>
          <target state="translated">获取指示线程是否属于托管线程池的值。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsThreadPoolThread">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this thread belongs to the managed thread pool; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此线程属于托管线程池，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsThreadPoolThread">
          <source>For more information see <bpt id="p1">[</bpt>The Managed Thread Pool<ept id="p1">](~/docs/standard/threading/the-managed-thread-pool.md)</ept>.</source>
          <target state="translated">有关详细信息请参阅<bpt id="p1">[</bpt>托管线程池<ept id="p1">](~/docs/standard/threading/the-managed-thread-pool.md)</ept>。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.IsThreadPoolThread">
          <source>The following code example shows how to determine whether a thread is from the thread pool.</source>
          <target state="translated">下面的代码示例演示如何确定线程是否是从线程池。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>Blocks the calling thread until the thread represented by this instance terminates.</source>
          <target state="translated">在此实例表示的线程终止前，阻止调用线程。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join">
          <source>Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <ph id="ph1">&lt;see langword="SendMessage" /&gt;</ph> pumping.</source>
          <target state="translated">在继续执行标准的 COM 和 <ph id="ph1">&lt;see langword="SendMessage" /&gt;</ph> 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose <ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> method is called has completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> 是一种同步方法，阻止调用线程 （即，调用的方法的线程），直到线程其<ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>方法调用已完成。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join">
          <source>Use this method to ensure that a thread has been terminated.</source>
          <target state="translated">使用此方法以确保线程已终止。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join">
          <source>The caller will block indefinitely if the thread does not terminate.</source>
          <target state="translated">如果线程不会终止，调用方将无限期阻止。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join">
          <source>In the following example, the <ph id="ph1">`Thread1`</ph> thread calls the <ph id="ph2">&lt;xref:System.Threading.Thread.Join&gt;</ph> method of <ph id="ph3">`Thread2`</ph>, which causes <ph id="ph4">`Thread1`</ph> to block until <ph id="ph5">`Thread2`</ph> has completed.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">`Thread1`</ph>线程调用<ph id="ph2">&lt;xref:System.Threading.Thread.Join&gt;</ph>方法<ph id="ph3">`Thread2`</ph>，这将导致<ph id="ph4">`Thread1`</ph>到之前的块<ph id="ph5">`Thread2`</ph>已完成。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join">
          <source>If the thread has already terminated when <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> is called, the method returns immediately.</source>
          <target state="translated">如果线程已终止时<ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>调用时，该方法将立即返回。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join">
          <source>You should never call the <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Threading.Thread&gt;</ph> object that represents the current thread from the current thread.</source>
          <target state="translated">你应永远不会调用<ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>方法<ph id="ph2">&lt;xref:System.Threading.Thread&gt;</ph>对象，表示来自当前线程的当前线程。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join">
          <source>This causes your app to hang because the current thread waits upon itself indefinitely,</source>
          <target state="translated">这将导致您的应用程序挂起，因为当前线程自身无限期等待</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join">
          <source>This method changes the state of the calling thread to include <ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此方法要包括的调用线程的状态更改<ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join">
          <source>You cannot invoke <ph id="ph1">`Join`</ph> on a thread that is in the <ph id="ph2">&lt;xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType&gt;</ph> state.</source>
          <target state="translated">不能调用<ph id="ph1">`Join`</ph>中的线程上<ph id="ph2">&lt;xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType&gt;</ph>状态。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join">
          <source>The caller attempted to join a thread that is in the <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Unstarted" /&gt;</ph> state.</source>
          <target state="translated">调用方尝试加入处于 <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Unstarted" /&gt;</ph> 状态的线程。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join">
          <source>The thread is interrupted while waiting.</source>
          <target state="translated">线程在等待时中断。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source>The number of milliseconds to wait for the thread to terminate.</source>
          <target state="translated">等待线程终止的毫秒数。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source>Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</source>
          <target state="translated">在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止或经过了指定时间为止。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the thread has terminated; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the thread has not terminated after the amount of time specified by the <ph id="ph3">&lt;paramref name="millisecondsTimeout" /&gt;</ph> parameter has elapsed.</source>
          <target state="translated">如果线程已终止，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 参数指定的时间量已过之后还未终止线程，则为 <ph id="ph3">&lt;paramref name="millisecondsTimeout" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Join%28System.Int32%29&gt;</ph> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> method is called has completed or the time-out interval has elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Join%28System.Int32%29&gt;</ph> 是一种同步方法，阻止调用线程 （即，调用的方法的线程），直到任一线程其<ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>方法调用已完成或超时间隔已过去。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source>In the following example, the <ph id="ph1">`Thread1`</ph> thread calls the <ph id="ph2">&lt;xref:System.Threading.Thread.Join&gt;</ph> method of <ph id="ph3">`Thread2`</ph>, which causes <ph id="ph4">`Thread1`</ph> to block either until <ph id="ph5">`Thread2`</ph> has completed or 2 seconds have elapsed.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">`Thread1`</ph>线程调用<ph id="ph2">&lt;xref:System.Threading.Thread.Join&gt;</ph>方法<ph id="ph3">`Thread2`</ph>，这将导致<ph id="ph4">`Thread1`</ph>阻止直到<ph id="ph5">`Thread2`</ph>已完成或 2 秒。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source>If <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> is specified for the <ph id="ph2">`millisecondsTimeout`</ph> parameter, this method behaves identically to the <ph id="ph3">&lt;xref:System.Threading.Thread.Join&gt;</ph> method overload, except for the return value.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>为指定<ph id="ph2">`millisecondsTimeout`</ph>参数，此方法的行为相同与<ph id="ph3">&lt;xref:System.Threading.Thread.Join&gt;</ph>方法重载，只是返回值。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source>If the thread has already terminated when <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> is called, the method returns immediately.</source>
          <target state="translated">如果线程已终止时<ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>调用时，该方法将立即返回。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source>This method changes the state of the calling thread to include <ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此方法要包括的调用线程的状态更改<ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source>You cannot invoke <ph id="ph1">`Join`</ph> on a thread that is in the <ph id="ph2">&lt;xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType&gt;</ph> state.</source>
          <target state="translated">不能调用<ph id="ph1">`Join`</ph>中的线程上<ph id="ph2">&lt;xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType&gt;</ph>状态。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source>The value of <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is negative and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> in milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 的值为负数，且不等于 <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>（以毫秒为单位）。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.Int32)">
          <source>The thread has not been started.</source>
          <target state="translated">该线程尚未启动。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> set to the amount of time to wait for the thread to terminate.</source>
          <target state="translated">设置等待线程终止的时间量的 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</source>
          <target state="translated">在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止或经过了指定时间为止。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the thread terminated; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the thread has not terminated after the amount of time specified by the <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph> parameter has elapsed.</source>
          <target state="translated">如果线程已终止，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 参数指定的时间量已过之后还未终止线程，则为 <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Join%28System.TimeSpan%29&gt;</ph> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> method is called has completed or the time-out interval has elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Join%28System.TimeSpan%29&gt;</ph> 是一种同步方法，阻止调用线程 （即，调用的方法的线程），直到任一线程其<ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>方法调用已完成或超时间隔已过去。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>In the following example, the <ph id="ph1">`Thread1`</ph> thread calls the <ph id="ph2">&lt;xref:System.Threading.Thread.Join&gt;</ph> method of <ph id="ph3">`Thread2`</ph>, which causes <ph id="ph4">`Thread1`</ph> to block either until <ph id="ph5">`Thread2`</ph> has completed or 2 seconds have elapsed.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">`Thread1`</ph>线程调用<ph id="ph2">&lt;xref:System.Threading.Thread.Join&gt;</ph>方法<ph id="ph3">`Thread2`</ph>，这将导致<ph id="ph4">`Thread1`</ph>阻止直到<ph id="ph5">`Thread2`</ph>已完成或 2 秒。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>If <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> is specified for <ph id="ph2">`timeout`</ph>, this method behaves identically to the <ph id="ph3">&lt;xref:System.Threading.Thread.Join&gt;</ph> method overload, except for the return value.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>为指定<ph id="ph2">`timeout`</ph>，此方法的行为相同与<ph id="ph3">&lt;xref:System.Threading.Thread.Join&gt;</ph>方法重载，只是返回值。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>If the thread has already terminated when <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> is called, the method returns immediately.</source>
          <target state="translated">如果线程已终止时<ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>调用时，该方法将立即返回。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>This method changes the state of the current thread to include <ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin&gt;</ph>.</source>
          <target state="translated">此方法要包括的当前线程的状态更改<ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>You cannot invoke <ph id="ph1">`Join`</ph> on a thread that is in the <ph id="ph2">&lt;xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType&gt;</ph> state.</source>
          <target state="translated">不能调用<ph id="ph1">`Join`</ph>中的线程上<ph id="ph2">&lt;xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType&gt;</ph>状态。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>The following code example demonstrates how to use a <ph id="ph1">`TimeSpan`</ph> value with the <ph id="ph2">`Join`</ph> method.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">`TimeSpan`</ph>值与<ph id="ph2">`Join`</ph>方法。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>The value of <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is negative and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> in milliseconds, or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 的值为负数，且不等于 <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>（以毫秒为单位），或大于 <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 毫秒。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Join(System.TimeSpan)">
          <source>The caller attempted to join a thread that is in the <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Unstarted" /&gt;</ph> state.</source>
          <target state="translated">调用方尝试加入处于 <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Unstarted" /&gt;</ph> 状态的线程。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.ManagedThreadId">
          <source>Gets a unique identifier for the current managed thread.</source>
          <target state="translated">获取当前托管线程的唯一标识符。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ManagedThreadId">
          <source>An integer that represents a unique identifier for this managed thread.</source>
          <target state="translated">一个整数，表示此托管线程的唯一标识符。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ManagedThreadId">
          <source>A thread's <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt;</ph> property value serves to uniquely identify that thread within its process.</source>
          <target state="translated">线程的<ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt;</ph>属性值用于唯一标识该线程在其进程中的。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ManagedThreadId">
          <source>The value of the <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt;</ph> property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.</source>
          <target state="translated">值<ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt;</ph>属性不发生改变随着时间推移，即使承载公共语言运行时的非托管的代码实现为纤程的线程。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.MemoryBarrier">
          <source>Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to <ph id="ph1">&lt;see cref="M:System.Threading.Thread.MemoryBarrier" /&gt;</ph> execute after memory accesses that follow the call to <ph id="ph2">&lt;see cref="M:System.Threading.Thread.MemoryBarrier" /&gt;</ph>.</source>
          <target state="translated">按如下方式同步内存访问：执行当前线程的处理器在对指令重新排序时，不能采用先执行 <ph id="ph1">&lt;see cref="M:System.Threading.Thread.MemoryBarrier" /&gt;</ph> 调用之后的内存存取，再执行 <ph id="ph2">&lt;see cref="M:System.Threading.Thread.MemoryBarrier" /&gt;</ph> 调用之前的内存存取的方式。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.MemoryBarrier">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.MemoryBarrier%2A&gt;</ph> is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.MemoryBarrier%2A&gt;</ph> 仅在多处理器系统上与弱排序 （例如，使用多个 Intel 的 Itanium 处理器的系统） 的内存要求。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.MemoryBarrier">
          <source>For most purposes, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, or the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier ways to synchronize data.</source>
          <target state="translated">大多数情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，或<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供简单的方法，用于将数据同步。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.Name">
          <source>Gets or sets the name of the thread.</source>
          <target state="translated">获取或设置线程的名称。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Name">
          <source>A string containing the name of the thread, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no name was set.</source>
          <target state="translated">包含线程名称的字符串或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>（如果未设置名称）。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Name">
          <source>This property is write-once.</source>
          <target state="translated">此属性是可写的后。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Name">
          <source>Because the default value of a thread's <ph id="ph1">&lt;xref:System.Threading.Thread.Name%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, you can determine whether a name has already been explicitly assigned to the thread by comparing it with <ph id="ph3">`null`</ph>.</source>
          <target state="translated">由于线程的默认值<ph id="ph1">&lt;xref:System.Threading.Thread.Name%2A&gt;</ph>属性是<ph id="ph2">`null`</ph>，你可以确定是否已被显式分配名称到线程通过比较其与<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Name">
          <source>The string assigned to the <ph id="ph1">&lt;xref:System.Threading.Thread.Name%2A&gt;</ph> property can include any Unicode character.</source>
          <target state="translated">分配给字符串<ph id="ph1">&lt;xref:System.Threading.Thread.Name%2A&gt;</ph>属性可以包含任何 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Name">
          <source>The following example shows how to name a thread.</source>
          <target state="translated">下面的示例演示如何命名一个线程。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.Name">
          <source>A set operation was requested, but the <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property has already been set.</source>
          <target state="translated">已请求集运算，但 <ph id="ph1">&lt;see langword="Name" /&gt;</ph> 属性已设置。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.Priority">
          <source>Gets or sets a value indicating the scheduling priority of a thread.</source>
          <target state="translated">获取或设置指示线程的调度优先级的值。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Priority">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPriority" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadPriority" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Priority">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Threading.ThreadPriority.Normal" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.Threading.ThreadPriority.Normal" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Priority">
          <source>A thread can be assigned any one of the following priority <ph id="ph1">&lt;xref:System.Threading.ThreadPriority&gt;</ph> values:</source>
          <target state="translated">可以为线程分配任一以下优先级<ph id="ph1">&lt;xref:System.Threading.ThreadPriority&gt;</ph>值：</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Priority">
          <source>Operating systems are not required to honor the priority of a thread.</source>
          <target state="translated">操作系统不需要遵循的线程的优先级。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Priority">
          <source>The following example shows the result of changing the priority of a thread.</source>
          <target state="translated">下面的示例演示由于更改线程的优先级。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Priority">
          <source>Three threads are created, the priority of one thread is set to <ph id="ph1">&lt;xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType&gt;</ph>, and the priority of a second is set to <ph id="ph2">&lt;xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">创建三个线程，其中一个线程的优先级设置为<ph id="ph1">&lt;xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType&gt;</ph>，并且第二个的优先级设置为<ph id="ph2">&lt;xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.Priority">
          <source>Each thread increments a variable in a <ph id="ph1">`while`</ph> loop and runs for a set time.</source>
          <target state="translated">每个线程递增中的变量<ph id="ph1">`while`</ph>循环和的设定时间运行。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.Priority">
          <source>The thread has reached a final state, such as <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Aborted" /&gt;</ph>.</source>
          <target state="translated">线程已到达最终状态，例如 <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Aborted" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.Priority">
          <source>The value specified for a set operation is not a valid <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPriority" /&gt;</ph> value.</source>
          <target state="translated">为设置操作指定的值不是有效的 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPriority" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.ResetAbort">
          <source>Cancels an <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph> requested for the current thread.</source>
          <target state="translated">取消当前线程所请求的 <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.ResetAbort">
          <source>This method can only be called by code with the proper permissions.</source>
          <target state="translated">仅可以由具有适当权限的代码调用此方法。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.ResetAbort">
          <source>When a call is made to <ph id="ph1">`Abort`</ph> to terminate a thread, the system throws a <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>.</source>
          <target state="translated">当调用<ph id="ph1">`Abort`</ph>终止线程，系统将引发<ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.ResetAbort">
          <source><ph id="ph1">`ThreadAbortException`</ph> is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless <ph id="ph2">`ResetAbort`</ph> is called.</source>
          <target state="translated"><ph id="ph1">`ThreadAbortException`</ph> 是一个特殊的例外，可由应用程序代码中，捕获，但将被重新引发 catch 块的末尾除非<ph id="ph2">`ResetAbort`</ph>调用。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.ResetAbort">
          <source><ph id="ph1">`ResetAbort`</ph> cancels the request to abort, and prevents the <ph id="ph2">`ThreadAbortException`</ph> from terminating the thread.</source>
          <target state="translated"><ph id="ph1">`ResetAbort`</ph> 取消请求中止，并防止<ph id="ph2">`ThreadAbortException`</ph>从终止此线程。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.ResetAbort">
          <source>See <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> for an example that demonstrates calling the <ph id="ph2">`ResetAbort`</ph> method.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>有关的示例，演示如何调用<ph id="ph2">`ResetAbort`</ph>方法。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.ResetAbort">
          <source>.NET Core only: This member is not supported.</source>
          <target state="translated">仅限 .NET Core：不支持此成员。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.ResetAbort">
          <source><ph id="ph1">&lt;see langword="Abort" /&gt;</ph> was not invoked on the current thread.</source>
          <target state="translated">未对当前线程调用 <ph id="ph1">&lt;see langword="Abort" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.ResetAbort">
          <source>The caller does not have the required security permission for the current thread.</source>
          <target state="translated">调用方没有当前线程要求的安全权限。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.ResetAbort">
          <source>for advanced operations on threads.</source>
          <target state="translated">有关线程的高级操作。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.ResetAbort">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Resume">
          <source>Resumes a thread that has been suspended.</source>
          <target state="translated">继续已挂起的线程。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Resume">
          <source>Do not use the <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph> methods to synchronize the activities of threads.</source>
          <target state="translated">不要使用<ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph>方法来同步线程活动。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Resume">
          <source>You have no way of knowing what code a thread is executing when you suspend it.</source>
          <target state="translated">具有无法知道哪些代码的线程正在执行挂起时。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Resume">
          <source>If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> might be blocked.</source>
          <target state="translated">如果您挂起线程，它在安全权限评估期间保持锁定中的其他线程<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>可能被阻止。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Resume">
          <source>If you suspend a thread while it is executing a class constructor, other threads in the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> that attempt to use that class are blocked.</source>
          <target state="translated">如果您挂起线程执行类构造函数时中的其他线程<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>中尝试使用类被阻止。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Resume">
          <source>Deadlocks can occur very easily.</source>
          <target state="translated">很容易发生死锁。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Resume">
          <source>.NET Core only: This member is not supported.</source>
          <target state="translated">仅限 .NET Core：不支持此成员。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Resume">
          <source>The thread has not been started, is dead, or is not in the suspended state.</source>
          <target state="translated">该线程尚未启动、 已死或未处于挂起状态。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Resume">
          <source>The caller does not have the appropriate <ph id="ph1">&lt;see cref="T:System.Security.Permissions.SecurityPermission" /&gt;</ph>.</source>
          <target state="translated">调用方没有适当的 <ph id="ph1">&lt;see cref="T:System.Security.Permissions.SecurityPermission" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Resume">
          <source>for advanced operations on threads.</source>
          <target state="translated">有关线程的高级操作。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Resume">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>The new apartment state.</source>
          <target state="translated">新的单元状态。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>Sets the apartment state of a thread before it is started.</source>
          <target state="translated">在线程启动前设置其单元状态。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>New threads are initialized as <ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph> if their apartment state has not been set before they are started.</source>
          <target state="translated">新线程将初始化为<ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph>如果它们启动之前尚未设置其单元状态。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>Apartment state must be set before a thread is started.</source>
          <target state="translated">启动线程之前，必须设置单元状态。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>The main application thread is initialized to <ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph> by default.</source>
          <target state="translated">主应用程序线程被初始化为<ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph>默认情况下。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>The only way to set the apartment state of the main application thread to <ph id="ph1">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph> is to apply the <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph> attribute to the entry point method.</source>
          <target state="translated">设置到的主应用程序线程的单元状态的唯一办法<ph id="ph1">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph>，将应用<ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>属性设为入口点方法。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> method, along with the <ph id="ph2">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> method, replaces the <ph id="ph4">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>方法，以及<ph id="ph2">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法，将替换<ph id="ph4">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> methods.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>The code example creates a thread.</source>
          <target state="translated">代码示例创建一个线程。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>Before the thread is started, <ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph> displays the initial <ph id="ph2">&lt;xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType&gt;</ph> state and <ph id="ph3">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> changes the state to <ph id="ph4">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在线程启动之前，<ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>显示初始<ph id="ph2">&lt;xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType&gt;</ph>状态和<ph id="ph3">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>将状态更改为<ph id="ph4">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> method then returns <ph id="ph2">`false`</ph> when attempting to change the state to <ph id="ph3">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph> because the apartment state is already set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法然后返回<ph id="ph2">`false`</ph>时尝试的状态更改为<ph id="ph3">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph>因为已经设置了单元状态。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>If the same operation had been attempted with <ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> would have been thrown.</source>
          <target state="translated">如果相同的操作已尝试使用<ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>，<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>将引发。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>After the thread is started, the <ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> method is used again.</source>
          <target state="translated">在线程启动后，<ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法会再次使用。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>This time it throws <ph id="ph1">&lt;xref:System.Threading.ThreadStateException&gt;</ph> because the thread has already been started.</source>
          <target state="translated">这次将引发<ph id="ph1">&lt;xref:System.Threading.ThreadStateException&gt;</ph>因为线程已启动。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>.NET Core only: This member is not supported on the macOS and Linux platforms.</source>
          <target state="translated">仅限 .NET Core：macOS 和 Linux 平台上不支持此成员。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source><ph id="ph1">&lt;paramref name="state" /&gt;</ph> is not a valid apartment state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="state" /&gt;</ph> 不是有效的单元状态。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>The thread has already been started.</source>
          <target state="translated">线程已启动。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
          <source>The apartment state has already been initialized.</source>
          <target state="translated">已初始化单元状态。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CompressedStack" /&gt;</ph> object to be applied to the current thread.</source>
          <target state="translated">将被应用到当前线程的 <ph id="ph1">&lt;see cref="T:System.Threading.CompressedStack" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
          <source>Applies a captured <ph id="ph1">&lt;see cref="T:System.Threading.CompressedStack" /&gt;</ph> to the current thread.</source>
          <target state="translated">将捕获的 <ph id="ph1">&lt;see cref="T:System.Threading.CompressedStack" /&gt;</ph> 应用到当前线程。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
          <source>This method is no longer supported.</source>
          <target state="translated">不再支持此方法。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
          <source>In all cases.</source>
          <target state="translated">在所有情况下。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.LocalDataStoreSlot" /&gt;</ph> in which to set the value.</source>
          <target state="translated">在其中设置值的 <ph id="ph1">&lt;see cref="T:System.LocalDataStoreSlot" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>The value to be set.</source>
          <target state="translated">要设置的值。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>Sets the data in the specified slot on the currently running thread, for that thread's current domain.</source>
          <target state="translated">在当前正在运行的线程上为此线程的当前域在指定槽中设置数据。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>For better performance, use fields marked with the <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> attribute instead.</source>
          <target state="translated">为了提高性能，请改用用 <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> 属性标记的字段。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute) and data slots.</source>
          <target state="translated">.NET Framework 提供了有关使用线程本地存储区 (TLS) 的两种机制： 线程相关的静态字段 (即，使用标记的字段<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性) 和数据槽。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</source>
          <target state="translated">线程相关的静态字段提供更好的性能比数据槽，编译时类型检查。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>For more information about using TLS, see <bpt id="p1">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>.</source>
          <target state="translated">有关使用 TLS 的详细信息，请参阅<bpt id="p1">[</bpt>线程本地存储区： 线程相关的静态字段和数据槽<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>Threads use a local store memory mechanism to store thread-specific data.</source>
          <target state="translated">线程使用本地存储内存机制来存储线程特定的数据。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>The common language runtime allocates a multi-slot data store array to each process when it is created.</source>
          <target state="translated">创建时，公共语言运行时分配给每个进程的多插槽数据存储数组。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> object has been reclaimed by garbage collection.</source>
          <target state="translated">线程可以分配数据存储区中的数据槽、 存储和检索数据的槽中值和释放线程过程结束之后的槽以重用和<ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph>垃圾回收功能回收对象。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>Data slots are unique per thread.</source>
          <target state="translated">数据槽是每个线程的唯一的。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>No other thread (not even a child thread) can get that data.</source>
          <target state="translated">没有其他线程 （甚至不是子线程） 可以获取该数据。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.SetData%2A&gt;</ph> is a <ph id="ph2">`Shared`</ph> method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.SetData%2A&gt;</ph> 是<ph id="ph2">`Shared`</ph>始终将应用于当前正在执行的线程，即使你在调用它使用另一个线程是指变量的方法。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>To avoid confusion, use the class name when calling <ph id="ph1">`Shared`</ph> methods: <ph id="ph2">`Thread.SetData(testSlot, "test data")`</ph>.</source>
          <target state="translated">为了避免混淆，使用调用时<ph id="ph1">`Shared`</ph>方法： <ph id="ph2">`Thread.SetData(testSlot, "test data")`</ph>。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>The first example shows how to use a field that is marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to hold thread-specific information.</source>
          <target state="translated">第一个示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>特性来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>The second example shows how to use a data slot to do the same thing.</source>
          <target state="translated">第二个示例演示如何使用数据槽执行相同的操作。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source><bpt id="p1">**</bpt>First Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第一个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>The following example shows how to use a field that is marked with <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> to hold thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用字段将标有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>来保存线程特定的信息。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>This technique provides better performance than the technique that is shown in the second example.</source>
          <target state="translated">此方法提供更好的性能比第二个示例所示的技术。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source><bpt id="p1">**</bpt>Second Example<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>第二个示例<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
          <source>The following example demonstrates how to use a named data slot to store thread-specific information.</source>
          <target state="translated">下面的示例演示如何使用命名的数据槽以存储线程特定的信息。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>Suspends the current thread for the specified amount of time.</source>
          <target state="translated">将当前线程挂起指定的时间。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>The number of milliseconds for which the thread is suspended.</source>
          <target state="translated">挂起线程的毫秒数。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>If the value of the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeout<ept id="p1">&lt;/c&gt;</ept> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeout<ept id="p1">&lt;/c&gt;</ept> 参数的值为零，则该线程会将其时间片的剩余部分让给任何已经准备好运行的、具有同等优先级的线程。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</source>
          <target state="translated">如果没有其他已经准备好运行的、具有同等优先级的线程，则不会挂起当前线程的执行。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>Suspends the current thread for the specified number of milliseconds.</source>
          <target state="translated">将当前线程挂起指定的毫秒数。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>The thread will not be scheduled for execution by the operating system for the amount of time specified.</source>
          <target state="translated">该线程将不会计划执行由操作系统指定的时间。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>This method changes the state of the thread to include <ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin&gt;</ph>.</source>
          <target state="translated">此方法要包括的线程的状态更改<ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>You can specify <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> for the <ph id="ph2">`millisecondsTimeout`</ph> parameter to suspend the thread indefinitely.</source>
          <target state="translated">你可以指定<ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>为<ph id="ph2">`millisecondsTimeout`</ph>无限期挂起线程的参数。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>However, we recommend that you use other <ph id="ph1">&lt;xref:System.Threading?displayProperty=nameWithType&gt;</ph> classes such as <ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, or <ph id="ph5">&lt;xref:System.Threading.Semaphore&gt;</ph> instead to sychronize threads or manage resources.</source>
          <target state="translated">但是，我们建议你使用其他<ph id="ph1">&lt;xref:System.Threading?displayProperty=nameWithType&gt;</ph>类，如<ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph>， <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>， <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>，或<ph id="ph5">&lt;xref:System.Threading.Semaphore&gt;</ph>改为小心地同步线程或管理资源。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>The system clock ticks at a specific rate called the clock resolution.</source>
          <target state="translated">以特定速度系统时钟计时周期调用时钟分辨率。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks.</source>
          <target state="translated">实际超时可能不完全指定的超时，因为指定的超时将调整与时钟计时周期保持一致。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>For more information on clock resolution and the waiting time, see the <bpt id="p1">[</bpt>Sleep function<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx)</ept> topic.</source>
          <target state="translated">时钟分辨率和等待时间的详细信息，请参阅<bpt id="p1">[</bpt>睡眠函数<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx)</ept>主题。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>This method calls the <bpt id="p1">[</bpt>Sleep function<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx)</ept> from the Windows system APIs.</source>
          <target state="translated">此方法调用<bpt id="p1">[</bpt>睡眠函数<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx)</ept>从 Windows 系统 Api。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>This method does not perform standard COM and SendMessage pumping.</source>
          <target state="translated">此方法不执行标准的 COM 和 sendmessage 消息泵处理。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>If you need to sleep on a thread that has <ph id="ph1">&lt;xref:System.STAThreadAttribute&gt;</ph>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> method that specifies a timeout interval.</source>
          <target state="translated">如果你需要具有的线程上休眠<ph id="ph1">&lt;xref:System.STAThreadAttribute&gt;</ph>，但你想要执行标准的 COM 和 sendmessage 消息泵处理，请考虑使用的重载之一<ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>方法，它指定超时间隔。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph> method to block the application's main thread.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph>方法进行阻止，应用程序的主线程。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.Int32)">
          <source>The time-out value is negative and is not equal to <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">超时值为负且不等于 <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>The amount of time for which the thread is suspended.</source>
          <target state="translated">挂起线程的时间量。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>If the value of the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeout<ept id="p1">&lt;/c&gt;</ept> argument is <ph id="ph1">&lt;see cref="F:System.TimeSpan.Zero" /&gt;</ph>, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeout<ept id="p1">&lt;/c&gt;</ept> 参数的值为 <ph id="ph1">&lt;see cref="F:System.TimeSpan.Zero" /&gt;</ph>，则该线程会将其时间片的剩余部分让给任何已经准备好运行的、具有同等优先级的线程。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</source>
          <target state="translated">如果没有其他已经准备好运行的、具有同等优先级的线程，则不会挂起当前线程的执行。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>Suspends the current thread for the specified amount of time.</source>
          <target state="translated">将当前线程挂起指定的时间。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>The thread will not be scheduled for execution by the operating system for the amount of time specified.</source>
          <target state="translated">该线程将不会计划执行由操作系统指定的时间。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>This method changes the state of the thread to include <ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin&gt;</ph>.</source>
          <target state="translated">此方法要包括的线程的状态更改<ph id="ph1">&lt;xref:System.Threading.ThreadState.WaitSleepJoin&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>You can specify <ph id="ph1">&lt;xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType&gt;</ph> for the <ph id="ph2">`timeout`</ph> parameter to suspend the thread indefinitely.</source>
          <target state="translated">你可以指定<ph id="ph1">&lt;xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType&gt;</ph>为<ph id="ph2">`timeout`</ph>无限期挂起线程的参数。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>However, we recommend that you use other <ph id="ph1">&lt;xref:System.Threading?displayProperty=nameWithType&gt;</ph> classes such as <ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, or <ph id="ph5">&lt;xref:System.Threading.Semaphore&gt;</ph> instead to sychronize threads or manage resources.</source>
          <target state="translated">但是，我们建议你使用其他<ph id="ph1">&lt;xref:System.Threading?displayProperty=nameWithType&gt;</ph>类，如<ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph>， <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>， <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>，或<ph id="ph5">&lt;xref:System.Threading.Semaphore&gt;</ph>改为小心地同步线程或管理资源。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>This overload of <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph> uses the total number of whole milliseconds in <ph id="ph2">`timeout`</ph>.</source>
          <target state="translated">此重载<ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph>使用中的整毫秒总数<ph id="ph2">`timeout`</ph>。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>Fractional milliseconds are discarded.</source>
          <target state="translated">毫秒的小数部分将被丢弃。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>This method does not perform standard COM and SendMessage pumping.</source>
          <target state="translated">此方法不执行标准的 COM 和 sendmessage 消息泵处理。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>If you need to sleep on a thread that has <ph id="ph1">&lt;xref:System.STAThreadAttribute&gt;</ph>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> method that specifies a timeout interval.</source>
          <target state="translated">如果你需要具有的线程上休眠<ph id="ph1">&lt;xref:System.STAThreadAttribute&gt;</ph>，但你想要执行标准的 COM 和 sendmessage 消息泵处理，请考虑使用的重载之一<ph id="ph2">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>方法，它指定超时间隔。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%28System.TimeSpan%29&gt;</ph> method overload to block the application's main thread five times, for two seconds each time.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%28System.TimeSpan%29&gt;</ph>方法重载将阻止应用程序的主线程五次，2 秒钟，每次。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Sleep(System.TimeSpan)">
          <source>The value of <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is negative and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> in milliseconds, or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 的值为负数，且不等于 <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>（以毫秒为单位），或大于 <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 毫秒。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>A 32-bit signed integer that defines how long a thread is to wait.</source>
          <target state="translated">定义线程等待的时间长短的 32 位有符号整数。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>Causes a thread to wait the number of times defined by the <ph id="ph1">&lt;paramref name="iterations" /&gt;</ph> parameter.</source>
          <target state="translated">导致线程等待由 <ph id="ph1">&lt;paramref name="iterations" /&gt;</ph> 参数定义的时间量。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> method is useful for implementing locks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph>方法可用于实现锁。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>Classes in the .NET Framework, such as <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>, use this method internally.</source>
          <target state="translated">类在.NET Framework 中，如<ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>，内部使用此方法。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> essentially puts the processor into a very tight loop, with the loop count specified by the <ph id="ph2">`iterations`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> 实质上是将处理器放入非常紧凑循环中，使用指定的循环计数<ph id="ph2">`iterations`</ph>参数。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>The duration of the wait therefore depends on the speed of the processor.</source>
          <target state="translated">因此，等待的持续时间取决于处理器的速度。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>Contrast this with the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph> method.</source>
          <target state="translated">与此对比<ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>A thread that calls <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph> yields the rest of its current slice of processor time, even if the specified interval is zero.</source>
          <target state="translated">调用线程<ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph>产生的处理器时间，其当前切片的其余部分，即使指定的时间间隔为零。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>Specifying a non-zero interval for <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph> removes the thread from consideration by the thread scheduler until the time interval has elapsed.</source>
          <target state="translated">指定一个非零的间隔值<ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph>从线程计划程序会不考虑中移除线程，直到经过的时间间隔。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> is not generally useful for ordinary applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> 不是普通的应用程序通常有用的。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> or a statement that wraps <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> (<ph id="ph3">`lock`</ph> in C# or <ph id="ph4">`SyncLock`</ph> in Visual Basic).</source>
          <target state="translated">在大多数情况下，应使用.NET Framework 中; 提供的同步类例如，调用<ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph>或包装语句<ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph>(<ph id="ph3">`lock`</ph>在 C# 或<ph id="ph4">`SyncLock`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the <ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> method in your loop.</source>
          <target state="translated">在的罕见情况下，它将非常有利，若要避免的上下文切换，例如，当已知状态更改即将发生时，请调用<ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph>在循环中的方法。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>The code <ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> executes is designed to prevent problems that can occur on computers with multiple processors.</source>
          <target state="translated">代码<ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph>执行旨在防止具有多个处理器的计算机可能会发生的问题。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.SpinWait(System.Int32)">
          <source>For example, on computers with multiple Intel processors employing Hyper-Threading technology, <ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> prevents processor starvation in certain situations.</source>
          <target state="translated">例如，在具有多个使用超线程技术的 Intel 处理器的计算机上<ph id="ph1">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph>可防止在某些情况下的处理器资源不足。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>Causes a thread to be scheduled for execution.</source>
          <target state="translated">使线程得以按计划执行。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Start">
          <source>Causes the operating system to change the state of the current instance to <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Running" /&gt;</ph>.</source>
          <target state="translated">导致操作系统将当前实例的状态更改为 <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Running" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start">
          <source>Once a thread is in the <ph id="ph1">&lt;xref:System.Threading.ThreadState.Running?displayProperty=nameWithType&gt;</ph> state, the operating system can schedule it for execution.</source>
          <target state="translated">一旦线程处于<ph id="ph1">&lt;xref:System.Threading.ThreadState.Running?displayProperty=nameWithType&gt;</ph>状态时，操作系统可以计划它的执行。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start">
          <source>The thread begins executing at the first line of the method represented by the <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate supplied to the thread constructor.</source>
          <target state="translated">线程开始执行时所表示的方法的第一行执行<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托提供给线程构造函数。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start">
          <source>Note that the call to <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> does not block the calling thread.</source>
          <target state="translated">请注意，调用<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>不会阻止调用线程。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start">
          <source>If this overload is used with a thread created using a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate, <ph id="ph2">`null`</ph> is passed to the method executed by the thread.</source>
          <target state="translated">如果创建使用的线程，则使用此重载<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托，<ph id="ph2">`null`</ph>传递给由线程执行的方法。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start">
          <source>Once the thread terminates, it cannot be restarted with another call to <ph id="ph1">`Start`</ph>.</source>
          <target state="translated">一旦线程终止，它无法重启通过再次调用<ph id="ph1">`Start`</ph>。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start">
          <source>The following example creates and starts a thread.</source>
          <target state="translated">下面的示例创建并启动线程。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Start">
          <source>The thread has already been started.</source>
          <target state="translated">线程已启动。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Start">
          <source>There is not enough memory available to start this thread.</source>
          <target state="translated">内存不足，无法启动此线程。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>An object that contains data to be used by the method the thread executes.</source>
          <target state="translated">一个对象，包含线程执行的方法要使用的数据。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>Causes the operating system to change the state of the current instance to <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Running" /&gt;</ph>, and optionally supplies an object containing data to be used by the method the thread executes.</source>
          <target state="translated">导致操作系统将当前实例的状态更改为 <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.Running" /&gt;</ph>，并选择提供包含线程执行的方法要使用的数据的对象。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>Once a thread is in the <ph id="ph1">&lt;xref:System.Threading.ThreadState.Running?displayProperty=nameWithType&gt;</ph> state, the operating system can schedule it for execution.</source>
          <target state="translated">一旦线程处于<ph id="ph1">&lt;xref:System.Threading.ThreadState.Running?displayProperty=nameWithType&gt;</ph>状态时，操作系统可以计划它的执行。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>The thread begins executing at the first line of the method represented by the <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate supplied to the thread constructor.</source>
          <target state="translated">线程开始执行时所表示的方法的第一行执行<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托提供给线程构造函数。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>Note that the call to <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> does not block the calling thread.</source>
          <target state="translated">请注意，调用<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>不会阻止调用线程。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>Once the thread terminates, it cannot be restarted with another call to <ph id="ph1">`Start`</ph>.</source>
          <target state="translated">一旦线程终止，它无法重启通过再次调用<ph id="ph1">`Start`</ph>。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>This overload and the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload.</source>
          <target state="translated">此重载和<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托进行轻松地将数据传递给一个线程的过程，但技术不是类型安全，因为可以将任何对象传递给此重载。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</source>
          <target state="translated">若要将数据传递给一个线程的过程更可靠方法是放入一个辅助对象的线程的过程和数据字段。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Threads and Passing Data at Start Time<ept id="p1">](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>创建线程并在启动时传递数据<ept id="p1">](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)</ept>。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate with a static method and an instance method.</source>
          <target state="translated">下面的示例创建<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托，它具有一个静态方法和实例方法。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>The thread has already been started.</source>
          <target state="translated">线程已启动。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>There is not enough memory available to start this thread.</source>
          <target state="translated">内存不足，无法启动此线程。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Start(System.Object)">
          <source>This thread was created using a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadStart" /&gt;</ph> delegate instead of a <ph id="ph2">&lt;see cref="T:System.Threading.ParameterizedThreadStart" /&gt;</ph> delegate.</source>
          <target state="translated">该线程是使用 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadStart" /&gt;</ph> 委托而不是 <ph id="ph2">&lt;see cref="T:System.Threading.ParameterizedThreadStart" /&gt;</ph> 委托创建的。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Suspend">
          <source>Either suspends the thread, or if the thread is already suspended, has no effect.</source>
          <target state="translated">挂起线程，或者如果线程已挂起，则不起作用。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Suspend">
          <source>If the thread is already suspended, this method has no effect.</source>
          <target state="translated">如果线程已挂起，则此方法无效。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Suspend">
          <source>Do not use the <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph> methods to synchronize the activities of threads.</source>
          <target state="translated">不要使用<ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph>方法来同步线程活动。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Suspend">
          <source>You have no way of knowing what code a thread is executing when you suspend it.</source>
          <target state="translated">具有无法知道哪些代码的线程正在执行挂起时。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Suspend">
          <source>If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> might be blocked.</source>
          <target state="translated">如果您挂起线程，它在安全权限评估期间保持锁定中的其他线程<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>可能被阻止。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Suspend">
          <source>If you suspend a thread while it is executing a class constructor, other threads in the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> that attempt to use that class are blocked.</source>
          <target state="translated">如果您挂起线程执行类构造函数时中的其他线程<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>中尝试使用类被阻止。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Suspend">
          <source>Deadlocks can occur very easily.</source>
          <target state="translated">很容易发生死锁。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Suspend">
          <source>.NET Core only: This member is not supported.</source>
          <target state="translated">仅限 .NET Core：不支持此成员。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Suspend">
          <source>The thread has not been started or is dead.</source>
          <target state="translated">线程尚未启动或已终止。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Suspend">
          <source>The caller does not have the appropriate <ph id="ph1">&lt;see cref="T:System.Security.Permissions.SecurityPermission" /&gt;</ph>.</source>
          <target state="translated">调用方没有适当的 <ph id="ph1">&lt;see cref="T:System.Security.Permissions.SecurityPermission" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Suspend">
          <source>for advanced operations on threads.</source>
          <target state="translated">有关线程的高级操作。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Suspend">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要映射的名称的传入数组。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要映射的名称的计数。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">要在其中解释名称的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">调用方分配的数组，用于接收与名称对应的 ID。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">将一组名称映射为对应的一组调度标识符。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要返回的类型信息。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">类型信息的区域设置标识符。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收一个指针，指向请求的类型信息对象。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向一个位置，该位置接收对象提供的类型信息接口的数量。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">检索对象提供的类型信息接口的数量（0 或 1）。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">标识成员。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">要在其中解释参数的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述调用的上下文的标志。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向要存储结果的位置的指针。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">指向一个包含异常信息的结构的指针。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一个出错自变量的索引。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供对某一对象公开的属性和方法的访问。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::Invoke`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="P:System.Threading.Thread.ThreadState">
          <source>Gets a value containing the states of the current thread.</source>
          <target state="translated">获取一个值，该值包含当前线程的状态。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ThreadState">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadState" /&gt;</ph> values indicating the state of the current thread.</source>
          <target state="translated">其中一个表示当前线程的状态的 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadState" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ThreadState">
          <source>The initial value is <ph id="ph1">&lt;see langword="Unstarted" /&gt;</ph>.</source>
          <target state="translated">初始值为 <ph id="ph1">&lt;see langword="Unstarted" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ThreadState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.ThreadState%2A&gt;</ph> property provides more specific information than the <ph id="ph2">&lt;xref:System.Threading.Thread.IsAlive%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.ThreadState%2A&gt;</ph>属性提供的更具体信息多于<ph id="ph2">&lt;xref:System.Threading.Thread.IsAlive%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ThreadState">
          <source>Thread state is only of interest in debugging scenarios.</source>
          <target state="translated">线程状态才会涉及调试方案中。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ThreadState">
          <source>Your code should never use thread state to synchronize the activities of threads.</source>
          <target state="translated">因此，始终不应在代码中使用线程状态来同步线程活动。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Thread.ThreadState">
          <source>The following code example demonstrates accessing the <ph id="ph1">`ThreadState`</ph> of a thread.</source>
          <target state="translated">下面的代码示例演示如何访问<ph id="ph1">`ThreadState`</ph>的线程。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>The new apartment state.</source>
          <target state="translated">新的单元状态。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>Sets the apartment state of a thread before it is started.</source>
          <target state="translated">在线程启动前设置其单元状态。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the apartment state is set; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果设置了单元状态，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>New threads are initialized as <ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph> if their apartment state has not been set before they are started.</source>
          <target state="translated">新线程将初始化为<ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph>如果它们启动之前尚未设置其单元状态。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>Apartment state must be set before a thread is started.</source>
          <target state="translated">启动线程之前，必须设置单元状态。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>The main application thread is initialized to <ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph> by default.</source>
          <target state="translated">主应用程序线程被初始化为<ph id="ph1">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph>默认情况下。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>The only way to set the apartment state of the main application thread to <ph id="ph1">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph> is to apply the <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph> attribute to the entry point method.</source>
          <target state="translated">设置到的主应用程序线程的单元状态的唯一办法<ph id="ph1">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph>，将应用<ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>属性设为入口点方法。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> method, along with the <ph id="ph2">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> method, replaces the <ph id="ph4">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法，以及<ph id="ph2">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>方法，将替换<ph id="ph4">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> methods.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>The code example creates a thread.</source>
          <target state="translated">代码示例创建一个线程。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>Before the thread is started, <ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph> displays the initial <ph id="ph2">&lt;xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType&gt;</ph> state and <ph id="ph3">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> changes the state to <ph id="ph4">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在线程启动之前，<ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>显示初始<ph id="ph2">&lt;xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType&gt;</ph>状态和<ph id="ph3">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>将状态更改为<ph id="ph4">&lt;xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> method then returns <ph id="ph2">`false`</ph> when attempting to change the state to <ph id="ph3">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph> because the apartment state is already set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法然后返回<ph id="ph2">`false`</ph>时尝试的状态更改为<ph id="ph3">&lt;xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType&gt;</ph>因为已经设置了单元状态。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>If the same operation had been attempted with <ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> would have been thrown.</source>
          <target state="translated">如果相同的操作已尝试使用<ph id="ph1">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>，<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>将引发。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>After the thread is started, the <ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> method is used again.</source>
          <target state="translated">在线程启动后，<ph id="ph1">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph>方法会再次使用。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>This time it throws <ph id="ph1">&lt;xref:System.Threading.ThreadStateException&gt;</ph> because the thread has already been started.</source>
          <target state="translated">这次将引发<ph id="ph1">&lt;xref:System.Threading.ThreadStateException&gt;</ph>因为线程已启动。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source><ph id="ph1">&lt;paramref name="state" /&gt;</ph> is not a valid apartment state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="state" /&gt;</ph> 不是有效的单元状态。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
          <source>The thread has already been started.</source>
          <target state="translated">线程已启动。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Byte@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Double@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int16@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int32@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Int64@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Object@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.SByte@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.Single@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>The field to be read.</source>
          <target state="translated">要读取的字段。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>Reads the value of a field.</source>
          <target state="translated">读取字段值。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>The latest value written to the field by any processor.</source>
          <target state="translated">由任何处理器写入字段的最新值。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>获得由任何处理器写入的内存位置的最新值。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" uid="T:System.Threading.Thread">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>The field to which the value is to be written.</source>
          <target state="translated">将向其中写入值的字段。</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>The value to be written.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</source>
          <target state="translated">立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> are for special cases of synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>进行同步的特殊情况。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier alternatives.</source>
          <target state="translated">在正常情况下，C#<ph id="ph1">`lock`</ph>语句，Visual Basic<ph id="ph2">`SyncLock`</ph>语句，和<ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>类提供更轻松的替代项。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>On a multiprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">在多处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>可确保写入内存位置的值是立即可见的所有处理器。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>This might require flushing processor caches.</source>
          <target state="translated">这可能需要刷新处理器缓存。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>Even on a uniprocessor system, <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</source>
          <target state="translated">即使在单处理器系统中，<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>确保值为读取或写入到内存，并不缓存 （例如，在处理器寄存器）。</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</source>
          <target state="translated">因此，你可以使用它们可以由另一个线程或硬件更新的字段对访问进行同步。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>Calling this method affects only a single memory access.</source>
          <target state="translated">调用此方法只影响单个内存访问。</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">若要提供字段的有效同步，对字段的所有访问必须都使用<ph id="ph1">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that all access to that field uses <ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>.</source>
          <target state="translated">在 C# 中，使用<ph id="ph1">`volatile`</ph>字段上的修饰符可保证对该字段的所有访问都使用<ph id="ph2">&lt;xref:System.Threading.Thread.VolatileRead%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Yield">
          <source>Causes the calling thread to yield execution to another thread that is ready to run on the current processor.</source>
          <target state="translated">导致调用线程执行准备好在当前处理器上运行的另一个线程。</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Yield">
          <source>The operating system selects the thread to yield to.</source>
          <target state="translated">由操作系统选择要执行的线程。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" uid="M:System.Threading.Thread.Yield">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operating system switched execution to another thread; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作系统转而执行另一个线程，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Yield">
          <source>If this method succeeds, the rest of the thread's current time slice is yielded.</source>
          <target state="translated">如果此方法成功，生成了线程的当前时间片的其余部分。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Yield">
          <source>The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.</source>
          <target state="translated">操作系统调度调用线程的另一个时间段，根据其优先级和可用于运行其他线程的状态。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Yield">
          <source>Yielding is limited to the processor that is executing the calling thread.</source>
          <target state="translated">生成操作仅限于执行调用线程的处理器。</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Yield">
          <source>The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority.</source>
          <target state="translated">操作系统将不执行切换到另一个处理器，即使该处理器处于空闲状态或正在运行较低优先级的线程。</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Yield">
          <source>If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果没有其他线程准备好在当前处理器上执行，操作系统不会生成执行，并且此方法返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Yield">
          <source>This method is equivalent to using platform invoke to call the native Win32 <ph id="ph1">`SwitchToThread`</ph> function.</source>
          <target state="translated">此方法相当于使用平台调用来调用本机 Win32<ph id="ph1">`SwitchToThread`</ph>函数。</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Thread.Yield">
          <source>You should call the <ph id="ph1">&lt;xref:System.Threading.Thread.Yield%2A&gt;</ph> method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.</source>
          <target state="translated">应调用<ph id="ph1">&lt;xref:System.Threading.Thread.Yield%2A&gt;</ph>方法而不是使用平台调用，因为平台调用会跳过任何自定义的线程处理行为的主机已请求。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>