<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7e662ed5dda251c583c6d82a839ce57c9d160f65" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49131103" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="71eb4-101">封装等待对共享资源的独占访问的操作系统特定的对象。</span>
      <span class="sxs-lookup">
        <span data-stu-id="71eb4-101">Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-102"><xref:System.Threading.WaitHandle>类封装本机操作系统同步句柄，用于表示在运行时允许多个等待操作的所有同步对象。</span><span class="sxs-lookup"><span data-stu-id="71eb4-102">The <xref:System.Threading.WaitHandle> class encapsulates a native operating system synchronization handle and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="71eb4-103">与其他同步对象的等待句柄的比较，请参阅[同步基元概述](~/docs/standard/threading/overview-of-synchronization-primitives.md)。</span><span class="sxs-lookup"><span data-stu-id="71eb4-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="71eb4-104"><xref:System.Threading.WaitHandle>类本身是抽象的。</span><span class="sxs-lookup"><span data-stu-id="71eb4-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="71eb4-105">类派生自<xref:System.Threading.WaitHandle>定义了一个信号机制，以指示获取或释放访问共享资源，但它们使用继承<xref:System.Threading.WaitHandle>方法，若要在等待访问共享资源。</span><span class="sxs-lookup"><span data-stu-id="71eb4-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="71eb4-106">类派生自<xref:System.Threading.WaitHandle>包括：</span><span class="sxs-lookup"><span data-stu-id="71eb4-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="71eb4-107"><xref:System.Threading.Mutex> 类。</span><span class="sxs-lookup"><span data-stu-id="71eb4-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="71eb4-108">请参阅[Mutex](~/docs/standard/threading/mutexes.md)。</span><span class="sxs-lookup"><span data-stu-id="71eb4-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="71eb4-109"><xref:System.Threading.EventWaitHandle>类和其派生的类，<xref:System.Threading.AutoResetEvent>和<xref:System.Threading.ManualResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span> <span data-ttu-id="71eb4-110">请参阅 [EventWaitHandle、AutoResetEvent、CountdownEvent、ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)。</span><span class="sxs-lookup"><span data-stu-id="71eb4-110">See [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span></span>  
  
-   <span data-ttu-id="71eb4-111"><xref:System.Threading.Semaphore> 类。</span><span class="sxs-lookup"><span data-stu-id="71eb4-111">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="71eb4-112">请参阅[Semaphore 和 SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md)。</span><span class="sxs-lookup"><span data-stu-id="71eb4-112">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="71eb4-113">线程可以通过将阻止各个等待句柄上调用实例方法<xref:System.Threading.WaitHandle.WaitOne%2A>，由派生的类继承<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-113">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="71eb4-114">派生的类<xref:System.Threading.WaitHandle>的区别在于其线程关联。</span><span class="sxs-lookup"><span data-stu-id="71eb4-114">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="71eb4-115">事件等待句柄 (<xref:System.Threading.EventWaitHandle>， <xref:System.Threading.AutoResetEvent>，和<xref:System.Threading.ManualResetEvent>) 和信号量不具有线程关联; 任何线程都可以发送事件等待句柄或信号量。</span><span class="sxs-lookup"><span data-stu-id="71eb4-115">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="71eb4-116">互斥锁，但是，具有线程关联;拥有 mutex 的线程必须释放它，并且如果某个线程调用引发异常<xref:System.Threading.Mutex.ReleaseMutex%2A>上不拥有互斥体的方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-116">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="71eb4-117">因为<xref:System.Threading.WaitHandle>类派生自<xref:System.MarshalByRefObject>，这些类可用于跨应用程序域边界同步线程的活动。</span><span class="sxs-lookup"><span data-stu-id="71eb4-117">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="71eb4-118">及其派生类，除了<xref:System.Threading.WaitHandle>类包含静态方法，直到一个阻塞线程的数量，或者更多的同步对象收到信号。</span><span class="sxs-lookup"><span data-stu-id="71eb4-118">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal.</span></span> <span data-ttu-id="71eb4-119">这些方法包括：</span><span class="sxs-lookup"><span data-stu-id="71eb4-119">These include:</span></span>  
  
-   <span data-ttu-id="71eb4-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>它允许线程发出信号一个等待句柄并立即等待另一个。</span><span class="sxs-lookup"><span data-stu-id="71eb4-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="71eb4-121"><xref:System.Threading.WaitHandle.WaitAll%2A>它允许一个线程等待，直到所有等待句柄数组中的都接收信号。</span><span class="sxs-lookup"><span data-stu-id="71eb4-121"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="71eb4-122"><xref:System.Threading.WaitHandle.WaitAny%2A>它允许一个线程等待，直到任一一组指定的等待句柄发送信号。</span><span class="sxs-lookup"><span data-stu-id="71eb4-122"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled .</span></span>  
  
 <span data-ttu-id="71eb4-123">这些方法的重载提供超时间隔后，将放弃等待，并输入允许使用同步上下文的其他线程在等待之前退出同步上下文的机会。</span><span class="sxs-lookup"><span data-stu-id="71eb4-123">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="71eb4-124">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="71eb4-124">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="71eb4-125">完成后使用的类型或从其派生的类型的操作后，您应释放它直接或间接。</span><span class="sxs-lookup"><span data-stu-id="71eb4-125">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="71eb4-126">若要直接释放类型，调用其<xref:System.Threading.WaitHandle.Close%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="71eb4-126">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="71eb4-127">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="71eb4-127">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="71eb4-128">有关详细信息，请参阅中的"使用对象实现 IDisposable"一节<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="71eb4-128">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="71eb4-129"><xref:System.Threading.WaitHandle> 实现<xref:System.IDisposable.Dispose%2A>模式。</span><span class="sxs-lookup"><span data-stu-id="71eb4-129"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="71eb4-130">请参阅[释放模式](~/docs/standard/design-guidelines/dispose-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="71eb4-130">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="71eb4-131">派生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>属性来存储本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="71eb4-131">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native operating system handle.</span></span> <span data-ttu-id="71eb4-132">不需要重写受保护<xref:System.Threading.WaitHandle.Dispose%2A>方法除非你使用其他非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="71eb4-132">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-133">下面的代码示例演示如何在两个线程可以执行后台任务，同时主线程等待任务完成使用静态<xref:System.Threading.WaitHandle.WaitAny%2A>并<xref:System.Threading.WaitHandle.WaitAll%2A>方法的<xref:System.Threading.WaitHandle>类。</span><span class="sxs-lookup"><span data-stu-id="71eb4-133">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="71eb4-134">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="71eb4-134">This type is thread safe.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md">
      <span data-ttu-id="71eb4-135">线程</span>
      <span class="sxs-lookup">
        <span data-stu-id="71eb4-135">Threading</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md">
      <span data-ttu-id="71eb4-136">线程处理对象和功能</span>
      <span class="sxs-lookup">
        <span data-stu-id="71eb4-136">Threading Objects and Features</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/threading/mutexes.md">
      <span data-ttu-id="71eb4-137">Mutexes</span>
      <span class="sxs-lookup">
        <span data-stu-id="71eb4-137">Mutexes</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/cd94fc34-ac15-427f-b723-a1240a4fab7d">
      <span data-ttu-id="71eb4-138">EventWaitHandle、AutoResetEvent 和 anualResetEvent</span>
      <span class="sxs-lookup">
        <span data-stu-id="71eb4-138">EventWaitHandle, AutoResetEvent, and ManualResetEvent</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
      <span data-ttu-id="71eb4-139">信号量</span>
      <span class="sxs-lookup">
        <span data-stu-id="71eb4-139">Semaphores</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-140">初始化 <see cref="T:System.Threading.WaitHandle" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-140">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="waitHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-141">释放由当前 <see cref="T:System.Threading.WaitHandle" /> 占用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-141">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-142">此方法是公共实现<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法<xref:System.Threading.WaitHandle>类和其派生的类。</span><span class="sxs-lookup"><span data-stu-id="71eb4-142">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="71eb4-143">它提供了一种标准的实现，调用`Dispose(Boolean)`重载，并`true`自变量，然后调用<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-143">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="71eb4-144">调用此方法来释放由的实例占用的所有资源`WaitHandle`或派生的类。</span><span class="sxs-lookup"><span data-stu-id="71eb4-144">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="71eb4-145">调用此方法后，对当前实例的引用会导致未定义的行为。</span><span class="sxs-lookup"><span data-stu-id="71eb4-145">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-146">始终调用<xref:System.Threading.WaitHandle.Close%2A>或<xref:System.Threading.WaitHandle.Dispose>发布到最后一个引用之前<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-146">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="71eb4-147">否则，不会释放它所使用的资源。</span><span class="sxs-lookup"><span data-stu-id="71eb4-147">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="71eb4-148">应重写<see langword="Dispose(Boolean)" />方法来释放资源分配中派生的类。</span>
            <span class="sxs-lookup">
              <span data-stu-id="71eb4-148">You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</span>
            </span>
          </para>
        </block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">
          <span data-ttu-id="71eb4-149">实现 Dispose 方法</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-149">Implementing a Dispose Method</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-150">释放 <see cref="T:System.Threading.WaitHandle" /> 类的当前实例所使用的所有资源</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-150">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="waitHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-151">释放 <see cref="T:System.Threading.WaitHandle" /> 类的当前实例所使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-151">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-152">此方法等效于<xref:System.Threading.WaitHandle.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-152">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-153">始终调用<xref:System.Threading.WaitHandle.Close%2A>或<xref:System.Threading.WaitHandle.Dispose>发布到最后一个引用之前<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-153">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="71eb4-154">否则，不会释放它所使用的资源。</span><span class="sxs-lookup"><span data-stu-id="71eb4-154">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">
          <span data-ttu-id="71eb4-155">清理非托管资源</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-155">Cleaning Up Unmanaged Resources</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="waitHandle.Dispose explicitDisposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing">
          <span data-ttu-id="71eb4-156">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-156">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-157">当在派生类中重写时，释放 <see cref="T:System.Threading.WaitHandle" /> 使用的非托管资源，并且可选择释放托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-157">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-158">调用此方法<xref:System.Threading.WaitHandle.Close%2A>并<xref:System.Threading.WaitHandle.Dispose>方法使用`explicitDisposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-158">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="71eb4-159">当`explicitDisposing`参数是`true`，此方法释放任何托管对象所持有的所有资源，此<xref:System.Threading.WaitHandle>对象引用。</span><span class="sxs-lookup"><span data-stu-id="71eb4-159">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="71eb4-160">应重写<see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />方法来释放资源分配中派生的类。</span>
            <span class="sxs-lookup">
              <span data-stu-id="71eb4-160">You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.</span>
            </span>
            <span data-ttu-id="71eb4-161">
              <see cref="M:System.Threading.WaitHandle.Close" />或<see cref="M:System.Threading.WaitHandle.Dispose" />方法可以由其他对象调用多次。</span>
            <span class="sxs-lookup">
              <span data-stu-id="71eb4-161">The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="71eb4-162">重写此方法时, 请小心不要引用已释放到的早期调用中的对象<see langword="Dispose" />或<see langword="Close" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="71eb4-162">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</span>
            </span>
          </para>
        </block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">
          <span data-ttu-id="71eb4-163">实现 Dispose 方法</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-163">Implementing a Dispose Method</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!WaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="waitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint with get, set" Usage="System.Threading.WaitHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-164">获取或设置本机操作系统句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-164">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71eb4-165">
            <see langword="IntPtr" />，它表示本机操作系统句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-165">An <see langword="IntPtr" /> representing the native operating system handle.</span>
          </span>
          <span data-ttu-id="71eb4-166">默认为 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-166">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-167">分配到一个新值<xref:System.Threading.WaitHandle.Handle%2A>属性不会关闭上一个句柄。</span><span class="sxs-lookup"><span data-stu-id="71eb4-167">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="71eb4-168">这可能导致句柄泄漏。</span><span class="sxs-lookup"><span data-stu-id="71eb4-168">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="71eb4-169">在.NET Framework 版本 2.0 或更高版本; 不使用此属性使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>属性改为。</span><span class="sxs-lookup"><span data-stu-id="71eb4-169">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="71eb4-170">此属性设置为有效的句柄还设置<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>属性，但将其设置为<xref:System.Threading.WaitHandle.InvalidHandle>可能会导致句柄泄漏。</span><span class="sxs-lookup"><span data-stu-id="71eb4-170">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="71eb4-171">需要完全信任立即呼叫者设置属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-171">Requires full trust for the immediate caller to set the property value.</span>
          </span>
          <span data-ttu-id="71eb4-172">此成员不能由部分受信任的或透明代码设置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-172">This member cannot be set by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="71eb4-173">派生的类型必须具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />设置属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-173">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidHandle : nativeint" Usage="System.Threading.WaitHandle.InvalidHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-174">表示无效的本机操作系统句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-174">Represents an invalid native operating system handle.</span>
          </span>
          <span data-ttu-id="71eb4-175">此字段为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-175">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-176">在内部用于初始化<xref:System.Threading.WaitHandle.Handle%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="71eb4-176">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="71eb4-177">可以使用此值以确定是否<see cref="P:System.Threading.WaitHandle.Handle" />属性包含有效的本机操作系统句柄。</span>
            <span class="sxs-lookup">
              <span data-stu-id="71eb4-177">You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeWaitHandle with get, set" Usage="System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-178">获取或设置本机操作系统句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-178">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71eb4-179">
            <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />，它表示本机操作系统句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-179">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-180">当将新值赋给<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>属性上, 一个句柄将关闭时的上一个<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>对象被收集。</span><span class="sxs-lookup"><span data-stu-id="71eb4-180">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="71eb4-181">请勿手动关闭句柄，因为这会导致<xref:System.ObjectDisposedException>时<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>尝试关闭句柄。</span><span class="sxs-lookup"><span data-stu-id="71eb4-181">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="71eb4-182"><xref:System.Threading.WaitHandle> 实现<xref:System.IDisposable.Dispose%2A>模式。</span><span class="sxs-lookup"><span data-stu-id="71eb4-182"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="71eb4-183">请参阅[释放模式](~/docs/standard/design-guidelines/dispose-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="71eb4-183">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="71eb4-184">派生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>属性来存储你的本机句柄操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="71eb4-184">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="71eb4-185">不需要重写受保护<xref:System.Threading.WaitHandle.Dispose%2A>方法除非你使用其他非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="71eb4-185">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="71eb4-186">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-186">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="71eb4-187">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-187">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="71eb4-188">派生的类型必须具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />若要调用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-188">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-189">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-189">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="71eb4-190">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-190">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="71eb4-191">要等待的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-191">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-192">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-192">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-193">如果信号和等待都成功完成，则为 <see langword="true" />；如果等待没有完成，则此方法不返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-193">
              <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-194">此操作不能保证才能成为原子性。</span><span class="sxs-lookup"><span data-stu-id="71eb4-194">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="71eb4-195">当前线程发出信号后`toSignal`但在等待之前`toWaitOn`，在另一个处理器运行的线程可能会发出信号`toWaitOn`或在其上等待。</span><span class="sxs-lookup"><span data-stu-id="71eb4-195">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-196">下面的代码示例使用<xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29>方法重载来允许主线程发出信号已阻塞的线程并然后等待，直到线程完成任务。</span><span class="sxs-lookup"><span data-stu-id="71eb4-196">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="71eb4-197">该示例启动五个线程时，允许其上阻止<xref:System.Threading.EventWaitHandle>使用创建<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>标志，然后一个线程一次时释放用户按下 ENTER 键。</span><span class="sxs-lookup"><span data-stu-id="71eb4-197">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="71eb4-198">该示例然后另外五个线程并释放所有使用<xref:System.Threading.EventWaitHandle>使用创建<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="71eb4-198">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-199">
            <paramref name="toSignal" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-199">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-200">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-200">-or-</span>
          </span>
          <span data-ttu-id="71eb4-201">
            <paramref name="toWaitOn" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-201">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-202">在一个具有 <see cref="T:System.STAThreadAttribute" /> 的线程上调用了该方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-202">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="71eb4-203">Windows 98 或 Windows Millennium Edition 不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-203">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-204">
            <paramref name="toSignal" /> 是信号量，已达到最大计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-204">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-205">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-205">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-206">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-206">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="71eb4-207">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-207">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="71eb4-208">要等待的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-208">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="71eb4-209">一个整数，表示要等待的间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-209">An integer that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="71eb4-210">如果值是 <see cref="F:System.Threading.Timeout.Infinite" />，即 -1，则等待是无限期的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-210">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="71eb4-211">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-211">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-212">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个，指定超时间隔为 32 位有符号整数，并指定在进入等待前是否退出上下文的同步域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-212">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-213">如果信号发送和等待均成功完成，则为 <see langword="true" />；如果信号发送完成，但等待超时，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-213">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-214">此操作不能保证才能成为原子性。</span><span class="sxs-lookup"><span data-stu-id="71eb4-214">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="71eb4-215">当前线程发出信号后`toSignal`但在等待之前`toWaitOn`，在另一个处理器运行的线程可能会发出信号`toWaitOn`或在其上等待。</span><span class="sxs-lookup"><span data-stu-id="71eb4-215">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="71eb4-216">如果`millisecondsTimeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-216">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-217">测试的状态`toWaitOn`并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-217">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="71eb4-218">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="71eb4-218">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="71eb4-219">`exitContext`参数无任何效果，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>从非默认托管上下文中调用方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-219">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="71eb4-220">如果你的线程是派生自的类的实例的调用内部发生这种情况<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-220">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="71eb4-221">即使当前正在执行一种方法不是派生的类上<xref:System.ContextBoundObject>，例如<xref:System.String>，可以在非默认上下文中是如果<xref:System.ContextBoundObject>是当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="71eb4-221">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="71eb4-222">时在非默认上下文中执行代码时，指定`true`有关`exitContext`会导致线程退出非默认托管的上下文 (即，转换到默认上下文) 执行前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-222">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="71eb4-223">线程在调用后返回到原始的非默认上下文<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="71eb4-223">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="71eb4-224">在上下文绑定类时这很有用<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-224">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="71eb4-225">在这种情况下，所有调用的类的成员将自动都同步，并同步域是为类代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="71eb4-225">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="71eb4-226">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，并指定`true`为`exitContext`，在线程退出同步域，这样在调用对象的任何成员以继续操作被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="71eb4-226">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="71eb4-227">当<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法返回时，调用线程必须等待以重新输入同步域。</span><span class="sxs-lookup"><span data-stu-id="71eb4-227">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-228">
            <paramref name="toSignal" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-228">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-229">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-229">-or-</span>
          </span>
          <span data-ttu-id="71eb4-230">
            <paramref name="toWaitOn" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-230">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-231">对具有 <see cref="T:System.STAThreadAttribute" /> 的线程调用了此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-231">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="71eb4-232">Windows 98 或 Windows Millennium Edition 不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-232">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-233">无法终止 <see cref="T:System.Threading.WaitHandle" />，因为它将超过其最大计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-233">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-234">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-234">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-235">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-235">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-236">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-236">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="71eb4-237">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-237">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="71eb4-238">要等待的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-238">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="71eb4-239">一个 <see cref="T:System.TimeSpan" />，表示要等待的间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-239">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="71eb4-240">如果值是 -1，则等待是无限期的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-240">If the value is -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="71eb4-241">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-241">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-242">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个，指定超时间隔为 <see cref="T:System.TimeSpan" />，并指定在进入等待前是否退出上下文的同步域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-242">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-243">如果信号发送和等待均成功完成，则为 <see langword="true" />；如果信号发送完成，但等待超时，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-243">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-244">此操作不能保证才能成为原子性。</span><span class="sxs-lookup"><span data-stu-id="71eb4-244">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="71eb4-245">当前线程发出信号后`toSignal`但在等待之前`toWaitOn`，在另一个处理器运行的线程可能会发出信号`toWaitOn`或在其上等待。</span><span class="sxs-lookup"><span data-stu-id="71eb4-245">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="71eb4-246">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-246">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="71eb4-247">如果`timeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-247">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-248">测试的状态`toWaitOn`并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-248">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="71eb4-249">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="71eb4-249">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="71eb4-250">`exitContext`参数无任何效果，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>从非默认托管上下文中调用方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-250">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="71eb4-251">如果你的线程是派生自的类的实例的调用内部发生这种情况<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-251">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="71eb4-252">即使当前正在执行一种方法不是派生的类上<xref:System.ContextBoundObject>，例如<xref:System.String>，可以在非默认上下文中是如果<xref:System.ContextBoundObject>是当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="71eb4-252">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="71eb4-253">时在非默认上下文中执行代码时，指定`true`有关`exitContext`会导致线程退出非默认托管的上下文 (即，转换到默认上下文) 执行前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-253">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="71eb4-254">线程在调用后返回到原始的非默认上下文<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="71eb4-254">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="71eb4-255">在上下文绑定类时这很有用<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-255">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="71eb4-256">在这种情况下，所有调用的类的成员将自动都同步，并同步域是为类代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="71eb4-256">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="71eb4-257">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，并指定`true`为`exitContext`，在线程退出同步域，这样在调用对象的任何成员以继续操作被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="71eb4-257">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="71eb4-258">当<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法返回时，调用线程必须等待以重新输入同步域。</span><span class="sxs-lookup"><span data-stu-id="71eb4-258">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-259">
            <paramref name="toSignal" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-259">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-260">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-260">-or-</span>
          </span>
          <span data-ttu-id="71eb4-261">
            <paramref name="toWaitOn" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-261">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-262">在一个具有 <see cref="T:System.STAThreadAttribute" /> 的线程上调用了该方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-262">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="71eb4-263">Windows 98 或 Windows Millennium Edition 不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-263">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-264">
            <paramref name="toSignal" /> 是信号量，已达到最大计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-264">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-265">
            <paramref name="timeout" /> 计算为 -1 以外的负毫秒数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-265">
              <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span>
          </span>
          <span data-ttu-id="71eb4-266">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-266">-or-</span>
          </span>
          <span data-ttu-id="71eb4-267">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-267">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-268">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-268">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-269">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-269">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-270">等待指定数组中的所有元素都收到信号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-270">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-271">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-271">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="71eb4-272">此数组不能包含对同一对象的多个引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-272">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-273">等待指定数组中的所有元素都收到信号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-273">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-274">如果 <see langword="true" /> 中的每个元素都收到信号，则返回 <paramref name="waitHandles" />；否则该方法永不返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-274">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-275"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新增功能。</span><span class="sxs-lookup"><span data-stu-id="71eb4-275"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="71eb4-276">在上一版本中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法将返回`true`时放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-276">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="71eb4-277">放弃的 mutex 通常表明存在严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="71eb4-277">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="71eb4-278">在系统范围的情况下它可能指示，已突然终止应用程序 （例如，通过使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="71eb4-278">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="71eb4-279">该异常包含有关调试的有用信息。</span><span class="sxs-lookup"><span data-stu-id="71eb4-279">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="71eb4-280"><xref:System.Threading.WaitHandle.WaitAll%2A>方法返回时都收到信号的句柄。</span><span class="sxs-lookup"><span data-stu-id="71eb4-280">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="71eb4-281">在某些实现中，如果传递的 64 个以上的句柄，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-281">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="71eb4-282">如果数组包含重复项，调用将失败<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-282">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-283"><xref:System.Threading.WaitHandle.WaitAll%2A>方法不支持在具有的线程上<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-283">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="71eb4-284">调用此方法重载是等效于调用<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法重载并指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 用于`millisecondsTimeout`并`true`为`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-284">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-285">下面的代码示例演示如何使用线程池以异步方式创建和写入的文件组。</span><span class="sxs-lookup"><span data-stu-id="71eb4-285">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="71eb4-286">完成后，每个写入操作排队作为工作项和信号。</span><span class="sxs-lookup"><span data-stu-id="71eb4-286">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="71eb4-287">主线程等待发出信号的所有项，然后退出。</span><span class="sxs-lookup"><span data-stu-id="71eb4-287">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-288">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-288">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-289">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-289">-or-</span>
          </span>
          <span data-ttu-id="71eb4-290">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-290">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-291">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-291">-or-</span>
          </span>
          <span data-ttu-id="71eb4-292">
            <paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-292">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="71eb4-293">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="71eb4-293">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="71eb4-294">
            <paramref name="waitHandles" /> 数组包含重复的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-294">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-295">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-295">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="71eb4-296">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-296">-or-</span>
          </span>
          <span data-ttu-id="71eb4-297">
            <see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-297">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="71eb4-298">
            <paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-298">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-299">等待终止，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-299">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-300">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-300">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-301">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-301">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-302">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-302">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="71eb4-303">此数组不能包含对同一对象的多个引用（重复的元素）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-303">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="71eb4-304">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-304">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-305">等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.Int32" /> 值指定时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-305">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-306">如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-306">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-307">如果`millisecondsTimeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-307">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-308">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-308">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-309"><xref:System.Threading.WaitHandle.WaitAll%2A>方法返回时，等待将终止，这意味着所有句柄都已终止或出现超时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-309">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="71eb4-310">在某些实现中，如果传递的 64 个以上的句柄，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-310">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="71eb4-311">如果数组中有重复项，调用将失败<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-311">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-312"><xref:System.Threading.WaitHandle.WaitAll%2A>方法不支持在具有的线程上<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-312">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="71eb4-313">调用此方法的重载相当于调用<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>重载并指定`false`为`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-313">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-314">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-314">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-315">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-315">-or-</span>
          </span>
          <span data-ttu-id="71eb4-316">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-316">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-317">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-317">-or-</span>
          </span>
          <span data-ttu-id="71eb4-318">
            <paramref name="waitHandles" /> 是一个不含任何元素的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-318">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="71eb4-319">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="71eb4-319">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="71eb4-320">
            <paramref name="waitHandles" /> 数组包含重复的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-320">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-321">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-321">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="71eb4-322">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-322">-or-</span>
          </span>
          <span data-ttu-id="71eb4-323">
            <see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-323">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-324">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-324">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-325">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-325">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-326">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-326">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-327">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-327">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-328">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-328">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="71eb4-329">此数组不能包含对同一对象的多个引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-329">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="71eb4-330">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-330">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-331">等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-331">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-332">如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-332">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-333">如果`timeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-333">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-334">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-334">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-335"><xref:System.Threading.WaitHandle.WaitAll%2A>方法返回时，等待将终止，这意味着所有句柄都已终止或发生超时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-335">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="71eb4-336">在某些实现中，如果传递的 64 个以上的句柄，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-336">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="71eb4-337">如果数组包含重复项，则调用将失败。</span><span class="sxs-lookup"><span data-stu-id="71eb4-337">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-338"><xref:System.Threading.WaitHandle.WaitAll%2A>方法不支持在具有的线程上<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-338">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="71eb4-339">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-339">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="71eb4-340">调用此方法的重载相当于调用<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>重载并指定`false`为`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-340">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-341">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-341">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-342">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-342">-or-</span>
          </span>
          <span data-ttu-id="71eb4-343">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-343">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-344">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-344">-or-</span>
          </span>
          <span data-ttu-id="71eb4-345">
            <paramref name="waitHandles" /> 是一个不含任何元素的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-345">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="71eb4-346">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="71eb4-346">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="71eb4-347">
            <paramref name="waitHandles" /> 数组包含重复的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-347">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-348">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-348">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="71eb4-349">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-349">-or-</span>
          </span>
          <span data-ttu-id="71eb4-350">
            <see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-350">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-351">
            <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-351">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="71eb4-352">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-352">-or-</span>
          </span>
          <span data-ttu-id="71eb4-353">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-353">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-354">等待终止，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-354">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-355">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-355">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-356">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-356">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-357">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-357">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="71eb4-358">此数组不能包含对同一对象的多个引用（重复的元素）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-358">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="71eb4-359">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-359">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="71eb4-360">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-360">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-361">等待指定数组中的所有元素收到信号，使用 <see cref="T:System.Int32" /> 值指定时间间隔，并指定是否在等待之前退出同步域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-361">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-362">如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-362">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-363">如果`millisecondsTimeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-363">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-364">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-364">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-365"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新增功能。</span><span class="sxs-lookup"><span data-stu-id="71eb4-365"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="71eb4-366">在上一版本中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法将返回`true`时放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-366">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="71eb4-367">放弃的 mutex 通常表明存在严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="71eb4-367">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="71eb4-368">在系统范围的情况下它可能指示，已突然终止应用程序 （例如，通过使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="71eb4-368">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="71eb4-369">该异常包含有关调试的有用信息。</span><span class="sxs-lookup"><span data-stu-id="71eb4-369">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="71eb4-370"><xref:System.Threading.WaitHandle.WaitAll%2A>方法返回时，等待将终止，这意味着所有句柄都已终止或出现超时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-370">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="71eb4-371">在某些实现中，如果传递的 64 个以上的句柄，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-371">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="71eb4-372">如果数组中有重复项，调用将失败<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-372">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-373"><xref:System.Threading.WaitHandle.WaitAll%2A>方法不支持在具有的线程上<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-373">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="71eb4-374">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="71eb4-374">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="71eb4-375">`exitContext`参数无任何效果，除非<xref:System.Threading.WaitHandle.WaitAll%2A>从非默认托管上下文中调用方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-375">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="71eb4-376">如果你的线程是派生自的类的实例的调用内部发生这种情况<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-376">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="71eb4-377">即使当前正在执行一种方法不派生自的类上<xref:System.ContextBoundObject>，例如<xref:System.String>，可以在非默认上下文中是如果<xref:System.ContextBoundObject>是当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="71eb4-377">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="71eb4-378">时在非默认上下文中执行代码时，指定`true`有关`exitContext`会导致线程退出非默认托管的上下文 (即，转换到默认上下文) 执行前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-378">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="71eb4-379">线程在调用后返回到原始的非默认上下文<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="71eb4-379">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="71eb4-380">在上下文绑定类时这很有用<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="71eb4-380">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="71eb4-381">在这种情况下，所有调用的类的成员将自动都同步，并同步域是为类代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="71eb4-381">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="71eb4-382">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.WaitHandle.WaitAll%2A>方法，并指定`true`为`exitContext`，在线程退出同步域，这样在调用对象的任何成员以继续操作被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="71eb4-382">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="71eb4-383">当<xref:System.Threading.WaitHandle.WaitAll%2A>方法返回时，调用线程必须等待以重新输入同步域。</span><span class="sxs-lookup"><span data-stu-id="71eb4-383">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-384">下面的代码示例演示如何使用线程池以异步方式创建和写入的文件组。</span><span class="sxs-lookup"><span data-stu-id="71eb4-384">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="71eb4-385">完成后，每个写入操作排队作为工作项和信号。</span><span class="sxs-lookup"><span data-stu-id="71eb4-385">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="71eb4-386">主线程等待发出信号的所有项，然后退出。</span><span class="sxs-lookup"><span data-stu-id="71eb4-386">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-387">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-387">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-388">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-388">-or-</span>
          </span>
          <span data-ttu-id="71eb4-389">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-389">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-390">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-390">-or-</span>
          </span>
          <span data-ttu-id="71eb4-391">
            <paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-391">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="71eb4-392">
            <paramref name="waitHandles" /> 数组包含重复的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-392">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-393">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-393">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="71eb4-394">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-394">-or-</span>
          </span>
          <span data-ttu-id="71eb4-395">
            <see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-395">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="71eb4-396">
            <paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-396">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-397">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-397">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-398">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-398">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-399">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-399">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-400">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-400">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-401">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-401">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="71eb4-402">此数组不能包含对同一对象的多个引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-402">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="71eb4-403">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-403">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="71eb4-404">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-404">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-405">等待指定数组中的所有元素收到信号，使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔，并指定是否在等待之前退出同步域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-405">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-406">如果 <paramref name="waitHandles" /> 中的每个元素都收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-406">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-407">如果`timeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-407">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-408">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-408">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-409"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新增功能。</span><span class="sxs-lookup"><span data-stu-id="71eb4-409"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="71eb4-410">在上一版本中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法将返回`true`时放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-410">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="71eb4-411">放弃的 mutex 通常表明存在严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="71eb4-411">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="71eb4-412">在系统范围的情况下它可能指示，已突然终止应用程序 （例如，通过使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="71eb4-412">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="71eb4-413">该异常包含有关调试的有用信息。</span><span class="sxs-lookup"><span data-stu-id="71eb4-413">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="71eb4-414"><xref:System.Threading.WaitHandle.WaitAll%2A>方法返回时，等待将终止，这意味着所有句柄都已终止或发生超时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-414">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="71eb4-415">在某些实现中，如果传递的 64 个以上的句柄，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-415">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="71eb4-416">如果数组包含重复项，则调用将失败。</span><span class="sxs-lookup"><span data-stu-id="71eb4-416">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-417"><xref:System.Threading.WaitHandle.WaitAll%2A>方法不支持在具有的线程上<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-417">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="71eb4-418">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-418">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="71eb4-419">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="71eb4-419">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="71eb4-420">`exitContext`参数无任何效果，除非<xref:System.Threading.WaitHandle.WaitAll%2A>从非默认托管上下文中调用方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-420">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="71eb4-421">如果你的线程是派生自的类的实例的调用内部发生这种情况<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-421">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="71eb4-422">即使当前正在执行一种方法不派生自的类上<xref:System.ContextBoundObject>，例如<xref:System.String>，可以在非默认上下文中是如果<xref:System.ContextBoundObject>是当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="71eb4-422">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="71eb4-423">时在非默认上下文中执行代码时，指定`true`有关`exitContext`会导致线程退出非默认托管的上下文 (即，转换到默认上下文) 执行前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-423">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="71eb4-424">在调用后返回到原始的非默认上下文<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="71eb4-424">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="71eb4-425">在上下文绑定类时这很有用<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-425">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="71eb4-426">在这种情况下，所有调用的类的成员将自动都同步，并同步域是为类代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="71eb4-426">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="71eb4-427">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.WaitHandle.WaitAll%2A>方法，并指定`true`为`exitContext`，在线程退出同步域，这样在调用对象的任何成员以继续操作被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="71eb4-427">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="71eb4-428">当<xref:System.Threading.WaitHandle.WaitAll%2A>方法返回时，调用线程必须等待以重新输入同步域。</span><span class="sxs-lookup"><span data-stu-id="71eb4-428">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-429">下面的代码示例演示如何使用线程池以异步方式创建和写入的文件组。</span><span class="sxs-lookup"><span data-stu-id="71eb4-429">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="71eb4-430">完成后，每个写入操作排队作为工作项和信号。</span><span class="sxs-lookup"><span data-stu-id="71eb4-430">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="71eb4-431">主线程等待发出信号的所有项，然后退出。</span><span class="sxs-lookup"><span data-stu-id="71eb4-431">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-432">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-432">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-433">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-433">-or-</span>
          </span>
          <span data-ttu-id="71eb4-434">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-434">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-435">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-435">-or-</span>
          </span>
          <span data-ttu-id="71eb4-436">
            <paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-436">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="71eb4-437">
            <paramref name="waitHandles" /> 数组包含重复的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-437">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-438">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-438">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="71eb4-439">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-439">-or-</span>
          </span>
          <span data-ttu-id="71eb4-440">
            <see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-440">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="71eb4-441">
            <paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-441">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-442">
            <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-442">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="71eb4-443">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-443">-or-</span>
          </span>
          <span data-ttu-id="71eb4-444">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-444">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-445">等待终止，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-445">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-446">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-446">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-447">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-447">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-448">等待指定数组中的任一元素收到信号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-448">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] -&gt; int" Usage="System.Threading.WaitHandle.WaitAny waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-449">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-449">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-450">等待指定数组中的任一元素收到信号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-450">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-451">满足等待的对象的数组索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-451">The array index of the object that satisfied the wait.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-452"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新增功能。</span><span class="sxs-lookup"><span data-stu-id="71eb4-452"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="71eb4-453">在上一版本中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法将返回`true`如果等待完成，因为已放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-453">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="71eb4-454">放弃的 mutex 通常表明存在严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="71eb4-454">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="71eb4-455">在系统范围的情况下它可能指示，已突然终止应用程序 （例如，通过使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="71eb4-455">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="71eb4-456">该异常包含有关调试的有用信息。</span><span class="sxs-lookup"><span data-stu-id="71eb4-456">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="71eb4-457"><xref:System.Threading.WaitHandle.WaitAny%2A>方法会抛出<xref:System.Threading.AbandonedMutexException>仅等待完成由于已放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-457">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="71eb4-458">如果`waitHandles`包含具有较低的索引号比放弃的互斥体，释放的互斥体<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="71eb4-458">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-459">在版本的.NET Framework 版本 2.0 中，如果一个线程退出或中止，且不显式地释放低于<xref:System.Threading.Mutex>，并且`Mutex`中位于索引 0 （零）`WaitAny`上另一个线程，返回的索引数组`WaitAny`是而不是 0 128。</span><span class="sxs-lookup"><span data-stu-id="71eb4-459">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="71eb4-460">此方法返回时任何句柄发出信号。</span><span class="sxs-lookup"><span data-stu-id="71eb4-460">This method returns when any handle is signaled.</span></span> <span data-ttu-id="71eb4-461">如果多个对象在调用期间将被发送信号，则返回值是对象的具有所有终止的对象的最小索引值终止的数组索引。</span><span class="sxs-lookup"><span data-stu-id="71eb4-461">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="71eb4-462">在某些实现中，如果多个传递的句柄 64，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-462">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="71eb4-463">调用此方法重载是等效于调用<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法重载并指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 用于`millisecondsTimeout`并`true`为`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-463">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-464">下面的代码示例演示如何调用<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-464">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-465">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-465">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-466">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-466">-or-</span>
          </span>
          <span data-ttu-id="71eb4-467">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-467">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-468">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-468">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="71eb4-469">
            <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-469">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-470">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-470">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-471">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-471">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71eb4-472">
            <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-472">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-473">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-473">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-474">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-474">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="71eb4-475">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-475">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-476">等待指定数组中的任意元素接收信号，同时使用 32 位有符号整数指定时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-476">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-477">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="millisecondsTimeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-477">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-478">如果`millisecondsTimeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-478">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-479">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-479">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-480"><xref:System.Threading.WaitHandle.WaitAny%2A>方法会抛出<xref:System.Threading.AbandonedMutexException>仅等待完成由于已放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-480">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="71eb4-481">如果`waitHandles`包含具有较低的索引号比放弃的互斥体，释放的互斥体<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="71eb4-481">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="71eb4-482">此方法返回时，等待将终止，任何句柄发出信号或超时发生时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-482">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="71eb4-483">如果多个对象在调用期间将被发送信号，则返回值是对象的具有所有终止的对象的最小索引值终止的数组索引。</span><span class="sxs-lookup"><span data-stu-id="71eb4-483">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="71eb4-484">在某些实现中，如果多个传递的句柄 64，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-484">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="71eb4-485">调用此方法的重载相当于调用<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>重载并指定`false`为`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-485">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-486">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-486">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-487">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-487">-or-</span>
          </span>
          <span data-ttu-id="71eb4-488">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-488">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-489">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-489">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-490">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-490">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-491">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-491">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-492">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-492">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71eb4-493">
            <paramref name="waitHandles" /> 是一个不含任何元素的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-493">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-494">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-494">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-495">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-495">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="71eb4-496">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-496">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-497">等待指定数组中的任意元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-497">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-498">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="timeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-498">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-499">如果`timeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-499">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-500">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-500">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-501"><xref:System.Threading.WaitHandle.WaitAny%2A>方法会抛出<xref:System.Threading.AbandonedMutexException>仅等待完成由于已放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-501">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="71eb4-502">如果`waitHandles`包含具有较低的索引号比放弃的互斥体，释放的互斥体<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="71eb4-502">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="71eb4-503">此方法返回时，等待将终止，任何句柄发出信号时或发生超时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-503">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="71eb4-504">如果多个对象在调用期间将被发送信号，则返回值是对象的具有所有终止的对象的最小索引值终止的数组索引。</span><span class="sxs-lookup"><span data-stu-id="71eb4-504">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="71eb4-505">在某些实现中，如果多个传递的句柄 64，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-505">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="71eb4-506">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-506">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="71eb4-507">调用此方法的重载相当于调用<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>重载并指定`false`为`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-507">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-508">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-508">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-509">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-509">-or-</span>
          </span>
          <span data-ttu-id="71eb4-510">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-510">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-511">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-511">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-512">
            <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-512">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="71eb4-513">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-513">-or-</span>
          </span>
          <span data-ttu-id="71eb4-514">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-514">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-515">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-515">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-516">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-516">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71eb4-517">
            <paramref name="waitHandles" /> 是一个不含任何元素的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-517">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-518">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-518">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-519">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-519">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="71eb4-520">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-520">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="71eb4-521">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-521">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-522">等待指定数组中的任一元素收到信号，使用 32 位带符号整数指定时间间隔并指定是否在等待之前退出同步域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-522">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-523">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="millisecondsTimeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-523">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-524">如果`millisecondsTimeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-524">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-525">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-525">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-526"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新增功能。</span><span class="sxs-lookup"><span data-stu-id="71eb4-526"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="71eb4-527">在上一版本中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法将返回`true`如果等待完成，因为已放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-527">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="71eb4-528">放弃的 mutex 通常表明存在严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="71eb4-528">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="71eb4-529">在系统范围的情况下它可能指示，已突然终止应用程序 （例如，通过使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="71eb4-529">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="71eb4-530">该异常包含有关调试的有用信息。</span><span class="sxs-lookup"><span data-stu-id="71eb4-530">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="71eb4-531"><xref:System.Threading.WaitHandle.WaitAny%2A>方法会抛出<xref:System.Threading.AbandonedMutexException>仅等待完成由于已放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-531">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="71eb4-532">如果`waitHandles`包含具有较低的索引号比放弃的互斥体，释放的互斥体<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="71eb4-532">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-533">在版本的.NET Framework 版本 2.0 中，如果一个线程退出或中止，且不显式地释放低于<xref:System.Threading.Mutex>，并且`Mutex`中位于索引 0 （零）`WaitAny`上另一个线程，返回的索引数组`WaitAny`是而不是 0 128。</span><span class="sxs-lookup"><span data-stu-id="71eb4-533">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="71eb4-534">此方法返回时，等待将终止，任何句柄发出信号或超时发生时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-534">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="71eb4-535">如果多个对象在调用期间将被发送信号，则返回值是对象的具有所有终止的对象的最小索引值终止的数组索引。</span><span class="sxs-lookup"><span data-stu-id="71eb4-535">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="71eb4-536">在某些实现中，如果多个传递的句柄 64，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-536">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="71eb4-537">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="71eb4-537">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="71eb4-538">`exitContext`参数无任何效果，除非<xref:System.Threading.WaitHandle.WaitAny%2A>从非默认托管上下文中调用方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-538">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="71eb4-539">如果你的线程是派生自的类的实例的调用内部发生这种情况<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-539">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="71eb4-540">即使当前正在执行一种方法不是派生的类上<xref:System.ContextBoundObject>，例如<xref:System.String>，可以在非默认上下文中是如果<xref:System.ContextBoundObject>是当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="71eb4-540">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="71eb4-541">时在非默认上下文中执行代码时，指定`true`有关`exitContext`会导致线程退出非默认托管的上下文 (即，转换到默认上下文) 执行前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-541">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="71eb4-542">线程在调用后返回到原始的非默认上下文<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="71eb4-542">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="71eb4-543">在上下文绑定类时这很有用<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-543">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="71eb4-544">在这种情况下，所有调用的类的成员将自动都同步，并同步域是为类代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="71eb4-544">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="71eb4-545">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.WaitHandle.WaitAny%2A>方法，并指定`true`为`exitContext`，在线程退出同步域，这样在调用对象的任何成员以继续操作被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="71eb4-545">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="71eb4-546">当<xref:System.Threading.WaitHandle.WaitAny%2A>方法返回时，调用线程必须等待以重新输入同步域。</span><span class="sxs-lookup"><span data-stu-id="71eb4-546">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-547">下面的代码示例演示如何使用线程池来同时搜索多个磁盘上的文件。</span><span class="sxs-lookup"><span data-stu-id="71eb4-547">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="71eb4-548">有关空间注意事项，搜索每个磁盘的根目录。</span><span class="sxs-lookup"><span data-stu-id="71eb4-548">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-549">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-549">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-550">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-550">-or-</span>
          </span>
          <span data-ttu-id="71eb4-551">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-551">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-552">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-552">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="71eb4-553">
            <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-553">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-554">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-554">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-555">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-555">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-556">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-556">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71eb4-557">
            <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-557">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-558">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-558">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="71eb4-559">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-559">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="71eb4-560">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-560">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="71eb4-561">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-561">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-562">等待指定数组中的任一元素收到信号，使用 <see cref="T:System.TimeSpan" /> 指定时间间隔并指定是否在等待之前退出同步域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-562">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-563">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="timeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-563">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-564">如果`timeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-564">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-565">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-565">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-566"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新增功能。</span><span class="sxs-lookup"><span data-stu-id="71eb4-566"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="71eb4-567">在上一版本中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法将返回`true`如果等待完成，因为已放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-567">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="71eb4-568">放弃的 mutex 通常表明存在严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="71eb4-568">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="71eb4-569">在系统范围的情况下它可能指示，已突然终止应用程序 （例如，通过使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="71eb4-569">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="71eb4-570">该异常包含有关调试的有用信息。</span><span class="sxs-lookup"><span data-stu-id="71eb4-570">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="71eb4-571"><xref:System.Threading.WaitHandle.WaitAny%2A>方法会抛出<xref:System.Threading.AbandonedMutexException>仅等待完成由于已放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-571">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="71eb4-572">如果`waitHandles`包含具有较低的索引号比放弃的互斥体，释放的互斥体<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="71eb4-572">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71eb4-573">在版本的.NET Framework 版本 2.0 中，如果一个线程退出或中止，且不显式地释放低于<xref:System.Threading.Mutex>，并且`Mutex`中位于索引 0 （零）`WaitAny`上另一个线程，返回的索引数组`WaitAny`是而不是 0 128。</span><span class="sxs-lookup"><span data-stu-id="71eb4-573">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="71eb4-574">此方法返回时，等待将终止，任何句柄发出信号时或发生超时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-574">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="71eb4-575">如果多个对象在调用期间将被发送信号，则返回值是对象的具有所有终止的对象的最小索引值终止的数组索引。</span><span class="sxs-lookup"><span data-stu-id="71eb4-575">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="71eb4-576">在某些实现中，如果多个传递的句柄 64，<xref:System.NotSupportedException>引发。</span><span class="sxs-lookup"><span data-stu-id="71eb4-576">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="71eb4-577">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-577">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="71eb4-578">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="71eb4-578">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="71eb4-579">`exitContext`参数无任何效果，除非<xref:System.Threading.WaitHandle.WaitAny%2A>从非默认托管上下文中调用方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-579">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="71eb4-580">如果你的线程是派生自的类的实例的调用内部发生这种情况<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-580">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="71eb4-581">即使当前正在执行一种方法不是派生的类上<xref:System.ContextBoundObject>，例如<xref:System.String>，可以在非默认上下文中是如果<xref:System.ContextBoundObject>是当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="71eb4-581">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="71eb4-582">时在非默认上下文中执行代码时，指定`true`有关`exitContext`会导致线程退出非默认托管的上下文 (即，转换到默认上下文) 执行前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-582">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="71eb4-583">线程在调用后返回到原始的非默认上下文<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="71eb4-583">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="71eb4-584">在上下文绑定类时这很有用<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-584">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="71eb4-585">在这种情况下，所有调用的类的成员将自动都同步，并同步域是为类代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="71eb4-585">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="71eb4-586">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.WaitHandle.WaitAny%2A>方法，并指定`true`为`exitContext`，在线程退出同步域，这样在调用对象的任何成员以继续操作被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="71eb4-586">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="71eb4-587">当<xref:System.Threading.WaitHandle.WaitAny%2A>方法返回时，调用线程必须等待以重新输入同步域。</span><span class="sxs-lookup"><span data-stu-id="71eb4-587">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-588">下面的代码示例演示如何使用线程池来同时搜索多个磁盘上的文件。</span><span class="sxs-lookup"><span data-stu-id="71eb4-588">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="71eb4-589">有关空间注意事项，搜索每个磁盘的根目录。</span><span class="sxs-lookup"><span data-stu-id="71eb4-589">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="71eb4-590">
            <paramref name="waitHandles" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-590">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="71eb4-591">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-591">-or-</span>
          </span>
          <span data-ttu-id="71eb4-592">
            <paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-592">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="71eb4-593">
            <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-593">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="71eb4-594">
            <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-594">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-595">
            <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-595">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="71eb4-596">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-596">-or-</span>
          </span>
          <span data-ttu-id="71eb4-597">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-597">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-598">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-598">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-599">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-599">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71eb4-600">
            <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-600">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-601">
            <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-601">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-602">阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-602">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : unit -&gt; bool&#xA;override this.WaitOne : unit -&gt; bool" Usage="waitHandle.WaitOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-603">阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-603">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-604">如果当前实例收到信号，则为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-604">
              <see langword="true" /> if the current instance receives a signal.</span>
          </span>
          <span data-ttu-id="71eb4-605">如果当前实例永不发出信号，则 <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 永不返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-605">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-606"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新增功能。</span><span class="sxs-lookup"><span data-stu-id="71eb4-606"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="71eb4-607">在上一版本中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法将返回`true`时放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-607">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="71eb4-608">放弃的 mutex 通常表明存在严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="71eb4-608">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="71eb4-609">在系统范围的情况下它可能指示，已突然终止应用程序 （例如，通过使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="71eb4-609">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="71eb4-610">该异常包含有关调试的有用信息。</span><span class="sxs-lookup"><span data-stu-id="71eb4-610">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="71eb4-611">此方法进行阻止，直到当前实例无限期的调用方收到信号。</span><span class="sxs-lookup"><span data-stu-id="71eb4-611">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="71eb4-612">使用此方法进行阻止，直至<xref:System.Threading.WaitHandle>从另一个线程收到信号，例如则会生成异步操作完成时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-612">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="71eb4-613">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="71eb4-613">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="71eb4-614">调用此方法重载是等效于调用<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>方法重载并指定-1 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>第一个参数和`false`为第二个参数。</span><span class="sxs-lookup"><span data-stu-id="71eb4-614">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="71eb4-615">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="71eb4-615">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-616">下面的代码示例演示如何使用等待句柄以防止进程终止等待后台线程完成执行时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-616">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="71eb4-617">已释放当前实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-617">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-618">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-618">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-619">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-619">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-620">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-620">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int -&gt; bool&#xA;override this.WaitOne : int -&gt; bool" Usage="waitHandle.WaitOne millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="71eb4-621">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-621">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-622">阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号，同时使用 32 位带符号整数指定时间间隔（以毫秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-622">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-623">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-623">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-624">如果`millisecondsTimeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-624">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-625">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-625">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-626">此方法受到阻止，直到当前实例收到信号或超时的调用方会发生。</span><span class="sxs-lookup"><span data-stu-id="71eb4-626">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="71eb4-627">使用此方法进行阻止，直至<xref:System.Threading.WaitHandle>从另一个线程收到信号，例如则会生成异步操作完成时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-627">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="71eb4-628">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="71eb4-628">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="71eb4-629">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="71eb4-629">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="71eb4-630">调用此方法的重载相当于调用<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>重载并指定`false`为`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-630">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-631">下面的代码示例演示如何使用等待句柄以防止进程终止等待后台线程完成执行时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-631">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="71eb4-632">已释放当前实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-632">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-633">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-633">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-634">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-634">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-635">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-635">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-636">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-636">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan -&gt; bool&#xA;override this.WaitOne : TimeSpan -&gt; bool" Usage="waitHandle.WaitOne timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="71eb4-637">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-637">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-638">阻止当前线程，直到当前实例收到信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-638">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-639">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-639">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-640">如果`timeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-640">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-641">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-641">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-642">此方法受到阻止，直到当前实例收到信号或超时的调用方会发生。</span><span class="sxs-lookup"><span data-stu-id="71eb4-642">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="71eb4-643">使用此方法进行阻止，直至<xref:System.Threading.WaitHandle>从另一个线程收到信号，例如则会生成异步操作完成时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-643">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="71eb4-644">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="71eb4-644">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="71eb4-645">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="71eb4-645">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="71eb4-646">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-646">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="71eb4-647">调用此方法的重载相当于调用<xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29>重载并指定`false`为`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-647">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="71eb4-648">已释放当前实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-648">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-649">
            <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-649">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="71eb4-650">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-650">-or-</span>
          </span>
          <span data-ttu-id="71eb4-651">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-651">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-652">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-652">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-653">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-653">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-654">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-654">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int * bool -&gt; bool&#xA;override this.WaitOne : int * bool -&gt; bool" Usage="waitHandle.WaitOne (millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="71eb4-655">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-655">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="71eb4-656">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-656">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-657">阻止当前线程，直到当前的 <see cref="T:System.Threading.WaitHandle" /> 收到信号为止，同时使用 32 位带符号整数指定时间间隔，并指定是否在等待之前退出同步域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-657">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-658">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-658">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-659">如果`millisecondsTimeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-659">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-660">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-660">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-661"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新增功能。</span><span class="sxs-lookup"><span data-stu-id="71eb4-661"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="71eb4-662">在上一版本中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法将返回`true`时放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-662">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="71eb4-663">放弃的 mutex 通常表明存在严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="71eb4-663">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="71eb4-664">在系统范围的情况下它可能指示，已突然终止应用程序 （例如，通过使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="71eb4-664">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="71eb4-665">该异常包含有关调试的有用信息。</span><span class="sxs-lookup"><span data-stu-id="71eb4-665">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="71eb4-666">此方法受到阻止，直到当前实例收到信号或超时的调用方会发生。</span><span class="sxs-lookup"><span data-stu-id="71eb4-666">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="71eb4-667">使用此方法进行阻止，直至<xref:System.Threading.WaitHandle>从另一个线程收到信号，例如则会生成异步操作完成时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-667">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="71eb4-668">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="71eb4-668">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="71eb4-669">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="71eb4-669">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="71eb4-670">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="71eb4-670">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="71eb4-671">`exitContext`参数无任何效果，除非<xref:System.Threading.WaitHandle.WaitOne%2A>从非默认托管上下文中调用方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-671">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="71eb4-672">如果你的线程是派生自的类的实例的调用内部发生这种情况<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-672">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="71eb4-673">即使当前正在执行一种方法不是派生的类上<xref:System.ContextBoundObject>，例如<xref:System.String>，可以在非默认上下文中是如果<xref:System.ContextBoundObject>是当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="71eb4-673">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="71eb4-674">时在非默认上下文中执行代码时，指定`true`有关`exitContext`会导致线程退出非默认托管的上下文 (即，转换到默认上下文) 执行前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-674">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="71eb4-675">线程在调用后返回到原始的非默认上下文<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="71eb4-675">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="71eb4-676">在上下文绑定类时这很有用<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-676">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="71eb4-677">在这种情况下，所有调用的类的成员将自动都同步，并同步域是为类代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="71eb4-677">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="71eb4-678">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法，并指定`true`为`exitContext`，在线程退出同步域，这样在调用对象的任何成员以继续操作被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="71eb4-678">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="71eb4-679">当<xref:System.Threading.WaitHandle.WaitOne%2A>方法返回时，调用线程必须等待以重新输入同步域。</span><span class="sxs-lookup"><span data-stu-id="71eb4-679">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-680">下面的示例演示如何将<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>方法重载的行为与在一个域中同步调用时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-680">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="71eb4-681">首先的线程在等待`exitContext`设置为`false`并阻止，直到等待超时过期。</span><span class="sxs-lookup"><span data-stu-id="71eb4-681">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="71eb4-682">第二个线程执行后的第一个线程终止，并使用在等待`exitContext`设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-682">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="71eb4-683">此第二个线程的等待句柄发送信号的调用未被阻止，并在线程等待超时前完成。</span><span class="sxs-lookup"><span data-stu-id="71eb4-683">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="71eb4-684">已释放当前实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-684">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-685">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-685">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-686">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-686">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-687">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-687">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-688">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-688">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan * bool -&gt; bool&#xA;override this.WaitOne : TimeSpan * bool -&gt; bool" Usage="waitHandle.WaitOne (timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="71eb4-689">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-689">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="71eb4-690">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-690">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71eb4-691">阻止当前线程，直到当前实例收到信号为止，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔，并指定是否在等待之前退出同步域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-691">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71eb4-692">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-692">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-693">如果`timeout`为零，该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="71eb4-693">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="71eb4-694">它测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="71eb4-694">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="71eb4-695"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新增功能。</span><span class="sxs-lookup"><span data-stu-id="71eb4-695"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="71eb4-696">在上一版本中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法将返回`true`时放弃的互斥体。</span><span class="sxs-lookup"><span data-stu-id="71eb4-696">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="71eb4-697">放弃的 mutex 通常表明存在严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="71eb4-697">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="71eb4-698">在系统范围的情况下它可能指示，已突然终止应用程序 （例如，通过使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="71eb4-698">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="71eb4-699">该异常包含有关调试的有用信息。</span><span class="sxs-lookup"><span data-stu-id="71eb4-699">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="71eb4-700">此方法受到阻止，直到当前实例收到信号或超时的调用方会发生。</span><span class="sxs-lookup"><span data-stu-id="71eb4-700">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="71eb4-701">使用此方法进行阻止，直至<xref:System.Threading.WaitHandle>从另一个线程收到信号，例如则会生成异步操作完成时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-701">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="71eb4-702">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="71eb4-702">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="71eb4-703">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="71eb4-703">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="71eb4-704">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-704">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="71eb4-705">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="71eb4-705">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="71eb4-706">`exitContext`参数无任何效果，除非<xref:System.Threading.WaitHandle.WaitOne%2A>从非默认托管上下文中调用方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-706">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="71eb4-707">如果你的线程是派生自的类的实例的调用内部发生这种情况<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-707">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="71eb4-708">即使当前正在执行一种方法不是派生的类上<xref:System.ContextBoundObject>，例如<xref:System.String>，可以在非默认上下文中是如果<xref:System.ContextBoundObject>是当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="71eb4-708">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="71eb4-709">时在非默认上下文中执行代码时，指定`true`有关`exitContext`会导致线程退出非默认托管的上下文 (即，转换到默认上下文) 执行前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="71eb4-709">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="71eb4-710">线程在调用后返回到原始的非默认上下文<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="71eb4-710">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="71eb4-711">在上下文绑定类时这很有用<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="71eb4-711">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="71eb4-712">在这种情况下，所有调用的类的成员将自动都同步，并同步域是为类代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="71eb4-712">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="71eb4-713">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法，并指定`true`为`exitContext`，在线程退出同步域，这样在调用对象的任何成员以继续操作被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="71eb4-713">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="71eb4-714">当<xref:System.Threading.WaitHandle.WaitOne%2A>方法返回时，调用线程必须等待以重新输入同步域。</span><span class="sxs-lookup"><span data-stu-id="71eb4-714">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-715">下面的代码示例演示如何使用等待句柄以防止进程终止等待后台线程完成执行时。</span><span class="sxs-lookup"><span data-stu-id="71eb4-715">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="71eb4-716">已释放当前实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-716">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="71eb4-717">
            <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-717">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="71eb4-718">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-718">-or-</span>
          </span>
          <span data-ttu-id="71eb4-719">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-719">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="71eb4-720">等待结束，因为线程在未释放互斥的情况下退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-720">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="71eb4-721">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-721">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71eb4-722">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-722">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberSignature Language="F#" Value="val mutable WaitTimeout : int" Usage="System.Threading.WaitHandle.WaitTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="71eb4-723">指示在任何等待句柄终止之前 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 操作已超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-723">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span>
          </span>
          <span data-ttu-id="71eb4-724">此字段为常数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71eb4-724">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71eb4-725">此字段是一个可能的返回值的`WaitAny`。</span><span class="sxs-lookup"><span data-stu-id="71eb4-725">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71eb4-726">下面的代码示例演示如何使用线程池来同时搜索多个磁盘上的文件。</span><span class="sxs-lookup"><span data-stu-id="71eb4-726">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="71eb4-727">有关空间注意事项，搜索每个磁盘的根目录。</span><span class="sxs-lookup"><span data-stu-id="71eb4-727">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>