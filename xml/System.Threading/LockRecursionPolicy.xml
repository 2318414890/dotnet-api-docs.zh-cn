<Type Name="LockRecursionPolicy" FullName="System.Threading.LockRecursionPolicy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95b114e85c2b87b1b63dfc17d45647b87dc6c714" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37548742" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LockRecursionPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LockRecursionPolicy extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LockRecursionPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Enum LockRecursionPolicy" />
  <TypeSignature Language="C++ CLI" Value="public enum class LockRecursionPolicy" />
  <TypeSignature Language="F#" Value="type LockRecursionPolicy = " />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="80113-101">指定同一个线程是否可以多次进入一个锁定状态。</span>
      <span class="sxs-lookup">
        <span data-stu-id="80113-101">Specifies whether a lock can be entered multiple times by the same thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80113-102">默认的递归策略取决于锁的类型。</span><span class="sxs-lookup"><span data-stu-id="80113-102">The default recursion policy depends on the type of lock.</span></span> <span data-ttu-id="80113-103">默认策略和任何给定的锁类型的锁递归的确切行为，请参阅该类型的文档。</span><span class="sxs-lookup"><span data-stu-id="80113-103">For the default policy and the precise behavior of lock recursion for any given lock type, see the documentation for the type.</span></span> <span data-ttu-id="80113-104">例如，<xref:System.Threading.ReaderWriterLockSlim>类不允许一个线程进入写入模式的锁定，如果它已进入锁在读取模式下，而不考虑锁定策略设置，以减少死锁的可能性。</span><span class="sxs-lookup"><span data-stu-id="80113-104">For example, the <xref:System.Threading.ReaderWriterLockSlim> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks.</span></span>  
  
 <span data-ttu-id="80113-105">当前仅一个锁使用此枚举：</span><span class="sxs-lookup"><span data-stu-id="80113-105">Currently only one lock uses this enumeration:</span></span>  
  
-   <span data-ttu-id="80113-106"><xref:System.Threading.ReaderWriterLockSlim>。</span><span class="sxs-lookup"><span data-stu-id="80113-106"><xref:System.Threading.ReaderWriterLockSlim>.</span></span> <span data-ttu-id="80113-107">有关更多信息，请参见 <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="80113-107">For more information, see the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80113-108">下面的示例演示两个异常情况，一种取决于<xref:System.Threading.LockRecursionPolicy>设置，并且其中一个却没有。</span><span class="sxs-lookup"><span data-stu-id="80113-108">The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.</span></span>  
  
 <span data-ttu-id="80113-109">在第一个方案中，线程进入读取模式锁定，并尝试以递归方式进入读取的模式。</span><span class="sxs-lookup"><span data-stu-id="80113-109">In the first scenario, the thread enters the lock in read mode and then tries to enter read mode recursively.</span></span> <span data-ttu-id="80113-110">如果<xref:System.Threading.ReaderWriterLockSlim>创建使用默认构造函数，这会设置为 NoRecursion 递归策略，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="80113-110">If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to NoRecursion, an exception is thrown.</span></span> <span data-ttu-id="80113-111">如果 SupportsRecursion 用于创建<xref:System.Threading.ReaderWriterLockSlim>，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="80113-111">If SupportsRecursion is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="80113-112">在第二个方案中，线程进入读取模式锁定，然后尝试进入写入模式锁定。</span><span class="sxs-lookup"><span data-stu-id="80113-112">In the second scenario, the thread enters the lock in read mode and then tries to enter the lock in write mode.</span></span> <span data-ttu-id="80113-113"><xref:System.Threading.LockRecursionException> 是引发而不考虑锁定递归策略。</span><span class="sxs-lookup"><span data-stu-id="80113-113"><xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.</span></span>  
  
 [!code-csharp[System.Threading.LockRecursionPolicy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/example1.cs#1)]
 [!code-vb[System.Threading.LockRecursionPolicy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="NoRecursion">
      <MemberSignature Language="C#" Value="NoRecursion" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LockRecursionPolicy NoRecursion = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LockRecursionPolicy.NoRecursion" />
      <MemberSignature Language="VB.NET" Value="NoRecursion" />
      <MemberSignature Language="C++ CLI" Value="NoRecursion" />
      <MemberSignature Language="F#" Value="NoRecursion = 0" Usage="System.Threading.LockRecursionPolicy.NoRecursion" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="80113-114">如果线程尝试以递归方式进入锁定状态，将引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80113-114">If a thread tries to enter a lock recursively, an exception is thrown.</span>
          </span>
          <span data-ttu-id="80113-115">某些类可能会在此设置生效时允许使用特定的递归方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80113-115">Some classes may allow certain recursions when this setting is in effect.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SupportsRecursion">
      <MemberSignature Language="C#" Value="SupportsRecursion" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LockRecursionPolicy SupportsRecursion = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LockRecursionPolicy.SupportsRecursion" />
      <MemberSignature Language="VB.NET" Value="SupportsRecursion" />
      <MemberSignature Language="C++ CLI" Value="SupportsRecursion" />
      <MemberSignature Language="F#" Value="SupportsRecursion = 1" Usage="System.Threading.LockRecursionPolicy.SupportsRecursion" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="80113-116">线程可以采用递归方式进入锁定状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80113-116">A thread can enter a lock recursively.</span>
          </span>
          <span data-ttu-id="80113-117">某些类可能会限制此功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80113-117">Some classes may restrict this capability.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>