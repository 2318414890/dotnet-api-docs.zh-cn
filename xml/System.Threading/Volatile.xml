<Type Name="Volatile" FullName="System.Threading.Volatile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="317571d301455bf6428d067c32e6160d495cc342" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406647" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Volatile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Volatile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Volatile" />
  <TypeSignature Language="VB.NET" Value="Public Class Volatile" />
  <TypeSignature Language="C++ CLI" Value="public ref class Volatile abstract sealed" />
  <TypeSignature Language="F#" Value="type Volatile = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e0cc0-101">包含用于执行可变内存操作的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e0cc0-101">Contains methods for performing volatile memory operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-102">在多处理器系统中，易失性的写入操作可确保写入内存位置的值是立即可见的所有处理器。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-102">On a multiprocessor system, a volatile write operation ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="e0cc0-103">易失性的读取的操作将获取由任何处理器写入的内存位置的最新值。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-103">A volatile read operation obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="e0cc0-104">这些操作可能需要刷新处理器缓存，从而可能影响性能。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-104">These operations might require flushing processor caches, which can affect performance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e0cc0-105">在单处理器系统中，易失性的读取和写入确保值为读取或写入到内存中并不缓存 （例如，在处理器寄存器）。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-105">On a uniprocessor system, volatile reads and writes ensure that a value is read or written to memory and not cached (for example, in a processor register).</span></span> <span data-ttu-id="e0cc0-106">因此，这些操作可用于同步对另一个线程或硬件可以更新字段的访问。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-106">Thus, you can use these operations to synchronize access to a field that can be updated by another thread or by hardware.</span></span>  
  
 <span data-ttu-id="e0cc0-107">可变内存操作适用的同步，特殊情况，正常锁定不是可接受的替代项。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-107">Volatile memory operations are for special cases of synchronization, where normal locking is not an acceptable alternative.</span></span> <span data-ttu-id="e0cc0-108">在正常情况下，C#`lock`语句，Visual Basic`SyncLock`语句，和<xref:System.Threading.Monitor>类提供同步访问数据的最简单且最容易出错的方法和<xref:System.Lazy%601>类提供一个简单的方法，可以编写延迟初始化代码，而直接使用双重检查锁定。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-108">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide the easiest and least error-prone way of synchronizing access to data, and the <xref:System.Lazy%601> class provides a simple way to write lazy initialization code without directly using double-checked locking.</span></span>  
  
 <span data-ttu-id="e0cc0-109"><xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType>和<xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>方法启用中语言不支持的功能。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-109">The <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods enable functionality that is not supported in languages.</span></span> <span data-ttu-id="e0cc0-110">例如:</span><span class="sxs-lookup"><span data-stu-id="e0cc0-110">For example:</span></span>  
  
-   <span data-ttu-id="e0cc0-111">某些语言，如 Visual Basic 中，不能识别的可变内存操作的概念。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-111">Some languages, such as Visual Basic, do not recognize the concept of volatile memory operations.</span></span> <span data-ttu-id="e0cc0-112"><xref:System.Threading.Volatile>类提供该功能在这种语言。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-112">The <xref:System.Threading.Volatile> class provides that functionality in such languages.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e0cc0-113">调用这些方法之一只影响单个内存访问。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-113">Calling one of these methods affects only a single memory access.</span></span> <span data-ttu-id="e0cc0-114">若要提供字段的有效同步，对字段的所有访问必须都使用<xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType>和<xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-114">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="e0cc0-115">在 C# 中，使用`volatile`字段上的修饰符可保证每次访问该字段使用<xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType>和<xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>方法，但`volatile`修饰符不能应用于数组元素。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-115">In C#, using the `volatile` modifier on a field guarantees that every access to that field uses the <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods, but the `volatile` modifier cannot be applied to array elements.</span></span> <span data-ttu-id="e0cc0-116"><xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType>和<xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>方法可在数组元素。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-116">The <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods can be used on array elements.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e0cc0-117">读取字段值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-117">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="e0cc0-118">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-118">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static bool Read (ref bool location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Read(bool&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Read(bool % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; bool" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-119">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-119">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-120">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-120">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-121">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-121">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-122">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-122">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-123">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-123">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-124">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-124">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static byte Read (ref byte location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Read(unsigned int8&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Read(System::Byte % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; byte" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-125">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-125">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-126">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-126">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-127">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-127">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-128">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-128">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-129">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-129">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-130">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-130">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static double Read (ref double location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Read(float64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Read(double % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; double" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-131">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-131">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-132">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-132">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-133">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-133">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-134">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-134">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-135">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-135">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-136">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-136">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static short Read (ref short location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Read(int16&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Read(short % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; int16" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-137">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-137">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-138">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-138">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-139">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-139">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-140">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-140">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-141">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-141">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-142">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-142">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read(int % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; int" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-143">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-143">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-144">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-144">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-145">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-145">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-146">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-146">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-147">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-147">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-148">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-148">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static long Read (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Read(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Read(long % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; int64" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-149">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-149">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-150">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-150">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-151">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-151">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-152">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-152">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-153">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-153">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-154">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-154">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static IntPtr Read (ref IntPtr location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Read(native int&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Read(IntPtr % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; nativeint" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.IntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-155">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-155">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-156">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-156">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-157">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-157">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-158">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-158">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-159">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-159">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-160">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-160">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static sbyte Read (ref sbyte location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Read(int8&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Read(System::SByte % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; sbyte" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.SByte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-161">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-161">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-162">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-162">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-163">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-163">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-164">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-164">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-165">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-165">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-166">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-166">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static float Read (ref float location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Read(float32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Read(float % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; single" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-167">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-167">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-168">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-168">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-169">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-169">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-170">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-170">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-171">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-171">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-172">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-172">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static ushort Read (ref ushort location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Read(unsigned int16&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Read(System::UInt16 % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; uint16" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-173">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-173">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-174">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-174">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-175">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-175">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-176">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-176">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-177">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-177">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-178">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-178">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int16@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static uint Read (ref uint location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Read(unsigned int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Read(System::UInt32 % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; uint32" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-179">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-179">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-180">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-180">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-181">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-181">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-182">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-182">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-183">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-183">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-184">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-184">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static ulong Read (ref ulong location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Read(unsigned int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Read(System::UInt64 % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; uint64" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-185">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-185">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-186">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-186">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-187">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-187">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-188">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-188">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-189">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-189">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-190">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-190">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int64@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static UIntPtr Read (ref UIntPtr location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int Read(native unsigned int&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr Read(UIntPtr % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; unativeint" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UIntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-191">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-191">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-192">读取指定字段的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-192">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-193">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-193">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-194">读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-194">The value that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-195">无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-195">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-196">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-196">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.IntPtr@)" />
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ref T location) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;class T&gt;(!!T&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Class) (ByRef location As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T Read(T % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e0cc0-197">要读取的字段的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-197">The type of field to read.</span>
          </span>
          <span data-ttu-id="e0cc0-198">此类型必须是引用类型，而不是值类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-198">This must be a reference type, not a value type.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="e0cc0-199">要读取的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-199">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-200">从指定的字段读取对象引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-200">Reads the object reference from the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-201">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之后，则处理器无法将其移至此方法之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-201">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0cc0-202">对读取的 <paramref name="T" /> 的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-202">The reference to <paramref name="T" /> that was read.</span>
          </span>
          <span data-ttu-id="e0cc0-203">无论处理器的数目或处理器缓存的状态如何，该引用都是由计算机的任何处理器写入的最新引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-203">This reference is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-204">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-204">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e0cc0-205">向字段中写入值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-205">Writes a value to a field.</span>
          </span>
          <span data-ttu-id="e0cc0-206">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-206">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref bool location, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool&amp; location, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Boolean, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool % location, bool value);" />
      <MemberSignature Language="F#" Value="static member Write :  * bool -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-207">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-207">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-208">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-208">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-209">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-209">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-210">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-210">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-211">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-211">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-212">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-212">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref byte location, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int8&amp; location, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Byte % location, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member Write :  * byte -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-213">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-213">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-214">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-214">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-215">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-215">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-216">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-216">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-217">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-217">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-218">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-218">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref double location, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64&amp; location, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double % location, double value);" />
      <MemberSignature Language="F#" Value="static member Write :  * double -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-219">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-219">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-220">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-220">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-221">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-221">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-222">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-222">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-223">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-223">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-224">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-224">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref short location, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int16&amp; location, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(short % location, short value);" />
      <MemberSignature Language="F#" Value="static member Write :  * int16 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-225">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-225">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-226">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-226">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-227">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-227">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-228">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-228">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-229">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-229">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-230">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-230">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref int location, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32&amp; location, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int % location, int value);" />
      <MemberSignature Language="F#" Value="static member Write :  * int -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-231">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-231">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-232">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-232">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-233">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-233">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-234">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-234">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-235">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-235">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-236">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-236">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref long location, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64&amp; location, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long % location, long value);" />
      <MemberSignature Language="F#" Value="static member Write :  * int64 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-237">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-237">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-238">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-238">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-239">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-239">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-240">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-240">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-241">在需要进行此操作的系统上，插入如下所示的防止处理器重新对内存操作进行排序的内存栅：如果内存操作出现在代码中的此方法之前，则处理器不能将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-241">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a memory operation appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-242">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-242">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref IntPtr location, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(native int&amp; location, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(IntPtr % location, IntPtr value);" />
      <MemberSignature Language="F#" Value="static member Write :  * nativeint -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-243">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-243">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-244">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-244">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-245">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-245">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-246">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-246">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-247">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-247">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-248">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-248">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref sbyte location, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int8&amp; location, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::SByte % location, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member Write :  * sbyte -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.SByte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-249">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-249">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-250">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-250">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-251">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-251">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-252">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-252">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-253">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-253">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-254">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-254">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref float location, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32&amp; location, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float % location, float value);" />
      <MemberSignature Language="F#" Value="static member Write :  * single -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-255">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-255">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-256">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-256">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-257">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-257">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-258">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-258">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-259">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-259">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-260">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-260">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref ushort location, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int16&amp; location, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt16 % location, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member Write :  * uint16 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-261">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-261">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-262">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-262">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-263">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-263">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-264">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-264">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-265">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-265">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-266">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-266">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref uint location, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32&amp; location, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 % location, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member Write :  * uint32 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-267">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-267">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-268">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-268">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-269">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-269">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-270">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-270">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-271">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-271">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-272">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-272">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref ulong location, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64&amp; location, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 % location, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member Write :  * uint64 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-273">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-273">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-274">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-274">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-275">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-275">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-276">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-276">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-277">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-277">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-278">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-278">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref UIntPtr location, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(native unsigned int&amp; location, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(UIntPtr % location, UIntPtr value);" />
      <MemberSignature Language="F#" Value="static member Write :  * unativeint -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UIntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="e0cc0-279">将值写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-279">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-280">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-280">The value to write.</span>
          </span>
          <span data-ttu-id="e0cc0-281">立即写入一个值，以使该值对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-281">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-282">将指定的值写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-282">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-283">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-283">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-284">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-284">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (ref T location, T value) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;class T&gt;(!!T&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write``1(``0@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Class) (ByRef location As T, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static void Write(T % location, T value);" />
      <MemberSignature Language="F#" Value="static member Write :  * 'T -&gt; unit (requires 'T : null)" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e0cc0-285">要写入的字段的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-285">The type of field to write.</span>
          </span>
          <span data-ttu-id="e0cc0-286">此类型必须是引用类型，而不是值类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-286">This must be a reference type, not a value type.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="e0cc0-287">将对象引用写入的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-287">The field where the object reference is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e0cc0-288">要写入的对象引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-288">The object reference to write.</span>
          </span>
          <span data-ttu-id="e0cc0-289">立即写入一个引用，以使该引用对计算机中的所有处理器都可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-289">The reference is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0cc0-290">将指定的对象引用写入指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-290">Writes the specified object reference to the specified field.</span>
          </span>
          <span data-ttu-id="e0cc0-291">在需要进行此操作的系统上，插入防止处理器重新对内存操作进行排序的内存屏障，如下所示：如果读取或写入操作在代码中出现在此方法之前，则处理器无法将其移至此方法之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0cc0-291">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0cc0-292">有关更多信息，请参见 <xref:System.Threading.Volatile> 类。</span><span class="sxs-lookup"><span data-stu-id="e0cc0-292">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>