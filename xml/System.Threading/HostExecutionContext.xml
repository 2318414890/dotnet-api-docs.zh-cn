<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HostExecutionContext.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac586fd19cb38423cc3d28ee101130679b486f94e87.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86fd19cb38423cc3d28ee101130679b486f94e87</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.HostExecutionContext">
          <source>Encapsulates and propagates the host execution context across threads.</source>
          <target state="translated">在线程之间封装并传播宿主执行上下文。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.HostExecutionContext">
          <source>The <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> is part of a larger <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>是更大的一部分<ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.HostExecutionContext">
          <source>The host context migrates, or flows, with the execution context.</source>
          <target state="translated">主机上下文迁移，或流式处理，使用执行上下文。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Threading.HostExecutionContext">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.#ctor">
          <source>The default constructor creates a host execution context whose <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph> property value is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">默认构造函数创建的主机执行上下文其<ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph>属性值是<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.#ctor(System.Object)">
          <source>An object representing the host execution context state.</source>
          <target state="translated">一个表示宿主执行上下文状态的对象。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class using the specified state.</source>
          <target state="translated">使用指定的状态初始化 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.#ctor(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> is included with the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>附带<ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.#ctor(System.Object)">
          <source>The <ph id="ph1">`state`</ph> represents a safe handle containing the <ph id="ph2">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated"><ph id="ph1">`state`</ph>表示的安全句柄包含<ph id="ph2">`IUnknown`</ph>主机的指针。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.CreateCopy">
          <source>Creates a copy of the current host execution context.</source>
          <target state="translated">创建当前宿主执行上下文的副本。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.CreateCopy">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> object representing the host context for the current thread.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 对象，表示当前线程的宿主上下文。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.CreateCopy">
          <source>The copy can be used as the parameter to a <ph id="ph1">&lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType&gt;</ph> method call.</source>
          <target state="translated">副本可用作参数<ph id="ph1">&lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType&gt;</ph>方法调用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Threading.HostExecutionContext">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 类的当前实例使用的资源。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 类的当前实例所使用的所有资源。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>.</source>
          <target state="translated">在完成使用 <ph id="ph1">`Dispose`</ph> 后，应调用 <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 方法使 <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> 处于不可用状态。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> was occupying.</source>
          <target state="translated">在调用<ph id="ph1">`Dispose`</ph>，必须释放对所有引用<ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>以便垃圾回收器才能回收的内存，<ph id="ph3">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>占用。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>实现 Dispose 方法<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>.</source>
          <target state="translated">每次释放对 <ph id="ph1">`Dispose`</ph> 的最后一个引用前，均应调用 <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">否则，在垃圾回收器调用 <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> 对象的 <ph id="ph2">`Finalize`</ph> 方法之前，该对象正在使用的资源不会被释放。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">若要释放托管资源和非托管资源，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；若仅释放非托管资源，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>When overridden in a derived class, releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">当在派生类中重写时，释放 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 使用的非托管资源，并且可选择释放托管资源。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>This method is called by the <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph> method overload and the finalizer.</source>
          <target state="translated">调用此方法<ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph>方法重载和终结器。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph> invokes this protected method with the <ph id="ph2">`disposing`</ph> parameter set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph> 通过对此受保护的方法时，将调用<ph id="ph2">`disposing`</ph>参数设置为<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>The finalizer invokes this method with <ph id="ph1">`disposing`</ph> set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">终结器时，将调用此方法与<ph id="ph1">`disposing`</ph>设置为<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> references.</source>
          <target state="translated">当 <ph id="ph1">`disposing`</ph> 参数为 <ph id="ph2">`true`</ph> 时，此方法释放该 <ph id="ph3">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> 引用的、由任何托管对象持有的全部资源。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">此方法调用每个引用对象的 <ph id="ph1">`Dispose`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>This method can be called multiple times by other objects.</source>
          <target state="translated">由其他对象，此方法可以调用多次。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.</source>
          <target state="translated">在重写此方法，请注意不要引用已释放的早期调用中的对象。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Threading.HostExecutionContext.State">
          <source>Gets or sets the state of the host execution context.</source>
          <target state="translated">获取或设置宿主执行上下文的状态。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.HostExecutionContext.State">
          <source>An object representing the host execution context state.</source>
          <target state="translated">一个表示宿主执行上下文状态的对象。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.HostExecutionContext.State">
          <source>The <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph> property value represents a safe handle containing the <ph id="ph2">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph>属性值表示的安全句柄包含<ph id="ph2">`IUnknown`</ph>主机的指针。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>