<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AbandonedMutexException.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5aff749be646a23d7b3e5cd0e23fa4000612a6a58.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aff749be646a23d7b3e5cd0e23fa4000612a6a58</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.AbandonedMutexException">
          <source>The exception that is thrown when one thread acquires a <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> object that another thread has abandoned by exiting without releasing it.</source>
          <target state="translated">当某个线程获取由另一个线程放弃（即在未释放的情况下退出）的 <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> 对象时引发的异常。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>When a thread abandons a mutex, the exception is thrown in the next thread that acquires the mutex.</source>
          <target state="translated">当某个线程放弃一个 mutex 时，是在下一步获取互斥体的线程中引发异常。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>The thread might acquire the mutex because it was already waiting on the mutex or because it enters the mutex at a later time.</source>
          <target state="translated">该线程可能获取互斥体，因为它已等待互斥体，或者在更高版本时进入互斥体。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>An abandoned mutex indicates a serious programming error.</source>
          <target state="translated">放弃的 mutex 指示严重的编程错误。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</source>
          <target state="translated">如果一个线程退出时不释放互斥体，由 mutex 保护的数据结构可能不处于一致状态。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>Prior to version 2.0 of the .NET Framework, such problems were hard to discover because no exception was thrown if a wait completed as the result of an abandoned mutex.</source>
          <target state="translated">在.NET Framework 2.0 版中之前, 此类问题很难发现，因为在等待结束时放弃的 mutex 的结果已不引发任何异常。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> class.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>The next thread to request ownership of the mutex can handle this exception and proceed, provided that the integrity of the data structures can be verified.</source>
          <target state="translated">下一个请求 mutex 所有权的线程可以处理此异常并继续操作，前提是可以验证这些数据结构的完整性。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>The following code example executes a thread that abandons five mutexes, demonstrating their effects on the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> methods.</source>
          <target state="translated">下面的代码示例执行一个放弃五个互斥体，其效果演示上的线程<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>The value of the <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException.MutexIndex%2A&gt;</ph> property is displayed for the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> call.</source>
          <target state="translated">值<ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException.MutexIndex%2A&gt;</ph>属性显示为<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>The call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method is interrupted by one of the abandoned mutexes.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>某一已放弃的 mutex 中断方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AbandonedMutexException">
          <source>The other abandoned mutex could still cause an <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> to be thrown by subsequent wait methods.</source>
          <target state="translated">其他放弃的 mutex 仍可能会导致<ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph>后面的等待方法引发。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Threading.AbandonedMutexException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> class with default values.</source>
          <target state="translated">使用默认值初始化 <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "The wait completed due to an abandoned mutex."</source>
          <target state="translated">此构造函数初始化<ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>为系统提供的消息描述诸如"等待放弃的 mutex 因操作而完成。"的错误，将新实例的属性</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">此消息将当前系统区域性考虑在内。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source>The system-supplied error message string.</source>
          <target state="translated">系统提供的错误消息字符串。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor">
          <source>–1 (minus one).</source>
          <target state="translated">为-1 （减一）。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source>An error message that explains the reason for the exception.</source>
          <target state="translated">解释异常原因的错误消息。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">用指定的错误消息初始化 <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source>The content of <ph id="ph1">`message`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 的内容被设计为人可理解的形式。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> initialized with this constructor.</source>
          <target state="translated">下表显示的实例的初始属性值<ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph>使用此构造函数初始化。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source><ph id="ph1">`message`</ph>.</source>
          <target state="translated"><ph id="ph1">`message`</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
          <source>–1 (minus one).</source>
          <target state="translated">为-1 （减一）。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <ph id="ph1">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAny" /&gt;</ph> method, or –1 if the exception is thrown for the <ph id="ph2">&lt;see cref="Overload:System.Threading.WaitHandle.WaitOne" /&gt;</ph> or <ph id="ph3">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAll" /&gt;</ph> methods.</source>
          <target state="translated">如果对 <ph id="ph1">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAny" /&gt;</ph> 方法引发异常，则为等待句柄数组中被放弃的互斥体的索引，如果对 <ph id="ph2">&lt;see cref="Overload:System.Threading.WaitHandle.WaitOne" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAll" /&gt;</ph> 方法引发异常，则为 –1。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> object that represents the abandoned mutex.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> 对象，表示被放弃的互斥体。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> class with a specified index for the abandoned mutex, if applicable, and a <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> object that represents the mutex.</source>
          <target state="translated">用被放弃的互斥体的指定索引（如果可用）和表示该互斥体的 <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> 对象初始化 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "The wait completed due to an abandoned mutex."</source>
          <target state="translated">此构造函数初始化<ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>为系统提供的消息描述诸如"等待放弃的 mutex 因操作而完成。"的错误，将新实例的属性</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">此消息将当前系统区域性考虑在内。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> initialized with this constructor.</source>
          <target state="translated">下表显示的实例的初始属性值<ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph>使用此构造函数初始化。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source>A system-supplied error message string.</source>
          <target state="translated">系统提供的错误消息字符串。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`handle`</ph>.</source>
          <target state="translated"><ph id="ph1">`handle`</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`location`</ph>.</source>
          <target state="translated"><ph id="ph1">`location`</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">存放有关所引发异常的序列化对象数据的 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object that contains contextual information about the source or destination.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 对象，它包含有关源或目标的上下文信息。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">用序列化数据初始化 <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">此构造函数在反序列化过程中调用，以便重建通过流传输的异常对象。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>XML 和 SOAP 序列化<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>An error message that explains the reason for the exception.</source>
          <target state="translated">解释异常原因的错误消息。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">导致当前异常的异常。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> parameter is not <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> 参数不为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则当前异常会在处理内部异常的 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 块中引发。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> class with a specified error message and inner exception.</source>
          <target state="translated">用指定的错误信息和内部异常初始化 <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>The content of <ph id="ph1">`message`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 的内容被设计为人可理解的形式。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">因前一个异常而直接引发的异常应在 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性中包含对前一个异常的引用。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性返回的值与传递到构造函数中的值相同；或者，如果 <ph id="ph2">`null`</ph> 属性没有向构造函数提供内部异常值，则为 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> initialized with this constructor.</source>
          <target state="translated">下表显示的实例的初始属性值<ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph>使用此构造函数初始化。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source><ph id="ph1">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source><ph id="ph1">`message`</ph>.</source>
          <target state="translated"><ph id="ph1">`message`</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
          <source>–1 (minus one).</source>
          <target state="translated">为-1 （减一）。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source>An error message that explains the reason for the exception.</source>
          <target state="translated">解释异常原因的错误消息。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <ph id="ph1">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAny" /&gt;</ph> method, or –1 if the exception is thrown for the <ph id="ph2">&lt;see cref="Overload:System.Threading.WaitHandle.WaitOne" /&gt;</ph> or <ph id="ph3">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAll" /&gt;</ph> methods.</source>
          <target state="translated">如果对 <ph id="ph1">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAny" /&gt;</ph> 方法引发异常，则为等待句柄数组中被放弃的互斥体的索引，如果对 <ph id="ph2">&lt;see cref="Overload:System.Threading.WaitHandle.WaitOne" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAll" /&gt;</ph> 方法引发异常，则为 –1。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> object that represents the abandoned mutex.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> 对象，表示被放弃的互斥体。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> class with a specified error message, the index of the abandoned mutex, if applicable, and the abandoned mutex.</source>
          <target state="translated">用指定的错误信息、被放弃的互斥体的索引（如果可用）以及被放弃的互斥体初始化 <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source>The content of <ph id="ph1">`message`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 的内容被设计为人可理解的形式。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> initialized with this constructor.</source>
          <target state="translated">下表显示的实例的初始属性值<ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph>使用此构造函数初始化。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`message`</ph>.</source>
          <target state="translated"><ph id="ph1">`message`</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`handle`</ph>.</source>
          <target state="translated"><ph id="ph1">`handle`</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`location`</ph>.</source>
          <target state="translated"><ph id="ph1">`location`</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>An error message that explains the reason for the exception.</source>
          <target state="translated">解释异常原因的错误消息。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">导致当前异常的异常。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> parameter is not <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> 参数不为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则当前异常会在处理内部异常的 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 块中引发。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <ph id="ph1">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAny" /&gt;</ph> method, or –1 if the exception is thrown for the <ph id="ph2">&lt;see cref="Overload:System.Threading.WaitHandle.WaitOne" /&gt;</ph> or <ph id="ph3">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAll" /&gt;</ph> methods.</source>
          <target state="translated">如果对 <ph id="ph1">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAny" /&gt;</ph> 方法引发异常，则为等待句柄数组中被放弃的互斥体的索引，如果对 <ph id="ph2">&lt;see cref="Overload:System.Threading.WaitHandle.WaitOne" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAll" /&gt;</ph> 方法引发异常，则为 –1。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> object that represents the abandoned mutex.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> 对象，表示被放弃的互斥体。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> class with a specified error message, the inner exception, the index for the abandoned mutex, if applicable, and a <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> object that represents the mutex.</source>
          <target state="translated">用指定的错误信息、内部异常、被放弃的互斥体的索引（如果可用）以及表示该互斥体的 <ph id="ph1">&lt;see cref="T:System.Threading.AbandonedMutexException" /&gt;</ph> 对象初始化 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>The content of <ph id="ph1">`message`</ph> is a text string intended to inform the user about the exception.</source>
          <target state="translated">内容<ph id="ph1">`message`</ph>文本字符串用于通知用户有关异常。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">因前一个异常而直接引发的异常应在 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性中包含对前一个异常的引用。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性返回的值与传递到构造函数中的值相同；或者，如果 <ph id="ph2">`null`</ph> 属性没有向构造函数提供内部异常值，则为 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> initialized with this constructor.</source>
          <target state="translated">下表显示的实例的初始属性值<ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph>使用此构造函数初始化。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`message`</ph>.</source>
          <target state="translated"><ph id="ph1">`message`</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`handle`</ph>.</source>
          <target state="translated"><ph id="ph1">`handle`</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
          <source><ph id="ph1">`location`</ph>.</source>
          <target state="translated"><ph id="ph1">`location`</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Threading.AbandonedMutexException.Mutex">
          <source>Gets the abandoned mutex that caused the exception, if known.</source>
          <target state="translated">获取导致异常的被放弃的互斥体（如果已知的话）。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.Mutex">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> object that represents the abandoned mutex, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the abandoned mutex could not be identified.</source>
          <target state="translated">如果未能识别被放弃的互斥体，则为表示该被放弃的互斥体的 <ph id="ph1">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> 对象或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.Mutex">
          <source>If the exception is thrown on a call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph> returned is the abandoned mutex with the lowest index in the array of <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph> objects that was passed to <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or <ph id="ph5">`null`</ph> if the abandoned mutex could not be identified.</source>
          <target state="translated">如果在调用引发异常<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph>返回为数组中索引最小放弃的 mutex<ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph>对象传递到<ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>，或<ph id="ph5">`null`</ph>如果找不到放弃的 mutex标识。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.Mutex">
          <source>If the exception is thrown on a call to <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>, this property always returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">如果在调用引发异常<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>，此属性始终返回<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Threading.AbandonedMutexException.MutexIndex">
          <source>Gets the index of the abandoned mutex that caused the exception, if known.</source>
          <target state="translated">获取导致异常的被放弃的互斥体的索引（如果已知的话）。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.MutexIndex">
          <source>The index, in the array of wait handles passed to the <ph id="ph1">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAny" /&gt;</ph> method, of the <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> object that represents the abandoned mutex, or –1 if the index of the abandoned mutex could not be determined.</source>
          <target state="translated">如果未能确定被放弃的互斥体的索引，则为传递给 <ph id="ph1">&lt;see cref="Overload:System.Threading.WaitHandle.WaitAny" /&gt;</ph> 方法的等待句柄数组中的索引、表示该被放弃的互斥体的 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph> 对象的索引或 –1。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.MutexIndex">
          <source>If the exception is thrown on a call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType&gt;</ph> method, this property returns the index of the abandoned mutex with the lowest index in the array of <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> objects that was passed to <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or –1 if the abandoned mutex could not be identified.</source>
          <target state="translated">如果在调用引发异常<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType&gt;</ph>方法，此属性返回的放弃的 mutex 索引最小的索引的数组中<ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>对象传递到<ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>，或如果无法标识放弃的 mutex 为-1.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.MutexIndex">
          <source>If the exception is thrown on a call to <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>, this property always returns –1.</source>
          <target state="translated">如果在调用引发异常<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>，此属性始终返回 – 1。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.MutexIndex">
          <source>The following code example executes a thread that abandons five mutexes.</source>
          <target state="translated">下面的代码示例执行一个放弃五个互斥体的线程。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.MutexIndex">
          <source>The abandoned mutexes are used to demonstrate the effects on the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method calls.</source>
          <target state="translated">放弃的互斥体用于演示效果上<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>方法调用。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.MutexIndex">
          <source>The value of the <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException.MutexIndex%2A&gt;</ph> property is displayed for the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> call.</source>
          <target state="translated">值<ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException.MutexIndex%2A&gt;</ph>属性显示为<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.MutexIndex">
          <source>The call to <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> is interrupted by one of the abandoned mutexes.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>某一已放弃的 mutex 中断。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.AbandonedMutexException.MutexIndex">
          <source>The other abandoned mutex could still cause an <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> to be thrown by subsequent wait methods.</source>
          <target state="translated">其他放弃的 mutex 仍可能会导致<ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph>后面的等待方法引发。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>