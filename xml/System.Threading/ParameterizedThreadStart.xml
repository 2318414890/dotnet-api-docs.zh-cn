<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParameterizedThreadStart.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51f89ab27a5d48225389ff0ad41c3bbc265121c09.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f89ab27a5d48225389ff0ad41c3bbc265121c09</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ParameterizedThreadStart">
          <source>An object that contains data for the thread procedure.</source>
          <target state="translated">包含线程过程的数据的对象。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Represents the method that executes on a <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph>.</source>
          <target state="translated">表示在 <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> 上执行的方法。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>When a managed thread is created, the method that executes on the thread is represented by:</source>
          <target state="translated">创建一个托管的线程时，由表示的线程执行的方法：</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> delegate that is passed to the <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>委托传递给<ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Any method that has no parameters and that returns <ph id="ph1">`void`</ph> in C# or is a <ph id="ph2">`Sub`</ph> procedure in Visual Basic can represent the delegate.</source>
          <target state="translated">该操作没有参数，将返回的任何方法<ph id="ph1">`void`</ph>在 C# 或<ph id="ph2">`Sub`</ph>Visual Basic 中的过程可以表示该委托。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate that is passed to the <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托传递给<ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Any method that has a single parameter of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</source>
          <target state="translated">只有一个参数类型的任何方法<ph id="ph1">&lt;xref:System.Object&gt;</ph>并且返回 void 在 C# 或 Visual Basic 中的 Sub 过程可以表示该委托。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The thread does not begin executing until the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph> method is called.</source>
          <target state="translated">线程不会开始执行之前<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph>调用方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>的线程上调用委托和委托所表示的方法的第一个行处开始执行。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>In the case of the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate, the object that is passed to the <ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;</ph> method is passed to the delegate.</source>
          <target state="translated">情况下<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托，该对象传递给<ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;</ph>方法传递给委托。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Visual Basic and C# users can omit the <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate constructor when creating a thread.</source>
          <target state="translated">Visual Basic 和 C# 用户可以省略<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托构造函数创建线程时。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>In Visual Basic, use the <ph id="ph1">`AddressOf`</ph> operator when passing your method to the <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%2A&gt;</ph> constructor; for example, <ph id="ph3">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.</source>
          <target state="translated">在 Visual Basic 中，使用<ph id="ph1">`AddressOf`</ph>运算符传递到你的方法时<ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%2A&gt;</ph>构造函数; 例如， <ph id="ph3">`Dim t As New Thread(AddressOf ThreadProc)`</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>In C#, simply specify the name of the thread procedure.</source>
          <target state="translated">在 C# 中，只需指定线程过程的名称。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The compiler selects the correct delegate constructor.</source>
          <target state="translated">编译器选择正确的委托构造函数。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</source>
          <target state="translated">当你创建<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托 c + + 中的第一个参数的构造函数的实例方法为实例变量。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>For a static method, the first parameter of the constructor is zero.</source>
          <target state="translated">对于静态方法，构造函数的第一个参数为零。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</source>
          <target state="translated">对于静态方法，委托构造函数只需要一个参数： 回调方法中，由类名称限定的地址。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate and the <ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <ph id="ph3">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托和<ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>方法重载进行轻松地将数据传递给一个线程的过程，但此方法不是类型安全，因为可以将任何对象传递给<ph id="ph3">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</source>
          <target state="translated">若要将数据传递给一个线程的过程更可靠方法是放入一个辅助对象的线程的过程和数据字段。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Threads and Passing Data at Start Time<ept id="p1">](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>创建线程并在启动时传递数据<ept id="p1">](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)</ept>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate supports only a single parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托支持单个参数。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>You can pass multiple data items to the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> by making that parameter one of the following:</source>
          <target state="translated">你可以将传递到的多个数据项<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>通过进行以下情况之一，该参数：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>An array.</source>
          <target state="translated">一个数组。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A collection type, if all of the data items are of the same type.</source>
          <target state="translated">集合类型中，如果所有的数据项均为相同的类型。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A tuple type, such as <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> or <ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>.</source>
          <target state="translated">元组类型，如<ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph>或<ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The following code example uses a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate to execute a static method and an instance method.</source>
          <target state="translated">下面的代码示例使用<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托中执行的静态方法和实例方法。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The first <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate is represented by the static <ph id="ph2">`DoWork`</ph> method and the second is represented by the instance <ph id="ph3">`DoMoreWork`</ph> method.</source>
          <target state="translated">第一个<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托表示的静态<ph id="ph2">`DoWork`</ph>实例表示方法和第二个<ph id="ph3">`DoMoreWork`</ph>方法。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Both methods match the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate signature; that is, they have a single parameter of type <ph id="ph2">&lt;xref:System.Object&gt;</ph> and don't return a value.</source>
          <target state="translated">这两种方法匹配<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托签名; 也就是说，它们具有单个类型的参数<ph id="ph2">&lt;xref:System.Object&gt;</ph>且不返回值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The Visual Basic and C# compilers infer the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate from the signatures of the <ph id="ph2">`DoWork`</ph> and <ph id="ph3">`DoMoreWork`</ph> methods, and call the correct constructor.</source>
          <target state="translated">Visual Basic 和 C# 编译器推断<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委托的签名从<ph id="ph2">`DoWork`</ph>和<ph id="ph3">`DoMoreWork`</ph>方法，并调用正确的构造函数。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Thus, there is no explicit constructor call in the code.</source>
          <target state="translated">因此，代码中的没有显式构造函数调用。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>