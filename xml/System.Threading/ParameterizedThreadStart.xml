<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6367040f3868461a31ceec837781de60b418c2f6" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48762347" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="cb4a3-101">包含线程过程的数据的对象。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="cb4a3-102">表示在 <see cref="T:System.Threading.Thread" /> 上执行的方法。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb4a3-103">创建托管的线程时，由表示的线程执行的方法：</span><span class="sxs-lookup"><span data-stu-id="cb4a3-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="cb4a3-104">一个<xref:System.Threading.ThreadStart>传递给委托<xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType>构造函数。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="cb4a3-105">包含没有参数并且返回的任何方法`void`C# 中或为`Sub`Visual Basic 中的过程可以表示委托。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="cb4a3-106">一个<xref:System.Threading.ParameterizedThreadStart>传递给委托<xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType>构造函数。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="cb4a3-107">只有一个参数类型的任何方法<xref:System.Object>并且返回 void 在 C# 或是在 Visual Basic 中的 Sub 过程可以表示委托。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="cb4a3-108">在线程不会开始执行直至<xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType>调用方法。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="cb4a3-109"><xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>的线程上调用委托和执行在委托所表示的方法的第一行处开始。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="cb4a3-110">情况下<xref:System.Threading.ParameterizedThreadStart>委托对象传递给<xref:System.Threading.Thread.Start%28System.Object%29>方法传递给委托。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb4a3-111">Visual Basic 和 C# 用户可以省略<xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>委托构造函数创建线程时。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="cb4a3-112">在 Visual Basic 中，使用`AddressOf`运算符传递到您的方法时<xref:System.Threading.Thread.%23ctor%2A>构造函数; 例如， `Dim t As New Thread(AddressOf ThreadProc)`。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="cb4a3-113">在 C# 中，只需指定线程过程的名称。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="cb4a3-114">编译器选择正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb4a3-115">当你创建<xref:System.Threading.ParameterizedThreadStart>委托的第一个参数的构造函数的 c + + 中的实例方法为实例变量。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="cb4a3-116">对于静态方法，构造函数的第一个参数为零。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="cb4a3-117">对于静态方法的委托构造函数只需要一个参数： 回调方法，由类名称限定的地址。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="cb4a3-118"><xref:System.Threading.ParameterizedThreadStart>委托和<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>方法重载，更便于将数据传递给线程过程，但此方法不是类型安全，因为可以将任何对象传递给<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cb4a3-119">更可靠的方式将数据传递给线程过程是将线程过程和数据字段放入一个辅助对象。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="cb4a3-120">有关详细信息，请参阅[创建线程并传递数据的开始时间](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="cb4a3-121"><xref:System.Threading.ParameterizedThreadStart>委托支持仅将单个参数。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="cb4a3-122">可以将传递到多个数据项<xref:System.Threading.ParameterizedThreadStart>通过使该参数，以下项之一：</span><span class="sxs-lookup"><span data-stu-id="cb4a3-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="cb4a3-123">一个数组。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-123">An array.</span></span>  
  
-   <span data-ttu-id="cb4a3-124">集合类型中，如果所有数据项都属于同一类型。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="cb4a3-125">元组类型，如<xref:System.Tuple%602>或<xref:System.Tuple%604>。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb4a3-126">下面的代码示例使用<xref:System.Threading.ParameterizedThreadStart>委托来执行的静态方法和实例方法。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="cb4a3-127">第一个<xref:System.Threading.ParameterizedThreadStart>委托表示的静态`DoWork`实例所表示方法和第二个`DoMoreWork`方法。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="cb4a3-128">这两种方法与匹配<xref:System.Threading.ParameterizedThreadStart>委托的签名; 也就是说，它们具有单个类型的参数<xref:System.Object>且不返回值。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb4a3-129">Visual Basic 和 C# 编译器推断<xref:System.Threading.ParameterizedThreadStart>从签名的委托`DoWork`和`DoMoreWork`方法，并调用正确的构造函数。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="cb4a3-130">因此，是在代码中没有显式构造函数调用。</span><span class="sxs-lookup"><span data-stu-id="cb4a3-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="cb4a3-131">创建线程</span><span class="sxs-lookup"><span data-stu-id="cb4a3-131">Creating Threads</span></span></related>
  </Docs>
</Type>