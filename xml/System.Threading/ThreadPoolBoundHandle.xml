<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadPoolBoundHandle.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58d6d6bc39f371a703223dd853e8ab8ffdf1fb309.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d6d6bc39f371a703223dd853e8ab8ffdf1fb309</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.7.1,netstandard-2.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPoolBoundHandle">
          <source>Represents an I/O handle that is bound to the system thread pool and enables low-level components to receive notifications for asynchronous I/O operations.</source>
          <target state="translated">表示已绑定到系统线程池的 I/O 句柄，并使低级别组件能够接收异步 I/O 操作的通知。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPoolBoundHandle">
          <source>Returns an unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">返回一个指向 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 结构的非托管指针。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>An object from which to create the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> pointer.</source>
          <target state="translated">要从其中创建 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 指针的对象。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>Returns an unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure using the callback state and buffers associated with the specified <ph id="ph2">&lt;see cref="T:System.Threading.PreAllocatedOverlapped" /&gt;</ph> object.</source>
          <target state="translated">返回指向 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 结构的非托管指针，该结构使用与指定 <ph id="ph2">&lt;see cref="T:System.Threading.PreAllocatedOverlapped" /&gt;</ph> 对象关联的回调状态和缓冲区。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">一个指向 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 结构的非托管指针。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">此方法返回的非托管的指针可以传递到重叠的 I/O 操作中的操作系统。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>The  <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure is fixed in physical memory until the <ph id="ph2">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph>结构固定的物理内存中，直到<ph id="ph2">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph>调用方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> is currently in use for another I/O operation.</source>
          <target state="translated">另一 I/O 操作当前正在使用 <ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>This method was called after the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> was disposed.</source>
          <target state="translated">此释放 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> 后调用此方法。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>This method was called after <ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> was disposed.</source>
          <target state="translated">在释放 <ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> 后调用此方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>A delegate that represents the callback method to invoke when the asynchronous I/O operation completes.</source>
          <target state="translated">一个委托，表示在异步 I/O 操作完成时调用的回调方法。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>A user-provided object that distinguishes this <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instance from other <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instances.</source>
          <target state="translated">用户提供的对象，用于区分此 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 实例与其他 <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>An object or array of objects that represent the input or output buffer for the operation, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个对象或对象数组，用于表示操作的输入和输出缓冲区，或者表示 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>Each object represents a buffer, such an array of bytes.</source>
          <target state="translated">每个对象（如字节数组）表示一个缓冲区。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>Returns an unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete, a user-provided object that supplies context, and managed objects that serve as buffers.</source>
          <target state="translated">向 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 结构返回一个非托管指针，指定在异步 I/O 操作完成时调用的委托、可提供上下文的用户提供的对象，以及充当缓冲区的托管对象。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">一个指向 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 结构的非托管指针。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>This method was called after the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> object was disposed.</source>
          <target state="translated">在释放 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> 对象后调用此方法。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>An object that holds the operating system handle.</source>
          <target state="translated">保存操作系统句柄的对象。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The handle must have been opened for overlapped I/O in unmanaged code.</source>
          <target state="translated">必须在非托管代码中为重叠 I/O 打开句柄。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> for the specified handle, which is bound to the system thread pool.</source>
          <target state="translated">为指定句柄返回 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph>，后者已绑定到系统线程池。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> for <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>, which is bound to the system thread pool.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="handle" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph>，后者已绑定到系统线程池。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>This method should be called once per handle.</source>
          <target state="translated">此方法应调用一次每句柄。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle&gt;</ph> object does not take ownership of <ph id="ph2">`handle`</ph>; it remains the responsibility of the caller to call <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle&gt;</ph>对象不采用的所有权<ph id="ph2">`handle`</ph>; 它将一直调用方调用的责任<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> has been disposed.</source>
          <target state="translated">已释放 <ph id="ph1">&lt;paramref name="handle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> does not refer to a valid I/O handle.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> 未引用有效的 I/O 句柄。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> refers to a handle that has not been opened for overlapped I/O.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> 引用的句柄没有为重叠 I/O 打开。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> refers to a handle that has already been bound.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> 引用了已绑定的句柄。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.Dispose">
          <source>Releases all unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> instance.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> 实例使用的所有非托管资源。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>An unmanaged pointer to the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure structure to be freed.</source>
          <target state="translated">一个非托管指针，指向要释放的 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 结构。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Frees the memory associated with a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure allocated by the <ph id="ph2">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> method.</source>
          <target state="translated">释放与 <ph id="ph2">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> 方法分配的 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 结构关联的内存。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>You must call the <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method exactly once on every <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> unmanaged pointer allocated by using the <ph id="ph3">&lt;xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A&gt;</ph> method.</source>
          <target state="translated">必须调用<ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph>方法一次每个<ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph>使用分配的非托管的指针<ph id="ph3">&lt;xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>If you do not call the <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method, you will leak memory.</source>
          <target state="translated">如果不调用<ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph>方法，你将会泄漏内存。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method method more than once on the same <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> unmanaged pointer, memory will be corrupted.</source>
          <target state="translated">如果调用<ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph>方法方法上相同多次<ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph>非托管的指针，将损坏内存。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>This method was called after the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> object was disposed.</source>
          <target state="translated">在释放 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> 对象后调用此方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source>An unmanaged pointer to the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure from which to return the associated user-provided object.</source>
          <target state="translated">指向 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 结构的非托管指针，将从该结构中返回用户提供的关联对象。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source>Returns the user-provided object that was specified when the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instance was allocated by calling the <ph id="ph2">&lt;see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">返回用户提供的对象，该对象在通过调用 <ph id="ph2">&lt;see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /&gt;</ph> 方法分配 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 实例时指定。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source>A user-provided object that distinguishes this <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instance from other <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instances, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if one was not specified when the intstance was allocated by calling the <ph id="ph4">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> method.</source>
          <target state="translated">用户提供的对象，用于区分此 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 实例与其他 <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 实例，或者，如果在通过调用 <ph id="ph4">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> 方法分配实例时未进行指定，则为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadPoolBoundHandle.Handle">
          <source>Gets the bound operating system handle.</source>
          <target state="translated">获取绑定的操作系统句柄。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadPoolBoundHandle.Handle">
          <source>An object that holds the bound operating system handle.</source>
          <target state="translated">一个对象，保存绑定的操作系统句柄。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>