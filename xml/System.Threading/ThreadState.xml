<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadState.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a93f1275163776d80a243344a4a1beb07c33cc80.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a93f1275163776d80a243344a4a1beb07c33cc80</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadState">
          <source>Specifies the execution states of a <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph>.</source>
          <target state="translated">指定 <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> 的执行状态。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> enumeration is of interest only in a few debugging scenarios.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph>枚举属于仅涉及几个调试方案。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Your code should never use the thread state to synchronize the activities of threads.</source>
          <target state="translated">永远不应在代码中使用线程状态来同步线程活动。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> defines a set of all possible execution states for threads.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> 定义一组所有可能的执行状态的线程。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Once a thread is created, it is in at least one of the states until it terminates.</source>
          <target state="translated">线程创建后，它是状态中的至少一个直到其终止时为止。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Threads created within the common language runtime are initially in the <ph id="ph1">`Unstarted`</ph> state, while external threads that come into the runtime are already in the <ph id="ph2">`Running`</ph> state.</source>
          <target state="translated">在公共语言运行时内创建的线程都最初处于<ph id="ph1">`Unstarted`</ph>状态，而进入运行时的外部线程中已存在的<ph id="ph2">`Running`</ph>状态。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>An <ph id="ph1">`Unstarted`</ph> thread is transitioned into the <ph id="ph2">`Running`</ph> state by calling <ph id="ph3">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Unstarted`</ph>线程转换到<ph id="ph2">`Running`</ph>通过调用状态<ph id="ph3">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Not all combinations of <ph id="ph1">`ThreadState`</ph> values are valid; for example, a thread cannot be in both the <ph id="ph2">`Aborted`</ph> and <ph id="ph3">`Unstarted`</ph> states.</source>
          <target state="translated">并非所有组合<ph id="ph1">`ThreadState`</ph>值是有效的; 例如，线程不能在同时<ph id="ph2">`Aborted`</ph>和<ph id="ph3">`Unstarted`</ph>状态。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>There are two thread state enumerations,<ph id="ph1">&lt;xref:System.Threading.ThreadState?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.ThreadState?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有两个线程状态枚举<ph id="ph1">&lt;xref:System.Threading.ThreadState?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Diagnostics.ThreadState?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The following table shows the actions that cause a change of state.</source>
          <target state="translated">下表显示导致状态更改的操作。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Action</source>
          <target state="translated">操作</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>ThreadState</source>
          <target state="translated">ThreadState</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>A thread is created within the common language runtime.</source>
          <target state="translated">在公共语言运行时内创建线程。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Unstarted</source>
          <target state="translated">尚未启动</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph> method on the new thread, and the call returns.</source>
          <target state="translated">另一个线程调用<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph>上新线程，并且调用的方法返回。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> method does not return until the new thread has started running.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>方法不返回直到新线程已开始运行。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>There is no way to know at what point the new thread will start running, during the call to <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.</source>
          <target state="translated">没有无法知道在哪个点新线程将开始运行，到在呼叫期间<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Running</source>
          <target state="translated">正在运行</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph></source>
          <target state="translated">线程调用 <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>WaitSleepJoin</source>
          <target state="translated">WaitSleepJoin</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> on another object.</source>
          <target state="translated">线程对另一个对象调用 <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>WaitSleepJoin</source>
          <target state="translated">WaitSleepJoin</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> on another thread.</source>
          <target state="translated">线程对另一个线程调用 <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>WaitSleepJoin</source>
          <target state="translated">WaitSleepJoin</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph></source>
          <target state="translated">另一个线程调用 <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Running</source>
          <target state="translated">正在运行</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph></source>
          <target state="translated">另一个线程调用 <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>SuspendRequested</source>
          <target state="translated">SuspendRequested</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread responds to a <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph> request.</source>
          <target state="translated">线程响应 <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph> 请求。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Suspended</source>
          <target state="translated">挂起</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph></source>
          <target state="translated">另一个线程调用 <ph id="ph1">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Running</source>
          <target state="translated">正在运行</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph></source>
          <target state="translated">另一个线程调用 <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>AbortRequested</source>
          <target state="translated">AbortRequested</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread responds to a <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> request.</source>
          <target state="translated">线程响应 <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> 请求。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Stopped</source>
          <target state="translated">已停止</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>A thread is terminated.</source>
          <target state="translated">线程已终止。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Stopped</source>
          <target state="translated">已停止</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>In addition to the states noted above, there is also the <ph id="ph1">`Background`</ph> state, which indicates whether the thread is running in the background or foreground.</source>
          <target state="translated">除了上文中记下的状态，此外还有<ph id="ph1">`Background`</ph>状态，这指示线程是否正在运行的背景或前景中。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>A thread can be in more than one state at a given time.</source>
          <target state="translated">在多个状态可以是一个线程，而且在给定时间。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>For example, if a thread is blocked on a call to <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph>, and another thread calls <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> on the blocked thread, the blocked thread will be in both the <ph id="ph3">`WaitSleepJoin`</ph> and the <ph id="ph4">`AbortRequested`</ph> states at the same time.</source>
          <target state="translated">例如，如果一个线程被阻止在调用<ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph>，和另一个线程调用<ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>被阻止的线程上被阻塞的线程将同时处于<ph id="ph3">`WaitSleepJoin`</ph>和<ph id="ph4">`AbortRequested`</ph>在同一时间的状态。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>In this case, as soon as the thread returns from the call to <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> or is interrupted, it will receive the <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> to begin aborting.</source>
          <target state="translated">在此情况下，线程从调用返回时，就会立即<ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph>或中断，它将接收<ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>开始中止。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=nameWithType&gt;</ph> property of a thread provides the current state of a thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=nameWithType&gt;</ph>线程的属性提供一个线程的当前状态。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Applications must use a bitmask to determine whether a thread is running.</source>
          <target state="translated">应用程序必须使用一个位掩码确定线程是否正在运行。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Since the value for <ph id="ph1">`Running`</ph> is zero (0), test whether a thread is running by using C# code such as <ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> or Visual Basic code such as <ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>.</source>
          <target state="translated">由于值<ph id="ph1">`Running`</ph>零 (0)，测试是否通过使用 C# 代码，如运行线程<ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph>或 Visual Basic 代码，如<ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Aborted">
          <source>The thread state includes <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.AbortRequested" /&gt;</ph> and the thread is now dead, but its state has not yet changed to <ph id="ph2">&lt;see cref="F:System.Threading.ThreadState.Stopped" /&gt;</ph>.</source>
          <target state="translated">线程状态包括 <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.AbortRequested" /&gt;</ph> 并且该线程现在已死，但其状态尚未更改为 <ph id="ph2">&lt;see cref="F:System.Threading.ThreadState.Stopped" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.AbortRequested">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph> method has been invoked on the thread, but the thread has not yet received the pending <ph id="ph2">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph> that will attempt to terminate it.</source>
          <target state="translated">已对线程调用了 <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph> 方法，但线程尚未收到试图终止它的挂起的 <ph id="ph2">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Background">
          <source>The thread is being executed as a background thread, as opposed to a foreground thread.</source>
          <target state="translated">线程正作为后台线程执行（相对于前台线程而言）。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Background">
          <source>This state is controlled by setting the <ph id="ph1">&lt;see cref="P:System.Threading.Thread.IsBackground" /&gt;</ph> property.</source>
          <target state="translated">此状态可以通过设置 <ph id="ph1">&lt;see cref="P:System.Threading.Thread.IsBackground" /&gt;</ph> 属性来控制。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Running">
          <source>The thread has been started, it is not blocked, and there is no pending <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph>.</source>
          <target state="translated">线程已启动，它未被阻塞，并且没有挂起的 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Stopped">
          <source>The thread has stopped.</source>
          <target state="translated">线程已停止。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.StopRequested">
          <source>The thread is being requested to stop.</source>
          <target state="translated">正在请求线程停止。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.StopRequested">
          <source>This is for internal use only.</source>
          <target state="translated">这仅用于内部。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Suspended">
          <source>The thread has been suspended.</source>
          <target state="translated">线程已挂起。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.SuspendRequested">
          <source>The thread is being requested to suspend.</source>
          <target state="translated">正在请求线程挂起。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Unstarted">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Start" /&gt;</ph> method has not been invoked on the thread.</source>
          <target state="translated">尚未对线程调用 <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Start" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.WaitSleepJoin">
          <source>The thread is blocked.</source>
          <target state="translated">线程已被阻止。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.WaitSleepJoin">
          <source>This could be the result of calling <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Sleep(System.Int32)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Thread.Join" /&gt;</ph>, of requesting a lock — for example, by calling <ph id="ph3">&lt;see cref="M:System.Threading.Monitor.Enter(System.Object)" /&gt;</ph> or <ph id="ph4">&lt;see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" /&gt;</ph> — or of waiting on a thread synchronization object such as <ph id="ph5">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph>.</source>
          <target state="translated">这可能是因为：调用 <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Sleep(System.Int32)" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="M:System.Threading.Thread.Join" /&gt;</ph>、请求锁定（例如通过调用 <ph id="ph3">&lt;see cref="M:System.Threading.Monitor.Enter(System.Object)" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" /&gt;</ph>）或等待线程同步对象（例如 <ph id="ph5">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph>）。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>