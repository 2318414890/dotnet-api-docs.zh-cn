<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadPool.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c68b7762e25c13529637c3ed6d542d63fee277f04.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68b7762e25c13529637c3ed6d542d63fee277f04</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</source>
          <target state="translated">提供一个线程池，该线程池可用于执行任务、发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</source>
          <target state="translated">许多应用程序创建花费大量时间处于睡眠状态，等待事件发生的线程。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</source>
          <target state="translated">其他线程可能会进入休眠状态，只是为了被唤醒，定期轮询更改或更新状态信息。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</source>
          <target state="translated">线程池，可通过提供一个受系统管理的辅助线程池上的应用程序更有效地使用线程。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Examples of operations that use thread pool threads include the following:</source>
          <target state="translated">使用线程池线程的操作的示例包括：</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</source>
          <target state="translated">当你创建<ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象来执行某些任务以异步方式，默认情况下，计划任务在线程池线程上运行。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Asynchronous timers use the thread pool.</source>
          <target state="translated">异步计时器使用线程池。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Thread pool threads execute callbacks from the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class and raise events from the <ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">线程池线程执行从回调<ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>类，并引发事件从<ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you use registered wait handles, a system thread monitors the status of the wait handles.</source>
          <target state="translated">当你使用已注册的等待句柄时，某个系统线程监视等待句柄的状态。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</source>
          <target state="translated">等待操作完成后，线程池中的工作线程将执行对应的回调函数。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method to queue a method for execution on a thread pool thread.</source>
          <target state="translated">当调用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>方法进行排队以在线程池线程上执行的方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You do this by passing the method a <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegate.</source>
          <target state="translated">通过传递给该方法执行此操作<ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph>委托。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The delegate has the signature</source>
          <target state="translated">委托具有签名</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>where <ph id="ph1">`state`</ph> is an object that contains data to be used by the delegate.</source>
          <target state="translated">其中<ph id="ph1">`state`</ph>是一个对象，包含由委托使用的数据。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The actual data can be passed to the delegate by calling the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">实际的数据可以通过调用传递给委托<ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The threads in the managed thread pool are background threads.</source>
          <target state="translated">在托管的线程池线程是后台线程。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>That is, their <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> properties are <ph id="ph2">`true`</ph>.</source>
          <target state="translated">即，其<ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph>属性<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This means that a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread will not keep an application running after all foreground threads have exited.</source>
          <target state="translated">这意味着，<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>线程不会对所有前台线程均都退出之后运行的应用程序。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute.</source>
          <target state="translated">如果线程池重用某个线程，它不会清除在线程本地存储或使用标记的字段中的数据<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Therefore, when a method examines thread local storage or fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</source>
          <target state="translated">因此，检查线程本地存储区或的字段的方法标记有<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性，它找到的值可能会留下线程池线程更早版本使用过程中。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can also queue work items that are not related to a wait operation to the thread pool.</source>
          <target state="translated">你可以排队到线程池等待操作不相关的工作项。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>To request that a work item be handled by a thread in the thread pool, call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">若要请求的工作项来处理线程池中线程，调用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</source>
          <target state="translated">此方法将对该方法或将由所选线程池中的线程调用的委托的引用作为参数。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is no way to cancel a work item after it has been queued.</source>
          <target state="translated">没有方法来取消工作项之后它已在排队等候。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Timer-queue timers and registered wait operations also use the thread pool.</source>
          <target state="translated">计时器队列中的计时器和已注册的等待操作也使用线程池。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Their callback functions are queued to the thread pool.</source>
          <target state="translated">它们的回调函数要排队发送至线程池。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is one thread pool per process.</source>
          <target state="translated">没有每个进程的一个线程池。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
          <target state="translated">从 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> 开始，进程的线程池的默认大小取决于若干因素，例如虚拟地址空间的大小。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>A process can call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> method to determine the number of threads.</source>
          <target state="translated">进程可以调用 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> 方法，以确定线程数。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The number of threads in the thread pool can be changed by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> method.</source>
          <target state="translated">可以使用更改线程池中的线程数<ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Each thread uses the default stack size and runs at the default priority.</source>
          <target state="translated">每个线程使用的默认堆栈大小，并运行默认优先级。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the <ph id="ph1">`CorSetMaxThreads`</ph> function, defined in the mscoree.h file.</source>
          <target state="translated">承载.NET Framework 的非托管的代码可以更改通过使用线程池的大小<ph id="ph1">`CorSetMaxThreads`</ph>mscoree.h 文件中定义的函数。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">线程池按需提供新的辅助线程或 I/O 完成线程直到它达到每个类别的最低要求。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">当达到最小值时，线程池可以在该类别中创建其他线程或等待，直到一些任务完成。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">从 <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> 开始，线程池创建和销毁工作线程以优化吞吐量，吞吐量被定义为每个单位时间完成的任务数。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">线程过少可能无法实现可用资源的最优利用，而线程过多则可能增加资源争用。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">需求较低时，线程池线程的实际数量可以低于最小值。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method to obtain these minimum values.</source>
          <target state="translated">可以使用 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> 方法来获取这些最小值。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number of threads.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph>方法来增加最小线程数。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">但是，不必要地增加这些值可能导致性能问题。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">如果在同一时间开始太多的任务，则所有任务均可能会很慢。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">大多数情况下，使用自己的分配线程算法，线程池将更好地执行任务。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In the following example, the main application thread  queues a method named <ph id="ph1">`ThreadProc`</ph> to execute on a thread pool thread, sleeps for one second, and then exits.</source>
          <target state="translated">在下面的示例中，主应用程序线程方法排入队列名为<ph id="ph1">`ThreadProc`</ph>在线程池线程，休眠 1 秒，然后退出上执行。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The <ph id="ph1">`ThreadProc`</ph> method simply displays a message.</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph>方法只需显示一条消息。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If you comment out the call to the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, the main thread exits before         method runs on the thread pool thread.</source>
          <target state="translated">如果注释掉对的调用<ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph>方法，在主线程退出之前在线程池线程上运行的方法。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</source>
          <target state="translated">线程池使用后台线程，不保留应用程序的运行的所有前台线程已都终止。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>(This         is a simple example of a race condition.)</source>
          <target state="translated">（这是一个简单的示例的争用条件）。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">将操作系统句柄绑定到 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that holds the handle.</source>
          <target state="translated">持有句柄的 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">在非托管端必须为重叠 I/O 打开该句柄。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">将操作系统句柄绑定到 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果绑定了句柄，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">表示调用非托管的代码的能力。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> that holds the operating system handle.</source>
          <target state="translated">保存操作系统句柄的 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">在非托管端必须为重叠 I/O 打开该句柄。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">将操作系统句柄绑定到 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果绑定了句柄，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The <ph id="ph1">`osHandle`</ph> parameter should be a <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, which derives from the abstract <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">`osHandle`</ph>参数应为<ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>，它派生自抽象<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">表示调用非托管的代码的能力。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available worker threads.</source>
          <target state="translated">可用辅助线程的数目。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available asynchronous I/O threads.</source>
          <target state="translated">可用异步 I/O 线程的数目。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the difference between the maximum number of thread pool threads returned by the <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> method, and the number currently active.</source>
          <target state="translated">检索由 <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> 方法返回的最大线程池线程数和当前活动线程数之间的差值。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the number of additional worker threads that can be started, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the number of additional asynchronous I/O threads that can be started.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph>返回时，指定的变量<ph id="ph2">`workerThreads`</ph>包含可以启动的其他工作线程和指定的变量的数量<ph id="ph3">`completionPortThreads`</ph>包含可以是其他异步 I/O 线程数启动。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</source>
          <target state="translated">如果没有可用的线程，其他线程池请求保持排队状态，直到线程池线程变为可用。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The following example displays the number of worker threads and I/O threads available when a simple app is started.</source>
          <target state="translated">简单的应用启动时，下面的示例显示工作线程和可用的 I/O 线程的数。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">线程池中辅助线程的最大数目。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">线程池中异步 I/O 线程的最大数目。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">检索可以同时处于活动状态的线程池请求的数目。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the maximum number of worker threads allowed in the thread pool, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the maximum number of asynchronous I/O threads allowed in the thread pool.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>返回时，指定的变量<ph id="ph2">`workerThreads`</ph>包含在线程池中允许的工作线程和指定的变量的最大数目<ph id="ph3">`completionPortThreads`</ph>包含异步 I/O 线程中允许的最大数目线程池。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> method to determine the actual number of threads in the thread pool at any given time.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph>方法来确定在任何给定时间在线程池中的线程的实际数量。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph>在线程池中设置的最大工作线程和异步 I/O 线程数。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can queue as many thread pool requests as system memory allows.</source>
          <target state="translated">你可以排队尽可能的系统内存允许线程池请求。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</source>
          <target state="translated">如果有更多的请求数多于线程池线程数，则其他请求保持排队状态，直到线程池线程变为可用。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</source>
          <target state="translated">下面的代码示例演示如何检索最大和可用线程池中的线程数的计数。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A work item is queued that uses <ph id="ph1">`FileStream`</ph> to asynchronously write to two files.</source>
          <target state="translated">工作项已使用的排队<ph id="ph1">`FileStream`</ph>以异步方式写入两个文件。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The callback methods are timed to overlap.</source>
          <target state="translated">回叫方法超时重叠。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</source>
          <target state="translated">工作线程处理的工作项，并根据速度和计算机上的处理器数目，一个或两个完成端口线程处理写入操作。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">当此方法返回时，将包含线程池根据需要创建的最少数量的辅助线程。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">当此方法返回时，将包含线程池根据需要创建的最少数量的异步 I/O 线程。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">发出新的请求时，在切换到管理线程创建和销毁的算法之前检索线程池按需创建的线程的最小数量。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">线程池按需提供新的辅助线程或 I/O 完成线程直到它达到每个类别的最低要求。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">默认情况下，最小线程数设置为在系统上的处理器数。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">当达到最小值时，线程池可以在该类别中创建其他线程或等待，直到一些任务完成。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，线程池创建和销毁线程以优化吞吐量，吞吐量被定义为每个单位时间完成的任务数。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">线程过少可能无法实现可用资源的最优利用，而线程过多则可能增加资源争用。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">需求较低时，线程池线程的实际数量可以低于最小值。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">下面的示例将最小工作线程数设置为 4，并保留的最小异步 I/O 完成线程数的原始值。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Queues a method for execution.</source>
          <target state="translated">将方法排入队列以便执行。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">此方法在有线程池线程变得可用时执行。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the method to be executed.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph>，表示要执行的方法。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Queues a method for execution.</source>
          <target state="translated">将方法排入队列以便执行。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">此方法在有线程池线程变得可用时执行。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated">如果此方法成功排队，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果无法将该工作项排队，则引发 <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> overload that accepts an object containing the necessary data.</source>
          <target state="translated">您可以将数据排队方法的类定义方法，或可以使用的实例字段中所需的放置<ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph>重载接受一个包含所需数据的对象。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 用户可以省略<ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph>构造函数，并且只需使用<ph id="ph2">`AddressOf`</ph>运算符传递到回调方法时<ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic 会自动调用正确的委托构造函数。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Version Information</source>
          <target state="translated">版本信息</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">在.NET Framework 2.0 版中，<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph>属性值将传播到辅助线程排队使用<ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">在早期版本，不会传播的主体的信息。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph> method overload to queue a task, which is represented by the <ph id="ph2">`ThreadProc`</ph> method, to execute when a thread becomes available.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph>方法重载将任务排入队列，由<ph id="ph2">`ThreadProc`</ph>方法，以在有线程变得可用时执行。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>No task information is supplied with this overload.</source>
          <target state="translated">使用此重载不提供任何任务信息。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Therefore, the information that is available to the <ph id="ph1">`ThreadProc`</ph> method is limited to the object the method belongs to.</source>
          <target state="translated">因此，可供信息<ph id="ph1">`ThreadProc`</ph>方法仅限于该方法所属的对象。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">承载公共语言运行时 (CLR) 的宿主不支持此操作。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> representing the method to execute.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph>，它表示要执行的方法。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An object containing data to be used by the method.</source>
          <target state="translated">包含方法所用数据的对象。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues a method for execution, and specifies an object containing data to be used by the method.</source>
          <target state="translated">将方法排入队列以便执行，并指定包含该方法所用数据的对象。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">此方法在有线程池线程变得可用时执行。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated">如果此方法成功排队，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果无法将该工作项排队，则引发 <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>If the callback method requires complex data, you can define a class to contain the data.</source>
          <target state="translated">如果回调方法需要复杂的数据，你可以定义一个类来包含的数据。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 用户可以省略<ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph>构造函数，并且只需使用<ph id="ph2">`AddressOf`</ph>运算符传递到回调方法时<ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic 会自动调用正确的委托构造函数。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Version Information</source>
          <target state="translated">版本信息</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">在.NET Framework 2.0 版中，<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph>属性值将传播到辅助线程排队使用<ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">在早期版本，不会传播的主体的信息。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The following example shows how to create an object that contains task information.</source>
          <target state="translated">下面的示例演示如何创建包含任务信息的对象。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</source>
          <target state="translated">它还演示了如何在线程池将该对象传递给排队等待执行的任务。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">承载公共语言运行时 (CLR) 的宿主不支持此操作。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate that is waiting for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</source>
          <target state="translated">注册正在等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 的委托。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">要注册的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 而非 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">向 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数发出信号时调用的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> 委托。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">传递给委托的对象。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">以毫秒为单位的超时。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 参数为 0（零），则函数将测试对象状态并立即返回。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 为 -1，则函数的超时间隔永远不过期。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，表示在调用了委托后，线程将不再在 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数上等待；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，表示每次完成等待操作后都重置计时器，直到注销等待。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">注册一个等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 的委托，并指定一个 32 位有符号整数来表示超时值（以毫秒为单位）。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated">封装本机句柄的 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>此方法返回时，请调用其<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法来释放对等待句柄的引用。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">我们建议你始终调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法，即使你指定<ph id="ph2">`true`</ph>为<ph id="ph3">`executeOnlyOnce`</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">垃圾回收的工作的详细信息有效地如果调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法而不是具体取决于已注册的等待句柄的终结器。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法指定的委托排队到线程池。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">在下列情况之一发生时，工作线程将执行委托：</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">指定的对象处于终止状态。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">达到超时间隔。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法检查指定的对象的当前状态<ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">如果对象的状态为非终止状态，该方法将注册一个等待操作。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">等待操作由线程池中的线程执行。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">对象的状态将被发送信号或超时间隔结束时，将通过工作线程执行委托。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">如果<ph id="ph1">`timeOutInterval`</ph>参数不是 0 （零） 和<ph id="ph2">`executeOnlyOnce`</ph>参数是<ph id="ph3">`false`</ph>，每次该事件处于有信号状态或达到超时间隔重置计时器。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>为<ph id="ph2">`waitObject`</ph>不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>标志，以便在一个单独的线程池线程上调度每个回调。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">而不是<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph>与的最大计数为 1。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要取消等待操作，请调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">等待线程使用 Win32<ph id="ph1">`WaitForMultipleObjects`</ph>函数来监视已注册的等待操作。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">因此，如果必须使用相同的本机操作系统句柄中多次调用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>，你必须使用 Win32 句柄复制<ph id="ph2">`DuplicateHandle`</ph>函数。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">请注意，不应传递到<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>，因为等待线程可能检测不到该事件已终止之前将重置。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">再返回，该函数修改修改某些类型的同步对象的状态。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">修改仅发生在其终止的状态导致等待条件得到满足的对象。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">例如，信号量的计数减少 1。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">版本信息</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">从.NET Framework 2.0 版中，开始<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph>属性值将传播到辅助线程排队使用<ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">在早期版本，不会传播的主体的信息。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 参数小于 -1。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">要注册的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 而非 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">向 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数发出信号时调用的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> 委托。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">传递给委托的对象。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">以毫秒为单位的超时。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 参数为 0（零），则函数将测试对象状态并立即返回。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 为 -1，则函数的超时间隔永远不过期。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，表示在调用了委托后，线程将不再在 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数上等待；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，表示每次完成等待操作后都重置计时器，直到注销等待。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">注册一个等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated">封装本机句柄的 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>此方法返回时，请调用其<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法来释放对等待句柄的引用。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">我们建议你始终调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法，即使你指定<ph id="ph2">`true`</ph>为<ph id="ph3">`executeOnlyOnce`</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">垃圾回收的工作的详细信息有效地如果调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法而不是具体取决于已注册的等待句柄的终结器。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法指定的委托排队到线程池。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">在下列情况之一发生时，工作线程将执行委托：</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">指定的对象处于终止状态。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">达到超时间隔。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法检查指定的对象的当前状态<ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">如果对象的状态为非终止状态，该方法将注册一个等待操作。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">等待操作由线程池中的线程执行。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">对象的状态将被发送信号或超时间隔结束时，将通过工作线程执行委托。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">如果<ph id="ph1">`timeOutInterval`</ph>参数不是 0 （零） 和<ph id="ph2">`executeOnlyOnce`</ph>参数是<ph id="ph3">`false`</ph>，每次该事件处于有信号状态或达到超时间隔重置计时器。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>为<ph id="ph2">`waitObject`</ph>不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>标志，以便在一个单独的线程池线程上调度每个回调。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">而不是<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph>与的最大计数为 1。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要取消等待操作，请调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">等待线程使用 Win32<ph id="ph1">`WaitForMultipleObjects`</ph>函数来监视已注册的等待操作。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">因此，如果必须使用相同的本机操作系统句柄中多次调用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>，你必须使用 Win32 句柄复制<ph id="ph2">`DuplicateHandle`</ph>函数。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">请注意，不应传递到<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>，因为等待线程可能检测不到该事件已终止之前将重置。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">再返回，该函数修改修改某些类型的同步对象的状态。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">修改仅发生在其终止的状态导致等待条件得到满足的对象。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">例如，信号量的计数减少 1。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">版本信息</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">从.NET Framework 2.0 版中，开始<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph>属性值将传播到辅助线程排队使用<ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">在早期版本，不会传播的主体的信息。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 参数小于 -1。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">要注册的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 而非 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">向 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数发出信号时调用的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> 委托。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">传递给委托的对象。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 表示的超时时间。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> 为 0（零），则函数将测试对象状态并立即返回。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> 为 -1，则函数的超时间隔永远不过期。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，表示在调用了委托后，线程将不再在 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数上等待；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，表示每次完成等待操作后都重置计时器，直到注销等待。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">注册一个等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 的委托，并指定一个 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 值来表示超时时间。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated">封装本机句柄的 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>此方法返回时，请调用其<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法来释放对等待句柄的引用。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">我们建议你始终调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法，即使你指定<ph id="ph2">`true`</ph>为<ph id="ph3">`executeOnlyOnce`</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">垃圾回收的工作的详细信息有效地如果调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法而不是具体取决于已注册的等待句柄的终结器。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法指定的委托排队到线程池。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">在下列情况之一发生时，工作线程将执行委托：</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">指定的对象处于终止状态。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">达到超时间隔。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法检查指定的对象的当前状态<ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">如果对象的状态为非终止状态，该方法将注册一个等待操作。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">等待操作由线程池中的线程执行。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">对象的状态将被发送信号或超时间隔结束时，将通过工作线程执行委托。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">如果<ph id="ph1">`timeOutInterval`</ph>参数不是 0 （零） 和<ph id="ph2">`executeOnlyOnce`</ph>参数是<ph id="ph3">`false`</ph>，每次该事件处于有信号状态或达到超时间隔重置计时器。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>为<ph id="ph2">`waitObject`</ph>不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>标志，以便在一个单独的线程池线程上调度每个回调。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">而不是<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph>与的最大计数为 1。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要取消等待操作，请调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">等待线程使用 Win32<ph id="ph1">`WaitForMultipleObjects`</ph>函数来监视已注册的等待操作。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">因此，如果必须使用相同的本机操作系统句柄中多次调用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>，你必须使用 Win32 句柄复制<ph id="ph2">`DuplicateHandle`</ph>函数。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">请注意，不应传递到<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>，因为等待线程可能检测不到该事件已终止之前将重置。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">再返回，该函数修改修改某些类型的同步对象的状态。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">修改仅发生在其终止的状态导致等待条件得到满足的对象。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">例如，信号量的计数减少 1。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">版本信息</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">从.NET Framework 2.0 版中，开始<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph>属性值将传播到辅助线程排队使用<ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">在早期版本，不会传播的主体的信息。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 参数小于 -1。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 参数大于 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">要注册的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 而非 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">向 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数发出信号时调用的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> 委托。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">传递给委托的对象。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">以毫秒为单位的超时。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 参数为 0（零），则函数将测试对象状态并立即返回。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 为 -1，则函数的超时间隔永远不过期。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，表示在调用了委托后，线程将不再在 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数上等待；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，表示每次完成等待操作后都重置计时器，直到注销等待。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that can be used to cancel the registered wait operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph>，可用于取消已注册的等待操作。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>此方法返回时，请调用其<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法来释放对等待句柄的引用。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">我们建议你始终调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法，即使你指定<ph id="ph2">`true`</ph>为<ph id="ph3">`executeOnlyOnce`</ph>。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">垃圾回收的工作的详细信息有效地如果调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法而不是具体取决于已注册的等待句柄的终结器。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法指定的委托排队到线程池。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">在下列情况之一发生时，工作线程将执行委托：</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">指定的对象处于终止状态。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">达到超时间隔。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法检查指定的对象的当前状态<ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">如果对象的状态为非终止状态，该方法将注册一个等待操作。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">等待操作由线程池中的线程执行。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">对象的状态将被发送信号或超时间隔结束时，将通过工作线程执行委托。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">如果<ph id="ph1">`timeOutInterval`</ph>参数不是 0 （零） 和<ph id="ph2">`executeOnlyOnce`</ph>参数是<ph id="ph3">`false`</ph>，每次该事件处于有信号状态或达到超时间隔重置计时器。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>为<ph id="ph2">`waitObject`</ph>不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>标志，以便在一个单独的线程池线程上调度每个回调。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">而不是<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph>与的最大计数为 1。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要取消等待操作，请调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">等待线程使用 Win32<ph id="ph1">`WaitForMultipleObjects`</ph>函数来监视已注册的等待操作。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">因此，如果必须使用相同的本机操作系统句柄中多次调用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>，你必须使用 Win32 句柄复制<ph id="ph2">`DuplicateHandle`</ph>函数。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">请注意，不应传递到<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>，因为等待线程可能检测不到该事件已终止之前将重置。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">再返回，该函数修改修改某些类型的同步对象的状态。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">修改仅发生在其终止的状态导致等待条件得到满足的对象。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">例如，信号量的计数减少 1。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">版本信息</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">从.NET Framework 2.0 版中，开始<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph>属性值将传播到辅助线程排队使用<ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">在早期版本，不会传播的主体的信息。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>时要执行方法指定的回调方法指定的等待句柄处于有信号状态。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph>, and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">在此示例中，回调方法是<ph id="ph1">`WaitProc`</ph>，和等待句柄是<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">该示例定义了<ph id="ph1">`TaskInfo`</ph>类来保存时它将执行传递给回调的信息。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">该示例创建<ph id="ph1">`TaskInfo`</ph>对象并将其分配某些字符串数据。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>返回<ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法分配给<ph id="ph3">`Handle`</ph>字段<ph id="ph4">`TaskInfo`</ph>对象，以便回调方法有权<ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In addition to specifying <ph id="ph1">`TaskInfo`</ph> as the object to pass to the callback method, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that the task will wait for, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one second time-out interval, and multiple callbacks.</source>
          <target state="translated">除了指定<ph id="ph1">`TaskInfo`</ph>作为要传递给回调方法，调用的对象<ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法指定<ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>任务将等待，<ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph>委托，表示<ph id="ph5">`WaitProc`</ph>回调方法一秒的超时间隔和多个回调。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">当主线程发出信号<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>通过调用其<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法，<ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph>调用委托。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a time-out occurred.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph>方法测试<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>以确定是否发生超时。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping additional callbacks.</source>
          <target state="translated">如果由于等待句柄已收到信号，而调用的回调<ph id="ph1">`WaitProc`</ph>方法注销<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>，从而停止其他回调。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In the case of a time-out, the task continues to wait.</source>
          <target state="translated">对于超时，该任务将继续等待。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph>方法结束时将消息输出到控制台。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 参数小于 -1。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">线程池中辅助线程的最大数目。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">线程池中异步 I/O 线程的最大数目。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Sets the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">设置可以同时处于活动状态的线程池的请求数目。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果更改成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</source>
          <target state="translated">不能设置辅助线程或 I/O 完成线程的最大数量为一个数字小于的计算机上的处理器数。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine how many processors are present, retrieve the value of the <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">若要确定存在多少处理器，检索的值<ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</source>
          <target state="translated">此外，你不能设置辅助线程或为一个小于最小相应工作线程数的数字的 I/O 完成线程或 I/O 完成线程的最大数目。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine the minimum thread pool size,  call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method.</source>
          <target state="translated">若要确定最小线程池大小，请调用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</source>
          <target state="translated">如果承载公共语言运行时，例如通过 Internet 信息服务 (IIS) 或 SQL Server，主机可以限制或阻止更改到线程池大小。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Use caution when changing the maximum number of threads in the thread pool.</source>
          <target state="translated">更改的最大线程池中的线程数时要格外小心。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>While your code might benefit, the changes might have an adverse effect on code libraries you use.</source>
          <target state="translated">虽然你的代码中获益，所做的更改可能产生负面影响上使用的代码库。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Setting the thread pool size too large can cause performance problems.</source>
          <target state="translated">设置线程池大小太大，则会导致性能问题。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</source>
          <target state="translated">如果在同一时间执行过多的线程，任务切换开销就成为一个重要的因素。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">表示控制线程的能力。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">权限值： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">要由线程池根据需要创建的新的最小工作程序线程数。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">要由线程池根据需要创建的新的最小空闲异步 I/O 线程数。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">发出新的请求时，在切换到管理线程创建和销毁的算法之前设置线程池按需创建的线程的最小数量。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果更改成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">线程池按需提供新的辅助线程或 I/O 完成线程直到它达到每个类别的最低要求。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">当达到最小值时，线程池可以在该类别中创建其他线程或等待，直到一些任务完成。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>，线程池创建和销毁线程以优化吞吐量，吞吐量被定义为每个单位时间完成的任务数。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">线程过少可能无法实现可用资源的最优利用，而线程过多则可能增加资源争用。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">需求较低时，线程池线程的实际数量可以低于最小值。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> returns <ph id="ph3">`false`</ph> and does not change either of the minimum values.</source>
          <target state="translated">如果你指定为负数或大于最大活动线程池线程数的数字 (使用获取<ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>)，<ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph>返回<ph id="ph3">`false`</ph>并不会更改两个最小值。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">默认情况下，最小线程数设置为在系统上的处理器数。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number ofthreads.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph>方法来增加最小的数字 ofthreads。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">但是，不必要地增加这些值可能导致性能问题。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">如果在同一时间开始太多的任务，则所有任务均可能会很慢。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>In most cases, the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">在大多数情况下，线程池将使用其自己的分配线程算法更好地执行。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Reducing the minimum to less than the number of processors can also hurt performance.</source>
          <target state="translated">减少到小于处理器数也会影响性能的最小值。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">下面的示例将最小工作线程数设置为 4，并保留的最小异步 I/O 完成线程数的原始值。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">表示控制线程的能力。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">权限值： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure to queue.</source>
          <target state="translated">要排队的 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 结构。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Queues an overlapped I/O operation for execution.</source>
          <target state="translated">将重叠的 I/O 操作排队以便执行。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation was successfully queued to an I/O completion port; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果成功地将此操作排队到 I/O 完成端口，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>For information about using native Win32 overlapped I/O, see the <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure, and the <ph id="ph3">`OVERLAPPED`</ph> structure in the Win32 Platform SDK.</source>
          <target state="translated">有关使用本机 Win32 信息重叠的 I/O，请参阅<ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph>类，<ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph>结构，与<ph id="ph3">`OVERLAPPED`</ph>Win32 平台 SDK 中的结构。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph> method could inadvertently open up a security hole.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>方法可能会无意中打开安全漏洞。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>, the stack of the thread pool thread does not have the context of the actual callers.</source>
          <target state="translated">工作线程池线程使用的排队时<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>，线程池线程的堆栈不具有实际调用方的上下文。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">恶意代码可能会利用这一点避开权限检查。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph>，表示当线程池中的线程选择工作项时调用的委托。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The object that is passed to the delegate when serviced from the thread pool.</source>
          <target state="translated">在接受线程池服务时传递给委托的对象。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">将指定的委托排队到线程池，但不会将调用堆栈传播到辅助线程。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method succeeds; <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated">如果方法成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果未能将该工作项排队，则引发 <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">与不同<ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>则不会传播到辅助线程的调用堆栈。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>可能无意中打开安全漏洞。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">工作线程池线程使用的排队时<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>，线程池线程的堆栈不会实际调用方的上下文。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">恶意代码可能会利用这一点避开权限检查。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An out-of-memory condition was encountered.</source>
          <target state="translated">遇到了内存不足的情况。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The work item could not be queued.</source>
          <target state="translated">未能将该工作项排队。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">注册委托以等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>，但不会将调用堆栈传播到辅助线程。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">要注册的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 而非 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">向 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数发出信号时调用的委托。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">传递给委托的对象。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">以毫秒为单位的超时。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 参数为 0（零），则函数将测试对象状态并立即返回。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 为 -1，则函数的超时间隔永远不过期。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，表示在调用了委托后，线程将不再在 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数上等待；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，表示每次完成等待操作后都重置计时器，直到注销等待。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, using a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">注册一个等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 的委托，并使用一个 32 位带符号整数来表示超时时间（以毫秒为单位）。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">此方法不将调用堆栈传播到辅助线程。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> 对象，可用于取消已注册的等待操作。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">与不同<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>则不会传播到辅助线程的调用堆栈。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>可能无意中打开安全漏洞。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">工作线程池线程使用的排队时<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>，线程池线程的堆栈不会实际调用方的上下文。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">恶意代码可能会利用这一点避开权限检查。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>为<ph id="ph2">`waitObject`</ph>不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>标志，以便在一个单独的线程池线程上调度每个回调。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>此方法返回时，请调用其<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法来释放对等待句柄的引用。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">我们建议你始终调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法，即使你指定<ph id="ph2">`true`</ph>为<ph id="ph3">`executeOnlyOnce`</ph>。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">垃圾回收的工作的详细信息有效地如果调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法而不是具体取决于已注册的等待句柄的终结器。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 参数小于 -1。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">要注册的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 而非 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">向 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数发出信号时调用的委托。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">传递给委托的对象。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">以毫秒为单位的超时。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 参数为 0（零），则函数将测试对象状态并立即返回。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 为 -1，则函数的超时间隔永远不过期。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，表示在调用了委托后，线程将不再在 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数上等待；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，表示每次完成等待操作后都重置计时器，直到注销等待。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">注册一个等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">此方法不将调用堆栈传播到辅助线程。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> 对象，可用于取消已注册的等待操作。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">与不同<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>则不会传播到辅助线程的调用堆栈。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>可能无意中打开安全漏洞。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">工作线程池线程使用的排队时<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>，线程池线程的堆栈不会实际调用方的上下文。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">恶意代码可能会利用这一点避开权限检查。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>为<ph id="ph2">`waitObject`</ph>不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>标志，以便在一个单独的线程池线程上调度每个回调。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>此方法返回时，请调用其<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法来释放对等待句柄的引用。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">我们建议你始终调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法，即使你指定<ph id="ph2">`true`</ph>为<ph id="ph3">`executeOnlyOnce`</ph>。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">垃圾回收的工作的详细信息有效地如果调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法而不是具体取决于已注册的等待句柄的终结器。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 参数小于 -1。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">要注册的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 而非 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">向 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数发出信号时调用的委托。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">传递给委托的对象。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 表示的超时时间。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> 为 0（零），则函数将测试对象状态并立即返回。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> 为 -1，则函数的超时间隔永远不过期。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，表示在调用了委托后，线程将不再在 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数上等待；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，表示每次完成等待操作后都重置计时器，直到注销等待。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out. This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">注册一个等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 的委托，并指定一个 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 值来表示超时时间。此方法不将调用堆栈传播到辅助线程。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> 对象，可用于取消已注册的等待操作。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">与不同<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>则不会传播到辅助线程的调用堆栈。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>可能无意中打开安全漏洞。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">工作线程池线程使用的排队时<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>，线程池线程的堆栈不会实际调用方的上下文。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">恶意代码可能会利用这一点避开权限检查。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>为<ph id="ph2">`waitObject`</ph>不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>标志，以便在一个单独的线程池线程上调度每个回调。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>此方法返回时，请调用其<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法来释放对等待句柄的引用。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">我们建议你始终调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法，即使你指定<ph id="ph2">`true`</ph>为<ph id="ph3">`executeOnlyOnce`</ph>。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">垃圾回收的工作的详细信息有效地如果调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法而不是具体取决于已注册的等待句柄的终结器。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 参数小于 -1。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 参数大于 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">要注册的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 而非 <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">向 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数发出信号时调用的委托。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">传递给委托的对象。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">以毫秒为单位的超时。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 参数为 0（零），则函数将测试对象状态并立即返回。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 为 -1，则函数的超时间隔永远不过期。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，表示在调用了委托后，线程将不再在 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 参数上等待；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，表示每次完成等待操作后都重置计时器，直到注销等待。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">此方法不将调用堆栈传播到辅助线程。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> 对象，可用于取消已注册的等待操作。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">与不同<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>则不会传播到辅助线程的调用堆栈。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>可能无意中打开安全漏洞。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">工作线程池线程使用的排队时<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>，线程池线程的堆栈不会实际调用方的上下文。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">恶意代码可能会利用这一点避开权限检查。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>为<ph id="ph2">`waitObject`</ph>不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>标志，以便在一个单独的线程池线程上调度每个回调。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>此方法返回时，请调用其<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法来释放对等待句柄的引用。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">我们建议你始终调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法，即使你指定<ph id="ph2">`true`</ph>为<ph id="ph3">`executeOnlyOnce`</ph>。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">垃圾回收的工作的详细信息有效地如果调用<ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph>方法而不是具体取决于已注册的等待句柄的终结器。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>