<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a9494e53c8c3c4a4db1cc0f00c52b716f7945b8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406991" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <TypeSignature Language="F#" Value="type ThreadPool = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8888a-101">提供一个线程池，该线程池可用于执行任务、发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8888a-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-102">许多应用程序创建花费大量时间处于睡眠状态，等待事件发生的线程。</span><span class="sxs-lookup"><span data-stu-id="8888a-102">Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</span></span> <span data-ttu-id="8888a-103">其他线程可能会进入休眠状态，只是为了被唤醒，定期轮询更改或更新状态信息。</span><span class="sxs-lookup"><span data-stu-id="8888a-103">Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</span></span> <span data-ttu-id="8888a-104">线程池，可通过提供一个受系统管理的辅助线程池上的应用程序更有效地使用线程。</span><span class="sxs-lookup"><span data-stu-id="8888a-104">The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</span></span> <span data-ttu-id="8888a-105">使用线程池线程的操作的示例包括：</span><span class="sxs-lookup"><span data-stu-id="8888a-105">Examples of operations that use thread pool threads include the following:</span></span>  
  
-   <span data-ttu-id="8888a-106">当你创建<xref:System.Threading.Tasks.Task>或<xref:System.Threading.Tasks.Task%601>对象来执行某些任务以异步方式，默认情况下，计划任务在线程池线程上运行。</span><span class="sxs-lookup"><span data-stu-id="8888a-106">When you create a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</span></span>  
  
-   <span data-ttu-id="8888a-107">异步计时器使用线程池。</span><span class="sxs-lookup"><span data-stu-id="8888a-107">Asynchronous timers use the thread pool.</span></span> <span data-ttu-id="8888a-108">线程池线程执行从回调<xref:System.Threading.Timer?displayProperty=nameWithType>类，并引发事件从<xref:System.Timers.Timer?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="8888a-108">Thread pool threads execute callbacks from the <xref:System.Threading.Timer?displayProperty=nameWithType> class and raise events from the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span>  
  
-   <span data-ttu-id="8888a-109">当你使用已注册的等待句柄时，某个系统线程监视等待句柄的状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-109">When you use registered wait handles, a system thread monitors the status of the wait handles.</span></span> <span data-ttu-id="8888a-110">等待操作完成后，线程池中的工作线程将执行对应的回调函数。</span><span class="sxs-lookup"><span data-stu-id="8888a-110">When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</span></span>  
  
-   <span data-ttu-id="8888a-111">当调用<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法进行排队以在线程池线程上执行的方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-111">When you call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method to queue a method for execution on a thread pool thread.</span></span> <span data-ttu-id="8888a-112">通过传递给该方法执行此操作<xref:System.Threading.WaitCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="8888a-112">You do this by passing the method a <xref:System.Threading.WaitCallback> delegate.</span></span>   <span data-ttu-id="8888a-113">委托具有签名</span><span class="sxs-lookup"><span data-stu-id="8888a-113">The delegate has the signature</span></span>  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     <span data-ttu-id="8888a-114">其中`state`是一个对象，包含由委托使用的数据。</span><span class="sxs-lookup"><span data-stu-id="8888a-114">where `state` is an object that contains data to be used by the delegate.</span></span> <span data-ttu-id="8888a-115">实际的数据可以通过调用传递给委托<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-115">The actual data can be passed to the delegate by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8888a-116">在托管的线程池线程是后台线程。</span><span class="sxs-lookup"><span data-stu-id="8888a-116">The threads in the managed thread pool are background threads.</span></span> <span data-ttu-id="8888a-117">即，其<xref:System.Threading.Thread.IsBackground%2A>属性`true`。</span><span class="sxs-lookup"><span data-stu-id="8888a-117">That is, their <xref:System.Threading.Thread.IsBackground%2A> properties are `true`.</span></span> <span data-ttu-id="8888a-118">这意味着，<xref:System.Threading.ThreadPool>线程不会对所有前台线程均都退出之后运行的应用程序。</span><span class="sxs-lookup"><span data-stu-id="8888a-118">This means that a <xref:System.Threading.ThreadPool> thread will not keep an application running after all foreground threads have exited.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8888a-119">如果线程池重用某个线程，它不会清除在线程本地存储或使用标记的字段中的数据<xref:System.ThreadStaticAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="8888a-119">When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="8888a-120">因此，检查线程本地存储区或的字段的方法标记有<xref:System.ThreadStaticAttribute>属性，它找到的值可能会留下线程池线程更早版本使用过程中。</span><span class="sxs-lookup"><span data-stu-id="8888a-120">Therefore, when a method examines thread local storage or fields that are marked with the <xref:System.ThreadStaticAttribute> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</span></span>  
  
 <span data-ttu-id="8888a-121">你可以排队到线程池等待操作不相关的工作项。</span><span class="sxs-lookup"><span data-stu-id="8888a-121">You can also queue work items that are not related to a wait operation to the thread pool.</span></span> <span data-ttu-id="8888a-122">若要请求的工作项来处理线程池中线程，调用<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-122">To request that a work item be handled by a thread in the thread pool, call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="8888a-123">此方法将对该方法或将由所选线程池中的线程调用的委托的引用作为参数。</span><span class="sxs-lookup"><span data-stu-id="8888a-123">This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</span></span> <span data-ttu-id="8888a-124">没有方法来取消工作项之后它已在排队等候。</span><span class="sxs-lookup"><span data-stu-id="8888a-124">There is no way to cancel a work item after it has been queued.</span></span>  
  
 <span data-ttu-id="8888a-125">计时器队列中的计时器和已注册的等待操作也使用线程池。</span><span class="sxs-lookup"><span data-stu-id="8888a-125">Timer-queue timers and registered wait operations also use the thread pool.</span></span> <span data-ttu-id="8888a-126">它们的回调函数要排队发送至线程池。</span><span class="sxs-lookup"><span data-stu-id="8888a-126">Their callback functions are queued to the thread pool.</span></span>  
  
 <span data-ttu-id="8888a-127">没有每个进程的一个线程池。</span><span class="sxs-lookup"><span data-stu-id="8888a-127">There is one thread pool per process.</span></span> <span data-ttu-id="8888a-128">从 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 开始，进程的线程池的默认大小取决于若干因素，例如虚拟地址空间的大小。</span><span class="sxs-lookup"><span data-stu-id="8888a-128">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</span></span> <span data-ttu-id="8888a-129">进程可以调用 <xref:System.Threading.ThreadPool.GetMaxThreads%2A> 方法，以确定线程数。</span><span class="sxs-lookup"><span data-stu-id="8888a-129">A process can call the <xref:System.Threading.ThreadPool.GetMaxThreads%2A> method to determine the number of threads.</span></span> <span data-ttu-id="8888a-130">可以使用更改线程池中的线程数<xref:System.Threading.ThreadPool.SetMaxThreads%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-130">The number of threads in the thread pool can be changed by using the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> method.</span></span> <span data-ttu-id="8888a-131">每个线程使用的默认堆栈大小，并运行默认优先级。</span><span class="sxs-lookup"><span data-stu-id="8888a-131">Each thread uses the default stack size and runs at the default priority.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8888a-132">承载.NET Framework 的非托管的代码可以更改通过使用线程池的大小`CorSetMaxThreads`mscoree.h 文件中定义的函数。</span><span class="sxs-lookup"><span data-stu-id="8888a-132">Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the `CorSetMaxThreads` function, defined in the mscoree.h file.</span></span>  
  
 <span data-ttu-id="8888a-133">线程池按需提供新的辅助线程或 I/O 完成线程直到它达到每个类别的最低要求。</span><span class="sxs-lookup"><span data-stu-id="8888a-133">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="8888a-134">当达到最小值时，线程池可以在该类别中创建其他线程或等待，直到一些任务完成。</span><span class="sxs-lookup"><span data-stu-id="8888a-134">When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="8888a-135">从 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 开始，线程池创建和销毁工作线程以优化吞吐量，吞吐量被定义为每个单位时间完成的任务数。</span><span class="sxs-lookup"><span data-stu-id="8888a-135">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="8888a-136">线程过少可能无法实现可用资源的最优利用，而线程过多则可能增加资源争用。</span><span class="sxs-lookup"><span data-stu-id="8888a-136">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8888a-137">需求较低时，线程池线程的实际数量可以低于最小值。</span><span class="sxs-lookup"><span data-stu-id="8888a-137">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="8888a-138">可以使用 <xref:System.Threading.ThreadPool.GetMinThreads%2A> 方法来获取这些最小值。</span><span class="sxs-lookup"><span data-stu-id="8888a-138">You can use the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method to obtain these minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8888a-139">你可以使用<xref:System.Threading.ThreadPool.SetMinThreads%2A>方法来增加最小线程数。</span><span class="sxs-lookup"><span data-stu-id="8888a-139">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="8888a-140">但是，不必要地增加这些值可能导致性能问题。</span><span class="sxs-lookup"><span data-stu-id="8888a-140">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="8888a-141">如果在同一时间开始太多的任务，则所有任务均可能会很慢。</span><span class="sxs-lookup"><span data-stu-id="8888a-141">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="8888a-142">大多数情况下，使用自己的分配线程算法，线程池将更好地执行任务。</span><span class="sxs-lookup"><span data-stu-id="8888a-142">In most cases the thread pool will perform better with its own algorithm for allocating threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8888a-143">在下面的示例中，主应用程序线程方法排入队列名为`ThreadProc`在线程池线程，休眠 1 秒，然后退出上执行。</span><span class="sxs-lookup"><span data-stu-id="8888a-143">In the following example, the main application thread  queues a method named `ThreadProc` to execute on a thread pool thread, sleeps for one second, and then exits.</span></span> <span data-ttu-id="8888a-144">`ThreadProc`方法只需显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="8888a-144">The `ThreadProc` method simply displays a message.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="8888a-145">如果注释掉对的调用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法，在主线程退出之前在线程池线程上运行的方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-145">If you comment out the call to the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, the main thread exits before         method runs on the thread pool thread.</span></span>  <span data-ttu-id="8888a-146">线程池使用后台线程，不保留应用程序的运行的所有前台线程已都终止。</span><span class="sxs-lookup"><span data-stu-id="8888a-146">The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</span></span>  <span data-ttu-id="8888a-147">（这是一个简单的示例的争用条件）。</span><span class="sxs-lookup"><span data-stu-id="8888a-147">(This         is a simple example of a race condition.)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="8888a-148">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8888a-148">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8888a-149">将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : nativeint -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="8888a-150">持有句柄的 <see cref="T:System.IntPtr" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          </span>
          <span data-ttu-id="8888a-151">在非托管端必须为重叠 I/O 打开该句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-152">将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-153">如果绑定了句柄，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-153">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="8888a-154">调用方没有所要求的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-154">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="8888a-155">表示调用非托管的代码的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-155">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="8888a-156">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-156">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : System.Runtime.InteropServices.SafeHandle -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="8888a-157">保存操作系统句柄的 <see cref="T:System.Runtime.InteropServices.SafeHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          </span>
          <span data-ttu-id="8888a-158">在非托管端必须为重叠 I/O 打开该句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-159">将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-160">如果绑定了句柄，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-160">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-161">`osHandle`参数应为<xref:Microsoft.Win32.SafeHandles.SafeFileHandle>，它派生自抽象<xref:System.Runtime.InteropServices.SafeHandle>类。</span><span class="sxs-lookup"><span data-stu-id="8888a-161">The `osHandle` parameter should be a <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, which derives from the abstract <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8888a-162">
            <paramref name="osHandle" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-162">
              <paramref name="osHandle" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="8888a-163">表示调用非托管的代码的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-163">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="8888a-164">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-164">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetAvailableThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetAvailableThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="8888a-165">可用辅助线程的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-165">The number of available worker threads.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="8888a-166">可用异步 I/O 线程的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-166">The number of available asynchronous I/O threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-167">检索由 <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> 方法返回的最大线程池线程数和当前活动线程数之间的差值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-168">当<xref:System.Threading.ThreadPool.GetAvailableThreads%2A>返回时，指定的变量`workerThreads`包含可以启动的其他工作线程和指定的变量的数量`completionPortThreads`包含可以是其他异步 I/O 线程数启动。</span><span class="sxs-lookup"><span data-stu-id="8888a-168">When <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> returns, the variable specified by `workerThreads` contains the number of additional worker threads that can be started, and the variable specified by `completionPortThreads` contains the number of additional asynchronous I/O threads that can be started.</span></span>  
  
 <span data-ttu-id="8888a-169">如果没有可用的线程，其他线程池请求保持排队状态，直到线程池线程变为可用。</span><span class="sxs-lookup"><span data-stu-id="8888a-169">If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8888a-170">简单的应用启动时，下面的示例显示工作线程和可用的 I/O 线程的数。</span><span class="sxs-lookup"><span data-stu-id="8888a-170">The following example displays the number of worker threads and I/O threads available when a simple app is started.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMaxThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="8888a-171">线程池中辅助线程的最大数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-171">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="8888a-172">线程池中异步 I/O 线程的最大数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-173">检索可以同时处于活动状态的线程池请求的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="8888a-174">所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-174">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-175">当<xref:System.Threading.ThreadPool.GetMaxThreads%2A>返回时，指定的变量`workerThreads`包含在线程池中允许的工作线程和指定的变量的最大数目`completionPortThreads`包含异步 I/O 线程中允许的最大数目线程池。</span><span class="sxs-lookup"><span data-stu-id="8888a-175">When <xref:System.Threading.ThreadPool.GetMaxThreads%2A> returns, the variable specified by `workerThreads` contains the maximum number of worker threads allowed in the thread pool, and the variable specified by `completionPortThreads` contains the maximum number of asynchronous I/O threads allowed in the thread pool.</span></span>  
  
 <span data-ttu-id="8888a-176">你可以使用<xref:System.Threading.ThreadPool.GetAvailableThreads%2A>方法来确定在任何给定时间在线程池中的线程的实际数量。</span><span class="sxs-lookup"><span data-stu-id="8888a-176">You can use the <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> method to determine the actual number of threads in the thread pool at any given time.</span></span>  
  
 <span data-ttu-id="8888a-177">你可以使用<xref:System.Threading.ThreadPool.SetMaxThreads%2A>在线程池中设置的最大工作线程和异步 I/O 线程数。</span><span class="sxs-lookup"><span data-stu-id="8888a-177">You can use the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</span></span>  
  
 <span data-ttu-id="8888a-178">你可以排队尽可能的系统内存允许线程池请求。</span><span class="sxs-lookup"><span data-stu-id="8888a-178">You can queue as many thread pool requests as system memory allows.</span></span> <span data-ttu-id="8888a-179">如果有更多的请求数多于线程池线程数，则其他请求保持排队状态，直到线程池线程变为可用。</span><span class="sxs-lookup"><span data-stu-id="8888a-179">If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8888a-180">下面的代码示例演示如何检索最大和可用线程池中的线程数的计数。</span><span class="sxs-lookup"><span data-stu-id="8888a-180">The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</span></span> <span data-ttu-id="8888a-181">工作项已使用的排队`FileStream`以异步方式写入两个文件。</span><span class="sxs-lookup"><span data-stu-id="8888a-181">A work item is queued that uses `FileStream` to asynchronously write to two files.</span></span> <span data-ttu-id="8888a-182">回叫方法超时重叠。</span><span class="sxs-lookup"><span data-stu-id="8888a-182">The callback methods are timed to overlap.</span></span> <span data-ttu-id="8888a-183">工作线程处理的工作项，并根据速度和计算机上的处理器数目，一个或两个完成端口线程处理写入操作。</span><span class="sxs-lookup"><span data-stu-id="8888a-183">A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMinThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="8888a-184">当此方法返回时，将包含线程池根据需要创建的最少数量的辅助线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="8888a-185">当此方法返回时，将包含线程池根据需要创建的最少数量的异步 I/O 线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-186">发出新的请求时，在切换到管理线程创建和销毁的算法之前检索线程池按需创建的线程的最小数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-187">线程池按需提供新的辅助线程或 I/O 完成线程直到它达到每个类别的最低要求。</span><span class="sxs-lookup"><span data-stu-id="8888a-187">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="8888a-188">默认情况下，最小线程数设置为在系统上的处理器数。</span><span class="sxs-lookup"><span data-stu-id="8888a-188">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="8888a-189">当达到最小值时，线程池可以在该类别中创建其他线程或等待，直到一些任务完成。</span><span class="sxs-lookup"><span data-stu-id="8888a-189">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="8888a-190">开头[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，线程池创建和销毁线程以优化吞吐量，吞吐量被定义为每个单位时间完成的任务数。</span><span class="sxs-lookup"><span data-stu-id="8888a-190">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="8888a-191">线程过少可能无法实现可用资源的最优利用，而线程过多则可能增加资源争用。</span><span class="sxs-lookup"><span data-stu-id="8888a-191">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8888a-192">需求较低时，线程池线程的实际数量可以低于最小值。</span><span class="sxs-lookup"><span data-stu-id="8888a-192">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8888a-193">下面的示例将最小工作线程数设置为 4，并保留的最小异步 I/O 完成线程数的原始值。</span><span class="sxs-lookup"><span data-stu-id="8888a-193">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8888a-194">将方法排入队列以便执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-194">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="8888a-195">此方法在有线程池线程变得可用时执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-195">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem callBack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="8888a-196">一个 <see cref="T:System.Threading.WaitCallback" />，表示要执行的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-197">将方法排入队列以便执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-197">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="8888a-198">此方法在有线程池线程变得可用时执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-198">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-199">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-199">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-200">您可以将数据排队方法的类定义方法，或可以使用的实例字段中所需的放置<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29>重载接受一个包含所需数据的对象。</span><span class="sxs-lookup"><span data-stu-id="8888a-200">You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload that accepts an object containing the necessary data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8888a-201">Visual Basic 用户可以省略<xref:System.Threading.WaitCallback>构造函数，并且只需使用`AddressOf`运算符传递到回调方法时<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="8888a-201">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="8888a-202">Visual Basic 会自动调用正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="8888a-202">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="8888a-203">版本信息</span><span class="sxs-lookup"><span data-stu-id="8888a-203">Version Information</span></span>  
 <span data-ttu-id="8888a-204">在.NET Framework 2.0 版中，<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性值将传播到辅助线程排队使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-204">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="8888a-205">在早期版本，不会传播的主体的信息。</span><span class="sxs-lookup"><span data-stu-id="8888a-205">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8888a-206">下面的示例使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29>方法重载将任务排入队列，由`ThreadProc`方法，以在有线程变得可用时执行。</span><span class="sxs-lookup"><span data-stu-id="8888a-206">The following example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> method overload to queue a task, which is represented by the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="8888a-207">使用此重载不提供任何任务信息。</span><span class="sxs-lookup"><span data-stu-id="8888a-207">No task information is supplied with this overload.</span></span> <span data-ttu-id="8888a-208">因此，可供信息`ThreadProc`方法仅限于该方法所属的对象。</span><span class="sxs-lookup"><span data-stu-id="8888a-208">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8888a-209">
            <paramref name="callBack" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-209">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8888a-210">承载公共语言运行时 (CLR) 的宿主不支持此操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="8888a-211">
            <see cref="T:System.Threading.WaitCallback" />，它表示要执行的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-212">包含方法所用数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-212">An object containing data to be used by the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-213">将方法排入队列以便执行，并指定包含该方法所用数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          </span>
          <span data-ttu-id="8888a-214">此方法在有线程池线程变得可用时执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-214">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-215">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-215">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-216">如果回调方法需要复杂的数据，你可以定义一个类来包含的数据。</span><span class="sxs-lookup"><span data-stu-id="8888a-216">If the callback method requires complex data, you can define a class to contain the data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8888a-217">Visual Basic 用户可以省略<xref:System.Threading.WaitCallback>构造函数，并且只需使用`AddressOf`运算符传递到回调方法时<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="8888a-217">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="8888a-218">Visual Basic 会自动调用正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="8888a-218">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="8888a-219">版本信息</span><span class="sxs-lookup"><span data-stu-id="8888a-219">Version Information</span></span>  
 <span data-ttu-id="8888a-220">在.NET Framework 2.0 版中，<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性值将传播到辅助线程排队使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-220">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="8888a-221">在早期版本，不会传播的主体的信息。</span><span class="sxs-lookup"><span data-stu-id="8888a-221">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8888a-222">下面的示例演示如何创建包含任务信息的对象。</span><span class="sxs-lookup"><span data-stu-id="8888a-222">The following example shows how to create an object that contains task information.</span></span> <span data-ttu-id="8888a-223">它还演示了如何在线程池将该对象传递给排队等待执行的任务。</span><span class="sxs-lookup"><span data-stu-id="8888a-223">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8888a-224">承载公共语言运行时 (CLR) 的宿主不支持此操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-224">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8888a-225">
            <paramref name="callBack" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-225">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem&lt;TState&gt; (Action&lt;TState&gt; callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem&lt;TState&gt;(class System.Action`1&lt;!!TState&gt; callBack, !!TState state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem(Of TState) (callBack As Action(Of TState), state As TState, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static bool QueueUserWorkItem(Action&lt;TState&gt; ^ callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : Action&lt;'State&gt; * 'State * bool -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state, preferLocal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callBack" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="preferLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="callBack">To be added.</param>
        <param name="state">To be added.</param>
        <param name="preferLocal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8888a-226">注册正在等待 <see cref="T:System.Threading.WaitHandle" /> 的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-226">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="8888a-227">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-227">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="8888a-228">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-228">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="8888a-229">向 <c>waitObject</c> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-229">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-230">传递给委托的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-230">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="8888a-231">以毫秒为单位的超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-231">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="8888a-232">如果 <c>millisecondsTimeOutInterval</c> 参数为 0（零），则函数将测试对象状态并立即返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-232">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="8888a-233">如果 <c>millisecondsTimeOutInterval</c> 为 -1，则函数的超时间隔永远不过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-233">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="8888a-234">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <c>waitObject</c> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-234">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-235">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 32 位有符号整数来表示超时值（以毫秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-235">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-236">封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-236">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-237">完成之后使用<xref:System.Threading.RegisteredWaitHandle>此方法返回时，请调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法来释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="8888a-237">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="8888a-238">我们建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你指定`true`为`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="8888a-238">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="8888a-239">垃圾回收的工作的详细信息有效地如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法而不是具体取决于已注册的等待句柄的终结器。</span><span class="sxs-lookup"><span data-stu-id="8888a-239">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="8888a-240"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定的委托排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="8888a-240">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="8888a-241">在下列情况之一发生时，工作线程将执行委托：</span><span class="sxs-lookup"><span data-stu-id="8888a-241">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="8888a-242">指定的对象处于终止状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-242">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="8888a-243">达到超时间隔。</span><span class="sxs-lookup"><span data-stu-id="8888a-243">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="8888a-244"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法检查指定的对象的当前状态<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="8888a-244">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="8888a-245">如果对象的状态为非终止状态，该方法将注册一个等待操作。</span><span class="sxs-lookup"><span data-stu-id="8888a-245">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="8888a-246">等待操作由线程池中的线程执行。</span><span class="sxs-lookup"><span data-stu-id="8888a-246">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="8888a-247">对象的状态将被发送信号或超时间隔结束时，将通过工作线程执行委托。</span><span class="sxs-lookup"><span data-stu-id="8888a-247">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="8888a-248">如果`timeOutInterval`参数不是 0 （零） 和`executeOnlyOnce`参数是`false`，每次该事件处于有信号状态或达到超时间隔重置计时器。</span><span class="sxs-lookup"><span data-stu-id="8888a-248">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8888a-249">使用<xref:System.Threading.Mutex>为`waitObject`不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值`WT_EXECUTEDEFAULT`标志，以便在一个单独的线程池线程上调度每个回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-249">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="8888a-250">而不是<xref:System.Threading.Mutex>，使用<xref:System.Threading.Semaphore>与的最大计数为 1。</span><span class="sxs-lookup"><span data-stu-id="8888a-250">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="8888a-251">若要取消等待操作，请调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-251">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8888a-252">等待线程使用 Win32`WaitForMultipleObjects`函数来监视已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="8888a-252">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="8888a-253">因此，如果必须使用相同的本机操作系统句柄中多次调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，你必须使用 Win32 句柄复制`DuplicateHandle`函数。</span><span class="sxs-lookup"><span data-stu-id="8888a-253">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="8888a-254">请注意，不应传递到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，因为等待线程可能检测不到该事件已终止之前将重置。</span><span class="sxs-lookup"><span data-stu-id="8888a-254">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="8888a-255">再返回，该函数修改修改某些类型的同步对象的状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-255">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="8888a-256">修改仅发生在其终止的状态导致等待条件得到满足的对象。</span><span class="sxs-lookup"><span data-stu-id="8888a-256">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="8888a-257">例如，信号量的计数减少 1。</span><span class="sxs-lookup"><span data-stu-id="8888a-257">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="8888a-258">版本信息</span><span class="sxs-lookup"><span data-stu-id="8888a-258">Version Information</span></span>  
 <span data-ttu-id="8888a-259">从.NET Framework 2.0 版中，开始<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性值将传播到辅助线程排队使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-259">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="8888a-260">在早期版本，不会传播的主体的信息。</span><span class="sxs-lookup"><span data-stu-id="8888a-260">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8888a-261">
            <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-261">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="8888a-262">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-262">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="8888a-263">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-263">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="8888a-264">向 <c>waitObject</c> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-264">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-265">传递给委托的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-265">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="8888a-266">以毫秒为单位的超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-266">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="8888a-267">如果 <c>millisecondsTimeOutInterval</c> 参数为 0（零），则函数将测试对象状态并立即返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-267">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="8888a-268">如果 <c>millisecondsTimeOutInterval</c> 为 -1，则函数的超时间隔永远不过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-268">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="8888a-269">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <c>waitObject</c> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-269">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-270">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-270">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-271">封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-271">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-272">完成之后使用<xref:System.Threading.RegisteredWaitHandle>此方法返回时，请调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法来释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="8888a-272">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="8888a-273">我们建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你指定`true`为`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="8888a-273">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="8888a-274">垃圾回收的工作的详细信息有效地如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法而不是具体取决于已注册的等待句柄的终结器。</span><span class="sxs-lookup"><span data-stu-id="8888a-274">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="8888a-275"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定的委托排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="8888a-275">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="8888a-276">在下列情况之一发生时，工作线程将执行委托：</span><span class="sxs-lookup"><span data-stu-id="8888a-276">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="8888a-277">指定的对象处于终止状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-277">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="8888a-278">达到超时间隔。</span><span class="sxs-lookup"><span data-stu-id="8888a-278">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="8888a-279"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法检查指定的对象的当前状态<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="8888a-279">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="8888a-280">如果对象的状态为非终止状态，该方法将注册一个等待操作。</span><span class="sxs-lookup"><span data-stu-id="8888a-280">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="8888a-281">等待操作由线程池中的线程执行。</span><span class="sxs-lookup"><span data-stu-id="8888a-281">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="8888a-282">对象的状态将被发送信号或超时间隔结束时，将通过工作线程执行委托。</span><span class="sxs-lookup"><span data-stu-id="8888a-282">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="8888a-283">如果`timeOutInterval`参数不是 0 （零） 和`executeOnlyOnce`参数是`false`，每次该事件处于有信号状态或达到超时间隔重置计时器。</span><span class="sxs-lookup"><span data-stu-id="8888a-283">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8888a-284">使用<xref:System.Threading.Mutex>为`waitObject`不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值`WT_EXECUTEDEFAULT`标志，以便在一个单独的线程池线程上调度每个回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-284">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="8888a-285">而不是<xref:System.Threading.Mutex>，使用<xref:System.Threading.Semaphore>与的最大计数为 1。</span><span class="sxs-lookup"><span data-stu-id="8888a-285">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="8888a-286">若要取消等待操作，请调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-286">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8888a-287">等待线程使用 Win32`WaitForMultipleObjects`函数来监视已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="8888a-287">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="8888a-288">因此，如果必须使用相同的本机操作系统句柄中多次调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，你必须使用 Win32 句柄复制`DuplicateHandle`函数。</span><span class="sxs-lookup"><span data-stu-id="8888a-288">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="8888a-289">请注意，不应传递到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，因为等待线程可能检测不到该事件已终止之前将重置。</span><span class="sxs-lookup"><span data-stu-id="8888a-289">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="8888a-290">再返回，该函数修改修改某些类型的同步对象的状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-290">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="8888a-291">修改仅发生在其终止的状态导致等待条件得到满足的对象。</span><span class="sxs-lookup"><span data-stu-id="8888a-291">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="8888a-292">例如，信号量的计数减少 1。</span><span class="sxs-lookup"><span data-stu-id="8888a-292">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="8888a-293">版本信息</span><span class="sxs-lookup"><span data-stu-id="8888a-293">Version Information</span></span>  
 <span data-ttu-id="8888a-294">从.NET Framework 2.0 版中，开始<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性值将传播到辅助线程排队使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-294">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="8888a-295">在早期版本，不会传播的主体的信息。</span><span class="sxs-lookup"><span data-stu-id="8888a-295">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8888a-296">
            <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-296">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="8888a-297">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-297">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="8888a-298">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-298">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="8888a-299">向 <c>waitObject</c> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-299">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-300">传递给委托的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-300">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8888a-301">
            <see cref="T:System.TimeSpan" /> 表示的超时时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-301">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="8888a-302">如果 <c>timeout</c> 为 0（零），则函数将测试对象状态并立即返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-302">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="8888a-303">如果 <c>timeout</c> 为 -1，则函数的超时间隔永远不过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-303">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="8888a-304">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <c>waitObject</c> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-304">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-305">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 <see cref="T:System.TimeSpan" /> 值来表示超时时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-305">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-306">封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-306">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-307">完成之后使用<xref:System.Threading.RegisteredWaitHandle>此方法返回时，请调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法来释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="8888a-307">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="8888a-308">我们建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你指定`true`为`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="8888a-308">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="8888a-309">垃圾回收的工作的详细信息有效地如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法而不是具体取决于已注册的等待句柄的终结器。</span><span class="sxs-lookup"><span data-stu-id="8888a-309">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="8888a-310"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定的委托排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="8888a-310">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="8888a-311">在下列情况之一发生时，工作线程将执行委托：</span><span class="sxs-lookup"><span data-stu-id="8888a-311">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="8888a-312">指定的对象处于终止状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-312">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="8888a-313">达到超时间隔。</span><span class="sxs-lookup"><span data-stu-id="8888a-313">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="8888a-314"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法检查指定的对象的当前状态<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="8888a-314">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="8888a-315">如果对象的状态为非终止状态，该方法将注册一个等待操作。</span><span class="sxs-lookup"><span data-stu-id="8888a-315">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="8888a-316">等待操作由线程池中的线程执行。</span><span class="sxs-lookup"><span data-stu-id="8888a-316">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="8888a-317">对象的状态将被发送信号或超时间隔结束时，将通过工作线程执行委托。</span><span class="sxs-lookup"><span data-stu-id="8888a-317">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="8888a-318">如果`timeOutInterval`参数不是 0 （零） 和`executeOnlyOnce`参数是`false`，每次该事件处于有信号状态或达到超时间隔重置计时器。</span><span class="sxs-lookup"><span data-stu-id="8888a-318">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8888a-319">使用<xref:System.Threading.Mutex>为`waitObject`不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值`WT_EXECUTEDEFAULT`标志，以便在一个单独的线程池线程上调度每个回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-319">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="8888a-320">而不是<xref:System.Threading.Mutex>，使用<xref:System.Threading.Semaphore>与的最大计数为 1。</span><span class="sxs-lookup"><span data-stu-id="8888a-320">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="8888a-321">若要取消等待操作，请调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-321">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8888a-322">等待线程使用 Win32`WaitForMultipleObjects`函数来监视已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="8888a-322">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="8888a-323">因此，如果必须使用相同的本机操作系统句柄中多次调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，你必须使用 Win32 句柄复制`DuplicateHandle`函数。</span><span class="sxs-lookup"><span data-stu-id="8888a-323">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="8888a-324">请注意，不应传递到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，因为等待线程可能检测不到该事件已终止之前将重置。</span><span class="sxs-lookup"><span data-stu-id="8888a-324">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="8888a-325">再返回，该函数修改修改某些类型的同步对象的状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-325">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="8888a-326">修改仅发生在其终止的状态导致等待条件得到满足的对象。</span><span class="sxs-lookup"><span data-stu-id="8888a-326">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="8888a-327">例如，信号量的计数减少 1。</span><span class="sxs-lookup"><span data-stu-id="8888a-327">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="8888a-328">版本信息</span><span class="sxs-lookup"><span data-stu-id="8888a-328">Version Information</span></span>  
 <span data-ttu-id="8888a-329">从.NET Framework 2.0 版中，开始<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性值将传播到辅助线程排队使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-329">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="8888a-330">在早期版本，不会传播的主体的信息。</span><span class="sxs-lookup"><span data-stu-id="8888a-330">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8888a-331">
            <paramref name="timeout" /> 参数小于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-331">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8888a-332">
            <paramref name="timeout" /> 参数大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-332">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="8888a-333">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-333">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="8888a-334">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-334">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="8888a-335">向 <c>waitObject</c> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-335">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-336">传递给委托的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-336">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="8888a-337">以毫秒为单位的超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-337">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="8888a-338">如果 <c>millisecondsTimeOutInterval</c> 参数为 0（零），则函数将测试对象状态并立即返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-338">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="8888a-339">如果 <c>millisecondsTimeOutInterval</c> 为 -1，则函数的超时间隔永远不过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-339">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="8888a-340">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <c>waitObject</c> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-340">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-341">指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-341">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-342">
            <see cref="T:System.Threading.RegisteredWaitHandle" />，可用于取消已注册的等待操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-342">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-343">完成之后使用<xref:System.Threading.RegisteredWaitHandle>此方法返回时，请调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法来释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="8888a-343">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="8888a-344">我们建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你指定`true`为`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="8888a-344">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="8888a-345">垃圾回收的工作的详细信息有效地如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法而不是具体取决于已注册的等待句柄的终结器。</span><span class="sxs-lookup"><span data-stu-id="8888a-345">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="8888a-346"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定的委托排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="8888a-346">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="8888a-347">在下列情况之一发生时，工作线程将执行委托：</span><span class="sxs-lookup"><span data-stu-id="8888a-347">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="8888a-348">指定的对象处于终止状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-348">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="8888a-349">达到超时间隔。</span><span class="sxs-lookup"><span data-stu-id="8888a-349">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="8888a-350"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法检查指定的对象的当前状态<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="8888a-350">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="8888a-351">如果对象的状态为非终止状态，该方法将注册一个等待操作。</span><span class="sxs-lookup"><span data-stu-id="8888a-351">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="8888a-352">等待操作由线程池中的线程执行。</span><span class="sxs-lookup"><span data-stu-id="8888a-352">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="8888a-353">对象的状态将被发送信号或超时间隔结束时，将通过工作线程执行委托。</span><span class="sxs-lookup"><span data-stu-id="8888a-353">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="8888a-354">如果`timeOutInterval`参数不是 0 （零） 和`executeOnlyOnce`参数是`false`，每次该事件处于有信号状态或达到超时间隔重置计时器。</span><span class="sxs-lookup"><span data-stu-id="8888a-354">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8888a-355">使用<xref:System.Threading.Mutex>为`waitObject`不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值`WT_EXECUTEDEFAULT`标志，以便在一个单独的线程池线程上调度每个回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-355">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="8888a-356">而不是<xref:System.Threading.Mutex>，使用<xref:System.Threading.Semaphore>与的最大计数为 1。</span><span class="sxs-lookup"><span data-stu-id="8888a-356">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="8888a-357">若要取消等待操作，请调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-357">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8888a-358">等待线程使用 Win32`WaitForMultipleObjects`函数来监视已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="8888a-358">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="8888a-359">因此，如果必须使用相同的本机操作系统句柄中多次调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，你必须使用 Win32 句柄复制`DuplicateHandle`函数。</span><span class="sxs-lookup"><span data-stu-id="8888a-359">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="8888a-360">请注意，不应传递到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，因为等待线程可能检测不到该事件已终止之前将重置。</span><span class="sxs-lookup"><span data-stu-id="8888a-360">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="8888a-361">再返回，该函数修改修改某些类型的同步对象的状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-361">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="8888a-362">修改仅发生在其终止的状态导致等待条件得到满足的对象。</span><span class="sxs-lookup"><span data-stu-id="8888a-362">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="8888a-363">例如，信号量的计数减少 1。</span><span class="sxs-lookup"><span data-stu-id="8888a-363">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="8888a-364">版本信息</span><span class="sxs-lookup"><span data-stu-id="8888a-364">Version Information</span></span>  
 <span data-ttu-id="8888a-365">从.NET Framework 2.0 版中，开始<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性值将传播到辅助线程排队使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-365">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="8888a-366">在早期版本，不会传播的主体的信息。</span><span class="sxs-lookup"><span data-stu-id="8888a-366">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8888a-367">下面的示例演示如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>时要执行方法指定的回调方法指定的等待句柄处于有信号状态。</span><span class="sxs-lookup"><span data-stu-id="8888a-367">The following example shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="8888a-368">在此示例中，回调方法是`WaitProc`，和等待句柄是<xref:System.Threading.AutoResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="8888a-368">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="8888a-369">该示例定义了`TaskInfo`类来保存时它将执行传递给回调的信息。</span><span class="sxs-lookup"><span data-stu-id="8888a-369">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="8888a-370">该示例创建`TaskInfo`对象并将其分配某些字符串数据。</span><span class="sxs-lookup"><span data-stu-id="8888a-370">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="8888a-371"><xref:System.Threading.RegisteredWaitHandle>返回<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法分配给`Handle`字段`TaskInfo`对象，以便回调方法有权<xref:System.Threading.RegisteredWaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="8888a-371">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="8888a-372">除了指定`TaskInfo`作为要传递给回调方法，调用的对象<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定<xref:System.Threading.AutoResetEvent>任务将等待，<xref:System.Threading.WaitOrTimerCallback>委托，表示`WaitProc`回调方法一秒的超时间隔和多个回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-372">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="8888a-373">当主线程发出信号<xref:System.Threading.AutoResetEvent>通过调用其<xref:System.Threading.EventWaitHandle.Set%2A>方法，<xref:System.Threading.WaitOrTimerCallback>调用委托。</span><span class="sxs-lookup"><span data-stu-id="8888a-373">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="8888a-374">`WaitProc`方法测试<xref:System.Threading.RegisteredWaitHandle>以确定是否发生超时。</span><span class="sxs-lookup"><span data-stu-id="8888a-374">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="8888a-375">如果由于等待句柄已收到信号，而调用的回调`WaitProc`方法注销<xref:System.Threading.RegisteredWaitHandle>，从而停止其他回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-375">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="8888a-376">对于超时，该任务将继续等待。</span><span class="sxs-lookup"><span data-stu-id="8888a-376">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="8888a-377">`WaitProc`方法结束时将消息输出到控制台。</span><span class="sxs-lookup"><span data-stu-id="8888a-377">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8888a-378">
            <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-378">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMaxThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="8888a-379">线程池中辅助线程的最大数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-379">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="8888a-380">线程池中异步 I/O 线程的最大数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-380">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-381">设置可以同时处于活动状态的线程池的请求数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-381">Sets the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="8888a-382">所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-382">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-383">如果更改成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-383">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-384">不能设置辅助线程或 I/O 完成线程的最大数量为一个数字小于的计算机上的处理器数。</span><span class="sxs-lookup"><span data-stu-id="8888a-384">You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</span></span> <span data-ttu-id="8888a-385">若要确定存在多少处理器，检索的值<xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="8888a-385">To determine how many processors are present, retrieve the value of the <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="8888a-386">此外，你不能设置辅助线程或为一个小于最小相应工作线程数的数字的 I/O 完成线程或 I/O 完成线程的最大数目。</span><span class="sxs-lookup"><span data-stu-id="8888a-386">In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</span></span> <span data-ttu-id="8888a-387">若要确定最小线程池大小，请调用<xref:System.Threading.ThreadPool.GetMinThreads%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8888a-387">To determine the minimum thread pool size,  call the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method.</span></span>  
  
 <span data-ttu-id="8888a-388">如果承载公共语言运行时，例如通过 Internet 信息服务 (IIS) 或 SQL Server，主机可以限制或阻止更改到线程池大小。</span><span class="sxs-lookup"><span data-stu-id="8888a-388">If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</span></span>  
  
 <span data-ttu-id="8888a-389">更改的最大线程池中的线程数时要格外小心。</span><span class="sxs-lookup"><span data-stu-id="8888a-389">Use caution when changing the maximum number of threads in the thread pool.</span></span> <span data-ttu-id="8888a-390">虽然你的代码中获益，所做的更改可能产生负面影响上使用的代码库。</span><span class="sxs-lookup"><span data-stu-id="8888a-390">While your code might benefit, the changes might have an adverse effect on code libraries you use.</span></span>  
  
 <span data-ttu-id="8888a-391">设置线程池大小太大，则会导致性能问题。</span><span class="sxs-lookup"><span data-stu-id="8888a-391">Setting the thread pool size too large can cause performance problems.</span></span> <span data-ttu-id="8888a-392">如果在同一时间执行过多的线程，任务切换开销就成为一个重要的因素。</span><span class="sxs-lookup"><span data-stu-id="8888a-392">If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="8888a-393">表示控制线程的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-393">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="8888a-394">权限值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-394">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMinThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="8888a-395">要由线程池根据需要创建的新的最小工作程序线程数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-395">The minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="8888a-396">要由线程池根据需要创建的新的最小空闲异步 I/O 线程数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-396">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-397">发出新的请求时，在切换到管理线程创建和销毁的算法之前设置线程池按需创建的线程的最小数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-397">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-398">如果更改成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-398">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-399">线程池按需提供新的辅助线程或 I/O 完成线程直到它达到每个类别的最低要求。</span><span class="sxs-lookup"><span data-stu-id="8888a-399">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="8888a-400">当达到最小值时，线程池可以在该类别中创建其他线程或等待，直到一些任务完成。</span><span class="sxs-lookup"><span data-stu-id="8888a-400">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="8888a-401">开头[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，线程池创建和销毁线程以优化吞吐量，吞吐量被定义为每个单位时间完成的任务数。</span><span class="sxs-lookup"><span data-stu-id="8888a-401">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="8888a-402">线程过少可能无法实现可用资源的最优利用，而线程过多则可能增加资源争用。</span><span class="sxs-lookup"><span data-stu-id="8888a-402">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
 <span data-ttu-id="8888a-403">需求较低时，线程池线程的实际数量可以低于最小值。</span><span class="sxs-lookup"><span data-stu-id="8888a-403">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="8888a-404">如果你指定为负数或大于最大活动线程池线程数的数字 (使用获取<xref:System.Threading.ThreadPool.GetMaxThreads%2A>)，<xref:System.Threading.ThreadPool.SetMinThreads%2A>返回`false`并不会更改两个最小值。</span><span class="sxs-lookup"><span data-stu-id="8888a-404">If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> returns `false` and does not change either of the minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8888a-405">默认情况下，最小线程数设置为在系统上的处理器数。</span><span class="sxs-lookup"><span data-stu-id="8888a-405">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="8888a-406">你可以使用<xref:System.Threading.ThreadPool.SetMinThreads%2A>方法来增加最小的数字 ofthreads。</span><span class="sxs-lookup"><span data-stu-id="8888a-406">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number ofthreads.</span></span> <span data-ttu-id="8888a-407">但是，不必要地增加这些值可能导致性能问题。</span><span class="sxs-lookup"><span data-stu-id="8888a-407">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="8888a-408">如果在同一时间开始太多的任务，则所有任务均可能会很慢。</span><span class="sxs-lookup"><span data-stu-id="8888a-408">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="8888a-409">在大多数情况下，线程池将使用其自己的分配线程算法更好地执行。</span><span class="sxs-lookup"><span data-stu-id="8888a-409">In most cases, the thread pool will perform better with its own algorithm for allocating threads.</span></span> <span data-ttu-id="8888a-410">减少到小于处理器数也会影响性能的最小值。</span><span class="sxs-lookup"><span data-stu-id="8888a-410">Reducing the minimum to less than the number of processors can also hurt performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8888a-411">下面的示例将最小工作线程数设置为 4，并保留的最小异步 I/O 完成线程数的原始值。</span><span class="sxs-lookup"><span data-stu-id="8888a-411">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="8888a-412">表示控制线程的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-412">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="8888a-413">权限值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-413">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueNativeOverlapped : nativeptr&lt;System.Threading.NativeOverlapped&gt; -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueNativeOverlapped overlapped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped">
          <span data-ttu-id="8888a-414">要排队的 <see cref="T:System.Threading.NativeOverlapped" /> 结构。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-414">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-415">将重叠的 I/O 操作排队以便执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-415">Queues an overlapped I/O operation for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-416">如果成功地将此操作排队到 I/O 完成端口，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-416">
              <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-417">有关使用本机 Win32 信息重叠的 I/O，请参阅<xref:System.Threading.Overlapped>类，<xref:System.Threading.NativeOverlapped>结构，与`OVERLAPPED`Win32 平台 SDK 中的结构。</span><span class="sxs-lookup"><span data-stu-id="8888a-417">For information about using native Win32 overlapped I/O, see the <xref:System.Threading.Overlapped> class, the <xref:System.Threading.NativeOverlapped> structure, and the `OVERLAPPED` structure in the Win32 Platform SDK.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8888a-418">使用<xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>方法可能会无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="8888a-418">Using the <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> method could inadvertently open up a security hole.</span></span> <span data-ttu-id="8888a-419">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-419">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="8888a-420">工作线程池线程使用的排队时<xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>，线程池线程的堆栈不具有实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="8888a-420">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, the stack of the thread pool thread does not have the context of the actual callers.</span></span> <span data-ttu-id="8888a-421">恶意代码可能会利用这一点避开权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-421">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8888a-422">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-422">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8888a-423">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-423">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="8888a-424">一个 <see cref="T:System.Threading.WaitCallback" />，表示当线程池中的线程选择工作项时调用的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-424">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-425">在接受线程池服务时传递给委托的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-425">The object that is passed to the delegate when serviced from the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-426">将指定的委托排队到线程池，但不会将调用堆栈传播到辅助线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-426">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-427">如果方法成功，则为 <see langword="true" />；如果未能将该工作项排队，则引发 <see cref="T:System.OutOfMemoryException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-427">
              <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-428">与不同<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法，<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>则不会传播到辅助线程的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="8888a-428">Unlike the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method, <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="8888a-429">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</span><span class="sxs-lookup"><span data-stu-id="8888a-429">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8888a-430">使用<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>可能无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="8888a-430">Using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="8888a-431">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-431">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="8888a-432">工作线程池线程使用的排队时<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>，线程池线程的堆栈不会实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="8888a-432">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="8888a-433">恶意代码可能会利用这一点避开权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-433">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="8888a-434">调用方没有所要求的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-434">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="8888a-435">遇到了内存不足的情况。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-435">An out-of-memory condition was encountered.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="8888a-436">未能将该工作项排队。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-436">The work item could not be queued.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8888a-437">
            <paramref name="callBack" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-437">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8888a-438">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-438">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8888a-439">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-439">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8888a-440">注册委托以等待 <see cref="T:System.Threading.WaitHandle" />，但不会将调用堆栈传播到辅助线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-440">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="8888a-441">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-441">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="8888a-442">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-442">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="8888a-443">向 <c>waitObject</c> 参数发出信号时调用的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-443">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-444">传递给委托的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-444">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="8888a-445">以毫秒为单位的超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-445">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="8888a-446">如果 <c>millisecondsTimeOutInterval</c> 参数为 0（零），则函数将测试对象状态并立即返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-446">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="8888a-447">如果 <c>millisecondsTimeOutInterval</c> 为 -1，则函数的超时间隔永远不过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-447">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="8888a-448">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <c>waitObject</c> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-448">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-449">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并使用一个 32 位带符号整数来表示超时时间（以毫秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-449">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="8888a-450">此方法不将调用堆栈传播到辅助线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-450">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-451">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-451">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-452">与不同<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法，<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>则不会传播到辅助线程的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="8888a-452">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="8888a-453">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</span><span class="sxs-lookup"><span data-stu-id="8888a-453">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8888a-454">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>可能无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="8888a-454">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="8888a-455">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-455">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="8888a-456">工作线程池线程使用的排队时<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>，线程池线程的堆栈不会实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="8888a-456">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="8888a-457">恶意代码可能会利用这一点避开权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-457">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="8888a-458">使用<xref:System.Threading.Mutex>为`waitObject`不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值`WT_EXECUTEDEFAULT`标志，以便在一个单独的线程池线程上调度每个回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-458">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="8888a-459">完成之后使用<xref:System.Threading.RegisteredWaitHandle>此方法返回时，请调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法来释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="8888a-459">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="8888a-460">我们建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你指定`true`为`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="8888a-460">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="8888a-461">垃圾回收的工作的详细信息有效地如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法而不是具体取决于已注册的等待句柄的终结器。</span><span class="sxs-lookup"><span data-stu-id="8888a-461">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8888a-462">
            <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-462">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="8888a-463">调用方没有所要求的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-463">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8888a-464">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-464">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8888a-465">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-465">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="8888a-466">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-466">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="8888a-467">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-467">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="8888a-468">向 <c>waitObject</c> 参数发出信号时调用的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-468">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-469">传递给委托的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-469">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="8888a-470">以毫秒为单位的超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-470">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="8888a-471">如果 <c>millisecondsTimeOutInterval</c> 参数为 0（零），则函数将测试对象状态并立即返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-471">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="8888a-472">如果 <c>millisecondsTimeOutInterval</c> 为 -1，则函数的超时间隔永远不过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-472">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="8888a-473">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <c>waitObject</c> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-473">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-474">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-474">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="8888a-475">此方法不将调用堆栈传播到辅助线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-475">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-476">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-476">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-477">与不同<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法，<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>则不会传播到辅助线程的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="8888a-477">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="8888a-478">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</span><span class="sxs-lookup"><span data-stu-id="8888a-478">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8888a-479">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>可能无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="8888a-479">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="8888a-480">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-480">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="8888a-481">工作线程池线程使用的排队时<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>，线程池线程的堆栈不会实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="8888a-481">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="8888a-482">恶意代码可能会利用这一点避开权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-482">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="8888a-483">使用<xref:System.Threading.Mutex>为`waitObject`不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值`WT_EXECUTEDEFAULT`标志，以便在一个单独的线程池线程上调度每个回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-483">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="8888a-484">完成之后使用<xref:System.Threading.RegisteredWaitHandle>此方法返回时，请调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法来释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="8888a-484">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="8888a-485">我们建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你指定`true`为`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="8888a-485">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="8888a-486">垃圾回收的工作的详细信息有效地如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法而不是具体取决于已注册的等待句柄的终结器。</span><span class="sxs-lookup"><span data-stu-id="8888a-486">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8888a-487">
            <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-487">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="8888a-488">调用方没有所要求的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-488">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8888a-489">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-489">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8888a-490">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-490">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="8888a-491">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="8888a-492">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="8888a-493">向 <c>waitObject</c> 参数发出信号时调用的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-493">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-494">传递给委托的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-494">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8888a-495">
            <see cref="T:System.TimeSpan" /> 表示的超时时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-495">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="8888a-496">如果 <c>timeout</c> 为 0（零），则函数将测试对象状态并立即返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-496">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="8888a-497">如果 <c>timeout</c> 为 -1，则函数的超时间隔永远不过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-497">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="8888a-498">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <c>waitObject</c> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-498">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-499">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 <see cref="T:System.TimeSpan" /> 值来表示超时时间。此方法不将调用堆栈传播到辅助线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-500">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-500">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-501">与不同<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法，<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>则不会传播到辅助线程的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="8888a-501">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="8888a-502">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</span><span class="sxs-lookup"><span data-stu-id="8888a-502">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8888a-503">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>可能无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="8888a-503">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="8888a-504">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-504">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="8888a-505">工作线程池线程使用的排队时<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>，线程池线程的堆栈不会实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="8888a-505">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="8888a-506">恶意代码可能会利用这一点避开权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-506">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="8888a-507">使用<xref:System.Threading.Mutex>为`waitObject`不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值`WT_EXECUTEDEFAULT`标志，以便在一个单独的线程池线程上调度每个回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-507">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="8888a-508">完成之后使用<xref:System.Threading.RegisteredWaitHandle>此方法返回时，请调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法来释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="8888a-508">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="8888a-509">我们建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你指定`true`为`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="8888a-509">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="8888a-510">垃圾回收的工作的详细信息有效地如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法而不是具体取决于已注册的等待句柄的终结器。</span><span class="sxs-lookup"><span data-stu-id="8888a-510">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8888a-511">
            <paramref name="timeout" /> 参数小于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-511">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8888a-512">
            <paramref name="timeout" /> 参数大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-512">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="8888a-513">调用方没有所要求的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-513">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8888a-514">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-514">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8888a-515">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-515">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="8888a-516">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-516">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="8888a-517">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-517">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="8888a-518">向 <c>waitObject</c> 参数发出信号时调用的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-518">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8888a-519">传递给委托的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-519">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="8888a-520">以毫秒为单位的超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-520">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="8888a-521">如果 <c>millisecondsTimeOutInterval</c> 参数为 0（零），则函数将测试对象状态并立即返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-521">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="8888a-522">如果 <c>millisecondsTimeOutInterval</c> 为 -1，则函数的超时间隔永远不过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-522">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="8888a-523">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <c>waitObject</c> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-523">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8888a-524">指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-524">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="8888a-525">此方法不将调用堆栈传播到辅助线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-525">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8888a-526">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-526">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8888a-527">与不同<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法，<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>则不会传播到辅助线程的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="8888a-527">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="8888a-528">这使得代码丢失所做的调用堆栈，从而提升其安全特权。</span><span class="sxs-lookup"><span data-stu-id="8888a-528">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8888a-529">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>可能无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="8888a-529">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="8888a-530">代码访问安全性将基于堆栈的所有调用方的权限其权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-530">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="8888a-531">工作线程池线程使用的排队时<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>，线程池线程的堆栈不会实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="8888a-531">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="8888a-532">恶意代码可能会利用这一点避开权限检查。</span><span class="sxs-lookup"><span data-stu-id="8888a-532">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="8888a-533">使用<xref:System.Threading.Mutex>为`waitObject`不提供的回调的互相排斥，因为基础的 Win32 API 使用默认值`WT_EXECUTEDEFAULT`标志，以便在一个单独的线程池线程上调度每个回调。</span><span class="sxs-lookup"><span data-stu-id="8888a-533">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="8888a-534">完成之后使用<xref:System.Threading.RegisteredWaitHandle>此方法返回时，请调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法来释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="8888a-534">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="8888a-535">我们建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你指定`true`为`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="8888a-535">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="8888a-536">垃圾回收的工作的详细信息有效地如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法而不是具体取决于已注册的等待句柄的终结器。</span><span class="sxs-lookup"><span data-stu-id="8888a-536">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="8888a-537">调用方没有所要求的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-537">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8888a-538">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-538">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8888a-539">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8888a-539">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>