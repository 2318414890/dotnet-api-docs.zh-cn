<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7526a17165511a13b7213d3a9d257c6304cccb3b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407147" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="617d0-101">通知正在等待的线程已发生事件。</span>
      <span class="sxs-lookup">
        <span data-stu-id="617d0-101">Notifies a waiting thread that an event has occurred.</span>
      </span>
      <span data-ttu-id="617d0-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="617d0-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617d0-103">`AutoResetEvent` 允许的线程以互相通信通过发送信号。</span><span class="sxs-lookup"><span data-stu-id="617d0-103">`AutoResetEvent` allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="617d0-104">通常情况下，当线程需要对资源的独占访问时使用此类。</span><span class="sxs-lookup"><span data-stu-id="617d0-104">Typically, you use this class when threads need exclusive access to a resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="617d0-105">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="617d0-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="617d0-106">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="617d0-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="617d0-107">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="617d0-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="617d0-108">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="617d0-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="617d0-109">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="617d0-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="617d0-110">线程通过调用等待信号<xref:System.Threading.WaitHandle.WaitOne%2A>上`AutoResetEvent`。</span><span class="sxs-lookup"><span data-stu-id="617d0-110">A thread waits for a signal by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the `AutoResetEvent`.</span></span> <span data-ttu-id="617d0-111">如果`AutoResetEvent`处于是非终止的状态，此线程受到阻止，线程当前控制要指示该资源是通过调用可用的资源等待<xref:System.Threading.EventWaitHandle.Set%2A>。</span><span class="sxs-lookup"><span data-stu-id="617d0-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <xref:System.Threading.EventWaitHandle.Set%2A>.</span></span>  
  
 <span data-ttu-id="617d0-112">调用`Set`信号`AutoResetEvent`释放正在等待的线程。</span><span class="sxs-lookup"><span data-stu-id="617d0-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="617d0-113">`AutoResetEvent` 单个正在等待的线程已发布，并自动返回给非终止状态之前，将保持终止状态。</span><span class="sxs-lookup"><span data-stu-id="617d0-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="617d0-114">如果没有线程在等待，状态将无限期地保持发送信号。</span><span class="sxs-lookup"><span data-stu-id="617d0-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="617d0-115">如果一个线程调用<xref:System.Threading.WaitHandle.WaitOne%2A>时<xref:System.Threading.AutoResetEvent>是发送信号状态; 在线程不会阻止。</span><span class="sxs-lookup"><span data-stu-id="617d0-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="617d0-116"><xref:System.Threading.AutoResetEvent>立即释放线程并返回到非终止状态。</span><span class="sxs-lookup"><span data-stu-id="617d0-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="617d0-117">不能保证，对每个调用<xref:System.Threading.EventWaitHandle.Set%2A>方法将释放线程。</span><span class="sxs-lookup"><span data-stu-id="617d0-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="617d0-118">如果两个调用太靠近在一起，以便第二次调用前释放线程发生，则释放只有一个线程。</span><span class="sxs-lookup"><span data-stu-id="617d0-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="617d0-119">它是就像第二个调用未发生。</span><span class="sxs-lookup"><span data-stu-id="617d0-119">It is as if the second call did not happen.</span></span> <span data-ttu-id="617d0-120">此外，如果<xref:System.Threading.EventWaitHandle.Set%2A>时没有任何等待的线程调用与<xref:System.Threading.AutoResetEvent>已终止，则调用不起作用。</span><span class="sxs-lookup"><span data-stu-id="617d0-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="617d0-121">你可以控制的初始状态`AutoResetEvent`通过将一个布尔值传递给构造函数：`true`如果初始状态终止状态和`false`否则为。</span><span class="sxs-lookup"><span data-stu-id="617d0-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="617d0-122">`AutoResetEvent` 也可以用于`static`<xref:System.Threading.WaitHandle.WaitAll%2A>和<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="617d0-122">`AutoResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="617d0-123">有关线程同步机制的详细信息，请参阅[AutoResetEvent](~/docs/standard/threading/autoresetevent.md)的概念性文档。</span><span class="sxs-lookup"><span data-stu-id="617d0-123">For more information about thread synchronization mechanisms, see [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) in the conceptual documentation.</span></span>  
  
 <span data-ttu-id="617d0-124">从.NET Framework 2.0 版中，开始<xref:System.Threading.AutoResetEvent>派生自新<xref:System.Threading.EventWaitHandle>类。</span><span class="sxs-lookup"><span data-stu-id="617d0-124">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="617d0-125"><xref:System.Threading.AutoResetEvent>功能上等效于<xref:System.Threading.EventWaitHandle>使用创建<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="617d0-125">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617d0-126">与不同<xref:System.Threading.AutoResetEvent>类，<xref:System.Threading.EventWaitHandle>类提供对访问已命名系统同步事件。</span><span class="sxs-lookup"><span data-stu-id="617d0-126">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617d0-127">下面的示例演示如何使用<xref:System.Threading.AutoResetEvent>通过调用一次释放一个线程<xref:System.Threading.EventWaitHandle.Set%2A>方法 （基类） 每次用户需按**Enter**密钥。</span><span class="sxs-lookup"><span data-stu-id="617d0-127">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="617d0-128">此示例将启动三个线程，等待<xref:System.Threading.AutoResetEvent>中发送信号状态的已创建。</span><span class="sxs-lookup"><span data-stu-id="617d0-128">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="617d0-129">第一个线程，所以立即释放因为<xref:System.Threading.AutoResetEvent>已处于终止状态。</span><span class="sxs-lookup"><span data-stu-id="617d0-129">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="617d0-130">这将重置<xref:System.Threading.AutoResetEvent>为非终止状态，以便随后的线程阻塞。</span><span class="sxs-lookup"><span data-stu-id="617d0-130">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="617d0-131">未释放被阻止的线程，直到用户释放它们一个按一次**Enter**密钥。</span><span class="sxs-lookup"><span data-stu-id="617d0-131">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="617d0-132">线程释放从第一个后<xref:System.Threading.AutoResetEvent>，等待另一个<xref:System.Threading.AutoResetEvent>是非终止状态中创建。</span><span class="sxs-lookup"><span data-stu-id="617d0-132">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="617d0-133">阻止所有三个线程，因此<xref:System.Threading.EventWaitHandle.Set%2A>方法必须调用三次以将其释放。</span><span class="sxs-lookup"><span data-stu-id="617d0-133">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="617d0-134">此类是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="617d0-134">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="617d0-135">若要将初始状态设置为终止，则为 <see langword="true" />；若要将初始状态设置为非终止，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617d0-135">
              <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617d0-136">用一个指示是否将初始状态设置为终止的布尔值初始化 <see cref="T:System.Threading.AutoResetEvent" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617d0-136">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="617d0-137">下面的示例使用<xref:System.Threading.AutoResetEvent>来同步两个线程的活动。</span><span class="sxs-lookup"><span data-stu-id="617d0-137">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="617d0-138">第一个线程，即应用程序线程执行`Main`。</span><span class="sxs-lookup"><span data-stu-id="617d0-138">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="617d0-139">它将值写入到受保护的资源，即`static`(`Shared`在 Visual Basic 中) 名为字段`number`。</span><span class="sxs-lookup"><span data-stu-id="617d0-139">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="617d0-140">第二个线程执行静态`ThreadProc`方法，读取写入的值`Main`。</span><span class="sxs-lookup"><span data-stu-id="617d0-140">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="617d0-141">`ThreadProc`方法等待<xref:System.Threading.AutoResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="617d0-141">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="617d0-142">当`Main`调用<xref:System.Threading.EventWaitHandle.Set%2A>方法<xref:System.Threading.AutoResetEvent>、`ThreadProc`方法读取一个值。</span><span class="sxs-lookup"><span data-stu-id="617d0-142">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="617d0-143"><xref:System.Threading.AutoResetEvent>立即重置，因此`ThreadProc`方法将再次等待。</span><span class="sxs-lookup"><span data-stu-id="617d0-143">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="617d0-144">程序逻辑保证`ThreadProc`方法将永远不会读取相同的值两次。</span><span class="sxs-lookup"><span data-stu-id="617d0-144">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="617d0-145">它不保证，`ThreadProc`方法将读取编写的每个值`Main`。</span><span class="sxs-lookup"><span data-stu-id="617d0-145">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="617d0-146">确保这一点需要第二个<xref:System.Threading.AutoResetEvent>锁。</span><span class="sxs-lookup"><span data-stu-id="617d0-146">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="617d0-147">每个写入操作之后,`Main`产生通过调用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法，以使第二个线程执行有机会。</span><span class="sxs-lookup"><span data-stu-id="617d0-147">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="617d0-148">否则为单处理器计算机上`Main`将写入任何之间的许多值两个读取操作。</span><span class="sxs-lookup"><span data-stu-id="617d0-148">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>