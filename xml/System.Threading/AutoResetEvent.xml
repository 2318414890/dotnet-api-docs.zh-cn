<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AutoResetEvent.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59087366b105fd0db08981653c09c4fc5801df013.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9087366b105fd0db08981653c09c4fc5801df013</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>Notifies a waiting thread that an event has occurred.</source>
          <target state="translated">通知正在等待的线程已发生事件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 允许的线程以互相通信通过发送信号。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Typically, you use this class when threads need exclusive access to a resource.</source>
          <target state="translated">通常情况下，当线程需要对资源的独占访问时使用此类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此类型实现<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">在使用完类型后，您应直接或间接释放类型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接释放类型，调用其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>中的方法<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>块。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要间接释放类型，请使用 <ph id="ph1">`using`</ph>（在 C# 中）或 <ph id="ph2">`Using`</ph>（在 Visual Basic 中）等语言构造。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口主题。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>A thread waits for a signal by calling <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">`AutoResetEvent`</ph>.</source>
          <target state="translated">线程通过调用等待信号<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>上<ph id="ph2">`AutoResetEvent`</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If the <ph id="ph1">`AutoResetEvent`</ph> is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`AutoResetEvent`</ph>处于是非终止的状态，此线程受到阻止，线程当前控制要指示该资源是通过调用可用的资源等待<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Calling <ph id="ph1">`Set`</ph> signals <ph id="ph2">`AutoResetEvent`</ph> to release a waiting thread.</source>
          <target state="translated">调用<ph id="ph1">`Set`</ph>信号<ph id="ph2">`AutoResetEvent`</ph>释放正在等待的线程。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 单个正在等待的线程已发布，并自动返回给非终止状态之前，将保持终止状态。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If no threads are waiting, the state remains signaled indefinitely.</source>
          <target state="translated">如果没有线程在等待，状态将无限期地保持发送信号。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If a thread calls <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> while the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is in the signaled state, the thread does not block.</source>
          <target state="translated">如果一个线程调用<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>时<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>是发送信号状态; 在线程不会阻止。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> releases the thread immediately and returns to the non-signaled state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>立即释放线程并返回到非终止状态。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>There is no guarantee that every call to the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method will release a thread.</source>
          <target state="translated">不能保证，对每个调用<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法将释放线程。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</source>
          <target state="translated">如果两个调用太靠近在一起，以便第二次调用前释放线程发生，则释放只有一个线程。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>It is as if the second call did not happen.</source>
          <target state="translated">它是就像第二个调用未发生。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Also, if <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> is called when there are no threads waiting and the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already signaled, the call has no effect.</source>
          <target state="translated">此外，如果<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>时没有任何等待的线程调用与<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>已终止，则调用不起作用。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>You can control the initial state of an <ph id="ph1">`AutoResetEvent`</ph> by passing a Boolean value to the constructor: <ph id="ph2">`true`</ph> if the initial state is signaled and <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">你可以控制的初始状态<ph id="ph1">`AutoResetEvent`</ph>通过将一个布尔值传递给构造函数：<ph id="ph2">`true`</ph>如果初始状态终止状态和<ph id="ph3">`false`</ph>否则为。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> can also be used with the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 也可以用于<ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept> in the conceptual documentation.</source>
          <target state="translated">有关线程同步机制的详细信息，请参阅<bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept>的概念性文档。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Beginning with the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> derives from the new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.</source>
          <target state="translated">从.NET Framework 2.0 版中，开始<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>派生自新<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>An <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is functionally equivalent to an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>功能上等效于<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>使用创建<ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated">与不同<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>类，<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>类提供对访问已命名系统同步事件。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to release one thread at a time, by calling the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method (on the base class) each time the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>通过调用一次释放一个线程<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法 （基类） 每次用户需按<bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>密钥。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The example starts three threads, which wait on an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the signaled state.</source>
          <target state="translated">此示例将启动三个线程，等待<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>中发送信号状态的已创建。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The first thread is released immediately, because the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already in the signaled state.</source>
          <target state="translated">第一个线程，所以立即释放因为<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>已处于终止状态。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This resets the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to the non-signaled state, so that subsequent threads block.</source>
          <target state="translated">这将重置<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>为非终止状态，以便随后的线程阻塞。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The blocked threads are not released until the user releases them one at a time by pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">未释放被阻止的线程，直到用户释放它们一个按一次<bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>密钥。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>After the threads are released from the first <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, they wait on another <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the non-signaled state.</source>
          <target state="translated">线程释放从第一个后<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>，等待另一个<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>是非终止状态中创建。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>All three threads block, so the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method must be called three times to release them all.</source>
          <target state="translated">阻止所有三个线程，因此<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法必须调用三次以将其释放。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This class is thread safe.</source>
          <target state="translated">此类是线程安全的。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state to signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set the initial state to non-signaled.</source>
          <target state="translated">若要将初始状态设置为终止，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；若要将初始状态设置为非终止，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.</source>
          <target state="translated">用一个指示是否将初始状态设置为终止的布尔值初始化 <ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The following example uses an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to synchronize the activities of two threads.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>来同步两个线程的活动。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The first thread, which is the application thread, executes <ph id="ph1">`Main`</ph>.</source>
          <target state="translated">第一个线程，即应用程序线程执行<ph id="ph1">`Main`</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It writes values to the protected resource, which is a <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) field named <ph id="ph3">`number`</ph>.</source>
          <target state="translated">它将值写入到受保护的资源，即<ph id="ph1">`static`</ph>(<ph id="ph2">`Shared`</ph>在 Visual Basic 中) 名为字段<ph id="ph3">`number`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The second thread executes the static <ph id="ph1">`ThreadProc`</ph> method, which reads the values written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">第二个线程执行静态<ph id="ph1">`ThreadProc`</ph>方法，读取写入的值<ph id="ph2">`Main`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">`ThreadProc`</ph> method waits for the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph>方法等待<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>When <ph id="ph1">`Main`</ph> calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method on the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, the <ph id="ph4">`ThreadProc`</ph> method reads one value.</source>
          <target state="translated">当<ph id="ph1">`Main`</ph>调用<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法<ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>、<ph id="ph4">`ThreadProc`</ph>方法读取一个值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> immediately resets, so the <ph id="ph2">`ThreadProc`</ph> method waits again.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>立即重置，因此<ph id="ph2">`ThreadProc`</ph>方法将再次等待。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The program logic guarantees that the <ph id="ph1">`ThreadProc`</ph> method will never read the same value two times.</source>
          <target state="translated">程序逻辑保证<ph id="ph1">`ThreadProc`</ph>方法将永远不会读取相同的值两次。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It does not guarantee that the <ph id="ph1">`ThreadProc`</ph> method will read every value written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">它不保证，<ph id="ph1">`ThreadProc`</ph>方法将读取编写的每个值<ph id="ph2">`Main`</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>That guarantee would require a second <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> lock.</source>
          <target state="translated">确保这一点需要第二个<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>锁。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>After each write operation, <ph id="ph1">`Main`</ph> yields by calling the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, to give the second thread a chance to execute.</source>
          <target state="translated">每个写入操作之后,<ph id="ph1">`Main`</ph>产生通过调用<ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph>方法，以使第二个线程执行有机会。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Otherwise, on a single-processor computer <ph id="ph1">`Main`</ph> would write many values between any two read operations.</source>
          <target state="translated">否则为单处理器计算机上<ph id="ph1">`Main`</ph>将写入任何之间的许多值两个读取操作。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>