<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ReaderWriterLock.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fc1a0c88765040869d8ad919aeb575e304c71bde.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc1a0c88765040869d8ad919aeb575e304c71bde</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Defines a lock that supports single writers and multiple readers.</source>
          <target state="translated">定义支持单个写线程和多个读线程的锁。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> has two reader-writer locks, <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> 有下面两个读取器-编写器锁：<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> 和 <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is recommended for all new development.</source>
          <target state="translated">建议对所有新开发的项目使用 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is similar to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</source>
          <target state="translated">虽然 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> 类似于 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>，但不同之处在于，前者简化了递归规则以及锁状态的升级和降级规则。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> avoids many cases of potential deadlock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> 避免了许多潜在的死锁情况。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In addition, the performance of <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is significantly better than <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">另外，<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> 的性能显著优于 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> is used to synchronize access to a resource.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 用于对资源的访问进行同步。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</source>
          <target state="translated">在任何给定时间，它允许多个线程的并发读访问权限，或者单个线程的写访问权限。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In a situation where a resource is changed infrequently, a <ph id="ph1">`ReaderWriterLock`</ph> provides better throughput than a simple one-at-a-time lock, such as <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>.</source>
          <target state="translated">在资源中，很少更改的情况下<ph id="ph1">`ReaderWriterLock`</ph>提供更佳的吞吐量比简单的一个每次锁定，如<ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">`ReaderWriterLock`</ph> works best where most accesses are reads, while writes are infrequent and of short duration.</source>
          <target state="translated"><ph id="ph1">`ReaderWriterLock`</ph> 最适用于大多数访问的读取，而写很少和短的持续时间。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</source>
          <target state="translated">多个读取器备用与单个编写器，以便读取器和编写器都不会阻止很长一段。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Holding reader locks or writer locks for long periods will starve other threads.</source>
          <target state="translated">持有很长一段的读取器锁或编写器锁将阻止其他线程。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For best performance, consider restructuring your application to minimize the duration of writes.</source>
          <target state="translated">为获得最佳性能，请考虑重新构建应用程序以最大程度减少写入的持续时间。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>A thread can hold a reader lock or a writer lock, but not both at the same time.</source>
          <target state="translated">锁定或编写器锁，但不是能同时在同一时间，线程可以持有一个读取器。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Instead of releasing a reader lock in order to acquire the writer lock, you can use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>.</source>
          <target state="translated">而不是为了获取写线程锁释放读线程锁，你可以使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Recursive lock requests increase the lock count on a lock.</source>
          <target state="translated">递归锁请求增加锁的锁计数。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Readers and writers are queued separately.</source>
          <target state="translated">单独排队读取器和编写器。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</source>
          <target state="translated">当一个线程释放写线程锁时，队列中等待的读取器在该时刻的所有线程会都授予读取器锁;当所有这些读取器锁已发布，正在编写器中的线程等待下一个队列，如果任何，被授予写线程锁，等等。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In other words, <ph id="ph1">`ReaderWriterLock`</ph> alternates between a collection of readers, and one writer.</source>
          <target state="translated">换而言之，<ph id="ph1">`ReaderWriterLock`</ph>之间的读取器、 集合和一个编写器的替代项。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</source>
          <target state="translated">时编写器队列中的线程正在等待活动的读取者锁释放，请求新的读取器锁的线程会累积读取器队列中。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</source>
          <target state="translated">未授予他们的请求，即使它们无法与现有读线程锁拥有者; 共享的并发访问这可帮助保护对读取器的无限期阻滞进度的编写器。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Most methods for acquiring locks on a <ph id="ph1">`ReaderWriterLock`</ph> accept time-out values.</source>
          <target state="translated">上获取锁的大多数方法<ph id="ph1">`ReaderWriterLock`</ph>接受超时值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Use time-outs to avoid deadlocks in your application.</source>
          <target state="translated">使用超时值以避免在你的应用程序的死锁。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</source>
          <target state="translated">例如，线程可能会获取对一个资源的编写器锁定，然后请求上第二个资源，则将读线程锁同时，另一个线程可能会获取写线程锁上第二个资源，并请求在第一天的读取器锁定。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Unless time-outs are used, the threads deadlock.</source>
          <target state="translated">如果不使用超时，线程死锁。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">如果在超时间隔过期，并且尚未授予锁请求，该方法控制权返回给调用线程引发<ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>A thread can catch this exception and determine what action to take next.</source>
          <target state="translated">线程可以捕获此异常，并确定接下来要采取的操作。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Time-outs are expressed in milliseconds.</source>
          <target state="translated">超时以毫秒为单位表示。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If you use a <ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph> to specify the time-out, the value used is the total number of whole milliseconds represented by the <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">如果你使用<ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph>若要指定超时，使用的值是表示的整毫秒的总数<ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The following table shows the valid time-out values in milliseconds.</source>
          <target state="translated">下表显示了有效的超时值以毫秒为单位。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>-1</source>
          <target state="translated">-1</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The thread waits until the lock is acquired, regardless of how long it takes.</source>
          <target state="translated">线程等待，直到已获取锁，而不考虑了多长时间。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For methods that specify integer time-outs, the constant <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> can be used.</source>
          <target state="translated">指定整数超时、 常量的方法<ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>可用。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The thread does not wait to acquire the lock.</source>
          <target state="translated">线程不会等待获取锁。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If the lock cannot be acquired immediately, the method returns.</source>
          <target state="translated">如果不能立即获取锁，该方法返回。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>&gt;0</source>
          <target state="translated">&gt;0</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The number of milliseconds to wait.</source>
          <target state="translated">要等待的毫秒数。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>With the exception of -1, negative time-out values are not allowed.</source>
          <target state="translated">除了-1，不允许负的超时值。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If you specify a negative integer other than -1, a time-out value of zero is used instead.</source>
          <target state="translated">如果指定负整数而-1，则改用超时值为零。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> that represents a negative number of milliseconds other than -1, <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> is thrown.</source>
          <target state="translated">（也就是说，该方法返回而不等待，如果不能立即获取锁。）如果指定<ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph>表示负数，而-1 毫秒<ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> to protect a shared resource, an integer value named <ph id="ph2">`resource`</ph>, that is read concurrently and written exclusively by multiple threads.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>若要保护的共享的资源，一个整数值名为<ph id="ph2">`resource`</ph>，即同时读取和写入多个线程被以独占方式。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Note that the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> is declared at the class level so that it is visible to all threads.</source>
          <target state="translated">请注意，<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>以便都可以看到所有线程在类级别声明。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>The following code example demonstrates how to create a new instance of the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何创建 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Acquires a reader lock.</source>
          <target state="translated">获取读线程锁。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">以毫秒为单位的超时。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Acquires a reader lock, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用一个 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 超时值获取读线程锁。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> 如果另一个线程持有写线程锁，或至少一个线程正在等待编写器锁块。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>If the current thread already has the writer lock, no reader lock is acquired.</source>
          <target state="translated">如果当前线程已将写线程锁，没有读线程锁。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Instead, the lock count on the writer lock is incremented.</source>
          <target state="translated">相反，写线程锁上的锁计数即会递增。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>This prevents a thread from blocking on its own writer lock.</source>
          <target state="translated">这会阻止线程阻止在其自己的编写器锁。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The result is exactly the same as calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, and an additional call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> is required when releasing the writer lock.</source>
          <target state="translated">结果应完全相同调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>，和对的其他调用<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>释放该编写器锁时是必需的。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">`AcquireReaderLock`</ph> supports recursive reader-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireReaderLock`</ph> 支持递归读线程锁请求。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</source>
          <target state="translated">也就是说，线程可以调用 AcquireReaderLock 多次，递增每个时间的锁计数。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireReaderLock`</ph>.</source>
          <target state="translated">必须调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph>对于您每次调用一次<ph id="ph2">`AcquireReaderLock`</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">或者，可以调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>以减少要立即零的锁计数。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</source>
          <target state="translated">递归锁请求始终立即授予而无需将读取器队列中的请求的线程。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</source>
          <target state="translated">使用递归锁时要格外小心，以避免阻止很长一段的编写器锁的请求。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有关有效的超时值，请参阅<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">下面的代码示例演示如何获取和发布读线程锁，以及如何处理当请求超时时引发的异常。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 在授予锁定请求前过期。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>，用于指定超时时间。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Acquires a reader lock, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用一个 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 超时值获取读线程锁。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> 如果另一个线程持有写线程锁，或至少一个线程正在等待编写器锁块。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>If the current thread already has the writer lock, no reader lock is acquired.</source>
          <target state="translated">如果当前线程已将写线程锁，没有读线程锁。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Instead, the lock count on the writer lock is incremented.</source>
          <target state="translated">相反，写线程锁上的锁计数即会递增。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>This prevents a thread from blocking on its own writer lock.</source>
          <target state="translated">这会阻止线程阻止在其自己的编写器锁。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>The result is exactly the same as calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, and an additional call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> is required when releasing the writer lock.</source>
          <target state="translated">结果应完全相同调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>，和对的其他调用<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>释放该编写器锁时是必需的。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">`AcquireReaderLock`</ph> supports recursive reader-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireReaderLock`</ph> 支持递归读线程锁请求。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</source>
          <target state="translated">也就是说，线程可以调用 AcquireReaderLock 多次，递增每个时间的锁计数。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireReaderLock`</ph>.</source>
          <target state="translated">必须调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph>对于您每次调用一次<ph id="ph2">`AcquireReaderLock`</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">或者，可以调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>以减少要立即零的锁计数。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</source>
          <target state="translated">递归锁请求始终立即授予而无需将读取器队列中的请求的线程。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</source>
          <target state="translated">使用递归锁时要格外小心，以避免阻止很长一段的编写器锁的请求。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有关有效的超时值，请参阅<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 在授予锁定请求前过期。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 可指定 -1 毫秒以外的任何负值。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Acquires the writer lock.</source>
          <target state="translated">获取写线程锁。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">以毫秒为单位的超时。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Acquires the writer lock, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用一个 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 超时值获取写线程锁。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>This method blocks if another thread has a reader lock or writer lock.</source>
          <target state="translated">此方法将一直阻塞如果另一个线程具有读线程锁或写线程锁。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">编写器锁交替使用具有多个并发的读取器锁的方法的说明，请参阅<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, or by calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">已将读线程锁的线程可以获取写线程锁在两种方式之一： 释放之前调用的读取器锁来<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>，或通过调用<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>If a thread calls <ph id="ph1">`AcquireWriterLock`</ph> while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</source>
          <target state="translated">如果一个线程调用<ph id="ph1">`AcquireWriterLock`</ph>虽然它仍有读线程锁，它将在其自己的读取器锁块; 如果指定无限期超时，则线程将发生死锁。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>To avoid such deadlocks, use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> to determine whether the current thread already has a reader lock.</source>
          <target state="translated">若要避免这类死锁，使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph>以确定当前线程是否已具有读线程锁。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source><ph id="ph1">`AcquireWriterLock`</ph> supports recursive writer-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireWriterLock`</ph> 支持递归写线程锁请求。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>That is, a thread can call <ph id="ph1">`AcquireWriterLock`</ph> multiple times, which increments the lock count each time.</source>
          <target state="translated">也就是说，调用线程可以<ph id="ph1">`AcquireWriterLock`</ph>多次，该锁计数递增 1 每次。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireWriterLock`</ph>.</source>
          <target state="translated">必须调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>对于您每次调用一次<ph id="ph2">`AcquireWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">或者，可以调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>以减少要立即零的锁计数。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</source>
          <target state="translated">递归锁请求始终立即授予而无需编写器队列中将请求的线程。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有关有效的超时值，请参阅<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">下面的代码示例演示如何获取和发布编写器锁，以及如何处理当请求超时时引发的异常。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 在授予锁定请求前过期。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>，用于指定超时时间。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Acquires the writer lock, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用一个 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 超时值获取写线程锁。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>This method blocks if another thread has a reader lock or writer lock.</source>
          <target state="translated">此方法将一直阻塞如果另一个线程具有读线程锁或写线程锁。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">编写器锁交替使用具有多个并发的读取器锁的方法的说明，请参阅<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, or by calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">已将读线程锁的线程可以获取写线程锁在两种方式之一： 释放之前调用的读取器锁来<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>，或通过调用<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>If a thread calls <ph id="ph1">`AcquireWriterLock`</ph> while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</source>
          <target state="translated">如果一个线程调用<ph id="ph1">`AcquireWriterLock`</ph>虽然它仍有读线程锁，它将在其自己的读取器锁块; 如果指定无限期超时，则线程将发生死锁。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>To avoid such deadlocks, use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> to determine whether the current thread already has a reader lock.</source>
          <target state="translated">若要避免这类死锁，使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph>以确定当前线程是否已具有读线程锁。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">`AcquireWriterLock`</ph> supports recursive writer-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireWriterLock`</ph> 支持递归写线程锁请求。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>That is, a thread can call <ph id="ph1">`AcquireWriterLock`</ph> multiple times, which increments the lock count each time.</source>
          <target state="translated">也就是说，调用线程可以<ph id="ph1">`AcquireWriterLock`</ph>多次，该锁计数递增 1 每次。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireWriterLock`</ph>.</source>
          <target state="translated">必须调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>对于您每次调用一次<ph id="ph2">`AcquireWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">或者，可以调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>以减少要立即零的锁计数。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</source>
          <target state="translated">递归锁请求始终立即授予而无需编写器队列中将请求的线程。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有关有效的超时值，请参阅<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 在授予锁定请求前过期。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 可指定 -1 毫秒以外的任何负值。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The sequence number.</source>
          <target state="translated">序列号。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</source>
          <target state="translated">指示获取序列号之后是否已将写线程锁授予某个线程。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果获取序列号之后已将写线程锁授予某一线程，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>You can use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> and <ph id="ph2">`AnyWritersSince`</ph> to improve application performance.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph>和<ph id="ph2">`AnyWritersSince`</ph>改进应用程序性能。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>For example, a thread might cache the information it obtains while holding a reader lock.</source>
          <target state="translated">例如，一个线程可能缓存持有的读取器锁时，它获取的信息。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>After releasing and later reacquiring the lock, the thread can use <ph id="ph1">`AnyWritersSince`</ph> to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</source>
          <target state="translated">释放并在先锁之后, 该线程可以使用<ph id="ph1">`AnyWritersSince`</ph>以决定是否其他有线程写入资源在此期间; 如果没有，可以使用缓存的信息。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</source>
          <target state="translated">此方法很有用，读取由锁保护的信息将占用大量资源;例如，运行数据库查询。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</source>
          <target state="translated">调用方必须顺序的序列号，才能将读线程锁或编写器锁持有。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph>属性以确定另一个线程是否获取自当前线程上的受保护资源的编写器锁上次持有写线程锁。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> returned by <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph>，由 <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph> 返回。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>Restores the lock status of the thread to what it was before <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph> was called.</source>
          <target state="translated">将线程的锁状态还原为调用 <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph> 前的状态。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> 释放写线程锁，而不考虑递归锁计数，并还原才能升级到编写器锁线程持有读线程锁。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The lock count on the reader lock is restored.</source>
          <target state="translated">将还原读线程锁上的锁计数。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source><ph id="ph1">`DowngradeFromWriterLock`</ph> accepts a <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> obtained by calling <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`DowngradeFromWriterLock`</ph> 接受<ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph>通过调用获取<ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>Do not use a <ph id="ph1">`LockCookie`</ph> returned by <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</source>
          <target state="translated">不要使用<ph id="ph1">`LockCookie`</ph>返回<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</source>
          <target state="translated">线程不会阻止从写线程锁，降级时，即使其他线程在等待写线程锁，因为所有的读取器锁请求被授予权限时编写器锁被释放。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</source>
          <target state="translated">下面的代码示例演示如何请求读线程锁，将读取器锁升级为写线程锁，并再次降级到将读线程锁。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The thread does not have the writer lock.</source>
          <target state="translated">线程没有写线程锁。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The address of <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> is a null pointer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> 的地址为空指针。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> object.</source>
          <target state="translated">确保垃圾回收器回收 <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> 对象时释放资源并执行其他清理操作。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.Finalize">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.Finalize%2A&gt;</ph> when the current <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> object is ready to be finalized.</source>
          <target state="translated">垃圾回收器调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.Finalize%2A&gt;</ph>时当前<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>对象已准备好完成。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source>Gets a value indicating whether the current thread holds a reader lock.</source>
          <target state="translated">获取一个值，该值指示当前线程是否持有读线程锁。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds a reader lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前线程持有读线程锁，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source>The following code example demonstrates how to use <ph id="ph1">`IsReaderLockHeld`</ph> to avoid deadlocks.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">`IsReaderLockHeld`</ph>为避免死锁。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source>Gets a value indicating whether the current thread holds the writer lock.</source>
          <target state="translated">获取一个值，该值指示当前线程是否持有写线程锁。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds the writer lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前线程持有写线程锁，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source>The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, <ph id="ph1">`ReaderWriterLock`</ph> does not grant the reader lock but instead increments the lock count on the writer lock.</source>
          <target state="translated">下面的代码示例演示在尝试获取对具有编写器锁的线程的读取器锁时<ph id="ph1">`ReaderWriterLock`</ph>不会授予读线程锁，但改为递增写线程锁上的锁计数。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>Releases the lock, regardless of the number of times the thread acquired the lock.</source>
          <target state="translated">释放锁，不管线程获取锁的次数如何。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value representing the released lock.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 值，表示释放的锁。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> releases the reader lock or writer lock, regardless of the recursive lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> 释放读线程锁或写线程锁，而不考虑递归锁计数。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>To restore the state of the lock, including the lock count, pass the <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">若要还原的锁，包括锁计数，状态将传递<ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph>到<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>方法来释放锁后的，无论多少次它已获取线程，以及如何还原锁更高版本的状态。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>Decrements the lock count.</source>
          <target state="translated">减少锁计数。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> decrements the lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> 减少锁计数。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>When the count reaches zero, the lock is released.</source>
          <target state="translated">在计数变为零时，被释放锁。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>If a thread has the writer lock, calling <ph id="ph1">`ReleaseReaderLock`</ph> has the same effect as calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>.</source>
          <target state="translated">如果线程持有写线程锁，则调用<ph id="ph1">`ReleaseReaderLock`</ph>具有相同的效果与调用<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>If a thread has no locks, calling <ph id="ph1">`ReleaseReaderLock`</ph> throws an <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">如果线程已无锁，则调用<ph id="ph1">`ReleaseReaderLock`</ph>引发<ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">下面的代码示例演示如何获取和发布读线程锁，以及如何处理当请求超时时引发的异常。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>The thread does not have any reader or writer locks.</source>
          <target state="translated">线程没有读线程锁或写线程锁。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>Decrements the lock count on the writer lock.</source>
          <target state="translated">减少写线程锁上的锁计数。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> decrements the writer lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> 减少写线程锁计数。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>When the count reaches zero, the writer lock is released.</source>
          <target state="translated">当计数达到零时，将写线程锁被释放。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>If a thread has a reader lock, or no locks, calling <ph id="ph1">`ReleaseWriterLock`</ph> throws an <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">如果线程持有读线程锁或没有锁，则调用<ph id="ph1">`ReleaseWriterLock`</ph>引发<ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">下面的代码示例演示如何获取和发布编写器锁，以及如何处理当请求超时时引发的异常。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>The thread does not have the writer lock.</source>
          <target state="translated">线程没有写线程锁。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> returned by <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph>，由 <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph> 返回。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Restores the lock status of the thread to what it was before calling <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>.</source>
          <target state="translated">将线程的锁状态还原为调用 <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph> 前的状态。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The state restored by <ph id="ph1">`RestoreLock`</ph> includes the recursive lock count.</source>
          <target state="translated">还原的状态<ph id="ph1">`RestoreLock`</ph>包括递归锁计数。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</source>
          <target state="translated">如果它尝试还原读线程锁，另一个线程获取写线程锁之后, 或如果它尝试还原将写线程锁后获取另一个线程的读取器锁或编写器锁线程将阻止。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Because <ph id="ph1">`RestoreLock`</ph> does not accept a time-out, you should take care to avoid possible deadlocks.</source>
          <target state="translated">因为<ph id="ph1">`RestoreLock`</ph>不接受超时，您需要采取措施以避免可能出现死锁。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Before calling <ph id="ph1">`RestoreLock`</ph>, make sure you have released all locks acquired since the call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</source>
          <target state="translated">之前调用<ph id="ph1">`RestoreLock`</ph>，请确保已释放之后调用获取的所有锁<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</source>
          <target state="translated">例如，线程死锁，就获取读线程锁，，然后尝试还原的更早版本的编写器锁。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A&gt;</ph> to detect such additional locks.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A&gt;</ph>来检测此类额外的锁。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Do not use a <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> returned from <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">不要使用<ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph>从返回<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>方法来释放锁后的，无论多少次它已获取线程，以及如何还原锁更高版本的状态。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The address of <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> is a null pointer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> 的地址为空指针。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Upgrades a reader lock to the writer lock.</source>
          <target state="translated">将读线程锁升级为写线程锁。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">以毫秒为单位的超时。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Upgrades a reader lock to the writer lock, using an <ph id="ph1">&lt;see langword="Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用一个 <ph id="ph1">&lt;see langword="Int32" /&gt;</ph> 超时值将读线程锁升级为写线程锁。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>When a thread calls <ph id="ph1">`UpgradeToWriterLock`</ph> the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</source>
          <target state="translated">当线程调用<ph id="ph1">`UpgradeToWriterLock`</ph>释放读线程锁，而不考虑的锁计数，和线程将转到编写器锁队列的末尾。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</source>
          <target state="translated">因此，其他线程可能会写入之前请求升级被授予写线程锁的线程资源。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The time-out exception is not thrown until the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method can reacquire the reader lock.</source>
          <target state="translated">之前调用的线程不会引发超时异常<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法可以重新获取读线程锁。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>If there are no other threads waiting for the writer lock, this happens immediately.</source>
          <target state="translated">如果没有其他线程等待编写器锁，这将立即发生。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>However, if another thread is queued for the writer lock, the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</source>
          <target state="translated">但是，如果另一个线程将排队，等待将写线程锁，该线程调用的函数<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>直到所有当前读取器已释放其持有的锁，和一个线程已获取并释放写线程锁，方法不能重新获取读线程锁。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>This is true even if the other thread that requested the writer lock requested it after the current thread called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method.</source>
          <target state="translated">这是 true，即使另一个线程请求的编写器锁请求它后与当前线程调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>To restore the lock state, call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> using the <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> returned by <ph id="ph3">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">若要还原的锁定状态，调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>使用<ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph>返回<ph id="ph3">`UpgradeToWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Do not use this <ph id="ph1">`LockCookie`</ph> with <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">不使用此<ph id="ph1">`LockCookie`</ph>与<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>When a thread has no reader lock, do not use <ph id="ph1">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">当线程必须没有读线程锁时，不要使用<ph id="ph1">`UpgradeToWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph> instead.</source>
          <target state="translated">请改用 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有关有效的超时值，请参阅<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</source>
          <target state="translated">下面的代码示例演示如何请求读线程锁，将读取器锁升级为写线程锁，并再次降级到将读线程锁。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 在授予锁定请求前过期。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>，用于指定超时时间。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Upgrades a reader lock to the writer lock, using a <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用一个 <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> 超时值将读线程锁升级为写线程锁。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>When a thread calls <ph id="ph1">`UpgradeToWriterLock`</ph> the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</source>
          <target state="translated">当线程调用<ph id="ph1">`UpgradeToWriterLock`</ph>释放读线程锁，而不考虑的锁计数，和线程将转到编写器锁队列的末尾。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</source>
          <target state="translated">因此，其他线程可能会写入之前请求升级被授予写线程锁的线程资源。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>The time-out exception is not thrown until the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method can reacquire the reader lock.</source>
          <target state="translated">之前调用的线程不会引发超时异常<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法可以重新获取读线程锁。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>If there are no other threads waiting for the writer lock, this happens immediately.</source>
          <target state="translated">如果没有其他线程等待编写器锁，这将立即发生。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>However, if another thread is queued for the writer lock, the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</source>
          <target state="translated">但是，如果另一个线程将排队，等待将写线程锁，该线程调用的函数<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>直到所有当前读取器已释放其持有的锁，和一个线程已获取并释放写线程锁，方法不能重新获取读线程锁。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>This is true even if the other thread that requested the writer lock requested it after the current thread called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method.</source>
          <target state="translated">这是 true，即使另一个线程请求的编写器锁请求它后与当前线程调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>To restore the lock state, call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> using the <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> returned by <ph id="ph3">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">若要还原的锁定状态，调用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>使用<ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph>返回<ph id="ph3">`UpgradeToWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Do not use this <ph id="ph1">`LockCookie`</ph> with <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">不使用此<ph id="ph1">`LockCookie`</ph>与<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>When a thread has no reader lock, do not use <ph id="ph1">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">当线程必须没有读线程锁时，不要使用<ph id="ph1">`UpgradeToWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph> instead.</source>
          <target state="translated">请改用 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有关有效的超时值，请参阅<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 在授予锁定请求前过期。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 可指定 -1 毫秒以外的任何负值。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>Gets the current sequence number.</source>
          <target state="translated">获取当前序列号。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The current sequence number.</source>
          <target state="translated">当前序列号。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The sequence number increases whenever a thread acquires the writer lock.</source>
          <target state="translated">序列数目增加时线程获取写线程锁。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>You can save the sequence number and pass it to <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</source>
          <target state="translated">你可以保存的序列号，并将其传递到<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph>在更高版本时，如果你想要确定其他线程是否已在此期间获取写线程锁。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>You can use <ph id="ph1">`WriterSeqNum`</ph> to improve application performance.</source>
          <target state="translated">你可以使用<ph id="ph1">`WriterSeqNum`</ph>改进应用程序性能。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>For example, a thread might cache the information it obtains while holding a reader lock.</source>
          <target state="translated">例如，一个线程可能缓存持有的读取器锁时，它获取的信息。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling <ph id="ph1">`AnyWritersSince`</ph>; if not, the cached information can be used.</source>
          <target state="translated">在先锁再释放之后，线程可以确定其他线程具有对资源通过调用编写<ph id="ph1">`AnyWritersSince`</ph>; 如果没有，可以使用缓存的信息。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</source>
          <target state="translated">此方法很有用，当读取由锁保护的信息将占用大量资源;例如，运行数据库查询。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</source>
          <target state="translated">调用方必须顺序的序列号，才能将读线程锁或编写器锁持有。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph>属性和<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph>方法来确定自当前线程中另一个线程是否获取对受保护资源的编写器锁定上次持有写线程锁。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>类。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>