<Type Name="ThreadAbortException" FullName="System.Threading.ThreadAbortException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="905d757be76bb5177bb98c943ce40d6c2236e62d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406377" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ThreadAbortException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ThreadAbortException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadAbortException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadAbortException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadAbortException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type ThreadAbortException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>当对 <see cref="M:System.Threading.Thread.Abort(System.Object)" /> 方法发出调用时引发的异常。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当调用<xref:System.Threading.Thread.Abort%2A>方法以销毁线程时，公共语言运行时将引发<xref:System.Threading.ThreadAbortException>。 <xref:System.Threading.ThreadAbortException> 是特殊异常可捕获，但它将自动被再次引发的末尾`catch`块。 当引发此异常时，运行时执行所有`finally`块结束线程之前。 因为线程可以不受限制的计算`finally`块或调用<xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType>来取消中止，存在是没有保证的线程将完全结束。 如果你想要等待，直到中止的线程已结束，则可以调用<xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType>方法。 <xref:System.Threading.Thread.Join%2A> 是一个阻塞调用不返回直到线程实际停止执行。  
  
> [!NOTE]
>  当公共语言运行时 (CLR) 停止后台 threadsafter 托管可执行文件中的所有前台线程已都结束时，它不使用<xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>。 因此，不能使用<xref:System.Threading.ThreadAbortException>来检测何时正在由 CLR 终止后台线程。  
  
 <xref:System.Threading.ThreadAbortException> 使用 HRESULT COR_E_THREADABORTED，其值 0x80131530。  
  
> [!NOTE]
>  继承的值<xref:System.Exception.Data%2A>属性始终是`null`。  
  
   
  
## Examples  
 下面的示例演示正在中止的线程。 接收的线程`ThreadAbortException`使用<xref:System.Threading.Thread.ResetAbort%2A>方法来取消中止请求并继续执行。  
  
 [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]
 [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]
 [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  
  
 此代码生成以下输出：  
  
```  
Thread - working.  
Main - aborting my thread.  
Thread - caught ThreadAbortException - resetting.  
Exception message: Thread was being aborted.  
Thread - still alive and working.  
Thread - finished working.  
Main ending.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName="ExceptionState">
      <MemberSignature Language="C#" Value="public object ExceptionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadAbortException.ExceptionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionState : obj" Usage="System.Threading.ThreadAbortException.ExceptionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象包含与线程中止相关的应用程序特定的信息。</summary>
        <value>包含应用程序特定的信息的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过指定此属性返回的对象`stateInfo`参数<xref:System.Threading.Thread.Abort%2A>方法。 确切内容和此对象的用法是应用程序定义;它通常用于传达对正在中止的线程有意义的信息。  
  
   
  
## Examples  
 下面的代码示例演示如何将信息传递给正在中止的线程。  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentThread" />
        <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>