<Type Name="WaitCallback" FullName="System.Threading.WaitCallback">
  <TypeSignature Language="C#" Value="public delegate void WaitCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitCallback(System::Object ^ state);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state"><span data-ttu-id="18001-101">包含回调方法要使用的信息的对象。</span><span class="sxs-lookup"><span data-stu-id="18001-101">An object containing information to be used by the callback method.</span></span></param>
    <summary><span data-ttu-id="18001-102">表示要由线程池线程执行的回调方法。</span><span class="sxs-lookup"><span data-stu-id="18001-102">Represents a callback method to be executed by a thread pool thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18001-103"><xref:System.Threading.WaitCallback> 表示你想要执行的回调方法<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="18001-103"><xref:System.Threading.WaitCallback> represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="18001-104">通过将传递到回调方法创建委托<xref:System.Threading.WaitCallback>构造函数。</span><span class="sxs-lookup"><span data-stu-id="18001-104">Create the delegate by passing your callback method to the <xref:System.Threading.WaitCallback> constructor.</span></span> <span data-ttu-id="18001-105">你的方法必须具有此处所示的签名。</span><span class="sxs-lookup"><span data-stu-id="18001-105">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="18001-106">任务排入队列以便执行通过传递<xref:System.Threading.WaitCallback>委托给<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="18001-106">Queue your task for execution by passing the <xref:System.Threading.WaitCallback> delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="18001-107">在线程池线程变得可用时，将执行你的回调方法。</span><span class="sxs-lookup"><span data-stu-id="18001-107">Your callback method executes when a thread pool thread becomes available.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18001-108">Visual Basic 用户可以省略<xref:System.Threading.WaitCallback>构造函数，并且只需使用`AddressOf`运算符传递到回调方法时<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="18001-108">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="18001-109">Visual Basic 会自动调用正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="18001-109">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="18001-110">如果你想要将信息传递给你的回调方法，创建包含所需的信息的对象，并将其传递到<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>时你你任务排队以便执行。</span><span class="sxs-lookup"><span data-stu-id="18001-110">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution.</span></span> <span data-ttu-id="18001-111">执行回调方法时，每次`state`参数包含此对象。</span><span class="sxs-lookup"><span data-stu-id="18001-111">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="18001-112">有关使用回调同步线程池线程的详细信息，请参阅[托管线程池](~/docs/standard/threading/the-managed-thread-pool.md)。</span><span class="sxs-lookup"><span data-stu-id="18001-112">For more information about using callbacks to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18001-113">本部分包含两个示例。</span><span class="sxs-lookup"><span data-stu-id="18001-113">This section contains two examples.</span></span> <span data-ttu-id="18001-114">第一个示例演示如何可以队列由线程池执行一个简单的任务。</span><span class="sxs-lookup"><span data-stu-id="18001-114">The first example demonstrates how you can queue a simple task for execution by the thread pool.</span></span>  
  
 <span data-ttu-id="18001-115">第二个示例演示如何任务排入队列，并将信息传递给它。</span><span class="sxs-lookup"><span data-stu-id="18001-115">The second example demonstrates how you can queue a task and pass information to it.</span></span>  
  
 <span data-ttu-id="18001-116">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="18001-116">**Example 1**</span></span>  
  
 <span data-ttu-id="18001-117">此示例演示如何使用<xref:System.Threading.WaitCallback>委托排队由线程池执行的任务。</span><span class="sxs-lookup"><span data-stu-id="18001-117">This example shows how to use the <xref:System.Threading.WaitCallback> delegate to queue a task for execution by the thread pool.</span></span> <span data-ttu-id="18001-118">此代码示例使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>方法重载将任务排入队列，由<xref:System.Threading.WaitCallback>包装`ThreadProc`方法，以在有线程变得可用时执行。</span><span class="sxs-lookup"><span data-stu-id="18001-118">The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method overload to queue a task, which is represented by a <xref:System.Threading.WaitCallback> that wraps the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="18001-119">使用此重载不提供任何任务信息。</span><span class="sxs-lookup"><span data-stu-id="18001-119">No task information is supplied with this overload.</span></span> <span data-ttu-id="18001-120">因此，可供信息`ThreadProc`方法仅限于该方法所属的对象。</span><span class="sxs-lookup"><span data-stu-id="18001-120">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="18001-121">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="18001-121">**Example 2**</span></span>  
  
 <span data-ttu-id="18001-122">此示例演示如何创建包含任务信息的对象。</span><span class="sxs-lookup"><span data-stu-id="18001-122">This example shows how to create an object that contains task information.</span></span> <span data-ttu-id="18001-123">它还演示了如何在线程池将该对象传递给排队等待执行的任务。</span><span class="sxs-lookup"><span data-stu-id="18001-123">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadPool" />
  </Docs>
</Type>