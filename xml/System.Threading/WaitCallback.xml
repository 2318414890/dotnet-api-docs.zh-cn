<Type Name="WaitCallback" FullName="System.Threading.WaitCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c971c6ff730ee4e62d7280c5bffa17634a0ecf8f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37754551" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitCallback(System::Object ^ state);" />
  <TypeSignature Language="F#" Value="type WaitCallback = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">包含回调方法要使用的信息的对象。</param>
    <summary>表示要由线程池线程执行的回调方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitCallback> 表示要执行的回调方法<xref:System.Threading.ThreadPool>线程。 通过将传递到回调方法创建委托<xref:System.Threading.WaitCallback>构造函数。 您的方法必须具有的签名如下所示。  
  
 任务排入队列以便执行通过传递<xref:System.Threading.WaitCallback>委托给<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>。 在线程池线程变得可用时，将执行回调方法。  
  
> [!NOTE]
>  Visual Basic 用户可以省略<xref:System.Threading.WaitCallback>构造函数，并只需使用`AddressOf`运算符时将传递到回调方法<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。 Visual Basic 会自动调用正确的委托构造函数。  
  
 如果你想要将信息传递给回调方法，创建包含所需的信息的对象并将其传递给<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>您执行的任务进行排队时。 在执行回调方法，每次`state`参数包含此对象。  
  
 有关使用回调来同步线程池线程的详细信息，请参阅[管理的线程池](~/docs/standard/threading/the-managed-thread-pool.md)。  
  
   
  
## Examples  
 本部分包含两个示例。 第一个示例演示如何可以队列由线程池执行一个简单的任务。  
  
 第二个示例演示如何任务排入队列并将信息传递给它。  
  
 **示例 1**  
  
 此示例演示如何使用<xref:System.Threading.WaitCallback>委托排队由线程池执行的任务。 代码示例使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>方法重载将任务排入队列，由表示<xref:System.Threading.WaitCallback>包装`ThreadProc`方法，以在线程变得可用时执行。 使用此重载不提供任何任务信息。 因此，可供信息`ThreadProc`方法被限制为该方法所属的对象。  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 **示例 2**  
  
 此示例演示如何创建包含任务信息的对象。 它还演示了如何按线程池将该对象传递给已排队等待执行的任务。  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadPool" />
  </Docs>
</Type>