<Type Name="WaitCallback" FullName="System.Threading.WaitCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7496a6510c0a8c55f5898eccf05df204630afc6b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48586080" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitCallback(System::Object ^ state);" />
  <TypeSignature Language="F#" Value="type WaitCallback = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">包含回调方法要使用的信息的对象。</param>
    <summary>表示要由线程池线程执行的回调方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitCallback> 表示要执行的回调方法<xref:System.Threading.ThreadPool>线程。 通过将传递到回调方法创建委托<xref:System.Threading.WaitCallback>构造函数。 您的方法必须具有的签名如下所示。  
  
 通过传递队列执行的方法<xref:System.Threading.WaitCallback>委托给<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>。 线程池线程变得可用时，将执行回调方法。  
  
> [!NOTE]
>  Visual Basic 用户可以省略<xref:System.Threading.WaitCallback>构造函数，并只需使用`AddressOf`运算符时将传递到回调方法<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。 Visual Basic 会自动调用正确的委托构造函数。  
  
 如果你想要将信息传递给回调方法，创建包含所需的信息的对象并将其传递给<xref:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)>方法作为第二个参数。 在执行回调方法，每次`state`参数包含此对象。  

 有关示例，请使用`WaitCallback`委派，请参阅<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>方法。
  
 有关线程池的详细信息，请参阅[托管的线程池](~/docs/standard/threading/the-managed-thread-pool.md)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadPool" />
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">线程与线程处理</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">托管线程池</related>
  </Docs>
</Type>