<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CancellationTokenSource.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac594e623c10b8f5fb941b4f23eb30c7dcadd826d47.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94e623c10b8f5fb941b4f23eb30c7dcadd826d47</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Signals to a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that it should be canceled.</source>
          <target state="translated">向应该被取消的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> 发送信号。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>，.NET Framework 涉及两个对象的协作取消异步操作或长时间运行的同步操作使用一个统一的模型：</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which provides a cancellation token through its <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property and sends a cancellation message by calling its <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> method.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>对象，它提供取消标记通过其<ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph>属性和发送一个取消消息通过调用其<ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object, which indicates whether cancellation is requested.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph>对象，该值指示是否已请求取消操作。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The general pattern for implementing the cooperative cancellation model is:</source>
          <target state="translated">用于实现协作取消模型的常规模式是：</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Instantiate a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which manages and sends cancellation notification to the individual cancellation tokens.</source>
          <target state="translated">实例化 <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> 对象，此对象管理取消通知并将其发送给单个取消标记。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Pass the token returned by the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph> property to each task or thread that listens for cancellation.</source>
          <target state="translated">将 <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph> 属性返回的标记传递给每个侦听取消的任务或线程。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method from operations that receive the cancellation token.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph>从接收到取消标记的操作的方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Provide a mechanism for each task or thread to respond to a cancellation request.</source>
          <target state="translated">提供有关每个任务或线程以响应取消请求的机制。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.</source>
          <target state="translated">无论你选择取消某一操作，和完全如何你执行此操作，取决于你的应用程序逻辑。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> method to provide notification of cancellation.</source>
          <target state="translated">调用 <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> 方法以提供取消通知。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>This sets the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> property on every copy of the cancellation token to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">这将设置<ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph>取消标记每个副本上的属性<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Dispose%2A&gt;</ph> method when you are finished with the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Dispose%2A&gt;</ph>方法在你完成<ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>For more information, see <bpt id="p1">[</bpt>Cancellation in Managed Threads<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>托管线程中的取消<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此类型实现<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">在完成使用类型的实例后，您应释放它的中，直接或间接。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接释放类型，调用其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>中的方法<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>块。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要间接释放类型，请使用 <ph id="ph1">`using`</ph>（在 C# 中）或 <ph id="ph2">`Using`</ph>（在 Visual Basic 中）等语言构造。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口主题。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</source>
          <target state="translated">下面的示例使用的随机数生成器来模拟的数据集合应用程序从十一种不同检测读取 10 的整数值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</source>
          <target state="translated">零值指示度量值已失败的一个检测，应计算在这种情况下应取消操作和任何总体平均值。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To handle the possible cancellation of the operation, the example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object that generates a cancellation token which is passed to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">若要处理可能取消操作，该示例实例化<ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>对象，它生成的取消标记传递给的<ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph>对象反过来取消将标记传递到每个任务负责收集特定检测读数。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph>调用方法来确保只有在所有读数已都收集了成功后，才计算平均值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>If a task has not because it has been cancelled, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> method throws an exception.</source>
          <target state="translated">如果某个任务具有不是它已被取消，因为调用<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph>方法引发异常。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of <ph id="ph2">&lt;see cref="M:System.Threading.CancellationTokenSource.Dispose" /&gt;</ph>, which must only be used when all other operations on the <ph id="ph3">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> object have completed.</source>
          <target state="translated">所有公共和受保护成员<ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>是线程安全的可同时使用多个线程从除外<ph id="ph2">&lt;see cref="M:System.Threading.CancellationTokenSource.Dispose" /&gt;</ph>，后者仅必须时要使用所有其他操作<ph id="ph3">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>对象已完成。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>The time interval in milliseconds to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">取消此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 前等待的时间间隔（以毫秒为单位）。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class that will be canceled after the specified delay in milliseconds.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 类的新实例，在指定的延迟（以毫秒为单位）后将被取消。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>The countdown for the <ph id="ph1">`millisecondsDelay`</ph> starts during the call to the constructor.</source>
          <target state="translated">倒计时<ph id="ph1">`millisecondsDelay`</ph>在构造函数的调用期间启动。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>When the <ph id="ph1">`millisecondsDelay`</ph> expires, the constructed <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled (if it has not been canceled already).</source>
          <target state="translated">当<ph id="ph1">`millisecondsDelay`</ph>过期，构造<ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>（如果它未取消已） 取消。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>Subsequent calls to <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the <ph id="ph2">`millisecondsDelay`</ph> for the constructed <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">后续调用<ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph>将重置<ph id="ph2">`millisecondsDelay`</ph>用于构建<ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>，如果未已取消。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> 小于 -1。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>The time interval to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">取消此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 前等待的时间间隔。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class that will be canceled after the specified time span.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 类的新实例，在指定的时间跨度后将被取消。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>The countdown for the delay starts during the call to the constructor.</source>
          <target state="translated">在构造函数的调用期间启动延迟倒计时。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>When the delay expires, the constructed <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.</source>
          <target state="translated">延迟到期时，构造<ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>已取消，如果未已取消。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>Subsequent calls to <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the delay for the constructed <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">后续调用<ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph>将重置构造的延迟<ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>，如果未已取消。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> is less than -1 or greater than <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> 小于 -1 或大于 <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> is less than -1 or greater than <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> 小于 -1 或大于 <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Communicates a request for cancellation.</source>
          <target state="translated">传达取消请求。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>Communicates a request for cancellation.</source>
          <target state="translated">传达取消请求。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The associated <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns true.</source>
          <target state="translated">关联<ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph>将接收取消通知并将转换为状态其中<ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph>，则返回 true。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>Any callbacks or cancelable operations registered with the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.</source>
          <target state="translated">任何回调或可取消操作注册<ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph>将执行。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>We recommend that cancelable operations and callbacks registered with <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> not throw exceptions.</source>
          <target state="translated">我们建议可取消操作和回调注册与<ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph>不会引发异常。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>This overload of Cancel will aggregate any exceptions thrown into an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</source>
          <target state="translated">取消的此重载将聚合到引发任何异常<ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>，以便一个回调引发异常不会阻止其他已注册的回调正在执行。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</source>
          <target state="translated">下面的示例使用的随机数生成器来模拟的数据集合应用程序从十一种不同检测读取 10 的整数值。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</source>
          <target state="translated">零值指示度量值已失败的一个检测，应计算在这种情况下应取消操作和任何总体平均值。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>To handle the possible cancellation of the operation, the example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object that generates a cancellation token which is passed to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">若要处理可能取消操作，该示例实例化<ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>对象，它生成的取消标记传递给的<ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph>对象反过来取消将标记传递到每个任务负责收集特定检测读数。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph>调用方法来确保只有在所有读数已都收集了成功后，才计算平均值。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>If a task has not because it has been cancelled, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> method throws an exception.</source>
          <target state="translated">如果某个任务具有不是它已被取消，因为调用<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph>方法引发异常。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>This <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 已被释放。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">聚合异常包含由相关联的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> 上已注册的回调引发的所有异常。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if exceptions should immediately propagate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果异常应立即传播，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed if an exception occurs.</source>
          <target state="translated">如果出现异常，传达取消请求，并指定是否应处理其余回调和可取消操作。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>The associated <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">关联<ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph>将接收取消通知并将转换为状态其中<ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph>返回<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Any callbacks or cancelable operations registered with the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.</source>
          <target state="translated">任何回调或可取消操作注册<ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph>将执行。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Callbacks will be executed synchronously in LIFO order.</source>
          <target state="translated">按后进先出顺序，将同步执行回调。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>We recommend that cancelable operations and callbacks registered with <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> not throw exceptions.</source>
          <target state="translated">我们建议可取消操作和回调注册与<ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph>不会引发异常。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>If <ph id="ph1">`throwOnFirstException`</ph> is <ph id="ph2">`true`</ph>, an exception will immediately propagate out of the call to <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>, preventing the remaining callbacks and cancelable operations from being processed.</source>
          <target state="translated">如果<ph id="ph1">`throwOnFirstException`</ph>是<ph id="ph2">`true`</ph>，异常将立即传播到调用<ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>，阻止其余回调和从正在处理的可取消操作。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>If <ph id="ph1">`throwOnFirstException`</ph> is <ph id="ph2">`false`</ph>, this overload will aggregate any exceptions thrown into an <ph id="ph3">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</source>
          <target state="translated">如果<ph id="ph1">`throwOnFirstException`</ph>是<ph id="ph2">`false`</ph>，此重载将聚合到引发任何异常<ph id="ph3">&lt;xref:System.AggregateException&gt;</ph>，以便一个回调引发异常不会阻止其他已注册的回调正在执行。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 已被释放。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">聚合异常包含由相关联的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> 上已注册的回调引发的所有异常。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">在此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 上计划取消操作。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The time span to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">取消此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 前等待的时间范围。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> after the specified number of milliseconds.</source>
          <target state="translated">在指定的毫秒数后计划对此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 的取消操作。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The countdown for the <ph id="ph1">`millisecondsDelay`</ph> starts during this call.</source>
          <target state="translated">倒计时<ph id="ph1">`millisecondsDelay`</ph>期间此调用启动。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>When the <ph id="ph1">`millisecondsDelay`</ph> expires, this <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.</source>
          <target state="translated">当<ph id="ph1">`millisecondsDelay`</ph>过期，这<ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>已取消，如果未已取消。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>Subsequent calls to CancelAfter will reset the <ph id="ph1">`millisecondsDelay`</ph> for this <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">对 CancelAfter 的后续调用将重置<ph id="ph1">`millisecondsDelay`</ph>此<ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>，如果未已取消。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The exception thrown when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">当该 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 已被释放时引发的异常。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The exception thrown when <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> 小于 -1 时引发的异常。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The time span to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">取消此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 前等待的时间范围。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> after the specified time span.</source>
          <target state="translated">在指定的时间跨度后计划对此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 的取消操作。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The exception thrown when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">当该 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 已被释放时引发的异常。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The exception that is thrown when <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> is less than -1 or greater than Int32.MaxValue.</source>
          <target state="translated">当 <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> 小于 -1 或大比 Int32.MaxValue 引发的异常。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens are in the canceled state.</source>
          <target state="translated">创建一个将在任何源标记处于取消状态时处于取消状态的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>An array that contains the cancellation token instances to observe.</source>
          <target state="translated">包含要观察的取消标记实例的数组。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</source>
          <target state="translated">创建一个将在在指定的数组中任何源标记处于取消状态时处于取消状态的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that is linked to the source tokens.</source>
          <target state="translated">一个链接到源标记的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with one of the source tokens has been disposed.</source>
          <target state="translated">与源标记之一关联的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 已被释放。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> 为空。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The first cancellation token to observe.</source>
          <target state="translated">要观察的第一个取消标记。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The second cancellation token to observe.</source>
          <target state="translated">要观察的第二个取消标记。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens are in the canceled state.</source>
          <target state="translated">创建一个将在任何源标记处于取消状态时处于取消状态的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that is linked to the source tokens.</source>
          <target state="translated">一个链接到源标记的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with one of the source tokens has been disposed.</source>
          <target state="translated">与源标记之一关联的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 已被释放。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 类的当前实例所使用的所有资源。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 类的当前实例所使用的所有资源。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">在完成使用 <ph id="ph1">`Dispose`</ph> 后，应调用 <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 方法使 <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> 处于不可用状态。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> was occupying.</source>
          <target state="translated">在调用<ph id="ph1">`Dispose`</ph>，必须释放对所有引用<ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>以便垃圾回收器才能回收的内存，<ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>占用。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>实现 Dispose 方法<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">每次释放对 <ph id="ph1">`Dispose`</ph> 的最后一个引用前，均应调用 <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">否则，在垃圾回收器调用 <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> 对象的 <ph id="ph2">`Finalize`</ph> 方法之前，该对象正在使用的资源不会被释放。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">若要释放托管资源和非托管资源，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；若仅释放非托管资源，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 类使用的非托管资源，并可以选择释放托管资源。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>Gets whether cancellation has been requested for this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">获取是否已请求取消此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if cancellation has been requested for this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已请求取消此 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>This property indicates whether cancellation has been requested for this token source, such as due to a call to its <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> method.</source>
          <target state="translated">此属性指示是否已请求取消此令牌的源，例如由于调用其<ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>If this property returns <ph id="ph1">`true`</ph>, it only guarantees that cancellation has been requested.</source>
          <target state="translated">如果此属性返回<ph id="ph1">`true`</ph>，它只保证已请求取消。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</source>
          <target state="translated">它不保证通过相应的标记注册每个处理程序已完成执行，也不取消请求已完成传播到所有已注册处理程序。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</source>
          <target state="translated">尤其是在正在其中同时取消相关的对象的情况下，可能需要其他同步。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">获取与此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> 关联的 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">与此 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> 关联的 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>The token source has been disposed.</source>
          <target state="translated">已释放标记源。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>