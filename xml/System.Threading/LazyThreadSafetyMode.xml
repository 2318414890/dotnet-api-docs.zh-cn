<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LazyThreadSafetyMode.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifies how a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance synchronizes access among multiple threads.</source>
          <target state="translated">指定 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例如何同步多个线程间的访问。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Use this enumeration to specify the <ph id="ph1">`mode`</ph> parameter of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructors.</source>
          <target state="translated">使用此枚举指定<ph id="ph1">`mode`</ph>参数<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have <ph id="ph1">`mode`</ph> parameters.</source>
          <target state="translated">可以用此枚举描述对线程同步的所有构造函数的影响，无论它们有<ph id="ph1">`mode`</ph>参数。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance is initialized either by a user-specified initialization method or by the default constructor for <ph id="ph2">`T`</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>用户指定初始化方法或的默认构造函数初始化实例<ph id="ph2">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method is specified by the <ph id="ph1">`valueFactory`</ph> parameter of a <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructor.</source>
          <target state="translated">指定初始化方法<ph id="ph1">`valueFactory`</ph>参数<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The method returns an instance of <ph id="ph1">`T`</ph>, which is the type that is lazily instantiated by the instance of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>.</source>
          <target state="translated">该方法返回的实例<ph id="ph1">`T`</ph>，后者是惰式实例化的实例的类型<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If a constructor does not have a <ph id="ph1">`valueFactory`</ph> parameter, the default constructor for <ph id="ph2">`T`</ph> is used to initialize the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">如果一个构造函数不具有<ph id="ph1">`valueFactory`</ph>参数，默认构造函数<ph id="ph2">`T`</ph>用于初始化<ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In either case, initialization occurs the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">在任一情况下，初始化发生第一次调用<ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In addition to specifying the thread safety of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, this enumeration affects exception caching.</source>
          <target state="translated">除了指定的线程安全性<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>实例，此枚举会影响异常缓存。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When exceptions are cached for a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, you get only one chance to initialize the instance.</source>
          <target state="translated">当为缓存异常<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>实例，你将获得只有一次机会用于初始化实例。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If an exception is thrown the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property, that exception is cached and rethrown on all subsequent calls to the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">如果第一次，将引发异常则调用<ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph>属性，缓存并对所有后续调用重新引发异常<ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</source>
          <target state="translated">Caching 异常的优点是发生错误时，任何两个线程可以始终获得相同的结果。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify the PublicationOnly mode, exceptions are never cached.</source>
          <target state="translated">当指定 PublicationOnly 模式时，永远不缓存异常。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for <ph id="ph1">`T`</ph> to be used.</source>
          <target state="translated">如果指定无或 ExecutionAndPublication，缓存取决于是否指定初始化方法或允许的默认构造函数<ph id="ph1">`T`</ph>用于。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifying an initialization method enables exception caching for these two modes.</source>
          <target state="translated">指定初始化方法可启用这两种模式的异常缓存。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method can be very simple.</source>
          <target state="translated">初始化方法非常简单。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>For example, it might call the default constructor for <ph id="ph1">`T`</ph>: <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> in C#, or <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph> in Visual Basic.</source>
          <target state="translated">例如，它可能会调用 <ph id="ph1">`T`</ph> 的默认构造函数：C# 中的 <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> 或 Visual Basic 中的 <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph1">`T`</ph> are not cached.</source>
          <target state="translated">如果你使用并不指定初始化方法，由默认构造函数引发的异常的构造函数<ph id="ph1">`T`</ph>不会缓存。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The following table summarizes exception caching behavior.</source>
          <target state="translated">下表总结了缓存行为的异常。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Mode</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using initialization method</source>
          <target state="translated">使用初始化方法</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using default constructor for <ph id="ph1">`T`</ph></source>
          <target state="translated">使用默认构造函数 <ph id="ph1">`T`</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">已缓存</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">不缓存</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>PublicationOnly</source>
          <target state="translated">PublicationOnly</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">不缓存</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">不缓存</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>ExecutionAndPublication</source>
          <target state="translated">ExecutionAndPublication</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">已缓存</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">不缓存</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>Locks are used to ensure that only a single thread can initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance in a thread-safe manner.</source>
          <target state="translated">使用锁来确保只有一个线程可以在线程安全的方式下初始化 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</source>
          <target state="translated">如果初始化方法（如果没有初始化方法，则为默认构造函数）在内部使用锁，则可能会发生死锁。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">如果使用指定初始化方法（<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> 参数）的 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 构造函数，并且如果此初始化方法在你首次调用 <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用 <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性时再次引发该异常。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">如果你使用不指定初始化方法的 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 构造函数，则不会缓存 <ph id="ph2">&lt;paramref name="T" /&gt;</ph> 默认构造函数引发的异常。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">在此情况下，对 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性进行后续调用可成功初始化 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">如果初始化方法递归访问 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例的 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性，则引发 <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例不是线程安全的；如果从多个线程访问该实例，则其行为不确定。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>Use this mode only when high performance is crucial and the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is guaranteed never to be initialized from more than one thread.</source>
          <target state="translated">仅应在高性能至关重要并且保证决不会从多个线程初始化 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例时才使用该模式。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">如果使用指定初始化方法（<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> 参数）的 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 构造函数，并且如果此初始化方法在你首次调用 <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用 <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性时再次引发该异常。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">如果你使用不指定初始化方法的 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 构造函数，则不会缓存 <ph id="ph2">&lt;paramref name="T" /&gt;</ph> 默认构造函数引发的异常。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">在此情况下，对 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性进行后续调用可成功初始化 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">如果初始化方法递归访问 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例的 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性，则引发 <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>When multiple threads try to initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</source>
          <target state="translated">当多个线程尝试同时初始化一个 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例时，允许所有线程都运行初始化方法（如果没有初始化方法，则运行默认构造函数）。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The first thread to complete initialization sets the value of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">完成初始化的第一个线程设置 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例的值。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</source>
          <target state="translated">该值将返回给同时运行初始化方法的其他所有线程，除非初始化方法对这些线程引发异常。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>Any instances of <ph id="ph1">&lt;paramref name="T" /&gt;</ph> that were created by the competing threads are discarded.</source>
          <target state="translated">争用线程创建的任何 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 实例都将被放弃。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method throws an exception on any thread, the exception is propagated out of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property on that thread.</source>
          <target state="translated">如果初始化方法对任何线程引发异常，则该异常会从该线程上的 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性传播出去。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The exception is not cached.</source>
          <target state="translated">不缓存该异常。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> property remains <ph id="ph2">&lt;see langword="false" /&gt;</ph>, and subsequent calls to the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> 属性的值仍然为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，并且随后通过其中引发异常的线程或通过其他线程对 <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性的调用会导致初始化方法再次运行。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, no exception is thrown.</source>
          <target state="translated">如果初始化方法递归访问 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 实例的 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 属性，则不会引发异常。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>