<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f00d9d8962d1fd87330f2e8fe2f3cba1aea4aff" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58702243" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="fc5e6-101">指定 <see cref="T:System.Lazy`1" /> 实例如何同步多个线程间的访问。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc5e6-102">此枚举用于指定`mode`参数的<xref:System.Lazy%601>构造函数。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="fc5e6-103">可以根据此枚举中，说明对线程同步的所有构造函数影响，无论它们有`mode`参数。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="fc5e6-104">一个<xref:System.Lazy%601>用户指定初始化方法或的默认构造函数初始化实例`T`。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="fc5e6-105">指定初始化方法`valueFactory`参数的<xref:System.Lazy%601>构造函数。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="fc5e6-106">该方法返回的实例`T`，后者是惰式实例化的实例的类型<xref:System.Lazy%601>。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="fc5e6-107">如果一个构造函数不具有`valueFactory`参数的默认构造函数`T`用来初始化<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="fc5e6-108">在任一情况下，初始化发生第一次调用<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="fc5e6-109">除了指定的线程安全<xref:System.Lazy%601>实例，此枚举会影响异常缓存。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="fc5e6-110">当针对缓存的异常<xref:System.Lazy%601>实例，您获得仅一次机会来初始化该实例。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="fc5e6-111">如果第一次，将引发异常则调用<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>属性，异常将缓存并对所有后续调用上再次引发<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="fc5e6-112">缓存的异常的优点是，任何两个线程都会返回相同的结果，即使发生错误时。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="fc5e6-113">当指定 PublicationOnly 模式时，永远不会缓存异常。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="fc5e6-114">如果指定 None 或 ExecutionAndPublication，缓存取决于是否指定初始化方法或允许的默认构造函数`T`使用。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="fc5e6-115">指定初始化方法可启用这两种模式的异常缓存。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="fc5e6-116">初始化方法非常简单。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-116">The initialization method can be very simple.</span></span> <span data-ttu-id="fc5e6-117">例如，它可能会调用 `T` 的默认构造函数：C# 中的 `new Lazy<Contents>(() => new Contents(), mode)` 或 Visual Basic 中的 `New Lazy(Of Contents)(Function() New Contents())`。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="fc5e6-118">如果使用不指定初始化方法，由默认构造函数引发的异常的构造函数`T`不会被缓存。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="fc5e6-119">下表总结了异常缓存行为。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="fc5e6-120">模式</span><span class="sxs-lookup"><span data-stu-id="fc5e6-120">Mode</span></span>|<span data-ttu-id="fc5e6-121">使用初始化方法</span><span class="sxs-lookup"><span data-stu-id="fc5e6-121">Using initialization method</span></span>|<span data-ttu-id="fc5e6-122">使用默认构造函数 `T`</span><span class="sxs-lookup"><span data-stu-id="fc5e6-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="fc5e6-123">无</span><span class="sxs-lookup"><span data-stu-id="fc5e6-123">None</span></span>|<span data-ttu-id="fc5e6-124">已缓存</span><span class="sxs-lookup"><span data-stu-id="fc5e6-124">Cached</span></span>|<span data-ttu-id="fc5e6-125">不缓存</span><span class="sxs-lookup"><span data-stu-id="fc5e6-125">Not cached</span></span>|  
|<span data-ttu-id="fc5e6-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="fc5e6-126">PublicationOnly</span></span>|<span data-ttu-id="fc5e6-127">不缓存</span><span class="sxs-lookup"><span data-stu-id="fc5e6-127">Not cached</span></span>|<span data-ttu-id="fc5e6-128">不缓存</span><span class="sxs-lookup"><span data-stu-id="fc5e6-128">Not cached</span></span>|  
|<span data-ttu-id="fc5e6-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="fc5e6-129">ExecutionAndPublication</span></span>|<span data-ttu-id="fc5e6-130">已缓存</span><span class="sxs-lookup"><span data-stu-id="fc5e6-130">Cached</span></span>|<span data-ttu-id="fc5e6-131">不缓存</span><span class="sxs-lookup"><span data-stu-id="fc5e6-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="fc5e6-132">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="fc5e6-132">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fc5e6-133">使用锁来确保只有一个线程可以在线程安全的方式下初始化 <see cref="T:System.Lazy`1" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-133">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span></span> <span data-ttu-id="fc5e6-134">如果初始化方法（如果没有初始化方法，则为默认构造函数）在内部使用锁，则可能会发生死锁。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-134">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span></span> <span data-ttu-id="fc5e6-135">如果使用指定初始化方法（<paramref name="valueFactory" /> 参数）的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果此初始化方法在你首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用 <see cref="P:System.Lazy`1.Value" /> 属性时再次引发该异常。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-135">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="fc5e6-136">如果你使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 默认构造函数引发的异常。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-136">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="fc5e6-137">在此情况下，对 <see cref="P:System.Lazy`1.Value" /> 属性进行后续调用可成功初始化 <see cref="T:System.Lazy`1" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-137">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="fc5e6-138">如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-138">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fc5e6-139"><see cref="T:System.Lazy`1" /> 实例不是线程安全的；如果从多个线程访问该实例，则其行为不确定。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-139">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span></span> <span data-ttu-id="fc5e6-140">仅应在高性能至关重要并且保证决不会从多个线程初始化 <see cref="T:System.Lazy`1" /> 实例时才使用该模式。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-140">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span></span> <span data-ttu-id="fc5e6-141">如果使用指定初始化方法（<paramref name="valueFactory" /> 参数）的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果此初始化方法在你首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用 <see cref="P:System.Lazy`1.Value" /> 属性时再次引发该异常。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-141">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="fc5e6-142">如果你使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 默认构造函数引发的异常。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-142">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="fc5e6-143">在此情况下，对 <see cref="P:System.Lazy`1.Value" /> 属性进行后续调用可成功初始化 <see cref="T:System.Lazy`1" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-143">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="fc5e6-144">如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-144">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fc5e6-145">当多个线程尝试同时初始化一个 <see cref="T:System.Lazy`1" /> 实例时，允许所有线程都运行初始化方法（如果没有初始化方法，则运行默认构造函数）。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-145">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span></span> <span data-ttu-id="fc5e6-146">完成初始化的第一个线程设置 <see cref="T:System.Lazy`1" /> 实例的值。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-146">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="fc5e6-147">该值将返回给同时运行初始化方法的其他所有线程，除非初始化方法对这些线程引发异常。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-147">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span></span> <span data-ttu-id="fc5e6-148">争用线程创建的任何 <paramref name="T" /> 实例都将被放弃。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-148">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span></span> <span data-ttu-id="fc5e6-149">如果初始化方法对任何线程引发异常，则该异常会从该线程上的 <see cref="P:System.Lazy`1.Value" /> 属性传播出去。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-149">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span></span> <span data-ttu-id="fc5e6-150">不缓存该异常。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-150">The exception is not cached.</span></span> <span data-ttu-id="fc5e6-151"><see cref="P:System.Lazy`1.IsValueCreated" /> 属性的值仍然为 <see langword="false" />，并且随后通过其中引发异常的线程或通过其他线程对 <see cref="P:System.Lazy`1.Value" /> 属性的调用会导致初始化方法再次运行。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-151">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span></span> <span data-ttu-id="fc5e6-152">如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="fc5e6-152">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>