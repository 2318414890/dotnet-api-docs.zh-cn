<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LazyInitializer.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57ae28946e3c3f6b03b2cc6e3fd75b033dbd5575b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ae28946e3c3f6b03b2cc6e3fd75b033dbd5575b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.LazyInitializer">
          <source>Provides lazy initialization routines.</source>
          <target state="translated">提供延迟初始化例程。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyInitializer">
          <source>These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</source>
          <target state="translated">这些例程可避免无需分配一个专用的延迟初始化的实例，而不使用引用确保目标已初始化为这些表进行访问。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyInitializer">
          <source>The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</source>
          <target state="translated">下面的示例演示如何使用 EnsureInitialized 延迟初始化值使用一个布尔值跟踪是否已发生初始化和要使用作为互斥锁的对象。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyInitializer">
          <source>The methods of <ph id="ph1">&lt;see cref="T:System.Threading.LazyInitializer" /&gt;</ph> are thread-safe and may be called from multiple threads concurrently.</source>
          <target state="translated">方法<ph id="ph1">&lt;see cref="T:System.Threading.LazyInitializer" /&gt;</ph>都是线程安全的可能会从多个线程同时调用。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Threading.LazyInitializer">
          <source>Initializes a target type if it hasn't already been initialized.</source>
          <target state="translated">在服务尚未初始化的情况下，初始化目标类型。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>The type of the reference to be initialized.</source>
          <target state="translated">要初始化的引用的类型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>A reference of type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> to initialize if it has not already been initialized.</source>
          <target state="translated">在尚未初始化的情况下，要初始化的类型 <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> 的引用。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</source>
          <target state="translated">在目标引用或值类型尚未初始化的情况下，使用其默认构造函数初始化目标引用或值类型。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>The initialized reference of type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 的初始化引用。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>This method may only be used on reference types.</source>
          <target state="translated">此方法可能只用于在引用类型。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>To ensure initialization of value types, see other overloads of EnsureInitialized.</source>
          <target state="translated">若要确保值类型的初始化，请参阅 EnsureInitialized 其他重载。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>This method may be used concurrently by multiple threads to initialize <ph id="ph1">`target`</ph>.</source>
          <target state="translated">此方法可能用于同时由多个线程初始化<ph id="ph1">`target`</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>In the event that multiple threads access this method concurrently, multiple instances of <ph id="ph1">`T`</ph> may be created, but only one will be stored into <ph id="ph2">`target`</ph>.</source>
          <target state="translated">中，多个线程同时访问此方法的多个实例<ph id="ph1">`T`</ph>可能创建，但只有一个将存储到<ph id="ph2">`target`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>In such an occurrence, this method will not dispose of the objects that were not stored.</source>
          <target state="translated">在这样的情况下，此方法将不处理不存储的对象。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</source>
          <target state="translated">如果必须释放此类对象，它由调用方确定如果未使用对象，然后相应地释放对象。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>Permissions to access the constructor of type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> were missing.</source>
          <target state="translated">缺少访问类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 的构造函数的权限。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
          <source>Type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> does not have a default constructor.</source>
          <target state="translated">类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 没有默认的构造函数。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>The reference type of the reference to be initialized.</source>
          <target state="translated">要初始化的引用的引用类型。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>The reference of type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> to initialize if it hasn't already been initialized.</source>
          <target state="translated">在尚未初始化的情况下，要初始化的类型 <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> 的引用。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>The function that is called to initialize the reference.</source>
          <target state="translated">调用函数以初始化该引用。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>Initializes a target reference type by using a specified function if it hasn't already been initialized.</source>
          <target state="translated">在目标引用类型尚未初始化的情况下，使用指定函数初始化目标引用类型。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>The initialized value of type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 的初始化值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>This method may only be used on reference types, and <ph id="ph1">`valueFactory`</ph> may not return a null reference (Nothing in Visual Basic).</source>
          <target state="translated">此方法可能只能用于引用类型和<ph id="ph1">`valueFactory`</ph>可能不会返回 null 引用 (在 Visual Basic 中为 Nothing)。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</source>
          <target state="translated">若要确保初始化值类型或允许 null 的引用类型，请参阅 EnsureInitialized 其他重载。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>This method may be used concurrently by multiple threads to initialize <ph id="ph1">`target`</ph>.</source>
          <target state="translated">此方法可能用于同时由多个线程初始化<ph id="ph1">`target`</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>In the event that multiple threads access this method concurrently, multiple instances of <ph id="ph1">`T`</ph> may be created, but only one will be stored into <ph id="ph2">`target`</ph>.</source>
          <target state="translated">中，多个线程同时访问此方法的多个实例<ph id="ph1">`T`</ph>可能创建，但只有一个将存储到<ph id="ph2">`target`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>In such an occurrence, this method will not dispose of the objects that were not stored.</source>
          <target state="translated">在这样的情况下，此方法将不处理不存储的对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</source>
          <target state="translated">如果必须释放此类对象，它由调用方确定如果未使用对象，然后相应地释放对象。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source>Type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> does not have a default constructor.</source>
          <target state="translated">类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 没有默认的构造函数。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> returned null (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> 返回 null（在 Visual Basic 中为 Nothing）。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>The type of the reference to be initialized.</source>
          <target state="translated">要初始化的引用的类型。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>A reference or value of type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> to initialize if it hasn't already been initialized.</source>
          <target state="translated">在尚未初始化的情况下，要初始化的类型 <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> 的引用或值。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>A reference to a Boolean value that determines whether the target has already been initialized.</source>
          <target state="translated">对布尔值的引用，该值确定目标是否已初始化。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>A reference to an object used as the mutually exclusive lock for initializing <bpt id="p1">&lt;c&gt;</bpt>target<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">对用作相互排斥锁的对象的引用，用于初始化 <bpt id="p1">&lt;c&gt;</bpt>target<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>syncLock<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a new object will be instantiated.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>syncLock<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则新的对象将被实例化。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</source>
          <target state="translated">在目标引用或值类型尚未初始化的情况下，使用其默认构造函数初始化目标引用或值类型。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>The initialized value of type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 的初始化值。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>If <ph id="ph1">`intialized`</ph> is specified as true, then no further initialization occurs.</source>
          <target state="translated">如果<ph id="ph1">`intialized`</ph>指定为 true，就会不发生任何进一步的初始化。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>Permissions to access the constructor of type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> were missing.</source>
          <target state="translated">缺少访问类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 的构造函数的权限。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
          <source>Type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> does not have a default constructor.</source>
          <target state="translated">类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 没有默认的构造函数。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>The type of the reference to be initialized.</source>
          <target state="translated">要初始化的引用的类型。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>A reference or value of type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> to initialize if it hasn't already been initialized.</source>
          <target state="translated">在尚未初始化的情况下，要初始化的类型 <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> 的引用或值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>A reference to a Boolean value that determines whether the target has already been initialized.</source>
          <target state="translated">对布尔值的引用，该值确定目标是否已初始化。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>A reference to an object used as the mutually exclusive lock for initializing <bpt id="p1">&lt;c&gt;</bpt>target<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">对用作相互排斥锁的对象的引用，用于初始化 <bpt id="p1">&lt;c&gt;</bpt>target<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>syncLock<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a new object will be instantiated.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>syncLock<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则新的对象将被实例化。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>The function that is called to initialize the reference or value.</source>
          <target state="translated">调用函数以初始化该引用或值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</source>
          <target state="translated">在目标引用或值类型尚未初始化的情况下，使用指定函数初始化目标引用或值类型。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>The initialized value of type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 的初始化值。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>If <ph id="ph1">`intialized`</ph> is specified as true, then no further initialization occurs.</source>
          <target state="translated">如果<ph id="ph1">`intialized`</ph>指定为 true，就会不发生任何进一步的初始化。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>Permissions to access the constructor of type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> were missing.</source>
          <target state="translated">缺少访问类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 的构造函数的权限。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
          <source>Type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> does not have a default constructor.</source>
          <target state="translated">类型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 没有默认的构造函数。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>