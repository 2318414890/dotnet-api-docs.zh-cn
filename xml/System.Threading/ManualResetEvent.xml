<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3c19185907e45c5b7b80aae8627946c15d4efd4f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605901" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6da1f-101">通知一个或多个正在等待的线程已发生事件。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6da1f-101">Notifies one or more waiting threads that an event has occurred.</span>
      </span>
      <span data-ttu-id="6da1f-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6da1f-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6da1f-103">在.NET Framework 2.0 版中，<xref:System.Threading.ManualResetEvent>派生自新<xref:System.Threading.EventWaitHandle>类。</span><span class="sxs-lookup"><span data-stu-id="6da1f-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="6da1f-104">A<xref:System.Threading.ManualResetEvent>功能上等效于<xref:System.Threading.EventWaitHandle>使用创建<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6da1f-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6da1f-105">与不同<xref:System.Threading.ManualResetEvent>类，<xref:System.Threading.EventWaitHandle>类提供对访问已命名系统同步事件。</span><span class="sxs-lookup"><span data-stu-id="6da1f-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="6da1f-106"><xref:System.Threading.ManualResetEvent> 允许的线程以互相通信通过发送信号。</span><span class="sxs-lookup"><span data-stu-id="6da1f-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="6da1f-107">通常情况下，此通信涉及的一个线程在其他线程可以继续操作之前必须完成的任务。</span><span class="sxs-lookup"><span data-stu-id="6da1f-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="6da1f-108">当线程开始在其他之前必须完成的活动线程继续执行时，它调用<xref:System.Threading.EventWaitHandle.Reset%2A>将`ManualResetEvent`处于是非终止状态。</span><span class="sxs-lookup"><span data-stu-id="6da1f-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="6da1f-109">此线程可以被想象成控制`ManualResetEvent`。</span><span class="sxs-lookup"><span data-stu-id="6da1f-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="6da1f-110">线程该调用<xref:System.Threading.WaitHandle.WaitOne%2A>上`ManualResetEvent`将阻止，并等待信号。</span><span class="sxs-lookup"><span data-stu-id="6da1f-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="6da1f-111">当控制线程完成的活动时，它将调用<xref:System.Threading.EventWaitHandle.Set%2A>以指示正在等待的线程可以继续执行。</span><span class="sxs-lookup"><span data-stu-id="6da1f-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="6da1f-112">释放所有正在等待的线程。</span><span class="sxs-lookup"><span data-stu-id="6da1f-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="6da1f-113">一旦它被终止，`ManualResetEvent`被手动重置之前一直保持终止状态。</span><span class="sxs-lookup"><span data-stu-id="6da1f-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="6da1f-114">也就是说，调用`WaitOne`立即返回。</span><span class="sxs-lookup"><span data-stu-id="6da1f-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="6da1f-115">你可以控制的初始状态`ManualResetEvent`通过将一个布尔值传递给构造函数中，`true`如果初始状态终止状态和`false`否则为。</span><span class="sxs-lookup"><span data-stu-id="6da1f-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="6da1f-116">`ManualResetEvent` 也可以用于`static`<xref:System.Threading.WaitHandle.WaitAll%2A>和<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6da1f-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="6da1f-117">有关线程同步机制的详细信息，请参阅[ManualResetEvent 和 ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)的概念性文档。</span><span class="sxs-lookup"><span data-stu-id="6da1f-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6da1f-118">下面的示例演示如何<xref:System.Threading.ManualResetEvent>工作原理。</span><span class="sxs-lookup"><span data-stu-id="6da1f-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="6da1f-119">此示例将启动与<xref:System.Threading.ManualResetEvent>中未终止的状态 (即，`false`传递到构造函数)。</span><span class="sxs-lookup"><span data-stu-id="6da1f-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="6da1f-120">该示例创建三个线程，每个哪些块上<xref:System.Threading.ManualResetEvent>通过调用其<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6da1f-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="6da1f-121">当用户按**Enter**密钥，该示例通过调用<xref:System.Threading.EventWaitHandle.Set%2A>方法，释放所有三个线程。</span><span class="sxs-lookup"><span data-stu-id="6da1f-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="6da1f-122">与此相反的行为<xref:System.Threading.AutoResetEvent>类，该类在每次发布后自动重置一次释放一个线程。</span><span class="sxs-lookup"><span data-stu-id="6da1f-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="6da1f-123">按**Enter**密钥再次表明<xref:System.Threading.ManualResetEvent>仍保留在终止状态，直到其<xref:System.Threading.EventWaitHandle.Reset%2A>调用方法： 此示例将启动两个多个线程。</span><span class="sxs-lookup"><span data-stu-id="6da1f-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="6da1f-124">当它们调用时不会阻止这些线程<xref:System.Threading.WaitHandle.WaitOne%2A>方法，而是会运行直至完成。</span><span class="sxs-lookup"><span data-stu-id="6da1f-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="6da1f-125">按**Enter**密钥再次使该示例调用<xref:System.Threading.EventWaitHandle.Reset%2A>方法，并启动一个多个线程，阻止在它调用时<xref:System.Threading.WaitHandle.WaitOne%2A>。</span><span class="sxs-lookup"><span data-stu-id="6da1f-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="6da1f-126">按**Enter**密钥一个最后一次调用<xref:System.Threading.EventWaitHandle.Set%2A>释放最后一个线程，并在程序结束。</span><span class="sxs-lookup"><span data-stu-id="6da1f-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="6da1f-127">此类是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6da1f-127">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="6da1f-128">如果为 <see langword="true" />，则将初始状态设置为终止；如果为 <see langword="false" />，则将初始状态设置为非终止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6da1f-128">
              <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6da1f-129">用一个指示是否将初始状态设置为终止的布尔值初始化 <see cref="T:System.Threading.ManualResetEvent" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6da1f-129">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6da1f-130">如果的初始状态<xref:System.Threading.ManualResetEvent>处于有信号状态 (即，如果它通过将传递创建`true`为`initialState`)，等待的线程<xref:System.Threading.ManualResetEvent>不会阻止。</span><span class="sxs-lookup"><span data-stu-id="6da1f-130">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="6da1f-131">如果初始状态为非终止，线程进行阻止，直至<xref:System.Threading.EventWaitHandle.Set%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="6da1f-131">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>