<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6bd57be7d0b7a3e06e014afa452e4dadda84883c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527801" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>通知一个或多个正在等待的线程已发生事件。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在.NET Framework 2.0 版中，<xref:System.Threading.ManualResetEvent>派生自新<xref:System.Threading.EventWaitHandle>类。 A<xref:System.Threading.ManualResetEvent>功能上等效于<xref:System.Threading.EventWaitHandle>使用创建<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>。  
  
> [!NOTE]
>  与不同<xref:System.Threading.ManualResetEvent>类，<xref:System.Threading.EventWaitHandle>类提供对访问已命名系统同步事件。  
  
 <xref:System.Threading.ManualResetEvent> 允许的线程以互相通信通过发送信号。 通常情况下，此通信涉及的一个线程在其他线程可以继续操作之前必须完成的任务。  
  
 当线程开始在其他之前必须完成的活动线程继续执行时，它调用<xref:System.Threading.EventWaitHandle.Reset%2A>将`ManualResetEvent`处于是非终止状态。 此线程可以被想象成控制`ManualResetEvent`。 线程该调用<xref:System.Threading.WaitHandle.WaitOne%2A>上`ManualResetEvent`将阻止，并等待信号。 当控制线程完成的活动时，它将调用<xref:System.Threading.EventWaitHandle.Set%2A>以指示正在等待的线程可以继续执行。 释放所有正在等待的线程。  
  
 一旦它被终止，`ManualResetEvent`被手动重置之前一直保持终止状态。 也就是说，调用`WaitOne`立即返回。  
  
 你可以控制的初始状态`ManualResetEvent`通过将一个布尔值传递给构造函数中，`true`如果初始状态终止状态和`false`否则为。  
  
 `ManualResetEvent` 也可以用于`static`<xref:System.Threading.WaitHandle.WaitAll%2A>和<xref:System.Threading.WaitHandle.WaitAny%2A>方法。  
  
 有关线程同步机制的详细信息，请参阅[ManualResetEvent 和 ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)的概念性文档。  
  
   
  
## Examples  
 下面的示例演示如何<xref:System.Threading.ManualResetEvent>工作原理。 此示例将启动与<xref:System.Threading.ManualResetEvent>中未终止的状态 (即，`false`传递到构造函数)。 该示例创建三个线程，每个哪些块上<xref:System.Threading.ManualResetEvent>通过调用其<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 当用户按**Enter**密钥，该示例通过调用<xref:System.Threading.EventWaitHandle.Set%2A>方法，释放所有三个线程。 与此相反的行为<xref:System.Threading.AutoResetEvent>类，该类在每次发布后自动重置一次释放一个线程。  
  
 按**Enter**密钥再次表明<xref:System.Threading.ManualResetEvent>仍保留在终止状态，直到其<xref:System.Threading.EventWaitHandle.Reset%2A>调用方法： 此示例将启动两个多个线程。 当它们调用时不会阻止这些线程<xref:System.Threading.WaitHandle.WaitOne%2A>方法，而是会运行直至完成。  
  
 按**Enter**密钥再次使该示例调用<xref:System.Threading.EventWaitHandle.Reset%2A>方法，并启动一个多个线程，阻止在它调用时<xref:System.Threading.WaitHandle.WaitOne%2A>。 按**Enter**密钥一个最后一次调用<xref:System.Threading.EventWaitHandle.Set%2A>释放最后一个线程，并在程序结束。  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类是线程安全的。</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          如果为 <see langword="true" />，则将初始状态设置为终止；如果为 <see langword="false" />，则将初始状态设置为非终止。</param>
        <summary>用一个指示是否将初始状态设置为终止的布尔值初始化 <see cref="T:System.Threading.ManualResetEvent" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果的初始状态<xref:System.Threading.ManualResetEvent>处于有信号状态 (即，如果它通过将传递创建`true`为`initialState`)，等待的线程<xref:System.Threading.ManualResetEvent>不会阻止。 如果初始状态为非终止，线程进行阻止，直至<xref:System.Threading.EventWaitHandle.Set%2A>调用方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>