<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="50280627a764fdaf9fec13f62e5e70616ce14337" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58712667" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示线程同步事件，收到信号时，必须手动重置该事件。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 您使用`ManualResetEvent`， <xref:System.Threading.AutoResetEvent>，和<xref:System.Threading.EventWaitHandle>线程交互 （或线程发出信号）。 有关详细信息，请参阅[线程交互，或发出信号](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling)一部分[同步基元概述](~/docs/standard/threading/overview-of-synchronization-primitives.md)一文。  

 开始之前其他必须完成的活动线程时线程继续执行，它将调用[ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A)放置`ManualResetEvent`处于非信号状态。 此线程可以认为的控制`ManualResetEvent`。 线程调用[ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A)块中，正在等待信号。 当控制线程完成活动时，它将调用[ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A)发出信号等待线程可以继续执行。 将释放所有等待的线程。  

 它被终止，一旦`ManualResetEvent`手动重置通过调用前保持终止状态<xref:System.Threading.EventWaitHandle.Reset>方法。 也就是说，调用<xref:System.Threading.WaitHandle.WaitOne%2A>立即返回。  

 您可以控制的初始状态`ManualResetEvent`通过将一个布尔值传递给构造函数：`true`发出信号的初始状态，如果和`false`否则为。  
 
 `ManualResetEvent` 也可以用于`static`<xref:System.Threading.WaitHandle.WaitAll%2A>和<xref:System.Threading.WaitHandle.WaitAny%2A>方法。  
  
 从.NET Framework 2.0 版中，开始<xref:System.Threading.ManualResetEvent>派生自<xref:System.Threading.EventWaitHandle>类。 一个<xref:System.Threading.ManualResetEvent>功能上等效于<xref:System.Threading.EventWaitHandle>使用创建<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>。  
  
> [!NOTE]
> 与不同<xref:System.Threading.ManualResetEvent>类，<xref:System.Threading.EventWaitHandle>类提供了对访问已命名系统同步事件。  

 从.NET Framework 版本 4.0 中，开始<xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType>类是轻量替代<xref:System.Threading.ManualResetEvent>。    
   
   
  
## Examples  
 下面的示例演示如何<xref:System.Threading.ManualResetEvent>工作原理。 该示例启动与<xref:System.Threading.ManualResetEvent>中未终止的状态 (即，`false`传递给构造函数)。 此示例将创建三个线程时，每个哪些块上<xref:System.Threading.ManualResetEvent>通过调用其<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 当用户按**Enter**键，此示例调用<xref:System.Threading.EventWaitHandle.Set%2A>方法中，会释放所有三个线程。 与此相反的行为<xref:System.Threading.AutoResetEvent>类，该类在每次发布后自动重置一次释放一个线程。  
  
 按下**Enter**密钥再次演示<xref:System.Threading.ManualResetEvent>处于终止状态，直到其<xref:System.Threading.EventWaitHandle.Reset%2A>调用方法：此示例将启动这两个线程。 当它们调用时不会阻止这些线程<xref:System.Threading.WaitHandle.WaitOne%2A>方法，但改为运行到完成。  
  
 按下**Enter**密钥再次使该示例调用<xref:System.Threading.EventWaitHandle.Reset%2A>方法，并启动一个阻止调用时的多个线程<xref:System.Threading.WaitHandle.WaitOne%2A>。 按下**Enter**密钥一个最后一次调用<xref:System.Threading.EventWaitHandle.Set%2A>释放最后一个线程和该程序结束。  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类是线程安全。</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">托管线程处理</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">同步基元概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">如果为 <see langword="true" />，则将初始状态设置为终止；如果为 <see langword="false" />，则将初始状态设置为非终止。</param>
        <summary>用一个指示是否将初始状态设置为终止的布尔值初始化 <see cref="T:System.Threading.ManualResetEvent" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果的初始状态<xref:System.Threading.ManualResetEvent>处于终止状态 (即，如果创建通过传递`true`有关`initialState`) 上, 等待的线程<xref:System.Threading.ManualResetEvent>不会阻止。 如果非终止初始状态，线程阻塞，直到<xref:System.Threading.EventWaitHandle.Set%2A>调用方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">托管线程处理</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">同步基元概述</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将事件状态设置为非终止，从而导致线程受阻。</summary>
        <returns>如果该操作成功，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将事件状态设置为终止状态，从而允许继续执行一个或多个等待线程。</summary>
        <returns>如果该操作成功，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
调用 Set 方法会等待句柄使处于终止状态，直到<xref:System.Threading.ManualResetEvent.Reset>调用方法。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>