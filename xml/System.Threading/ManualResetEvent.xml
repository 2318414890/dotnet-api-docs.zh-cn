<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55d22a680762383ef96947462e2824d553269a1f" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52738798" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fd077-101">通知一个或多个正在等待的线程已发生事件。</span><span class="sxs-lookup"><span data-stu-id="fd077-101">Notifies one or more waiting threads that an event has occurred.</span></span> <span data-ttu-id="fd077-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="fd077-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd077-103">在.NET Framework 2.0 版中，<xref:System.Threading.ManualResetEvent>派生自新<xref:System.Threading.EventWaitHandle>类。</span><span class="sxs-lookup"><span data-stu-id="fd077-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="fd077-104">一个<xref:System.Threading.ManualResetEvent>功能上等效于<xref:System.Threading.EventWaitHandle>使用创建<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="fd077-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fd077-105">与不同<xref:System.Threading.ManualResetEvent>类，<xref:System.Threading.EventWaitHandle>类提供了对访问已命名系统同步事件。</span><span class="sxs-lookup"><span data-stu-id="fd077-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="fd077-106"><xref:System.Threading.ManualResetEvent> 允许线程能够相互通信通过发出信号。</span><span class="sxs-lookup"><span data-stu-id="fd077-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="fd077-107">通常情况下，此通信涉及其他线程可以继续操作之前，必须完成的一个线程的任务。</span><span class="sxs-lookup"><span data-stu-id="fd077-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="fd077-108">开始之前其他必须完成的活动线程时线程继续执行，它将调用<xref:System.Threading.EventWaitHandle.Reset%2A>放置`ManualResetEvent`处于非信号状态。</span><span class="sxs-lookup"><span data-stu-id="fd077-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="fd077-109">此线程可以认为的控制`ManualResetEvent`。</span><span class="sxs-lookup"><span data-stu-id="fd077-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="fd077-110">线程调用<xref:System.Threading.WaitHandle.WaitOne%2A>上`ManualResetEvent`将阻止，正在等待信号。</span><span class="sxs-lookup"><span data-stu-id="fd077-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="fd077-111">当控制线程完成活动时，它将调用<xref:System.Threading.EventWaitHandle.Set%2A>发出信号等待线程可以继续执行。</span><span class="sxs-lookup"><span data-stu-id="fd077-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="fd077-112">将释放所有等待的线程。</span><span class="sxs-lookup"><span data-stu-id="fd077-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="fd077-113">一旦它被终止，`ManualResetEvent`手动重置前保持终止状态。</span><span class="sxs-lookup"><span data-stu-id="fd077-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="fd077-114">也就是说，调用`WaitOne`立即返回。</span><span class="sxs-lookup"><span data-stu-id="fd077-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="fd077-115">您可以控制的初始状态`ManualResetEvent`通过将一个布尔值传递给构造函数中，`true`如果信号的初始状态和`false`否则为。</span><span class="sxs-lookup"><span data-stu-id="fd077-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="fd077-116">`ManualResetEvent` 也可以用于`static`<xref:System.Threading.WaitHandle.WaitAll%2A>和<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="fd077-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="fd077-117">有关线程同步机制的详细信息，请参阅[ManualResetEvent 和 ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)概念性文档中。</span><span class="sxs-lookup"><span data-stu-id="fd077-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd077-118">下面的示例演示如何<xref:System.Threading.ManualResetEvent>工作原理。</span><span class="sxs-lookup"><span data-stu-id="fd077-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="fd077-119">该示例启动与<xref:System.Threading.ManualResetEvent>中未终止的状态 (即，`false`传递给构造函数)。</span><span class="sxs-lookup"><span data-stu-id="fd077-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="fd077-120">此示例将创建三个线程时，每个哪些块上<xref:System.Threading.ManualResetEvent>通过调用其<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="fd077-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="fd077-121">当用户按**Enter**键，此示例调用<xref:System.Threading.EventWaitHandle.Set%2A>方法中，会释放所有三个线程。</span><span class="sxs-lookup"><span data-stu-id="fd077-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="fd077-122">与此相反的行为<xref:System.Threading.AutoResetEvent>类，该类在每次发布后自动重置一次释放一个线程。</span><span class="sxs-lookup"><span data-stu-id="fd077-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="fd077-123">按下**Enter**密钥再次演示<xref:System.Threading.ManualResetEvent>处于终止状态，直到其<xref:System.Threading.EventWaitHandle.Reset%2A>调用方法： 此示例将启动这两个线程。</span><span class="sxs-lookup"><span data-stu-id="fd077-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="fd077-124">当它们调用时不会阻止这些线程<xref:System.Threading.WaitHandle.WaitOne%2A>方法，但改为运行到完成。</span><span class="sxs-lookup"><span data-stu-id="fd077-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="fd077-125">按下**Enter**密钥再次使该示例调用<xref:System.Threading.EventWaitHandle.Reset%2A>方法，并启动一个阻止调用时的多个线程<xref:System.Threading.WaitHandle.WaitOne%2A>。</span><span class="sxs-lookup"><span data-stu-id="fd077-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="fd077-126">按下**Enter**密钥一个最后一次调用<xref:System.Threading.EventWaitHandle.Set%2A>释放最后一个线程和该程序结束。</span><span class="sxs-lookup"><span data-stu-id="fd077-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="fd077-127">此类是线程安全。</span><span class="sxs-lookup"><span data-stu-id="fd077-127">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="fd077-128">托管线程处理</span><span class="sxs-lookup"><span data-stu-id="fd077-128">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md"><span data-ttu-id="fd077-129">手动重置事件</span><span class="sxs-lookup"><span data-stu-id="fd077-129">Manual Reset Event</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="fd077-130">如果为 <see langword="true" />，则将初始状态设置为终止；如果为 <see langword="false" />，则将初始状态设置为非终止。</span><span class="sxs-lookup"><span data-stu-id="fd077-130"><see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="fd077-131">用一个指示是否将初始状态设置为终止的布尔值初始化 <see cref="T:System.Threading.ManualResetEvent" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="fd077-131">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd077-132">如果的初始状态<xref:System.Threading.ManualResetEvent>处于终止状态 (即，如果创建通过传递`true`有关`initialState`) 上, 等待的线程<xref:System.Threading.ManualResetEvent>不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fd077-132">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="fd077-133">如果非终止初始状态，线程阻塞，直到<xref:System.Threading.EventWaitHandle.Set%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="fd077-133">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="fd077-134">托管线程处理</span><span class="sxs-lookup"><span data-stu-id="fd077-134">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md"><span data-ttu-id="fd077-135">ManualResetEvent</span><span class="sxs-lookup"><span data-stu-id="fd077-135">ManualResetEvent</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fd077-136">将事件状态设置为非终止，从而导致线程受阻。</span><span class="sxs-lookup"><span data-stu-id="fd077-136">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="fd077-137">如果该操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd077-137"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fd077-138">将事件状态设置为终止状态，从而允许继续执行一个或多个等待线程。</span><span class="sxs-lookup"><span data-stu-id="fd077-138">Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</span></span></summary>
        <returns><span data-ttu-id="fd077-139">如果该操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd077-139"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="fd077-140">调用 Set 方法会等待句柄使处于终止状态，直到<xref:System.Threading.ManualResetEvent.Reset>调用方法。</span><span class="sxs-lookup"><span data-stu-id="fd077-140">Calling the Set method leaves the wait handle in a signaled state until the <xref:System.Threading.ManualResetEvent.Reset> method is called.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>