<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cfafcfe91d4ef6eba6ebbbbe6d7101119c93823a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531371" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="49148-101">提供同步访问对象的机制。</span>
      <span class="sxs-lookup">
        <span data-stu-id="49148-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-102"><xref:System.Threading.Monitor>类可以同步对代码区域的访问的应用和释放通过调用对特定对象的锁<xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>， <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>，和<xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="49148-103">对象锁提供的功能限制到块的代码，通常称为临界区的访问。</span><span class="sxs-lookup"><span data-stu-id="49148-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="49148-104">一个线程拥有对象的锁，而没有其他线程可以获取该锁。</span><span class="sxs-lookup"><span data-stu-id="49148-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="49148-105">你还可以使用<xref:System.Threading.Monitor>类，以确保没有其他线程允许访问应用程序的部分代码正在执行的锁的所有者，除非另一个线程正在执行使用不同的锁定的对象的代码。</span><span class="sxs-lookup"><span data-stu-id="49148-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="49148-106">本文内容：</span><span class="sxs-lookup"><span data-stu-id="49148-106">In this article:</span></span>  
  
 <span data-ttu-id="49148-107">[监视器类： 概述](#Overview) </span><span class="sxs-lookup"><span data-stu-id="49148-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="49148-108">[锁对象](#Lock) </span><span class="sxs-lookup"><span data-stu-id="49148-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="49148-109">[临界区](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="49148-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="49148-110">[脉冲、 PulseAll 和等待](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="49148-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="49148-111">监视器和等待句柄</span><span class="sxs-lookup"><span data-stu-id="49148-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="49148-112">监视器类： 概述</span><span class="sxs-lookup"><span data-stu-id="49148-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="49148-113"><xref:System.Threading.Monitor> 具有以下功能：</span><span class="sxs-lookup"><span data-stu-id="49148-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="49148-114">它是与按需对象相关联。</span><span class="sxs-lookup"><span data-stu-id="49148-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="49148-115">它是未绑定，这意味着它可以直接从任何上下文调用。</span><span class="sxs-lookup"><span data-stu-id="49148-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="49148-116">实例<xref:System.Threading.Monitor>无法创建类; 的方法<xref:System.Threading.Monitor>类是所有静态。</span><span class="sxs-lookup"><span data-stu-id="49148-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="49148-117">每个方法传递控制的访问的同步的对象的关键部分。</span><span class="sxs-lookup"><span data-stu-id="49148-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-118">使用<xref:System.Threading.Monitor>字符串以外的锁对象的类 (即，而不引用类型<xref:System.String>)，不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="49148-119">有关详细信息，请参阅的重载<xref:System.Threading.Monitor.Enter%2A>方法和[的锁对象](#Lock)本文后面的部分。</span><span class="sxs-lookup"><span data-stu-id="49148-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="49148-120">下表介绍可以通过访问同步的对象的线程执行的操作：</span><span class="sxs-lookup"><span data-stu-id="49148-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="49148-121">操作</span><span class="sxs-lookup"><span data-stu-id="49148-121">Action</span></span>|<span data-ttu-id="49148-122">描述</span><span class="sxs-lookup"><span data-stu-id="49148-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="49148-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="49148-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="49148-124">获取对象锁。</span><span class="sxs-lookup"><span data-stu-id="49148-124">Acquires a lock for an object.</span></span> <span data-ttu-id="49148-125">此操作还将标记的关键部分的开头。</span><span class="sxs-lookup"><span data-stu-id="49148-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="49148-126">没有其他线程可以进入临界区，除非它使用不同的锁定的对象的关键部分中执行的说明。</span><span class="sxs-lookup"><span data-stu-id="49148-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="49148-127">若要允许其他线程锁定和访问的对象中释放对象上的锁。</span><span class="sxs-lookup"><span data-stu-id="49148-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="49148-128">调用线程等待时另一个线程访问的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="49148-129">脉冲信号用于通知正在等待的线程对对象的状态进行的更改。</span><span class="sxs-lookup"><span data-stu-id="49148-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="49148-130"><xref:System.Threading.Monitor.Pulse%2A> （信号） <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="49148-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="49148-131">将信号发送到一个或多个正在等待的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="49148-132">该信号通知正在等待的线程锁定对象的状态已更改，并准备释放锁的锁的所有者。</span><span class="sxs-lookup"><span data-stu-id="49148-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="49148-133">正在等待的线程置于对象的就绪队列，以便它最终可能会收到对象的锁。</span><span class="sxs-lookup"><span data-stu-id="49148-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="49148-134">一旦线程拥有该锁，它可以检查以确定是否已达到所需的状态的对象的新状态。</span><span class="sxs-lookup"><span data-stu-id="49148-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="49148-135">释放对象上的锁。</span><span class="sxs-lookup"><span data-stu-id="49148-135">Releases the lock on an object.</span></span> <span data-ttu-id="49148-136">此操作还将标记临界区受锁定对象的末尾。</span><span class="sxs-lookup"><span data-stu-id="49148-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="49148-137">开头[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，有两个重载组<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.TryEnter%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="49148-138">一组重载具有`ref`（在 C# 中) 或`ByRef`（在 Visual Basic)<xref:System.Boolean>以原子方式设置为的参数`true`如果已获取锁，即使获取锁时，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="49148-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="49148-139">如果非常重要释放在所有情况下，锁，即使该锁定保护的资源可能处于不一致状态，请使用这些重载。</span><span class="sxs-lookup"><span data-stu-id="49148-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="49148-140">锁对象</span><span class="sxs-lookup"><span data-stu-id="49148-140">The lock object</span></span>  
 <span data-ttu-id="49148-141">监视器类组成`static`（在 C# 中) 或`Shared`（在 Visual Basic) 对控件访问关键部分对象操作的方法。</span><span class="sxs-lookup"><span data-stu-id="49148-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="49148-142">为每个同步的对象来维护以下信息：</span><span class="sxs-lookup"><span data-stu-id="49148-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="49148-143">对当前持有锁的线程的引用。</span><span class="sxs-lookup"><span data-stu-id="49148-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="49148-144">对就绪的队列，其中包含准备好获取锁的线程的引用。</span><span class="sxs-lookup"><span data-stu-id="49148-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="49148-145">对包含正在等待的锁定对象状态的更改通知的线程的等待队列的引用。</span><span class="sxs-lookup"><span data-stu-id="49148-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="49148-146"><xref:System.Threading.Monitor> 锁定对象（即引用类型），而不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="49148-147">虽然可以将值类型传递到 <xref:System.Threading.Monitor.Enter%2A> 和 <xref:System.Threading.Monitor.Exit%2A>，但对每个调用它都分别进行了装箱。</span><span class="sxs-lookup"><span data-stu-id="49148-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="49148-148">由于每次调用都将创建一个单独的对象，所以绝不会阻止 <xref:System.Threading.Monitor.Enter%2A> 并且它应该保护的代码不会真正同步。</span><span class="sxs-lookup"><span data-stu-id="49148-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="49148-149">此外，传递到 <xref:System.Threading.Monitor.Exit%2A> 的对象不同于传递到 <xref:System.Threading.Monitor.Enter%2A> 的对象，因此 <xref:System.Threading.Monitor> 将引发 <xref:System.Threading.SynchronizationLockException> 异常并显示消息“从代码的非同步块调用了对象同步方法。”</span><span class="sxs-lookup"><span data-stu-id="49148-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="49148-150">以下示例阐释了此问题。</span><span class="sxs-lookup"><span data-stu-id="49148-150">The following example illustrates this problem.</span></span> <span data-ttu-id="49148-151">它启动十个任务，其中每个任务仅休眠 250 毫秒。</span><span class="sxs-lookup"><span data-stu-id="49148-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="49148-152">然后，每个任务会更新计数器变量 `nTasks`，该变量用于计算实际启动和执行的任务数。</span><span class="sxs-lookup"><span data-stu-id="49148-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="49148-153">因为 `nTasks` 是一个可同时被多个任务更新的全局变量，所以使用监视器防止其同时被多个任务进行修改。</span><span class="sxs-lookup"><span data-stu-id="49148-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="49148-154">但是，如示例输出所示，每个任务都将引发 <xref:System.Threading.SynchronizationLockException> 异常。</span><span class="sxs-lookup"><span data-stu-id="49148-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="49148-155">因为 `nTasks` 变量会先于对每个任务中的 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 方法的调用而进行装箱，所以每个任务都将引发 <xref:System.Threading.SynchronizationLockException> 异常。</span><span class="sxs-lookup"><span data-stu-id="49148-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="49148-156">换言之，将向每个方法调用传递一个独立于其他变量的单独变量。</span><span class="sxs-lookup"><span data-stu-id="49148-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="49148-157">`nTasks` 在对 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 方法的调用中会再次进行装箱。</span><span class="sxs-lookup"><span data-stu-id="49148-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="49148-158">这将再次创建 10 个新装箱的变量 `nTasks`，这些变量相互独立并且独立于在调用 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 方法时创建的 10 个装箱变量。</span><span class="sxs-lookup"><span data-stu-id="49148-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="49148-159">然后将引发异常，因为我们的代码正尝试在之前未锁定的新创建变量上释放锁定。</span><span class="sxs-lookup"><span data-stu-id="49148-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="49148-160">尽管可以先装箱值类型变量，再调用 <xref:System.Threading.Monitor.Enter%2A> 和 <xref:System.Threading.Monitor.Exit%2A>（如下例所示）并且同时向这两种方法传递相同的装箱对象，但是进行该操作并没有什么好处。</span><span class="sxs-lookup"><span data-stu-id="49148-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="49148-161">对未装箱的变量所做的更改不会反映在装箱副本中，并且无法更改装箱副本的值。</span><span class="sxs-lookup"><span data-stu-id="49148-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="49148-162">在选择上要同步的对象时，应仅在私有或内部对象上锁定。</span><span class="sxs-lookup"><span data-stu-id="49148-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="49148-163">锁定对外部对象可能会导致死锁，因为不相关的代码可以选择要锁定上用于不同目的的相同对象。</span><span class="sxs-lookup"><span data-stu-id="49148-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="49148-164">请注意，你可以同步多个应用程序域中的某个对象，如果用于锁的对象派生自<xref:System.MarshalByRefObject>。</span><span class="sxs-lookup"><span data-stu-id="49148-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="49148-165">临界区</span><span class="sxs-lookup"><span data-stu-id="49148-165">The critical section</span></span>  
 <span data-ttu-id="49148-166">使用<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>标记的开头和末尾临界区的方法。</span><span class="sxs-lookup"><span data-stu-id="49148-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-167">提供的功能<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>方法等同于所提供的[锁](~/docs/csharp/language-reference/keywords/lock-statement.md)C# 中的语句和[SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)只不过在 Visual Basic 中的语句语言构造换行<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType>方法重载与<xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>中的方法`try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="49148-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="49148-168">若要确保监视器释放的块。</span><span class="sxs-lookup"><span data-stu-id="49148-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="49148-169">如果关键部分是一组连续的说明，然后获取的锁的<xref:System.Threading.Monitor.Enter%2A>方法将保证只有一个线程可以执行所包含的代码使用锁定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="49148-170">在这种情况下，我们建议你将在此代码置于`try`块并将对<xref:System.Threading.Monitor.Exit%2A>中的方法`finally`块。</span><span class="sxs-lookup"><span data-stu-id="49148-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="49148-171">这可确保即使发生异常，也将释放该锁定。</span><span class="sxs-lookup"><span data-stu-id="49148-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="49148-172">下面的代码段说明了此模式。</span><span class="sxs-lookup"><span data-stu-id="49148-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="49148-173">此工具通常用于同步访问静态或实例方法的类。</span><span class="sxs-lookup"><span data-stu-id="49148-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="49148-174">如果临界区跨越整个方法，可以通过锁定设施放置<xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>方法，并指定<xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized>的构造函数中的值<xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="49148-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="49148-175">当你使用此特性，<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>方法调用，则不需要。</span><span class="sxs-lookup"><span data-stu-id="49148-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="49148-176">下面的代码片段阐释了这种模式：</span><span class="sxs-lookup"><span data-stu-id="49148-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="49148-177">请注意，该特性将导致当前线程持有锁，直到该方法返回;如果可以更快地释放锁，则使用<xref:System.Threading.Monitor>类，C#[锁](~/docs/csharp/language-reference/keywords/lock-statement.md)语句或 Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)内而不是属性的方法的语句。</span><span class="sxs-lookup"><span data-stu-id="49148-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="49148-178">尽管很可能<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>锁定和释放用于跨成员或类边界的给定的对象的语句，不建议这样做。</span><span class="sxs-lookup"><span data-stu-id="49148-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="49148-179">脉冲、 PulseAll 和等待</span><span class="sxs-lookup"><span data-stu-id="49148-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="49148-180">后一个线程拥有该锁，并已进入锁保护的关键部分，就可以调用<xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>， <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>，和<xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="49148-181"><xref:System.Threading.Monitor.Wait%2A> 如果被保留，允许正在等待的线程或线程获取锁，并进入临界区，并等待通知通过调用释放的锁<xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>或<xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="49148-182">当 <xref:System.Threading.Monitor.Wait%2A> 获得通知后，它将返回并再次获取该锁定。</span><span class="sxs-lookup"><span data-stu-id="49148-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="49148-183">在等待队列中等待处理的下一个线程的 <xref:System.Threading.Monitor.Pulse%2A> 和 <xref:System.Threading.Monitor.PulseAll%2A> 信号。</span><span class="sxs-lookup"><span data-stu-id="49148-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="49148-184">监视器和等待句柄</span><span class="sxs-lookup"><span data-stu-id="49148-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="49148-185">务必要注意的使用之间的区别<xref:System.Threading.Monitor>类和<xref:System.Threading.WaitHandle>对象。</span><span class="sxs-lookup"><span data-stu-id="49148-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="49148-186"><xref:System.Threading.Monitor>类是纯托管且完全可移植，并且可能在操作系统资源要求方面更加高效。</span><span class="sxs-lookup"><span data-stu-id="49148-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="49148-187"><xref:System.Threading.WaitHandle> 对象表示操作系统可等待对象，有助于托管和非托管代码之间进行同步，并公开一些高级操作系统功能，如同时等待多个对象的功能。</span><span class="sxs-lookup"><span data-stu-id="49148-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49148-188">下面的示例使用<xref:System.Threading.Monitor>类所表示的随机数生成器的单个实例对访问进行同步<xref:System.Random>类。</span><span class="sxs-lookup"><span data-stu-id="49148-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="49148-189">该示例创建十个任务，其中每个线程池线程异步执行。</span><span class="sxs-lookup"><span data-stu-id="49148-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="49148-190">每个任务生成 10,000 的随机数字，计算其平均值，并更新维护随机数生成数的运行总计和其结果相加值的两个过程级别变量。</span><span class="sxs-lookup"><span data-stu-id="49148-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="49148-191">所有任务都执行后，这两个值然后用于计算的总体平均值。</span><span class="sxs-lookup"><span data-stu-id="49148-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="49148-192">由于它们可以访问从一个线程池线程上运行任何任务，可以访问变量`total`和`n`还必须同步。</span><span class="sxs-lookup"><span data-stu-id="49148-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="49148-193"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType>方法用于此目的。</span><span class="sxs-lookup"><span data-stu-id="49148-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="49148-194">下面的示例演示如何组合的使用<xref:System.Threading.Monitor>类 (通过实现`lock`或`SyncLock`语言构造)，则<xref:System.Threading.Interlocked>类，与<xref:System.Threading.AutoResetEvent>类。</span><span class="sxs-lookup"><span data-stu-id="49148-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="49148-195">它定义了两个`internal`（在 C# 中) 或`Friend`（在 Visual Basic) 类，`SyncResource`和`UnSyncResource`，它们分别提供对资源的同步和不同步访问。</span><span class="sxs-lookup"><span data-stu-id="49148-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="49148-196">若要确保示例展示同步和不同步的访问 （它可以是这种情况，如果每个方法调用快速完成） 之间的差异，此方法包含一次随机延迟： 对于线程其<xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType>属性为偶数，方法调用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>以引入 2000 毫秒延迟。</span><span class="sxs-lookup"><span data-stu-id="49148-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="49148-197">请注意，因为`SyncResource`类不是公共的没有客户端代码对同步资源采用锁，内部类将自己采用锁。</span><span class="sxs-lookup"><span data-stu-id="49148-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="49148-198">这可以防止恶意代码对公共对象采用锁。</span><span class="sxs-lookup"><span data-stu-id="49148-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="49148-199">该示例定义一个变量， `numOps`，定义将要尝试访问资源的线程数。</span><span class="sxs-lookup"><span data-stu-id="49148-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="49148-200">应用程序线程调用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>方法同步和不同步每个访问五次。</span><span class="sxs-lookup"><span data-stu-id="49148-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="49148-201"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>方法只有一个参数，一个委托，可不接受任何参数且不返回值。</span><span class="sxs-lookup"><span data-stu-id="49148-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="49148-202">对于同步访问，它将调用`SyncUpdateResource`方法; 对于不同步访问，它将调用`UnSyncUpdateResource`方法。</span><span class="sxs-lookup"><span data-stu-id="49148-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="49148-203">方法调用每个组后, 应用程序线程调用[AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*)方法，以便阻止，直到<xref:System.Threading.AutoResetEvent>实例发出信号。</span><span class="sxs-lookup"><span data-stu-id="49148-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="49148-204">每次调用`SyncUpdateResource`方法都会调用内部`SyncResource.Access`方法，然后调用<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>方法以递减`numOps`计数器。</span><span class="sxs-lookup"><span data-stu-id="49148-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="49148-205"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>方法用于递减计数器，因为否则你无法确保第二个线程将访问的值之前第一个线程的递减, 值已存储在变量中。</span><span class="sxs-lookup"><span data-stu-id="49148-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="49148-206">当上一次同步的工作线程递减为零的计数器时，指示所有同步线程都已完成对资源的访问`SyncUpdateResource`方法调用<xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType>方法，发出主线程继续信号执行。</span><span class="sxs-lookup"><span data-stu-id="49148-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="49148-207">每次调用`UnSyncUpdateResource`方法都会调用内部`UnSyncResource.Access`方法，然后调用<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>方法以递减`numOps`计数器。</span><span class="sxs-lookup"><span data-stu-id="49148-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="49148-208">同样，<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>方法用于递减以确保第二个线程不会在第一个线程的递减值已分配给变量之前访问值的计数器。</span><span class="sxs-lookup"><span data-stu-id="49148-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="49148-209">当上一次同步辅助线程递减为零的计数器时，指示没有不同步线程需要访问资源，`UnSyncUpdateResource`方法调用<xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType>方法，发出主线程继续执行的信号.</span><span class="sxs-lookup"><span data-stu-id="49148-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="49148-210">如示例的输出所示，同步访问可确保另一个线程必须在调用线程退出受保护的资源之后才能访问该资源；每个线程都在其前置任务上等待。</span><span class="sxs-lookup"><span data-stu-id="49148-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="49148-211">另一方面，而无需锁定，`UnSyncResource.Access`线程到达的顺序调用方法。</span><span class="sxs-lookup"><span data-stu-id="49148-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="49148-212">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="49148-212">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49148-213">获取指定对象上的排他锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-213">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-214">在其上获取监视器锁的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-214">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-215">在指定对象上获取排他锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-215">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-216">使用`Enter`获取<xref:System.Threading.Monitor>上作为参数传递的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="49148-217">如果另一个线程执行`Enter`对象上但尚未执行相应<xref:System.Threading.Monitor.Exit%2A>，将阻止当前线程，直到另一个线程释放该对象。</span><span class="sxs-lookup"><span data-stu-id="49148-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="49148-218">它是合法的同一线程调用`Enter`多次而无需阻止它; 但是，相同数目的`Exit`之前等待的对象上的其他线程将取消阻止必须调用的调用。</span><span class="sxs-lookup"><span data-stu-id="49148-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="49148-219">使用<xref:System.Threading.Monitor>以锁定对象 （即，引用类型） 而不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="49148-220">传递到值类型变量时`Enter`，它作为对象进行了装箱。</span><span class="sxs-lookup"><span data-stu-id="49148-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="49148-221">如果传递到相同的变量`Enter`同样，它被装箱为单独的对象，并在线程不阻止。</span><span class="sxs-lookup"><span data-stu-id="49148-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="49148-222">在此情况下，代码的`Monitor`是应该保护未受到保护。</span><span class="sxs-lookup"><span data-stu-id="49148-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="49148-223">此外，当你将该变量传递到`Exit`，创建另一个单独的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="49148-224">因为该对象传递给`Exit`不同于传递给对象`Enter`，`Monitor`引发<xref:System.Threading.SynchronizationLockException>。</span><span class="sxs-lookup"><span data-stu-id="49148-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="49148-225">有关详细信息，请参阅概念性主题[监视器](xref:System.Threading.Monitor)。</span><span class="sxs-lookup"><span data-stu-id="49148-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="49148-226"><xref:System.Threading.Thread.Interrupt%2A> 可以中断线程等待输入`Monitor`对象上。</span><span class="sxs-lookup"><span data-stu-id="49148-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="49148-227">A<xref:System.Threading.ThreadInterruptedException>将引发。</span><span class="sxs-lookup"><span data-stu-id="49148-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="49148-228">使用 C# `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="49148-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="49148-229">块 (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="49148-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="49148-230">在 Visual Basic 中) 以确保释放监视器，或使用 C#`lock`语句 (`SyncLock`在 Visual Basic 中的语句)，以便包装<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>中的方法`try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="49148-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="49148-231">块。</span><span class="sxs-lookup"><span data-stu-id="49148-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49148-232">下面的示例演示如何使用 `Enter` 方法。</span><span class="sxs-lookup"><span data-stu-id="49148-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-233">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-234">要在其上等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-234">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="49148-235">尝试获取锁的结果，通过引用传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-235">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="49148-236">输入必须为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-236">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49148-237">如果已获取锁，则输出为 <see langword="true" />；否则输出为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49148-238">即使在尝试获取锁的过程中发生异常，也会设置输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="49148-239">注意   如果没有发生异常，则此方法的输出始终为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-240">获取指定对象上的排他锁，并自动设置一个值，指示是否获取了该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-241">使用`Enter`获取<xref:System.Threading.Monitor>作为传递的对象上`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="49148-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="49148-242">如果另一个线程执行`Enter`对象上但尚未执行相应<xref:System.Threading.Monitor.Exit%2A>，将阻止当前线程，直到另一个线程释放该对象。</span><span class="sxs-lookup"><span data-stu-id="49148-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="49148-243">它是合法的同一线程调用`Enter`多次而无需阻止它; 但是，相同数目的`Exit`之前等待的对象上的其他线程将取消阻止必须调用的调用。</span><span class="sxs-lookup"><span data-stu-id="49148-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="49148-244">如果获取了该锁不因为引发了异常，所指定的变量`lockTaken`参数是`false`此方法结束后。</span><span class="sxs-lookup"><span data-stu-id="49148-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="49148-245">这样，在所有情况下，确定它是否是释放锁所需的程序。</span><span class="sxs-lookup"><span data-stu-id="49148-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="49148-246">如果此方法返回而不引发异常时，所指定的变量`lockTaken`参数始终是`true`，并且没有无需对其进行测试。</span><span class="sxs-lookup"><span data-stu-id="49148-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="49148-247">使用<xref:System.Threading.Monitor>以锁定对象 （即，引用类型） 而不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="49148-248">传递到值类型变量时`Enter`，它作为对象进行了装箱。</span><span class="sxs-lookup"><span data-stu-id="49148-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="49148-249">如果传递到相同的变量`Enter`同样，它被装箱为单独的对象，并在线程不阻止。</span><span class="sxs-lookup"><span data-stu-id="49148-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="49148-250">在此情况下，代码的`Monitor`是应该保护未受到保护。</span><span class="sxs-lookup"><span data-stu-id="49148-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="49148-251">此外，当你将该变量传递到`Exit`，创建另一个单独的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="49148-252">因为该对象传递给`Exit`不同于传递给对象`Enter`，`Monitor`引发<xref:System.Threading.SynchronizationLockException>。</span><span class="sxs-lookup"><span data-stu-id="49148-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="49148-253">有关详细信息，请参阅概念性主题[监视器](xref:System.Threading.Monitor)。</span><span class="sxs-lookup"><span data-stu-id="49148-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="49148-254"><xref:System.Threading.Thread.Interrupt%2A> 可以中断线程等待输入`Monitor`对象上。</span><span class="sxs-lookup"><span data-stu-id="49148-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="49148-255">A<xref:System.Threading.ThreadInterruptedException>将引发。</span><span class="sxs-lookup"><span data-stu-id="49148-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49148-256">下面的代码演示使用的基本模式<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="49148-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="49148-257">此重载始终设置传递给该变量的值`ref`参数 (`ByRef`在 Visual Basic 中) `lockTaken`，即使该方法将引发异常，因此该变量的值是可靠的方法来测试是否锁定必须是发布。</span><span class="sxs-lookup"><span data-stu-id="49148-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49148-258">
            <paramref name="lockTaken" /> 的输入为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-259">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-260">在其上释放锁的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-260">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-261">释放指定对象上的排他锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-261">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-262">调用线程必须拥有上的锁`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="49148-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="49148-263">如果调用线程拥有对指定的对象的锁定并已完成的数量相等`Exit`和<xref:System.Threading.Monitor.Enter%2A>调用对于对象，然后释放锁。</span><span class="sxs-lookup"><span data-stu-id="49148-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="49148-264">如果调用线程已不调用`Exit`尽可能多的次数`Enter`，不释放锁。</span><span class="sxs-lookup"><span data-stu-id="49148-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="49148-265">如果该锁被释放，其他线程处于准备队列中的对象，其中一个线程获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="49148-266">如果其他线程等待获取锁的等待队列中，它们将不自动移到就绪的队列时的锁的所有者调用`Exit`。</span><span class="sxs-lookup"><span data-stu-id="49148-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="49148-267">若要将一个或多个正在等待的线程移到就绪的队列，调用<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>之前调用`Exit`。</span><span class="sxs-lookup"><span data-stu-id="49148-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49148-268">下面的示例演示如何使用 `Exit` 方法。</span><span class="sxs-lookup"><span data-stu-id="49148-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-269">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="49148-270">当前线程不拥有指定对象的锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-270">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-271">要测试的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-271">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-272">确定当前线程是否保留指定对象上的锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-272">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49148-273">如果当前线程持有 <paramref name="obj" /> 锁，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-273">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-274">此方法仅适用于可通过使用的方法来获取的锁<xref:System.Threading.Monitor>类，或通过使用 C#`lock`语句或 Visual Basic`SyncLock`语句，用于实现与<xref:System.Threading.Monitor>。</span><span class="sxs-lookup"><span data-stu-id="49148-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="49148-275">使用此方法使用诊断工具，如<xref:System.Diagnostics.Debug.Assert%2A>方法和<xref:System.Diagnostics.Contracts.Contract>类中，以调试涉及的锁定问题<xref:System.Threading.Monitor>类。</span><span class="sxs-lookup"><span data-stu-id="49148-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-276">
            <paramref name="obj" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-276">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-277">线程正在等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-277">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-278">通知等待队列中的线程锁定对象状态的更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-279">仅该锁的当前所有者可以指示正在等待对象使用`Pulse`。</span><span class="sxs-lookup"><span data-stu-id="49148-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="49148-280">当前拥有指定的对象上的锁的线程调用此方法来对锁定的行中的下一个线程。</span><span class="sxs-lookup"><span data-stu-id="49148-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="49148-281">在收到脉冲，正在等待的线程移到就绪的队列。</span><span class="sxs-lookup"><span data-stu-id="49148-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="49148-282">时，调用的线程`Pulse`释放锁后，在准备队列中 （这不一定接收到脉冲的线程） 的下一个线程获取该锁。</span><span class="sxs-lookup"><span data-stu-id="49148-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49148-283"><xref:System.Threading.Monitor>类不维护状态指示<xref:System.Threading.Monitor.Pulse%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="49148-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="49148-284">因此，如果调用<xref:System.Threading.Monitor.Pulse%2A>无线程等待时，下一个线程上调用<xref:System.Threading.Monitor.Wait%2A>块就像<xref:System.Threading.Monitor.Pulse%2A>永远不会调用一样。</span><span class="sxs-lookup"><span data-stu-id="49148-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="49148-285">如果使用两个线程<xref:System.Threading.Monitor.Pulse%2A>和<xref:System.Threading.Monitor.Wait%2A>进行交互，这可能导致死锁。</span><span class="sxs-lookup"><span data-stu-id="49148-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="49148-286">与此相反的行为<xref:System.Threading.AutoResetEvent>类： 如果你发出信号<xref:System.Threading.AutoResetEvent>通过调用其<xref:System.Threading.EventWaitHandle.Set%2A>方法，并且没有任何线程在等待，<xref:System.Threading.AutoResetEvent>保留在终止状态，直到线程调用<xref:System.Threading.WaitHandle.WaitOne%2A>， <xref:System.Threading.WaitHandle.WaitAny%2A>，或<xref:System.Threading.WaitHandle.WaitAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="49148-287"><xref:System.Threading.AutoResetEvent>释放该线程并返回到未终止的状态。</span><span class="sxs-lookup"><span data-stu-id="49148-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="49148-288">请注意同步的对象包含多个引用，其中包括对当前拥有锁定、 到就绪的队列，其中包含准备好获取锁的线程，引用和对等待队列的引用的线程的引用的包含正在等待的对象的状态的更改通知的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="49148-289">`Pulse`， <xref:System.Threading.Monitor.PulseAll%2A>，和<xref:System.Threading.Monitor.Wait%2A>方法必须从调用代码的同步块内。</span><span class="sxs-lookup"><span data-stu-id="49148-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="49148-290">若要指示多个线程，使用<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-291">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="49148-292">调用线程不拥有指定对象的锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-292">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-293">发送脉冲的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-293">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-294">通知所有的等待线程对象状态的更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-294">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-295">当前拥有指定的对象上的锁的线程调用此方法来等待获取锁的对象上的所有线程。</span><span class="sxs-lookup"><span data-stu-id="49148-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="49148-296">发送信号后，正在等待的线程会移到就绪的队列。</span><span class="sxs-lookup"><span data-stu-id="49148-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="49148-297">时，调用的线程`PulseAll`释放锁后，准备就绪的队列中的下一步线程获取该锁。</span><span class="sxs-lookup"><span data-stu-id="49148-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="49148-298">请注意同步的对象包含多个引用，其中包括对当前拥有锁定、 到就绪的队列，其中包含准备好获取锁的线程，引用和对等待队列的引用的线程的引用的包含正在等待的对象的状态的更改通知的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="49148-299"><xref:System.Threading.Monitor.Pulse%2A>， `PulseAll`，和<xref:System.Threading.Monitor.Wait%2A>方法必须从调用代码的同步块内。</span><span class="sxs-lookup"><span data-stu-id="49148-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="49148-300">备注<xref:System.Threading.Monitor.Pulse%2A>方法说明发生如果<xref:System.Threading.Monitor.Pulse%2A>等待无线程时调用。</span><span class="sxs-lookup"><span data-stu-id="49148-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="49148-301">若要指示单线程，使用`Pulse`方法。</span><span class="sxs-lookup"><span data-stu-id="49148-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-302">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="49148-303">调用线程不拥有指定对象的锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-303">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49148-304">尝试获取指定对象的排他锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-304">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-305">在其上获取锁的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-305">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-306">尝试获取指定对象的排他锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-306">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49148-307">如果当前线程获取该锁，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-307">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-308">如果成功，此方法获取排他锁上`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="49148-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="49148-309">指示在锁可用，此方法将立即返回。</span><span class="sxs-lookup"><span data-stu-id="49148-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="49148-310">此方法类似于是<xref:System.Threading.Monitor.Enter%2A>，但它将永远不会阻止当前线程。</span><span class="sxs-lookup"><span data-stu-id="49148-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="49148-311">如果线程无法输入不阻止的情况下，该方法返回`false,`。</span><span class="sxs-lookup"><span data-stu-id="49148-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-312">使用<xref:System.Threading.Monitor>以锁定对象 （即，引用类型） 而不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="49148-313">有关详细信息，请参阅<xref:System.Threading.Monitor>文章。</span><span class="sxs-lookup"><span data-stu-id="49148-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="49148-314">若要确保线程不进入临界区，您应检查方法的返回值，并在临界区中执行代码，仅当其返回值为`true`。</span><span class="sxs-lookup"><span data-stu-id="49148-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="49148-315">下面的代码段显示用于调用此方法的模式。</span><span class="sxs-lookup"><span data-stu-id="49148-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="49148-316">请注意，应调用<xref:System.Threading.Monitor.Exit%2A>中`finally`块以确保调用线程释放它对关键部分的锁定，如果发生异常。</span><span class="sxs-lookup"><span data-stu-id="49148-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="49148-317">下面的代码示例演示如何使用 `TryEnter` 方法。</span><span class="sxs-lookup"><span data-stu-id="49148-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-318">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-319">在其上获取锁的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-319">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="49148-320">尝试获取锁的结果，通过引用传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-320">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="49148-321">输入必须为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-321">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49148-322">如果已获取锁，则输出为 <see langword="true" />；否则输出为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49148-323">即使在尝试获取锁的过程中发生异常，也会设置输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-324">尝试获取指定对象上的排他锁，并自动设置一个值，指示是否获取了该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-325">如果成功，此方法获取排他锁上`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="49148-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="49148-326">指示在锁可用，此方法将立即返回。</span><span class="sxs-lookup"><span data-stu-id="49148-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="49148-327">如果获取了该锁不因为引发了异常，所指定的变量`lockTaken`参数是`false`此方法结束后。</span><span class="sxs-lookup"><span data-stu-id="49148-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="49148-328">这样，在所有情况下，确定它是否是释放锁所需的程序。</span><span class="sxs-lookup"><span data-stu-id="49148-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="49148-329">此方法类似于是<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>，但它将永远不会阻止当前线程。</span><span class="sxs-lookup"><span data-stu-id="49148-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="49148-330">如果在线程不会阻止，无法进入`lockTaken`参数设置为`false`方法返回时。</span><span class="sxs-lookup"><span data-stu-id="49148-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-331">使用<xref:System.Threading.Monitor>以锁定对象 （即，引用类型） 而不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="49148-332">有关详细信息，请参阅<xref:System.Threading.Monitor>一文。</span><span class="sxs-lookup"><span data-stu-id="49148-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="49148-333">若要确保线程不进入临界区，你应该检查的值`lockTaken`并在临界区中执行代码，其值时才`true`。</span><span class="sxs-lookup"><span data-stu-id="49148-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="49148-334">下面的代码段显示用于调用此方法的模式。</span><span class="sxs-lookup"><span data-stu-id="49148-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="49148-335">请注意，应调用<xref:System.Threading.Monitor.Exit%2A>中`finally`块以确保调用线程释放它对关键部分的锁定，如果发生异常。</span><span class="sxs-lookup"><span data-stu-id="49148-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="49148-336">下面的代码演示使用的基本模式<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="49148-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="49148-337">此重载始终设置传递给该变量的值`ref`参数 (`ByRef`在 Visual Basic 中) `lockTaken`，即使该方法将引发异常，因此该变量的值是可靠的方法来测试是否锁定必须是发布。</span><span class="sxs-lookup"><span data-stu-id="49148-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49148-338">
            <paramref name="lockTaken" /> 的输入为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-339">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-340">在其上获取锁的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-340">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="49148-341">等待锁所需的毫秒数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-341">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-342">在指定的毫秒数内尝试获取指定对象上的排他锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49148-343">如果当前线程获取该锁，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-343">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-344">如果`millisecondsTimeout`参数等于<xref:System.Threading.Timeout.Infinite>，此方法相当于<xref:System.Threading.Monitor.Enter%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="49148-345">如果`millisecondsTimeout`等于 0，则此方法相当于<xref:System.Threading.Monitor.TryEnter%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-346">使用<xref:System.Threading.Monitor>以锁定对象 （即，引用类型） 而不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="49148-347">有关详细信息，请参阅<xref:System.Threading.Monitor>文章。</span><span class="sxs-lookup"><span data-stu-id="49148-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="49148-348">若要确保线程不进入临界区，您应检查方法的返回值，并在临界区中执行代码，仅当其返回值为`true`。</span><span class="sxs-lookup"><span data-stu-id="49148-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="49148-349">下面的代码段显示用于调用此方法的模式。</span><span class="sxs-lookup"><span data-stu-id="49148-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="49148-350">请注意，应调用<xref:System.Threading.Monitor.Exit%2A>中`finally`块以确保调用线程释放它对关键部分的锁定，如果发生异常。</span><span class="sxs-lookup"><span data-stu-id="49148-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-351">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="49148-352">
            <paramref name="millisecondsTimeout" /> 是负数且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-352">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-353">在其上获取锁的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-353">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="49148-354">
            <see cref="T:System.TimeSpan" />，表示等待锁所需的时间量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="49148-355">值为 -1 毫秒表示指定无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-355">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-356">在指定的时间内尝试获取指定对象上的排他锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49148-357">如果当前线程获取该锁，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-357">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-358">如果值`timeout`参数转换为毫秒等于 – 1，则此方法相当于<xref:System.Threading.Monitor.Enter%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="49148-359">如果值`timeout`等于 0，则此方法相当于<xref:System.Threading.Monitor.TryEnter%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-360">使用<xref:System.Threading.Monitor>以锁定对象 （即，引用类型） 而不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="49148-361">有关详细信息，请参阅<xref:System.Threading.Monitor>类主题。</span><span class="sxs-lookup"><span data-stu-id="49148-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="49148-362">若要确保线程不进入临界区，您应检查方法的返回值，并在临界区中执行代码，仅当其返回值为`true`。</span><span class="sxs-lookup"><span data-stu-id="49148-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="49148-363">下面的代码段显示用于调用此方法的模式。</span><span class="sxs-lookup"><span data-stu-id="49148-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="49148-364">请注意，应调用<xref:System.Threading.Monitor.Exit%2A>中`finally`块以确保调用线程释放它对关键部分的锁定，如果发生异常。</span><span class="sxs-lookup"><span data-stu-id="49148-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-365">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="49148-366">
            <paramref name="timeout" /> 的值（以毫秒计）为负数且不等于 <see cref="F:System.Threading.Timeout.Infinite" />（–1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-367">在其上获取锁的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-367">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="49148-368">等待锁所需的毫秒数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-368">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="49148-369">尝试获取锁的结果，通过引用传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-369">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="49148-370">输入必须为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-370">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49148-371">如果已获取锁，则输出为 <see langword="true" />；否则输出为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49148-372">即使在尝试获取锁的过程中发生异常，也会设置输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-373">在指定的毫秒数内尝试获取指定对象上的排他锁，并自动设置一个值，指示是否获取了该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-374">如果`millisecondsTimeout`参数等于<xref:System.Threading.Timeout.Infinite>，此方法相当于<xref:System.Threading.Monitor.Enter%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="49148-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="49148-375">如果`millisecondsTimeout`等于 0，则此方法相当于<xref:System.Threading.Monitor.TryEnter%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="49148-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="49148-376">如果获取了该锁不因为引发了异常，所指定的变量`lockTaken`参数是`false`此方法结束后。</span><span class="sxs-lookup"><span data-stu-id="49148-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="49148-377">这样，在所有情况下，确定它是否是释放锁所需的程序。</span><span class="sxs-lookup"><span data-stu-id="49148-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-378">使用<xref:System.Threading.Monitor>以锁定对象 （即，引用类型） 而不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="49148-379">有关详细信息，请参阅<xref:System.Threading.Monitor>类主题。</span><span class="sxs-lookup"><span data-stu-id="49148-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="49148-380">若要确保线程不进入临界区，你应该检查的值`lockTaken`并在临界区中执行代码，其值时才`true`。</span><span class="sxs-lookup"><span data-stu-id="49148-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="49148-381">下面的代码段显示用于调用此方法的模式。</span><span class="sxs-lookup"><span data-stu-id="49148-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="49148-382">请注意，应调用<xref:System.Threading.Monitor.Exit%2A>中`finally`块以确保调用线程释放它对关键部分的锁定，如果发生异常。</span><span class="sxs-lookup"><span data-stu-id="49148-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="49148-383">下面的代码演示使用的基本模式<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="49148-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="49148-384">此重载始终设置传递给该变量的值`ref`参数 (`ByRef`在 Visual Basic 中) `lockTaken`，即使该方法将引发异常，因此该变量的值是可靠的方法来测试是否锁定必须是发布。</span><span class="sxs-lookup"><span data-stu-id="49148-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49148-385">
            <paramref name="lockTaken" /> 的输入为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-386">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="49148-387">
            <paramref name="millisecondsTimeout" /> 是负数且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-387">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-388">在其上获取锁的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-388">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="49148-389">用于等待锁的时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-389">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="49148-390">值为 -1 毫秒表示指定无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-390">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="49148-391">尝试获取锁的结果，通过引用传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-391">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="49148-392">输入必须为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-392">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49148-393">如果已获取锁，则输出为 <see langword="true" />；否则输出为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="49148-394">即使在尝试获取锁的过程中发生异常，也会设置输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-395">在指定的一段时间内尝试获取指定对象上的排他锁，并自动设置一个值，指示是否获得了该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-396">如果值`timeout`参数转换为毫秒等于 – 1，则此方法相当于<xref:System.Threading.Monitor.Enter%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="49148-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="49148-397">如果值`timeout`等于 0，则此方法相当于<xref:System.Threading.Monitor.TryEnter%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="49148-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="49148-398">如果获取了该锁不因为引发了异常，所指定的变量`lockTaken`参数是`false`此方法结束后。</span><span class="sxs-lookup"><span data-stu-id="49148-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="49148-399">这样，在所有情况下，确定它是否是释放锁所需的程序。</span><span class="sxs-lookup"><span data-stu-id="49148-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-400">使用<xref:System.Threading.Monitor>以锁定对象 （即，引用类型） 而不是值类型。</span><span class="sxs-lookup"><span data-stu-id="49148-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="49148-401">有关详细信息，请参阅<xref:System.Threading.Monitor>类主题。</span><span class="sxs-lookup"><span data-stu-id="49148-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="49148-402">若要确保线程不进入临界区，你应该检查的值`lockTaken`并在临界区中执行代码，其值时才`true`。</span><span class="sxs-lookup"><span data-stu-id="49148-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="49148-403">下面的代码段显示用于调用此方法的模式。</span><span class="sxs-lookup"><span data-stu-id="49148-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="49148-404">请注意，应调用<xref:System.Threading.Monitor.Exit%2A>中`finally`块以确保调用线程释放它对关键部分的锁定，如果发生异常。</span><span class="sxs-lookup"><span data-stu-id="49148-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49148-405">
            <paramref name="lockTaken" /> 的输入为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-406">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="49148-407">
            <paramref name="timeout" /> 的值（以毫秒计）为负数且不等于 <see cref="F:System.Threading.Timeout.Infinite" />（–1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49148-408">释放对象上的锁并阻止当前线程，直到它重新获取该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-409">要在其上等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-409">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-410">释放对象上的锁并阻止当前线程，直到它重新获取该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49148-411">如果调用由于调用方重新获取了指定对象的锁而返回，则为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-411">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="49148-412">如果未重新获取该锁，则此方法不会返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-412">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-413">当前拥有指定的对象上的锁的线程调用此方法以释放该对象，以便另一个线程可以访问它。</span><span class="sxs-lookup"><span data-stu-id="49148-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="49148-414">调用方等待重新获取锁时被阻止。</span><span class="sxs-lookup"><span data-stu-id="49148-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="49148-415">当调用方需要要等待的时间将因另一个线程操作而导致的状态更改时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49148-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="49148-416">当线程调用`Wait`，它释放对象上的锁并进入对象的等待队列。</span><span class="sxs-lookup"><span data-stu-id="49148-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="49148-417">对象的准备队列中的下一步线程 （如果有） 获取该锁并具有独占使用的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="49148-418">调用的所有线程`Wait`保留在等待队列中直到它们接收到信号从<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>、 发送锁所有者。</span><span class="sxs-lookup"><span data-stu-id="49148-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="49148-419">如果`Pulse`影响仅位于等待队列最前面的线程的发送。</span><span class="sxs-lookup"><span data-stu-id="49148-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="49148-420">如果`PulseAll`发送，等待该对象的所有线程会受到都影响。</span><span class="sxs-lookup"><span data-stu-id="49148-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="49148-421">接收到信号时，一个或多个线程离开等待队列，并进入就绪队列。</span><span class="sxs-lookup"><span data-stu-id="49148-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="49148-422">允许就绪的队列中的线程重新获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="49148-423">此方法返回时调用的线程重新获取该锁的对象上。</span><span class="sxs-lookup"><span data-stu-id="49148-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="49148-424">请注意，此方法会无限期阻止如果锁持有者不会调用`Pulse`或`PulseAll`。</span><span class="sxs-lookup"><span data-stu-id="49148-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="49148-425">调用方执行`Wait`一次，无论的次数<xref:System.Threading.Monitor.Enter%2A>已调用为指定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="49148-426">从概念上讲，`Wait`方法将存储的调用方调用的次数`Enter`对象上并调用`Exit`足够多的次数，根据需要以完全释放锁定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="49148-427">然后，调用方阻止等待重新获取对象时。</span><span class="sxs-lookup"><span data-stu-id="49148-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="49148-428">当调用方重新获取该锁时，系统会调用`Enter`根据需要进行还原保存的多次`Enter`对调用方的计数。</span><span class="sxs-lookup"><span data-stu-id="49148-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="49148-429">调用`Wait`释放指定对象的锁; 如果调用方对其他对象的锁的所有者，这些锁也不会释放。</span><span class="sxs-lookup"><span data-stu-id="49148-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="49148-430">请注意同步的对象包含多个引用，其中包括对当前拥有锁定、 到就绪的队列，其中包含准备好获取锁的线程，引用和对等待队列的引用的线程的引用的包含正在等待的对象的状态的更改通知的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="49148-431"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必须从调用代码的同步块内。</span><span class="sxs-lookup"><span data-stu-id="49148-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="49148-432">备注<xref:System.Threading.Monitor.Pulse%2A>方法说明发生如果<xref:System.Threading.Monitor.Pulse%2A>等待无线程时调用。</span><span class="sxs-lookup"><span data-stu-id="49148-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-433">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="49148-434">调用线程不拥有指定对象的锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-434">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="49148-435">调用 <see langword="Wait" /> 的线程稍后从等待状态中断。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="49148-436">另一线程调用此线程的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法时将发生这种情况。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-437">要在其上等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-437">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="49148-438">线程进入就绪队列之前等待的毫秒数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-438">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-439">释放对象上的锁并阻止当前线程，直到它重新获取该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="49148-440">如果已用指定的超时时间间隔，则线程进入就绪队列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-440">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49148-441">如果在指定的时间过期之前重新获取该锁，则为 <see langword="true" />；如果在指定的时间过期之后重新获取该锁，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-441">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="49148-442">此方法只有在重新获取该锁后才会返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-442">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-443">此方法不返回直到它重新排他锁获取上`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="49148-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="49148-444">当前拥有指定的对象上的锁的线程调用此方法以释放该对象，以便另一个线程可以访问它。</span><span class="sxs-lookup"><span data-stu-id="49148-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="49148-445">调用方等待重新获取锁时被阻止。</span><span class="sxs-lookup"><span data-stu-id="49148-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="49148-446">当调用方需要要等待的时间将因另一个线程操作而导致的状态更改时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49148-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="49148-447">超时可确保，当前线程不会阻止无限期地如果另一个线程释放锁，但第一个调用不<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="49148-448">它还移动到就绪的队列，绕过早在等待队列中，其他线程，以便它可以更快地重新获取锁的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="49148-449">该线程可以测试的返回值<xref:System.Threading.Monitor.Wait%2A>方法来确定是否它重新获取之前超时的锁。线程可以评估条件导致它进入等待，并且如果需要调用<xref:System.Threading.Monitor.Wait%2A>再次方法。</span><span class="sxs-lookup"><span data-stu-id="49148-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="49148-450">当线程调用`Wait`，它释放对象上的锁并进入对象的等待队列。</span><span class="sxs-lookup"><span data-stu-id="49148-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="49148-451">对象的准备队列中的下一步线程 （如果有） 获取该锁并具有独占使用的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="49148-452">调用的线程`Wait`保留在等待队列中一直持有锁的线程调用<xref:System.Threading.Monitor.PulseAll%2A>，或它是在队列中的下一步并持有锁的线程调用<xref:System.Threading.Monitor.Pulse%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="49148-453">但是，如果`millisecondsTimeout`超时之前另一个线程调用此对象的已用<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法，原始线程将移动到就绪的队列，以便重新获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-454">如果<xref:System.Threading.Timeout.Infinite>为指定`millisecondsTimeout`参数，此方法会无限期阻止除非持有者的锁定调用<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="49148-455">如果`millisecondsTimeout`等于 0，调用线程`Wait`释放的锁，然后立即进入就绪队列以便重新获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="49148-456">调用方执行`Wait`一次，无论的次数<xref:System.Threading.Monitor.Enter%2A>已调用为指定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="49148-457">从概念上讲，`Wait`方法将存储的调用方调用的次数<xref:System.Threading.Monitor.Enter%2A>对象上并调用<xref:System.Threading.Monitor.Exit%2A>足够多的次数，根据需要以完全释放锁定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="49148-458">然后，调用方阻止等待重新获取对象时。</span><span class="sxs-lookup"><span data-stu-id="49148-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="49148-459">当调用方重新获取该锁时，系统会调用<xref:System.Threading.Monitor.Enter%2A>根据需要进行还原保存的多次<xref:System.Threading.Monitor.Enter%2A>对调用方的计数。</span><span class="sxs-lookup"><span data-stu-id="49148-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="49148-460">调用`Wait`释放指定对象的锁; 如果调用方对其他对象的锁的所有者，这些锁也不会释放。</span><span class="sxs-lookup"><span data-stu-id="49148-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-461">同步的对象包含多个引用，其中包括对当前拥有锁定、 到就绪的队列，其中包含准备好获取锁的线程，引用和等待队列，其中包含的引用的线程的引用正在等待的对象的状态的更改通知的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="49148-462"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必须从调用代码的同步块内。</span><span class="sxs-lookup"><span data-stu-id="49148-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="49148-463">备注<xref:System.Threading.Monitor.Pulse%2A>方法说明发生如果<xref:System.Threading.Monitor.Pulse%2A>等待无线程时调用。</span><span class="sxs-lookup"><span data-stu-id="49148-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-464">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="49148-465">调用线程不拥有指定对象的锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-465">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="49148-466">调用 <see langword="Wait" /> 的线程稍后从等待状态中断。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="49148-467">另一线程调用此线程的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法时将发生这种情况。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="49148-468">
            <paramref name="millisecondsTimeout" /> 参数值为负且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-469">要在其上等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-469">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="49148-470">
            <see cref="T:System.TimeSpan" />，表示线程进入就绪队列之前等待的时间量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-471">释放对象上的锁并阻止当前线程，直到它重新获取该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="49148-472">如果已用指定的超时时间间隔，则线程进入就绪队列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-472">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49148-473">如果在指定的时间过期之前重新获取该锁，则为 <see langword="true" />；如果在指定的时间过期之后重新获取该锁，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-473">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="49148-474">此方法只有在重新获取该锁后才会返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-474">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-475">此方法不返回直到它重新排他锁获取上`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="49148-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="49148-476">当前拥有指定的对象上的锁的线程调用此方法以释放该对象，以便另一个线程可以访问它。</span><span class="sxs-lookup"><span data-stu-id="49148-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="49148-477">调用方等待重新获取锁时被阻止。</span><span class="sxs-lookup"><span data-stu-id="49148-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="49148-478">当调用方需要要等待的时间将因另一个线程操作而导致的状态更改时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49148-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="49148-479">超时可确保，当前线程不会阻止无限期地如果另一个线程释放锁，但第一个调用不<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="49148-480">它还移动到就绪的队列，绕过早在等待队列中，其他线程，以便它可以更快地重新获取锁的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="49148-481">该线程可以测试的返回值<xref:System.Threading.Monitor.Wait%2A>方法来确定是否它重新获取之前超时的锁。线程可以评估条件导致它进入等待，并且如果需要调用<xref:System.Threading.Monitor.Wait%2A>再次方法。</span><span class="sxs-lookup"><span data-stu-id="49148-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="49148-482">当线程调用`Wait`，它释放对象上的锁并进入对象的等待队列。</span><span class="sxs-lookup"><span data-stu-id="49148-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="49148-483">对象的准备队列中的下一步线程 （如果有） 获取该锁并具有独占使用的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="49148-484">调用的线程`Wait`保留在等待队列中一直持有锁的线程调用<xref:System.Threading.Monitor.PulseAll%2A>，或它是在队列中的下一步并持有锁的线程调用<xref:System.Threading.Monitor.Pulse%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="49148-485">但是，如果`timeout`超时之前另一个线程调用此对象的已用<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法，原始线程将移动到就绪的队列，以便重新获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-486">如果<xref:System.TimeSpan>表示-1 毫秒指定`timeout`参数，此方法会无限期阻止除非持有者的锁定调用<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="49148-487">如果`timeout`为 0 毫秒，调用线程`Wait`释放的锁，然后立即进入就绪队列以便重新获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="49148-488">调用方执行`Wait`一次，无论的次数<xref:System.Threading.Monitor.Enter%2A>已调用为指定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="49148-489">从概念上讲，`Wait`方法将存储的调用方调用的次数<xref:System.Threading.Monitor.Enter%2A>对象上并调用<xref:System.Threading.Monitor.Exit%2A>足够多的次数，根据需要以完全释放锁定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="49148-490">然后，调用方阻止等待重新获取对象时。</span><span class="sxs-lookup"><span data-stu-id="49148-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="49148-491">当调用方重新获取该锁时，系统会调用<xref:System.Threading.Monitor.Enter%2A>根据需要进行还原保存的多次<xref:System.Threading.Monitor.Enter%2A>对调用方的计数。</span><span class="sxs-lookup"><span data-stu-id="49148-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="49148-492">调用`Wait`释放指定对象的锁; 如果调用方对其他对象的锁的所有者，这些锁也不会释放。</span><span class="sxs-lookup"><span data-stu-id="49148-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-493">同步的对象包含多个引用，其中包括对当前拥有锁定、 到就绪的队列，其中包含准备好获取锁的线程，引用和等待队列，其中包含的引用的线程的引用正在等待的对象的状态的更改通知的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="49148-494"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必须从调用代码的同步块内。</span><span class="sxs-lookup"><span data-stu-id="49148-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="49148-495">备注<xref:System.Threading.Monitor.Pulse%2A>方法说明发生如果<xref:System.Threading.Monitor.Pulse%2A>等待无线程时调用。</span><span class="sxs-lookup"><span data-stu-id="49148-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-496">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="49148-497">调用线程不拥有指定对象的锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-497">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="49148-498">调用 <see langword="Wait" /> 的线程稍后从等待状态中断。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="49148-499">另一线程调用此线程的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法时将发生这种情况。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="49148-500">
            <paramref name="timeout" /> 参数值（以毫秒为单位）为负且不表示 <see cref="F:System.Threading.Timeout.Infinite" />（-1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-501">要在其上等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-501">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="49148-502">线程进入就绪队列之前等待的毫秒数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-502">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="49148-503">如果在等待前退出并重新获取上下文的同步域（如果在同步上下文中），则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-503">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-504">释放对象上的锁并阻止当前线程，直到它重新获取该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="49148-505">如果已用指定的超时时间间隔，则线程进入就绪队列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-505">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="49148-506">此方法还指定是否在等待之前退出上下文的同步域（如果在同步上下文中）然后重新获取该同步域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49148-507">如果在指定的时间过期之前重新获取该锁，则为 <see langword="true" />；如果在指定的时间过期之后重新获取该锁，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-507">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="49148-508">此方法只有在重新获取该锁后才会返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-508">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-509">此方法不返回直到它重新排他锁获取上`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="49148-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="49148-510">当前拥有指定的对象上的锁的线程调用此方法以释放该对象，以便另一个线程可以访问它。</span><span class="sxs-lookup"><span data-stu-id="49148-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="49148-511">调用方等待重新获取锁时被阻止。</span><span class="sxs-lookup"><span data-stu-id="49148-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="49148-512">当调用方需要要等待的时间将因另一个线程操作而导致的状态更改时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49148-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="49148-513">超时可确保，当前线程不会阻止无限期地如果另一个线程释放锁，但第一个调用不<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="49148-514">它还移动到就绪的队列，绕过早在等待队列中，其他线程，以便它可以更快地重新获取锁的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="49148-515">该线程可以测试的返回值<xref:System.Threading.Monitor.Wait%2A>方法来确定是否它重新获取之前超时的锁。线程可以评估条件导致它进入等待，并且如果需要调用<xref:System.Threading.Monitor.Wait%2A>再次方法。</span><span class="sxs-lookup"><span data-stu-id="49148-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="49148-516">当线程调用`Wait`，它释放的锁并进入等待队列。</span><span class="sxs-lookup"><span data-stu-id="49148-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="49148-517">此时，准备就绪的队列中的下一步线程 （如果存在） 允许控制的锁。</span><span class="sxs-lookup"><span data-stu-id="49148-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="49148-518">调用的线程`Wait`保留在等待队列中一直持有锁的线程调用<xref:System.Threading.Monitor.PulseAll%2A>，或它是在队列中的下一步并持有锁的线程调用<xref:System.Threading.Monitor.Pulse%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="49148-519">但是，如果`millisecondsTimeout`超时之前另一个线程调用此对象的已用<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法，原始线程将移动到就绪的队列，以便重新获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-520">如果<xref:System.Threading.Timeout.Infinite>为指定`millisecondsTimeout`参数，此方法会无限期阻止除非持有者的锁定调用<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="49148-521">如果`millisecondsTimeout`等于 0，调用线程`Wait`释放的锁，然后立即进入就绪队列以便重新获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="49148-522">调用方执行`Wait`一次，无论的次数<xref:System.Threading.Monitor.Enter%2A>已调用为指定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="49148-523">从概念上讲，`Wait`方法将存储的调用方调用的次数<xref:System.Threading.Monitor.Enter%2A>对象上并调用<xref:System.Threading.Monitor.Exit%2A>足够多的次数，根据需要以完全释放锁定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="49148-524">然后，调用方阻止等待重新获取对象时。</span><span class="sxs-lookup"><span data-stu-id="49148-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="49148-525">当调用方重新获取该锁时，系统会调用<xref:System.Threading.Monitor.Enter%2A>根据需要进行还原保存的多次<xref:System.Threading.Monitor.Enter%2A>对调用方的计数。</span><span class="sxs-lookup"><span data-stu-id="49148-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="49148-526">调用`Wait`释放指定对象的锁; 如果调用方对其他对象的锁的所有者，这些锁也不会释放。</span><span class="sxs-lookup"><span data-stu-id="49148-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-527">同步的对象包含多个引用，其中包括对当前拥有锁定、 到就绪的队列，其中包含准备好获取锁的线程，引用和等待队列，其中包含的引用的线程的引用正在等待的对象的状态的更改通知的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="49148-528"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必须从调用代码的同步块内。</span><span class="sxs-lookup"><span data-stu-id="49148-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="49148-529">备注<xref:System.Threading.Monitor.Pulse%2A>方法说明发生如果<xref:System.Threading.Monitor.Pulse%2A>等待无线程时调用。</span><span class="sxs-lookup"><span data-stu-id="49148-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="49148-530">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="49148-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="49148-531">`exitContext`参数无任何效果，除非<xref:System.Threading.Monitor.Wait%2A>从非默认托管上下文内部调用方法。</span><span class="sxs-lookup"><span data-stu-id="49148-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="49148-532">如果你的线程位于对派生自的类的实例的调用会发生此<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="49148-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="49148-533">即使你当前正在执行一个方法不派生自的类上<xref:System.ContextBoundObject>、 like <xref:System.String>，你可以在非默认上下文是如果<xref:System.ContextBoundObject>位于当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="49148-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="49148-534">你的代码执行时在非默认上下文中，指定`true`为`exitContext`导致线程退出非默认托管的上下文 (即转换到默认上下文) 执行之前<xref:System.Threading.Monitor.Wait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="49148-535">它的调用后将返回到原始的非默认上下文<xref:System.Threading.Monitor.Wait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="49148-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="49148-536">这一点可能很有用，在此上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>应用的属性。</span><span class="sxs-lookup"><span data-stu-id="49148-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="49148-537">在这种情况下，对类的成员的所有调用将自动都同步，并且同步域是类的代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="49148-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="49148-538">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.Monitor.Wait%2A>方法并指定`true`为`exitContext`，在线程退出同步域，允许对象的任何成员的调用来继续在被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="49148-539">当<xref:System.Threading.Monitor.Wait%2A>方法返回时，调用线程必须等待重新进入的同步域。</span><span class="sxs-lookup"><span data-stu-id="49148-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-540">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="49148-541">
            <see langword="Wait" /> 不是从同步的代码块中调用的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-541">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="49148-542">调用 <see langword="Wait" /> 的线程稍后从等待状态中断。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="49148-543">另一线程调用此线程的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法时将发生这种情况。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="49148-544">
            <paramref name="millisecondsTimeout" /> 参数值为负且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="49148-545">要在其上等待的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-545">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="49148-546">
            <see cref="T:System.TimeSpan" />，表示线程进入就绪队列之前等待的时间量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="49148-547">如果在等待前退出并重新获取上下文的同步域（如果在同步上下文中），则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-547">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49148-548">释放对象上的锁并阻止当前线程，直到它重新获取该锁。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="49148-549">如果已用指定的超时时间间隔，则线程进入就绪队列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-549">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="49148-550">可以在等待之前退出同步上下文的同步域，随后重新获取该域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49148-551">如果在指定的时间过期之前重新获取该锁，则为 <see langword="true" />；如果在指定的时间过期之后重新获取该锁，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-551">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="49148-552">此方法只有在重新获取该锁后才会返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-552">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49148-553">此方法不返回直到它重新排他锁获取上`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="49148-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="49148-554">当前拥有指定的对象上的锁的线程调用此方法以释放该对象，以便另一个线程可以访问它。</span><span class="sxs-lookup"><span data-stu-id="49148-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="49148-555">调用方等待重新获取锁时被阻止。</span><span class="sxs-lookup"><span data-stu-id="49148-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="49148-556">当调用方需要要等待的时间将因另一个线程操作而导致的状态更改时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="49148-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="49148-557">超时可确保，当前线程不会阻止无限期地如果另一个线程释放锁，但第一个调用不<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="49148-558">它还移动到就绪的队列，绕过早在等待队列中，其他线程，以便它可以更快地重新获取锁的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="49148-559">该线程可以测试的返回值<xref:System.Threading.Monitor.Wait%2A>方法来确定是否它重新获取之前超时的锁。线程可以评估条件导致它进入等待，并且如果需要调用<xref:System.Threading.Monitor.Wait%2A>再次方法。</span><span class="sxs-lookup"><span data-stu-id="49148-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="49148-560">当线程调用`Wait`，它释放的锁并进入等待队列。</span><span class="sxs-lookup"><span data-stu-id="49148-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="49148-561">此时，准备就绪的队列中的下一步线程 （如果存在） 允许控制的锁。</span><span class="sxs-lookup"><span data-stu-id="49148-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="49148-562">调用的线程`Wait`保留在等待队列中一直持有锁的线程调用<xref:System.Threading.Monitor.PulseAll%2A>，或它是在队列中的下一步并持有锁的线程调用<xref:System.Threading.Monitor.Pulse%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="49148-563">但是，如果`timeout`另一个线程调用此对象的经过毫秒<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法，原始线程将移动到就绪的队列，以便重新获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-564">如果<xref:System.TimeSpan>表示-1 毫秒指定`timeout`参数，此方法会无限期阻止除非持有者的锁定调用<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="49148-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="49148-565">如果`timeout`为 0 毫秒，调用线程`Wait`释放的锁，然后立即进入就绪队列以便重新获取锁。</span><span class="sxs-lookup"><span data-stu-id="49148-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="49148-566">调用方执行`Wait`一次，无论的次数<xref:System.Threading.Monitor.Enter%2A>已调用为指定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="49148-567">从概念上讲，`Wait`方法将存储的调用方调用的次数<xref:System.Threading.Monitor.Enter%2A>对象上并调用<xref:System.Threading.Monitor.Exit%2A>足够多的次数，根据需要以完全释放锁定的对象。</span><span class="sxs-lookup"><span data-stu-id="49148-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="49148-568">然后，调用方阻止等待重新获取对象时。</span><span class="sxs-lookup"><span data-stu-id="49148-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="49148-569">当调用方重新获取该锁时，系统会调用<xref:System.Threading.Monitor.Enter%2A>根据需要进行还原保存的多次<xref:System.Threading.Monitor.Enter%2A>对调用方的计数。</span><span class="sxs-lookup"><span data-stu-id="49148-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="49148-570">调用`Wait`释放指定对象的锁; 如果调用方对其他对象的锁的所有者，这些锁也不会释放。</span><span class="sxs-lookup"><span data-stu-id="49148-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49148-571">同步的对象包含多个引用，其中包括对当前拥有锁定、 到就绪的队列，其中包含准备好获取锁的线程，引用和等待队列，其中包含的引用的线程的引用正在等待的对象的状态的更改通知的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="49148-572"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必须从调用代码的同步块内。</span><span class="sxs-lookup"><span data-stu-id="49148-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="49148-573">备注<xref:System.Threading.Monitor.Pulse%2A>方法说明发生如果<xref:System.Threading.Monitor.Pulse%2A>等待无线程时调用。</span><span class="sxs-lookup"><span data-stu-id="49148-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="49148-574">在退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="49148-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="49148-575">`exitContext`参数无任何效果，除非<xref:System.Threading.Monitor.Wait%2A>从非默认托管上下文内部调用方法。</span><span class="sxs-lookup"><span data-stu-id="49148-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="49148-576">如果你的线程位于对派生自的类的实例的调用会发生此<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="49148-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="49148-577">即使你当前正在执行一个方法不派生自的类上<xref:System.ContextBoundObject>、 like <xref:System.String>，你可以在非默认上下文是如果<xref:System.ContextBoundObject>位于当前的应用程序域中的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="49148-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="49148-578">你的代码执行时在非默认上下文中，指定`true`为`exitContext`导致线程退出非默认托管的上下文 (即转换到默认上下文) 执行之前<xref:System.Threading.Monitor.Wait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="49148-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="49148-579">它的调用后将返回到原始的非默认上下文<xref:System.Threading.Monitor.Wait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="49148-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="49148-580">这一点可能很有用，在此上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>应用的属性。</span><span class="sxs-lookup"><span data-stu-id="49148-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="49148-581">在这种情况下，对类的成员的所有调用将自动都同步，并且同步域是类的代码的整个正文。</span><span class="sxs-lookup"><span data-stu-id="49148-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="49148-582">如果某个成员的调用堆栈中的代码将调用<xref:System.Threading.Monitor.Wait%2A>方法并指定`true`为`exitContext`，在线程退出同步域，允许对象的任何成员的调用来继续在被阻止的线程。</span><span class="sxs-lookup"><span data-stu-id="49148-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="49148-583">当<xref:System.Threading.Monitor.Wait%2A>方法返回时，调用线程必须等待重新进入的同步域。</span><span class="sxs-lookup"><span data-stu-id="49148-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49148-584">
            <paramref name="obj" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="49148-585">
            <see langword="Wait" /> 不是从同步的代码块中调用的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-585">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="49148-586">调用 Wait 的线程稍后会从等待状态中中断。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-586">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="49148-587">另一线程调用此线程的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法时将发生这种情况。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="49148-588">
            <paramref name="timeout" /> 参数为负数，并且不表示 <see cref="F:System.Threading.Timeout.Infinite" />（-1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="49148-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>