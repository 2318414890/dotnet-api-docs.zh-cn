<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="589fcf34edfc4ff1eb1c243acad8b5ad0d3cd911" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530941" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>限制可同时访问某一资源或资源池的线程数。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Threading.Semaphore>类来控制对资源的池的访问。 线程进入信号量，通过调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法，继承自<xref:System.Threading.WaitHandle>类，并通过调用释放信号量<xref:System.Threading.Semaphore.Release%2A>方法。  
  
 上一个信号量计数会递减每当一个线程进入信号量，和一个线程释放信号量时，会增加的时。 当计数为零时，其他线程释放信号量一直进行阻止后续请求。 如果所有线程都已都释放信号量，计数是最大值时指定创建信号量。  
  
 没有任何有保证的顺序，如先进先出或后进先出，在其中受阻的线程进入信号量。  
  
 线程可以输入信号量多次，通过调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法重复。 若要释放某些或所有这些项，可以调用线程的无参数<xref:System.Threading.Semaphore.Release>多个倍，或它可以调用的方法重载<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载来指定要释放的项数。  
  
 <xref:System.Threading.Semaphore>类不会强制在调用线程标识<xref:System.Threading.WaitHandle.WaitOne%2A>或<xref:System.Threading.Semaphore.Release%2A>。 它是程序员有责任确保线程不要释放信号量次数过多。 例如，假定信号量的最大计数为 2 并且线程 A 和线程 B 都进入了该信号量。 如果线程 B 中的编程错误导致它调用<xref:System.Threading.Semaphore.Release%2A>两次，这两个调用成功。 信号灯计数已满，当线程 A 最终调用 <xref:System.Threading.Semaphore.Release%2A> 时，<xref:System.Threading.SemaphoreFullException> 抛出。  
  
 信号量有两种类型： 本地信号量和已命名的系统信号量。 如果你创建<xref:System.Threading.Semaphore>对象使用构造函数接受一个名称，它是与该名称的操作系统信号关联。 已命名的系统信号量可以看到在整个操作系统，也可用于同步进程的活动。 你可以创建多个<xref:System.Threading.Semaphore>对象来表示同一个已命名系统信号量，并且你可以使用<xref:System.Threading.Semaphore.OpenExisting%2A>方法以打开一个现有的命名系统信号量。  
  
 仅在你的进程内存在本地信号量。 进程中引用本地 <xref:System.Threading.Semaphore> 对象的所有线程都可以使用本地 mutex。 每个<xref:System.Threading.Semaphore>对象是单独的本地信号量。  
  
   
  
## Examples  
 下面的代码示例创建与最大计数为三个和初始计数为零的信号量。 该示例启动五个线程，阻止等待信号量。 主线程使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载来增加到其最大值，允许三个线程进入信号量的信号量计数。 每个线程使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法等待 1 秒，以模拟工作，然后调用<xref:System.Threading.Semaphore.Release>方法重载来释放信号量。 释放信号量时，每个时间显示前一个信号量计数。 控制台消息跟踪信号量的使用。 模拟的工作间隔都稍有增加为每个线程，以使输出更易于阅读。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型是线程安全的。</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
        <param name="maximumCount">可以同时授予的信号量的最大请求数。</param>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化未命名信号量。 使用此类的信号量的实例的所有线程必须都具有对该实例引用。  
  
 如果`initialCount`是小于`maximumCount`，效果都是相同就像调用当前线程一样<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`减`initialCount`) 时间。 如果您不想要保留任何项创建信号量的线程，使用的相同号`maximumCount`和`initialCount`。  
  
   
  
## Examples  
 下面的示例创建三个的最大计数和初始计数为零的信号量。 该示例启动五个线程，阻止等待信号量。 主线程使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载来增加到其最大值，允许三个线程进入信号量的信号量计数。 每个线程使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法等待 1 秒，以模拟工作，然后调用<xref:System.Threading.Semaphore.Release>方法重载来释放信号量。 释放信号量时，每个时间显示前一个信号量计数。 控制台消息跟踪信号量的使用。 模拟的工作间隔都稍有增加为每个线程，以使输出更易于阅读。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> 小于 1。  
  
 或  
  
 <paramref name="initialCount" /> 小于 0。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
        <param name="maximumCount">可以同时授予的信号量的最大请求数。</param>
        <param name="name">命名系统信号量对象的名称。</param>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数，可以选择指定系统信号量对象的名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Threading.Semaphore>表示已命名的系统信号量的对象。 你可以创建多个<xref:System.Threading.Semaphore>对象来表示同一个已命名系统信号量。  
  
 如果已命名的系统信号量不存在，则使用创建它的初始计数和指定的最大计数`initialCount`和`maximumCount`。 如果已命名的系统信号量已存在，`initialCount`和`maximumCount`不使用名称，尽管无效的值仍会导致异常。 如果你需要确定是否已创建了命名的系统信号量，使用<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29>构造函数重载。  
  
> [!IMPORTANT]
>  当你使用此构造函数重载时，建议的做法是指定的相同号`initialCount`和`maximumCount`。 如果`initialCount`是小于`maximumCount`，并创建了命名的系统信号量，效果都是相同就像调用当前线程一样<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`减`initialCount`) 时间。 但是，使用此构造函数重载没有方法来确定是否已创建了命名的系统信号量。  
  
 如果指定`null`或为空字符串`name`，创建了本地信号量时，就像已调用<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>构造函数重载。  
  
 因为命名信号量是在整个操作系统可见的它们可以用于协调跨进程边界的资源使用。  
  
 如果你想要查找已命名的系统信号量是否存在，请使用<xref:System.Threading.Semaphore.OpenExisting%2A>方法。 <xref:System.Threading.Semaphore.OpenExisting%2A>方法尝试打开现有的已命名信号量，并在引发异常，如果不存在的系统信号量。  
  
   
  
## Examples  
 下面的代码示例演示了命名信号量的跨进程行为。 该示例创建具有五个的最大计数和五个初始计数命名信号量。 程序调用三<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 因此，如果从两个命令窗口中运行已编译的示例，则第二个副本将阻止在第三个调用<xref:System.Threading.WaitHandle.WaitOne%2A>。 释放第一个计划，以便取消阻止第二个副本中的一个或多个条目。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。  
  
 或  
  
 <paramref name="name" /> 超过 260 个字符。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> 小于 1。  
  
 或  
  
 <paramref name="initialCount" /> 小于 0。</exception>
        <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">命名信号量存在且具有访问控制安全性，用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名信号量，可能是由于其他类型的等待句柄具有相同名称。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用非托管的代码来创建已命名的系统信号量。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。  
  
 安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount">可以同时满足的信号量的初始请求数。</param>
        <param name="maximumCount">可以同时满足的信号量的最大请求数。</param>
        <param name="name">命名系统信号量对象的名称。</param>
        <param name="createdNew">在此方法返回时，如果创建了本地信号量（即，如果 <c>name</c> 为 <see langword="null" /> 或空字符串）或指定的已命名系统信号量，则包含 <see langword="true" />；如果指定的已命名系统信号量已存在，则为 <see langword="false" />。 此参数未经初始化即被传递。</param>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数，还可以选择指定系统信号量对象的名称，以及指定一个变量来接收指示是否创建了新系统信号量的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Threading.Semaphore>表示已命名的系统信号量的对象。 你可以创建多个<xref:System.Threading.Semaphore>对象来表示同一个已命名系统信号量。  
  
 如果已命名的系统信号量不存在，则使用创建它的初始计数和指定的最大计数`initialCount`和`maximumCount`。 如果已命名的系统信号量已存在，`initialCount`和`maximumCount`不使用名称，尽管无效的值仍会导致异常。 使用`createdNew`来确定是否已创建的系统信号量。  
  
 如果`initialCount`是小于`maximumCount`，和`createdNew`是`true`，效果都是相同就像调用当前线程一样<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`减`initialCount`) 时间。  
  
 如果指定`null`或为空字符串`name`，创建了本地信号量时，就像已调用<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>构造函数重载。 在这种情况下，`createdNew`始终`true`。  
  
 因为命名信号量是在整个操作系统可见的它们可以用于协调跨进程边界的资源使用。  
  
   
  
## Examples  
 下面的代码示例演示了命名信号量的跨进程行为。 该示例创建一个最大计数为 5、 初始计数为两个名称为信号量。 也就是说，它保留线程的调用构造函数的三个条目。 如果`createNew`是`false`，程序调用三<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 因此，如果从两个命令窗口中运行已编译的示例，则第二个副本将阻止在第三个调用<xref:System.Threading.WaitHandle.WaitOne%2A>。 释放第一个计划，以便取消阻止第二个副本中的一个或多个条目。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。  
  
 或  
  
 <paramref name="name" /> 超过 260 个字符。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> 小于 1。  
  
 或  
  
 <paramref name="initialCount" /> 小于 0。</exception>
        <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">命名信号量存在且具有访问控制安全性，用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名信号量，可能是由于其他类型的等待句柄具有相同名称。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用非托管的代码来创建已命名的系统信号量。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。  
  
 安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="initialCount">可以同时满足的信号量的初始请求数。</param>
        <param name="maximumCount">可以同时满足的信号量的最大请求数。</param>
        <param name="name">命名系统信号量对象的名称。</param>
        <param name="createdNew">在此方法返回时，如果创建了本地信号量（即，如果 <c>name</c> 为 <see langword="null" /> 或空字符串）或指定的已命名系统信号量，则包含 <see langword="true" />；如果指定的已命名系统信号量已存在，则为 <see langword="false" />。 此参数未经初始化即被传递。</param>
        <param name="semaphoreSecurity">一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示应用于已命名的系统信号量的访问控制安全性。</param>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数，可以选择指定系统信号量对象的名称，指定一个变量来接收指示是否创建了新系统信号量的值，以及指定系统信号量的安全访问控制。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数应用于已命名的系统信号量的访问控制安全性，创建时，阻止其他代码的信号量的控制。  
  
 此构造函数初始化<xref:System.Threading.Semaphore>表示已命名的系统信号量的对象。 你可以创建多个<xref:System.Threading.Semaphore>对象来表示同一个已命名系统信号量。  
  
 如果已命名的系统信号量不存在，它被创建具有指定的访问控制安全性。 如果存在名称为信号量，则忽略指定的访问控制安全性。  
  
> [!NOTE]
>  调用方具有对新创建的完全控制<xref:System.Threading.Semaphore>对象即使`semaphoreSecurity`拒绝或无法授予当前用户某些访问权限。 但是，如果当前的用户尝试获取另一个<xref:System.Threading.Semaphore>对象来表示同一命名信号量，使用构造函数或<xref:System.Threading.Semaphore.OpenExisting%2A>方法，Windows 应用访问控制安全性。  
  
 如果已命名的系统信号量不存在，则使用创建它的初始计数和指定的最大计数`initialCount`和`maximumCount`。 如果已命名的系统信号量已存在，`initialCount`和`maximumCount`不使用名称，尽管无效的值仍会导致异常。 使用`createdNew`参数来确定的系统信号量由此构造函数。  
  
 如果`initialCount`是小于`maximumCount`，和`createdNew`是`true`，效果都是相同就像调用当前线程一样<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`减`initialCount`) 时间。  
  
 如果指定`null`或为空字符串`name`，创建了本地信号量时，就像已调用<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>构造函数重载。 在这种情况下，`createdNew`始终`true`。  
  
 因为命名信号量是在整个操作系统可见的它们可以用于协调跨进程边界的资源使用。  
  
   
  
## Examples  
 下面的代码示例演示具有访问控制安全性的跨进程行为的名称为信号量。 该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。 如果不存在信号量，创建与最大计数为 2 和将拒绝使用信号量的权限的当前用户，但授予的权限读取和更改权限信号量的访问控制安全性。 如果从两个命令窗口中运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。 捕获了异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载，以读取和更改的权限所需的权限打开信号量。  
  
 更改权限后，输入并释放所需的权限打开信号量。 如果从第三个命令窗口中运行已编译的示例，它将运行使用新的权限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。  
  
 或  
  
 <paramref name="name" /> 超过 260 个字符。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> 小于 1。  
  
 或  
  
 <paramref name="initialCount" /> 小于 0。</exception>
        <exception cref="T:System.UnauthorizedAccessException">命名信号量存在且具有访问控制安全性，用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
        <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名信号量，可能是由于其他类型的等待句柄具有相同名称。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用非托管的代码来创建已命名的系统信号量。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。 安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取已命名的系统信号量的访问控制安全性。</summary>
        <returns>一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示已命名系统信号量的访问控制安全性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Semaphore.GetAccessControl%2A>方法使用以下标志 （使用按位或运算组合） 的组合来搜索权限： <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>， <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>，和<xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>。  
  
 用户必须具有<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType>权限才能调用此方法，而且信号量必须使用打开<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType>权限。  
  
 在本地信号量，访问控制安全性是不相关。 如果<xref:System.Threading.Semaphore>对象不表示已命名的系统信号量，此方法返回<xref:System.Security.AccessControl.SemaphoreSecurity>授予任何用户对所有权限的对象。  
  
   
  
## Examples  
 下面的代码示例演示具有访问控制安全性的跨进程行为的名称为信号量。 该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。  
  
 如果不存在信号量，创建与最大计数为 2 和拒绝当前用户的权限使用信号量，但授予的权限读取和更改权限信号量的访问控制安全性。  
  
 如果从两个命令窗口中运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。 捕获了异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载，以读取和更改的权限所需的权限打开信号量。 使用获取的系统信号量的访问控制安全性<xref:System.Threading.Semaphore.GetAccessControl%2A>方法。  
  
 更改权限后，输入并释放所需的权限打开信号量。 如果从第三个命令窗口中运行已编译的示例，它将运行使用新的权限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">当前的 <see cref="T:System.Threading.Semaphore" /> 对象表示已命名的系统信号灯，且用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 权限。  
  
 或  
  
 当前的 <see cref="T:System.Threading.Semaphore" /> 对象表示已命名的系统信号灯，且 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 权限不开放。</exception>
        <exception cref="T:System.NotSupportedException">不支持 Windows 98 或 Windows Millennium Edition。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开指定名称为信号量（如果已经存在）。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要打开的系统信号量的名称。</param>
        <summary>打开指定名称为信号量（如果已经存在）。</summary>
        <returns>一个对象，表示已命名的系统信号量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Semaphore.OpenExisting%2A>方法尝试打开指定的命名信号量。 如果不存在的系统信号量，此方法将引发异常而不是创建的系统信号量。 若要创建的系统信号量时不存在，请使用之一<xref:System.Threading.Semaphore.%23ctor%2A>构造函数具有`name`参数。  
  
 多次调用此方法使用相同的值的`name`不一定返回相同<xref:System.Threading.Semaphore>对象，即使返回表示的对象相同的命名系统信号量。  
  
 此方法重载是等效于调用<xref:System.Threading.Semaphore.OpenExisting%2A>方法重载并指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>和<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限，使用按位或运算组合在一起。  
  
 指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>标志将允许线程进入信号量，并指定<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>标志将允许线程调用<xref:System.Threading.Semaphore.Release%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示具有访问控制安全性的跨进程行为的名称为信号量。 该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。  
  
 如果不存在信号量，创建与最大计数为 2 和访问控制安全性，拒绝当前用户的权限使用信号量，但该权限授予的权限读取和更改信号量的权限。  
  
 如果从两个命令窗口中运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载。 捕获了异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载，以读取和更改的权限所需的权限打开信号量。  
  
 更改权限后，输入并释放它所需的权限打开信号量。 如果从第三个命令窗口中运行已编译的示例，它将运行使用新的权限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 是一个空字符串。  
  
 或  
  
 <paramref name="name" /> 超过 260 个字符。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">命名的信号量不存在。</exception>
        <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存在该命名信号量，但用户没有使用它时所需的安全访问权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用非托管的代码，以打开一个已命名的系统信号量。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。  
  
 安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
      </Parameters>
      <Docs>
        <param name="name">要打开的系统信号量的名称。</param>
        <param name="rights">表示所需的安全访问权限的枚举值的按位组合。</param>
        <summary>用安全访问权限打开指定名称为信号量（如果已经存在）。</summary>
        <returns>一个对象，表示已命名的系统信号量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `rights`参数必须包含<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>标志以允许线程进入信号量，与<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>标志以允许线程调用<xref:System.Threading.Semaphore.Release%2A>方法。  
  
 <xref:System.Threading.Semaphore.OpenExisting%2A>方法尝试打开现有的已命名信号量。 如果不存在的系统信号量，此方法将引发异常而不是创建的系统信号量。 若要创建的系统信号量时不存在，请使用之一<xref:System.Threading.Semaphore.%23ctor%2A>构造函数具有`name`参数。  
  
 多次调用此方法使用相同的值的`name`不一定返回相同<xref:System.Threading.Semaphore>对象，即使返回表示的对象相同的命名系统信号量。  
  
   
  
## Examples  
 下面的代码示例演示具有访问控制安全性的跨进程行为的名称为信号量。 该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。  
  
 如果不存在信号量，创建与最大计数为 2 和拒绝当前用户的权限使用信号量，但授予的权限读取和更改权限信号量的访问控制安全性。  
  
 如果从两个命令窗口中运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。 捕获了异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载，以读取和更改的权限所需的权限打开信号量。  
  
 更改权限后，输入并释放它所需的权限打开信号量。 如果从第三个命令窗口中运行已编译的示例，它将运行使用新的权限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 是一个空字符串。  
  
 或  
  
 <paramref name="name" /> 超过 260 个字符。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">命名的信号量不存在。</exception>
        <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">已命名的信号量存在，但用户不具备所需的安全访问权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用非托管的代码来创建已命名的系统信号量。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。  
  
 安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>退出信号量。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>退出信号量并返回前一个计数。</summary>
        <returns>调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 线程通常使用<xref:System.Threading.WaitHandle.WaitOne%2A>方法进入信号量，并且它们通常使用此方法重载退出。  
  
 如果<xref:System.Threading.SemaphoreFullException>由引发<xref:System.Threading.Semaphore.Release%2A>方法，它不一定表示调用线程问题。 另一个线程中的编程错误可能导致该线程退出详细的时间比输入信号量。  
  
 如果当前<xref:System.Threading.Semaphore>对象表示已命名的系统信号量，则用户必须具有<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限而且信号量必须打开与<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限。  
  
   
  
## Examples  
 下面的代码示例创建与最大计数为三个和初始计数为零的信号量。 该示例启动五个线程，阻止等待信号量。 主线程使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载来增加到其最大值，允许三个线程进入信号量的信号量计数。 每个线程使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法等待 1 秒，以模拟工作，然后调用<xref:System.Threading.Semaphore.Release>方法重载来释放信号量。  
  
 释放信号量时，每个时间显示前一个信号量计数。 控制台消息跟踪信号量的使用。 模拟的工作间隔都稍有增加为每个线程，以使输出更易于阅读。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException">信号量计数已是最大值。</exception>
        <exception cref="T:System.IO.IOException">发生已命名信号量的 Win32 错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">当前信号量表示一个已命名的系统信号量，但用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />。  
  
 或  
  
 当前信号量表示一个已命名的系统信号量，但它未用 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 打开。</exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">退出信号量的次数。</param>
        <summary>以指定的次数退出信号量并返回前一个计数。</summary>
        <returns>调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果线程已进入信号量多次，此方法重载将允许要还原的一个调用的整个信号量计数。  
  
 如果<xref:System.Threading.SemaphoreFullException>由引发<xref:System.Threading.Semaphore.Release%2A>方法，它不一定表示调用线程问题。 另一个线程中的编程错误可能导致该线程退出详细的时间比输入信号量。  
  
 如果当前<xref:System.Threading.Semaphore>对象表示已命名的系统信号量，则用户必须具有<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限而且信号量必须打开与<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限。  
  
   
  
## Examples  
 下面的代码示例创建与最大计数为三个和初始计数为零的信号量。 该示例启动五个线程，阻止等待信号量。 主线程使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载来增加到其最大值，允许三个线程进入信号量的信号量计数。 每个线程使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法等待 1 秒，以模拟工作，然后调用<xref:System.Threading.Semaphore.Release>方法重载来释放信号量。  
  
 释放信号量时，每个时间显示前一个信号量计数。 控制台消息跟踪信号量的使用。 模拟的工作间隔都稍有增加为每个线程，以使输出更易于阅读。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="releaseCount" /> 小于 1。</exception>
        <exception cref="T:System.Threading.SemaphoreFullException">信号量计数已是最大值。</exception>
        <exception cref="T:System.IO.IOException">发生已命名信号量的 Win32 错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">当前信号量表示一个已命名的系统信号量，但用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限。  
  
 或  
  
 当前信号量表示一个已命名的系统信号量，但它不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限打开的。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity">一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示应用于已命名的系统信号量的访问控制安全性。</param>
        <summary>设置已命名的系统信号量的访问控制安全性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以仅在上设置访问控制安全性<xref:System.Threading.Semaphore>表示已命名的系统信号量的对象。  
  
 用户必须具有<xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType>权限才能调用此方法，而且信号量必须使用打开<xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType>权限。  
  
   
  
## Examples  
 下面的代码示例演示具有访问控制安全性的跨进程行为的名称为信号量。 该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。  
  
 如果不存在信号量，创建与最大计数为 2 和将拒绝使用信号量的权限的当前用户，但授予的权限读取和更改权限信号量的访问控制安全性。  
  
 如果从两个命令窗口中运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。 捕获了异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载，以读取和更改的权限所需的权限打开信号量。  
  
 更改的权限，使用后<xref:System.Threading.Semaphore.SetAccessControl%2A>方法，信号量打开输入并释放所需的权限。 如果从第三个命令窗口中运行已编译的示例，它将运行使用新的权限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="semaphoreSecurity" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.UnauthorizedAccessException">用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 权限。  
  
 或  
  
 信号量不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 权限打开的。</exception>
        <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.Threading.Semaphore" /> 对象不表示已命名的系统信号量。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开指定名称为信号量（如果已经存在)，并返回指示操作是否成功的值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">要打开的系统信号量的名称。</param>
        <param name="result">当此方法返回时，如果调用成功，则包含表示命名信号的 <see cref="T:System.Threading.Semaphore" /> 对象；否则为 <see langword="null" />。 该参数未经初始化即被处理。</param>
        <summary>打开指定名称为信号量（如果已经存在），并返回指示操作是否成功的值。</summary>
        <returns>
          如果命名信号量成功打开，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不存在名称为信号量，此方法不创建它。 若要创建的系统信号量时不存在，请使用之一<xref:System.Threading.Semaphore.%23ctor%2A>构造函数具有`name`参数。  
  
 如果你不确定是否存在名称为信号量，请使用而不是此方法重载<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载，信号量不存在时引发异常。  
  
 此方法重载是等效于调用<xref:System.Threading.Semaphore.TryOpenExisting%2A>方法重载并指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>和<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限，使用按位或运算组合在一起。 指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>标志将允许线程进入信号量，并指定<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>标志将允许线程调用<xref:System.Threading.Semaphore.Release%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 是一个空字符串。  
  
 或  
  
 <paramref name="name" /> 超过 260 个字符。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存在该命名信号量，但用户没有使用它时所需的安全访问权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">要打开的系统信号量的名称。</param>
        <param name="rights">表示所需的安全访问权限的枚举值的按位组合。</param>
        <param name="result">当此方法返回时，如果调用成功，则包含表示命名信号的 <see cref="T:System.Threading.Semaphore" /> 对象；否则为 <see langword="null" />。 该参数未经初始化即被处理。</param>
        <summary>用安全访问权限打开指定名称为信号量（如果已经存在），并返回指示操作是否成功的值。</summary>
        <returns>
          如果命名信号量成功打开，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不存在名称为信号量，此方法不创建它。 若要创建的系统信号量时不存在，请使用之一<xref:System.Threading.Semaphore.%23ctor%2A>构造函数具有`name`参数。  
  
 如果你不确定是否存在名称为信号量，请使用而不是此方法重载<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载，信号量不存在时引发异常。  
  
 `rights`参数必须包含<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>标志以允许线程进入信号量，与<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>标志以允许线程调用<xref:System.Threading.Semaphore.Release%2A>方法。  
  
 多次调用此方法使用相同的值的`name`不一定返回相同<xref:System.Threading.Semaphore>对象，即使返回表示的对象相同的命名系统信号量。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 是一个空字符串。  
  
 或  
  
 <paramref name="name" /> 超过 260 个字符。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">存在该命名信号量，但用户没有使用它时所需的安全访问权限。</exception>
      </Docs>
    </Member>
  </Members>
</Type>