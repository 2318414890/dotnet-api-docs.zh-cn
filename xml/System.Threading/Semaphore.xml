<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="341a2bbc0c3988004ab57f93d5e715cb713edbe1" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48748918" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Semaphore = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="322e9-101">限制可同时访问某一资源或资源池的线程数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="322e9-101">Limits the number of threads that can access a resource or pool of resources concurrently.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-102">使用<xref:System.Threading.Semaphore>类来控制访问的资源池。</span><span class="sxs-lookup"><span data-stu-id="322e9-102">Use the <xref:System.Threading.Semaphore> class to control access to a pool of resources.</span></span> <span data-ttu-id="322e9-103">线程通过调用进入信号量<xref:System.Threading.WaitHandle.WaitOne%2A>方法，它继承自<xref:System.Threading.WaitHandle>类，并通过调用释放信号量<xref:System.Threading.Semaphore.Release%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-103">Threads enter the semaphore by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method, which is inherited from the <xref:System.Threading.WaitHandle> class, and release the semaphore by calling the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="322e9-104">上一个信号量计数将减少每次一个线程进入信号量，并递增时线程释放信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-104">The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore.</span></span> <span data-ttu-id="322e9-105">当计数为零时，后续请求阻止，直到其他线程释放信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-105">When the count is zero, subsequent requests block until other threads release the semaphore.</span></span> <span data-ttu-id="322e9-106">如果所有线程都已都释放信号量，计数是最大值时指定创建信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-106">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span>  
  
 <span data-ttu-id="322e9-107">没有任何有保证的顺序，如先进先出或后进先出，在其中被阻止的线程进入信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-107">There is no guaranteed order, such as FIFO or LIFO, in which blocked threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="322e9-108">一个线程可以进入信号量多次，通过调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法重复。</span><span class="sxs-lookup"><span data-stu-id="322e9-108">A thread can enter the semaphore multiple times, by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method repeatedly.</span></span> <span data-ttu-id="322e9-109">若要释放的部分或所有这些项，线程可以调用无参数<xref:System.Threading.Semaphore.Release>多个倍，或它可以调用的方法重载<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载，指定要发布的条目数。</span><span class="sxs-lookup"><span data-stu-id="322e9-109">To release some or all of these entries, the thread can call the parameterless <xref:System.Threading.Semaphore.Release> method overload multiple times, or it can call the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload that specifies the number of entries to be released.</span></span>  
  
 <span data-ttu-id="322e9-110"><xref:System.Threading.Semaphore>类不会强制线程标识在调用<xref:System.Threading.WaitHandle.WaitOne%2A>或<xref:System.Threading.Semaphore.Release%2A>。</span><span class="sxs-lookup"><span data-stu-id="322e9-110">The <xref:System.Threading.Semaphore> class does not enforce thread identity on calls to <xref:System.Threading.WaitHandle.WaitOne%2A> or <xref:System.Threading.Semaphore.Release%2A>.</span></span> <span data-ttu-id="322e9-111">它是程序员有责任确保线程不释放信号量次数过多。</span><span class="sxs-lookup"><span data-stu-id="322e9-111">It is the programmer's responsibility to ensure that threads do not release the semaphore too many times.</span></span> <span data-ttu-id="322e9-112">例如，假定信号量的最大计数为 2 并且线程 A 和线程 B 都进入了该信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-112">For example, suppose a semaphore has a maximum count of two, and that thread A and thread B both enter the semaphore.</span></span> <span data-ttu-id="322e9-113">如果线程 B 中的编程错误后，即可调用<xref:System.Threading.Semaphore.Release%2A>两次，这两个调用会成功。</span><span class="sxs-lookup"><span data-stu-id="322e9-113">If a programming error in thread B causes it to call <xref:System.Threading.Semaphore.Release%2A> twice, both calls succeed.</span></span> <span data-ttu-id="322e9-114">信号灯计数已满，当线程 A 最终调用 <xref:System.Threading.Semaphore.Release%2A> 时，<xref:System.Threading.SemaphoreFullException> 抛出。</span><span class="sxs-lookup"><span data-stu-id="322e9-114">The count on the semaphore is full, and when thread A eventually calls <xref:System.Threading.Semaphore.Release%2A>, a <xref:System.Threading.SemaphoreFullException> is thrown.</span></span>  
  
 <span data-ttu-id="322e9-115">信号量有两种类型： 本地信号量和已命名的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-115">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="322e9-116">如果您创建<xref:System.Threading.Semaphore>对象使用构造函数接受一个名称，它是与该名称的操作系统的信号量关联。</span><span class="sxs-lookup"><span data-stu-id="322e9-116">If you create a <xref:System.Threading.Semaphore> object using a constructor that accepts a name, it is associated with an operating-system semaphore of that name.</span></span> <span data-ttu-id="322e9-117">已命名的系统信号量是整个操作系统，可见和可用于同步进程的活动。</span><span class="sxs-lookup"><span data-stu-id="322e9-117">Named system semaphores are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="322e9-118">你可以创建多个<xref:System.Threading.Semaphore>对象表示同一命名系统信号量，并且可以使用<xref:System.Threading.Semaphore.OpenExisting%2A>方法打开现有的命名系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-118">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore, and you can use the <xref:System.Threading.Semaphore.OpenExisting%2A> method to open an existing named system semaphore.</span></span>  
  
 <span data-ttu-id="322e9-119">本地信号量存在仅在您的进程。</span><span class="sxs-lookup"><span data-stu-id="322e9-119">A local semaphore exists only within your process.</span></span> <span data-ttu-id="322e9-120">进程中引用本地 <xref:System.Threading.Semaphore> 对象的所有线程都可以使用本地 mutex。</span><span class="sxs-lookup"><span data-stu-id="322e9-120">It can be used by any thread in your process that has a reference to the local <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="322e9-121">每个<xref:System.Threading.Semaphore>对象是单独的本地信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-121">Each <xref:System.Threading.Semaphore> object is a separate local semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-122">下面的代码示例创建具有三个最大计数和初始计数为零的信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-122">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="322e9-123">该示例启动五个线程，阻止等待信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-123">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="322e9-124">主线程使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载来增加到其最大值，从而允许三个线程进入信号量的信号量计数。</span><span class="sxs-lookup"><span data-stu-id="322e9-124">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="322e9-125">每个线程使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法以等待 1 秒，以模拟工作，然后调用<xref:System.Threading.Semaphore.Release>方法重载来释放信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-125">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="322e9-126">释放信号量时，每个时间显示前一个信号量计数。</span><span class="sxs-lookup"><span data-stu-id="322e9-126">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="322e9-127">控制台消息跟踪信号量的使用。</span><span class="sxs-lookup"><span data-stu-id="322e9-127">Console messages track semaphore use.</span></span> <span data-ttu-id="322e9-128">模拟的工作时间间隔都稍有增加，为每个线程，以使输出更易于阅读。</span><span class="sxs-lookup"><span data-stu-id="322e9-128">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="322e9-129">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="322e9-129">This type is thread safe.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md">
      <span data-ttu-id="322e9-130">托管线程处理</span>
      <span class="sxs-lookup">
        <span data-stu-id="322e9-130">Managed Threading</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
      <span data-ttu-id="322e9-131">Semaphore</span>
      <span class="sxs-lookup">
        <span data-stu-id="322e9-131">Semaphore</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="322e9-132">初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-132">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="322e9-133">可以同时授予的信号量的初始请求数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-133">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="322e9-134">可以同时授予的信号量的最大请求数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-134">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-135">初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-135">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-136">此构造函数初始化未命名的信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-136">This constructor initializes an unnamed semaphore.</span></span> <span data-ttu-id="322e9-137">使用此类的信号量的实例的所有线程都必须都具有对该实例的引用。</span><span class="sxs-lookup"><span data-stu-id="322e9-137">All threads that use an instance of such a semaphore must have references to the instance.</span></span>  
  
 <span data-ttu-id="322e9-138">如果`initialCount`是小于`maximumCount`，效果就像当前线程已调用是相同<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`减去`initialCount`) 时间。</span><span class="sxs-lookup"><span data-stu-id="322e9-138">If `initialCount` is less than `maximumCount`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="322e9-139">如果您不想要保留的线程的创建信号量的任何项，使用的相同编号`maximumCount`和`initialCount`。</span><span class="sxs-lookup"><span data-stu-id="322e9-139">If you do not want to reserve any entries for the thread that creates the semaphore, use the same number for `maximumCount` and `initialCount`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-140">下面的示例创建三个最大计数和初始计数为零的信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-140">The following example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="322e9-141">该示例启动五个线程，阻止等待信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-141">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="322e9-142">主线程使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载来增加到其最大值，从而允许三个线程进入信号量的信号量计数。</span><span class="sxs-lookup"><span data-stu-id="322e9-142">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="322e9-143">每个线程使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法以等待 1 秒，以模拟工作，然后调用<xref:System.Threading.Semaphore.Release>方法重载来释放信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-143">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="322e9-144">释放信号量时，每个时间显示前一个信号量计数。</span><span class="sxs-lookup"><span data-stu-id="322e9-144">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="322e9-145">控制台消息跟踪信号量的使用。</span><span class="sxs-lookup"><span data-stu-id="322e9-145">Console messages track semaphore use.</span></span> <span data-ttu-id="322e9-146">模拟的工作时间间隔都稍有增加，为每个线程，以使输出更易于阅读。</span><span class="sxs-lookup"><span data-stu-id="322e9-146">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="322e9-147">
            <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-147">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="322e9-148">
            <paramref name="maximumCount" /> 小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-148">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="322e9-149">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-149">-or-</span>
          </span>
          <span data-ttu-id="322e9-150">
            <paramref name="initialCount" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-150">
              <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-151">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-151">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-152">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-152">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="322e9-153">可以同时授予的信号量的初始请求数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-153">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="322e9-154">可以同时授予的信号量的最大请求数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-154">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="322e9-155">命名系统信号量对象的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-155">The name of a named system semaphore object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-156">初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数，可以选择指定系统信号量对象的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-156">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-157">此构造函数初始化<xref:System.Threading.Semaphore>对象，表示已命名的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-157">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="322e9-158">你可以创建多个<xref:System.Threading.Semaphore>对象表示同一命名系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-158">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="322e9-159">如果不存在已命名的系统信号量，创建初始计数和由指定的最大计数`initialCount`和`maximumCount`。</span><span class="sxs-lookup"><span data-stu-id="322e9-159">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="322e9-160">如果已命名的系统信号量已存在，`initialCount`和`maximumCount`未使用的尽管无效的值仍会引发异常。</span><span class="sxs-lookup"><span data-stu-id="322e9-160">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="322e9-161">如果您需要确定是否已创建的命名的系统信号量，使用<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29>构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="322e9-161">If you need to determine whether or not a named system semaphore was created, use the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> constructor overload instead.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="322e9-162">当使用此构造函数重载时，建议的做法是指定的相同的数字`initialCount`和`maximumCount`。</span><span class="sxs-lookup"><span data-stu-id="322e9-162">When you use this constructor overload, the recommended practice is to specify the same number for `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="322e9-163">如果`initialCount`是小于`maximumCount`，并创建已命名的系统信号量，效果是相同就像当前线程已调用<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`减去`initialCount`) 时间。</span><span class="sxs-lookup"><span data-stu-id="322e9-163">If `initialCount` is less than `maximumCount`, and a named system semaphore is created, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="322e9-164">但是，使用此构造函数重载没有任何方法来确定是否创建已命名的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-164">However, with this constructor overload there is no way to determine whether a named system semaphore was created.</span></span>  
  
 <span data-ttu-id="322e9-165">如果指定`null`或为空字符串`name`，创建了本地信号量时，就像已调用<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="322e9-165">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span>  
  
 <span data-ttu-id="322e9-166">因为命名信号量是整个操作系统可见的它们可用于协调跨进程边界的资源使用。</span><span class="sxs-lookup"><span data-stu-id="322e9-166">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
 <span data-ttu-id="322e9-167">如果你想要确定是否已命名的系统信号量存在，请使用<xref:System.Threading.Semaphore.OpenExisting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-167">If you want to find out whether a named system semaphore exists, use the <xref:System.Threading.Semaphore.OpenExisting%2A> method.</span></span> <span data-ttu-id="322e9-168"><xref:System.Threading.Semaphore.OpenExisting%2A>方法会尝试打开现有的已命名信号量，则会引发异常，如果不存在的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-168">The <xref:System.Threading.Semaphore.OpenExisting%2A> method attempts to open an existing named semaphore, and throws an exception if the system semaphore does not exist.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-169">下面的代码示例演示了命名的信号量的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="322e9-169">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="322e9-170">该示例创建一个最大计数为 5、 初始的五个计数命名的信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-170">The example creates a named semaphore with a maximum count of five and an initial count of five.</span></span> <span data-ttu-id="322e9-171">程序调用三<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-171">The program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="322e9-172">因此，如果从两个命令窗口运行已编译的示例，则第二个副本将阻止在第三个调用<xref:System.Threading.WaitHandle.WaitOne%2A>。</span><span class="sxs-lookup"><span data-stu-id="322e9-172">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="322e9-173">发布第一个计划，以便取消阻止第二个副本中的一个或多个条目。</span><span class="sxs-lookup"><span data-stu-id="322e9-173">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="322e9-174">
            <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-174">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="322e9-175">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-175">-or-</span>
          </span>
          <span data-ttu-id="322e9-176">
            <paramref name="name" /> 超过 260 个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-176">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="322e9-177">
            <paramref name="maximumCount" /> 小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-177">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="322e9-178">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-178">-or-</span>
          </span>
          <span data-ttu-id="322e9-179">
            <paramref name="initialCount" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-179">
              <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="322e9-180">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-180">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-181">命名信号量存在且具有访问控制安全性，用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-181">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="322e9-182">无法创建命名信号量，可能是由于其他类型的等待句柄具有相同名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-182">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="322e9-183">用于调用非托管的代码来创建已命名的系统信号量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-183">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="322e9-184">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-184">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="322e9-185">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-185">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-186">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-186">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-187">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-187">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="322e9-188">可以同时满足的信号量的初始请求数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-188">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="322e9-189">可以同时满足的信号量的最大请求数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-189">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="322e9-190">命名系统信号量对象的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-190">The name of a named system semaphore object.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="322e9-191">在此方法返回时，如果创建了本地信号量（即，如果 <c>name</c> 为 <see langword="null" /> 或空字符串）或指定的已命名系统信号量，则包含 <see langword="true" />；如果指定的已命名系统信号量已存在，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-191">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          </span>
          <span data-ttu-id="322e9-192">此参数未经初始化即被传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-192">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-193">初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数，还可以选择指定系统信号量对象的名称，以及指定一个变量来接收指示是否创建了新系统信号量的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-193">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-194">此构造函数初始化<xref:System.Threading.Semaphore>对象，表示已命名的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-194">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="322e9-195">你可以创建多个<xref:System.Threading.Semaphore>对象表示同一命名系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-195">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="322e9-196">如果不存在已命名的系统信号量，创建初始计数和由指定的最大计数`initialCount`和`maximumCount`。</span><span class="sxs-lookup"><span data-stu-id="322e9-196">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="322e9-197">如果已命名的系统信号量已存在，`initialCount`和`maximumCount`未使用的尽管无效的值仍会引发异常。</span><span class="sxs-lookup"><span data-stu-id="322e9-197">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="322e9-198">使用`createdNew`以确定是否已创建的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-198">Use `createdNew` to determine whether the system semaphore was created.</span></span>  
  
 <span data-ttu-id="322e9-199">如果`initialCount`是小于`maximumCount`，并`createdNew`是`true`，效果是相同就像当前线程已调用<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`减去`initialCount`) 时间。</span><span class="sxs-lookup"><span data-stu-id="322e9-199">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="322e9-200">如果指定`null`或为空字符串`name`，创建了本地信号量时，就像已调用<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="322e9-200">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="322e9-201">在这种情况下，`createdNew`始终是`true`。</span><span class="sxs-lookup"><span data-stu-id="322e9-201">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="322e9-202">因为命名信号量是整个操作系统可见的它们可用于协调跨进程边界的资源使用。</span><span class="sxs-lookup"><span data-stu-id="322e9-202">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-203">下面的代码示例演示了命名的信号量的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="322e9-203">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="322e9-204">该示例创建一个最大计数为 5、 初始计数的两个命名的信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-204">The example creates a named semaphore with a maximum count of five and an initial count of two.</span></span> <span data-ttu-id="322e9-205">也就是说，它包含着的线程的调用的构造函数的三个条目。</span><span class="sxs-lookup"><span data-stu-id="322e9-205">That is, it reserves three entries for the thread that calls the constructor.</span></span> <span data-ttu-id="322e9-206">如果`createNew`是`false`，该程序调用三<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-206">If `createNew` is `false`, the program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="322e9-207">因此，如果从两个命令窗口运行已编译的示例，则第二个副本将阻止在第三个调用<xref:System.Threading.WaitHandle.WaitOne%2A>。</span><span class="sxs-lookup"><span data-stu-id="322e9-207">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="322e9-208">发布第一个计划，以便取消阻止第二个副本中的一个或多个条目。</span><span class="sxs-lookup"><span data-stu-id="322e9-208">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="322e9-209">
            <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-209">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="322e9-210">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-210">-or-</span>
          </span>
          <span data-ttu-id="322e9-211">
            <paramref name="name" /> 超过 260 个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-211">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="322e9-212">
            <paramref name="maximumCount" /> 小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-212">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="322e9-213">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-213">-or-</span>
          </span>
          <span data-ttu-id="322e9-214">
            <paramref name="initialCount" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-214">
              <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="322e9-215">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-215">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-216">命名信号量存在且具有访问控制安全性，用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-216">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="322e9-217">无法创建命名信号量，可能是由于其他类型的等待句柄具有相同名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-217">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="322e9-218">用于调用非托管的代码来创建已命名的系统信号量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-218">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="322e9-219">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-219">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="322e9-220">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-220">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-221">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-221">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-222">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-222">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  * System.Security.AccessControl.SemaphoreSecurity -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew, semaphoreSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="322e9-223">可以同时满足的信号量的初始请求数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-223">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="322e9-224">可以同时满足的信号量的最大请求数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-224">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="322e9-225">命名系统信号量对象的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-225">The name of a named system semaphore object.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="322e9-226">在此方法返回时，如果创建了本地信号量（即，如果 <c>name</c> 为 <see langword="null" /> 或空字符串）或指定的已命名系统信号量，则包含 <see langword="true" />；如果指定的已命名系统信号量已存在，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-226">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          </span>
          <span data-ttu-id="322e9-227">此参数未经初始化即被传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-227">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="semaphoreSecurity">
          <span data-ttu-id="322e9-228">一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示应用于已命名的系统信号量的访问控制安全性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-228">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-229">初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数，可以选择指定系统信号量对象的名称，指定一个变量来接收指示是否创建了新系统信号量的值，以及指定系统信号量的安全访问控制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-229">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-230">使用此构造函数应用于已命名的系统信号量的访问控制安全性，在创建时，阻止其他代码的信号量的控制。</span><span class="sxs-lookup"><span data-stu-id="322e9-230">Use this constructor to apply access control security to a named system semaphore when it is created, preventing other code from taking control of the semaphore.</span></span>  
  
 <span data-ttu-id="322e9-231">此构造函数初始化<xref:System.Threading.Semaphore>对象，表示已命名的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-231">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="322e9-232">你可以创建多个<xref:System.Threading.Semaphore>对象表示同一命名系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-232">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="322e9-233">如果已命名的系统信号量不存在，它被创建使用指定的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="322e9-233">If the named system semaphore does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="322e9-234">如果命名信号量存在，则忽略指定的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="322e9-234">If the named semaphore exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="322e9-235">调用方具有对新创建的完全控制<xref:System.Threading.Semaphore>对象，即使`semaphoreSecurity`拒绝或无法授予当前用户对某些访问权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-235">The caller has full control over the newly created <xref:System.Threading.Semaphore> object even if `semaphoreSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="322e9-236">但是，如果当前用户尝试获取另一个<xref:System.Threading.Semaphore>对象表示同一命名信号量，使用构造函数或<xref:System.Threading.Semaphore.OpenExisting%2A>方法中，Windows 应用访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="322e9-236">However, if the current user attempts to get another <xref:System.Threading.Semaphore> object to represent the same named semaphore, using either a constructor or the <xref:System.Threading.Semaphore.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="322e9-237">如果不存在已命名的系统信号量，创建初始计数和由指定的最大计数`initialCount`和`maximumCount`。</span><span class="sxs-lookup"><span data-stu-id="322e9-237">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="322e9-238">如果已命名的系统信号量已存在，`initialCount`和`maximumCount`未使用的尽管无效的值仍会引发异常。</span><span class="sxs-lookup"><span data-stu-id="322e9-238">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="322e9-239">使用`createdNew`参数，以确定是否由此构造函数创建的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-239">Use the `createdNew` parameter to determine whether the system semaphore was created by this constructor.</span></span>  
  
 <span data-ttu-id="322e9-240">如果`initialCount`是小于`maximumCount`，并`createdNew`是`true`，效果是相同就像当前线程已调用<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`减去`initialCount`) 时间。</span><span class="sxs-lookup"><span data-stu-id="322e9-240">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="322e9-241">如果指定`null`或为空字符串`name`，创建了本地信号量时，就像已调用<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="322e9-241">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="322e9-242">在这种情况下，`createdNew`始终是`true`。</span><span class="sxs-lookup"><span data-stu-id="322e9-242">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="322e9-243">因为命名信号量是整个操作系统可见的它们可用于协调跨进程边界的资源使用。</span><span class="sxs-lookup"><span data-stu-id="322e9-243">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-244">下面的代码示例演示使用访问控制安全命名的信号量的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="322e9-244">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="322e9-245">该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-245">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span> <span data-ttu-id="322e9-246">如果信号量不存在，创建与最大计数为 2 和访问控制安全性，将拒绝使用信号量的权限的当前用户，但授予的权限读取并更改信号量的权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-246">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span> <span data-ttu-id="322e9-247">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-247">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="322e9-248">捕获的异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载来读取和更改的权限所需的权限打开信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-248">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="322e9-249">更改权限后，输入并释放所需的权限打开信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-249">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="322e9-250">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-250">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="322e9-251">
            <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-251">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="322e9-252">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-252">-or-</span>
          </span>
          <span data-ttu-id="322e9-253">
            <paramref name="name" /> 超过 260 个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-253">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="322e9-254">
            <paramref name="maximumCount" /> 小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-254">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="322e9-255">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-255">-or-</span>
          </span>
          <span data-ttu-id="322e9-256">
            <paramref name="initialCount" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-256">
              <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-257">命名信号量存在且具有访问控制安全性，用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-257">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="322e9-258">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-258">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="322e9-259">无法创建命名信号量，可能是由于其他类型的等待句柄具有相同名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-259">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="322e9-260">用于调用非托管的代码来创建已命名的系统信号量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-260">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="322e9-261">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-261">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="322e9-262">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-262">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-263">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-263">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-264">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-264">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="semaphore.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="322e9-265">获取已命名的系统信号量的访问控制安全性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-265">Gets the access control security for a named system semaphore.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="322e9-266">一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示已命名系统信号量的访问控制安全性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-266">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security for the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-267"><xref:System.Threading.Semaphore.GetAccessControl%2A>方法使用以下标志 （使用按位 OR 运算组合） 的组合来搜索权限： <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>， <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>，和<xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="322e9-267">The <xref:System.Threading.Semaphore.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="322e9-268">用户必须具有<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType>权限才能调用此方法，而且信号量必须使用打开<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType>权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-268">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights.</span></span>  
  
 <span data-ttu-id="322e9-269">在本地信号量，访问控制安全性是不相关。</span><span class="sxs-lookup"><span data-stu-id="322e9-269">On a local semaphore, access control security is irrelevant.</span></span> <span data-ttu-id="322e9-270">如果<xref:System.Threading.Semaphore>对象不表示已命名的系统信号量，此方法返回<xref:System.Security.AccessControl.SemaphoreSecurity>授予任何用户对所有权限的对象。</span><span class="sxs-lookup"><span data-stu-id="322e9-270">If the <xref:System.Threading.Semaphore> object does not represent a named system semaphore, this method returns a <xref:System.Security.AccessControl.SemaphoreSecurity> object that grants all rights to any user.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-271">下面的代码示例演示使用访问控制安全命名的信号量的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="322e9-271">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="322e9-272">该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-272">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="322e9-273">如果信号量不存在，创建与最大计数为 2 和拒绝当前用户的权限使用信号量，但授予的权限读取并更改信号量的权限的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="322e9-273">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="322e9-274">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-274">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="322e9-275">捕获的异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载来读取和更改的权限所需的权限打开信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-275">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span> <span data-ttu-id="322e9-276">使用获取的系统信号量的访问控制安全性<xref:System.Threading.Semaphore.GetAccessControl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-276">The access control security for the system semaphore is obtained using the <xref:System.Threading.Semaphore.GetAccessControl%2A> method.</span></span>  
  
 <span data-ttu-id="322e9-277">更改权限后，输入并释放所需的权限打开信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-277">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="322e9-278">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-278">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-279">当前的 <see cref="T:System.Threading.Semaphore" /> 对象表示已命名的系统信号灯，且用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-279">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          </span>
          <span data-ttu-id="322e9-280">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-280">-or-</span>
          </span>
          <span data-ttu-id="322e9-281">当前的 <see cref="T:System.Threading.Semaphore" /> 对象表示已命名的系统信号灯，且 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 权限不开放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-281">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="322e9-282">不支持 Windows 98 或 Windows Millennium Edition。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-282">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-283">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-283">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-284">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-284">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="322e9-285">打开指定名称为信号量（如果已经存在）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-285">Opens a specified named semaphore, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="322e9-286">要打开的系统信号量的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-286">The name of the system semaphore to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-287">打开指定名称为信号量（如果已经存在）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-287">Opens the specified named semaphore, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="322e9-288">一个对象，表示已命名的系统信号量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-288">An object that represents the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-289"><xref:System.Threading.Semaphore.OpenExisting%2A>方法尝试打开指定的命名信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-289">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open the specified named semaphore.</span></span> <span data-ttu-id="322e9-290">如果不存在的系统信号量，此方法将引发异常而不是创建的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-290">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="322e9-291">若要创建的系统信号量时尚不存在，请使用之一<xref:System.Threading.Semaphore.%23ctor%2A>构造函数具有`name`参数。</span><span class="sxs-lookup"><span data-stu-id="322e9-291">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="322e9-292">多个调用此方法使用的相同值的`name`不一定返回相同<xref:System.Threading.Semaphore>对象，即使返回表示的对象相同的命名系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-292">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="322e9-293">此方法的重载是等效于调用<xref:System.Threading.Semaphore.OpenExisting%2A>方法重载并指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>和<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限，使用按位 OR 运算组合在一起。</span><span class="sxs-lookup"><span data-stu-id="322e9-293">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.OpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="322e9-294">指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>标志将允许一个线程进入信号量，并指定<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>标志将允许线程调用<xref:System.Threading.Semaphore.Release%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-294">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-295">下面的代码示例演示使用访问控制安全命名的信号量的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="322e9-295">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="322e9-296">该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-296">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="322e9-297">如果信号量不存在，创建与最大计数为 2 和访问控制安全性的拒绝当前用户的权限使用信号量，但该权限授予的权限读取并更改信号量的权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-297">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but which grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="322e9-298">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="322e9-298">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload.</span></span> <span data-ttu-id="322e9-299">捕获的异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载来读取和更改的权限所需的权限打开信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-299">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="322e9-300">更改权限后，输入，并将其释放所需的权限打开信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-300">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="322e9-301">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-301">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="322e9-302">
            <paramref name="name" /> 是一个空字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-302">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="322e9-303">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-303">-or-</span>
          </span>
          <span data-ttu-id="322e9-304">
            <paramref name="name" /> 超过 260 个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-304">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="322e9-305">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-305">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="322e9-306">命名的信号量不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-306">The named semaphore does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="322e9-307">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-307">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-308">存在该命名信号量，但用户没有使用它时所需的安全访问权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-308">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="322e9-309">用于调用非托管的代码来打开命名的系统信号量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-309">for calling unmanaged code to open a named system semaphore.</span>
          </span>
          <span data-ttu-id="322e9-310">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-310">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="322e9-311">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-311">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-312">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-312">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-313">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-313">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.SemaphoreRights -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="322e9-314">要打开的系统信号量的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-314">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="322e9-315">表示所需的安全访问权限的枚举值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-315">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-316">用安全访问权限打开指定名称为信号量（如果已经存在）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-316">Opens the specified named semaphore, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="322e9-317">一个对象，表示已命名的系统信号量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-317">An object that represents the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-318">`rights`参数必须包含<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>标志，以便允许线程进入信号量，并<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>标志，以使线程能够调用<xref:System.Threading.Semaphore.Release%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-318">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="322e9-319"><xref:System.Threading.Semaphore.OpenExisting%2A>方法尝试打开现有的已命名信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-319">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open an existing named semaphore.</span></span> <span data-ttu-id="322e9-320">如果不存在的系统信号量，此方法将引发异常而不是创建的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-320">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="322e9-321">若要创建的系统信号量时尚不存在，请使用之一<xref:System.Threading.Semaphore.%23ctor%2A>构造函数具有`name`参数。</span><span class="sxs-lookup"><span data-stu-id="322e9-321">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="322e9-322">多个调用此方法使用的相同值的`name`不一定返回相同<xref:System.Threading.Semaphore>对象，即使返回表示的对象相同的命名系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-322">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-323">下面的代码示例演示使用访问控制安全命名的信号量的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="322e9-323">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="322e9-324">该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-324">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="322e9-325">如果信号量不存在，创建与最大计数为 2 和拒绝当前用户的权限使用信号量，但授予的权限读取并更改信号量的权限的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="322e9-325">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="322e9-326">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-326">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="322e9-327">捕获的异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载来读取和更改的权限所需的权限打开信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-327">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="322e9-328">更改权限后，输入，并将其释放所需的权限打开信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-328">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="322e9-329">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-329">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="322e9-330">
            <paramref name="name" /> 是一个空字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-330">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="322e9-331">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-331">-or-</span>
          </span>
          <span data-ttu-id="322e9-332">
            <paramref name="name" /> 超过 260 个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-332">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="322e9-333">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-333">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="322e9-334">命名的信号量不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-334">The named semaphore does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="322e9-335">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-335">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-336">已命名的信号量存在，但用户不具备所需的安全访问权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-336">The named semaphore exists, but the user does not have the desired security access rights.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="322e9-337">用于调用非托管的代码来创建已命名的系统信号量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-337">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="322e9-338">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-338">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="322e9-339">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-339">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-340">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-340">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-341">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-341">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="322e9-342">退出信号量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-342">Exits the semaphore.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphore.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="322e9-343">退出信号量并返回前一个计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-343">Exits the semaphore and returns the previous count.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="322e9-344">调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-344">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-345">线程通常使用<xref:System.Threading.WaitHandle.WaitOne%2A>方法进入信号量，并且它们通常使用此方法重载来退出。</span><span class="sxs-lookup"><span data-stu-id="322e9-345">Threads typically use the <xref:System.Threading.WaitHandle.WaitOne%2A> method to enter the semaphore, and they typically use this method overload to exit.</span></span>  
  
 <span data-ttu-id="322e9-346">如果<xref:System.Threading.SemaphoreFullException>引发的<xref:System.Threading.Semaphore.Release%2A>方法，并不一定表示与调用线程问题。</span><span class="sxs-lookup"><span data-stu-id="322e9-346">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="322e9-347">另一个线程中的编程错误可能导致该线程退出更多的时间比它进入信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-347">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="322e9-348">如果当前<xref:System.Threading.Semaphore>对象表示已命名的系统信号量，则用户必须拥有<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权利和信号量已与打开必须<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-348">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-349">下面的代码示例创建具有三个最大计数和初始计数为零的信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-349">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="322e9-350">该示例启动五个线程，阻止等待信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-350">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="322e9-351">主线程使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载来增加到其最大值，从而允许三个线程进入信号量的信号量计数。</span><span class="sxs-lookup"><span data-stu-id="322e9-351">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="322e9-352">每个线程使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法以等待 1 秒，以模拟工作，然后调用<xref:System.Threading.Semaphore.Release>方法重载来释放信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-352">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="322e9-353">释放信号量时，每个时间显示前一个信号量计数。</span><span class="sxs-lookup"><span data-stu-id="322e9-353">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="322e9-354">控制台消息跟踪信号量的使用。</span><span class="sxs-lookup"><span data-stu-id="322e9-354">Console messages track semaphore use.</span></span> <span data-ttu-id="322e9-355">模拟的工作时间间隔都稍有增加，为每个线程，以使输出更易于阅读。</span><span class="sxs-lookup"><span data-stu-id="322e9-355">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="322e9-356">信号量计数已是最大值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-356">The semaphore count is already at the maximum value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="322e9-357">发生已命名信号量的 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-357">A Win32 error occurred with a named semaphore.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-358">当前信号量表示一个已命名的系统信号量，但用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-358">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          </span>
          <span data-ttu-id="322e9-359">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-359">-or-</span>
          </span>
          <span data-ttu-id="322e9-360">当前信号量表示一个已命名的系统信号量，但它未用 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 打开。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-360">The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-361">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-361">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-362">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-362">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphore.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">
          <span data-ttu-id="322e9-363">退出信号量的次数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-363">The number of times to exit the semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-364">以指定的次数退出信号量并返回前一个计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-364">Exits the semaphore a specified number of times and returns the previous count.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="322e9-365">调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-365">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-366">如果线程已经多次进入信号量，此方法的重载允许整个信号量计数与一个调用还原。</span><span class="sxs-lookup"><span data-stu-id="322e9-366">If a thread has entered the semaphore multiple times, this method overload allows the entire semaphore count to be restored with one call.</span></span>  
  
 <span data-ttu-id="322e9-367">如果<xref:System.Threading.SemaphoreFullException>引发的<xref:System.Threading.Semaphore.Release%2A>方法，并不一定表示与调用线程问题。</span><span class="sxs-lookup"><span data-stu-id="322e9-367">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="322e9-368">另一个线程中的编程错误可能导致该线程退出更多的时间比它进入信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-368">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="322e9-369">如果当前<xref:System.Threading.Semaphore>对象表示已命名的系统信号量，则用户必须拥有<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权利和信号量已与打开必须<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-369">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-370">下面的代码示例创建具有三个最大计数和初始计数为零的信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-370">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="322e9-371">该示例启动五个线程，阻止等待信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-371">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="322e9-372">主线程使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法重载来增加到其最大值，从而允许三个线程进入信号量的信号量计数。</span><span class="sxs-lookup"><span data-stu-id="322e9-372">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="322e9-373">每个线程使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法以等待 1 秒，以模拟工作，然后调用<xref:System.Threading.Semaphore.Release>方法重载来释放信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-373">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="322e9-374">释放信号量时，每个时间显示前一个信号量计数。</span><span class="sxs-lookup"><span data-stu-id="322e9-374">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="322e9-375">控制台消息跟踪信号量的使用。</span><span class="sxs-lookup"><span data-stu-id="322e9-375">Console messages track semaphore use.</span></span> <span data-ttu-id="322e9-376">模拟的工作时间间隔都稍有增加，为每个线程，以使输出更易于阅读。</span><span class="sxs-lookup"><span data-stu-id="322e9-376">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="322e9-377">
            <paramref name="releaseCount" /> 小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-377">
              <paramref name="releaseCount" /> is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="322e9-378">信号量计数已是最大值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-378">The semaphore count is already at the maximum value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="322e9-379">发生已命名信号量的 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-379">A Win32 error occurred with a named semaphore.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-380">当前信号量表示一个已命名的系统信号量，但用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-380">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          </span>
          <span data-ttu-id="322e9-381">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-381">-or-</span>
          </span>
          <span data-ttu-id="322e9-382">当前信号量表示一个已命名的系统信号量，但它不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限打开的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-382">The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-383">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-383">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-384">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-384">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.SemaphoreSecurity -&gt; unit" Usage="semaphore.SetAccessControl semaphoreSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity">
          <span data-ttu-id="322e9-385">一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示应用于已命名的系统信号量的访问控制安全性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-385">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-386">设置已命名的系统信号量的访问控制安全性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-386">Sets the access control security for a named system semaphore.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-387">可以仅在上设置访问控制安全性<xref:System.Threading.Semaphore>对象表示已命名的系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-387">You can set access control security only on <xref:System.Threading.Semaphore> objects that represent named system semaphores.</span></span>  
  
 <span data-ttu-id="322e9-388">用户必须具有<xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType>权限才能调用此方法，而且信号量必须使用打开<xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType>权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-388">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="322e9-389">下面的代码示例演示使用访问控制安全命名的信号量的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="322e9-389">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="322e9-390">该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载来测试是否存在名称为信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-390">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="322e9-391">如果信号量不存在，创建与最大计数为 2 和访问控制安全性，将拒绝使用信号量的权限的当前用户，但授予的权限读取并更改信号量的权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-391">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="322e9-392">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-392">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="322e9-393">捕获的异常，并且该示例使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载来读取和更改的权限所需的权限打开信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-393">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="322e9-394">更改的权限，使用后<xref:System.Threading.Semaphore.SetAccessControl%2A>方法，信号量打开输入并释放所需的权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-394">After the permissions are changed, using the <xref:System.Threading.Semaphore.SetAccessControl%2A> method, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="322e9-395">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="322e9-395">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="322e9-396">
            <paramref name="semaphoreSecurity" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-396">
              <paramref name="semaphoreSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-397">用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-397">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          </span>
          <span data-ttu-id="322e9-398">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-398">-or-</span>
          </span>
          <span data-ttu-id="322e9-399">信号量不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 权限打开的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-399">The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="322e9-400">当前 <see cref="T:System.Threading.Semaphore" /> 对象不表示已命名的系统信号量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-400">The current <see cref="T:System.Threading.Semaphore" /> object does not represent a named system semaphore.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="322e9-401">托管线程处理</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-401">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="322e9-402">Semaphore</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-402">Semaphore</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="322e9-403">打开指定名称为信号量（如果已经存在)，并返回指示操作是否成功的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-403">Opens a specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="322e9-404">要打开的系统信号量的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-404">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="322e9-405">当此方法返回时，如果调用成功，则包含表示命名信号的 <see cref="T:System.Threading.Semaphore" /> 对象；否则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-405">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="322e9-406">该参数未经初始化即被处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-406">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-407">打开指定名称为信号量（如果已经存在），并返回指示操作是否成功的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-407">Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="322e9-408">如果命名信号量成功打开，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-408">
              <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-409">如果不存在名称为信号量，此方法不会创建它。</span><span class="sxs-lookup"><span data-stu-id="322e9-409">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="322e9-410">若要创建的系统信号量时尚不存在，请使用之一<xref:System.Threading.Semaphore.%23ctor%2A>构造函数具有`name`参数。</span><span class="sxs-lookup"><span data-stu-id="322e9-410">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="322e9-411">如果您不确定是否存在名称为信号量，使用此方法重载，而不是<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法重载，信号量不存在时引发异常。</span><span class="sxs-lookup"><span data-stu-id="322e9-411">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="322e9-412">此方法的重载是等效于调用<xref:System.Threading.Semaphore.TryOpenExisting%2A>方法重载并指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>和<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>权限，使用按位 OR 运算组合在一起。</span><span class="sxs-lookup"><span data-stu-id="322e9-412">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.TryOpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="322e9-413">指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>标志将允许一个线程进入信号量，并指定<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>标志将允许线程调用<xref:System.Threading.Semaphore.Release%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-413">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the   <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="322e9-414">
            <paramref name="name" /> 是一个空字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-414">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="322e9-415">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-415">-or-</span>
          </span>
          <span data-ttu-id="322e9-416">
            <paramref name="name" /> 超过 260 个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-416">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="322e9-417">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-417">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="322e9-418">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-418">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-419">存在该命名信号量，但用户没有使用它时所需的安全访问权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-419">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.SemaphoreRights *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="322e9-420">要打开的系统信号量的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-420">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="322e9-421">表示所需的安全访问权限的枚举值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-421">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="322e9-422">当此方法返回时，如果调用成功，则包含表示命名信号的 <see cref="T:System.Threading.Semaphore" /> 对象；否则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-422">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="322e9-423">该参数未经初始化即被处理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-423">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="322e9-424">用安全访问权限打开指定名称为信号量（如果已经存在），并返回指示操作是否成功的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-424">Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="322e9-425">如果命名信号量成功打开，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-425">
              <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="322e9-426">如果不存在名称为信号量，此方法不会创建它。</span><span class="sxs-lookup"><span data-stu-id="322e9-426">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="322e9-427">若要创建的系统信号量时尚不存在，请使用之一<xref:System.Threading.Semaphore.%23ctor%2A>构造函数具有`name`参数。</span><span class="sxs-lookup"><span data-stu-id="322e9-427">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="322e9-428">如果您不确定是否存在名称为信号量，使用此方法重载，而不是<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法重载，信号量不存在时引发异常。</span><span class="sxs-lookup"><span data-stu-id="322e9-428">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="322e9-429">`rights`参数必须包含<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>标志，以便允许线程进入信号量，并<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>标志，以使线程能够调用<xref:System.Threading.Semaphore.Release%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="322e9-429">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="322e9-430">多个调用此方法使用的相同值的`name`不一定返回相同<xref:System.Threading.Semaphore>对象，即使返回表示的对象相同的命名系统信号量。</span><span class="sxs-lookup"><span data-stu-id="322e9-430">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="322e9-431">
            <paramref name="name" /> 是一个空字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-431">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="322e9-432">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-432">-or-</span>
          </span>
          <span data-ttu-id="322e9-433">
            <paramref name="name" /> 超过 260 个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-433">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="322e9-434">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-434">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="322e9-435">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-435">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="322e9-436">存在该命名信号量，但用户没有使用它时所需的安全访问权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="322e9-436">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>