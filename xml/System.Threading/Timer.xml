<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="67fe19429800288028bf5585c9bd4f03134790db" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530811" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供以指定的时间间隔对线程池线程执行方法的机制。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Threading.TimerCallback>委托来指定所需的方法<xref:System.Threading.Timer>执行。 签名<xref:System.Threading.TimerCallback>委托是：  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 计时器构造的并且不能更改时，指定计时器委托。 创建计时器; 的线程上不执行该方法它执行上<xref:System.Threading.ThreadPool>系统所提供的线程。  
  
> [!TIP]
> .NET 包括名为的四个类`Timer`，每个的它提供不同的功能：  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>其中激发事件并在一个执行的代码或多个事件接收器按固定的间隔。 类旨在用作基于服务器或多线程环境中; 中的服务组件它没有用户界面，并且不在运行时可见。
> - <xref:System.Threading.Timer?displayProperty=nameWithType>其中固定时间间隔线程池线程上执行单个回调方法。 当计时器实例化，并且不能更改定义回调方法。 如<xref:System.Timers.Timer?displayProperty=nameWithType>类，该类适用于使用作为多线程环境中的基于服务器的或服务组件; 它没有用户界面，并且不在运行时可见。
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (仅在.NET framework 中)，激发事件并在固定时间间隔的一个或多个事件接收器中执行的代码的 Windows 窗体组件。 该组件没有用户界面，专用于在单线程环境中;它在 UI 线程上执行。
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (仅在.NET framework 中)，在按固定间隔执行异步或同步网页回发的 ASP.NET 组件。
  
 当创建计时器时，可以指定的方法在首次执行之前要等待的时间量 （到期时间），以及数量的后续执行 （句点） 之间的等待时间。 <xref:System.Threading.Timer>类具有相同的系统时钟的分辨率。 这意味着，如果期间为早于系统时钟的分辨率<xref:System.Threading.TimerCallback>委托将在大约 15 毫秒在 Windows 7 和 Windows 8 的系统的系统时钟的分辨率所定义的时间间隔执行。 你可以更改到期时间和时间或禁用计时器，通过使用<xref:System.Threading.Timer.Change%2A>方法。  
  
> [!NOTE]
>  只要你使用<xref:System.Threading.Timer>，你必须保留对它的引用。 与任何托管对象，<xref:System.Threading.Timer>没有引用时才进行垃圾回收。 这一事实，<xref:System.Threading.Timer>是仍处于活动状态不会阻止它正在收集。  
  
 当不再需要计时器时，使用<xref:System.Threading.Timer.Dispose%2A>计时器持有方法来释放资源。 请注意，回调可能发生后<xref:System.Threading.Timer.Dispose>已调用方法重载，因为计时器是按线程池线程来安排回调的执行。 你可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法重载来等待，直到完成所有的回调。  
  
 执行由计时器回调方法应该可重入，因为它调用<xref:System.Threading.ThreadPool>线程。 回调可同时执行两个线程池线程上如果计时器间隔小于执行回调，所需的时间，或者如果正在使用的所有线程池线程和回调排队多次。  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> 是一个简单的轻型计时器，它使用回调方法，并由线程池线程。 不建议用于 Windows 窗体，因为其回调不会在用户界面线程上发生。 <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> 是更好的选择为使用 Windows 窗体。 对于基于服务器的计时器功能，你可以考虑使用<xref:System.Timers.Timer?displayProperty=nameWithType>，这可引发事件并具有附加功能。  
  
   
  
## Examples  
 下面的示例定义`StatusChecker`类，包含`CheckStatus`方法，其签名为相同作为<xref:System.Threading.TimerCallback>委托。 `state`参数`CheckStatus`方法是<xref:System.Threading.AutoResetEvent>用于同步的应用程序线程和线程池线程执行的回调委托的对象。 `StatusChecker`类还进行了两个状态变量：  
  
 `invokeCount`  
 指示在调用回调方法的次数。  
  
 `maxCount`  
 确定应调用回调方法最大次数。  
  
 应用程序线程创建计时器，该等待 1 秒，然后执行`CheckStatus`回调方法每隔 250 毫秒。 然后阻止的应用程序线程，直至<xref:System.Threading.AutoResetEvent>对象处于有信号状态。 当`CheckStatus`执行回调方法`maxCount`时间，它调用`AutoResetEvent.Set`方法以设置的状态<xref:System.Threading.AutoResetEvent>对象为终止状态。 第一次发生这种情况，应用程序线程调用<xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29>方法，以便回调方法现在执行每半秒。 它再次阻止，直至<xref:System.Threading.AutoResetEvent>对象处于有信号状态。 当发生这种情况时，计时器被销毁通过调用其<xref:System.Threading.Timer.Dispose%2A>方法，且应用程序终止。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型是线程安全的。</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see langword="Timer" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</param>
        <summary>使用新创建的 <see cref="T:System.Threading.Timer" /> 对象作为状态对象，用一个无限周期和一个无限到期时间初始化 <see cref="T:System.Threading.Timer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此构造函数，当你想要使用<xref:System.Threading.Timer>对象作为的状态对象。 创建计时器后，使用<xref:System.Threading.Timer.Change%2A>方法以设置间隔和到期时间。  
  
 此构造函数指定一个无限到期时间之前第一次回调和两个回调，以防之前发生第一次回调之间无限间隔<xref:System.Threading.Timer>对象分配给的状态对象。  
  
 指定的方法`callback`应该是可重入，因为它调用<xref:System.Threading.ThreadPool>线程。 该方法可同时执行两个线程池线程上的计时器间隔是否早于执行该方法所需的时间或是否所有线程池线程都正在使用，并且该方法进行排队多次。  
  
   
  
## Examples  
 下面的代码示例创建一个新的计时器，该计时器本身用作的状态对象。 <xref:System.Threading.Timer.Change%2A>方法用于启动计时器。 计时器回调时，用于将计时器关闭的状态对象。  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</param>
        <param name="state">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</param>
        <param name="dueTime">调用 <c>callback</c> 之前延迟的时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
        <param name="period">调用 <c>callback</c> 之间的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>使用 32 位的有符号整数指定时间间隔，初始化 <see langword="Timer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委托`callback`参数调用一次后`dueTime`过后，以及之后每次`period`时间间隔结束。  
  
 如果`dueTime`为零 (0)，`callback`则会立即调用。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不会被调用; 处于禁用状态，但可以通过调用重新启用它计时器<xref:System.Threading.Timer.Change%2A>方法。  
  
 因为<xref:System.Threading.Timer>类具有相同的分辨率大约为 15 毫秒在 Windows 7 和 Windows 8 的系统上，系统时钟`callback`委托执行间隔由定义系统时钟的分辨率如果`period`小于系统时钟的分辨率。 如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`调用计时器的定期行为处于禁用状态，但可以使用重新启用它一次;<xref:System.Threading.Timer.Change%2A>方法。  
  
 指定的方法`callback`应该是可重入，因为它调用<xref:System.Threading.ThreadPool>线程。 该方法可同时执行两个线程池线程上的计时器间隔是否早于执行该方法所需的时间或是否所有线程池线程都正在使用，并且该方法进行排队多次。  
  
   
  
## Examples  
 下面的代码示例演示如何创建`TimerCallback`委托和初始化的新实例`Timer`类。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</param>
        <param name="state">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</param>
        <param name="dueTime">调用 <c>callback</c> 之前延迟的时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
        <param name="period">调用 <c>callback</c> 之间的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>用 64 位有符号整数来度量时间间隔，以初始化 <see langword="Timer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委托`callback`参数调用一次后`dueTime`过后，以及之后每次`period`时间间隔结束。  
  
 如果`dueTime`为零 (0)，`callback`则会立即调用。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不会被调用; 处于禁用状态，但可以通过调用重新启用它计时器<xref:System.Threading.Timer.Change%2A>方法。  
  
 因为<xref:System.Threading.Timer>类具有相同的分辨率大约为 15 毫秒在 Windows 7 和 Windows 8 的系统上，系统时钟`callback`委托执行间隔由定义系统时钟的分辨率如果`period`小于系统时钟的分辨率。 如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`调用计时器的定期行为处于禁用状态，但可以使用重新启用它一次;<xref:System.Threading.Timer.Change%2A>方法。  
  
 指定的方法`callback`应该是可重入，因为它调用<xref:System.Threading.ThreadPool>线程。 该方法可同时执行两个线程池线程上的计时器间隔是否早于执行该方法所需的时间或是否所有线程池线程都正在使用，并且该方法进行排队多次。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 参数大于 4294967294。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">表示要执行的方法的委托。</param>
        <param name="state">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</param>
        <param name="dueTime">在 <c>callback</c> 参数调用其方法之前延迟的时间量。 指定 -1 毫秒以防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
        <param name="period">调用 <c>callback</c> 所引用的方法之间的时间间隔。 指定 -1 毫秒可以禁用定期终止。</param>
        <summary>初始化 <see langword="Timer" /> 类的新实例，使用 <see cref="T:System.TimeSpan" /> 值来度量时间间隔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委托`callback`参数调用一次后`dueTime`过后，以及之后每次`period`时间间隔结束。  
  
 如果`dueTime`为零 (0)，`callback`则会立即调用。 如果`dueTime`为负一 (-1) 毫秒，`callback`不会被调用; 处于禁用状态，但可以通过调用重新启用它计时器<xref:System.Threading.Timer.Change%2A>方法。  
  
 因为<xref:System.Threading.Timer>类具有相同的分辨率大约为 15 毫秒在 Windows 7 和 Windows 8 的系统上，系统时钟`callback`委托执行间隔由定义系统时钟的分辨率如果`period`小于系统时钟的分辨率。 如果`period`是零 (0) 或负一 (-1) 毫秒和`dueTime`为正、`callback`调用计时器的定期行为处于禁用状态，但可以使用重新启用它一次;<xref:System.Threading.Timer.Change%2A>方法。  
  
 指定的方法`callback`应该是可重入，因为它调用<xref:System.Threading.ThreadPool>线程。 该方法可同时执行两个线程池线程上的计时器间隔是否早于执行该方法所需的时间或是否所有线程池线程都正在使用，并且该方法进行排队多次。  
  
   
  
## Examples  
 下面的代码示例演示如何创建`TimerCallback`委托和初始化的新实例`Timer`类。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 值中的毫秒数为负并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />，或者大于 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">表示要执行的方法的委托。</param>
        <param name="state">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</param>
        <param name="dueTime">调用 <c>callback</c> 之前延迟的时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
        <param name="period">调用 <c>callback</c> 之间的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>用 32 位无符号整数来度量时间间隔，以初始化 <see langword="Timer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委托`callback`参数调用一次后`dueTime`过后，以及之后每次`period`时间间隔结束。  
  
 如果`dueTime`为零 (0)，`callback`则会立即调用。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不会被调用; 处于禁用状态，但可以通过调用重新启用它计时器<xref:System.Threading.Timer.Change%2A>方法。  
  
 因为<xref:System.Threading.Timer>类具有相同的分辨率大约为 15 毫秒在 Windows 7 和 Windows 8 的系统上，系统时钟`callback`委托执行间隔由定义系统时钟的分辨率如果`period`小于系统时钟的分辨率。 如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`调用计时器的定期行为处于禁用状态，但可以使用重新启用它一次;<xref:System.Threading.Timer.Change%2A>方法。  
  
 指定的方法`callback`应该是可重入，因为它调用<xref:System.Threading.ThreadPool>线程。 该方法可同时执行两个线程池线程上的计时器间隔是否早于执行该方法所需的时间或是否所有线程池线程都正在使用，并且该方法进行排队多次。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>更改计时器的启动时间和方法调用之间的间隔。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。 指定零 (0) 可立即重新启动计时器。</param>
        <param name="period">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>更改计时器的启动时间和方法调用之间的间隔，用 32 位有符号整数度量时间间隔。</summary>
        <returns>
          如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次后调用的回调方法`dueTime`过后，并且之后每次指定的时间间隔内`period`间隔。  
  
 如果`dueTime`为零 (0)，则会立即调用回调方法。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，永远不会调用回调方法，计时器处于禁用状态，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定为正值`dueTime`。  
  
 如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，一次调用回调方法，计时器定期行为处于禁用状态，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定为正值`period`.  
  
 <xref:System.Threading.Timer.Change%2A>方法可以从调用<xref:System.Threading.TimerCallback>委托。  
  
   
  
## Examples  
 下面的代码示例演示如何开始`Timer`以及在多次调用后更改其周期。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 已被释放。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。 指定零 (0) 可立即重新启动计时器。</param>
        <param name="period">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>更改计时器的启动时间和方法调用之间的间隔，用 64 位有符号整数度量时间间隔。</summary>
        <returns>
          如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次后调用的回调方法`dueTime`过后，并且之后每次指定的时间间隔内`period`间隔。  
  
 如果`dueTime`为零 (0)，则会立即调用回调方法。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，永远不会调用回调方法，计时器处于禁用状态，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定为正值`dueTime`。  
  
 如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，一次调用回调方法，计时器定期行为处于禁用状态，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定为正值`period`.  
  
 <xref:System.Threading.Timer.Change%2A>方法可以从调用<xref:System.Threading.TimerCallback>委托。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 已被释放。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 参数小于 -1。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 参数大于 4294967294。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">一个 <see cref="T:System.TimeSpan" />，表示在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量。 指定负 -1 毫秒以防止计时器重新启动。 指定零 (0) 可立即重新启动计时器。</param>
        <param name="period">在构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法调用之间的时间间隔。 指定 -1 毫秒可以禁用定期终止。</param>
        <summary>更改计时器的启动时间和方法调用之间的时间间隔，使用 <see cref="T:System.TimeSpan" /> 值度量时间间隔。</summary>
        <returns>
          如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次后调用的回调方法`dueTime`过后，并且之后每次指定的时间间隔内`period`间隔。  
  
 如果`dueTime`为零 (0)，则会立即调用回调方法。 如果`dueTime`为负一 (-1) 毫秒，永远不会调用回调方法，计时器处于禁用状态，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定为正值`dueTime`。  
  
 如果`period`是零 (0) 或负一 (-1) 毫秒，和`dueTime`为正、 回调方法会调用一次; 处于禁用状态，但可以通过调用重新启用它的计时器定期行为<xref:System.Threading.Timer.Change%2A>并指定一个值大于对于该值为零`period`。  
  
 <xref:System.Threading.Timer.Change%2A>方法可以从调用<xref:System.Threading.TimerCallback>委托。  
  
   
  
## Examples  
 下面的代码示例演示如何开始`Timer`以及在多次调用后更改其周期。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 已被释放。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 参数（单位为毫秒）小于 -1。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 参数（单位为毫秒）大于 4294967294。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。 指定零 (0) 可立即重新启动计时器。</param>
        <param name="period">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
        <summary>更改计时器的启动时间和方法调用之间的间隔，用 32 位无符号整数度量时间间隔。</summary>
        <returns>
          如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次后调用的回调方法`dueTime`过后，并且之后每次指定的时间间隔内`period`间隔。  
  
 如果`dueTime`为零 (0)，则会立即调用回调方法。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，永远不会调用回调方法，计时器处于禁用状态，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定为正值`dueTime`。  
  
 如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，一次调用回调方法，计时器定期行为处于禁用状态，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定为正值`period`.  
  
 <xref:System.Threading.Timer.Change%2A>方法可以从调用<xref:System.Threading.TimerCallback>委托。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 已被释放。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放由 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用`Dispose`允许使用的资源<xref:System.Threading.Timer>可以重新分配用于其他目的。 有关详细信息`Dispose`，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。  
  
> [!NOTE]
>  回调可能发生后<xref:System.Threading.Timer.Dispose>已调用方法重载，因为计时器是按线程池线程来安排回调的执行。 你可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法重载来等待，直到完成所有的回调。  
  
   
  
## Examples  
 下面的代码示例说明如何释放由持有的资源`Timer`。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject">释放完 <see langword="Timer" /> 时要发出其信号的 <see cref="T:System.Threading.WaitHandle" />。</param>
        <summary>释放 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源并在释放完计时器时发出信号。</summary>
        <returns>
          如果函数成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用`Dispose`允许使用的资源<xref:System.Threading.Timer>可以重新分配用于其他目的。 有关详细信息`Dispose`，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。  
  
 此方法完成时，它发出信号，<xref:System.Threading.WaitHandle>指定的`notifyObject`参数。请使用此重载<xref:System.Threading.Timer.Dispose%2A>方法如果你希望能够进行阻止，直到您确信计时器已被释放。 完成所有当前排队的回调之前，计时器不会被释放。  
  
> [!NOTE]
>  如果回调使用<xref:System.Threading.Timer.Change%2A>方法以设置`dueTime`参数为零，可能会发生争用问题时<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>调用方法重载： 如果计时器队列之前的新回调<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法重载检测到存在要排队发送没有回调，<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>继续阻止; 而新的回调正在排队，与否则，处理计时器<xref:System.ObjectDisposedException>新回调调用时，将引发<xref:System.Threading.Timer.Change%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="notifyObject" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>