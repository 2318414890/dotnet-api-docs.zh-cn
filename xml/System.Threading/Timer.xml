<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="565a536e43f9a27fd9fc22449e23dcf0b112f8fa" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52213658" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="84347-101">提供以指定的时间间隔对线程池线程执行方法的机制。</span><span class="sxs-lookup"><span data-stu-id="84347-101">Provides a mechanism for executing a method on a thread pool thread at specified intervals.</span></span> <span data-ttu-id="84347-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="84347-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-103">使用<xref:System.Threading.TimerCallback>委托来指定所需的方法<xref:System.Threading.Timer>执行。</span><span class="sxs-lookup"><span data-stu-id="84347-103">Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute.</span></span> <span data-ttu-id="84347-104">签名<xref:System.Threading.TimerCallback>委托是：</span><span class="sxs-lookup"><span data-stu-id="84347-104">The signature of the <xref:System.Threading.TimerCallback> delegate is:</span></span>  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 <span data-ttu-id="84347-105">计时器构造的并且不能更改时，指定计时器委托。</span><span class="sxs-lookup"><span data-stu-id="84347-105">The timer delegate is specified when the timer is constructed, and cannot be changed.</span></span> <span data-ttu-id="84347-106">该方法不会创建计时器; 的线程上执行它对执行<xref:System.Threading.ThreadPool>由系统提供的线程。</span><span class="sxs-lookup"><span data-stu-id="84347-106">The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.</span></span>  
  
> [!TIP]
> <span data-ttu-id="84347-107">.NET 包括四个类名为`Timer`，每个的它提供了不同的功能：</span><span class="sxs-lookup"><span data-stu-id="84347-107">.NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>
> - <span data-ttu-id="84347-108"><xref:System.Timers.Timer?displayProperty=nameWithType>它触发事件并执行的代码中一个或多个事件接收器按固定间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, which fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="84347-109">类适用于作为基于服务器的使用或在多线程环境; 中的服务组件它没有用户界面并不是在运行时中可见。</span><span class="sxs-lookup"><span data-stu-id="84347-109">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="84347-110"><xref:System.Threading.Timer?displayProperty=nameWithType>其中按固定间隔在线程池线程上执行的单个回调方法。</span><span class="sxs-lookup"><span data-stu-id="84347-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, which executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="84347-111">当计时器实例化，并且不能更改定义的回调方法。</span><span class="sxs-lookup"><span data-stu-id="84347-111">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="84347-112">如<xref:System.Timers.Timer?displayProperty=nameWithType>类，此类旨在为基于服务器或服务组件在多线程环境中使用; 它没有用户界面并不是在运行时中可见。</span><span class="sxs-lookup"><span data-stu-id="84347-112">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="84347-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (仅在.NET framework 中)，触发事件并在固定时间间隔的一个或多个事件接收器中执行代码的 Windows 窗体组件。</span><span class="sxs-lookup"><span data-stu-id="84347-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only), a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="84347-114">该组件没有用户界面，专供在单线程环境中;它在 UI 线程上执行。</span><span class="sxs-lookup"><span data-stu-id="84347-114">The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.</span></span>
> - <span data-ttu-id="84347-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (仅在.NET framework 中)，按固定时间间隔执行异步或同步网页回发的 ASP.NET 组件。</span><span class="sxs-lookup"><span data-stu-id="84347-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only), an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>
  
 <span data-ttu-id="84347-116">创建计时器时，可以指定方法的第一次执行之前要等待的时间量 （截止时间），并等待后续执行 （句点） 之间的时间量。</span><span class="sxs-lookup"><span data-stu-id="84347-116">When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).</span></span> <span data-ttu-id="84347-117"><xref:System.Threading.Timer>类具有相同的系统时钟的分辨率。</span><span class="sxs-lookup"><span data-stu-id="84347-117">The <xref:System.Threading.Timer> class has the same resolution as the system clock.</span></span> <span data-ttu-id="84347-118">这意味着，如果段小于系统时钟的分辨率<xref:System.Threading.TimerCallback>将按定义的系统时钟，大约 15 毫秒，在 Windows 7 和 Windows 8 系统的解决方法的时间间隔执行的委托。</span><span class="sxs-lookup"><span data-stu-id="84347-118">This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.</span></span> <span data-ttu-id="84347-119">您可以更改到期时间和时间或禁用该计时器，通过使用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-119">You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="84347-120">只要您使用<xref:System.Threading.Timer>，必须保留对它的引用。</span><span class="sxs-lookup"><span data-stu-id="84347-120">As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it.</span></span> <span data-ttu-id="84347-121">与任何托管对象一样<xref:System.Threading.Timer>当不没有对它的任何引用时才进行垃圾收集。</span><span class="sxs-lookup"><span data-stu-id="84347-121">As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it.</span></span> <span data-ttu-id="84347-122">这一事实，<xref:System.Threading.Timer>是仍处于活动状态不会阻止它正在收集。</span><span class="sxs-lookup"><span data-stu-id="84347-122">The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.</span></span>  
  
 <span data-ttu-id="84347-123">当不再需要计时器时，使用<xref:System.Threading.Timer.Dispose%2A>方法来释放资源持有的计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-123">When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer.</span></span> <span data-ttu-id="84347-124">请注意，回调可能发生后<xref:System.Threading.Timer.Dispose>已调用方法重载，因为计时器队列的线程池线程执行的回调。</span><span class="sxs-lookup"><span data-stu-id="84347-124">Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="84347-125">可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法重载来等待，直到所有回调都已都完成。</span><span class="sxs-lookup"><span data-stu-id="84347-125">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
 <span data-ttu-id="84347-126">执行由计时器的回调方法应为可重入，因为上调用<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="84347-126">The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="84347-127">回调可以同时执行两个线程池线程上计时器间隔是否小于执行回调，所需的时间，或者如果所有线程池线程都正在使用且回调已排队多次。</span><span class="sxs-lookup"><span data-stu-id="84347-127">The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="84347-128"><xref:System.Threading.Timer?displayProperty=nameWithType> 是一个简单、 轻型计时器，它使用回叫方法，并由线程池线程提供服务。</span><span class="sxs-lookup"><span data-stu-id="84347-128"><xref:System.Threading.Timer?displayProperty=nameWithType> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.</span></span> <span data-ttu-id="84347-129">它不被建议用于 Windows 窗体，因为其回调不会在用户界面线程上发生。</span><span class="sxs-lookup"><span data-stu-id="84347-129">It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.</span></span> <span data-ttu-id="84347-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> 是用于 Windows 窗体更好的选择。</span><span class="sxs-lookup"><span data-stu-id="84347-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> is a better choice for use with Windows Forms.</span></span> <span data-ttu-id="84347-131">对于基于服务器的计时器的功能，则可以考虑使用<xref:System.Timers.Timer?displayProperty=nameWithType>，它会引发事件，并具有附加功能。</span><span class="sxs-lookup"><span data-stu-id="84347-131">For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=nameWithType>, which raises events and has additional features.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84347-132">下面的示例定义`StatusChecker`类，其中包括`CheckStatus`其签名是相同的方法作为<xref:System.Threading.TimerCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="84347-132">The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate.</span></span> <span data-ttu-id="84347-133">`state`的参数`CheckStatus`方法是<xref:System.Threading.AutoResetEvent>用于同步的应用程序线程和线程池线程的执行回调的委托的对象。</span><span class="sxs-lookup"><span data-stu-id="84347-133">The  `state` argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate.</span></span> <span data-ttu-id="84347-134">`StatusChecker`类还包括两个状态变量：</span><span class="sxs-lookup"><span data-stu-id="84347-134">The `StatusChecker` class also includes two state variables:</span></span>  
  
 `invokeCount`  
 <span data-ttu-id="84347-135">指示在调用回调方法的次数。</span><span class="sxs-lookup"><span data-stu-id="84347-135">Indicates the number of times the callback method has been invoked.</span></span>  
  
 `maxCount`  
 <span data-ttu-id="84347-136">确定应调用回调方法最大次数。</span><span class="sxs-lookup"><span data-stu-id="84347-136">Determines the maximum number of times the callback method should be invoked.</span></span>  
  
 <span data-ttu-id="84347-137">在应用程序线程创建的计时器的等待 1 秒，然后执行`CheckStatus`回调方法每隔 250 毫秒。</span><span class="sxs-lookup"><span data-stu-id="84347-137">The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds.</span></span> <span data-ttu-id="84347-138">然后阻止的应用程序线程，直到<xref:System.Threading.AutoResetEvent>对象发出信号。</span><span class="sxs-lookup"><span data-stu-id="84347-138">The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="84347-139">当`CheckStatus`回调方法执行`maxCount`次，它将调用`AutoResetEvent.Set`方法设置的状态<xref:System.Threading.AutoResetEvent>对象发出信号。</span><span class="sxs-lookup"><span data-stu-id="84347-139">When the `CheckStatus` callback method executes `maxCount` times, it calls the `AutoResetEvent.Set` method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled.</span></span> <span data-ttu-id="84347-140">第一次发生这种情况，该应用程序线程在调用<xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29>方法，以便现在执行回调方法的每个半秒。</span><span class="sxs-lookup"><span data-stu-id="84347-140">The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second.</span></span> <span data-ttu-id="84347-141">它再一次进行阻止，直到<xref:System.Threading.AutoResetEvent>对象发出信号。</span><span class="sxs-lookup"><span data-stu-id="84347-141">It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="84347-142">在此情况下，通过调用销毁计时器其<xref:System.Threading.Timer.Dispose%2A>方法，并在应用程序终止。</span><span class="sxs-lookup"><span data-stu-id="84347-142">When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="84347-143">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="84347-143">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-144">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-144">Timers</span></span></related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="84347-145">托管线程池</span><span class="sxs-lookup"><span data-stu-id="84347-145">The Managed Thread Pool</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="84347-146">初始化 <see langword="Timer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="84347-146">Initializes a new instance of the <see langword="Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="84347-147">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</span><span class="sxs-lookup"><span data-stu-id="84347-147">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <summary><span data-ttu-id="84347-148">使用新创建的 <see cref="T:System.Threading.Timer" /> 对象作为状态对象，用一个无限周期和一个无限到期时间初始化 <see cref="T:System.Threading.Timer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="84347-148">Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite period and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-149">调用此构造函数，当你想要使用<xref:System.Threading.Timer>对象作为状态对象。</span><span class="sxs-lookup"><span data-stu-id="84347-149">Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object.</span></span> <span data-ttu-id="84347-150">创建计时器之后, 使用<xref:System.Threading.Timer.Change%2A>方法以设置间隔和到期时间。</span><span class="sxs-lookup"><span data-stu-id="84347-150">After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.</span></span>  
  
 <span data-ttu-id="84347-151">此构造函数指定一个无限到期时间之前第一次回调以及回调，以防止第一次回调之前出现无限间隔<xref:System.Threading.Timer>对象分配给状态对象。</span><span class="sxs-lookup"><span data-stu-id="84347-151">This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.</span></span>  
  
 <span data-ttu-id="84347-152">为指定的方法`callback`应为可重入，因为上调用<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="84347-152">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="84347-153">该方法可以同时执行两个线程池线程上计时器间隔是否小于执行该方法所需的时间，或者如果正在使用中的所有线程池线程，该方法进行排队多次。</span><span class="sxs-lookup"><span data-stu-id="84347-153">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84347-154">下面的代码示例创建一个新的计时器，使用计时器本身作为状态对象。</span><span class="sxs-lookup"><span data-stu-id="84347-154">The following code example creates a new timer, using the timer itself as the state object.</span></span> <span data-ttu-id="84347-155"><xref:System.Threading.Timer.Change%2A>方法用于启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-155">The <xref:System.Threading.Timer.Change%2A> method is used to start the timer.</span></span> <span data-ttu-id="84347-156">计时器回调时，状态对象用于将计时器关闭。</span><span class="sxs-lookup"><span data-stu-id="84347-156">When the timer callback occurs, the state object is used to turn the timer off.</span></span>  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="84347-157">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</span><span class="sxs-lookup"><span data-stu-id="84347-157">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="84347-158">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84347-158">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="84347-159">调用 <paramref name="callback" /> 之前延迟的时间量（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-159">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="84347-160">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-160">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="84347-161">指定零 (0) 可立即启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-161">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="84347-162">调用 <paramref name="callback" /> 的时间间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-162">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="84347-163">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</span><span class="sxs-lookup"><span data-stu-id="84347-163">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="84347-164">使用 32 位的有符号整数指定时间间隔，初始化 <see langword="Timer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="84347-164">Initializes a new instance of the <see langword="Timer" /> class, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-165">所指定的委托`callback`参数调用一次后`dueTime`过去，且以后每次`period`时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-165">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="84347-166">如果`dueTime`为零 (0)，`callback`则会立即调用。</span><span class="sxs-lookup"><span data-stu-id="84347-166">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="84347-167">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不会调用; 计时器已禁用，但可以通过调用重新启用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-167">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="84347-168">因为<xref:System.Threading.Timer>类具有相同的分辨率大约为 15 毫秒在 Windows 7 和 Windows 8 系统上的，系统时钟`callback`委托执行按时间间隔如果定义的系统时钟的分辨率`period`小于系统时钟的分辨率。</span><span class="sxs-lookup"><span data-stu-id="84347-168">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="84347-169">如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>并`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`调用一次的计时器定期行为已禁用，但可以使用重新启用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-169">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="84347-170">为指定的方法`callback`应为可重入，因为上调用<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="84347-170">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="84347-171">该方法可以同时执行两个线程池线程上计时器间隔是否小于执行该方法所需的时间，或者如果正在使用中的所有线程池线程，该方法进行排队多次。</span><span class="sxs-lookup"><span data-stu-id="84347-171">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84347-172">下面的代码示例演示如何创建`TimerCallback`委托和初始化的新实例`Timer`类。</span><span class="sxs-lookup"><span data-stu-id="84347-172">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="84347-173"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</span><span class="sxs-lookup"><span data-stu-id="84347-173">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84347-174"><paramref name="callback" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84347-174">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-175">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-175">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="84347-176">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</span><span class="sxs-lookup"><span data-stu-id="84347-176">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="84347-177">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84347-177">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="84347-178">调用 <paramref name="callback" /> 之前延迟的时间量（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-178">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="84347-179">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-179">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="84347-180">指定零 (0) 可立即启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-180">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="84347-181">调用 <paramref name="callback" /> 的时间间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-181">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="84347-182">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</span><span class="sxs-lookup"><span data-stu-id="84347-182">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="84347-183">用 64 位有符号整数来度量时间间隔，以初始化 <see langword="Timer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="84347-183">Initializes a new instance of the <see langword="Timer" /> class, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-184">所指定的委托`callback`参数调用一次后`dueTime`过去，且以后每次`period`时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-184">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="84347-185">如果`dueTime`为零 (0)，`callback`则会立即调用。</span><span class="sxs-lookup"><span data-stu-id="84347-185">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="84347-186">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不会调用; 计时器已禁用，但可以通过调用重新启用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-186">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="84347-187">因为<xref:System.Threading.Timer>类具有相同的分辨率大约为 15 毫秒在 Windows 7 和 Windows 8 系统上的，系统时钟`callback`委托执行按时间间隔如果定义的系统时钟的分辨率`period`小于系统时钟的分辨率。</span><span class="sxs-lookup"><span data-stu-id="84347-187">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="84347-188">如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>并`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`调用一次的计时器定期行为已禁用，但可以使用重新启用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-188">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="84347-189">为指定的方法`callback`应为可重入，因为上调用<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="84347-189">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="84347-190">该方法可以同时执行两个线程池线程上计时器间隔是否小于执行该方法所需的时间，或者如果正在使用中的所有线程池线程，该方法进行排队多次。</span><span class="sxs-lookup"><span data-stu-id="84347-190">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="84347-191"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</span><span class="sxs-lookup"><span data-stu-id="84347-191">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="84347-192"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数大于 4294967294。</span><span class="sxs-lookup"><span data-stu-id="84347-192">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-193">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-193">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="84347-194">表示要执行的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="84347-194">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="84347-195">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84347-195">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="84347-196">在 <paramref name="callback" /> 参数调用其方法之前要延迟的时间量。</span><span class="sxs-lookup"><span data-stu-id="84347-196">The amount of time to delay before the <paramref name="callback" /> parameter invokes its methods.</span></span> <span data-ttu-id="84347-197">指定 -1 毫秒以防止启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-197">Specify negative one (-1) milliseconds to prevent the timer from starting.</span></span> <span data-ttu-id="84347-198">指定零 (0) 可立即启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-198">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="84347-199">在调用 <paramref name="callback" /> 所引用的方法之间的时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-199">The time interval between invocations of the methods referenced by <paramref name="callback" />.</span></span> <span data-ttu-id="84347-200">指定 -1 毫秒可以禁用定期终止。</span><span class="sxs-lookup"><span data-stu-id="84347-200">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="84347-201">初始化 <see langword="Timer" /> 类的新实例，使用 <see cref="T:System.TimeSpan" /> 值来度量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-201">Initializes a new instance of the <see langword="Timer" /> class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-202">所指定的委托`callback`参数调用一次后`dueTime`过去，且以后每次`period`时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-202">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="84347-203">如果`dueTime`为零 (0)，`callback`则会立即调用。</span><span class="sxs-lookup"><span data-stu-id="84347-203">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="84347-204">如果`dueTime`为负一 (-1) 毫秒，`callback`不会调用; 计时器已禁用，但可以通过调用重新启用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-204">If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="84347-205">因为<xref:System.Threading.Timer>类具有相同的分辨率大约为 15 毫秒在 Windows 7 和 Windows 8 系统上的，系统时钟`callback`委托执行按时间间隔如果定义的系统时钟的分辨率`period`小于系统时钟的分辨率。</span><span class="sxs-lookup"><span data-stu-id="84347-205">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="84347-206">如果`period`是零 (0) 或负一 (-1) 毫秒并`dueTime`为正，`callback`调用一次的计时器定期行为已禁用，但可以使用重新启用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-206">If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="84347-207">为指定的方法`callback`应为可重入，因为上调用<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="84347-207">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="84347-208">该方法可以同时执行两个线程池线程上计时器间隔是否小于执行该方法所需的时间，或者如果正在使用中的所有线程池线程，该方法进行排队多次。</span><span class="sxs-lookup"><span data-stu-id="84347-208">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84347-209">下面的代码示例演示如何创建`TimerCallback`委托和初始化的新实例`Timer`类。</span><span class="sxs-lookup"><span data-stu-id="84347-209">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="84347-210"><paramref name="dueTime" /> 或 <paramref name="period" /> 值中的毫秒数为负并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />，或者大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="84347-210">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84347-211"><paramref name="callback" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84347-211">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-212">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-212">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="84347-213">表示要执行的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="84347-213">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="84347-214">一个包含回调方法要使用的信息的对象，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84347-214">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="84347-215">调用 <paramref name="callback" /> 之前延迟的时间量（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-215">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="84347-216">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-216">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="84347-217">指定零 (0) 可立即启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-217">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="84347-218">调用 <paramref name="callback" /> 的时间间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-218">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="84347-219">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</span><span class="sxs-lookup"><span data-stu-id="84347-219">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="84347-220">用 32 位无符号整数来度量时间间隔，以初始化 <see langword="Timer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="84347-220">Initializes a new instance of the <see langword="Timer" /> class, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-221">所指定的委托`callback`参数调用一次后`dueTime`过去，且以后每次`period`时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-221">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="84347-222">如果`dueTime`为零 (0)，`callback`则会立即调用。</span><span class="sxs-lookup"><span data-stu-id="84347-222">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="84347-223">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不会调用; 计时器已禁用，但可以通过调用重新启用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-223">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="84347-224">因为<xref:System.Threading.Timer>类具有相同的分辨率大约为 15 毫秒在 Windows 7 和 Windows 8 系统上的，系统时钟`callback`委托执行按时间间隔如果定义的系统时钟的分辨率`period`小于系统时钟的分辨率。</span><span class="sxs-lookup"><span data-stu-id="84347-224">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="84347-225">如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>并`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`调用一次的计时器定期行为已禁用，但可以使用重新启用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-225">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="84347-226">为指定的方法`callback`应为可重入，因为上调用<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="84347-226">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="84347-227">该方法可以同时执行两个线程池线程上计时器间隔是否小于执行该方法所需的时间，或者如果正在使用中的所有线程池线程，该方法进行排队多次。</span><span class="sxs-lookup"><span data-stu-id="84347-227">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="84347-228"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</span><span class="sxs-lookup"><span data-stu-id="84347-228">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84347-229"><paramref name="callback" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84347-229">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-230">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-230">Timers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="84347-231">更改计时器的启动时间和方法调用之间的间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-231">Changes the start time and the interval between method invocations for a timer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="84347-232">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-232">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="84347-233">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-233">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="84347-234">指定零 (0) 可立即重新启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-234">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="84347-235">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-235">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="84347-236">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</span><span class="sxs-lookup"><span data-stu-id="84347-236">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="84347-237">更改计时器的启动时间和方法调用之间的间隔，用 32 位有符号整数度量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-237">Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="84347-238">如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84347-238"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-239">回调方法调用一次后`dueTime`过去，且以后每次指定的时间间隔`period`结束。</span><span class="sxs-lookup"><span data-stu-id="84347-239">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="84347-240">如果`dueTime`为零 (0)，则会立即调用回调方法。</span><span class="sxs-lookup"><span data-stu-id="84347-240">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="84347-241">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则绝不会调用回调方法; 禁用该计时器，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定一个正值`dueTime`。</span><span class="sxs-lookup"><span data-stu-id="84347-241">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="84347-242">如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，并`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回调方法调用一次; 已禁用的计时器定期行为，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定一个正值`period`.</span><span class="sxs-lookup"><span data-stu-id="84347-242">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="84347-243"><xref:System.Threading.Timer.Change%2A>方法可以从调用<xref:System.Threading.TimerCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="84347-243">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84347-244">下面的代码示例演示了如何启动`Timer`和多次调用后更改其周期。</span><span class="sxs-lookup"><span data-stu-id="84347-244">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="84347-245"><see cref="T:System.Threading.Timer" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="84347-245">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="84347-246"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</span><span class="sxs-lookup"><span data-stu-id="84347-246">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-247">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-247">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="84347-248">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-248">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="84347-249">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-249">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="84347-250">指定零 (0) 可立即重新启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-250">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="84347-251">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-251">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="84347-252">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</span><span class="sxs-lookup"><span data-stu-id="84347-252">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="84347-253">更改计时器的启动时间和方法调用之间的间隔，用 64 位有符号整数度量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-253">Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="84347-254">如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84347-254"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-255">回调方法调用一次后`dueTime`过去，且以后每次指定的时间间隔`period`结束。</span><span class="sxs-lookup"><span data-stu-id="84347-255">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="84347-256">如果`dueTime`为零 (0)，则会立即调用回调方法。</span><span class="sxs-lookup"><span data-stu-id="84347-256">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="84347-257">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则绝不会调用回调方法; 禁用该计时器，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定一个正值`dueTime`。</span><span class="sxs-lookup"><span data-stu-id="84347-257">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="84347-258">如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，并`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回调方法调用一次; 已禁用的计时器定期行为，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定一个正值`period`.</span><span class="sxs-lookup"><span data-stu-id="84347-258">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="84347-259"><xref:System.Threading.Timer.Change%2A>方法可以从调用<xref:System.Threading.TimerCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="84347-259">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="84347-260"><see cref="T:System.Threading.Timer" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="84347-260">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="84347-261"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数小于 -1。</span><span class="sxs-lookup"><span data-stu-id="84347-261">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="84347-262"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数大于 4294967294。</span><span class="sxs-lookup"><span data-stu-id="84347-262">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-263">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-263">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="84347-264">一个 <see cref="T:System.TimeSpan" />，表示在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量。</span><span class="sxs-lookup"><span data-stu-id="84347-264">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="84347-265">指定负 -1 毫秒以防止计时器重新启动。</span><span class="sxs-lookup"><span data-stu-id="84347-265">Specify negative one (-1) milliseconds to prevent the timer from restarting.</span></span> <span data-ttu-id="84347-266">指定零 (0) 可立即重新启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-266">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="84347-267">在构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法调用之间的时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-267">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="84347-268">指定 -1 毫秒可以禁用定期终止。</span><span class="sxs-lookup"><span data-stu-id="84347-268">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="84347-269">更改计时器的启动时间和方法调用之间的时间间隔，使用 <see cref="T:System.TimeSpan" /> 值度量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-269">Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="84347-270">如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84347-270"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-271">回调方法调用一次后`dueTime`过去，且以后每次指定的时间间隔`period`结束。</span><span class="sxs-lookup"><span data-stu-id="84347-271">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="84347-272">如果`dueTime`为零 (0)，则会立即调用回调方法。</span><span class="sxs-lookup"><span data-stu-id="84347-272">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="84347-273">如果`dueTime`为负一 (-1) 毫秒，永远不会调用回调方法; 禁用该计时器，但可以重新启用通过调用<xref:System.Threading.Timer.Change%2A>并指定一个正值`dueTime`。</span><span class="sxs-lookup"><span data-stu-id="84347-273">If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="84347-274">如果`period`是零 (0) 或负一 (-1) 毫秒，并`dueTime`为正，回调方法调用一次; 的计时器定期行为已禁用，但可以通过调用重新启用<xref:System.Threading.Timer.Change%2A>并指定一个值大于对于该值为零`period`。</span><span class="sxs-lookup"><span data-stu-id="84347-274">If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.</span></span>  
  
 <span data-ttu-id="84347-275"><xref:System.Threading.Timer.Change%2A>方法可以从调用<xref:System.Threading.TimerCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="84347-275">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84347-276">下面的代码示例演示了如何启动`Timer`和多次调用后更改其周期。</span><span class="sxs-lookup"><span data-stu-id="84347-276">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="84347-277"><see cref="T:System.Threading.Timer" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="84347-277">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="84347-278"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数（单位为毫秒）小于 -1。</span><span class="sxs-lookup"><span data-stu-id="84347-278">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="84347-279"><paramref name="dueTime" /> 或 <paramref name="period" /> 参数（单位为毫秒）大于 4294967294。</span><span class="sxs-lookup"><span data-stu-id="84347-279">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-280">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-280">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="84347-281">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-281">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="84347-282">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-282">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="84347-283">指定零 (0) 可立即重新启动计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-283">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="84347-284">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="84347-284">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="84347-285">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</span><span class="sxs-lookup"><span data-stu-id="84347-285">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="84347-286">更改计时器的启动时间和方法调用之间的间隔，用 32 位无符号整数度量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="84347-286">Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="84347-287">如果计时器更新成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84347-287"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-288">回调方法调用一次后`dueTime`过去，且以后每次指定的时间间隔`period`结束。</span><span class="sxs-lookup"><span data-stu-id="84347-288">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="84347-289">如果`dueTime`为零 (0)，则会立即调用回调方法。</span><span class="sxs-lookup"><span data-stu-id="84347-289">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="84347-290">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，则绝不会调用回调方法; 禁用该计时器，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定一个正值`dueTime`。</span><span class="sxs-lookup"><span data-stu-id="84347-290">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="84347-291">如果`period`为零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，并`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回调方法调用一次; 已禁用的计时器定期行为，但可以通过调用来重新启用<xref:System.Threading.Timer.Change%2A>并指定一个正值`period`.</span><span class="sxs-lookup"><span data-stu-id="84347-291">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="84347-292"><xref:System.Threading.Timer.Change%2A>方法可以从调用<xref:System.Threading.TimerCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="84347-292">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="84347-293"><see cref="T:System.Threading.Timer" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="84347-293">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-294">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-294">Timers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="84347-295">释放由 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="84347-295">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84347-296">释放由 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="84347-296">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-297">调用`Dispose`允许使用的资源<xref:System.Threading.Timer>重新分配用于其他目的。</span><span class="sxs-lookup"><span data-stu-id="84347-297">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="84347-298">有关详细信息`Dispose`，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="84347-298">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="84347-299">回调可能发生后<xref:System.Threading.Timer.Dispose>已调用方法重载，因为计时器队列的线程池线程执行的回调。</span><span class="sxs-lookup"><span data-stu-id="84347-299">Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="84347-300">可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法重载来等待，直到所有回调都已都完成。</span><span class="sxs-lookup"><span data-stu-id="84347-300">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84347-301">下面的代码示例说明如何释放占用的资源`Timer`。</span><span class="sxs-lookup"><span data-stu-id="84347-301">The following code example shows how to free the resources held by a `Timer`.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-302">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-302">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><span data-ttu-id="84347-303">释放完 <see langword="Timer" /> 时要发出其信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="84347-303">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of.</span></span></param>
        <summary><span data-ttu-id="84347-304">释放 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源并在释放完计时器时发出信号。</span><span class="sxs-lookup"><span data-stu-id="84347-304">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</span></span></summary>
        <returns><span data-ttu-id="84347-305">如果函数成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84347-305"><see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84347-306">调用`Dispose`允许使用的资源<xref:System.Threading.Timer>重新分配用于其他目的。</span><span class="sxs-lookup"><span data-stu-id="84347-306">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="84347-307">有关详细信息`Dispose`，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="84347-307">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="84347-308">当此方法完成时，它指示<xref:System.Threading.WaitHandle>指定的`notifyObject`参数。请使用此重载<xref:System.Threading.Timer.Dispose%2A>方法如果你希望能够进行阻止，直到您确信计时器已释放。</span><span class="sxs-lookup"><span data-stu-id="84347-308">When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed.</span></span> <span data-ttu-id="84347-309">完成所有当前排队的回调之前，不会释放计时器。</span><span class="sxs-lookup"><span data-stu-id="84347-309">The timer is not disposed until all currently queued callbacks have completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="84347-310">如果使用回调<xref:System.Threading.Timer.Change%2A>方法以设置`dueTime`参数为零，可能发生的争用条件时<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>调用方法重载： 如果计时器队列之前新回调<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法重载检测到存在要排队发送任何回调，<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>继续阻止; 否则，而新回调正在排队，并释放计时器<xref:System.ObjectDisposedException>新的回调调用时，将引发<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84347-310">If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84347-311"><paramref name="notifyObject" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84347-311">The <paramref name="notifyObject" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="84347-312">计时器</span><span class="sxs-lookup"><span data-stu-id="84347-312">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>