<Type Name="ThreadStart" FullName="System.Threading.ThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17a59b7c976aace5daa84c3d6d9014e03bed3de8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605592" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ThreadStart()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="F#" Value="type ThreadStart = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>
      <span data-ttu-id="e2e34-101">表示在 <see cref="T:System.Threading.Thread" /> 上执行的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e2e34-101">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e34-102">创建一个托管的线程时，由表示的线程执行的方法<xref:System.Threading.ThreadStart>委托或<xref:System.Threading.ParameterizedThreadStart>委托传递给<xref:System.Threading.Thread.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2e34-102">When a managed thread is created, the method that executes on the thread is represented by a <xref:System.Threading.ThreadStart> delegate or a <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%2A> constructor.</span></span> <span data-ttu-id="e2e34-103">线程不会开始执行之前<xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType>调用方法。</span><span class="sxs-lookup"><span data-stu-id="e2e34-103">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="e2e34-104">在所表示的方法的第一行开始执行<xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>委托。</span><span class="sxs-lookup"><span data-stu-id="e2e34-104">Execution begins at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e2e34-105">Visual Basic 和 C# 用户可以省略<xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>委托构造函数创建线程时。</span><span class="sxs-lookup"><span data-stu-id="e2e34-105">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="e2e34-106">在 Visual Basic 中，使用`AddressOf`运算符传递到你的方法时<xref:System.Threading.Thread.%23ctor%2A>构造函数; 例如， `Dim t As New Thread(AddressOf ThreadProc)`。</span><span class="sxs-lookup"><span data-stu-id="e2e34-106">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="e2e34-107">在 C# 中，只需指定线程过程的名称。</span><span class="sxs-lookup"><span data-stu-id="e2e34-107">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="e2e34-108">编译器选择正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2e34-108">The compiler selects the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="e2e34-109">[C++]</span><span class="sxs-lookup"><span data-stu-id="e2e34-109">[C++]</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e2e34-110">在 2.0 版中的.NET Framework 中，创建<xref:System.Threading.ThreadStart>委托 for c + + 中的静态方法要求只有一个参数： 回调方法中，由类名称限定的地址。</span><span class="sxs-lookup"><span data-stu-id="e2e34-110">In version 2.0 of the .NET Framework, creating a <xref:System.Threading.ThreadStart> delegate for a static method in C++ requires only one parameter: the address of the callback method, qualified by the class name.</span></span> <span data-ttu-id="e2e34-111">在早期版本中两个参数均需要时创建的静态方法的委托： 零 (null) 和方法的地址。</span><span class="sxs-lookup"><span data-stu-id="e2e34-111">In earlier versions two parameters were required when creating a delegate for a static method: zero (null) and the method address.</span></span> <span data-ttu-id="e2e34-112">对于实例方法，所有版本都需要两个参数： 实例变量和方法的地址。</span><span class="sxs-lookup"><span data-stu-id="e2e34-112">For an instance method, all versions require two parameters: the instance variable and the method address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e34-113">下面的代码示例演示了创建和使用的语法<xref:System.Threading.ThreadStart>委托的实例方法和静态方法。</span><span class="sxs-lookup"><span data-stu-id="e2e34-113">The following code example shows the syntax for creating and using a <xref:System.Threading.ThreadStart> delegate with an instance method and with a static method.</span></span>  
  
 <span data-ttu-id="e2e34-114">有关另一个简单示例，演示如何创建<xref:System.Threading.ThreadStart>委托，请参阅<xref:System.Threading.Thread.Start?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="e2e34-114">For another simple example that demonstrates how to create a <xref:System.Threading.ThreadStart> delegate, see the <xref:System.Threading.Thread.Start?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="e2e34-115">有关线程创建的详细信息，请参阅[创建线程并在启动时传递数据](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)。</span><span class="sxs-lookup"><span data-stu-id="e2e34-115">For more information about thread creation, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 [!code-cpp[System.Threading.ThreadStart2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadStart2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadStart2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadStart2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ParameterizedThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>