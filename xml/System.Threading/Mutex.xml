<Type Name="Mutex" FullName="System.Threading.Mutex">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd4c660e875cb947efe1e1b0158a6ea434c2734a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609142" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Mutex : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Mutex extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Mutex" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Mutex&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Mutex sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Mutex = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c7601-101">A synchronization primitive that can also be used for interprocess synchronization.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c7601-101">A synchronization primitive that can also be used for interprocess synchronization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-102">当两个或多个线程需要在同一时间访问共享的资源时，系统将需要有同步机制来确保一次只有一个线程使用的资源。</span><span class="sxs-lookup"><span data-stu-id="c7601-102">When two or more threads need to access a shared resource at the same time, the system needs a synchronization mechanism to ensure that only one thread at a time uses the resource.</span></span> <span data-ttu-id="c7601-103"><xref:System.Threading.Mutex> 是一个同步基元，授予对共享资源为只有一个线程独占访问权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-103"><xref:System.Threading.Mutex> is a synchronization primitive that grants exclusive access to the shared resource to only one thread.</span></span> <span data-ttu-id="c7601-104">如果某一线程获取互斥体，想要获取该互斥体的第二个线程会挂起，直到第一个线程释放互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-104">If a thread acquires a mutex, the second thread that wants to acquire that mutex is suspended until the first thread releases the mutex.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c7601-105">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="c7601-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="c7601-106">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="c7601-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="c7601-107">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="c7601-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="c7601-108">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="c7601-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="c7601-109">有关详细信息，请参阅中的"使用对象实现 IDisposable"一节<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="c7601-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="c7601-110">可以使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>来请求所有权的互斥体的方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-110">You can use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method to request ownership of a mutex.</span></span> <span data-ttu-id="c7601-111">调用线程受到阻止，直到发生下列情况之一：</span><span class="sxs-lookup"><span data-stu-id="c7601-111">The calling thread blocks until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="c7601-112">互斥体是发出信号，以指示它不属于。</span><span class="sxs-lookup"><span data-stu-id="c7601-112">The mutex is signaled to indicate that it is not owned.</span></span> <span data-ttu-id="c7601-113">在此情况下，<xref:System.Threading.WaitHandle.WaitOne%2A>方法将返回`true`，调用线程是互斥体的所有权，并访问受该互斥体的资源。</span><span class="sxs-lookup"><span data-stu-id="c7601-113">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true`, and the calling thread assumes ownership of the mutex and accesses the resource protected by the mutex.</span></span> <span data-ttu-id="c7601-114">完成后访问资源，必须调用线程<xref:System.Threading.Mutex.ReleaseMutex%2A>方法来释放 mutex 的所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-114">When it has finished accessing the resource, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the mutex.</span></span> <span data-ttu-id="c7601-115">示例部分中的第一个示例说明了此模式。</span><span class="sxs-lookup"><span data-stu-id="c7601-115">The first example in the Examples section illustrates this pattern.</span></span>  
  
-   <span data-ttu-id="c7601-116">对的调用中指定的超时间隔<xref:System.Threading.WaitHandle.WaitOne%2A>具有方法`millisecondsTimeout`或`timeout`参数已过。</span><span class="sxs-lookup"><span data-stu-id="c7601-116">The time-out interval specified in the call to a <xref:System.Threading.WaitHandle.WaitOne%2A> method that has a `millisecondsTimeout` or `timeout` parameter has elapsed.</span></span> <span data-ttu-id="c7601-117">在此情况下，<xref:System.Threading.WaitHandle.WaitOne%2A>方法将返回`false`，并调用线程不会进一步尝试获取 mutex 的所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-117">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `false`, and the calling thread makes no further attempt to acquire ownership of the mutex.</span></span> <span data-ttu-id="c7601-118">在这种情况下，您应构建你的代码，以便由 mutex 保护资源的访问权限被拒绝对调用线程。</span><span class="sxs-lookup"><span data-stu-id="c7601-118">In this case, you should structure your code so that access to the resource that is protected by the mutex is denied to the calling thread.</span></span> <span data-ttu-id="c7601-119">线程永远不会获取 mutex 的所有权，因为它不能调用<xref:System.Threading.Mutex.ReleaseMutex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-119">Because the thread never acquired ownership of the mutex, it must not call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span> <span data-ttu-id="c7601-120">示例部分中的第二个示例说明了此模式。</span><span class="sxs-lookup"><span data-stu-id="c7601-120">The second example in the Examples section illustrates this pattern.</span></span>  
  
 <span data-ttu-id="c7601-121"><xref:System.Threading.Mutex>类强制线程标识，因此只能由获得它的线程可以释放互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-121">The <xref:System.Threading.Mutex> class enforces thread identity, so a mutex can be released only by the thread that acquired it.</span></span> <span data-ttu-id="c7601-122">与此相反，<xref:System.Threading.Semaphore>类不会强制线程标识。</span><span class="sxs-lookup"><span data-stu-id="c7601-122">By contrast, the <xref:System.Threading.Semaphore> class does not enforce thread identity.</span></span> <span data-ttu-id="c7601-123">此外可以跨应用程序域边界传递了互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-123">A mutex can also be passed across application domain boundaries.</span></span>  
  
 <span data-ttu-id="c7601-124">拥有 mutex 的线程可以请求中重复调用相同的互斥体<xref:System.Threading.WaitHandle.WaitOne%2A>而不会阻止其执行。</span><span class="sxs-lookup"><span data-stu-id="c7601-124">The thread that owns a mutex can request the same mutex in repeated calls to <xref:System.Threading.WaitHandle.WaitOne%2A> without blocking its execution.</span></span> <span data-ttu-id="c7601-125">但是，调用线程必须<xref:System.Threading.Mutex.ReleaseMutex%2A>方法相同数量的次数与释放 mutex 的所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-125">However, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="c7601-126">因为<xref:System.Threading.Mutex>类继承自<xref:System.Threading.WaitHandle>，你还可以调用静态<xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType>和<xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType>方法来同步受保护资源的访问权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-126">Because the <xref:System.Threading.Mutex> class inherits from <xref:System.Threading.WaitHandle>, you can also call the static <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> and <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> methods to synchronize access to a protected resource.</span></span>  
  
 <span data-ttu-id="c7601-127">如果线程终止时拥有互斥体，则认为该 mutex 已放弃。</span><span class="sxs-lookup"><span data-stu-id="c7601-127">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="c7601-128">互斥体的状态设置为终止状态，并且下一个等待线程获取所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-128">The state of the mutex is set to signaled, and the next waiting thread gets ownership.</span></span> <span data-ttu-id="c7601-129">从.NET Framework 的版本 2.0<xref:System.Threading.AbandonedMutexException>获取已放弃的互斥体的下一个线程中引发。</span><span class="sxs-lookup"><span data-stu-id="c7601-129">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the abandoned mutex.</span></span> <span data-ttu-id="c7601-130">在.NET Framework 2.0 版中之前, 未不引发任何异常。</span><span class="sxs-lookup"><span data-stu-id="c7601-130">Before version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="c7601-131">放弃的 mutex 通常表明代码中的存在严重错误。</span><span class="sxs-lookup"><span data-stu-id="c7601-131">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="c7601-132">线程退出时不释放互斥体，由 mutex 保护的数据结构不可能处于一致状态。</span><span class="sxs-lookup"><span data-stu-id="c7601-132">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="c7601-133">为请求 mutex 所有权的下一个线程可以处理此异常并继续操作，如果可以验证数据结构的完整性。</span><span class="sxs-lookup"><span data-stu-id="c7601-133">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="c7601-134">对于系统范围的 mutex，放弃的 mutex 可能指示应用程序已突然终止（例如，通过使用 Windows 任务管理器终止）。</span><span class="sxs-lookup"><span data-stu-id="c7601-134">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
 <span data-ttu-id="c7601-135">Mutex 有两种类型： 本地 mutex，未命名，并命名系统 mutex。</span><span class="sxs-lookup"><span data-stu-id="c7601-135">Mutexes are of two types: local mutexes, which are unnamed, and named system mutexes.</span></span> <span data-ttu-id="c7601-136">本地 mutex 仅存在于进程中。</span><span class="sxs-lookup"><span data-stu-id="c7601-136">A local mutex exists only within your process.</span></span> <span data-ttu-id="c7601-137">可由您具有对引用的过程中的任何线程<xref:System.Threading.Mutex>表示该互斥体的对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-137">It can be used by any thread in your process that has a reference to the <xref:System.Threading.Mutex> object that represents the mutex.</span></span> <span data-ttu-id="c7601-138">每个未命名<xref:System.Threading.Mutex>对象表示单独的本地 mutex。</span><span class="sxs-lookup"><span data-stu-id="c7601-138">Each unnamed <xref:System.Threading.Mutex> object represents a separate local mutex.</span></span>  
  
 <span data-ttu-id="c7601-139">已命名的系统互斥体，显示整个操作系统，可用于同步进程的活动。</span><span class="sxs-lookup"><span data-stu-id="c7601-139">Named system mutexes are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="c7601-140">您可以创建<xref:System.Threading.Mutex>使用接受名称的构造函数表示命名的系统互斥体对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-140">You can create a <xref:System.Threading.Mutex> object that represents a named system mutex by using a constructor that accepts a name.</span></span> <span data-ttu-id="c7601-141">可以在同一时间创建操作系统对象也可以在创建之前存在<xref:System.Threading.Mutex>对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-141">The operating-system object can be created at the same time, or it can exist before the creation of the <xref:System.Threading.Mutex> object.</span></span> <span data-ttu-id="c7601-142">可以创建多个表示同一命名系统 mutex 的 <xref:System.Threading.Mutex> 对象，还能使用 <xref:System.Threading.Mutex.OpenExisting%2A> 方法打开现有的命名系统 mutex。</span><span class="sxs-lookup"><span data-stu-id="c7601-142">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex, and you can use the <xref:System.Threading.Mutex.OpenExisting%2A> method to open an existing named system mutex.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7601-143">在运行终端服务的服务器，命名的系统互斥体可以包含两个级别的可见性。</span><span class="sxs-lookup"><span data-stu-id="c7601-143">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="c7601-144">如果其名称以前缀开头"Global\\"，互斥体是在所有终端服务器会话中可见。</span><span class="sxs-lookup"><span data-stu-id="c7601-144">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="c7601-145">如果其名称以前缀开头"本地\\"，互斥体是仅在终端服务器会话中可见的创建位置。</span><span class="sxs-lookup"><span data-stu-id="c7601-145">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="c7601-146">在这种情况下，具有相同名称单独的互斥锁可以存在于每个服务器上的其他终端服务器会话。</span><span class="sxs-lookup"><span data-stu-id="c7601-146">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="c7601-147">如果您不指定前缀创建已命名的互斥体时，它将前缀"本地\\"。</span><span class="sxs-lookup"><span data-stu-id="c7601-147">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="c7601-148">终端服务器会话中，只能由其前缀的名称不同的两个 mutex 有单独的互斥体，且都在终端服务器会话中对所有进程可见。</span><span class="sxs-lookup"><span data-stu-id="c7601-148">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="c7601-149">也就是说，前缀名称"Global\\"和"本地\\"描述相对于终端服务器会话、 不相对于进程的互斥体名称的作用域。</span><span class="sxs-lookup"><span data-stu-id="c7601-149">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

  
## Examples  
 <span data-ttu-id="c7601-150">此示例演示如何本地<xref:System.Threading.Mutex>对象用于同步对受保护资源的访问。</span><span class="sxs-lookup"><span data-stu-id="c7601-150">This example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="c7601-151">因为每个调用线程被阻止，直到它获取 mutex 的所有权，因此它必须调用<xref:System.Threading.Mutex.ReleaseMutex%2A>方法来释放所有权的线程。</span><span class="sxs-lookup"><span data-stu-id="c7601-151">Because each calling thread is blocked until it acquires ownership of the mutex, it must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the thread.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Mutex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="c7601-152">在以下示例中，每个线程调用<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29>方法以获取互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-152">In the following example, each thread calls the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> method to acquire the mutex.</span></span> <span data-ttu-id="c7601-153">如果达到超时间隔，该方法返回`false`，并在线程获取 mutex 既不获得互斥锁保护的资源访问权。</span><span class="sxs-lookup"><span data-stu-id="c7601-153">If the time-out interval elapses, the method returns `false`, and the thread neither acquires the mutex nor gains access to the resource the mutex protects.</span></span> <span data-ttu-id="c7601-154"><xref:System.Threading.Mutex.ReleaseMutex%2A>只能由获得该互斥体的线程调用方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-154">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is called only by the thread that acquires the mutex.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c7601-155">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c7601-155">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c7601-156">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-156">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c7601-157">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-157">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-158">调用此构造函数重载等同于调用<xref:System.Threading.Mutex.%23ctor%28System.Boolean%29>构造函数重载并指定`false`互斥体的初始所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-158">Calling this constructor overload is the same as calling the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor overload and specifying `false` for initial ownership of the mutex.</span></span> <span data-ttu-id="c7601-159">也就是说，调用线程不拥有该互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-159">That is, the calling thread does not own the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7601-160">下面的代码示例演示如何本地<xref:System.Threading.Mutex>对象用于同步对受保护资源的访问。</span><span class="sxs-lookup"><span data-stu-id="c7601-160">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="c7601-161">创建互斥体的线程不最初拥有其信息。</span><span class="sxs-lookup"><span data-stu-id="c7601-161">The thread that creates the mutex does not own it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex initiallyOwned" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="c7601-162">
            <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-162">
              <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7601-163">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-163">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c7601-164">下面的代码示例演示如何本地<xref:System.Threading.Mutex>对象用于同步对受保护资源的访问。</span><span class="sxs-lookup"><span data-stu-id="c7601-164">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="c7601-165">创建的线程<xref:System.Threading.Mutex>最初拥有它。</span><span class="sxs-lookup"><span data-stu-id="c7601-165">The thread that creates the <xref:System.Threading.Mutex> owns it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="c7601-166">
            <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-166">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="c7601-167">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-167">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="c7601-168">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-168">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7601-169">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-169">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-170">如果`name`不是`null`并`initiallyOwned`是`true`，调用线程拥有 mutex，仅当通过此调用创建的命名的系统互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-170">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the mutex only if the named system mutex was created as a result of this call.</span></span> <span data-ttu-id="c7601-171">由于没有任何机制，用于确定是否已创建的命名的系统互斥体，最好是指定`false`为`initiallyOwned`时调用此构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="c7601-171">Since there is no mechanism for determining whether the named system mutex was created, it is better to specify `false` for `initiallyOwned` when calling this constructor overload.</span></span> <span data-ttu-id="c7601-172">可以使用<xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29>构造函数，如果您需要确定初始所属权。</span><span class="sxs-lookup"><span data-stu-id="c7601-172">You can use the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> constructor if you need to determine initial ownership.</span></span>  
  
 <span data-ttu-id="c7601-173">此构造函数初始化<xref:System.Threading.Mutex>表示命名的系统互斥体对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-173">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="c7601-174">你可以创建多个<xref:System.Threading.Mutex>对象表示同一命名系统互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-174">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="c7601-175">如果命名互斥体已创建与访问控制安全性，并且调用方不具有<xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="c7601-175">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="c7601-176">若要打开现有的已命名互斥体，使用所需的同步线程活动，这些权限，请参阅<xref:System.Threading.Mutex.OpenExisting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-176">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="c7601-177">如果指定`null`或为空字符串`name`，创建了局部互斥体，就像已调用<xref:System.Threading.Mutex.%23ctor%28System.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="c7601-177">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="c7601-178">在这种情况下，`createdNew`始终是`true`。</span><span class="sxs-lookup"><span data-stu-id="c7601-178">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="c7601-179">由于它们是系统范围内，命名的 mutex 可用于协调跨进程边界的资源使用。</span><span class="sxs-lookup"><span data-stu-id="c7601-179">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7601-180">在运行终端服务的服务器，命名的系统互斥体可以包含两个级别的可见性。</span><span class="sxs-lookup"><span data-stu-id="c7601-180">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="c7601-181">如果其名称以前缀开头"Global\\"，互斥体是在所有终端服务器会话中可见。</span><span class="sxs-lookup"><span data-stu-id="c7601-181">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="c7601-182">如果其名称以前缀开头"本地\\"，互斥体是仅在终端服务器会话中可见的创建位置。</span><span class="sxs-lookup"><span data-stu-id="c7601-182">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="c7601-183">在这种情况下，具有相同名称单独的互斥锁可以存在于每个服务器上的其他终端服务器会话。</span><span class="sxs-lookup"><span data-stu-id="c7601-183">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="c7601-184">如果您不指定前缀创建已命名的互斥体时，它将前缀"本地\\"。</span><span class="sxs-lookup"><span data-stu-id="c7601-184">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="c7601-185">终端服务器会话中，只能由其前缀的名称不同的两个 mutex 有单独的互斥体，且都在终端服务器会话中对所有进程可见。</span><span class="sxs-lookup"><span data-stu-id="c7601-185">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="c7601-186">也就是说，前缀名称"Global\\"和"本地\\"描述相对于终端服务器会话、 不相对于进程的互斥体名称的作用域。</span><span class="sxs-lookup"><span data-stu-id="c7601-186">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

## Examples  
 <span data-ttu-id="c7601-187">下面的示例演示如何使用已命名的互斥体之间在两个单独进程中运行的线程发出信号。</span><span class="sxs-lookup"><span data-stu-id="c7601-187">The following example shows how a named mutex is used to signal between threads running in two separate processes.</span></span>  
  
 <span data-ttu-id="c7601-188">从两个或多个命令窗口中运行此程序。</span><span class="sxs-lookup"><span data-stu-id="c7601-188">Run this program from two or more command windows.</span></span> <span data-ttu-id="c7601-189">每个进程创建<xref:System.Threading.Mutex>对象，表示已命名的 mutex `MyMutex`。</span><span class="sxs-lookup"><span data-stu-id="c7601-189">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex `MyMutex`.</span></span> <span data-ttu-id="c7601-190">已命名的互斥体是系统对象的生存期的生存期由<xref:System.Threading.Mutex>代表它的对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-190">The named mutex is a system object whose lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="c7601-191">已命名的互斥体时创建的第一个过程将创建其<xref:System.Threading.Mutex>对象; 在此示例中，已命名的互斥体拥有的运行程序的第一个进程。</span><span class="sxs-lookup"><span data-stu-id="c7601-191">The named mutex is created when the first process creates its <xref:System.Threading.Mutex> object; in this example, the named mutex is owned by the first process that runs the program.</span></span> <span data-ttu-id="c7601-192">已命名的互斥体被销毁时所有<xref:System.Threading.Mutex>表示它已发布。</span><span class="sxs-lookup"><span data-stu-id="c7601-192">The named mutex is destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span>  
  
 <span data-ttu-id="c7601-193">此示例中使用的构造函数重载不能告诉调用线程已命名的互斥体的初始所属权是否已授予。</span><span class="sxs-lookup"><span data-stu-id="c7601-193">The constructor overload used in this example cannot tell the calling thread whether initial ownership of the named mutex was granted.</span></span> <span data-ttu-id="c7601-194">不应使用此构造函数请求的初始所有权，除非您可以确定线程将创建命名互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-194">You should not use this constructor to request initial ownership unless you can be certain that the thread will create the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="c7601-195">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-195">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c7601-196">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-196">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="c7601-197">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-197">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7601-198">
            <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-198">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7601-199">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-199">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7601-200">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-200">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="c7601-201">
            <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-201">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="c7601-202">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-202">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="c7601-203">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-203">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="c7601-204">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-204">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="c7601-205">This parameter is passed uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-205">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7601-206">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-206">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-207">如果`name`不是`null`并`initiallyOwned`是`true`，调用线程拥有命名互斥体才`createdNew`是`true`后调用。</span><span class="sxs-lookup"><span data-stu-id="c7601-207">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="c7601-208">否则，线程可以通过调用请求该互斥体<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-208">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="c7601-209">此构造函数初始化<xref:System.Threading.Mutex>表示命名的系统互斥体对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-209">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="c7601-210">你可以创建多个<xref:System.Threading.Mutex>对象表示同一命名系统互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-210">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="c7601-211">如果命名互斥体已创建与访问控制安全性，并且调用方不具有<xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>权限，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="c7601-211">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> rights, an exception is thrown.</span></span> <span data-ttu-id="c7601-212">若要打开现有的已命名互斥体，使用所需的同步线程活动，这些权限，请参阅<xref:System.Threading.Mutex.OpenExisting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-212">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="c7601-213">如果指定`null`或为空字符串`name`，创建了局部互斥体，就像已调用<xref:System.Threading.Mutex.%23ctor%28System.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="c7601-213">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="c7601-214">在这种情况下，`createdNew`始终是`true`。</span><span class="sxs-lookup"><span data-stu-id="c7601-214">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="c7601-215">由于它们是系统范围内，命名的 mutex 可用于协调跨进程边界的资源使用。</span><span class="sxs-lookup"><span data-stu-id="c7601-215">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7601-216">在运行终端服务的服务器，命名的系统互斥体可以包含两个级别的可见性。</span><span class="sxs-lookup"><span data-stu-id="c7601-216">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="c7601-217">如果其名称以前缀开头"Global\\"，互斥体是在所有终端服务器会话中可见。</span><span class="sxs-lookup"><span data-stu-id="c7601-217">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="c7601-218">如果其名称以前缀开头"本地\\"，互斥体是仅在终端服务器会话中可见的创建位置。</span><span class="sxs-lookup"><span data-stu-id="c7601-218">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="c7601-219">在这种情况下，具有相同名称单独的互斥锁可以存在于每个服务器上的其他终端服务器会话。</span><span class="sxs-lookup"><span data-stu-id="c7601-219">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="c7601-220">如果您不指定前缀创建已命名的互斥体时，它将前缀"本地\\"。</span><span class="sxs-lookup"><span data-stu-id="c7601-220">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="c7601-221">终端服务器会话中，只能由其前缀的名称不同的两个 mutex 有单独的互斥体，且都在终端服务器会话中对所有进程可见。</span><span class="sxs-lookup"><span data-stu-id="c7601-221">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="c7601-222">也就是说，前缀名称"Global\\"和"本地\\"描述相对于终端服务器会话、 不相对于进程的互斥体名称的作用域。</span><span class="sxs-lookup"><span data-stu-id="c7601-222">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]   
  
## Examples  
 <span data-ttu-id="c7601-223">以下代码示例演示如何使用已命名的互斥体之间的进程或线程发出信号。</span><span class="sxs-lookup"><span data-stu-id="c7601-223">The following code example shows how a named mutex is used to signal between processes or threads.</span></span> <span data-ttu-id="c7601-224">从两个或多个命令窗口中运行此程序。</span><span class="sxs-lookup"><span data-stu-id="c7601-224">Run this program from two or more command windows.</span></span> <span data-ttu-id="c7601-225">每个进程创建<xref:System.Threading.Mutex>对象，表示已命名的互斥体"MyMutex"。</span><span class="sxs-lookup"><span data-stu-id="c7601-225">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex "MyMutex".</span></span> <span data-ttu-id="c7601-226">已命名的互斥体是系统对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-226">The named mutex is a system object.</span></span> <span data-ttu-id="c7601-227">在此示例中，其生存期由的生存期<xref:System.Threading.Mutex>代表它的对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-227">In this example, its lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="c7601-228">第一个过程将创建其局部变量时，创建已命名的 mutex<xref:System.Threading.Mutex>对象，并销毁时所有<xref:System.Threading.Mutex>表示它已发布。</span><span class="sxs-lookup"><span data-stu-id="c7601-228">The named mutex is created when the first process creates its local <xref:System.Threading.Mutex> object, and destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span> <span data-ttu-id="c7601-229">已命名的 mutex 最初拥有的第一个进程。</span><span class="sxs-lookup"><span data-stu-id="c7601-229">The named mutex is initially owned by the first process.</span></span> <span data-ttu-id="c7601-230">第二个进程和任何后续的进程等待前一进程释放命名的互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-230">The second process and any subsequent processes wait for earlier processes to release the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="c7601-231">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-231">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c7601-232">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-232">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="c7601-233">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-233">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7601-234">
            <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-234">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7601-235">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-235">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7601-236">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-236">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  * System.Security.AccessControl.MutexSecurity -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew, mutexSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="c7601-237">
            <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-237">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="c7601-238">The name of the system mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-238">The name of the system mutex.</span>
          </span>
          <span data-ttu-id="c7601-239">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-239">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="c7601-240">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-240">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="c7601-241">This parameter is passed uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-241">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="mutexSecurity">
          <span data-ttu-id="c7601-242">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-242">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7601-243">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, a Boolean variable that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex, and the access control security to be applied to the named mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-243">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, a Boolean variable that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex, and the access control security to be applied to the named mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-244">如果`name`不是`null`并`initiallyOwned`是`true`，调用线程拥有命名互斥体才`createdNew`是`true`后调用。</span><span class="sxs-lookup"><span data-stu-id="c7601-244">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="c7601-245">否则，线程可以通过调用请求该互斥体<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-245">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="c7601-246">使用此构造函数要应用于已命名的系统互斥体的访问控制安全性，在创建时，阻止其他代码互斥体的控制。</span><span class="sxs-lookup"><span data-stu-id="c7601-246">Use this constructor to apply access control security to a named system mutex when it is created, preventing other code from taking control of the mutex.</span></span>  
  
 <span data-ttu-id="c7601-247">此构造函数初始化<xref:System.Threading.Mutex>表示命名的系统互斥体对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-247">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="c7601-248">你可以创建多个<xref:System.Threading.Mutex>对象表示同一命名系统互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-248">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="c7601-249">如果不存在已命名的系统互斥体，它被创建使用指定的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="c7601-249">If the named system mutex does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="c7601-250">如果命名互斥体存在，则忽略指定的访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="c7601-250">If the named mutex exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7601-251">调用方具有对新创建的完全控制<xref:System.Threading.Mutex>对象，即使`mutexSecurity`拒绝或无法授予当前用户对某些访问权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-251">The caller has full control over the newly created <xref:System.Threading.Mutex> object even if `mutexSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="c7601-252">但是，如果当前用户尝试获取另一个<xref:System.Threading.Mutex>对象表示同一命名互斥体，使用构造函数或<xref:System.Threading.Mutex.OpenExisting%2A>方法中，Windows 应用访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="c7601-252">However, if the current user attempts to get another <xref:System.Threading.Mutex> object to represent the same named mutex, using either a constructor or the <xref:System.Threading.Mutex.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="c7601-253">如果命名互斥体已创建与访问控制安全性，并且调用方不具有<xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="c7601-253">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="c7601-254">若要打开现有的已命名互斥体，使用所需的同步线程活动，这些权限，请参阅<xref:System.Threading.Mutex.OpenExisting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-254">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="c7601-255">如果指定`null`或为空字符串`name`，创建了局部互斥体，就像已调用<xref:System.Threading.Mutex.%23ctor%28System.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="c7601-255">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="c7601-256">在这种情况下，`createdNew`始终是`true`。</span><span class="sxs-lookup"><span data-stu-id="c7601-256">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="c7601-257">由于它们是系统范围内，命名的 mutex 可用于协调跨进程边界的资源使用。</span><span class="sxs-lookup"><span data-stu-id="c7601-257">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7601-258">在运行终端服务的服务器，命名的系统互斥体可以包含两个级别的可见性。</span><span class="sxs-lookup"><span data-stu-id="c7601-258">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="c7601-259">如果其名称以前缀开头"Global\\"，互斥体是在所有终端服务器会话中可见。</span><span class="sxs-lookup"><span data-stu-id="c7601-259">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="c7601-260">如果其名称以前缀开头"本地\\"，互斥体是仅在终端服务器会话中可见的创建位置。</span><span class="sxs-lookup"><span data-stu-id="c7601-260">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="c7601-261">在这种情况下，具有相同名称单独的互斥锁可以存在于每个服务器上的其他终端服务器会话。</span><span class="sxs-lookup"><span data-stu-id="c7601-261">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="c7601-262">如果您不指定前缀创建已命名的互斥体时，它将前缀"本地\\"。</span><span class="sxs-lookup"><span data-stu-id="c7601-262">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="c7601-263">终端服务器会话中，只能由其前缀的名称不同的两个 mutex 有单独的互斥体，且都在终端服务器会话中对所有进程可见。</span><span class="sxs-lookup"><span data-stu-id="c7601-263">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="c7601-264">也就是说，前缀名称"Global\\"和"本地\\"描述相对于终端服务器会话、 不相对于进程的互斥体名称的作用域。</span><span class="sxs-lookup"><span data-stu-id="c7601-264">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]  
   
  
## Examples  
 <span data-ttu-id="c7601-265">下面的代码示例演示使用访问控制安全性的已命名的互斥体的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="c7601-265">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="c7601-266">该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%29>方法重载来测试是否存在已命名的互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-266">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="c7601-267">如果不存在该互斥体，创建使用初始所有权以及访问控制安全性，将拒绝使用互斥体的权限的当前用户，但授予的权限读取和更改该互斥体的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-267">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="c7601-268">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Mutex.OpenExisting%28System.String%29>。</span><span class="sxs-lookup"><span data-stu-id="c7601-268">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="c7601-269">捕获的异常，并且该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>方法重载来读取和更改的权限所需的权限打开该互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-269">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="c7601-270">更改权限后，输入，并将其释放所需的权限打开该互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-270">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="c7601-271">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-271">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c7601-272">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-272">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="c7601-273">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-273">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="c7601-274">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-274">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7601-275">
            <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-275">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7601-276">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-276">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7601-277">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-277">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.MutexSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As MutexSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::MutexSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.MutexSecurity" Usage="mutex.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c7601-278">Gets a <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-278">Gets a <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7601-279">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-279">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-280"><xref:System.Threading.Mutex.GetAccessControl%2A>方法使用以下标志 （使用按位 OR 运算组合） 的组合来搜索权限： <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>， <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>，和<xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c7601-280">The <xref:System.Threading.Mutex.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c7601-281">用户必须具有<xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>要调用此方法，而且该互斥体，必须具有已打开与<xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c7601-281">The user must have <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7601-282">下面的代码示例演示使用访问控制安全性的已命名的互斥体的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="c7601-282">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="c7601-283">该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%29>方法重载来测试是否存在已命名的互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-283">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="c7601-284">如果不存在该互斥体，创建使用初始所有权以及访问控制安全性，将拒绝使用互斥体的权限的当前用户，但授予的权限读取和更改该互斥体的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-284">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="c7601-285">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Mutex.OpenExisting%28System.String%29>。</span><span class="sxs-lookup"><span data-stu-id="c7601-285">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="c7601-286">捕获的异常，并且该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>方法重载来读取和更改权限，使用所需的权限打开 mutex<xref:System.Threading.Mutex.GetAccessControl%2A>和<xref:System.Threading.Mutex.SetAccessControl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-286">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="c7601-287">更改权限后，输入，并将其释放所需的权限打开该互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-287">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="c7601-288">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-288">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="c7601-289">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-289">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
          <span data-ttu-id="c7601-290">-or-  The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, and was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-290">-or-  The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, and was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c7601-291">Not supported for Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-291">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c7601-292">Opens a specified named mutex, if it already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-292">Opens a specified named mutex, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c7601-293">The name of the system mutex to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-293">The name of the system mutex to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7601-294">Opens the specified named mutex, if it already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-294">Opens the specified named mutex, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7601-295">An object that represents the named system mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-295">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-296"><xref:System.Threading.Mutex.OpenExisting%2A>方法尝试打开指定的命名系统互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-296">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open the specified named system mutex.</span></span> <span data-ttu-id="c7601-297">如果不存在的系统互斥体，此方法将引发异常而不是创建系统对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-297">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="c7601-298">若要创建的系统互斥体已存在时，请使用之一<xref:System.Threading.Mutex.%23ctor%2A>构造函数具有`name`参数。</span><span class="sxs-lookup"><span data-stu-id="c7601-298">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="c7601-299">多个调用此方法使用的相同值的`name`不一定返回相同<xref:System.Threading.Mutex>对象，即使返回这些对象表示同一命名的系统互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-299">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="c7601-300">此方法的重载是等效于调用<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>方法重载并指定<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>和<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>权限，使用按位 OR 运算组合在一起。</span><span class="sxs-lookup"><span data-stu-id="c7601-300">This method overload is equivalent to calling the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="c7601-301">指定<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>标志将允许线程等待互斥体，并指定<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>标志将允许线程调用<xref:System.Threading.Mutex.ReleaseMutex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-301">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="c7601-302">此方法不会请求 mutex 的所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-302">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7601-303">下面的代码示例演示使用访问控制安全性的已命名的互斥体的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="c7601-303">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="c7601-304">该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%29>方法重载来测试是否存在已命名的互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-304">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="c7601-305">如果不存在该互斥体，创建使用初始所有权以及访问控制安全性，将拒绝使用互斥体的权限的当前用户，但授予的权限读取和更改该互斥体的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-305">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="c7601-306">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Mutex.OpenExisting%28System.String%29>。</span><span class="sxs-lookup"><span data-stu-id="c7601-306">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="c7601-307">捕获的异常，并且该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>方法重载来读取和更改的权限所需的权限打开该互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-307">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="c7601-308">更改权限后，输入，并将其释放所需的权限打开该互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-308">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="c7601-309">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-309">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7601-310">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-310">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="c7601-311">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-311">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7601-312">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-312">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="c7601-313">The named mutex does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-313">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c7601-314">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-314">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="c7601-315">The named mutex exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-315">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7601-316">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-316">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7601-317">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-317">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As MutexRights) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.MutexRights -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c7601-318">The name of the system mutex to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-318">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="c7601-319">A bitwise combination of the enumeration values that represent the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-319">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7601-320">Opens the specified named mutex, if it already exists, with the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-320">Opens the specified named mutex, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7601-321">An object that represents the named system mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-321">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-322">`rights`参数必须包含<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>标志，以便允许线程等待互斥体，并<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>标志，以使线程能够调用<xref:System.Threading.Mutex.ReleaseMutex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-322">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="c7601-323"><xref:System.Threading.Mutex.OpenExisting%2A>方法尝试打开现有的已命名的互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-323">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open an existing named mutex.</span></span> <span data-ttu-id="c7601-324">如果不存在的系统互斥体，此方法将引发异常而不是创建系统对象。</span><span class="sxs-lookup"><span data-stu-id="c7601-324">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="c7601-325">若要创建的系统互斥体已存在时，请使用之一<xref:System.Threading.Mutex.%23ctor%2A>构造函数具有`name`参数。</span><span class="sxs-lookup"><span data-stu-id="c7601-325">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="c7601-326">多个调用此方法使用的相同值的`name`不一定返回相同<xref:System.Threading.Mutex>对象，即使返回这些对象表示同一命名的系统互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-326">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="c7601-327">此方法不会请求 mutex 的所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-327">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7601-328">下面的代码示例演示使用访问控制安全性的已命名的互斥体的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="c7601-328">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="c7601-329">该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%29>方法重载来测试是否存在已命名的互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-329">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="c7601-330">如果不存在该互斥体，创建使用初始所有权以及访问控制安全性，将拒绝使用互斥体的权限的当前用户，但授予的权限读取和更改该互斥体的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-330">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="c7601-331">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Mutex.OpenExisting%28System.String%29>。</span><span class="sxs-lookup"><span data-stu-id="c7601-331">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="c7601-332">捕获的异常，并且该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>方法重载来读取和更改的权限所需的权限打开该互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-332">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="c7601-333">更改权限后，输入，并将其释放所需的权限打开该互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-333">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="c7601-334">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-334">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7601-335">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-335">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="c7601-336">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-336">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7601-337">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-337">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="c7601-338">The named mutex does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-338">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c7601-339">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-339">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="c7601-340">The named mutex exists, but the user does not have the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-340">The named mutex exists, but the user does not have the desired security access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7601-341">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-341">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7601-342">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-342">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMutex">
      <MemberSignature Language="C#" Value="public void ReleaseMutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseMutex() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.ReleaseMutex" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMutex ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseMutex();" />
      <MemberSignature Language="F#" Value="member this.ReleaseMutex : unit -&gt; unit" Usage="mutex.ReleaseMutex " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c7601-343">Releases the <see cref="T:System.Threading.Mutex" /> once.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-343">Releases the <see cref="T:System.Threading.Mutex" /> once.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-344">每当某一线程获取互斥体 (例如，通过调用其<xref:System.Threading.WaitHandle.WaitOne%2A>方法)，它必须随后调用<xref:System.Threading.Mutex.ReleaseMutex%2A>放弃 mutex 的所有权和取消阻止其他线程尝试获取 mutex 的所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-344">Whenever a thread acquires a mutex (for example, by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method), it must subsequently call <xref:System.Threading.Mutex.ReleaseMutex%2A> to relinquish ownership of the mutex and unblock other threads that are trying to gain ownership of the mutex.</span></span> <span data-ttu-id="c7601-345">如果尝试获取 mutex 的所有权将失败 (例如，在调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法替换`millisecondsTimeout`或`timeout`参数将返回`false`因为请求超时)，线程不应调用<xref:System.Threading.Mutex.ReleaseMutex%2A>，在此情况下，线程应该也不能访问受互斥体，如以下示例所示的资源。</span><span class="sxs-lookup"><span data-stu-id="c7601-345">If the attempt to get ownership of the mutex fails (for example, when a call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method with a `millisecondsTimeout` or a `timeout` parameter returns `false` because the request times out), the thread shouldn't call <xref:System.Threading.Mutex.ReleaseMutex%2A>, In this case, the thread should also not be allowed to access the resource protected by the mutex, as the following example shows.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 <span data-ttu-id="c7601-346">拥有互斥体的线程可以重复的等待函数调用中指定相同的互斥体，而不会阻止其执行。</span><span class="sxs-lookup"><span data-stu-id="c7601-346">A thread that owns a mutex can specify the same mutex in repeated wait function calls without blocking its execution.</span></span> <span data-ttu-id="c7601-347">公共语言运行时保留调用数。</span><span class="sxs-lookup"><span data-stu-id="c7601-347">The number of calls is kept by the common language runtime.</span></span> <span data-ttu-id="c7601-348">该线程必须调用<xref:System.Threading.Mutex.ReleaseMutex%2A>相同数量的次数与释放 mutex 的所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-348">The thread must call <xref:System.Threading.Mutex.ReleaseMutex%2A> the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="c7601-349">如果线程终止时拥有互斥体，则认为该 mutex 已放弃。</span><span class="sxs-lookup"><span data-stu-id="c7601-349">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="c7601-350">互斥体的状态设置为终止和下一个等待线程获取所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-350">The state of the mutex is set to signaled and the next waiting thread gets ownership.</span></span> <span data-ttu-id="c7601-351">如果没有人拥有该互斥体，互斥体的状态是终止状态。</span><span class="sxs-lookup"><span data-stu-id="c7601-351">If no one owns the mutex, the state of the mutex is signaled.</span></span> <span data-ttu-id="c7601-352">从.NET Framework 的版本 2.0<xref:System.Threading.AbandonedMutexException>获得该互斥体的下一个线程中引发。</span><span class="sxs-lookup"><span data-stu-id="c7601-352">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the mutex.</span></span> <span data-ttu-id="c7601-353">在.NET Framework 2.0 版中之前, 未不引发任何异常。</span><span class="sxs-lookup"><span data-stu-id="c7601-353">Prior to version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="c7601-354">放弃的 mutex 通常表明代码中的存在严重错误。</span><span class="sxs-lookup"><span data-stu-id="c7601-354">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="c7601-355">线程退出时不释放互斥体，由 mutex 保护的数据结构不可能处于一致状态。</span><span class="sxs-lookup"><span data-stu-id="c7601-355">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="c7601-356">为请求 mutex 所有权的下一个线程可以处理此异常并继续操作，如果可以验证数据结构的完整性。</span><span class="sxs-lookup"><span data-stu-id="c7601-356">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="c7601-357">对于系统范围的 mutex，放弃的 mutex 可能指示应用程序已突然终止（例如，通过使用 Windows 任务管理器终止）。</span><span class="sxs-lookup"><span data-stu-id="c7601-357">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7601-358">下面的示例演示如何本地<xref:System.Threading.Mutex>对象用于同步对受保护资源的访问。</span><span class="sxs-lookup"><span data-stu-id="c7601-358">The following example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="c7601-359">创建互斥体的线程不最初拥有其信息。</span><span class="sxs-lookup"><span data-stu-id="c7601-359">The thread that creates the mutex does not own it initially.</span></span> <span data-ttu-id="c7601-360"><xref:System.Threading.Mutex.ReleaseMutex%2A>方法用于在不再需要时释放该互斥。</span><span class="sxs-lookup"><span data-stu-id="c7601-360">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is used to release the mutex when it is no longer needed.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="c7601-361">The calling thread does not own the mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-361">The calling thread does not own the mutex.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c7601-362">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-362">The current instance has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.MutexSecurity -&gt; unit" Usage="mutex.SetAccessControl mutexSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="mutexSecurity">
          <span data-ttu-id="c7601-363">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-363">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7601-364">Sets the access control security for a named system mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-364">Sets the access control security for a named system mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-365">用户必须具有<xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>权限才能调用此方法，而且该互斥体必须使用打开<xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c7601-365">The user must have <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7601-366">下面的代码示例演示使用访问控制安全性的已命名的互斥体的跨进程行为。</span><span class="sxs-lookup"><span data-stu-id="c7601-366">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="c7601-367">该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%29>方法重载来测试是否存在已命名的互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-367">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="c7601-368">如果不存在该互斥体，创建使用初始所有权以及访问控制安全性，将拒绝使用互斥体的权限的当前用户，但授予的权限读取和更改该互斥体的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-368">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="c7601-369">如果从两个命令窗口运行已编译的示例，第二个副本将在调用引发访问冲突异常<xref:System.Threading.Mutex.OpenExisting%28System.String%29>。</span><span class="sxs-lookup"><span data-stu-id="c7601-369">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="c7601-370">捕获的异常，并且该示例使用<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>方法重载来读取和更改权限，使用所需的权限打开 mutex<xref:System.Threading.Mutex.GetAccessControl%2A>和<xref:System.Threading.Mutex.SetAccessControl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-370">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="c7601-371">更改权限后，输入，并将其释放所需的权限打开该互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-371">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="c7601-372">如果从第三个命令窗口运行已编译的示例，它运行使用新的权限。</span><span class="sxs-lookup"><span data-stu-id="c7601-372">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7601-373">
            <paramref name="mutexSecurity" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-373">
              <paramref name="mutexSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="c7601-374">The user does not have <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-374">The user does not have <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
          <span data-ttu-id="c7601-375">-or-  The mutex was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-375">-or-  The mutex was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="c7601-376">The current <see cref="T:System.Threading.Mutex" /> object does not represent a named system mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-376">The current <see cref="T:System.Threading.Mutex" /> object does not represent a named system mutex.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c7601-377">Opens a specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-377">Opens a specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Mutex&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c7601-378">The name of the system mutex to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-378">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c7601-379">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-379">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="c7601-380">This parameter is treated as uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-380">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7601-381">Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-381">Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7601-382">
            <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-382">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-383">如果已命名的 mutex 不存在，此方法不会创建它。</span><span class="sxs-lookup"><span data-stu-id="c7601-383">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="c7601-384">若要创建的系统互斥体已存在时，请使用之一<xref:System.Threading.Mutex.%23ctor%2A>构造函数具有`name`参数。</span><span class="sxs-lookup"><span data-stu-id="c7601-384">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="c7601-385">如果您不确定是否存在已命名的互斥体，使用此方法重载，而不是<xref:System.Threading.Mutex.OpenExisting%28System.String%29>方法重载，它的 mutex 不存在时引发异常。</span><span class="sxs-lookup"><span data-stu-id="c7601-385">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="c7601-386">多个调用此方法使用的相同值的`name`不一定返回相同<xref:System.Threading.Mutex>对象，即使返回这些对象表示同一命名的系统互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-386">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="c7601-387">此方法的重载是等效于调用<xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29>方法重载并指定<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>和<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>权限，使用按位 OR 运算组合在一起。</span><span class="sxs-lookup"><span data-stu-id="c7601-387">This method overload is equivalent to calling the <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="c7601-388">指定<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>标志将允许线程等待互斥体，并指定<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>标志将允许线程调用<xref:System.Threading.Mutex.ReleaseMutex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-388">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="c7601-389">此方法不会请求 mutex 的所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-389">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7601-390">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-390">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="c7601-391">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-391">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7601-392">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-392">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c7601-393">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-393">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="c7601-394">The named mutex exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-394">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7601-395">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-395">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7601-396">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-396">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.MutexRights rights, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As MutexRights, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.MutexRights *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="result" Type="System.Threading.Mutex&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c7601-397">The name of the system mutex to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-397">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="c7601-398">A bitwise combination of the enumeration values that represent the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-398">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="c7601-399">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-399">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="c7601-400">This parameter is treated as uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-400">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7601-401">Opens the specified named mutex, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-401">Opens the specified named mutex, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7601-402">
            <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-402">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7601-403">如果已命名的 mutex 不存在，此方法不会创建它。</span><span class="sxs-lookup"><span data-stu-id="c7601-403">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="c7601-404">若要创建的系统互斥体已存在时，请使用之一<xref:System.Threading.Mutex.%23ctor%2A>构造函数具有`name`参数。</span><span class="sxs-lookup"><span data-stu-id="c7601-404">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="c7601-405">如果您不确定是否存在已命名的互斥体，使用此方法重载，而不是<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>方法重载，它的 mutex 不存在时引发异常。</span><span class="sxs-lookup"><span data-stu-id="c7601-405">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="c7601-406">`rights`参数必须包含<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>标志，以便允许线程等待互斥体，并<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>标志，以使线程能够调用<xref:System.Threading.Mutex.ReleaseMutex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c7601-406">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="c7601-407">多个调用此方法使用的相同值的`name`不一定返回相同<xref:System.Threading.Mutex>对象，即使返回这些对象表示同一命名的系统互斥体。</span><span class="sxs-lookup"><span data-stu-id="c7601-407">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="c7601-408">此方法不会请求 mutex 的所有权。</span><span class="sxs-lookup"><span data-stu-id="c7601-408">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7601-409">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-409">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="c7601-410">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-410">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7601-411">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-411">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c7601-412">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-412">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="c7601-413">The named mutex exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-413">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7601-414">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-414">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7601-415">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7601-415">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>