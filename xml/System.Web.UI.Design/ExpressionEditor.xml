<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6029f291d01ac72d8aad54c46a381e25a236c1c7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36390592" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditor abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines a set of properties and methods for evaluating an expression that is associated with a control property at design time and to provide an expression editor sheet to the visual design host for use in the expression editor dialog box. This class is abstract.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可视化设计器主机，如[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]，使用<xref:System.Web.UI.Design.ExpressionEditor>类提供给用户，编辑器表的自定义表达式，然后评估设计时呈现的所选的表达式。  
  
 当您浏览<xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A>设计时属性网格中的控件的属性，可视化设计器显示一个对话框，设置控件属性的表达式。 你可以选择基于表达式前缀的列表的表达式类型。 当从列表中选择表达式前缀时，可视化设计器将使用关联<xref:System.Web.UI.Design.ExpressionEditor>和<xref:System.Web.UI.Design.ExpressionEditorSheet>对象，若要设置，计算和转换基于该类型的表达式的语法的表达式字符串。 可视化设计器设置关联的控件属性的表达式，，然后使用该计算的表达式的结果来指定控件在设计图面呈现的属性值。  
  
 静态<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法获取与特定表达式前缀或表达式生成器相关联的表达式编辑器。 <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>属性<xref:System.Web.UI.Design.ExpressionEditor>对象返回的已配置的表达式的前缀。 <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>方法计算输入的表达式字符串。 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法返回<xref:System.Web.UI.Design.ExpressionEditorSheet>用于提示的表达式对话框中的自定义表达式属性的实现。  
  
 通常情况下，若要在设计时支持新的表达式类型，你定义唯一的表达式前缀，并提供自定义<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>实现。 或者，您可以提供自定义<xref:System.Web.UI.Design.ExpressionEditorSheet>定义用于窗体中表达式对话框中的表达式的属性的实现。  
  
 表达式前缀标识的自定义表达式类型，并将表达式与表达式生成器和表达式编辑器相关联。 当一页中分析的自定义表达式时，表达式前缀用于创建实例的关联<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>类。 若要将表达式前缀与表达式生成器和表达式编辑器相关联，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>和<xref:System.Web.Compilation.ExpressionPrefixAttribute>特性以自定义<xref:System.Web.Compilation.ExpressionBuilder>类并配置中的表达式生成器表达式前缀`expressionBuilders`Web 配置文件中的元素。 前缀不是要求，但强烈建议。  
  
   
  
## Examples  
 下面的代码示例演示如何从派生<xref:System.Web.UI.Design.ExpressionEditor>类来定义自定义表达式编辑器。  
  
 [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>在派生自定义需要执行以下步骤<see cref="T:System.Web.UI.Design.ExpressionEditor" />类:-重写<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />方法以在设计时计算自定义表达式类型。 -（可选） 重写<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法以返回定义合并以形成自定义表达式的属性的自定义类。 应用<see cref="T:System.Web.Compilation.ExpressionEditorAttribute" />属性<see cref="T:System.Web.Compilation.ExpressionBuilder" />类声明，以将自定义表达式生成器与派生的表达式编辑器类相关联。例如，<see cref="T:System.Web.UI.Design.ResourceExpressionEditor" />类派生自<see cref="T:System.Web.UI.Design.ExpressionEditor" />类并提供了评估和在设计时将资源字符串引用的控件属性与相关联的实现。<see cref="T:System.Web.Compilation.ResourceExpressionBuilder" />类是与表达式前缀关联<see langword="Resources" />和<see cref="T:System.Web.UI.Design.ResourceExpressionEditor" />实现。<see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法返回<see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />，后者定义了窗体资源引用表达式的各个属性。</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.Design.ExpressionEditor" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为<xref:System.Web.UI.Design.ExpressionEditor>类为抽象类，你无法创建的实例<xref:System.Web.UI.Design.ExpressionEditor>类直接使用<xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A>构造函数。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>从派生时<see cref="T:System.Web.UI.Design.ExpressionEditor" />类，请替代<see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" />构造函数来实现您的表达式编辑器实现的自定义初始化操作。</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EvaluateExpression (expression As String, parseTimeData As Object, propertyType As Type, serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EvaluateExpression(System::String ^ expression, System::Object ^ parseTimeData, Type ^ propertyType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : string * obj * Type * IServiceProvider -&gt; obj" Usage="expressionEditor.EvaluateExpression (expression, parseTimeData, propertyType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">An expression string to evaluate. The expression does not include the expression prefix.</param>
        <param name="parseTimeData">An object containing additional parsing information for evaluating <c>expression</c>. This typically is provided by the expression builder.</param>
        <param name="propertyType">The type of the control property to which <c>expression</c> is bound.</param>
        <param name="serviceProvider">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</param>
        <summary>Evaluates an expression string and provides the design-time value for a control property.</summary>
        <returns>The object referenced by the evaluated expression string, if the expression evaluation succeeded; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可视化设计器宿主使用<xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>方法来计算表达式，并为关联的控件提供设计时值。  
  
 可视化设计器使用<xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=nameWithType>方法，以便分析表达式字符串在设计时，，然后调用<xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>用已分析的表达式数据的方法。 可视化设计器使用该计算的表达式的结果来指定控件在设计图面呈现的属性值。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>类派生自<see cref="T:System.Web.UI.Design.ExpressionEditor" />类必须重写<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />方法以在设计时计算自定义表达式类型。至少，<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />实现必须使用以下步骤： 1。评估表达式字符串，并确定该表达式引用的对象。2.返回<see langword="null" />，如果无法计算表达式字符串。3.使用<see cref="M:System.Type.IsAssignableFrom(System.Type)" />方法<paramref name="propertyType" />若要确定是否被引用的对象可以分配直接与控件属性类型，然后根据结果，完成以下操作之一:-如果被引用的对象可以分配直接向控件属性，返回的表达式被引用的对象。 -如果被引用的对象是简单类型，例如字符串，返回的引用的对象。 -否则，确定是否可以分配给或转换为属性类型引用的对象。4.使用<see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" />方法<see cref="T:System.ComponentModel.TypeConverter" />对象<paramref name="propertyType" />以确定是否被引用的对象可以转换为控件属性类型，然后根据结果，完成以下操作之一:-如果该对象可以为转换为控件属性类型，返回被转换的对象使用<see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" />方法。 -如果无法分配被引用的对象，或将其转换为<paramref name="propertyType" />，返回被引用的对象。（可选）<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />实现可以使用<paramref name="parseTimeData" />由提供的对象<see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />实现以优化或帮助在计算的输入的表达式字符串。</para>
        </block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string" Usage="System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the expression prefix that identifies expression strings that are supported by the expression editor implementation.</summary>
        <value>一个字符串，表示前缀为派生自的类支持的表达式<see cref="T:System.Web.UI.Design.ExpressionEditor" />; 否则为空字符串 ("")，如果表达式编辑器不具有关联的表达式前缀。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表达式前缀标识的自定义表达式类型，并将表达式与表达式生成器和表达式编辑器相关联。 当一页中分析的自定义表达式时，表达式前缀用于创建实例的关联<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>类。 若要将表达式前缀与表达式生成器和表达式编辑器相关联，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>和<xref:System.Web.Compilation.ExpressionPrefixAttribute>特性以自定义<xref:System.Web.Compilation.ExpressionBuilder>类并配置中的表达式生成器表达式前缀`expressionBuilders`Web 配置文件中的元素。  
  
 通常情况下，派生的类不会重写<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>属性。 基<xref:System.Web.UI.Design.ExpressionEditor>类集<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>值基于<xref:System.Web.Compilation.ExpressionPrefixAttribute>关联的属性<xref:System.Web.Compilation.ExpressionBuilder>对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementation that is associated with an expression prefix or expression builder.</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionPrefix As String, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(System::String ^ expressionPrefix, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionPrefix, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">The expression prefix used to find the associated expression editor.</param>
        <param name="serviceProvider">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</param>
        <summary>Returns an <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementation that is associated with the specified expression prefix.</summary>
        <returns>An <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementation associated with <paramref name="expressionPrefix" />; otherwise, <see langword="null" />, if <paramref name="expressionPrefix" /> is not defined or is not associated with an <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用静态<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法重载，可查找<xref:System.Web.UI.Design.ExpressionEditor>与特定表达式前缀或表达式生成器类型相关联的对象。  
  
 对于每个自定义表达式类型，表达式前缀标识关联的表达式生成器和表达式编辑器。 当一页中分析的自定义表达式时，表达式前缀用于创建实例的关联<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>类。  
  
 若要将表达式前缀与表达式生成器和表达式编辑器相关联，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>和<xref:System.Web.Compilation.ExpressionPrefixAttribute>特性以自定义<xref:System.Web.Compilation.ExpressionBuilder>类并配置中的表达式生成器表达式前缀`expressionBuilders`Web 配置文件中的元素。  
  
 若要查找表达式前缀，关联的表达式编辑器<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法枚举可用<xref:System.Web.Compilation.ExpressionBuilder>匹配的前缀的实现。 <xref:System.Web.Compilation.ExpressionBuilder>实现可以用来配置`expressionBuilders`Web 配置文件节。 如果可用<xref:System.Web.Compilation.ExpressionBuilder>实现定义的表达式前缀，<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法返回在指定的类型<xref:System.Web.Compilation.ExpressionEditorAttribute>属性<xref:System.Web.Compilation.ExpressionBuilder>元数据。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceProvider" /> is <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionBuilderType As Type, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(Type ^ expressionBuilderType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : Type * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionBuilderType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">The type of the derived expression builder class, used to locate the associated expression editor.</param>
        <param name="serviceProvider">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</param>
        <summary>Returns an <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementation that is associated with the specified expression builder type.</summary>
        <returns>An <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementation associated with <paramref name="expressionBuilderType" />; otherwise, <see langword="null" />, if <paramref name="expressionBuilderType" /> cannot be located or has no associated <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用静态<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>重载查找<xref:System.Web.UI.Design.ExpressionEditor>与特定表达式前缀或表达式生成器类型相关联的对象。  
  
 对于每个自定义表达式类型，表达式前缀标识关联的表达式生成器和表达式编辑器。 当一页中分析的自定义表达式时，表达式前缀用于创建实例的关联<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>类。  
  
 若要将表达式前缀与表达式生成器和表达式编辑器相关联，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>和<xref:System.Web.Compilation.ExpressionPrefixAttribute>特性以自定义<xref:System.Web.Compilation.ExpressionBuilder>类并配置中的表达式生成器表达式前缀`expressionBuilders`Web 配置文件中的元素。  
  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法枚举可用<xref:System.Web.Compilation.ExpressionBuilder>实现以定位`expressionBuilderType`。 <xref:System.Web.Compilation.ExpressionBuilder>实现可以用来配置`expressionBuilders`Web 配置文件节。 如果`expressionBuilderType`可用集中找到<xref:System.Web.Compilation.ExpressionBuilder>实现中，<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法返回在指定的类型<xref:System.Web.Compilation.ExpressionEditorAttribute>属性<xref:System.Web.Compilation.ExpressionBuilder>元数据。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expressionBuilderType" /> is <see langword="null" />.  \- or -  <paramref name="serviceProvider" /> is <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExpressionEditorSheet (expression As String, serviceProvider As IServiceProvider) As ExpressionEditorSheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::ExpressionEditorSheet ^ GetExpressionEditorSheet(System::String ^ expression, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet&#xA;override this.GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="expressionEditor.GetExpressionEditorSheet (expression, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">The expression string set for a control property, used to initialize the expression editor sheet.</param>
        <param name="serviceProvider">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</param>
        <summary>Returns an expression editor sheet that is associated with the current expression editor.</summary>
        <returns>An <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> that defines the custom expression properties.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法返回<xref:System.Web.UI.Design.ExpressionEditorSheet>实现，用于定义合并以形成的自定义表达式的字符串。 可视化设计器使用的表达式编辑器表为提示输入一个或多个合并的自定义表达式的字符串。 基类方法返回使用单个输入的字符串以形成的表达式的默认表达式编辑器表。 表达式编辑器表定义属性网格的表达式。 因此，表达式编辑器公开的属性变为可以为对话框框中的表达式定义的属性。  
  
 类派生自<xref:System.Web.UI.Design.ExpressionEditor>类 （可选） 可以重写<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法以提供自定义表达式编辑器表。 自定义表达式编辑器表可以允许多个属性，组合在一起构成表达式字符串的设计时输入。  
  
 例如，<xref:System.Web.UI.Design.ResourceExpressionEditor>类派生自<xref:System.Web.UI.Design.ExpressionEditor>类并提供了评估和在设计时将资源字符串引用的控件属性与相关联的实现。 <xref:System.Web.Compilation.ResourceExpressionBuilder>类是与表达式前缀关联`Resources`和<xref:System.Web.UI.Design.ResourceExpressionEditor>实现。 <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=nameWithType>方法返回<xref:System.Web.UI.Design.ResourceExpressionEditorSheet>，后者定义了窗体资源引用表达式的各个属性。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>通常情况下，若要在设计时提供新的表达式类型，请定义一个唯一的表达式前缀并提供自定义<see cref="T:System.Web.Compilation.ExpressionBuilder" />和<see cref="T:System.Web.UI.Design.ExpressionEditor" />实现。或者，您可以提供自定义<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />定义用于构成表达式的属性的实现。即使配置文件定义前缀，还应将应用<see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />对象和<see cref="T:System.Web.Compilation.ExpressionEditorAttribute" />对象。重写<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法以返回自定义表达式中定义多个属性的设计时输入的表达式编辑器表。当你选择的控件属性和表达式编辑器类型时，可视化设计器将调用<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，然后提供当前表达式字符串，它设置控件属性。使用<paramref name="expression" />设置表达式属性的初始值。使用<paramref name="serviceProvider" />初始化自定义表达式表构造函数以及用于访问设计器宿主提供的服务。例如，调用<see cref="M:System.IServiceProvider.GetService(System.Type)" />方法替换<see cref="T:System.Web.UI.Design.IWebApplication" />类型设置为访问项目项、 文档或通过可视化设计器提供的配置文件详细信息。</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>