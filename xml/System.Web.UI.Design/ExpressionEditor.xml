<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb01c3d6cf6e42b1709ab5acc0cf88f7b14094c3" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53389944" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditor abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义一组属性和方法，用来计算设计时与控件属性关联的表达式，并向可视化设计宿主提供表达式编辑器表，以便在表达式编辑器对话框中使用。 此类为抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可视化设计器宿主，如[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]，使用<xref:System.Web.UI.Design.ExpressionEditor>类以提供自定义表达式编辑器表对用户来说，，然后计算所选的表达式的设计时呈现。  
  
 当您浏览<xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A>设计时属性网格中的控件的属性，可视化设计器显示一个对话框来设置控件属性的表达式。 可以选择基于的表达式前缀列表的表达式类型。 当从列表中选择表达式前缀时，可视化设计器使用关联<xref:System.Web.UI.Design.ExpressionEditor>和<xref:System.Web.UI.Design.ExpressionEditorSheet>对象，若要设置，评估，并转换基于为该类型的表达式语法的表达式字符串。 可视化设计器设置关联的控件属性的表达式，并使用计算的表达式结果来指定控件在设计图面呈现的属性值。  
  
 静态<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法获取与特定的表达式前缀或表达式生成器相关联的表达式编辑器。 <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>属性<xref:System.Web.UI.Design.ExpressionEditor>对象返回的已配置的表达式前缀。 <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>方法计算输入的表达式字符串。 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法将返回<xref:System.Web.UI.Design.ExpressionEditorSheet>用于提示表达式对话框中的自定义表达式属性的实现。  
  
 通常情况下，若要在设计时支持新的表达式类型，您定义唯一的表达式前缀和提供自定义<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>实现。 （可选） 可以提供自定义<xref:System.Web.UI.Design.ExpressionEditorSheet>实现，用于定义属性，用于构建表达式对话框中的表达式。  
  
 表达式前缀标识自定义表达式类型，并将表达式与表达式生成器和表达式编辑器相关联。 当自定义表达式进行分析的页中时，用于创建实例关联的表达式前缀<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>类。 若要将表达式前缀与表达式生成器和表达式编辑器相关联，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>并<xref:System.Web.Compilation.ExpressionPrefixAttribute>向自定义属性<xref:System.Web.Compilation.ExpressionBuilder>类，并配置中的表达式生成器的表达式前缀`expressionBuilders`Web 配置文件中的元素。 前缀是不是必需，但强烈建议使用。  
  
   
  
## Examples  
 下面的代码示例演示如何从派生<xref:System.Web.UI.Design.ExpressionEditor>类来定义自定义表达式编辑器。  
  
 [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>在派生自定义需要执行以下步骤<see cref="T:System.Web.UI.Design.ExpressionEditor" />类： 
-替代<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />方法以在设计时计算自定义表达式类型。  
  
-（可选） 重写<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法以返回自定义类，用于定义合并以形成自定义表达式的属性。  
  
-应用<see cref="T:System.Web.Compilation.ExpressionEditorAttribute" />特性，可以在<see cref="T:System.Web.Compilation.ExpressionBuilder" />类声明，以将自定义表达式生成器与派生的表达式编辑器类相关联。  
  
例如，<see cref="T:System.Web.UI.Design.ResourceExpressionEditor" />类派生自<see cref="T:System.Web.UI.Design.ExpressionEditor" />类，并提供了评估和将资源字符串引用与控件属性关联在设计时实现。 <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" />类是与表达式前缀相关联<see langword="Resources" />和<see cref="T:System.Web.UI.Design.ResourceExpressionEditor" />实现。 <see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法将返回<see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />，用于定义构成资源引用表达式的各个属性。</para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为<xref:System.Web.UI.Design.ExpressionEditor>类为抽象类，不能创建的实例<xref:System.Web.UI.Design.ExpressionEditor>类直接使用<xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A>构造函数。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当派生自<see cref="T:System.Web.UI.Design.ExpressionEditor" />类中重写<see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" />构造函数来实现自定义初始化表达式编辑器实现的操作。</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EvaluateExpression (expression As String, parseTimeData As Object, propertyType As Type, serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EvaluateExpression(System::String ^ expression, System::Object ^ parseTimeData, Type ^ propertyType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : string * obj * Type * IServiceProvider -&gt; obj" Usage="expressionEditor.EvaluateExpression (expression, parseTimeData, propertyType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">要计算的表达式字符串。 该表达式不包含表达式前缀。</param>
        <param name="parseTimeData">一个包含附加分析信息（用以计算 <paramref name="expression" />）的对象。 这通常是由表达式生成器提供的。</param>
        <param name="propertyType"><paramref name="expression" /> 绑定到的控件属性的类型。</param>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>计算表达式字符串并提供控件属性的设计时值。</summary>
        <returns>如果表达式计算成功，则为由计算的表达式字符串引用的对象；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可视化设计器宿主使用<xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>方法来计算表达式，并为关联的控件属性提供设计时值。  
  
 可视化设计器使用<xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=nameWithType>方法，以便在设计时，然后调用分析的表达式字符串<xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>分析得出的表达式数据的方法。 可视化设计器使用计算的表达式结果来指定控件在设计图面呈现的属性值。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>类派生自<see cref="T:System.Web.UI.Design.ExpressionEditor" />类必须重写<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />方法以在设计时计算自定义表达式类型。  
  
至少，<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />实现必须使用以下步骤： 
1.  评估的表达式字符串并确定该表达式引用的对象。  
  
2.  返回<see langword="null" />，如果无法计算表达式字符串。  
  
3.  使用<see cref="M:System.Type.IsAssignableFrom(System.Type)" />方法<paramref name="propertyType" />若要确定是否被引用的对象可以分配直接与控件属性类型，然后根据结果，完成以下操作之一： 
-如果被引用的对象可以直接分配给控件属性，返回的表达式引用的对象。  
  
-如果被引用的对象是简单类型，例如一个字符串，返回所引用的对象。  
  
-否则，确定是否可以分配到或转换为属性类型所引用的对象。  
  
4.  使用<see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" />方法<see cref="T:System.ComponentModel.TypeConverter" />对象<paramref name="propertyType" />以确定是否被引用的对象可以转换为控件属性类型，然后根据结果，完成以下操作之一： 
-如果对象可以转换为控件属性类型，返回已转换的对象使用<see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" />方法。  
  
-如果无法分配所引用的对象，或将其转换为<paramref name="propertyType" />，返回所引用的对象。  
  
（可选）<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />实现可以使用<paramref name="parseTimeData" />对象提供的<see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />实现来优化或帮助您在计算的输入的表达式字符串。</para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string" Usage="System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表达式前缀，该前缀标识受表达式编辑器实现支持的表达式字符串。</summary>
        <value>表示从 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 派生的类所支持的表达式前缀的字符串；否则，如果表达式编辑器没有关联的表达式前缀，则为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表达式前缀标识自定义表达式类型，并将表达式与表达式生成器和表达式编辑器相关联。 当自定义表达式进行分析的页中时，用于创建实例关联的表达式前缀<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>类。 若要将表达式前缀与表达式生成器和表达式编辑器相关联，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>并<xref:System.Web.Compilation.ExpressionPrefixAttribute>向自定义属性<xref:System.Web.Compilation.ExpressionBuilder>类，并配置中的表达式生成器的表达式前缀`expressionBuilders`Web 配置文件中的元素。  
  
 通常情况下，派生的类不会重写<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>属性。 基<xref:System.Web.UI.Design.ExpressionEditor>类集<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>值基于<xref:System.Web.Compilation.ExpressionPrefixAttribute>关联的属性<xref:System.Web.Compilation.ExpressionBuilder>对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回与表达式前缀或表达式生成器关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现。</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionPrefix As String, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(System::String ^ expressionPrefix, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionPrefix, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">用来查找相关联的表达式编辑器的表达式前缀。</param>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>返回一个与指定的表达式前缀相关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现。</summary>
        <returns>与 <paramref name="expressionPrefix" /> 关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现；否则，如果未定义 <paramref name="expressionPrefix" /> 或者未将它与 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 关联，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用静态<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法重载，可查找<xref:System.Web.UI.Design.ExpressionEditor>与特定的表达式前缀或表达式生成器类型相关联的对象。  
  
 对于每个自定义表达式类型，表达式前缀标识相关联的表达式生成器和表达式编辑器。 当自定义表达式进行分析的页中时，用于创建实例关联的表达式前缀<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>类。  
  
 若要将表达式前缀与表达式生成器和表达式编辑器相关联，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>并<xref:System.Web.Compilation.ExpressionPrefixAttribute>向自定义属性<xref:System.Web.Compilation.ExpressionBuilder>类，并配置中的表达式生成器的表达式前缀`expressionBuilders`Web 配置文件中的元素。  
  
 若要查找表达式前缀相关联的表达式编辑器<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法枚举可用<xref:System.Web.Compilation.ExpressionBuilder>实现匹配的前缀。 <xref:System.Web.Compilation.ExpressionBuilder>实现可以配置在`expressionBuilders`Web 配置文件的部分。 如果可用<xref:System.Web.Compilation.ExpressionBuilder>实现定义的表达式前缀，<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法返回在指定的类型<xref:System.Web.Compilation.ExpressionEditorAttribute>属性的<xref:System.Web.Compilation.ExpressionBuilder>元数据。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionBuilderType As Type, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(Type ^ expressionBuilderType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : Type * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionBuilderType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">派生的表达式生成器类的类型，用于定位相关联的表达式编辑器。</param>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>返回一个与指定表达式生成器类型相关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现。</summary>
        <returns>与 <paramref name="expressionBuilderType" /> 关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现；否则，如果无法定位 <paramref name="expressionBuilderType" /> 或者它没有关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" />，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用静态<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>重载以查找<xref:System.Web.UI.Design.ExpressionEditor>与特定的表达式前缀或表达式生成器类型相关联的对象。  
  
 对于每个自定义表达式类型，表达式前缀标识相关联的表达式生成器和表达式编辑器。 当自定义表达式进行分析的页中时，用于创建实例关联的表达式前缀<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>类。  
  
 若要将表达式前缀与表达式生成器和表达式编辑器相关联，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>并<xref:System.Web.Compilation.ExpressionPrefixAttribute>向自定义属性<xref:System.Web.Compilation.ExpressionBuilder>类，并配置中的表达式生成器的表达式前缀`expressionBuilders`Web 配置文件中的元素。  
  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法枚举可用<xref:System.Web.Compilation.ExpressionBuilder>实现以定位`expressionBuilderType`。 <xref:System.Web.Compilation.ExpressionBuilder>实现可以配置在`expressionBuilders`Web 配置文件的部分。 如果`expressionBuilderType`中的可用集找到<xref:System.Web.Compilation.ExpressionBuilder>实现中，<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法返回在指定的类型<xref:System.Web.Compilation.ExpressionEditorAttribute>属性的<xref:System.Web.Compilation.ExpressionBuilder>元数据。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="expressionBuilderType" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="serviceProvider" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExpressionEditorSheet (expression As String, serviceProvider As IServiceProvider) As ExpressionEditorSheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::ExpressionEditorSheet ^ GetExpressionEditorSheet(System::String ^ expression, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet&#xA;override this.GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="expressionEditor.GetExpressionEditorSheet (expression, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">为控件属性设置的表达式字符串，用于初始化表达式编辑器表。</param>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>返回与当前表达式编辑器相关联的表达式编辑器表。</summary>
        <returns>一个 <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />，定义自定义的表达式的属性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法将返回<xref:System.Web.UI.Design.ExpressionEditorSheet>实现，用于定义合并以形成自定义表达式的字符串。 可视化设计器使用的表达式编辑器表提示的一个或多个将组合到自定义表达式的字符串。 基类方法返回使用单一的输入的字符串的表达式的默认表达式编辑器表。 表达式编辑器表定义的表达式的属性网格。 因此，表达式编辑器公开的属性将成为可为对话框中的表达式定义的属性。  
  
 类派生自<xref:System.Web.UI.Design.ExpressionEditor>类 （可选） 可以重写<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法以提供自定义表达式编辑器表。 自定义表达式编辑器表可以允许多个属性组合在一起构成的表达式字符串的设计时输入。  
  
 例如，<xref:System.Web.UI.Design.ResourceExpressionEditor>类派生自<xref:System.Web.UI.Design.ExpressionEditor>类，并提供了评估和将资源字符串引用与控件属性关联在设计时实现。 <xref:System.Web.Compilation.ResourceExpressionBuilder>类是与表达式前缀相关联`Resources`和<xref:System.Web.UI.Design.ResourceExpressionEditor>实现。 <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=nameWithType>方法将返回<xref:System.Web.UI.Design.ResourceExpressionEditorSheet>，用于定义构成资源引用表达式的各个属性。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>通常情况下，若要在设计时提供新的表达式类型，您定义唯一的表达式前缀和提供自定义<see cref="T:System.Web.Compilation.ExpressionBuilder" />和<see cref="T:System.Web.UI.Design.ExpressionEditor" />实现。 （可选） 可以提供自定义<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />实现，用于定义属性，用于构建表达式。 即使在配置文件定义的前缀，您还应将应用<see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />对象和一个<see cref="T:System.Web.Compilation.ExpressionEditorAttribute" />对象。  
  
重写<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法以返回自定义表达式中定义多个属性的设计时输入的表达式编辑器表。 当您选择的控件属性和表达式编辑器类型时，可视化设计器调用<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，然后提供当前表达式字符串，它设置控件属性。 使用<paramref name="expression" />设置表达式的属性的初始值。 使用<paramref name="serviceProvider" />初始化自定义表达式表构造函数以及用于访问所提供的设计器宿主服务。 例如，调用<see cref="M:System.IServiceProvider.GetService(System.Type)" />方法替换<see cref="T:System.Web.UI.Design.IWebApplication" />类型设置为访问项目项、 文档或通过可视化设计器提供的配置文件详细信息。</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>