<Type Name="DataSourceDesigner" FullName="System.Web.UI.Design.DataSourceDesigner">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="666da6eb5c710531a2a51ecb9233f1d16530db52" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590301" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataSourceDesigner : System.Web.UI.Design.ControlDesigner, System.Web.UI.Design.IDataSourceDesigner" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataSourceDesigner extends System.Web.UI.Design.ControlDesigner implements class System.Web.UI.Design.IDataSourceDesigner" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.DataSourceDesigner" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSourceDesigner&#xA;Inherits ControlDesigner&#xA;Implements IDataSourceDesigner" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSourceDesigner : System::Web::UI::Design::ControlDesigner, System::Web::UI::Design::IDataSourceDesigner" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Design.ControlDesigner</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.Design.IDataSourceDesigner</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>在设计宿主中为 <see cref="T:System.Web.UI.DataSourceControl" /> 类提供设计时支持。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.DataSourceDesigner>类是基适用于数据源设计器中，如<xref:System.Web.UI.Design.WebControls.SqlDataSourceDesigner>， <xref:System.Web.UI.Design.WebControls.AccessDataSourceDesigner>，和<xref:System.Web.UI.Design.WebControls.ObjectDataSourceDesigner>类。 如果你创建一个新的数据源控件，你可能还要创建自定义控件设计器为您的控件和派生从<xref:System.Web.UI.Design.DataSourceDesigner>类。  
  
 <xref:System.Web.UI.Design.DataSourceDesigner>类具有两个事件方法：<xref:System.Web.UI.Design.DataSourceDesigner.OnDataSourceChanged%2A>和<xref:System.Web.UI.Design.DataSourceDesigner.OnSchemaRefreshed%2A>方法。 这两种事件可以暂时禁用与<xref:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents%2A>方法，设置<xref:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents%2A>属性。 可以使用再次启用事件方法<xref:System.Web.UI.Design.DataSourceDesigner.ResumeDataSourceEvents%2A>方法。  
  
 有两种可用于评估架构或视图的相等性，而无需创建类的实例的静态方法：  
  
-   <xref:System.Web.UI.Design.DataSourceDesigner.SchemasEquivalent%2A>方法比较两个架构。  
  
-   <xref:System.Web.UI.Design.DataSourceDesigner.ViewSchemasEquivalent%2A>方法比较两个视图的架构。  
  
   
  
## Examples  
 下面的代码示例演示如何使用自定义数据源控件具有几个其他小自定义类下, 表中列出。  
  
|自定义类|派生自|  
|------------------|------------------|  
|`CustomDataSource`|<xref:System.Web.UI.WebControls.ObjectDataSource>|  
|`CustomDataSourceDesigner`|<xref:System.Web.UI.Design.DataSourceDesigner>|  
|`CustomDataSourceView`|<xref:System.Web.UI.WebControls.ObjectDataSourceView>|  
|`CustomDesignDataSourceView`|<xref:System.Web.UI.Design.DesignerDataSourceView>|  
|`BookListViewSchema`|<xref:System.Web.UI.Design.IDataSourceViewSchema>|  
|`CustomIDFieldSchema`|<xref:System.Web.UI.Design.IDataSourceFieldSchema>|  
|`CustomTitleFieldSchema`|<xref:System.Web.UI.Design.IDataSourceFieldSchema>|  
|`BookItem` （两个字段数据结构。）||  
  
 后编译的代码示例，在设计视图中打开的.aspx 页，并将`DataSourceID`属性设置为自定义数据源控件的 ID。  
  
 [!code-csharp[DataSourceDesignerSample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataSourceDesignerSample/CS/DataSourceDesignerSample.cs#1)]
 [!code-vb[DataSourceDesignerSample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataSourceDesignerSample/VB/DataSourceDesignerSample.vb#1)]  
[!code-aspx-csharp[DataSourceDesignerSample#6](~/samples/snippets/csharp/VS_Snippets_WebNet/DataSourceDesignerSample/CS/DataSourceDesignerSample.aspx#6)]
[!code-aspx-vb[DataSourceDesignerSample#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataSourceDesignerSample/VB/DataSourceDesignerSample.aspx#6)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>若要在派生类中的设计时提供的操作列表菜单命令，必须重写<see cref="P:System.Web.UI.Design.DataSourceDesigner.ActionLists" />属性以返回自定义<see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />与派生自的自定义项的对象<see cref="T:System.ComponentModel.Design.DesignerActionList" />对象。</para>
    </block>
    <altmember cref="T:System.Web.UI.DataSourceControl" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSourceDesigner ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSourceDesigner();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.Design.DataSourceDesigner" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.DataSourceDesigner.%23ctor%2A>在设计时设计宿主调用构造函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionLists">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.Design.DesignerActionListCollection ActionLists { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerActionListCollection ActionLists" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.DataSourceDesigner.ActionLists" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ActionLists As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::Design::DesignerActionListCollection ^ ActionLists { System::ComponentModel::Design::DesignerActionListCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取项的列表，其中的项用来在设计时创建操作列表菜单。</summary>
        <value>包含控件设计器的操作列表项的 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建简单复合控件与<xref:System.Web.UI.WebControls.Label>控件和<xref:System.Web.UI.WebControls.TextBox>控件，以及设置属性，`Text`上两个内部控件的属性以及<xref:System.Web.UI.WebControls.WebControl.Width%2A>和<xref:System.Web.UI.WebControls.WebControl.BackColor%2A>属性<xref:System.Web.UI.WebControls.TextBox>控件。 关联的控件设计器类创建三个<xref:System.ComponentModel.Design.DesignerActionMethodItem>命令时，每个用于设置在控件中，两个属性和其设置可以回滚撤消功能设计宿主中。 尽管此代码示例不使用自定义<xref:System.Web.UI.DataSourceControl>对象，它演示如何重写<xref:System.Web.UI.Design.DataSourceDesigner.ActionLists%2A>属性。  
  
 [!code-csharp[DesignerInvokeTransactedChange#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DesignerInvokeTransactedChange/CS/InvokeTransactedChangeSample.cs#1)]
 [!code-vb[DesignerInvokeTransactedChange#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DesignerInvokeTransactedChange/VB/InvokeTransactedChangeSample.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>当你创建的自定义类，派生自<see cref="T:System.Web.UI.Design.DataSourceDesigner" />类，必须重写<see cref="P:System.Web.UI.Design.DataSourceDesigner.ActionLists" />属性。 在重写方法中，首先调用基类，来创建默认值<see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />对象，并将自定义的特定于你的类的操作列表。</para>
        </block>
        <altmember cref="P:System.Web.UI.Design.ControlDesigner.ActionLists" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
      </Docs>
    </Member>
    <Member MemberName="CanConfigure">
      <MemberSignature Language="C#" Value="public virtual bool CanConfigure { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanConfigure" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.DataSourceDesigner.CanConfigure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanConfigure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanConfigure { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.Design.IDataSourceDesigner.CanConfigure</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否可以调用 <see cref="M:System.Web.UI.Design.DataSourceDesigner.Configure" /> 方法。</summary>
        <value>
          如果可以调用 <see cref="M:System.Web.UI.Design.DataSourceDesigner.Configure" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.Design.DataSourceDesigner.CanConfigure%2A>中启用或禁用特定数据源的设计时配置的自定义类属性。  
  
 设计宿主中的如[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]使用<xref:System.Web.UI.Design.DataSourceDesigner.CanConfigure%2A>属性来确定是否配置数据源的命令显示在操作列表菜单中在设计时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRefreshSchema">
      <MemberSignature Language="C#" Value="public virtual bool CanRefreshSchema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRefreshSchema" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.DataSourceDesigner.CanRefreshSchema" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanRefreshSchema As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRefreshSchema { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.Design.IDataSourceDesigner.CanRefreshSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否可以调用 <see cref="M:System.Web.UI.Design.DataSourceDesigner.RefreshSchema(System.Boolean)" /> 方法。</summary>
        <value>
          如果可以调用 <see cref="M:System.Web.UI.Design.DataSourceDesigner.RefreshSchema(System.Boolean)" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.Design.DataSourceDesigner.CanRefreshSchema%2A>派生类来启用或禁用能够在设计时为特定数据源刷新架构中的属性。 如果你的应用程序需要固定的数据结构，但在架构将永远不会更改，你想<xref:System.Web.UI.Design.DataSourceDesigner.CanRefreshSchema%2A>属性以返回`false`。  
  
 设计宿主中的如[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]使用<xref:System.Web.UI.Design.DataSourceDesigner.CanRefreshSchema%2A>属性来确定是否要刷新的架构的命令显示在操作列表菜单中在设计时。  
  
 在设计主机如[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]，你可以看到<xref:System.Web.UI.Design.DataSourceDesigner.CanRefreshSchema%2A>通过完成以下过程的操作中的属性：  
  
1.  在页面上放置<xref:System.Web.UI.WebControls.SqlDataSource>或<xref:System.Web.UI.WebControls.AccessDataSource>控件。  
  
2.  在设计视图，请在操作列表中，单击**配置**。  
  
3.  从数据源中删除几个字段。  
  
4.  在操作列表中，单击**刷新架构**。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public virtual void Configure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Configure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.Configure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Configure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Configure();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.Design.IDataSourceDesigner.Configure</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>启动设计宿主中的数据源配置实用工具。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.DataSourceDesigner.Configure%2A>中不支持方法<xref:System.Web.UI.Design.DataSourceDesigner>类; 但是，它可以重写通过自定义数据源设计器从继承<xref:System.Web.UI.Design.DataSourceDesigner>类。  
  
 在设计主机如[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]，你可以看到<xref:System.Web.UI.Design.DataSourceDesigner.Configure%2A>中通过完成以下过程的操作方法：  
  
1.  Put<xref:System.Web.UI.WebControls.SqlDataSource>或<xref:System.Web.UI.WebControls.AccessDataSource>在页面上的控件。  
  
2.  在设计视图中，单击操作列表上**配置**。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">已尝试在基类中调用此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.Design.DataSourceDesigner.DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataSourceChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ DataSourceChanged;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.Design.IDataSourceDesigner.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当关联数据源的任何属性发生更改时发生。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Design.DataSourceDesigner.OnDataSourceChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetDesignTimeHtml">
      <MemberSignature Language="C#" Value="public override string GetDesignTimeHtml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetDesignTimeHtml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.GetDesignTimeHtml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDesignTimeHtml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetDesignTimeHtml();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索用于在设计时显示关联数据源控件的 HTML 标记。</summary>
        <returns>用于在设计时显示的标记。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认实现<xref:System.Web.UI.Design.DataSourceDesigner.GetDesignTimeHtml%2A>方法从基类会返回结果<xref:System.Web.UI.Design.ControlDesigner.CreatePlaceHolderDesignTimeHtml%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ControlDesigner.CreatePlaceHolderDesignTimeHtml" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.DesignerDataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.DesignerDataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetView (viewName As String) As DesignerDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::DesignerDataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.Design.IDataSourceDesigner.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.DesignerDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">视图的名称。</param>
        <summary>检索由视图名称标识的 <see cref="T:System.Web.UI.Design.DesignerDataSourceView" /> 对象。</summary>
        <returns>此实现总是返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在派生类中，如果`viewName`不存在，<xref:System.Web.UI.Design.DataSourceDesigner.GetView%2A>方法应返回`null`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.DesignerDataSourceView" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetViewNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetViewNames();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.Design.IDataSourceDesigner.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此数据源中可用的视图名称的数组。</summary>
        <returns>视图名称的数组。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.OnDataSourceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDataSourceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDataSourceChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.EventArgs" /> 对象，由调用对象提供。</param>
        <summary>当数据源的属性已更改且 <see cref="E:System.Web.UI.Design.DataSourceDesigner.DataSourceChanged" /> 值为 <see langword="false" /> 时，引发 <see cref="P:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.DataSourceDesigner.OnDataSourceChanged%2A>方法通知绑定到关联的数据源以刷新其控件设计宿主中的每个控件的控件设计器。 <xref:System.Web.UI.Design.DataSourceDesigner.OnDataSourceChanged%2A>方法，可以抑制与<xref:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents%2A>方法或通过调用<xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A>用参数的方法`false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.Design.DataSourceDesigner.DataSourceChanged" />
        <altmember cref="M:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents" />
      </Docs>
    </Member>
    <Member MemberName="OnSchemaRefreshed">
      <MemberSignature Language="C#" Value="protected virtual void OnSchemaRefreshed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSchemaRefreshed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.OnSchemaRefreshed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSchemaRefreshed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSchemaRefreshed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>当数据源的架构已更改且 <see cref="E:System.Web.UI.Design.DataSourceDesigner.SchemaRefreshed" /> 值为 <see langword="false" /> 时，引发 <see cref="P:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.DataSourceDesigner.OnSchemaRefreshed%2A>方法通知绑定到架构中的字段已更改关联的数据源的每个控件的控件设计器。 <xref:System.Web.UI.Design.DataSourceDesigner.OnSchemaRefreshed%2A>方法，可以抑制与<xref:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents%2A>方法或通过调用<xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A>用自变量的属性`false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents" />
        <altmember cref="M:System.Web.UI.Design.DataSourceDesigner.RefreshSchema(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RefreshSchema">
      <MemberSignature Language="C#" Value="public virtual void RefreshSchema (bool preferSilent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RefreshSchema(bool preferSilent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.RefreshSchema(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RefreshSchema (preferSilent As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RefreshSchema(bool preferSilent);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.Design.IDataSourceDesigner.RefreshSchema(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferSilent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="preferSilent">
          若为 <see langword="true" />，则在刷新架构时允许事件发生；若为 <see langword="false" />，则在刷新架构时禁用 <see cref="E:System.Web.UI.Design.DataSourceDesigner.DataSourceChanged" /> 和 <see cref="E:System.Web.UI.Design.DataSourceDesigner.SchemaRefreshed" /> 事件。</param>
        <summary>在可以选择取消事件时从数据源刷新架构。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.DataSourceDesigner> 类不支持 <xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A> 方法。 但是，它支持在派生类中，如<xref:System.Web.UI.Design.WebControls.XmlDataSourceDesigner>类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">已尝试在基类中调用此方法。</exception>
        <altmember cref="M:System.Web.UI.Design.WebControls.XmlDataSourceDesigner.RefreshSchema(System.Boolean)" />
        <altmember cref="M:System.Web.UI.Design.DataSourceDesigner.OnSchemaRefreshed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ResumeDataSourceEvents">
      <MemberSignature Language="C#" Value="public virtual void ResumeDataSourceEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResumeDataSourceEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.ResumeDataSourceEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResumeDataSourceEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResumeDataSourceEvents();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.Design.IDataSourceDesigner.ResumeDataSourceEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在已取消数据源事件之后恢复数据源事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据源事件，可以通过设置抑制<xref:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents%2A>属性`false`或通过调用<xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A>用参数的方法`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已尝试在基类中调用此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaRefreshed">
      <MemberSignature Language="C#" Value="public event EventHandler SchemaRefreshed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SchemaRefreshed" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.Design.DataSourceDesigner.SchemaRefreshed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SchemaRefreshed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ SchemaRefreshed;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.Design.IDataSourceDesigner.SchemaRefreshed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在架构刷新后发生。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Design.DataSourceDesigner.OnSchemaRefreshed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="SchemasEquivalent">
      <MemberSignature Language="C#" Value="public static bool SchemasEquivalent (System.Web.UI.Design.IDataSourceSchema schema1, System.Web.UI.Design.IDataSourceSchema schema2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SchemasEquivalent(class System.Web.UI.Design.IDataSourceSchema schema1, class System.Web.UI.Design.IDataSourceSchema schema2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.SchemasEquivalent(System.Web.UI.Design.IDataSourceSchema,System.Web.UI.Design.IDataSourceSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SchemasEquivalent (schema1 As IDataSourceSchema, schema2 As IDataSourceSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SchemasEquivalent(System::Web::UI::Design::IDataSourceSchema ^ schema1, System::Web::UI::Design::IDataSourceSchema ^ schema2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema1" Type="System.Web.UI.Design.IDataSourceSchema" />
        <Parameter Name="schema2" Type="System.Web.UI.Design.IDataSourceSchema" />
      </Parameters>
      <Docs>
        <param name="schema1">要比较的第一个架构（派生自 <see cref="T:System.Web.UI.Design.IDataSourceSchema" />）。</param>
        <param name="schema2">要比较的第二个架构。</param>
        <summary>提供一个值，该值指示两个架构是否相等。</summary>
        <returns>
          如果两个架构等效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这两种架构的比较基于视图，以及的名称和类型视图中包含的字段。 <xref:System.Web.UI.Design.DataSourceDesigner.SchemasEquivalent%2A>方法可以使用实例的情况下<xref:System.Web.UI.Design.DataSourceDesigner>类。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.IDataSourceSchema" />
      </Docs>
    </Member>
    <Member MemberName="SuppressDataSourceEvents">
      <MemberSignature Language="C#" Value="public virtual void SuppressDataSourceEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SuppressDataSourceEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SuppressDataSourceEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SuppressDataSourceEvents();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.Design.IDataSourceDesigner.SuppressDataSourceEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>推迟所有数据源事件，直到 <see cref="M:System.Web.UI.Design.DataSourceDesigner.ResumeDataSourceEvents" /> 方法被调用为止。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SuppressingDataSourceEvents">
      <MemberSignature Language="C#" Value="protected bool SuppressingDataSourceEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressingDataSourceEvents" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressingDataSourceEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool SuppressingDataSourceEvents { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否发生 <see cref="E:System.Web.UI.Design.DataSourceDesigner.DataSourceChanged" /> 事件或 <see cref="M:System.Web.UI.Design.DataSourceDesigner.RefreshSchema(System.Boolean)" /> 方法。</summary>
        <value>
          如果事件被取消，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents%2A>属性可以通过调用设置<xref:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents%2A>或<xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A>用参数的方法`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewSchemasEquivalent">
      <MemberSignature Language="C#" Value="public static bool ViewSchemasEquivalent (System.Web.UI.Design.IDataSourceViewSchema viewSchema1, System.Web.UI.Design.IDataSourceViewSchema viewSchema2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ViewSchemasEquivalent(class System.Web.UI.Design.IDataSourceViewSchema viewSchema1, class System.Web.UI.Design.IDataSourceViewSchema viewSchema2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.DataSourceDesigner.ViewSchemasEquivalent(System.Web.UI.Design.IDataSourceViewSchema,System.Web.UI.Design.IDataSourceViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ViewSchemasEquivalent (viewSchema1 As IDataSourceViewSchema, viewSchema2 As IDataSourceViewSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ViewSchemasEquivalent(System::Web::UI::Design::IDataSourceViewSchema ^ viewSchema1, System::Web::UI::Design::IDataSourceViewSchema ^ viewSchema2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewSchema1" Type="System.Web.UI.Design.IDataSourceViewSchema" />
        <Parameter Name="viewSchema2" Type="System.Web.UI.Design.IDataSourceViewSchema" />
      </Parameters>
      <Docs>
        <param name="viewSchema1">要比较的第一个视图（派生自 <see cref="T:System.Web.UI.Design.IDataSourceViewSchema" />）。</param>
        <param name="viewSchema2">要比较的第二个视图。</param>
        <summary>提供一个值，该值确定两个架构视图是否相等。</summary>
        <returns>
          如果两个视图等效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.DataSourceDesigner.ViewSchemasEquivalent%2A>方法可以使用实例的情况下<xref:System.Web.UI.Design.DataSourceDesigner>类。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.IDataSourceViewSchema" />
      </Docs>
    </Member>
  </Members>
</Type>