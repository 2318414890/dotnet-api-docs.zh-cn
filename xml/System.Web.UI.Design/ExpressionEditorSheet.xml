<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d987e9f0ffaf7b1818b7d646845498696df77f9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36589976" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示自定义表达式的设计时编辑器表。 必须继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义表达式编辑器表，开发人员使用设置设计时的自定义表达式的属性。 可以使用表达式字符串; 设置控件属性值表达式字符串将计算的表达式生成器通过在运行时和设计时表达式编辑器。  
  
 当您浏览<xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A>设计时属性网格中的控件的属性，可视化设计器显示一个对话框，设置为的控件属性提供值的表达式。 你可以选择基于表达式前缀的列表的表达式类型。 当从列表中选择表达式前缀时，可视化设计器将使用关联<xref:System.Web.UI.Design.ExpressionEditor>和<xref:System.Web.UI.Design.ExpressionEditorSheet>对象来计算和转换表达式字符串基于该类型的表达式的语法。 可视设计器中使用表达式编辑器表属性为提示输入将合并到自定义表达式字符串的一个或多个字符串。  
  
 通常情况下，若要在设计时提供新的表达式类型，请定义一个唯一的表达式前缀并提供自定义<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>实现。 或者，您可以提供自定义<xref:System.Web.UI.Design.ExpressionEditorSheet>定义用于构成表达式的属性的实现。 若要与表达式生成器和一个表达式编辑器相关联的表达式前缀，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>属性和<xref:System.Web.Compilation.ExpressionPrefixAttribute>到自定义属性<xref:System.Web.Configuration.ExpressionBuilder>类，并随后为中的表达式生成器中配置的表达式前缀`expressionBuilders` Web 配置文件中的元素。  
  
 默认实现<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法返回一个基本编辑器表中，使用单个输入的字符串以形成的表达式。 派生自的自定义表达式编辑器<xref:System.Web.UI.Design.ExpressionEditor>可以重写<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法以返回表实现的自定义编辑器。 通常情况下，自定义编辑器表包含用于生成表达式字符串的多个属性。 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法返回基于当前表达式属性生成的表达式字符串。  
  
 例如，<xref:System.Web.UI.Design.ResourceExpressionEditor>类派生自<xref:System.Web.UI.Design.ExpressionEditor>类并提供了评估和在设计时将资源字符串引用的控件属性与相关联的实现。 <xref:System.Web.Compilation.ResourceExpressionBuilder>类是与表达式前缀关联`Resources`和<xref:System.Web.UI.Design.ResourceExpressionEditor>实现。 <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A>方法返回<xref:System.Web.UI.Design.ResourceExpressionEditorSheet>，后者定义了窗体资源引用表达式的各个属性。  
  
 继承自<xref:System.Web.UI.Design.ExpressionEditorSheet>类，你必须重写以下成员：  
  
-   <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法以返回表实现的自定义编辑器。  
  
-   <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>构造函数来实现您的表达式编辑器表实现的自定义初始化操作。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>派生的自定义表达式编辑器表从<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />类中，如果在定义新的表达式类型的控件属性值，而你想要生成的表达式字符串基于多个表达式属性值。派生的类实现应包含以下:-可以在设计时设置为表达式字符串中每个非重复值的公共属性。 -An 实现<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />窗体编辑器表属性值中的自定义表达式字符串的方法。 -（可选） 设置表属性的编辑器中的初始值构造函数实现。关联的自定义表达式编辑器类创建派生的编辑器表中的实例<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，使用该实例初始化为控件属性设置与当前表达式字符串并返回到可视化设计器的实例。可视化设计器允许你设置表属性的表达式，然后调用<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />方法以便构成的输入的表达式表属性值的表达式字符串。</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>初始化 <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为<xref:System.Web.UI.Design.ExpressionEditorSheet>类为抽象类，你无法创建的实例<xref:System.Web.UI.Design.ExpressionEditorSheet>直接使用<xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>构造函数。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>从派生时<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />类，请替代<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />构造函数来实现您的表达式编辑器表实现的自定义初始化操作。例如，自定义表达式编辑器表类中实现其他表达式属性可以定义中的表达式属性的默认值<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />构造函数。自定义表达式编辑器表类中可以定义使用输入的参数值来设置初始值表达式属性的其他公共构造函数重载。</para>
        </block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当在派生类中重写时，返回由表达式编辑器表属性值组成的表达式字符串。</summary>
        <returns>当前属性值的自定义表达式字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义表达式编辑器表包含多个表达式的属性，它们合并以形成一个表达式字符串的设计时设置。 可以使用表达式字符串; 设置控件属性值表达式字符串的表达式生成器在运行时计算。  
  
 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法从当前表达式属性返回生成的表达式字符串。 可视化设计器允许你设置表属性的表达式，然后调用<xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法以获取在表达式字符串并将控件属性值设置。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生的自定义表达式编辑器表从<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />类中，如果在定义新的表达式类型的控件属性值，而你想要生成的表达式字符串基于多个表达式属性值。派生的类实现应包含以下:-可以在设计时设置为表达式字符串中每个非重复值的公共属性。 -An 实现<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />窗体编辑器表属性值中的自定义表达式字符串的方法。 -（可选） 设置表属性的编辑器中的初始值构造函数实现。关联的自定义表达式编辑器类创建派生的编辑器表中的实例<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，与为控件属性设置与当前表达式字符串初始化该实例，然后到视觉对象中返回的实例设计器。可视化设计器允许你设置表属性的表达式，然后调用<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />方法以便构成的输入的表达式表属性值的表达式字符串。</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示表达式字符串是否有效。</summary>
        <value>如果表达式字符串有效，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此基实现始终返回 `true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表达式编辑器表使用的服务提供程序实现。</summary>
        <value>一个 <see cref="T:System.IServiceProvider" />，通常由设计宿主提供，可用于获取其他设计时服务。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>构造函数来设置<xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>实现一个自定义表达式编辑器表。  
  
 <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>属性可以用于访问设计器宿主提供的服务。 例如，调用<xref:System.IServiceProvider.GetService%2A>方法替换<xref:System.Web.UI.Design.IWebApplication>接口访问项目项、 文档或通过可视化设计器提供的配置文件详细信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>