<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d3747-101">表示自定义表达式的设计时编辑器表。</span><span class="sxs-lookup"><span data-stu-id="d3747-101">Represents a design-time editor sheet for a custom expression.</span></span> <span data-ttu-id="d3747-102">必须继承此类。</span><span class="sxs-lookup"><span data-stu-id="d3747-102">This class must be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3747-103">自定义表达式编辑器表，开发人员使用设置设计时的自定义表达式的属性。</span><span class="sxs-lookup"><span data-stu-id="d3747-103">A custom expression editor sheet lets a developer set properties on a custom expression at design-time.</span></span> <span data-ttu-id="d3747-104">可以使用表达式字符串; 设置控件属性值表达式字符串将计算的表达式生成器通过在运行时和设计时表达式编辑器。</span><span class="sxs-lookup"><span data-stu-id="d3747-104">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.</span></span>  
  
 <span data-ttu-id="d3747-105">当您浏览<xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A>设计时属性网格中的控件的属性，可视化设计器显示一个对话框，设置为的控件属性提供值的表达式。</span><span class="sxs-lookup"><span data-stu-id="d3747-105">When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property.</span></span> <span data-ttu-id="d3747-106">你可以选择基于表达式前缀的列表的表达式类型。</span><span class="sxs-lookup"><span data-stu-id="d3747-106">You can select the expression type based on a list of expression prefixes.</span></span> <span data-ttu-id="d3747-107">当从列表中选择表达式前缀时，可视化设计器将使用关联<xref:System.Web.UI.Design.ExpressionEditor>和<xref:System.Web.UI.Design.ExpressionEditorSheet>对象来计算和转换表达式字符串基于该类型的表达式的语法。</span><span class="sxs-lookup"><span data-stu-id="d3747-107">When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression.</span></span> <span data-ttu-id="d3747-108">可视设计器中使用表达式编辑器表属性为提示输入将合并到自定义表达式字符串的一个或多个字符串。</span><span class="sxs-lookup"><span data-stu-id="d3747-108">The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.</span></span>  
  
 <span data-ttu-id="d3747-109">通常情况下，若要在设计时提供新的表达式类型，请定义一个唯一的表达式前缀并提供自定义<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>实现。</span><span class="sxs-lookup"><span data-stu-id="d3747-109">Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations.</span></span> <span data-ttu-id="d3747-110">或者，您可以提供自定义<xref:System.Web.UI.Design.ExpressionEditorSheet>定义用于构成表达式的属性的实现。</span><span class="sxs-lookup"><span data-stu-id="d3747-110">Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression.</span></span> <span data-ttu-id="d3747-111">若要与表达式生成器和一个表达式编辑器相关联的表达式前缀，将应用<xref:System.Web.Compilation.ExpressionEditorAttribute>属性和<xref:System.Web.Compilation.ExpressionPrefixAttribute>到自定义属性<xref:System.Web.Configuration.ExpressionBuilder>类，并随后为中的表达式生成器中配置的表达式前缀`expressionBuilders` Web 配置文件中的元素。</span><span class="sxs-lookup"><span data-stu-id="d3747-111">To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.</span></span>  
  
 <span data-ttu-id="d3747-112">默认实现<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法返回一个基本编辑器表中，使用单个输入的字符串以形成的表达式。</span><span class="sxs-lookup"><span data-stu-id="d3747-112">The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression.</span></span> <span data-ttu-id="d3747-113">派生自的自定义表达式编辑器<xref:System.Web.UI.Design.ExpressionEditor>可以重写<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法以返回表实现的自定义编辑器。</span><span class="sxs-lookup"><span data-stu-id="d3747-113">Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span> <span data-ttu-id="d3747-114">通常情况下，自定义编辑器表包含用于生成表达式字符串的多个属性。</span><span class="sxs-lookup"><span data-stu-id="d3747-114">Typically, a custom editor sheet contains multiple properties that are used to build the expression string.</span></span> <span data-ttu-id="d3747-115"><xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法返回基于当前表达式属性生成的表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d3747-115">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.</span></span>  
  
 <span data-ttu-id="d3747-116">例如，<xref:System.Web.UI.Design.ResourceExpressionEditor>类派生自<xref:System.Web.UI.Design.ExpressionEditor>类并提供了评估和在设计时将资源字符串引用的控件属性与相关联的实现。</span><span class="sxs-lookup"><span data-stu-id="d3747-116">For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time.</span></span> <span data-ttu-id="d3747-117"><xref:System.Web.Compilation.ResourceExpressionBuilder>类是与表达式前缀关联`Resources`和<xref:System.Web.UI.Design.ResourceExpressionEditor>实现。</span><span class="sxs-lookup"><span data-stu-id="d3747-117">The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation.</span></span> <span data-ttu-id="d3747-118"><xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A>方法返回<xref:System.Web.UI.Design.ResourceExpressionEditorSheet>，后者定义了窗体资源引用表达式的各个属性。</span><span class="sxs-lookup"><span data-stu-id="d3747-118">The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression.</span></span>  
  
 <span data-ttu-id="d3747-119">继承自<xref:System.Web.UI.Design.ExpressionEditorSheet>类，你必须重写以下成员：</span><span class="sxs-lookup"><span data-stu-id="d3747-119">When you inherit from the <xref:System.Web.UI.Design.ExpressionEditorSheet> class, you must override the following members:</span></span>  
  
-   <span data-ttu-id="d3747-120"><xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法以返回表实现的自定义编辑器。</span><span class="sxs-lookup"><span data-stu-id="d3747-120">The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span>  
  
-   <span data-ttu-id="d3747-121"><xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>构造函数来实现您的表达式编辑器表实现的自定义初始化操作。</span><span class="sxs-lookup"><span data-stu-id="d3747-121">The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="d3747-122">派生的自定义表达式编辑器表从<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />类中，如果在定义新的表达式类型的控件属性值，而你想要生成的表达式字符串基于多个表达式属性值。</span><span class="sxs-lookup"><span data-stu-id="d3747-122">Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values.</span></span> <span data-ttu-id="d3747-123">派生的类实现应包含以下各项：</span><span class="sxs-lookup"><span data-stu-id="d3747-123">A derived class implementation should contain the following:</span></span>  
  
-   <span data-ttu-id="d3747-124">可以在设计时设置为表达式字符串中每个相异值一个公共属性。</span><span class="sxs-lookup"><span data-stu-id="d3747-124">A public property for each distinct value in the expression string that can be set at design time.</span></span>  
  
-   <span data-ttu-id="d3747-125">实现<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />窗体编辑器表属性值中的自定义表达式字符串的方法。</span><span class="sxs-lookup"><span data-stu-id="d3747-125">An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.</span></span>  
  
-   <span data-ttu-id="d3747-126">（可选） 设置表属性的编辑器中的初始值构造函数实现。</span><span class="sxs-lookup"><span data-stu-id="d3747-126">Optionally, a constructor implementation that sets the initial values of the editor sheet properties.</span></span>  
  
 <span data-ttu-id="d3747-127">关联的自定义表达式编辑器类创建派生的编辑器表中的实例<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，使用该实例初始化为控件属性设置与当前表达式字符串并返回到可视化设计器的实例。</span><span class="sxs-lookup"><span data-stu-id="d3747-127">The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and returns the instance to the visual designer.</span></span> <span data-ttu-id="d3747-128">可视化设计器允许你设置表属性的表达式，然后调用<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />方法以便构成的输入的表达式表属性值的表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d3747-128">The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</span></span></para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider"><span data-ttu-id="d3747-129">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</span><span class="sxs-lookup"><span data-stu-id="d3747-129">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</span></span></param>
        <summary><span data-ttu-id="d3747-130">初始化 <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="d3747-130">Initializes a new instance of the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3747-131">因为<xref:System.Web.UI.Design.ExpressionEditorSheet>类为抽象类，你无法创建的实例<xref:System.Web.UI.Design.ExpressionEditorSheet>直接使用<xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="d3747-131">Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="d3747-132">从派生时<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />类，请替代<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />构造函数来实现您的表达式编辑器表实现的自定义初始化操作。</span><span class="sxs-lookup"><span data-stu-id="d3747-132">When deriving from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, override the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor to implement custom initialization actions for your expression editor sheet implementation.</span></span>  
  
 <span data-ttu-id="d3747-133">例如，自定义表达式编辑器表类中实现其他表达式属性可以定义中的表达式属性的默认值<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />构造函数。</span><span class="sxs-lookup"><span data-stu-id="d3747-133">For example, a custom expression editor sheet class that implements additional expression properties can define the default values for the expression properties in the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor.</span></span> <span data-ttu-id="d3747-134">自定义表达式编辑器表类中可以定义使用输入的参数值来设置初始值表达式属性的其他公共构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="d3747-134">A custom expression editor sheet class can define additional public constructor overloads that use input parameter values to set the initial values for the expression properties.</span></span></para>
        </block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3747-135">当在派生类中重写时，返回由表达式编辑器表属性值组成的表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d3747-135">When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.</span></span></summary>
        <returns><span data-ttu-id="d3747-136">当前属性值的自定义表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d3747-136">The custom expression string for the current property values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3747-137">自定义表达式编辑器表包含多个表达式的属性，它们合并以形成一个表达式字符串的设计时设置。</span><span class="sxs-lookup"><span data-stu-id="d3747-137">A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string.</span></span> <span data-ttu-id="d3747-138">可以使用表达式字符串; 设置控件属性值表达式字符串的表达式生成器在运行时计算。</span><span class="sxs-lookup"><span data-stu-id="d3747-138">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.</span></span>  
  
 <span data-ttu-id="d3747-139"><xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法从当前表达式属性返回生成的表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d3747-139">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties.</span></span> <span data-ttu-id="d3747-140">可视化设计器允许你设置表属性的表达式，然后调用<xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法以获取在表达式字符串并将控件属性值设置。</span><span class="sxs-lookup"><span data-stu-id="d3747-140">The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="d3747-141">派生的自定义表达式编辑器表从<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />类中，如果在定义新的表达式类型的控件属性值，而你想要生成的表达式字符串基于多个表达式属性值。</span><span class="sxs-lookup"><span data-stu-id="d3747-141">Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values.</span></span> <span data-ttu-id="d3747-142">派生的类实现应包含以下各项：</span><span class="sxs-lookup"><span data-stu-id="d3747-142">A derived class implementation should contain the following:</span></span>  
  
-   <span data-ttu-id="d3747-143">可以在设计时设置为表达式字符串中每个相异值一个公共属性。</span><span class="sxs-lookup"><span data-stu-id="d3747-143">A public property for each distinct value in the expression string that can be set at design time.</span></span>  
  
-   <span data-ttu-id="d3747-144">实现<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />窗体编辑器表属性值中的自定义表达式字符串的方法。</span><span class="sxs-lookup"><span data-stu-id="d3747-144">An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.</span></span>  
  
-   <span data-ttu-id="d3747-145">（可选） 设置表属性的编辑器中的初始值构造函数实现。</span><span class="sxs-lookup"><span data-stu-id="d3747-145">Optionally, a constructor implementation that sets the initial values of the editor sheet properties.</span></span>  
  
 <span data-ttu-id="d3747-146">关联的自定义表达式编辑器类创建派生的编辑器表中的实例<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，与为控件属性设置与当前表达式字符串初始化该实例，然后到视觉对象中返回的实例设计器。</span><span class="sxs-lookup"><span data-stu-id="d3747-146">The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and then returns the instance to the visual designer.</span></span> <span data-ttu-id="d3747-147">可视化设计器允许你设置表属性的表达式，然后调用<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />方法以便构成的输入的表达式表属性值的表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d3747-147">The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</span></span></para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3747-148">获取一个值，该值指示表达式字符串是否有效。</span><span class="sxs-lookup"><span data-stu-id="d3747-148">Gets a value that indicates whether the expression string is valid.</span></span></summary>
        <value>
          <span data-ttu-id="d3747-149">如果表达式字符串有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d3747-149"><see langword="true" />, if the expression string is valid; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3747-150">此基实现始终返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="d3747-150">This base implementation always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3747-151">获取表达式编辑器表使用的服务提供程序实现。</span><span class="sxs-lookup"><span data-stu-id="d3747-151">Gets the service provider implementation that is used by the expression editor sheet.</span></span></summary>
        <value><span data-ttu-id="d3747-152">一个 <see cref="T:System.IServiceProvider" />，通常由设计宿主提供，可用于获取其他设计时服务。</span><span class="sxs-lookup"><span data-stu-id="d3747-152">An <see cref="T:System.IServiceProvider" />, typically provided by the design host, that can be used to obtain additional design-time services.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3747-153">使用<xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>构造函数来设置<xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>实现一个自定义表达式编辑器表。</span><span class="sxs-lookup"><span data-stu-id="d3747-153">Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementation for a custom expression editor sheet.</span></span>  
  
 <span data-ttu-id="d3747-154"><xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>属性可以用于访问设计器宿主提供的服务。</span><span class="sxs-lookup"><span data-stu-id="d3747-154">The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host.</span></span> <span data-ttu-id="d3747-155">例如，调用<xref:System.IServiceProvider.GetService%2A>方法替换<xref:System.Web.UI.Design.IWebApplication>接口访问项目项、 文档或通过可视化设计器提供的配置文件详细信息。</span><span class="sxs-lookup"><span data-stu-id="d3747-155">For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>