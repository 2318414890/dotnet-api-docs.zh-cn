<Type Name="ChartSerializer" FullName="System.Web.UI.DataVisualization.Charting.ChartSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="59e145f7990c9907f6917cc516248cfa6342db06" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56792663" /></Metadata><TypeSignature Language="C#" Value="public class ChartSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChartSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataVisualization.Charting.ChartSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class ChartSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChartSerializer" />
  <TypeSignature Language="F#" Value="type ChartSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Format")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>启用 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 控件的序列化功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类作为公开<xref:System.Web.UI.DataVisualization.Charting.Chart.Serializer%2A>根的属性<xref:System.Web.UI.DataVisualization.Charting.Chart>类。  
  
 序列化保存图表的状态，并可将序列化的数据加载到图表的选项。 可以保留所有图表属性，包括图表的数据。 此外，还可以重置所有标记为要序列化的图表属性。  
  
 管理用户定义的视图状态时，可以根据需要使用此类。 其中一个其`Load`方法可用于加载视图状态，以及之一`Save`时设置的视图状态，可以使用方法。  
  
 存储序列化数据，可以使用 XML 或二进制格式。 默认情况下，使用 XML，但你可以使用格式<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>属性。  
  
 图表属性保存和使用加载`Save`和`Load`方法，分别。 请注意，将保存仅包含非默认值的属性。 数据可以保存和/或使用一个文件，加载流式传输<xref:System.IO.TextWriter>， <xref:System.IO.TextReader>，<xref:System.Xml.XmlWriter>和<xref:System.Xml.XmlReader>对象。 当保存和/或加载数据使用的对象派生自<xref:System.IO.TextReader>， <xref:System.IO.TextWriter>，<xref:System.Xml.XmlReader>或<xref:System.Xml.XmlWriter>类，数据的格式必须为 XML。  
  
 以下列表介绍三种方法，从基本到高级，用于定义可序列化数据。 请注意，它也可以定义非可序列化数据。 下一段落中介绍了此技术。  
  
-   序列化<xref:System.Web.UI.DataVisualization.Charting.Chart>使用`Save`和`Load`方法，而无需指定任何可序列化的属性。 将序列化的非默认值，其中包括图表的数据，所有图表属性。  
  
-   序列化指定的图表属性<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性进行分组的图表属性序列化为类别，如数据、 外观，等等。 请注意的名称<xref:System.Web.UI.DataVisualization.Charting.ChartArea>和<xref:System.Web.UI.DataVisualization.Charting.Series>对象将自动序列化; 序列化的数据然后应用到现有图表区域和系列加载时。  
  
> [!IMPORTANT]
>  <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>在内部实现属性<xref:System.Web.UI.DataVisualization.Charting.Chart>控制作为<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性  
  
-   指定的图表属性的序列化<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性。 这是可序列化的所有图表属性的逗号分隔列表。 此属性设置为一个显式值之后，它负责的开发人员可以指定要保存的所有属性。 换而言之，与不同<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性中，图表区和系列的名称将不会自动持久化。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性还可以结合使用。 但是，请确保<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>时设置，否则指定的图表属性与自身连接<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性将被重写。  
  
 若要禁止某些属性被序列化，请使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性。 如果一个属性设置为可序列化和非序列化时使用了通配符，即常见<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性具有的优先级。 但是，优先级也取决于已指定某一属性时使用了多少通配符。  
  
 默认情况下，可序列化属性将重置为其默认值之前进行加载。 可以使用更改此行为<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>属性。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Reset%2A>方法还可用于显式将图表属性重置为其默认值。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.SerializationContents Content { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.SerializationContents Content" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content" />
      <MemberSignature Language="VB.NET" Value="Public Property Content As SerializationContents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::SerializationContents Content { System::Web::UI::DataVisualization::Charting::SerializationContents get(); void set(System::Web::UI::DataVisualization::Charting::SerializationContents value); };" />
      <MemberSignature Language="F#" Value="member this.Content : System.Web.UI.DataVisualization.Charting.SerializationContents with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.Content" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.DataVisualization.Charting.SerializationContents), "Default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.SerializationContents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要序列化的图表内容的类型。</summary>
        <value>一个 <see cref="T:System.Web.UI.DataVisualization.Charting.SerializationContents" /> 枚举值，该值表示将在加载、保存或重置操作期间执行序列化的图表内容。 默认情况下，将保留所有非默认图表属性，包括数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，所有图表属性将被序列都化时的任何`Save`和`Load`调用方法。 若要提供更好控制对内容进行序列化，使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性。 请注意，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>并<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>还可以与使用属性<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性。  
  
 > [!IMPORTANT]
 > <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性确定类型的图表的特征，例如"外观"，以进行序列化，并作为在内部实际实现<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性。 这意味着该设置<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性，并设置<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性将导致<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性值被重写，除非<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>串联在一起。 请参阅下面的示例代码将此过程的示例。  
  
 如果您设置<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性，所有<xref:System.Web.UI.DataVisualization.Charting.ChartArea>和<xref:System.Web.UI.DataVisualization.Charting.Series>自动序列化对象的名称; 这意味着，与图表区和系列的序列化的数据也应用到现有对象加载时。  
  
 设置此属性将影响所有加载、 保存和重置操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.SerializationFormat Format { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.SerializationFormat Format" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format" />
      <MemberSignature Language="VB.NET" Value="Public Property Format As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::SerializationFormat Format { System::Web::UI::DataVisualization::Charting::SerializationFormat get(); void set(System::Web::UI::DataVisualization::Charting::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.Format : System.Web.UI.DataVisualization.Charting.SerializationFormat with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.Format" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.DataVisualization.Charting.SerializationFormat), "Xml")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置序列化图表时所使用的格式。</summary>
        <value>一个 <see cref="T:System.Web.UI.DataVisualization.Charting.SerializationFormat" /> 枚举值，该值表示已序列化的数据的格式。 默认值为 XML。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以在 XML 或二进制格式序列化数据。 二进制格式相当简洁，比 XML 更少的存储。 XML，但是，是用户可读的文本格式。  
  
 当保存或加载序列化的数据时，格式必须为 XML。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContentString">
      <MemberSignature Language="C#" Value="protected string GetContentString (System.Web.UI.DataVisualization.Charting.SerializationContents content, bool serializable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetContentString(valuetype System.Web.UI.DataVisualization.Charting.SerializationContents content, bool serializable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.GetContentString(System.Web.UI.DataVisualization.Charting.SerializationContents,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetContentString (content As SerializationContents, serializable As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetContentString(System::Web::UI::DataVisualization::Charting::SerializationContents content, bool serializable);" />
      <MemberSignature Language="F#" Value="member this.GetContentString : System.Web.UI.DataVisualization.Charting.SerializationContents * bool -&gt; string" Usage="chartSerializer.GetContentString (content, serializable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Web.UI.DataVisualization.Charting.SerializationContents" />
        <Parameter Name="serializable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="content">可序列化的内容。</param>
        <param name="serializable">若要获取可序列化的字符串，则为 <see langword="true" />；若要获取不可序列化的字符串，则为 <see langword="false" />。</param>
        <summary>返回可序列化或不可序列化的类和/或属性名称，可否序列化取决于具体的标志值。</summary>
        <returns>一个 <see langword="string" /> 值，表示可序列化或不可序列化的类和/或属性名称。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsResetWhenLoading">
      <MemberSignature Language="C#" Value="public bool IsResetWhenLoading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsResetWhenLoading" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading" />
      <MemberSignature Language="VB.NET" Value="Public Property IsResetWhenLoading As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsResetWhenLoading { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsResetWhenLoading : bool with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个标志，该标志指示是否将对象属性重置为加载之前的默认值。</summary>
        <value>如果对象属性重置为加载之前的默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemplateMode">
      <MemberSignature Language="C#" Value="public bool IsTemplateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemplateMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTemplateMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemplateMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsTemplateMode : bool with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示图表序列化程序是否在模板创建模式下运行的标志。</summary>
        <value>如果图表序列化程序在模板创建模式下运行，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknownAttributeIgnored">
      <MemberSignature Language="C#" Value="public bool IsUnknownAttributeIgnored { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknownAttributeIgnored" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsUnknownAttributeIgnored" />
      <MemberSignature Language="VB.NET" Value="Public Property IsUnknownAttributeIgnored As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknownAttributeIgnored { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknownAttributeIgnored : bool with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.IsUnknownAttributeIgnored" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示是否忽略未知 XML 属性和元素而不引发异常的标志。</summary>
        <value>如果忽略未知 XML 属性和元素而不引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将已序列化的数据加载到 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 控件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Load : System.IO.Stream -&gt; unit" Usage="chartSerializer.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">一个从 <see cref="T:System.IO.Stream" /> 类派生的对象，如 <see cref="T:System.IO.MemoryStream" /> 对象。</param>
        <summary>将已序列化的数据从派生自 <see cref="T:System.IO.Stream" /> 类的对象加载到控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法以序列化的数据加载到<xref:System.Web.UI.DataVisualization.Charting.Chart>控件。  
  
 当加载操作发生时，可序列化属性，默认情况下，首次重置为其默认值之前它们设置为保留值，如果保存。 若要更改此行为，请使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>属性。  
  
 默认情况下，将加载所有序列化的图表属性。 若要加载特定序列化的属性，设置<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>或<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性，然后才能将数据加载。  
  
 请注意，使用保存数据时`Save`方法，只显示那些属性具有非默认值的实际序列化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Load : System.IO.TextReader -&gt; unit" Usage="chartSerializer.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">从抽象的 <see cref="T:System.IO.StringReader" /> 类派生的读取器，如 <see cref="T:System.IO.TextReader" />。</param>
        <summary>将已序列化的数据从派生自 <see cref="T:System.IO.TextReader" /> 类的读取器对象加载到控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法以序列化的数据加载到<xref:System.Web.UI.DataVisualization.Charting.Chart>控件。  
  
 加载操作时，默认情况下可序列化的属性是第一次重置为其默认值之前它们设置为保留值，如果保存。 若要更改此行为，请使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>属性。  
  
 默认情况下，将加载所有序列化的图表属性。 通过设置<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>或<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>可以加载属性，一组特定的属性。  
  
 如果使用此定义，请注意，通过设置的格式<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>属性，必须为 XML。  
  
 如果<xref:System.Web.UI.DataVisualization.Charting.Chart.ViewStateData%2A>的属性<xref:System.Web.UI.DataVisualization.Charting.Chart>控制用于持久保存状态，此方法可用于加载序列化客户端发布的数据返回到<xref:System.Web.UI.DataVisualization.Charting.Chart>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="chartSerializer.Load fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">用于存储序列化数据的文件的相对路径或绝对路径。 如果指定了相对路径，则该路径将是相对于当前目录的路径。</param>
        <summary>将已保存到磁盘的序列化数据加载到 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法以序列化的数据加载到<xref:System.Web.UI.DataVisualization.Charting.Chart>控件。  
  
 当加载操作发生时，可序列化属性，默认情况下，首次重置为其默认值之前它们设置为保留值，如果保存。 若要更改此行为，请使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>属性。  
  
 默认情况下，将加载所有序列化的图表属性。 若要加载特定序列化的属性，设置<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>或<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性，然后才能将数据加载。  
  
 请注意，使用保存数据时`Save`方法，只显示那些属性具有非默认值的实际序列化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="chartSerializer.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">要从中读取所保留的数据的对象。 该对象派生自 <see cref="T:System.Xml.XmlReader" /> 类，可以是 .NET Framework 对象或用户定义的对象。</param>
        <summary>将已序列化的数据从派生自 <see cref="T:System.Xml.XmlReader" /> 类的对象加载到控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法以序列化的数据加载到<xref:System.Web.UI.DataVisualization.Charting.Chart>控件。  
  
 当加载操作发生时，默认情况下可序列化属性是第一次重置为其默认值之前它们设置为保留值，如果保存。 若要更改此行为，请使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>属性。  
  
 默认情况下，将加载所有序列化的图表属性。 如果您设置<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>或<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>可以加载属性，一组特定的属性。  
  
 当您使用此定义时，格式必须为 XML;可以使用更改<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>属性。  
  
 当您处理 XML 格式文本文件，为简单起见使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load%2A>方法相反。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonSerializableContent">
      <MemberSignature Language="C#" Value="public string NonSerializableContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NonSerializableContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent" />
      <MemberSignature Language="VB.NET" Value="Public Property NonSerializableContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NonSerializableContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NonSerializableContent : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置不进行序列化的图表属性。</summary>
        <value>一个用逗号分隔的 <see langword="string" /> 表达式，表示不进行序列化的图表属性。 语法为“Class.Property[,Class.Property]”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下所有图表属性将都被序列化时`Save`和`Load`调用方法。 可以使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性可限制进行序列化，以及使用的图表特征<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性。  
  
 此属性确定不序列化的图表特征。 可以在与相同的方式在字符串表达式中，使用通配符<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性。 例如，若要排除所有图表`BackColor`属性从序列化，将此属性设置为"*。背景色"。  
  
 有时，一个属性可以设置同时序列化和不序列化，这在使用了通配符时很常见。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>表达式具有较低优先级相比<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>表达式。 但请注意，使用通配符的字符串表达式对给定权重较低。 例如，如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性设置为"*。背景色"和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性设置为<xref:System.Web.UI.DataVisualization.Charting.ChartArea.BackColor%2A>，所有 B`ackColor`除属性<xref:System.Web.UI.DataVisualization.Charting.ChartArea>将序列化对象。  
  
 如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>已设置属性，优先级取决于在中使用多少通配符<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>表达式。 例如，设置<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性设置为<xref:System.Web.UI.DataVisualization.Charting.SerializationContents.Appearance>将导致<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性包含"\*。返回\*"表达式。 如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性设置为"\*。回到\*"，则所有`Back*`如图表属性`BackColor`， `BackGradient`，依此类推，仍会进行序列化。 这是因为<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性值具有更高的优先级相比<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性。  
  
 此属性将影响所有保存、 加载和重置操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="chartSerializer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重置所有标记为要进行序列化的图表属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此方法将所有图表属性重都置为其默认值。  
  
 若要限制重置为其默认值的图表属性，请使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性。  
  
 请注意，此方法也称为自动何时`Load`使用方法和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>属性设置为`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>保存具有非默认值的图表属性。 可以对所有图表属性进行序列化，其中包括数据。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream -&gt; unit" Usage="chartSerializer.Save stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">从 <see cref="T:System.IO.Stream" /> 类派生的用于保存图表属性的对象，如 <see cref="T:System.IO.MemoryStream" />。</param>
        <summary>将具有非默认值的图表数据和属性保存到派生自 <see cref="T:System.IO.Stream" /> 类的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，所有图表属性的非默认值，其中包括数据点，将进行序列都化，调用此方法。 若要控制要序列化的图表特征，使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性。  
  
 如果使用此方法来保存为模板的外观属性，请确保<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode%2A>的属性<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer>首先将对象设置为`true`之前调用此方法。  
  
 从序列化非模板; 将以不同的方式进行序列化的图表作为模板模板的序列化重点介绍外观属性。  
  
 当序列化模板时，<xref:System.Web.UI.DataVisualization.Charting.Chart.LoadTemplate%2A>方法可用于加载模板，以提供有关图表的外观属性。  
  
 模板可以用于模拟自定义调色板。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter -&gt; unit" Usage="chartSerializer.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">从 <see cref="T:System.IO.TextWriter" /> 类派生的用于保存图表属性的对象，如 <see cref="T:System.IO.StringWriter" />。</param>
        <summary>将具有非默认值的图表数据和属性保存到派生自 <see cref="T:System.IO.TextWriter" /> 类的给定对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，所有图表属性的非默认值，其中包括数据点，将进行序列都化，调用此方法。 控制序列化的图表特征，使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性。  
  
 当您使用此定义时，格式必须为 XML;可以使用设置的格式<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>属性。  
  
 如果<xref:System.Web.UI.DataVisualization.Charting.Chart.ViewStateData%2A>的属性<xref:System.Web.UI.DataVisualization.Charting.Chart>控件用于持久保存状态，可以使用此方法将序列化的数据保存到派生的对象<xref:System.IO.TextWriter>，然后用于将数据写入到<xref:System.Web.UI.DataVisualization.Charting.Chart.ViewStateData%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="chartSerializer.Save fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">用于存储序列化数据的文件的相对路径或绝对路径。 请注意，如果指定了相对路径，则该路径将是相对于当前目录的路径。</param>
        <summary>将具有非默认值的图表数据和属性保存到给定文件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下调用此方法时，将序列的非默认值，其中包括数据点，所有图表属性。 若要控制图表特征是序列化使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性。  
  
 默认情况下采用 XML 格式保存数据。 若要以二进制格式保存数据，请使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>属性。  
  
 请注意，必须在其中存储文件的目录启用写入权限。 默认情况下，这是应用程序的 Bin 文件夹。  
  
 如果此方法用于保存为模板的外观属性，请确保<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode%2A>首先将属性设置为`true`之前调用此方法。  
  
 图表的作为模板将进行序列化以不同的方式从非模板序列化，主要是因为模板序列化重点介绍外观属性。  
  
 当序列化模板时，<xref:System.Web.UI.DataVisualization.Charting.Chart.LoadTemplate%2A>方法可用于加载模板，以提供有关图表的外观属性。  
  
 模板可以用于模拟自定义调色板。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.Xml.XmlWriter -&gt; unit" Usage="chartSerializer.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">一个从 <see cref="T:System.Xml.XmlWriter" /> 派生的用于保存 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 属性的对象。</param>
        <summary>将具有非默认值的图表数据和属性保存到派生自 <see cref="T:System.Xml.XmlWriter" /> 类的给定对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，所有图表属性的非默认值，其中包括数据点，将进行序列都化，调用此方法。 控制序列化的图表特征，使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性。  
  
 当您使用此定义时，格式必须为 XML;格式可以更改与<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>属性。  
  
 当您处理 XML 格式文本文件，为简单起见使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save%2A>方法相反。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializableContent">
      <MemberSignature Language="C#" Value="public string SerializableContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SerializableContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SerializableContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SerializableContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SerializableContent : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可以序列化的图表属性。</summary>
        <value>一个用逗号分隔的 <see langword="string" /> 表达式，表示要序列化的图表属性。 语法为“Class.Property[,Class.Property]”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下所有图表属性将都被序列化时`Save`和`Load`调用方法。 可以使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性可限制进行序列化，以及使用的图表特征<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性。  
  
 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性确定将序列化的图表特征。 可以在与相同的方式在字符串表达式中，使用通配符<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性。 例如，若要序列化所有图表`BackColor`属性，将此属性设置为"*。背景色"。  
  
 如果<xref:System.Web.UI.DataVisualization.Charting.ChartArea>和/或<xref:System.Web.UI.DataVisualization.Charting.Series>子属性指定，则所有的名称<xref:System.Web.UI.DataVisualization.Charting.ChartArea>并<xref:System.Web.UI.DataVisualization.Charting.Series>必须还指定对象以启用要应用于现有的持久化的数据<xref:System.Web.UI.DataVisualization.Charting.ChartArea>和<xref:System.Web.UI.DataVisualization.Charting.Series>对象;也就是说，必须指定"Series.Name"和"ChartArea.Name"表达式。 请参阅下面的示例代码将此过程的示例。 同样，如果要使用多个图表区，<xref:System.Web.UI.DataVisualization.Charting.Series.ChartArea%2A>属性的所有绘制<xref:System.Web.UI.DataVisualization.Charting.Series>也必须保存。  
  
 有时，一个属性可以设置同时序列化和不序列化，这在使用了通配符时很常见。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>表达式具有较低优先级相比<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>表达式。 但请注意，使用通配符的字符串表达式对给定权重较低。 例如，如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性设置为"*。背景色"和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>属性设置为<xref:System.Web.UI.DataVisualization.Charting.ChartArea.BackColor%2A>，所有 B`ackColor`除属性<xref:System.Web.UI.DataVisualization.Charting.ChartArea>将序列化对象。  
  
 如果您设置<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性将在内部设置。 如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>属性已设置，但另一个属性应序列化，请确保要串联<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>属性时指定该额外属性。 请参阅下面的示例代码将此过程的示例。  
  
 此属性将影响所有保存、 加载和重置操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>