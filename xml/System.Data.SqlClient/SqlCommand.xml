<Type Name="SqlCommand" FullName="System.Data.SqlClient.SqlCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9e8891757412c05298143442978e938ba77595ec" />
    <Meta Name="ms.sourcegitcommit" Value="686b5d3c1059c1af941ad0121b297270715175ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/20/2018" />
    <Meta Name="ms.locfileid" Value="36270708" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlCommand : System.Data.Common.DbCommand, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommand extends System.Data.Common.DbCommand implements class System.Data.IDbCommand, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommand" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlCommand&#xA;Inherits DbCommand&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlCommand sealed : System::Data::Common::DbCommand, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommand</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RecordsAffected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("System.Drawing.Design.ToolboxItem, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示要对 SQL Server 数据库执行的一个 Transact-SQL 语句或存储过程。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实例时<xref:System.Data.SqlClient.SqlCommand>创建读/写属性设置为其初始值。 有关这些值的列表，请参阅<xref:System.Data.SqlClient.SqlCommand>构造函数。  
  
 <xref:System.Data.SqlClient.SqlCommand> 功能用于执行命令在 SQL Server 数据库的以下方法：  
  
|项|描述|  
|----------|-----------------|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>|启动的 TRANSACT-SQL 语句或由此所述的存储的过程的异步执行<xref:System.Data.SqlClient.SqlCommand>，通常执行命令，例如插入、 删除、 更新，并设置语句。 每次调用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>必须成对使用，通过调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>完成操作，通常在单独线程上的。|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>|启动的 TRANSACT-SQL 语句或由此所述的存储的过程的异步执行<xref:System.Data.SqlClient.SqlCommand>和一个或多个结果设置从服务器检索。 每次调用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>必须成对使用，通过调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>完成操作，通常在单独线程上的。|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>|启动此 <xref:System.Data.SqlClient.SqlCommand> 描述的 Transact-SQL 语句或存储过程的异步执行。 每次调用`BeginExecuteXmlReader`必须成对使用，通过调用`EndExecuteXmlReader`，其完成此操作，通常出现在单独的线程，并返回<xref:System.Xml.XmlReader>对象。|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>|执行返回行的命令。 为了提高性能，<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>调用命令使用 Transact SQL`sp_executesql`系统存储过程。 因此，<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>可能没有所需如果使用效果执行如 TRANSACT-SQL SET 语句的命令。|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>|执行命令，例如 Transact SQL INSERT、 DELETE、 更新和一组语句。|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>|从数据库中检索单个值 （例如，一个聚合值）。|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>|将 <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> 发送到 <xref:System.Data.SqlClient.SqlCommand.Connection%2A>，并生成一个 <xref:System.Xml.XmlReader> 对象。|  
  
 你可以重置<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>属性和重复使用<xref:System.Data.SqlClient.SqlCommand>对象。 但是，你必须关闭<xref:System.Data.SqlClient.SqlDataReader>便可以执行新的或以前的命令之前。  
  
 如果<xref:System.Data.SqlClient.SqlException>生成的方法执行<xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlConnection>保持打开状态时的严重性级别为 19 或以下。 等于或大于 20 的严重性级别时，服务器通常会关闭<xref:System.Data.SqlClient.SqlConnection>。 但是，用户可以重新打开连接并继续操作。  
  
> [!NOTE]
>  无名称，也称为序号，参数不支持.NET Framework 数据提供程序为 SQL Server。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlConnection>、 <xref:System.Data.SqlClient.SqlCommand>，和一个<xref:System.Data.SqlClient.SqlDataReader>。 该示例读取到的数据，并写入控制台。 最后，该示例关闭<xref:System.Data.SqlClient.SqlDataReader>然后<xref:System.Data.SqlClient.SqlConnection>如退出`Using`代码块。  
  
 [!code-csharp[Classic WebData SqlCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/VB/source.vb#1)]  
  
 下面的示例演示如何创建和执行不同类型的 SqlCommand 对象。  
  
 首先必须通过执行以下脚本创建示例数据库：  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE procedure [dbo].[CourseExtInfo] @CourseId int  
as  
select c.CourseID,c.Title,c.Credits,d.Name as DepartmentName  
from Course as c left outer join Department as d on c.DepartmentID=d.DepartmentID  
where c.CourseID=@CourseId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create procedure [dbo].[DepartmentInfo] @DepartmentId int,@CourseCount int output  
as  
select @CourseCount=Count(c.CourseID)  
from course as c  
where c.DepartmentID=@DepartmentId  
  
select d.DepartmentID,d.Name,d.Budget,d.StartDate,d.Administrator  
from Department as d  
where d.DepartmentID=@DepartmentId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
Create PROCEDURE [dbo].[GetDepartmentsOfSpecifiedYear]   
@Year int,@BudgetSum money output  
AS  
BEGIN  
        SELECT @BudgetSum=SUM([Budget])  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year   
  
SELECT [DepartmentID]  
      ,[Name]  
      ,[Budget]  
      ,[StartDate]  
      ,[Administrator]  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year  
  
END  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Person]([PersonID] [int] IDENTITY(1,1) NOT NULL,  
[LastName] [nvarchar](50) NOT NULL,  
[FirstName] [nvarchar](50) NOT NULL,  
[HireDate] [datetime] NULL,  
[EnrollmentDate] [datetime] NULL,  
 CONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED   
(  
[PersonID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[StudentGrade]([EnrollmentID] [int] IDENTITY(1,1) NOT NULL,  
[CourseID] [nvarchar](10) NOT NULL,  
[StudentID] [int] NOT NULL,  
[Grade] [decimal](3, 2) NOT NULL,  
 CONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED   
(  
[EnrollmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create view [dbo].[EnglishCourse]  
as  
select c.CourseID,c.Title,c.Credits,c.DepartmentID  
from Course as c join Department as d on c.DepartmentID=d.DepartmentID  
where d.Name=N'English'  
  
GO  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
SET IDENTITY_INSERT [dbo].[Person] ON   
  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (1, N'Hu', N'Nan', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (2, N'Norman', N'Laura', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (3, N'Olivotto', N'Nino', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (4, N'Anand', N'Arturo', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (5, N'Jai', N'Damien', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (6, N'Holt', N'Roger', CAST(0x000097F100000000 AS DateTime), NULL)  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (7, N'Martin', N'Randall', CAST(0x00008B1A00000000 AS DateTime), NULL)  
SET IDENTITY_INSERT [dbo].[Person] OFF  
SET IDENTITY_INSERT [dbo].[StudentGrade] ON   
  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (1, N'C1045', 1, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (2, N'C1045', 2, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (3, N'C1045', 3, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (4, N'C1045', 4, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (5, N'C1045', 5, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (6, N'C1061', 1, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (7, N'C1061', 3, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (8, N'C1061', 4, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (9, N'C1061', 5, CAST(1.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (10, N'C2021', 1, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (11, N'C2021', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (12, N'C2021', 4, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (13, N'C2021', 5, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (14, N'C2042', 1, CAST(2.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (15, N'C2042', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (16, N'C2042', 3, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (17, N'C2042', 5, CAST(3.00 AS Decimal(3, 2)))  
SET IDENTITY_INSERT [dbo].[StudentGrade] OFF  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
ALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])  
REFERENCES [dbo].[Person] ([PersonID])  
GO  
ALTER TABLE [dbo].[StudentGrade] CHECK CONSTRAINT [FK_StudentGrade_Student]  
GO  
```  
  
 接下来，编译并执行以下：  
  
```  
using System;  
using System.Data;  
using System.Data.SqlClient;  
using System.Threading.Tasks;  
  
class Program {  
  
   static class SqlHelper {  
      // Set the connection, command, and then execute the command with non query.  
      public static Int32 ExecuteNonQuery(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               // There're three command types: StoredProcedure, Text, TableDirect. The TableDirect   
               // type is only for OLE DB.    
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteNonQuery();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command and only return one value.  
      public static Object ExecuteScalar(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteScalar();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command with query and return the reader.  
      public static SqlDataReader ExecuteReader(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         SqlConnection conn = new SqlConnection(connectionString);  
  
         using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
            cmd.CommandType = commandType;  
            cmd.Parameters.AddRange(parameters);  
  
            conn.Open();  
            // When using CommandBehavior.CloseConnection, the connection will be closed when the   
            // IDataReader is closed.  
            SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);  
  
            return reader;  
         }  
      }  
   }  
  
   static void Main(string[] args) {  
      String connectionString = "Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;";  
  
      CountCourses(connectionString, 2012);  
      Console.WriteLine();  
  
      Console.WriteLine("Following result is the departments that started from 2007:");  
      GetDepartments(connectionString, 2007);  
      Console.WriteLine();  
  
      Console.WriteLine("Add the credits when the credits of course is lower than 4.");  
      AddCredits(connectionString, 4);  
      Console.WriteLine();  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   static void CountCourses(String connectionString, Int32 year) {  
      String commandText = "Select Count([CourseID]) FROM [MySchool].[dbo].[Course] Where Year=@Year";  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      Object oValue = SqlHelper.ExecuteScalar(connectionString, commandText, CommandType.Text, parameterYear);  
      Int32 count;  
      if (Int32.TryParse(oValue.ToString(), out count))  
         Console.WriteLine("There {0} {1} course{2} in {3}.", count > 1 ? "are" : "is", count, count > 1 ? "s" : null, year);  
   }  
  
   // Display the Departments that start from the specified year.  
   static void GetDepartments(String connectionString, Int32 year) {  
      String commandText = "dbo.GetDepartmentsOfSpecifiedYear";  
  
      // Specify the year of StartDate  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      // When the direction of parameter is set as Output, you can get the value after   
      // executing the command.  
      SqlParameter parameterBudget = new SqlParameter("@BudgetSum", SqlDbType.Money);  
      parameterBudget.Direction = ParameterDirection.Output;  
  
      using (SqlDataReader reader = SqlHelper.ExecuteReader(connectionString, commandText,  
          CommandType.StoredProcedure, parameterYear, parameterBudget)) {  
         Console.WriteLine("{0,-20}{1,-20}{2,-20}{3,-20}", "Name", "Budget", "StartDate",  
             "Administrator");  
         while (reader.Read()) {  
            Console.WriteLine("{0,-20}{1,-20:C}{2,-20:d}{3,-20}", reader["Name"],  
                reader["Budget"], reader["StartDate"], reader["Administrator"]);  
         }  
      }  
      Console.WriteLine("{0,-20}{1,-20:C}", "Sum:", parameterBudget.Value);  
   }  
  
   // If credits of course is lower than the certain value, the method will add the credits.  
   static void AddCredits(String connectionString, Int32 creditsLow) {  
      String commandText = "Update [MySchool].[dbo].[Course] Set Credits=Credits+1 Where Credits<@Credits";  
  
      SqlParameter parameterCredits = new SqlParameter("@Credits", creditsLow);  
  
      Int32 rows = SqlHelper.ExecuteNonQuery(connectionString, commandText, CommandType.Text, parameterCredits);  
  
      Console.WriteLine("{0} row{1} {2} updated.", rows, rows > 1 ? "s" : null, rows > 1 ? "are" : "is");  
   }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基构造函数初始化为其默认值的所有字段。 下表显示的实例的初始属性值<xref:System.Data.SqlClient.SqlCommand>。  
  
|属性|初始值|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|空字符串 ("")|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|null|  
  
 你可以更改任何通过单独属性调用这些属性的值。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>和设置`CommandTimeout`属性。  
  
 [!code-csharp[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cmdText">查询的文本。</param>
        <summary>使用查询的文本初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实例时<xref:System.Data.SqlClient.SqlCommand>创建以下读/写属性设置为初始值。  
  
|属性|初始值|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|null|  
  
 你可以更改任何通过单独属性调用这些属性的值。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>，并传入的连接字符串和命令文本。  
  
 [!code-csharp[Classic WebData SqlCommand.SqlCommand1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.SqlCommand1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String, connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText, System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="cmdText">查询的文本。</param>
        <param name="connection">表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
        <summary>使用查询的文本和 <see cref="T:System.Data.SqlClient.SqlConnection" /> 初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示的实例的初始属性值<xref:System.Data.SqlClient.SqlCommand>。  
  
|属性|初始值|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|一个新<xref:System.Data.SqlClient.SqlConnection>即的值`connection`参数。|  
  
 可以通过设置相关的属性来更改任何这些参数的值。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData SqlCommand.SqlCommand2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.SqlCommand2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String, connection As SqlConnection, transaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText, System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlTransaction ^ transaction);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="cmdText">查询的文本。</param>
        <param name="connection">表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
        <param name="transaction">其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的 <see cref="T:System.Data.SqlClient.SqlTransaction" />。</param>
        <summary>使用查询文本、<see cref="T:System.Data.SqlClient.SqlConnection" /> 以及 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示的实例的初始属性值<xref:System.Data.SqlClient.SqlCommand>。  
  
|属性|初始值|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|一个新<xref:System.Data.SqlClient.SqlConnection>即的值`connection`参数。|  
  
 可以通过设置相关的属性来更改任何这些参数的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction, System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction, valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String, connection As SqlConnection, transaction As SqlTransaction, columnEncryptionSetting As SqlCommandColumnEncryptionSetting)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText, System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlTransaction ^ transaction, System::Data::SqlClient::SqlCommandColumnEncryptionSetting columnEncryptionSetting);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
        <Parameter Name="columnEncryptionSetting" Type="System.Data.SqlClient.SqlCommandColumnEncryptionSetting" />
      </Parameters>
      <Docs>
        <param name="cmdText">查询的文本。</param>
        <param name="connection">表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
        <param name="transaction">其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的 <see cref="T:System.Data.SqlClient.SqlTransaction" />。</param>
        <param name="columnEncryptionSetting">加密设置。 有关详细信息，请参阅 [Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine)。</param>
        <summary>使用指定的命令文本、连接、事务和加密设置初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteNonQuery">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteNonQuery () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteNonQuery();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
        <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> 时，也需要该值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>方法开始以异步方式执行的过程[!INCLUDE[tsql](~/includes/tsql-md.md)]语句或存储的过程不会返回行，以便执行该语句的同时，可以运行其他任务。 完成该语句后，开发人员必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>方法以完成该操作。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>方法会立即返回 (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>不起任何作用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>)，但直到执行相应的代码<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>方法调用中，它不能执行开始同步或异步执行的任何其他调用针对相同<xref:System.Data.SqlClient.SqlCommand>对象。 调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>命令执行已完成的原因之前<xref:System.Data.SqlClient.SqlCommand>对象进行阻止，直到执行完毕。  
  
 请注意，将命令文本和参数发送到服务器以同步方式。 如果发送较大的命令或多个参数，此方法可能会阻止在写入期间。 发送命令，该方法将立即返回而不等待从服务器--答案之后，即读取是异步的。  
  
 由于此重载不支持回调过程，开发人员必须任一轮询，以确定是否已完成该命令，使用<xref:System.IAsyncResult.IsCompleted%2A>属性<xref:System.IAsyncResult>返回<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>方法; 或等待完成一个或多个命令使用<xref:System.IAsyncResult.AsyncWaitHandle%2A>属性返回的<xref:System.IAsyncResult>。  
  
   
  
## Examples  
 以下控制台应用程序创建中的更新数据**AdventureWorks**示例数据库，以异步方式执行其工作。 为了模拟长时间运行的进程，此示例在命令文本中插入一个 WAITFOR 语句。 通常情况下，您将不进行努力使命令运行速度变慢，但执行此操作在这种情况下更容易地演示异步行为。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQuery/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQuery/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteNonQuery (callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteNonQuery(AsyncCallback ^ callback, System::Object ^ stateObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 <see langword="null" />（在 Microsoft Visual Basic 中为 <see langword="Nothing" />）以指示不需要回调。</param>
        <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
        <summary>在给定回调过程和状态信息的情况下，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
        <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> 时，也需要该值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>方法开始以异步方式执行的 TRANSACT-SQL 语句或存储的过程不会返回行，以便执行该语句的同时，可以运行其他任务的过程。 完成该语句后，开发人员必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>方法以完成该操作。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>方法会立即返回 (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>不起任何作用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>)，但直到执行相应的代码<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>方法调用中，它不能执行开始同步或异步执行的任何其他调用针对相同<xref:System.Data.SqlClient.SqlCommand>对象。 调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>命令执行已完成的原因之前<xref:System.Data.SqlClient.SqlCommand>对象进行阻止，直到执行完毕。  
  
 `callback`参数允许你指定<xref:System.AsyncCallback>语句已完成时调用的委托。 你可以调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>方法从该委托过程内或从你的应用程序内的任何其他位置。 此外，你可以通过中的任何对象`asyncStateObject`参数，并且你回调过程可以检索此信息使用<xref:System.IAsyncResult.AsyncState%2A>属性。  
  
 请注意，将命令文本和参数发送到服务器以同步方式。 如果发送较大的命令或多个参数，此方法可能会阻止在写入期间。 发送命令，该方法将立即返回而不等待从服务器--答案之后，即读取是异步的。  
  
 由于回调过程从 Microsoft.NET 公共语言运行时提供的后台线程中执行，它是非常重要采用严格的措施来处理你的应用程序内的跨线程交互。 例如，你必须不与交互窗体的内容从回调过程; 内你必须将窗体更新，你必须切换回窗体的线程以完成工作。 本主题中的示例演示此行为。  
  
 在执行操作期间发生的所有错误在回调过程中作为异常都引发。 你必须处理的异常回调过程中，而不是在主应用程序。 在回调过程中处理异常，请参阅本主题的其他信息的示例。  
  
   
  
## Examples  
 下面的 Windows 应用程序演示如何使用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>方法，执行 TRANSACT-SQL 语句包含 （模拟长时间运行的命令） 的有几秒钟的延迟。  
  
 此示例演示了许多重要的技术。 这包括调用与从单独的线程窗体交互的方法。 此外，此示例演示如何必须阻止用户在执行命令多次并发，且你如何必须确保窗体不会关闭在回调过程之前调用。  
  
 要设置此示例，应新建一个 Windows 应用程序。 Put<xref:System.Windows.Forms.Button>控件和<xref:System.Windows.Forms.Label>窗体 （接受每个控件的默认名称） 上的控件。 将以下代码添加到窗体的类，根据需要为你的环境修改连接字符串。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQueryForm/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQueryForm/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。</summary>
        <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />（返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例）时，也需要该值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法开始以异步方式执行的 TRANSACT-SQL 语句或存储的过程返回行，以便执行该语句的同时，可以运行其他任务的过程。 完成该语句后，开发人员必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法以完成该操作并检索<xref:System.Data.SqlClient.SqlDataReader>命令返回。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法立即返回，但直到执行相应的代码<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法调用中，它不能执行开始针对相同同步或异步执行的任何其他调用<xref:System.Data.SqlClient.SqlCommand>对象。 调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>命令执行已完成的原因之前<xref:System.Data.SqlClient.SqlCommand>对象进行阻止，直到执行完毕。  
  
 请注意，将命令文本和参数发送到服务器以同步方式。 如果发送较大的命令或多个参数，此方法可能会阻止在写入期间。 发送命令，该方法将立即返回而不等待从服务器--答案之后，即读取是异步的。 尽管命令执行是异步的但获取值的操作仍然是同步的。 这意味着，在调用<xref:System.Data.SqlClient.SqlDataReader.Read%2A>五月阻止是否需要更多的数据和基础网络的读取操作块。  
  
 由于此重载不支持回调过程，开发人员必须任一轮询，以确定是否已完成该命令，使用<xref:System.IAsyncResult.IsCompleted%2A>属性<xref:System.IAsyncResult>返回<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法; 或等待完成一个或多个命令使用<xref:System.IAsyncResult.AsyncWaitHandle%2A>属性返回的<xref:System.IAsyncResult>。  
  
 如果你使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要访问 XML 数据，SQL Server 将返回的任何 XML 结果大于 2033 个字符中的每个 2033 个字符的多个行的长度。 若要避免此行为，使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>读取 FOR XML 查询。 有关详细信息，请参阅文章 Q310378，"PRB:: XML 数据是被截断时你使用 SqlDataReader，"Microsoft 知识库中在http://support.microsoft.com。  
  
   
  
## Examples  
 以下控制台应用程序开始以异步方式检索数据读取器的过程。 在等待结果，此简单的应用程序位于在循环中调查<xref:System.IAsyncResult.IsCompleted%2A>属性值。 一旦该进程完成后，此代码会检索<xref:System.Data.SqlClient.SqlDataReader>并显示其内容。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReader/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader (behavior As CommandBehavior) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 值之一，指示用于语句执行和数据检索的选项。</param>
        <summary>使用 <see cref="T:System.Data.SqlClient.SqlCommand" /> 值之一，启动此 <see cref="T:System.Data.CommandBehavior" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
        <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />（返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例）时，也需要该值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法开始以异步方式执行的 TRANSACT-SQL 语句或存储的过程返回行，以便执行该语句的同时，可以运行其他任务的过程。 完成该语句后，开发人员必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法以完成该操作并检索<xref:System.Data.SqlClient.SqlDataReader>命令返回。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法立即返回，但直到执行相应的代码<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法调用中，它不能执行开始针对相同同步或异步执行的任何其他调用<xref:System.Data.SqlClient.SqlCommand>对象。 调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>命令执行已完成的原因之前<xref:System.Data.SqlClient.SqlCommand>对象进行阻止，直到执行完毕。  
  
 `behavior`参数允许你指定用于控制命令和其连接的行为的选项。 这些值可以组合在一起 (使用的编程语言`OR`运算符); 通常情况下，开发人员使用`CommandBehavior.CloseConnection`值以确认连接已由运行时关闭时<xref:System.Data.SqlClient.SqlDataReader>已关闭。  
  
 请注意，将命令文本和参数发送到服务器以同步方式。 如果发送较大的命令或多个参数，此方法可能会阻止在写入期间。 发送命令，该方法将立即返回而不等待从服务器--答案之后，即读取是异步的。 尽管命令执行是异步的但获取值的操作仍然是同步的。 这意味着，在调用<xref:System.Data.SqlClient.SqlDataReader.Read%2A>五月阻止是否需要更多的数据和基础网络的读取操作块。  
  
 由于此重载不支持回调过程，开发人员必须任一轮询，以确定是否已完成该命令，使用<xref:System.IAsyncResult.IsCompleted%2A>属性<xref:System.IAsyncResult>返回<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>方法; 或等待完成一个或多个命令使用<xref:System.IAsyncResult.AsyncWaitHandle%2A>属性返回的<xref:System.IAsyncResult>。  
  
 如果你使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要访问 XML 数据，SQL Server 返回的任何 XML 结果大于 2033 个字符中的每个 2033 个字符的多个行的长度。 若要避免此行为，使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>读取 FOR XML 查询。 有关详细信息，请参阅文章 Q310378，"PRB:: XML 数据是被截断时你使用 SqlDataReader，"Microsoft 知识库中在http://support.microsoft.com。  
  
   
  
## Examples  
 以下控制台应用程序开始以异步方式检索数据读取器的过程。 在等待结果，此简单的应用程序位于在循环中调查<xref:System.IAsyncResult.IsCompleted%2A>属性值。 过程完成后，此代码会检索<xref:System.Data.SqlClient.SqlDataReader>并显示其内容。  
  
 此示例还将传递`CommandBehavior.CloseConnection`和`CommandBehavior.SingleRow`行为参数，从而导致要关闭连接中的值与返回<xref:System.Data.SqlClient.SqlDataReader>已关闭，并优化为单行结果。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncSimple/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncSimple/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader (callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader(AsyncCallback ^ callback, System::Object ^ stateObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 <see langword="null" />（在 Microsoft Visual Basic 中为 <see langword="Nothing" />）以指示不需要回调。</param>
        <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
        <summary>如果提供回调过程和状态信息，则启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。</summary>
        <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />（返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例）时，也需要该值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法开始以异步方式执行的 TRANSACT-SQL 语句或存储的过程返回行，以便执行该语句的同时，可以运行其他任务的过程。 完成该语句后，开发人员必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法以完成该操作并检索<xref:System.Data.SqlClient.SqlDataReader>命令返回。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法立即返回，但直到执行相应的代码<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法调用中，它不能执行开始针对相同同步或异步执行的任何其他调用<xref:System.Data.SqlClient.SqlCommand>对象。 调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>命令执行完毕之前原因<xref:System.Data.SqlClient.SqlCommand>对象进行阻止，直到执行完毕。  
  
 `callback`参数允许你指定<xref:System.AsyncCallback>语句已完成时调用的委托。 你可以调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法从该委托过程内或从你的应用程序内的任何其他位置。 此外，你可以通过中的任何对象`stateObject`参数，并且你回调过程可以检索此信息使用<xref:System.IAsyncResult.AsyncState%2A>属性。  
  
 请注意，将命令文本和参数发送到服务器以同步方式。 如果发送较大的命令或多个参数，此方法可能会阻止在写入期间。 发送命令，该方法将立即返回而不等待从服务器--答案之后，即读取是异步的。 尽管命令执行是异步的但获取值的操作仍然是同步的。 这意味着，在调用<xref:System.Data.SqlClient.SqlDataReader.Read%2A>五月阻止是否需要更多的数据和基础网络的读取操作块。  
  
 由于回调过程从 Microsoft.NET 运行时提供的后台线程中执行，它是非常重要采用严格的措施来处理你的应用程序内的跨线程交互。 例如，你必须不与交互窗体的内容从回调过程; 内你必须将窗体更新，你必须切换回窗体的线程以完成工作。 本主题中的示例演示此行为。  
  
 在执行操作期间发生的所有错误在回调过程中作为异常都引发。 你必须处理的异常回调过程中，而不是在主应用程序。 在回调过程中处理异常，请参阅本主题的其他信息的示例。  
  
 如果你使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要访问 XML 数据，SQL Server 返回的任何 XML 结果大于 2033 个字符中的每个 2033 个字符的多个行的长度。 若要避免此行为，使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>读取 FOR XML 查询。 有关详细信息，请参阅文章 Q310378，"PRB:: XML 数据是被截断时你使用 SqlDataReader，"Microsoft 知识库中在http://support.microsoft.com。  
  
   
  
## Examples  
 以下 Windows 应用程序演示如何使用 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> 方法，执行包含几秒钟延迟的 Transact-SQL 语句（模拟长时间运行的命令）。 由于此示例以异步方式执行该命令，在等待结果时保持响应性窗体。 此示例传递执行<xref:System.Data.SqlClient.SqlCommand>对象作为`stateObject`参数，则这样做可轻松检索<xref:System.Data.SqlClient.SqlCommand>对象，从在回调过程中，使代码可以调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法对应于初始调用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。  
  
 此示例演示了许多重要的技术。 这包括调用与从单独的线程窗体交互的方法。 此外，此示例演示如何必须阻止用户在执行命令多次并发，且你如何必须确保窗体不会关闭在回调过程之前调用。  
  
 要设置此示例，应新建一个 Windows 应用程序。 Put<xref:System.Windows.Forms.Button>控件，<xref:System.Windows.Forms.DataGridView>控件，和一个<xref:System.Windows.Forms.Label>窗体 （接受每个控件的默认名称） 上的控件。 将以下代码添加到窗体的类，根据需要为你的环境修改连接字符串。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsync/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsync/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader (callback As AsyncCallback, stateObject As Object, behavior As CommandBehavior) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader(AsyncCallback ^ callback, System::Object ^ stateObject, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 <see langword="null" />（在 Microsoft Visual Basic 中为 <see langword="Nothing" />）以指示不需要回调。</param>
        <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 值之一，指示用于语句执行和数据检索的选项。</param>
        <summary>在给定回调过程和状态信息的情况下，通过使用 <see langword="CommandBehavior" /> 值之一并从服务器中检索一个或多个结果集，启动由此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
        <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；在调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> 时，也需要该值。该调用会返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法开始以异步方式执行的 TRANSACT-SQL 语句或存储的过程返回行，以便执行该语句的同时，可以运行其他任务的过程。 完成该语句后，开发人员必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法以完成该操作并检索<xref:System.Data.SqlClient.SqlDataReader>命令返回。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法立即返回，但直到执行相应的代码<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法调用中，它不能执行开始针对相同同步或异步执行的任何其他调用<xref:System.Data.SqlClient.SqlCommand>对象。 调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>命令执行已完成的原因之前<xref:System.Data.SqlClient.SqlCommand>对象进行阻止，直到执行完毕。  
  
 `callback`参数允许你指定<xref:System.AsyncCallback>语句已完成时调用的委托。 你可以调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法从该委托过程内或从你的应用程序内的任何其他位置。 此外，你可以通过中的任何对象`stateObject`参数，并且你回调过程可以检索此信息使用<xref:System.IAsyncResult.AsyncState%2A>属性。  
  
 `behavior`参数允许你指定用于控制命令和其连接的行为的选项。 这些值可以组合在一起 (使用的编程语言`Or`运算符); 通常情况下，开发人员使用`CloseConnection`值以确认连接已由运行时关闭时<xref:System.Data.SqlClient.SqlDataReader>已关闭。 开发人员还可以优化的行为<xref:System.Data.SqlClient.SqlDataReader>通过指定`SingleRow`时它在提前知道的 TRANSACT-SQL 语句或存储的过程仅返回单个行的值。  
  
 请注意，将命令文本和参数发送到服务器以同步方式。 如果发送较大的命令或多个参数，此方法可能会阻止在写入期间。 发送命令，该方法将立即返回而不等待从服务器--答案之后，即读取是异步的。 尽管命令执行是异步的但获取值的操作仍然是同步的。 这意味着，在调用<xref:System.Data.SqlClient.SqlDataReader.Read%2A>五月阻止是否需要更多的数据和基础网络的读取操作块。  
  
 由于回调过程从 Microsoft.NET 公共语言运行时提供的后台线程中执行，它是非常重要采用严格的措施来处理你的应用程序内的跨线程交互。 例如，你必须不进行交互从回调过程内的窗体的内容你需要更新该表单，您必须切换回窗体的线程以完成工作。 本主题中的示例演示此行为。  
  
 在执行操作期间发生的所有错误在回调过程中作为异常都引发。 你必须处理的异常回调过程中，而不是在主应用程序。 在回调过程中处理异常，请参阅本主题的其他信息的示例。  
  
 如果你使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要访问 XML 数据，SQL Server 将返回的任何 XML 结果大于 2033 个字符中的每个 2033 个字符的多个行的长度。 若要避免此行为，使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>读取 FOR XML 查询。 有关详细信息，请参阅文章 Q310378，"PRB:: XML 数据是被截断时你使用 SqlDataReader，"Microsoft 知识库中在http://support.microsoft.com。  
  
   
  
## Examples  
 以下 Windows 应用程序演示如何使用 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> 方法，执行包含几秒钟延迟的 Transact-SQL 语句（模拟长时间运行的命令）。 由于此示例以异步方式执行该命令，在等待结果时保持响应性窗体。 此示例传递执行<xref:System.Data.SqlClient.SqlCommand>对象作为`stateObject`参数，则这样做可轻松检索<xref:System.Data.SqlClient.SqlCommand>对象，从在回调过程中，使代码可以调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法对应于初始调用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。  
  
 此示例演示了许多重要的技术。 这包括调用与从单独的线程窗体交互的方法。 此外，此示例演示如何必须阻止用户在执行命令多次并发，且你如何必须确保窗体不会关闭在回调过程之前调用。  
  
 要设置此示例，应新建一个 Windows 应用程序。 Put<xref:System.Windows.Forms.Button>控件，<xref:System.Windows.Forms.DataGridView>控件，和一个<xref:System.Windows.Forms.Label>窗体 （接受每个控件的默认名称） 上的控件。 将以下代码添加到窗体的类，根据需要为你的环境修改连接字符串。  
  
 此示例传递`CommandBehavior.CloseConnection`中的值`behavior`参数，从而导致返回<xref:System.Data.SqlClient.SqlDataReader>以它关闭时自动关闭其连接。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteXmlReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" /> 对象返回。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteXmlReader () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteXmlReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" /> 对象返回。</summary>
        <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用会返回单个 XML 值的 <see langword="EndExecuteXmlReader" /> 时，也需要该值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>方法会启动，以便执行该语句的同时，可以运行其他任务以异步方式执行作为 XML 使用，返回行的 TRANSACT-SQL 语句的过程。 完成该语句后，开发人员必须调用`EndExecuteXmlReader`命令方法以完成该操作并检索 XML 返回。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>方法立即返回，但直到执行相应的代码`EndExecuteXmlReader`方法调用中，它不能执行开始针对相同同步或异步执行的任何其他调用<xref:System.Data.SqlClient.SqlCommand>对象。 调用`EndExecuteXmlReader`命令执行已完成的原因之前<xref:System.Data.SqlClient.SqlCommand>对象进行阻止，直到执行完毕。  
  
 <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>属性通常具有有效的 FOR XML 子句指定 TRANSACT-SQL 语句。 但是，`CommandText`还可以指定返回的语句`ntext`包含有效的 XML 的数据。  
  
 典型<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>查询可进行格式设置如下面的 C# 示例所示：  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM dbo.Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 此方法还可以用于检索的单行、 单列的结果集。 在这种情况下，如果多个返回一行，`EndExecuteXmlReader`方法附加<xref:System.Xml.XmlReader>结果的其余部分设置为上的第一行中和丢弃的值。  
  
 使用多个活动结果集 (MARS) 功能，使用相同的连接的多个操作。  
  
 请注意，将命令文本和参数发送到服务器以同步方式。 如果发送较大的命令或多个参数，此方法可能会阻止在写入期间。 发送命令，该方法将立即返回而不等待从服务器--答案之后，即读取是异步的。 尽管命令执行是异步的但获取值的操作仍然是同步的。  
  
 由于此重载不支持回调过程，开发人员需要任一轮询以确定是否已完成该命令，使用<xref:System.IAsyncResult.IsCompleted%2A>属性<xref:System.IAsyncResult>返回<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>方法; 或等待完成一个或多个命令使用<xref:System.IAsyncResult.AsyncWaitHandle%2A>属性返回的<xref:System.IAsyncResult>。  
  
 如果你使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要访问 XML 数据，SQL Server 返回的任何 XML 结果大于 2033 个字符中的每个 2033 个字符的多个行的长度。 若要避免此行为，使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>读取 FOR XML 查询。 有关详细信息，请参阅文章 Q310378，"PRB:: XML 数据是被截断时你使用 SqlDataReader，"Microsoft 知识库中在http://support.microsoft.com。  
  
   
  
## Examples  
 以下控制台应用程序开始以异步方式检索 XML 数据的过程。 在等待结果，此简单的应用程序位于在循环中调查<xref:System.IAsyncResult.IsCompleted%2A>属性值。 过程完成后，代码将检索 XML，并显示其内容。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReader/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteXmlReader (callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteXmlReader(AsyncCallback ^ callback, System::Object ^ stateObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 <see langword="null" />（在 Microsoft Visual Basic 中为 <see langword="Nothing" />）以指示不需要回调。</param>
        <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
        <summary>使用回调过程启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" /> 对象返回。</summary>
        <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用将命令结果以 XML 格式返回的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> 时，也需要此值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>方法会启动，以便执行该语句的同时，可以运行其他任务以异步方式执行的 TRANSACT-SQL 语句或作为 XML 使用，返回行的存储的过程的过程。 完成该语句后，开发人员必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>方法以完成该操作并检索请求的 XML 数据。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>方法立即返回，但直到执行相应的代码<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>方法调用中，它不能执行开始针对相同同步或异步执行的任何其他调用<xref:System.Data.SqlClient.SqlCommand>对象。 调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>命令执行已完成的原因之前<xref:System.Data.SqlClient.SqlCommand>对象进行阻止，直到执行完毕。  
  
 <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>属性通常具有有效的 FOR XML 子句指定 TRANSACT-SQL 语句。 但是，`CommandText`还可以指定返回包含有效的 XML 的数据的语句。 此方法还可以用于检索的单行、 单列的结果集。 在这种情况下，如果多个返回一行，<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>方法附加<xref:System.Xml.XmlReader>结果的其余部分设置为上的第一行中和丢弃的值。  
  
 典型<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>查询可进行格式设置如下面的 C# 示例所示：  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 此方法还可以用于检索的单行、 单列的结果集。 在这种情况下，如果多个返回一行，<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>方法附加<xref:System.Xml.XmlReader>结果的其余部分设置为上的第一行中和丢弃的值。  
  
 使用多个活动结果集 (MARS) 功能，使用相同的连接的多个操作。  
  
 `callback`参数允许你指定<xref:System.AsyncCallback>语句已完成时调用的委托。 你可以调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>方法从该委托过程内或从你的应用程序内的任何其他位置。 此外，你可以通过中的任何对象`stateObject`参数，并且你回调过程可以检索此信息使用<xref:System.IAsyncResult.AsyncState%2A>属性。  
  
 请注意，将命令文本和参数发送到服务器以同步方式。 如果发送较大的命令或多个参数，此方法可能会阻止在写入期间。 发送命令，该方法将立即返回而不等待从服务器--答案之后，即读取是异步的。  
  
 在执行操作期间发生的所有错误在回调过程中作为异常都引发。 你必须处理的异常回调过程中，而不是在主应用程序。 在回调过程中处理异常，请参阅本主题的其他信息的示例。  
  
 如果你使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要访问 XML 数据，SQL Server 将返回的任何 XML 结果大于 2033 个字符中的每个 2033 个字符的多个行的长度。 若要避免此行为，使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>读取 FOR XML 查询。 有关详细信息，请参阅文章 Q310378，"PRB:: XML 数据是被截断时你使用 SqlDataReader，"Microsoft 知识库中在http://support.microsoft.com。  
  
   
  
## Examples  
 以下 Windows 应用程序演示如何使用 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> 方法，执行包含几秒钟延迟的 Transact-SQL 语句（模拟长时间运行的命令）。 此示例传递执行<xref:System.Data.SqlClient.SqlCommand>对象作为`stateObject`参数-执行此操作可以很容易地检索<xref:System.Data.SqlClient.SqlCommand>对象，从在回调过程中，使代码可以调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>方法对应于初始调用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>。  
  
 此示例演示了许多重要的技术。 这包括调用与从单独的线程窗体交互的方法。 此外，此示例演示如何必须阻止用户在执行命令多次并发，且你如何必须确保窗体不会关闭在回调过程之前调用。  
  
 要设置此示例，应新建一个 Windows 应用程序。 Put<xref:System.Windows.Forms.Button>控件，<xref:System.Windows.Forms.ListBox>控件，和一个<xref:System.Windows.Forms.Label>窗体 （接受每个控件的默认名称） 上的控件。 将以下代码添加到窗体的类，根据需要为你的环境修改连接字符串。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReaderAsync/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReaderAsync/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <altmember cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
        <altmember cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public override void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Cancel();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.Cancel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>尝试取消 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的执行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有要取消的命令，则不会有任何反应。 但是，如果有正在执行的命令，则即使取消尝试失败，也不会生成异常。  
  
 在某些少见的情况下，如果调用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>然后调用<xref:System.Data.SqlClient.SqlDataReader.Close%2A>(隐式或显式) 之前调用<xref:System.Data.SqlClient.SqlCommand.Cancel%2A>，然后调用<xref:System.Data.SqlClient.SqlCommand.Cancel%2A>、 取消命令将不发送到 SQL Server 和结果集可以继续进行流式处理后调用<xref:System.Data.SqlClient.SqlConnection.Close%2A>。 若要避免此问题，请确保你调用<xref:System.Data.SqlClient.SqlCommand.Cancel%2A>之前关闭读取器或连接。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Data.SqlClient.SqlCommand.Cancel%2A> 方法的用法。  
  
 [!code-csharp[Classic WebData SqlCommand.Cancel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Cancel/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Cancel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Cancel/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建属于当前实例的副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <returns>属于此实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionSetting">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnEncryptionSetting As SqlCommandColumnEncryptionSetting" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { System::Data::SqlClient::SqlCommandColumnEncryptionSetting get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommandColumnEncryptionSetting</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此命令的列加密设置。</summary>
        <value>此命令的列加密设置。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public override string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CommandText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.CommandText</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在数据源中执行的 Transact-SQL 语句、表名或存储过程。</summary>
        <value>要执行的 Transact-SQL 语句或存储过程。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>属性设置为`StoredProcedure`、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>属性应设置为存储过程的名称。 用户可能需要使用转义符语法，如果存储的过程名称包含任何特殊字符。 当你调用之一时，该命令将执行此存储的过程`Execute`方法。  
  
 Microsoft.NET Framework 数据提供程序 SQL Server 不支持用于将参数传递到 TRANSACT-SQL 语句或存储的过程调用的命令的问号 （？） 占位符`CommandType.Text`。 在这种情况下，必须使用命名的参数。 例如:  
  
```  
SELECT * FROM dbo.Customers WHERE CustomerID = @CustomerID  
```  
  
 有关详细信息，请参阅[配置参数和参数数据类型](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData SqlCommand.CommandText Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.CommandText Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.CommandText Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.CommandText Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public override int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CommandTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.CommandTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在终止尝试执行命令并生成错误之前的等待时间。</summary>
        <value>等待命令执行所需的时间（以秒为单位）。 默认值为 30 秒。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值为 0 表示不限制 （尝试执行命令将无限期等待）。  
  
> [!NOTE]
>  <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>属性将被忽略在异步方法调用期间如<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。  
  
 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 对上下文连接执行命令时，不起 (<xref:System.Data.SqlClient.SqlConnection>以打开"上下文连接 = true"连接字符串中)。  
  
> [!NOTE]
>  此属性是在命令执行或结果的处理过程对所有网络读取的累积超时值 （在方法的调用期间读取的所有网络数据包）。 之后的第一行返回，并且不包括用户处理时间，仍会发生超时，只有网络读取时间。  
>   
>  例如，使用 30 秒超时，如果<xref:System.Data.SqlClient.SqlDataReader.Read%2A>需要两个网络数据包，则它具有 30 秒以读取两个网络数据包。 如果调用<xref:System.Data.SqlClient.SqlDataReader.Read%2A>同样，它将具有另一个 30 秒才能阅读它需要的任何数据。  
  
```  
using System;  
using System.Data.SqlClient;  
///   
public class A {  
   ///   
   public static void Main() {  
      string connectionString = "";  
      // Wait for 5 second delay in the command  
      string queryString = "waitfor delay '00:00:05'";  
      using (SqlConnection connection = new SqlConnection(connectionString)) {  
         connection.Open();  
         SqlCommand command = new SqlCommand(queryString, connection);  
         // Setting command timeout to 1 second  
         command.CommandTimeout = 1;  
         try {  
            command.ExecuteNonQuery();  
         }  
         catch (SqlException e) {  
            Console.WriteLine("Got expected SqlException due to command timeout ");  
            Console.WriteLine(e);  
         }  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandType">
      <MemberSignature Language="C#" Value="public override System.Data.CommandType CommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandType CommandType" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandType As CommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::CommandType CommandType { System::Data::CommandType get(); void set(System::Data::CommandType value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.CommandType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.CommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示解释 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 属性的方式。</summary>
        <value>
          <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 <see langword="Text" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你将设置<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>属性`StoredProcedure`，应设置<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>到存储过程的名称的属性。 在调用 Execute 方法之一时，该命令将执行此存储的过程。  
  
 Microsoft.NET Framework 数据提供程序 SQL Server 不支持的问号 （？） 占位符用于将参数传递到 SQL 语句或存储的过程调用<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>的<xref:System.Data.CommandType.Text>。 在这种情况下，必须使用命名的参数。 例如:  
  
 选择 * 从客户其中 CustomerID = @CustomerID  
  
 有关详细信息，请参阅[配置参数和参数数据类型](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">该值不是有效的 <see cref="T:System.Data.CommandType" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As SqlConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlConnection ^ Connection { System::Data::SqlClient::SqlConnection ^ get(); void set(System::Data::SqlClient::SqlConnection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的此实例使用的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</summary>
        <value>到数据源的连接。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该命令将在现有的事务中登记，更改连接尝试执行该命令将引发<xref:System.InvalidOperationException>。  
  
 如果 <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> 属性不为 null，而事务已提交或回滚，则会将 <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> 设置为 null。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData SqlCommand.Connection Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Connection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Connection Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Connection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">命令在事务中登记时 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 属性被更改。</exception>
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandType" />
      </Docs>
    </Member>
    <Member MemberName="CreateDbParameter">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameter CreateDbParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbParameter CreateDbParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.CreateDbParameter" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbParameter () As DbParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbParameter ^ CreateDbParameter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParameter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameter CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlParameter CreateParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.CreateParameter" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateParameter () As SqlParameter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlParameter ^ CreateParameter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的新实例。</summary>
        <returns>
          <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.CreateParameter%2A>方法是强类型版本<xref:System.Data.IDbCommand.CreateParameter%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbConnection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DbConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbConnection ^ DbConnection { System::Data::Common::DbConnection ^ get(); void set(System::Data::Common::DbConnection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbParameterCollection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbParameterCollection DbParameterCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbParameterCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbParameterCollection As DbParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbParameterCollection ^ DbParameterCollection { System::Data::Common::DbParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction DbTransaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction DbTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbTransaction" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DbTransaction As DbTransaction" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbTransaction ^ DbTransaction { System::Data::Common::DbTransaction ^ get(); void set(System::Data::Common::DbTransaction ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignTimeVisible">
      <MemberSignature Language="C#" Value="public override bool DesignTimeVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DesignTimeVisible" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DesignTimeVisible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DesignTimeVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DesignTimeVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示命令对象是否应在 Windows 窗体设计器控件中可见。</summary>
        <value>一个指示命令对象是否应在控件中可见的值。 默认值为 * * true * *。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteNonQuery">
      <MemberSignature Language="C#" Value="public int EndExecuteNonQuery (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndExecuteNonQuery(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecuteNonQuery (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndExecuteNonQuery(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />。</param>
        <summary>完成 Transact-SQL 语句的异步执行。</summary>
        <returns>受影响的行数（与 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> 相同的行为）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当调用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>执行[!INCLUDE[tsql](~/includes/tsql-md.md)]语句，必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>若要完成该操作。 如果执行命令的进程未尚未完成，此方法受到阻止，直到该操作已完成。 用户可以验证该命令已完成其操作使用<xref:System.IAsyncResult>返回实例<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>方法。 如果对的调用中未指定，回调过程<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>，必须调用此方法。  
  
   
  
## Examples  
 有关示例演示如何使用<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>方法，请参阅<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 参数为 null（在 Microsoft Visual Basic 中为 <see langword="Nothing" />）</exception>
        <exception cref="T:System.InvalidOperationException">不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> 以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" /> 调用的执行。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> 中指定的时间已过，并且使用 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 指定的异步操作不完整。  在某些情况下，<see cref="T:System.IAsyncResult" /> 可能不正确地设置为 <see langword="IsCompleted" />。 如果发生这种情况并且调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />，则 EndExecuteNonQuery 可能引发 SqlException 错误（如果 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> 中指定的时间已过，并且使用 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 指定的异步操作不完整）。 若要更正这种情况，应增加 CommandTimeout 的值或减少正由异步操作完成的工作。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader EndExecuteReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader EndExecuteReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecuteReader (asyncResult As IAsyncResult) As SqlDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlDataReader ^ EndExecuteReader(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />。</param>
        <summary>完成 Transact-SQL 语句的异步执行，从而返回请求的 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
        <returns>可用于检索请求行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当调用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要执行的 TRANSACT-SQL 语句，必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>若要完成该操作。 如果执行命令的进程未尚未完成，此方法受到阻止，直到该操作已完成。 用户可以验证该命令已完成其操作使用<xref:System.IAsyncResult>返回实例<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>方法。 如果对的调用中未指定，回调过程<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>，必须调用此方法。  
  
   
  
## Examples  
 有关示例演示如何使用<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>方法，请参阅<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 参数为 null（在 Microsoft Visual Basic 中为 <see langword="Nothing" />）</exception>
        <exception cref="T:System.InvalidOperationException">不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> 以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" /> 调用的执行。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader EndExecuteXmlReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader EndExecuteXmlReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecuteXmlReader (asyncResult As IAsyncResult) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ EndExecuteXmlReader(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />。</param>
        <summary>完成 Transact-SQL 语句的异步执行，从而将请求的数据以 XML 形式返回。</summary>
        <returns>可用于获取生成的 XML 数据的 <see cref="T:System.Xml.XmlReader" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当调用<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>若要执行的 TRANSACT-SQL 语句，必须调用<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>若要完成该操作。 如果执行命令的进程未尚未完成，此方法受到阻止，直到该操作已完成。 用户可以验证该命令已完成其操作使用<xref:System.IAsyncResult>返回实例<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>方法。 如果对的调用中未指定，回调过程<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>，必须调用此方法。  
  
   
  
## Examples  
 有关示例演示如何使用<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>方法，请参阅<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 参数为 null（在 Microsoft Visual Basic 中为 <see langword="Nothing" />）</exception>
        <exception cref="T:System.InvalidOperationException">不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> 以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 调用的执行。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReader">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbDataReader ExecuteDbDataReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteDbDataReader (behavior As CommandBehavior) As DbDataReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbDataReader ^ ExecuteDbDataReader(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReaderAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;System::Data::Common::DbDataReader ^&gt; ^ ExecuteDbDataReaderAsync(System::Data::CommandBehavior behavior, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQuery">
      <MemberSignature Language="C#" Value="public override int ExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExecuteNonQuery () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ExecuteNonQuery();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteNonQuery</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>对连接执行 Transact-SQL 语句并返回受影响的行数。</summary>
        <returns>受影响的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>执行目录操作 （例如，查询数据库的结构或创建数据库对象，如表），或更改数据库中的数据，而无需使用<xref:System.Data.DataSet>通过执行更新、 插入或删除语句。  
  
 尽管<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>返回任何行，任何输出参数或返回值映射到参数填充了数据。  
  
 对于 UPDATE、INSERT 和 DELETE 语句，返回值为该命令所影响的行数。 插入或更新存在于表的触发器，返回的值包括通过插入或更新操作并受或多个触发器的行数受影响的行数。 对于其他所有类型的语句，返回值为 -1。 如果发生回滚，则返回值也为-1。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>，然后执行它使用<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>。 该示例传递 （例如更新、 插入或删除） 的 TRANSACT-SQL 语句的字符串和要用于连接到数据源的字符串。  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">对锁定的行执行命令时出现异常。 当使用 Microsoft .NET Framework 1.0 版时不生成此异常。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQueryAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ExecuteNonQueryAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteNonQueryAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ExecuteNonQueryAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">取消指令。</param>
        <summary>
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> 的异步版本，对连接执行 [!INCLUDE[tsql](~/includes/tsql-md.md)] 语句并返回受影响的行数。 取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader () As SqlDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlDataReader ^ ExecuteReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
        <returns>
          <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>属性设置为`StoredProcedure`、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>属性应设置为存储过程的名称。 在调用时，该命令将执行此存储的过程<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。  
  
> [!NOTE]
>  如果事务将被死锁，可能不会引发异常之前<xref:System.Data.SqlClient.SqlDataReader.Read%2A>调用。  
  
 多个活动结果集 (MARS) 功能允许多个操作使用相同的连接。  
  
 如果你使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要访问 XML 数据，SQL Server 将返回的任何 XML 结果大于 2033 个字符中的每个 2033 个字符的多个行的长度。 若要避免此行为，使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>读取 FOR XML 查询。 有关详细信息，请参阅文章 Q310378，"PRB:: XML 数据是被截断时你使用 SqlDataReader，"Microsoft 知识库中在http://support.microsoft.com。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>，然后通过传递是 TRANSACT-SQL SELECT 语句的字符串和字符串要用于连接到数据源执行它。  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteReader Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">对锁定的行执行命令时出现异常。 当使用 Microsoft .NET Framework 1.0 版时不生成此异常。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">连接的当前状态已关闭。 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> 需要打开 <see cref="T:System.Data.SqlClient.SqlConnection" />。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader (behavior As CommandBehavior) As SqlDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlDataReader ^ ExecuteReader(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
        <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
        <returns>
          <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>属性设置为`StoredProcedure`、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>属性应设置为存储过程的名称。 在调用时，该命令将执行此存储的过程<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。  
  
> [!NOTE]
>  使用<xref:System.Data.CommandBehavior.SequentialAccess>来检索较大值和二进制数据。 否则为<xref:System.OutOfMemoryException>可能会发生，连接将关闭。  
  
 多个活动结果集 (MARS) 功能允许多个操作使用相同的连接。  
  
 如果你使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要访问 XML 数据，SQL Server 将返回的任何 XML 结果大于 2033 个字符中的每个 2033 个字符的多个行的长度。 若要避免此行为，使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>读取 FOR XML 查询。 有关详细信息，请参阅文章 Q310378，"PRB:: XML 数据是被截断时你使用 SqlDataReader，"Microsoft 知识库中在http://support.microsoft.com。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>，然后通过传递是 TRANSACT-SQL SELECT 语句的字符串和字符串要用于连接到数据源执行它。 将 <xref:System.Data.CommandBehavior> 设置为 <xref:System.Data.CommandBehavior.CloseConnection>。  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteReader2#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader2/CS/mysample.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader2#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader2/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteReaderAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 [!INCLUDE[tsql](~/includes/tsql-md.md)] 语句或存储过程的异步执行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReaderAsync () As Task(Of SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> 的异步版本，它可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。 将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" />。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReaderAsync (behavior As CommandBehavior) As Task(Of SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">语句执行和数据检索的选项。  当设置为 <see langword="Default" /> 时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> 将在返回完整任务前读取整行。</param>
        <summary>
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" /> 的异步版本，用于将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。 将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" />。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">取消指令。</param>
        <summary>
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> 的异步版本，它可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。  取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync(System::Data::CommandBehavior behavior, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">语句执行和数据检索的选项。  当设置为 <see langword="Default" /> 时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> 将在返回完整任务前读取整行。</param>
        <param name="cancellationToken">取消指令。</param>
        <summary>
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" /> 的异步版本，可向 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 发送 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalar">
      <MemberSignature Language="C#" Value="public override object ExecuteScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ExecuteScalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExecuteScalar () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ExecuteScalar();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteScalar</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>执行查询，并返回由查询返回的结果集中的第一行的第一列。 其他列或行将被忽略。</summary>
        <returns>为结果集中的第一行的第一列，或者，如果结果集为空，则为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。 返回的最大字符数为 2033 个字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>方法以从数据库中检索单个值 （例如，一个聚合值）。 这要求更少的代码比使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>方法，，然后再执行需要生成使用返回的数据的单个值的操作<xref:System.Data.SqlClient.SqlDataReader>。  
  
 典型<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>查询可进行格式设置如下面的 C# 示例所示：  
  
```  
cmd.CommandText = "SELECT COUNT(*) FROM dbo.region";  
Int32 count = (Int32) cmd.ExecuteScalar();  
```  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>，然后执行它使用<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>。 该示例传递表示要插入到表，新值的字符串和要用于连接到数据源的字符串。 该函数将返回新**标识**如果插入新行的列值，0 失败。  
  
 [!code-csharp[DataWorks SqlCommand.ExecuteScalar#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.ExecuteScalar/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.ExecuteScalar#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.ExecuteScalar/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">对锁定的行执行命令时出现异常。 当使用 Microsoft .NET Framework 1.0 版时不生成此异常。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalarAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; ExecuteScalarAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ExecuteScalarAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ ExecuteScalarAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">取消指令。</param>
        <summary>
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" /> 的异步版本，该版本异步执行查询，并返回由查询返回的结果集中的第一行的第一列。 其他列或行将被忽略。  取消标记可用于请求在命令超时超过前放弃操作。 将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader ExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader ExecuteXmlReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteXmlReader () As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ ExecuteXmlReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Xml.XmlReader" /> 对象。</summary>
        <returns>一个 <see cref="T:System.Xml.XmlReader" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **XmlReader**返回此方法不支持异步操作。

 <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>属性通常指定[!INCLUDE[tsql](~/includes/tsql-md.md)]带有有效的 FOR XML 子句的语句。 但是，<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>还可以指定返回的语句`ntext`或`nvarchar`包含有效的 XML 或使用定义的列的内容的数据`xml`数据类型。  
  
 典型<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>查询可进行格式设置如下面的 Microsoft Visual C# 示例所示：  
  
```  
SqlCommand command = new SqlCommand("SELECT * FROM dbo.Customers FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 此方法还可用来检索包含 XML 数据的单行、 单列的结果集。 在这种情况下，如果多个返回一行，<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>方法附加<xref:System.Xml.XmlReader>结果的其余部分设置为上的第一行中和丢弃的值。  
  
 多个活动结果集 (MARS) 功能允许多个操作使用相同的连接。  
  
 如果你使用<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>若要访问 XML 数据，SQL Server 将返回的任何 XML 结果大于 2033 个字符中的每个 2033 个字符的多个行的长度。 若要避免此行为，使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>或<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>读取 FOR XML 查询。 有关详细信息，请参阅文章 Q310378，"PRB:: XML 数据是被截断时你使用 SqlDataReader，"Microsoft 知识库中在http://support.microsoft.com。  


## Examples  
 下面的示例创建<xref:System.Data.SqlClient.SqlCommand>，然后执行它使用<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>。 该示例传递是选择的 XML TRANSACT-SQL 语句的字符串和要用于连接到数据源的字符串。  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteXmlReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteXmlReader/CS/mysample.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteXmlReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteXmlReader/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">对锁定的行执行命令时出现异常。 当使用 Microsoft .NET Framework 1.0 版时不生成此异常。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.InvalidOperationException">流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteXmlReaderAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" /> 对象返回。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteXmlReaderAsync () As Task(Of XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Xml::XmlReader ^&gt; ^ ExecuteXmlReaderAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> 的异步版本，可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Xml.XmlReader" /> 对象。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

**XmlReader**返回此方法不支持异步操作。

有关 SQL Server 的.NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Xml::XmlReader ^&gt; ^ ExecuteXmlReaderAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">取消指令。</param>
        <summary>
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> 的异步版本，可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Xml.XmlReader" /> 对象。  取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

**XmlReader**返回此方法不支持异步操作。

有关 SQL Server 的.NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />，而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。  流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
        <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 [SqlClient 流式处理支持](~/docs/framework/data/adonet/sqlclient-streaming-support.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="Notification">
      <MemberSignature Language="C#" Value="public System.Data.Sql.SqlNotificationRequest Notification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Sql.SqlNotificationRequest Notification" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Notification" />
      <MemberSignature Language="VB.NET" Value="Public Property Notification As SqlNotificationRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Sql::SqlNotificationRequest ^ Notification { System::Data::Sql::SqlNotificationRequest ^ get(); void set(System::Data::Sql::SqlNotificationRequest ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Sql.SqlNotificationRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个指定与此命令绑定的 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象的值。</summary>
        <value>如果设置为 null（默认值），则不应请求任何通知。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该命令执行它才会生效之前，必须设置此属性的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationAutoEnlist">
      <MemberSignature Language="C#" Value="public bool NotificationAutoEnlist { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotificationAutoEnlist" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.NotificationAutoEnlist" />
      <MemberSignature Language="VB.NET" Value="Public Property NotificationAutoEnlist As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotificationAutoEnlist { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示应用程序是否应自动接收来自公共 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象的查询通知。</summary>
        <value>* * true * * 如果应用程序应自动接收查询通知;否则为 * * false * *。 默认值为 * * true * *。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此功能在 ASP.NET 应用程序中用于接收针对 SQL Server ASP 页中执行的所有命令的通知。 这使 ASP.NET 可以缓存页，直到用于呈现页的查询会产生不同的结果。 自动登记。  
  
 此属性仅适用于支持查询通知的 SQL Server 的版本。 对于早期版本，将此属性设置为**true**不起作用的应用程序上。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameterCollection Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlParameterCollection Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As SqlParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlParameterCollection ^ Parameters { System::Data::SqlClient::SqlParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
        <value>Transact-SQL 语句或存储过程的参数。 默认值为空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft.NET Framework 数据提供程序 SQL Server 不支持用于将参数传递到 SQL 语句或存储的过程调用的命令的问号 （？） 占位符`CommandType.Text`。 在这种情况下，必须使用命名的参数。 例如:  
  
 选择 * 从客户其中 CustomerID = @CustomerID  
  
> [!NOTE]
>  如果集合中的参数不匹配的查询执行的要求，可能会产生错误。  
  
 有关详细信息，请参阅[配置参数和参数数据类型](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md)。  
  
   
  
## Examples  
 下面的示例演示如何创建<xref:System.Data.SqlClient.SqlCommand>和将参数添加到<xref:System.Data.SqlClient.SqlParameterCollection>。  
  
 [!code-csharp[DataWorks SqlParameterCollection.AddWithValue#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlParameterCollection.AddWithValue/CS/source.cs#1)]
 [!code-vb[DataWorks SqlParameterCollection.AddWithValue#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlParameterCollection.AddWithValue/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public override void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Prepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Prepare" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Prepare ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Prepare();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.Prepare</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在 SQL Server 的实例上创建命令的一个准备版本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>设置为`StoredProcedure`，调用<xref:System.Data.SqlClient.SqlCommand.Prepare%2A>应该会成功，虽然它可能会不导致不执行任何操作。  
  
 在调用之前<xref:System.Data.SqlClient.SqlCommand.Prepare%2A>，在要准备的语句中指定每个参数的数据类型。 对于每个参数具有可变长度数据类型，你必须设置<xref:System.Data.SqlClient.SqlParameter.Size%2A>属性设置为所需的最大大小。 <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> 如果不满足这些条件，则返回错误。  
  
> [!NOTE]
>  如果通过执行 TRANSACT-SQL 更改数据库上下文`USE <database>`语句，或通过调用<xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>方法，然后<xref:System.Data.SqlClient.SqlCommand.Prepare%2A>必须调用第二次。  
  
 如果调用`Execute`方法之后调用<xref:System.Data.SqlClient.SqlCommand.Prepare%2A>，任何大于指定的值的参数值<xref:System.Data.SqlClient.SqlParameter.Size%2A>属性将被自动截断为原始的指定大小的参数，并且没有截断错误返回。  
  
 输出参数 （无论是否已准备） 必须具有用户指定的数据类型。 如果指定可变长度数据类型，你还必须指定最大值<xref:System.Data.SqlClient.SqlParameter.Size%2A>。  
  
 Visual Studio 2010 之前,<xref:System.Data.SqlClient.SqlCommand.Prepare%2A>引发了异常。  从 Visual Studio 2010 开始，此方法不引发异常。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> 方法的用法。  
  
 [!code-csharp[Classic WebData SqlCommand.Prepare#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Prepare/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Prepare#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Prepare/VB/Source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetCommandTimeout">
      <MemberSignature Language="C#" Value="public void ResetCommandTimeout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetCommandTimeout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ResetCommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetCommandTimeout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetCommandTimeout();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> 属性重置为其默认值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>为 30 秒。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatementCompleted">
      <MemberSignature Language="C#" Value="public event System.Data.StatementCompletedEventHandler StatementCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.StatementCompletedEventHandler StatementCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StatementCompleted As StatementCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::StatementCompletedEventHandler ^ StatementCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.StatementCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 Transact-SQL 语句执行完成时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建属于当前实例的副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <returns>属于此实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Transaction" />
      <MemberSignature Language="VB.NET" Value="Public Property Transaction As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlTransaction ^ Transaction { System::Data::SqlClient::SqlTransaction ^ get(); void set(System::Data::SqlClient::SqlTransaction ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在其中执行 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 的 <see cref="T:System.Data.SqlClient.SqlCommand" />。</summary>
        <value>
          <see cref="T:System.Data.SqlClient.SqlTransaction" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 无法设置<xref:System.Data.SqlClient.SqlCommand.Transaction%2A>如果它已被设置为特定值，并且该命令正在执行的属性。 如果事务属性设置为<xref:System.Data.SqlClient.SqlTransaction>未连接到相同的对象<xref:System.Data.SqlClient.SqlConnection>作为<xref:System.Data.SqlClient.SqlCommand>对象，下次尝试执行语句，将引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatedRowSource">
      <MemberSignature Language="C#" Value="public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.UpdateRowSource UpdatedRowSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.UpdatedRowSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property UpdatedRowSource As UpdateRowSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::UpdateRowSource UpdatedRowSource { System::Data::UpdateRowSource get(); void set(System::Data::UpdateRowSource value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.UpdatedRowSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.UpdateRowSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 Update 方法使用时应用于 <see cref="T:System.Data.DataRow" /> 的方式。</summary>
        <value>
          <see cref="T:System.Data.UpdateRowSource" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值<xref:System.Data.UpdateRowSource>值是**同时**除非自动生成命令 (一样的情况下<xref:System.Data.SqlClient.SqlCommandBuilder>)，默认值是在这种情况下**无**。  
  
 有关使用**UpdatedRowSource**属性，请参阅[DataAdapter 参数](~/docs/framework/data/adonet/dataadapter-parameters.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>