<Type Name="SqlBulkCopyColumnMapping" FullName="System.Data.SqlClient.SqlBulkCopyColumnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd6c332c29dba696e66e055fcaf32d4c12ca4fa3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30389951" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlBulkCopyColumnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopyColumnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopyColumnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopyColumnMapping sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例的数据源中的列与该实例的目标表中的列之间的映射。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 列映射定义数据源和目标表之间的映射。  
  
 如果未定义映射 — 即<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合为空-序号位置上的列将映射隐式基于。 对于这种方式，源和目标架构必须与匹配。 如果不是这样，<xref:System.InvalidOperationException>将引发。  
  
 如果<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合不为空的不是每个数据源中存在的列必须指定。 未映射的集合那些将被忽略。  
  
 你可以按名称或序号引用源和目标列。 你还可以混合使用按名称和相同的映射集合中的第几列引用。  
  
   
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数匹配的源中的列数并且在其相应的源列相同的序号位置是每个目标列，列名称不匹配。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMapping#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMapping/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMapping#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMapping/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopyColumnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopyColumnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>用于初始化新的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象的默认构造函数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你使用此构造函数，你必须定义映射使用源<xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn%2A>属性或<xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal%2A>属性，并定义映射使用目标<xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn%2A>属性或<xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal%2A>属性。  
  
   
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数与匹配的源中的列数，但不匹配的列名称和序号位置。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMapping#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMapping/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMapping#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMapping/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopyColumnMapping (int sourceColumnOrdinal, int destinationOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sourceColumnOrdinal, int32 destinationOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceColumnOrdinal As Integer, destinationOrdinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopyColumnMapping(int sourceColumnOrdinal, int destinationOrdinal);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sourceColumnOrdinal" Type="System.Int32" />
        <Parameter Name="destinationOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceColumnOrdinal">数据源中源列的序号位置。</param>
        <param name="destinationOrdinal">目标表中目标列的序号位置。</param>
        <summary>创建新的列映射，并使用列序号引用源列和目标列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数与匹配的源中的列数，但不匹配的列名称和序号位置。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建基于列的序号位置大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMappingOrdinal#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingOrdinal/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMappingOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingOrdinal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopyColumnMapping (int sourceColumnOrdinal, string destinationColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sourceColumnOrdinal, string destinationColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceColumnOrdinal As Integer, destinationColumn As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopyColumnMapping(int sourceColumnOrdinal, System::String ^ destinationColumn);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sourceColumnOrdinal" Type="System.Int32" />
        <Parameter Name="destinationColumn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceColumnOrdinal">数据源中源列的序号位置。</param>
        <param name="destinationColumn">目标表中目标列的名称。</param>
        <summary>创建新的列映射，并使用列序号引用源列和目标列的列名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数与匹配的源中的列数，但不匹配的列名称和序号位置。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMappingOrdinalName#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingOrdinalName/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMappingOrdinalName#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingOrdinalName/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopyColumnMapping (string sourceColumn, int destinationOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string sourceColumn, int32 destinationOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceColumn As String, destinationOrdinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopyColumnMapping(System::String ^ sourceColumn, int destinationOrdinal);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sourceColumn" Type="System.String" />
        <Parameter Name="destinationOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceColumn">数据源中源列的名称。</param>
        <param name="destinationOrdinal">目标表中目标列的序号位置。</param>
        <summary>创建新的列映射，并使用列名称引用源列和目标列的列序号。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数与匹配的源中的列数，但不匹配的列名称和序号位置。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMappingNameOrdinal#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingNameOrdinal/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMappingNameOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingNameOrdinal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopyColumnMapping (string sourceColumn, string destinationColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string sourceColumn, string destinationColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceColumn As String, destinationColumn As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopyColumnMapping(System::String ^ sourceColumn, System::String ^ destinationColumn);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sourceColumn" Type="System.String" />
        <Parameter Name="destinationColumn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceColumn">数据源中源列的名称。</param>
        <param name="destinationColumn">目标表中目标列的名称。</param>
        <summary>创建新的列映射，并使用列名称引用源列和目标列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数与匹配的源中的列数，但不匹配的列名称和序号位置。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMapping#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMapping/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMapping#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMapping/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DestinationColumn">
      <MemberSignature Language="C#" Value="public string DestinationColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationColumn" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationColumn As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationColumn { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正在目标数据库表中映射的列的名称。</summary>
        <value>
          <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn" /> 属性的字符串值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn%2A>和<xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal%2A>属性是互相排斥。 最后一个的值设置优先。  
  
   
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数与匹配的源中的列数，但不匹配的列名称和序号位置。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMappingDestinationColumn#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingDestinationColumn/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMappingDestinationColumn#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingDestinationColumn/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DestinationOrdinal">
      <MemberSignature Language="C#" Value="public int DestinationOrdinal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DestinationOrdinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationOrdinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DestinationOrdinal { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>目标表中目标列的序号值。</summary>
        <value>
          <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal" /> 属性的整数值，或者如果尚未设置该属性，则为 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn%2A>和<xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal%2A>属性是互相排斥。 最后一个的值设置优先。  
  
   
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数与匹配的源中的列数，但不匹配的列名称和序号位置。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceColumn">
      <MemberSignature Language="C#" Value="public string SourceColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceColumn" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceColumn As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceColumn { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正在数据源中映射的列的名称。</summary>
        <value>
          <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn" /> 属性的字符串值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn%2A>和<xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal%2A>属性是互相排斥。 最后一个的值设置优先。  
  
   
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数与匹配的源中的列数，但不匹配的列名称和序号位置。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMappingDestinationColumn#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingDestinationColumn/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMappingDestinationColumn#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingDestinationColumn/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceOrdinal">
      <MemberSignature Language="C#" Value="public int SourceOrdinal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SourceOrdinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceOrdinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SourceOrdinal { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数据源中源列的序号位置。</summary>
        <value>
          <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal" /> 属性的整数值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn%2A>和<xref:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal%2A>属性是互相排斥。 最后一个的值设置优先。  
  
   
  
## Examples  
 下面的示例大容量复制数据从源表中**AdventureWorks**到同一个数据库中的目标表的示例数据库。 尽管目标中的列数与匹配的源中的列数，但不匹配的列名称和序号位置。 <xref:System.Data.SqlClient.SqlBulkCopyColumnMapping> 对象用于创建大容量复制的列映射。  
  
> [!IMPORTANT]
>  除非你已创建了工作表中所述，将不会运行此示例[批量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码是为了演示使用的语法**SqlBulkCopy**仅。 如果源和目标表都在相同的 SQL Server 实例，它将更加容易和快速使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>