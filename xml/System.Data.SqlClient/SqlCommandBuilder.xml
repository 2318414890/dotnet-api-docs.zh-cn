<Type Name="SqlCommandBuilder" FullName="System.Data.SqlClient.SqlCommandBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1d6c2a42dc06d05c2f30996ed8802e30cd2597f3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30390541" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlCommandBuilder : System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommandBuilder extends System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommandBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlCommandBuilder&#xA;Inherits DbCommandBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlCommandBuilder sealed : System::Data::Common::DbCommandBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommandBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>自动生成单表命令，用于将对 <see cref="T:System.Data.DataSet" /> 所做的更改与关联的 SQL Server 数据库的更改相协调。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDataAdapter>不会自动生成所需进行对帐对所做更改的 TRANSACT-SQL 语句<xref:System.Data.DataSet>与关联的 SQL Server 实例。 但是，你可以创建<xref:System.Data.SqlClient.SqlCommandBuilder>对象来自动生成单表更新的 TRANSACT-SQL 语句，如果你设置<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>属性<xref:System.Data.SqlClient.SqlDataAdapter>。 然后，你未设置任何其他 TRANSACT-SQL 语句都由<xref:System.Data.SqlClient.SqlCommandBuilder>。  
  
 <xref:System.Data.SqlClient.SqlCommandBuilder>将自己注册为侦听器<xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>事件每当你设置<xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A>属性。 你可以仅将一个相关联<xref:System.Data.SqlClient.SqlDataAdapter>或<xref:System.Data.SqlClient.SqlCommandBuilder>与每个其他对象一次。  
  
 若要生成 INSERT、 UPDATE 或 DELETE 语句，<xref:System.Data.SqlClient.SqlCommandBuilder>使用<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>要自动检索所需的元数据集属性。 如果你更改<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>元数据进行检索，如第一次更新，应调用后<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>方法来更新元数据。  
  
 `SelectCommand` 还必须至少返回一个主键或唯一列。 如果这些都不存在， **InvalidOperation**则会生成异常，并不会生成命令。  
  
 <xref:System.Data.SqlClient.SqlCommandBuilder>还使用<xref:System.Data.SqlClient.SqlCommand.Connection%2A>， <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>，和<xref:System.Data.SqlClient.SqlCommand.Transaction%2A>属性引用的<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>。 用户应调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果修改一个或多个这些属性，或如果<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>本身被替换。 否则为<xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>， <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>，和<xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>属性保留其以前的值。  
  
 如果调用<xref:System.ComponentModel.Component.Dispose%2A>、<xref:System.Data.SqlClient.SqlCommandBuilder>与解除关联<xref:System.Data.SqlClient.SqlDataAdapter>，并且不再使用所生成的命令。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Data.SqlClient.SqlCommand>、 以及<xref:System.Data.SqlClient.SqlDataAdapter>和<xref:System.Data.SqlClient.SqlConnection>，来从数据源选择的行。 该示例传递连接字符串、 TRANSACT-SQL SELECT 语句的查询字符串和数据库表的名称的字符串。 然后，示例创建<xref:System.Data.SqlClient.SqlCommandBuilder>。  
  
 [!code-csharp[Classic WebData SqlCommandBuilder#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommandBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/VB/Source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommandBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder (System.Data.SqlClient.SqlDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (adapter As SqlDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommandBuilder(System::Data::SqlClient::SqlDataAdapter ^ adapter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.SqlClient.SqlDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">
          <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 的名称。</param>
        <summary>使用关联的 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 对象初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommandBuilder>将自己注册为侦听器<xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>由生成的事件<xref:System.Data.SqlClient.SqlDataAdapter>此属性中指定。  
  
 当你创建的新实例<xref:System.Data.SqlClient.SqlCommandBuilder>，任何现有<xref:System.Data.SqlClient.SqlCommandBuilder>与此关联<xref:System.Data.SqlClient.SqlDataAdapter>释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyParameterInfo">
      <MemberSignature Language="C#" Value="protected override void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow datarow, System.Data.StatementType statementType, bool whereClause);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ApplyParameterInfo(class System.Data.Common.DbParameter parameter, class System.Data.DataRow datarow, valuetype System.Data.StatementType statementType, bool whereClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ApplyParameterInfo(System::Data::Common::DbParameter ^ parameter, System::Data::DataRow ^ datarow, System::Data::StatementType statementType, bool whereClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Common.DbParameter" />
        <Parameter Name="datarow" Type="System.Data.DataRow" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="whereClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="datarow">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="whereClause">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogLocation">
      <MemberSignature Language="C#" Value="public override System.Data.Common.CatalogLocation CatalogLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Common.CatalogLocation CatalogLocation" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogLocation" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CatalogLocation As CatalogLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::Common::CatalogLocation CatalogLocation { System::Data::Common::CatalogLocation get(); void set(System::Data::Common::CatalogLocation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CatalogLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>对于 <see cref="T:System.Data.Common.CatalogLocation" /> 类的实例，设置或获取 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />。</summary>
        <value>
          <see cref="T:System.Data.Common.CatalogLocation" /> 对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogSeparator">
      <MemberSignature Language="C#" Value="public override string CatalogSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CatalogSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CatalogSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CatalogSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置或获取一个字符串，该字符串用作 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的实例的目录分隔符。</summary>
        <value>指示要用于 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的目录分隔符的字符串。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataAdapter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataAdapter DataAdapter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlDataAdapter DataAdapter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.DataAdapter" />
      <MemberSignature Language="VB.NET" Value="Public Property DataAdapter As SqlDataAdapter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlDataAdapter ^ DataAdapter { System::Data::SqlClient::SqlDataAdapter ^ get(); void set(System::Data::SqlClient::SqlDataAdapter ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataAdapter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置自动为其生成 Transact-SQL 语句的一个 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 对象。</summary>
        <value>
          <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommandBuilder>将自己注册为侦听器<xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>由生成的事件<xref:System.Data.SqlClient.SqlDataAdapter>此属性中指定。  
  
 当你创建的新实例<xref:System.Data.SqlClient.SqlCommandBuilder>，任何现有<xref:System.Data.SqlClient.SqlCommandBuilder>与此关联<xref:System.Data.SqlClient.SqlDataAdapter>释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveParameters">
      <MemberSignature Language="C#" Value="public static void DeriveParameters (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeriveParameters(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeriveParameters (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeriveParameters(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">引用将从其中导出参数信息的存储过程的 <see cref="T:System.Data.SqlClient.SqlCommand" />。 将派生参数添加到 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> 的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 集合中。</param>
        <summary>从在 <see cref="T:System.Data.SqlClient.SqlCommand" /> 中指定的存储过程中检索参数信息并填充指定的 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> 对象的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DeriveParameters` 将覆盖任何现有参数信息`SqlDbCommand`。  
  
 `DeriveParameters` 需要其他调用数据库以获取信息。 如果在提前知道参数信息，则更有效地通过显式设置的信息填充的参数集合。  
  
 你只能使用`DeriveParameters`的存储过程。 不能使用`DeriveParameters`与扩展存储过程。 不能使用`DeriveParameters`来填充<xref:System.Data.SqlClient.SqlParameterCollection>使用任意 Transact SQL 语句，例如参数化的 SELECT 语句。  
  
 有关详细信息，请参阅[配置参数和参数数据类型](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此命令文本不是一个有效的存储过程名。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDeleteCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取自动生成的、对数据库执行删除操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.SqlClient.SqlCommand>要执行对象。  
  
 你还可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>作为修改命令的基础。 例如，你可能会调用<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>和修改<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>值，然后上显式设置<xref:System.Data.SqlClient.SqlDataAdapter>。  
  
 当首次生成 SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。 否则为<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。 应用程序调用时，将首先生成 SQL 语句<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>。  
  
 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeleteCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetDeleteCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取自动生成的、对数据库执行删除操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.SqlClient.SqlCommand>要执行对象。  
  
 你还可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>作为修改命令的基础。 例如，你可能会调用<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>和修改<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>值，然后上显式设置<xref:System.Data.SqlClient.SqlDataAdapter>。  
  
 当首次生成 SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。 否则为<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。 应用程序调用时，将首先生成 SQL 语句<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>。  
  
 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeleteCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetDeleteCommand(bool useColumnsForParameterNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">如果为 <see langword="true" />，则生成与列名匹配的参数名（如果可能）。 如果为 <see langword="false" />，则生成 @p1、@p2，以此类推。</param>
        <summary>获取自动生成的、对数据库执行删除操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.SqlClient.SqlCommand>要执行对象。  
  
 你还可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>作为修改命令的基础。 例如，你可能会调用<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>和修改<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>值，然后上显式设置<xref:System.Data.SqlClient.SqlDataAdapter>。  
  
 当首次生成 SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。 否则为<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。 应用程序调用时，将首先生成 SQL 语句<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>。  
  
 生成参数名称时的默认行为是使用@p1， @p2，有关的各种参数，依此类推。 传递`true`为`useColumnsForParameterNames`参数允许你强制<xref:System.Data.OleDb.OleDbCommandBuilder>生成改为根据列名称的参数。 仅当满足以下条件，此操作将成功。  
  
-   <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>从返回**GetSchema**方法调用，并且在中找到<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>指定集合并且其长度等于或大于生成的参数名。  
  
-   生成的参数名满足中指定的条件<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>从返回**GetSchema**方法调用，并且在中找到<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>集合正则表达式。  
  
-   A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>从返回**GetSchema**方法调用，并且在中找到<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>指定的集合。  
  
 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInsertCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取自动生成的、对数据库执行插入操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.SqlClient.SqlCommand>要执行对象。  
  
 你还可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>作为修改命令的基础。 例如，你可能会调用<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>和修改<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>值，然后上显式设置<xref:System.Data.SqlClient.SqlDataAdapter>。  
  
 当首次生成 TRANSACT-SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。 否则为<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。 应用程序调用时，将首先生成 TRANSACT-SQL 语句<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>。  
  
 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetInsertCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取自动生成的、对数据库执行插入操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.SqlClient.SqlCommand>要执行对象。  
  
 你还可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>作为修改命令的基础。 例如，你可能会调用<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>和修改<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>值，然后上显式设置<xref:System.Data.SqlClient.SqlDataAdapter>。  
  
 当首次生成 TRANSACT-SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。 否则为<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。 应用程序调用时，将首先生成 TRANSACT-SQL 语句<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>。  
  
 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetInsertCommand(bool useColumnsForParameterNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">如果为 <see langword="true" />，则生成与列名匹配的参数名（如果可能）。 如果为 <see langword="false" />，则生成 @p1、@p2，以此类推。</param>
        <summary>获取自动生成的、对数据库执行插入操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.SqlClient.SqlCommand>要执行对象。  
  
 你还可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>作为修改命令的基础。 例如，你可能会调用<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>和修改<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>值，然后上显式设置<xref:System.Data.SqlClient.SqlDataAdapter>。  
  
 当首次生成 TRANSACT-SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。 否则为<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。 应用程序调用时，将首先生成 TRANSACT-SQL 语句<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>。  
  
 生成参数名称时的默认行为是使用@p1， @p2，有关的各种参数，依此类推。 传递`true`为`useColumnsForParameterNames`参数允许你强制<xref:System.Data.OleDb.OleDbCommandBuilder>生成改为根据列名称的参数。 仅当满足以下条件，此操作将成功。  
  
-   <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>从返回**GetSchema**方法调用，并且在中找到<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>指定集合并且其长度等于或大于生成的参数名。  
  
-   生成的参数名满足中指定的条件<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>从返回**GetSchema**方法调用，并且在中找到<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>集合正则表达式。  
  
-   A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>从返回**GetSchema**方法调用，并且在中找到<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>指定的集合。  
  
 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterName (parameterOrdinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterName(int parameterOrdinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterName (parameterName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterName(System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterPlaceholder">
      <MemberSignature Language="C#" Value="protected override string GetParameterPlaceholder (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterPlaceholder(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterPlaceholder (parameterOrdinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterPlaceholder(int parameterOrdinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaTable">
      <MemberSignature Language="C#" Value="protected override System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand srcCommand);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.DataTable GetSchemaTable(class System.Data.Common.DbCommand srcCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSchemaTable (srcCommand As DbCommand) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::DataTable ^ GetSchemaTable(System::Data::Common::DbCommand ^ srcCommand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcCommand" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="srcCommand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUpdateCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取自动生成的、对数据库执行更新操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.SqlClient.SqlCommand>要执行对象。  
  
 你还可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>作为修改命令的基础。 例如，你可能会调用<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>和修改<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>值，然后上显式设置<xref:System.Data.SqlClient.SqlDataAdapter>。  
  
 当首次生成 TRANSACT-SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。 否则为<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。 应用程序调用时，将首先生成 TRANSACT-SQL 语句<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>。  
  
 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdateCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetUpdateCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取自动生成的、对数据库执行更新操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.SqlClient.SqlCommand>要执行对象。  
  
 你还可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>作为修改命令的基础。 例如，你可能会调用<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>和修改<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>值，然后上显式设置<xref:System.Data.SqlClient.SqlDataAdapter>。  
  
 当首次生成 TRANSACT-SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。 否则为<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。 应用程序调用时，将首先生成 TRANSACT-SQL 语句<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>。  
  
 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdateCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetUpdateCommand(bool useColumnsForParameterNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">如果为 <see langword="true" />，则生成与列名匹配的参数名（如果可能）。 如果为 <see langword="false" />，则生成 @p1、@p2，以此类推。</param>
        <summary>获取自动生成的、对数据库执行更新操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
        <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.SqlClient.SqlCommand>要执行对象。  
  
 你还可以使用<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>作为修改命令的基础。 例如，你可能会调用<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>和修改<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>值，然后上显式设置<xref:System.Data.SqlClient.SqlDataAdapter>。  
  
 当首次生成 TRANSACT-SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。 否则为<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。 应用程序调用时，将首先生成 TRANSACT-SQL 语句<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>。  
  
 生成参数名称时的默认行为是使用@p1， @p2，有关的各种参数，依此类推。 传递`true`为`useColumnsForParameterNames`参数允许你强制<xref:System.Data.OleDb.OleDbCommandBuilder>生成改为根据列名称的参数。 仅当满足以下条件，此操作将成功。  
  
-   <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>从返回**GetSchema**方法调用，并且在中找到<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>指定集合并且其长度等于或大于生成的参数名。  
  
-   生成的参数名满足中指定的条件<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>从返回**GetSchema**方法调用，并且在中找到<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>集合正则表达式。  
  
-   A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>从返回**GetSchema**方法调用，并且在中找到<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>指定的集合。  
  
 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand InitializeCommand(class System.Data.Common.DbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function InitializeCommand (command As DbCommand) As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ InitializeCommand(System::Data::Common::DbCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuoteIdentifier">
      <MemberSignature Language="C#" Value="public override string QuoteIdentifier (string unquotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string QuoteIdentifier(string unquotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function QuoteIdentifier (unquotedIdentifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ QuoteIdentifier(System::String ^ unquotedIdentifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unquotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unquotedIdentifier">不带引号的原始标识符。</param>
        <summary>给定了具有正确的目录大小写设置且不带引号的标识符时，返回该标识符的正确的带引号形式。 这包括正确地转义该标识符中的任何嵌入引号。</summary>
        <returns>带引号的标识符版本。 标识符内的嵌入引号被正确地转义。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuotePrefix">
      <MemberSignature Language="C#" Value="public override string QuotePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuotePrefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property QuotePrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ QuotePrefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在指定其名称中包含空格或保留标记等字符的 SQL Server 数据库对象（如表或列）时使用的一个或多个起始字符。</summary>
        <value>要使用的一个或多个起始字符。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  虽然不能更改<xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A>属性插入、 更新或删除生成命令，可以将其设置更改后调用`Update`DataAdapter 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在生成 INSERT、UPDATE 或 DELETE 命令后，不能更改此属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteSuffix">
      <MemberSignature Language="C#" Value="public override string QuoteSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuoteSuffix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property QuoteSuffix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ QuoteSuffix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在指定其名称中包含空格或保留标记等字符的 SQL Server 数据库对象（如表或列）时使用的一个或多个结束字符。</summary>
        <value>要使用的结束字符。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  虽然不能更改<xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A>或<xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A>属性插入、 更新或删除已生成操作，可以将其设置更改后调用`Update`DataAdapter 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当生成 Insert、Update 或 Delete 命令后，不能更改此属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaSeparator">
      <MemberSignature Language="C#" Value="public override string SchemaSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemaSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SchemaSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SchemaSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要用作架构标识符和任何其他标识符之间的分隔符的字符。</summary>
        <value>要用作架构分隔符的字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，数据库服务器通过将架构名称与具有某些字符标识符分离指示标识符的架构。 例如，SQL Server 使用一段中，创建完整的标识符，例如，Person.CustomerName，其中"Person"是架构名称，"CustomerName"是的标识符。 设置此属性使开发人员修改此行为。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRowUpdatingHandler">
      <MemberSignature Language="C#" Value="protected override void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetRowUpdatingHandler(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetRowUpdatingHandler (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetRowUpdatingHandler(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnquoteIdentifier">
      <MemberSignature Language="C#" Value="public override string UnquoteIdentifier (string quotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string UnquoteIdentifier(string quotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UnquoteIdentifier (quotedIdentifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ UnquoteIdentifier(System::String ^ quotedIdentifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quotedIdentifier">其嵌入引号将被移除的标识符。</param>
        <summary>给定了带引号的标识符时，返回该标识符的正确的不带引号的形式。 这包括正确地非转义该标识符的所有嵌入的引号。</summary>
        <returns>未加引号的标识符，其嵌入的引号已正确进行非转义。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>