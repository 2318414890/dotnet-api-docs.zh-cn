<Type Name="SqlDependency" FullName="System.Data.SqlClient.SqlDependency">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c5d605853d60b72cc579a044b61b343ee64f40f4" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037597" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlDependency" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlDependency extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlDependency" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlDependency" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDependency sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象表示应用程序和 SQL Server 实例间的查询通知依赖关系。 应用程序可以创建一个 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象并进行注册以通过 <see cref="T:System.Data.SqlClient.OnChangeEventHandler" /> 事件处理程序接收通知。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDependency> 非常适合于缓存的方案，在 ASP.NET 应用程序或中间层服务需要将某些信息缓存在内存中。 <xref:System.Data.SqlClient.SqlDependency> 可以在数据库中的原始数据更改，以便可以刷新缓存时接收通知。  
  
 若要设置依赖项，你需要将关联<xref:System.Data.SqlClient.SqlDependency>到一个或多个对象<xref:System.Data.SqlClient.SqlCommand>对象。 若要接收通知，你需要订阅<xref:System.Data.SqlClient.SqlDependency.OnChange>事件。 有关创建查询通知的要求的详细信息，请参阅"创建查询的通知"SQL Server 联机丛书中。  
  
> [!NOTE]
>  <xref:System.Data.SqlClient.SqlDependency> 设计为在 ASP.NET 或中间层服务中使用较少的服务器上有依赖项针对数据库处于活动状态的情况。 它不是针对在客户端应用程序，将具有数百或数千个客户端计算机中使用<xref:System.Data.SqlClient.SqlDependency>为单个数据库服务器设置的对象。 如果你正在开发应用程序数据发生更改时需要可靠的次秒通知，查看部分**规划高效的查询通知策略**和**查询的替代方法通知**中[规划通知](http://go.microsoft.com/fwlink/?LinkId=211984)SQL Server 联机丛书中的主题。  
  
 有关详细信息，请参阅[SQL Server 中的查询通知](~/docs/framework/data/adonet/sql/query-notifications-in-sql-server.md)和 SQL Server 联机丛书中的"生成通知解决方案"。  
  
> [!NOTE]
>  <xref:System.Data.SqlClient.SqlDependency.OnChange>可能在不同线程从启动命令执行的线程生成事件。  
  
 仅对满足一系列特定需求的 SELECT 语句支持查询通知。 下表提供指向“SQL Server 联机丛书”中的 Service Broker 和“查询通知”文档的链接。  
  
 **SQL Server 联机丛书**  
  
-   [为通知创建查询](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Service Broker 的安全注意事项](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [安全和保护 (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [通知服务的安全注意事项](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [查询通知权限](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Service Broker 的国际化注意事项](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [解决方案设计注意事项 (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Service Broker 开发人员信息中心](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [开发人员指南 (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>用默认设置创建 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数初始化<xref:System.Data.SqlClient.SqlDependency>对象使用默认 Service Broker 服务名称和超时。在构造之后的某个位置，你必须使用<xref:System.Data.SqlClient.SqlDependency.AddCommandDependency%2A>方法将一个或多个命令与此关联起来<xref:System.Data.SqlClient.SqlDependency>对象。  
  
 仅对满足一系列特定需求的 SELECT 语句支持查询通知。 下表提供指向“SQL Server 联机丛书”中的 Service Broker 和“查询通知”文档的链接。  
  
 **SQL Server 联机丛书**  
  
-   [为通知创建查询](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Service Broker 的安全注意事项](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [安全和保护 (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [通知服务的安全注意事项](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [查询通知权限](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Service Broker 的国际化注意事项](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [解决方案设计注意事项 (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Service Broker 开发人员信息中心](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [开发人员指南 (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDependency (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.#ctor(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDependency(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">要与此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象关联的 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象。 该构造函数将设置 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象，并将其绑定到此命令。</param>
        <summary>创建 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的新实例，并将其与 <see cref="T:System.Data.SqlClient.SqlCommand" /> 参数关联。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数创建的实例的内部，<xref:System.Data.Sql.SqlNotificationRequest>类，并将其绑定到<xref:System.Data.SqlClient.SqlCommand>对象。  
  
 仅对满足一系列特定需求的 SELECT 语句支持查询通知。 下表提供指向“SQL Server 联机丛书”中的 Service Broker 和“查询通知”文档的链接。  
  
 **SQL Server 联机丛书**  
  
-   [为通知创建查询](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Service Broker 的安全注意事项](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [安全和保护 (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [通知服务的安全注意事项](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [查询通知权限](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Service Broker 的国际化注意事项](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [解决方案设计注意事项 (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Service Broker 开发人员信息中心](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [开发人员指南 (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> 参数为 NULL。</exception>
        <exception cref="T:System.InvalidOperationException">已将一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象赋值给了 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象的 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" /> 属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 未与此依赖项关联。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDependency (System.Data.SqlClient.SqlCommand command, string options, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlCommand command, string options, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.#ctor(System.Data.SqlClient.SqlCommand,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As SqlCommand, options As String, timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDependency(System::Data::SqlClient::SqlCommand ^ command, System::String ^ options, int timeout);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
        <Parameter Name="options" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">要与此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象关联的 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象。 该构造函数将设置 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象，并将其绑定到此命令。</param>
        <param name="options">此依赖项要使用的通知请求选项。  如果使用默认服务，则为 <c>null</c>。</param>
        <param name="timeout">此通知的超时时间（以秒为单位）。 默认值为 0，指示应当使用服务器的超时。</param>
        <summary>创建 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的一个新实例，将其与 <see cref="T:System.Data.SqlClient.SqlCommand" /> 参数关联，并指定通知选项和超时值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅对满足一系列特定需求的 SELECT 语句支持查询通知。 下表提供指向“SQL Server 联机丛书”中的 Service Broker 和“查询通知”文档的链接。  
  
 **SQL Server 联机丛书**  
  
-   [为通知创建查询](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Service Broker 的安全注意事项](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [安全和保护 (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [通知服务的安全注意事项](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [查询通知权限](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Service Broker 的国际化注意事项](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [解决方案设计注意事项 (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Service Broker 开发人员信息中心](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [开发人员指南 (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> 参数为 NULL。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">超时值小于零。</exception>
        <exception cref="T:System.InvalidOperationException">已将一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象赋值给了 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象的 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" /> 属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 未与此依赖项关联。  
  
 进行了从 SQLCLR 内创建一个 SqlDependency 实例的尝试。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCommandDependency">
      <MemberSignature Language="C#" Value="public void AddCommandDependency (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCommandDependency(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.AddCommandDependency(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommandDependency (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommandDependency(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象，包含一个对通知有效的语句。</param>
        <summary>将 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象与此 <see cref="T:System.Data.SqlClient.SqlDependency" /> 实例关联。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅对满足一系列特定需求的 SELECT 语句支持查询通知。 下表提供指向“SQL Server 联机丛书”中的 Service Broker 和“查询通知”文档的链接。  
  
 **SQL Server 联机丛书**  
  
-   [为通知创建查询](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Service Broker 的安全注意事项](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [安全和保护 (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [通知服务的安全注意事项](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [查询通知权限](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Service Broker 的国际化注意事项](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [解决方案设计注意事项 (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Service Broker 开发人员信息中心](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [开发人员指南 (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> 参数为 null。</exception>
        <exception cref="T:System.InvalidOperationException">已将一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象赋值给了 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象的 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" /> 属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 未与此依赖项关联。</exception>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanges" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDependency.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanges As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanges { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与依赖项关联的结果集之一是否已经更改。</summary>
        <value>一个布尔值，指示结果集之一是否已经更改。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你不使用<xref:System.Data.SqlClient.SqlDependency.OnChange>事件，你可以检查<xref:System.Data.SqlClient.SqlDependency.HasChanges%2A>属性来确定查询结果是否已更改。  
  
 <xref:System.Data.SqlClient.SqlDependency.HasChanges%2A>属性不一定意味着数据中的更改。 其他情况下，例如超时过期，失败要设置通知请求中，也会生成更改事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDependency.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值唯一标识 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的此实例。</summary>
        <value>GUID 的字符串表示，为 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的每个实例都生成。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDependency.Id%2A>属性用于唯一标识给定<xref:System.Data.SqlClient.SqlDependency>实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChange">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.OnChangeEventHandler OnChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.OnChangeEventHandler OnChange" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlDependency.OnChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OnChange As OnChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::OnChangeEventHandler ^ OnChange;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.OnChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当收到与此 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象关联的任意命令的通知时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDependency.OnChange> 当关联命令的结果更改时发生。 如果你不使用<xref:System.Data.SqlClient.SqlDependency.OnChange>，你可以检查<xref:System.Data.SqlClient.SqlDependency.HasChanges%2A>属性来确定查询结果是否已更改。  
  
 <xref:System.Data.SqlClient.SqlDependency.OnChange>事件不一定意味着数据中的更改。 其他情况下，超时到期时，以及失败要设置通知请求中，也会生成<xref:System.Data.SqlClient.SqlDependency.OnChange>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>启动用于接收依赖项更改通知的侦听器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDependency>在 SQL Server 连接中发生错误时，将重新启动侦听器。  
  
 多次调用<xref:System.Data.SqlClient.SqlDependency.Start%2A>方法可以进行，但应受到以下限制：  
  
-   使用相同的参数 （相同的连接字符串和 Windows 凭据，调用线程） 的多个调用都有效。  
  
-   使用不同的连接字符串的多个调用都有效，只要：  
  
    -   每个连接字符串指定不同的数据库，或  
  
    -   每个连接字符串指定不同的用户，或  
  
    -   在调用来自不同应用程序域。  
  
 你可以<xref:System.Data.SqlClient.SqlDependency>工作正常的应用程序使用多个线程来表示不同的用户凭据，而无需授予 dbo 角色到的组，因为不同的用户可以订阅和侦听 (使用<xref:System.Web.Caching.SqlCacheDependency>或<xref:System.Data.SqlClient.SqlCommand>)到由管理员创建的通知队列。 相关的应用程序域在启动时，请使用具有初始化 service/队列 （创建队列和创建服务数据库的权限） 的权限的用户 (Windows) 凭据调用开始。 确保仅调用 Start 后每 AppDomain 中，否则多义性引发异常。  用户线程必须有权订阅通知 （数据库订阅查询通知权限）。 <xref:System.Data.SqlClient.SqlDependency> 会将关联到由管理员创建的服务/队列的非管理员用户订阅请求。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static bool Start (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Start(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.Start(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (connectionString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Start(System::String ^ connectionString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">SQL Server 实例（从中获取更改通知）的连接字符串。</param>
        <summary>启动用于接收依赖项更改通知的侦听器，该通知来自由连接字符串指定的 SQL Server 实例。</summary>
        <returns>如果侦听器初始化成功，则为 true；如果已存在兼容的侦听器，则为 false。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法会启动的侦听器<xref:System.AppDomain>用于接收从指定的 SQL server 实例的依赖项通知`connectionString`参数。 调用此方法可能会多次使用不同的连接字符串为多个服务器。  
  
 有关其他的备注，请参阅<xref:System.Data.SqlClient.SqlDependency.Start%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> 参数为 NULL。</exception>
        <exception cref="T:System.InvalidOperationException">与上次调用此方法相比，<paramref name="connectionString" /> 参数相同，但其他参数不同。  
  
 此方法是从 CLR 内部调用的。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所必需的 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">随后调用了该方法，调用使用等效的 <paramref name="connectionString" /> 参数和不同的用户，或者不是同一架构的默认用户的用户。  
  
 还有所有基础 SqlClient 异常。</exception>
        <altmember cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static bool Start (string connectionString, string queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Start(string connectionString, string queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (connectionString As String, queue As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Start(System::String ^ connectionString, System::String ^ queue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="queue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">SQL Server 实例（从中获取更改通知）的连接字符串。</param>
        <param name="queue">要使用的现有 SQL Server Service Broker 队列。 如果为 <see langword="null" />，则使用默认队列。</param>
        <summary>启动用于接收依赖项更改通知的侦听器，该侦听器使用指定的 SQL Server Service Broker 队列从由连接字符串指定的 SQL Server 实例接收。</summary>
        <returns>如果侦听器初始化成功，则为 true；如果已存在兼容的侦听器，则为 false。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法会启动的侦听器<xref:System.AppDomain>用于接收从指定的 SQL server 实例的依赖项通知`connectionString`参数。 调用此方法可能会多次使用不同的连接字符串为多个服务器。  
  
 如果不指定任何队列名称，则<xref:System.Data.SqlClient.SqlDependency>在的服务器上用于整个过程中，创建一个临时队列和服务，即使过程涉及多个<xref:System.AppDomain>。 队列和服务会自动删除应用程序关闭时。  
  
 有关其他的备注，请参阅<xref:System.Data.SqlClient.SqlDependency.Start%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> 参数为 NULL。</exception>
        <exception cref="T:System.InvalidOperationException">与上次调用此方法相比，<paramref name="connectionString" /> 参数相同，但其他参数不同。  
  
 此方法是从 CLR 内部调用的。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所必需的 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">已经随后调用了该方法，调用使用等效的 <paramref name="connectionString" /> 参数和不同的用户，或者不是同一架构的默认用户的用户。  
  
 还有所有基础 SqlClient 异常。</exception>
        <altmember cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Stop">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>停止在上一次 <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> 调用中指定的连接的侦听器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDependency>在 SQL Server 连接中发生错误时，将重新启动侦听器。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public static bool Stop (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Stop(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.Stop(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Stop (connectionString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Stop(System::String ^ connectionString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">SQL Server 实例的连接字符串，在上一次 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String)" /> 调用中使用。</param>
        <summary>停止在上一次 <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> 调用中指定的连接的侦听器。</summary>
        <returns>如果侦听器完全停止，则为 true；如果 <see cref="T:System.AppDomain" /> 从侦听器解除绑定，但至少还有另一个 <see cref="T:System.AppDomain" /> 使用同一侦听器，则为 false。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDependency.Stop%2A>方法必须为每个调用<xref:System.Data.SqlClient.SqlDependency.Start%2A>调用。 给定的侦听器只能关闭完全当接收相同数量的<xref:System.Data.SqlClient.SqlDependency.Stop%2A>请求作为<xref:System.Data.SqlClient.SqlDependency.Start%2A>请求。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> 参数为 NULL。</exception>
        <exception cref="T:System.InvalidOperationException">此方法是从 SQLCLR 内部调用的。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所必需的 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">发生基础 SqlClient 异常。</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public static bool Stop (string connectionString, string queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Stop(string connectionString, string queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.Stop(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Stop (connectionString As String, queue As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Stop(System::String ^ connectionString, System::String ^ queue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="queue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">SQL Server 实例的连接字符串，在上一次 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" /> 调用中使用。</param>
        <param name="queue">在上一次 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" /> 调用中使用的 SQL Server Service Broker 队列。</param>
        <summary>停止在上一次 <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> 调用中指定的连接的侦听器。</summary>
        <returns>如果侦听器完全停止，则为 true；如果 <see cref="T:System.AppDomain" /> 从侦听器解除绑定，但至少还有另一个 <see cref="T:System.AppDomain" /> 使用同一侦听器，则为 false。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDependency.Stop%2A>方法必须为每个调用<xref:System.Data.SqlClient.SqlDependency.Start%2A>调用。 给定的侦听器只能关闭完全当接收相同数量的<xref:System.Data.SqlClient.SqlDependency.Stop%2A>请求作为<xref:System.Data.SqlClient.SqlDependency.Start%2A>请求。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> 参数为 NULL。</exception>
        <exception cref="T:System.InvalidOperationException">此方法是从 SQLCLR 内部调用的。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所必需的 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">发生基础 SqlClient 异常。</exception>
      </Docs>
    </Member>
  </Members>
</Type>