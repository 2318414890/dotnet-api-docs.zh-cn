<Type Name="IMemoryCacheManager" FullName="System.Runtime.Caching.Hosting.IMemoryCacheManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6f99638496338d9b269017fe2171b6dbbe3b1f43" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36542250" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IMemoryCacheManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemoryCacheManager" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.Hosting.IMemoryCacheManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemoryCacheManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMemoryCacheManager" />
  <TypeSignature Language="F#" Value="type IMemoryCacheManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义一个接口，缓存使用该接口向主机环境告知缓存内存使用量。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.Hosting.IMemoryCacheManager>接口实现由宿主环境，例如，ASP.NET，并且由<xref:System.Runtime.Caching.ObjectCache>必须与主机环境来确定内存使用情况进行交互的实现。 因为缓存通常占用的内存，数量非常巨大<xref:System.Runtime.Caching.Hosting.IMemoryCacheManager>接口可帮助管理内存使用情况的宿主环境。  
  
 通常情况下，仅<xref:System.Runtime.Caching.ObjectCache>管理在内存中的缓存对象的实现将使用此接口。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ReleaseCache">
      <MemberSignature Language="C#" Value="public void ReleaseCache (System.Runtime.Caching.MemoryCache cache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseCache(class System.Runtime.Caching.MemoryCache cache) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IMemoryCacheManager.ReleaseCache(System.Runtime.Caching.MemoryCache)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseCache (cache As MemoryCache)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseCache(System::Runtime::Caching::MemoryCache ^ cache);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseCache : System.Runtime.Caching.MemoryCache -&gt; unit" Usage="iMemoryCacheManager.ReleaseCache cache" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cache" Type="System.Runtime.Caching.MemoryCache" />
      </Parameters>
      <Docs>
        <param name="cache">对该缓存的引用。</param>
        <summary>从主机环境中移除对某个缓存的所有引用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果缓存以前已向主机环境本身注册，则缓存可以调用<xref:System.Runtime.Caching.Hosting.IMemoryCacheManager.ReleaseCache%2A>方法来释放该引用。 当释放缓存时，则应调用<xref:System.Runtime.Caching.Hosting.IMemoryCacheManager.ReleaseCache%2A>方法以确保，主机上保留的任何引用该缓存。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCacheSize">
      <MemberSignature Language="C#" Value="public void UpdateCacheSize (long size, System.Runtime.Caching.MemoryCache cache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateCacheSize(int64 size, class System.Runtime.Caching.MemoryCache cache) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IMemoryCacheManager.UpdateCacheSize(System.Int64,System.Runtime.Caching.MemoryCache)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateCacheSize (size As Long, cache As MemoryCache)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateCacheSize(long size, System::Runtime::Caching::MemoryCache ^ cache);" />
      <MemberSignature Language="F#" Value="abstract member UpdateCacheSize : int64 * System.Runtime.Caching.MemoryCache -&gt; unit" Usage="iMemoryCacheManager.UpdateCacheSize (size, cache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="cache" Type="System.Runtime.Caching.MemoryCache" />
      </Parameters>
      <Docs>
        <param name="size">缓存使用的内存大小（以字节为单位）。</param>
        <param name="cache">对该缓存的引用。</param>
        <summary>报告当前缓存的大小。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 良好的高速缓存实现应使用<xref:System.Runtime.Caching.Hosting.IMemoryCacheManager.UpdateCacheSize%2A>方法来定期向主机环境中报告的缓存的内存需求量的大小。  
  
 报告的大小的缓存实现作为参数传递到其自身的引用。 这使主机环境执行以下任务：  
  
-   保留的已知的对象缓存的列表。  
  
-   调用缓存和请求缓存 trim 基于报告的大小、 缓存项的百分比，如有必要。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>