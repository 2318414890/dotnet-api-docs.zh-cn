<Type Name="IFileChangeNotificationSystem" FullName="System.Runtime.Caching.Hosting.IFileChangeNotificationSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed4880356988efaf09008f32429e0c2fe5015f48" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30477561" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFileChangeNotificationSystem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFileChangeNotificationSystem" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFileChangeNotificationSystem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFileChangeNotificationSystem" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义向缓存实现公开自定义 <see cref="T:System.Runtime.Caching.FileChangeMonitor" /> 对象的方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 ASP.NET 中，<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>接口提供对内部的文件更改通知管理访问权限。  
  
 <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>内部使用接口<xref:System.Runtime.Caching.HostFileChangeMonitor>类。  
  
 当在 ASP.NET 应用程序域中运行的缓存实现时，ASP.NET 实现<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>接口通过<xref:System.Runtime.Caching.ObjectCache.Host%2A>属性。 <xref:System.Runtime.Caching.HostFileChangeMonitor>类检测此属性，并使用 ASP.NET 文件更改通知系统来收回基于文件更改通知的缓存条目。  
  
 在非 ASP.NET 应用程序，没有实现自定义任何主机环境<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>接口。 因此，<xref:System.Runtime.Caching.HostFileChangeMonitor>类使用<xref:System.IO.FileSystemWatcher>的 CLR 类。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="StartMonitoring">
      <MemberSignature Language="C#" Value="public void StartMonitoring (string filePath, System.Runtime.Caching.OnChangedCallback onChangedCallback, out object state, out DateTimeOffset lastWriteTime, out long fileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartMonitoring(string filePath, class System.Runtime.Caching.OnChangedCallback onChangedCallback, [out] object&amp; state, [out] valuetype System.DateTimeOffset&amp; lastWriteTime, [out] int64&amp; fileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartMonitoring(System::String ^ filePath, System::Runtime::Caching::OnChangedCallback ^ onChangedCallback, [Runtime::InteropServices::Out] System::Object ^ % state, [Runtime::InteropServices::Out] DateTimeOffset % lastWriteTime, [Runtime::InteropServices::Out] long % fileSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
        <Parameter Name="state" Type="System.Object&amp;" RefType="out" />
        <Parameter Name="lastWriteTime" Type="System.DateTimeOffset&amp;" RefType="out" />
        <Parameter Name="fileSize" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filePath">要监视更改的目录或文件的完全限定物理路径。</param>
        <param name="onChangedCallback">对实现 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 委托的方法的引用。 当监视的文件或目录发生更改时，<see cref="T:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem" /> 接口的主机环境实现通过调用 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 类引发一个事件。</param>
        <param name="state">主机环境提供的状态。 缓存实现和自定义更改监视应该将状态值视为不透明。 但是必须存储状态，以便在缓存实现调用 <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)" /> 方法时可以将状态发送给主机环境。</param>
        <param name="lastWriteTime">此方法返回时，包含上一次对 <c>filePath</c> 执行写入操作的日期和时间。 此参数未经初始化即被传递。 从主机环境返回此参数。</param>
        <param name="fileSize">此方法返回时，包含所监视的 <c>filePath</c> 的总大小。 此参数未经初始化即被传递。 从主机环境返回此参数。</param>
        <summary>向主机环境注册一个要监视的文件路径。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用由自定义缓存对象和自定义更改实现主机环境的监视器<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>接口，以便注册以使用主机环境进行监视的文件路径。 <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring%2A>方法调用的实施者<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>接口，以便注册的文件或用于更改监视的目录。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopMonitoring">
      <MemberSignature Language="C#" Value="public void StopMonitoring (string filePath, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopMonitoring(string filePath, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopMonitoring (filePath As String, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopMonitoring(System::String ^ filePath, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filePath">要停止监视的文件或文件夹的路径。 此路径应与之前在对 <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" /> 方法的调用中传递的文件路径值相匹配。</param>
        <param name="state">在之前调用 <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" /> 方法期间，最初由主机环境提供的状态信息。</param>
        <summary>结束更改监视。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring%2A>方法必须由自定义缓存调用和自定义更改正在停止监视文件路径和目录以释放由宿主环境的监视器。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>