<Type Name="IApplicationIdentifier" FullName="System.Runtime.Caching.Hosting.IApplicationIdentifier">
  <Metadata><Meta Name="ms.openlocfilehash" Value="299338ca7d8df7e6c8a7cf44af128f4bdf30533e" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36542162" /></Metadata><TypeSignature Language="C#" Value="public interface IApplicationIdentifier" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IApplicationIdentifier" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.Hosting.IApplicationIdentifier" />
  <TypeSignature Language="VB.NET" Value="Public Interface IApplicationIdentifier" />
  <TypeSignature Language="C++ CLI" Value="public interface class IApplicationIdentifier" />
  <TypeSignature Language="F#" Value="type IApplicationIdentifier = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义应用程序域的标识符，缓存实现可使用这些应用程序域与主机环境进行交互。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]ASP.NET 等主机环境可以使用<xref:System.Runtime.Caching.Hosting.IApplicationIdentifier>接口可定义确定各个应用程序域的字符串。 主机环境实现<xref:System.Runtime.Caching.Hosting.IApplicationIdentifier>接口。 此接口然后是供<xref:System.Runtime.Caching.ObjectCache>实现通过<xref:System.Runtime.Caching.ObjectCache.Host%2A>属性。  
  
 缓存实现使用此引用来获取应用程序域的标识符。 在 ASP.NET 中，缓存实现使用的应用程序标识符来构造缓存性能计数器的标识符。 这提供名称性能计数器可以区分应用程序域时多个应用程序域正在运行的实例。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetApplicationId">
      <MemberSignature Language="C#" Value="public string GetApplicationId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetApplicationId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IApplicationIdentifier.GetApplicationId" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApplicationId () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetApplicationId();" />
      <MemberSignature Language="F#" Value="abstract member GetApplicationId : unit -&gt; string" Usage="iApplicationIdentifier.GetApplicationId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取某个应用程序域的标识符。</summary>
        <returns>当前应用程序域的唯一标识符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.Hosting.IApplicationIdentifier.GetApplicationId%2A>方法通常由实现[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]才能构建的应用程序标识符的主机环境<xref:System.Runtime.Caching.ObjectCache>实现。 一个<xref:System.Runtime.Caching.ObjectCache>实现使用此信息来标识当前正在运行的应用程序域。  
  
 例如，在 ASP.NET 中，缓存使用的应用程序标识符来构造缓存性能计数器的标识符。 缓存调用<xref:System.Runtime.Caching.Hosting.IApplicationIdentifier.GetApplicationId%2A>由主机环境和主机实现的方法返回的标识符。 这提供名称性能计数器可以区分应用程序域时多个应用程序域正在运行的实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>