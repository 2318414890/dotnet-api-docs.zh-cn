<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7f673552db74d3ed1ff4f6fe8dcc10612167e5c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36542091" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="c4514-101">为用于监视缓存项所依赖数据的状态更改的派生自定义类型提供基类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c4514-101">Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-102"><xref:System.Runtime.Caching.ChangeMonitor>类用作专用于特定的缓存实现的派生的监视器类的基类。</span><span class="sxs-lookup"><span data-stu-id="c4514-102">The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</span></span> <span data-ttu-id="c4514-103">A<xref:System.Runtime.Caching.ChangeMonitor>实例监视数据，具体取决于缓存项的状态中的更改。</span><span class="sxs-lookup"><span data-stu-id="c4514-103">A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on.</span></span> <span data-ttu-id="c4514-104">例如，可以将项其内容进行缓存的文件或数据实体。</span><span class="sxs-lookup"><span data-stu-id="c4514-104">For example, the item can be a file or data entity whose contents are cached.</span></span> <span data-ttu-id="c4514-105">如果更新文件或数据实体，则必须还更改关联的缓存项。</span><span class="sxs-lookup"><span data-stu-id="c4514-105">If the file or data entity is updated, the associated cache entry must be changed also.</span></span> <span data-ttu-id="c4514-106">可以监视的通用项包括数据实体 （如数据库字段、 值、 行或表）、 另一个缓存项时，和文件和文件属性。</span><span class="sxs-lookup"><span data-stu-id="c4514-106">Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</span></span>  
  
 <span data-ttu-id="c4514-107">依赖项更改是中的依赖项的状态的更改。</span><span class="sxs-lookup"><span data-stu-id="c4514-107">A dependency change is a change in the state of a dependency.</span></span> <span data-ttu-id="c4514-108">在典型的缓存实现中之后,<xref:System.Runtime.Caching.ChangeMonitor>实例通知缓存依赖项已更改，缓存执行所需的操作，如正在使插入的缓存条目无效。</span><span class="sxs-lookup"><span data-stu-id="c4514-108">In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</span></span>  
  
 <span data-ttu-id="c4514-109">派生<xref:System.Runtime.Caching.ChangeMonitor>可以自定义类，以监视特定的不同数据存储区的依赖项更改。</span><span class="sxs-lookup"><span data-stu-id="c4514-109">Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores.</span></span> <span data-ttu-id="c4514-110">例如，有的文件系统、 物理内存或数据库的缓存实现。</span><span class="sxs-lookup"><span data-stu-id="c4514-110">For example, there are cache implementations for a file system, physical memory, or a database.</span></span> <span data-ttu-id="c4514-111"><xref:System.Runtime.Caching.ChangeMonitor>类检查缓存中，外部发生的更改，然后警报缓存中已发生更改。</span><span class="sxs-lookup"><span data-stu-id="c4514-111">The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</span></span>  
  
 <span data-ttu-id="c4514-112">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]包括派生自的以下类<xref:System.Runtime.Caching.ChangeMonitor>类：</span><span class="sxs-lookup"><span data-stu-id="c4514-112">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:</span></span>  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 <span data-ttu-id="c4514-113">其中每个类可用于不同类型的依赖关系。</span><span class="sxs-lookup"><span data-stu-id="c4514-113">Each of these classes works with different types of dependencies.</span></span> <span data-ttu-id="c4514-114">例如，派生<xref:System.Runtime.Caching.FileChangeMonitor>类监视对文件系统数据 （文件和文件夹） 的缓存的缓存项所依赖的更改。</span><span class="sxs-lookup"><span data-stu-id="c4514-114">For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c4514-115">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c4514-115">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <span data-ttu-id="c4514-116">
        <para>如果创建自定义的缓存实现或派生的更改监视器类型，必须遵循特定的准则。以下列表总结了这些准则。有关详细信息，请参阅各个方法或属性的文档。 的派生类构造函数必须设置<see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />属性，开始监视，并调用<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />在方法返回之前的方法。如果一个构造函数在构造过程中遇到错误，并且必须以释放资源，构造函数只能调用<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />重载后<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />调用方法，因为<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />重载将引发<see cref="T:System.InvalidOperationException" />如果初始化未完成的异常。 -如果中发生更改之前初始化是正在监视的数据完成，则构造函数必须调用<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法之前调用<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />方法。 频率派生<see cref="T:System.Runtime.Caching.ChangeMonitor" />实例化类型时，你必须插入自定义监视器<see cref="T:System.Runtime.Caching.ObjectCache" />实现。如果要使用更改监视器完毕后，调用或<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />方法。 -之后<see cref="T:System.Runtime.Caching.ChangeMonitor" />实例插入到<see cref="T:System.Runtime.Caching.ObjectCache" />实现，<see cref="T:System.Runtime.Caching.ObjectCache" />实例需要更改监视器已释放。即使插入无效并导致异常，<see cref="T:System.Runtime.Caching.ObjectCache" />实现必须调用<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />重载。 后派生的更改监视器插入到缓存中，<see cref="T:System.Runtime.Caching.ObjectCache" />实现必须调用<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />，通过传递<see cref="T:System.Runtime.Caching.OnChangedCallback" />对象。<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />可以调用仅一次的方法。如果已发生了依赖项更改，<see cref="T:System.Runtime.Caching.OnChangedCallback" />实例将立即调用时<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />调用。否则为<see cref="T:System.Runtime.Caching.OnChangedCallback" />实例将会调用一次。这一次调用将发生种情况时<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />调用方法，因为<see cref="T:System.Runtime.Caching.ChangeMonitor" />实例检测到更改，或当<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法调用<see cref="T:System.Runtime.Caching.ChangeMonitor" />，以先发生者为准。 -<see cref="T:System.Runtime.Caching.OnChangedCallback" />由提供的实例<see cref="T:System.Runtime.Caching.ObjectCache" />实现应删除此关联的缓存项，通过使用指定的原因<see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" />枚举。 -A<see cref="T:System.Runtime.Caching.ChangeMonitor" />实例可以调用<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法之前已调用的缓存实现<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />方法还是之后。如果<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法之前调用<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />名为 base<see cref="T:System.Runtime.Caching.ChangeMonitor" />实现将通知发生这种情况的缓存，将触发要传递给回调<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />时立即<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />调用。传递给任何状态数据<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法保存的更改监视器并随后传递到<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />方法时<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />调用方法。 -A 更改监视器必须实现<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />方法。有关详细信息，请参阅<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />方法文档。 -<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />必须调用方法重载，若要释放<see cref="T:System.Runtime.Caching.ChangeMonitor" />实例。调用 Dispose 的规则如下所示:-某个项插入缓存之前，它是调用方，若要释放的责任<see cref="T:System.Runtime.Caching.ChangeMonitor" />实例。 -一次缓存项和<see cref="T:System.Runtime.Caching.ChangeMonitor" />与其关联的实例传递到缓存中，缓存实施者必须确保，<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />调用方法时，即使插入操作失败。 -在将项及其关联<see cref="T:System.Runtime.Caching.ChangeMonitor" />实例传递到缓存中，调用方必须不会释放依赖项，因为当<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />方法调用，因此调用将被视为依赖项已更改。因此，<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />自动调用方法。 -考虑到，这些规则<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />必须按以下方式之一调用方法:-用户必须调用<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法重载，如果他们决定不向缓存中插入派生的更改监视器实例。 -如果实现尝试插入对象缓存的更改监视器实例，但插入操作将失败，缓存实现负责调用<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />重载。在插入尝试会导致异常，必须释放任何关联的依赖关系类型的缓存实现。 -如果删除缓存项，则缓存实现还必须释放依赖项的类型。 -的内部实现<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法将自动调用<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />方法在调用回调，之后注册通过<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />。<block subset="none" type="note"><para> 自动对在事件激发期间的 dispose 方法调用时才会出现的初始化<see cref="T:System.Runtime.Caching.ChangeMonitor" />以前完成实例。</para></block>  当派生的更改监视器的构造函数调用<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />方法时，如果更改监视器的状态已更改 （构造函数时仍处于活动状态监视已更改状态） 则<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />方法将自动释放此更改监视器的类型。 -<see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />属性设置为<see langword="true" />后<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法由派生的更改监视器实例，而不管是否调用<see cref="T:System.Runtime.Caching.OnChangedCallback" />已通过调用设置对象<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />方法或不。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="c4514-116">
          <para>If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines. The following list summarizes these guidelines. For more information, see the documentation for individual methods or properties.  -   The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns. If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.  -   If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.  -   After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation. Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.  -   After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed. Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.  -   After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object. The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time. This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.  -   The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.  -   A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after. If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked. Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.  -   A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method. For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.  -   The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance. The rules for calling Dispose are as follows:  -   Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.  -   Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.  -   After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed. As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.  -   Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:  -   Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.  -   If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload. When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.  -   If the cache entry is removed, the cache implementation must also dispose of the dependency.  -   The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.  <block subset="none" type="note"><para> This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.  </para></block>  When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.  -   The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</para>
        </span>
      </span>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4514-117">初始化 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-117">Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
          <span data-ttu-id="c4514-118">从派生类中的构造函数调用此构造函数以初始化基类。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-118">This constructor is called from constructors in derived classes to initialize the base class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-119"><xref:System.Runtime.Caching.ChangeMonitor>类具有一个默认构造函数。</span><span class="sxs-lookup"><span data-stu-id="c4514-119">The <xref:System.Runtime.Caching.ChangeMonitor> class has a default constructor.</span></span> <span data-ttu-id="c4514-120">但是，类继承自基类<xref:System.Runtime.Caching.ChangeMonitor>类并定义自定义的更改监视行为必须在构造函数中执行初始化。</span><span class="sxs-lookup"><span data-stu-id="c4514-120">However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor.</span></span> <span data-ttu-id="c4514-121">有关详细信息，请参阅继承者部分的说明。</span><span class="sxs-lookup"><span data-stu-id="c4514-121">For more information, see the Notes for Inheritors section.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4514-122">
            <para>派生类的构造函数必须设置<see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />属性，开始监视，并调用<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />类之前它将返回。如果在初始化之前的依赖项发生更改已完成 （例如，如果在缓存中找不到依赖的缓存密钥时），则构造函数必须调用<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法之前调用<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />方法。在这种情况下，构造函数可以调用<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法之后才<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />调用方法，因为<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法引发异常，如果未完成初始化。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-122">
              <para>The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns. If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method. In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c4514-123">释放 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类的当前实例所使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-123">Releases all resources used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-124"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法用于释放<xref:System.Runtime.Caching.ChangeMonitor>实例和相关的资源。</span><span class="sxs-lookup"><span data-stu-id="c4514-124">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources.</span></span> <span data-ttu-id="c4514-125">公共<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>，协调处置流程与密钥生命周期事件的派生的更改监视器类 （如初始化），并释放调用方法<xref:System.Runtime.Caching.ChangeMonitor>实例，使该实例可以作为垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="c4514-125">The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life-cycle events of derived change-monitor classes (such as initialization), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected.</span></span> <span data-ttu-id="c4514-126"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法由实现派生的更改监视器类，若要释放其托管和非托管资源。</span><span class="sxs-lookup"><span data-stu-id="c4514-126">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change-monitor classes to dispose of their managed and unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4514-127">释放由 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类的当前实例占用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-127">Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-128"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>派生的类仅一次，第一次调用时的方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-128">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called.</span></span> <span data-ttu-id="c4514-129">后续调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="c4514-129">Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect.</span></span> <span data-ttu-id="c4514-130">调用该方法后，<xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="c4514-130">After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="c4514-131"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>必须调用重载，若要释放<xref:System.Runtime.Caching.ChangeMonitor>实例。</span><span class="sxs-lookup"><span data-stu-id="c4514-131">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="c4514-132">规则调用的 dispose 方法如下：</span><span class="sxs-lookup"><span data-stu-id="c4514-132">The following are the rules for calling the dispose method:</span></span>  
  
-   <span data-ttu-id="c4514-133">某个项插入缓存之前，它是调用方负责释放<xref:System.Runtime.Caching.ChangeMonitor>实例。</span><span class="sxs-lookup"><span data-stu-id="c4514-133">Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
-   <span data-ttu-id="c4514-134">一次缓存项和<xref:System.Runtime.Caching.ChangeMonitor>与其关联的实例传递到缓存中，必须确保缓存实施者<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>调用，即使插入操作失败。</span><span class="sxs-lookup"><span data-stu-id="c4514-134">Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.</span></span>  
  
-   <span data-ttu-id="c4514-135">在将项及其关联<xref:System.Runtime.Caching.ChangeMonitor>实例传递到缓存中，调用方必须不会释放依赖项，因为当<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法调用，因此调用将被视为依赖项已更改。</span><span class="sxs-lookup"><span data-stu-id="c4514-135">After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="c4514-136">因此，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>自动调用方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-136">As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="c4514-137">考虑到，这些规则<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>必须按以下方式之一调用方法：</span><span class="sxs-lookup"><span data-stu-id="c4514-137">Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="c4514-138">用户必须调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法重载，如果他们决定不向缓存中插入派生的更改监视器实例。</span><span class="sxs-lookup"><span data-stu-id="c4514-138">Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="c4514-139">缓存实现负责调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>重载如果实现尝试插入对象缓存的更改监视器实例，但插入操作将失败。</span><span class="sxs-lookup"><span data-stu-id="c4514-139">The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</span></span> <span data-ttu-id="c4514-140">当插入尝试导致异常时，则缓存实现必须释放任何关联的依赖关系。</span><span class="sxs-lookup"><span data-stu-id="c4514-140">When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="c4514-141">如果删除缓存项，则缓存实现还必须释放依赖项。</span><span class="sxs-lookup"><span data-stu-id="c4514-141">If the cache entry is removed, the cache implementation must also dispose the dependency.</span></span>  
  
 <span data-ttu-id="c4514-142">内部实现<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法将自动调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法在调用回调，之后注册通过<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-142">The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c4514-143">在事件激发期间此自动释放时，才出现的初始化<xref:System.Runtime.Caching.ChangeMonitor>以前完成的实例。</span><span class="sxs-lookup"><span data-stu-id="c4514-143">This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.</span></span>  
  
 <span data-ttu-id="c4514-144">当派生的更改监视器的构造函数调用<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>方法时，如果更改监视器的状态已更改 （即，将监视的状态已更改构造函数时仍处于活动状态） 然后<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>方法将自动释放更改监视器。</span><span class="sxs-lookup"><span data-stu-id="c4514-144">When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c4514-145">用户不应调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-145">Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="c4514-146">但是，不能防止用户调用方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-146">However, you cannot prevent users from calling the method.</span></span> <span data-ttu-id="c4514-147">因此，如果他们这样做，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-147">Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked.</span></span> <span data-ttu-id="c4514-148">在这种情况下，就像依赖项已更改，都会收到通知的缓存项。</span><span class="sxs-lookup"><span data-stu-id="c4514-148">In that case, the cache entry is notified as if the dependency has changed.</span></span>  
  
 <span data-ttu-id="c4514-149">若要防止派生的类重写<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法，该方法不是显式接口实现。</span><span class="sxs-lookup"><span data-stu-id="c4514-149">To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4514-150">在调用 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 基方法的派生更改监视器类中，初始化未完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-150">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span>
          </span>
        </exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="c4514-151">若要释放托管资源和非托管资源，以及对 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例的任何引用，则为 <see langword="true" />；若要仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-151">
              <see langword="true" /> to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
          <span data-ttu-id="c4514-152">传递 <see langword="false" /> 时，<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 方法由 <see langword="finalizer" /> 线程调用，所有外部托管引用由于已经作为垃圾回收，因此可能不再有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-152">When <see langword="false" /> is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a <see langword="finalizer" /> thread and any external managed references are likely no longer valid because they have already been garbage collected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c4514-153">释放所有托管资源和非托管资源，以及对 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例的任何引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-153">Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span>
          </span>
          <span data-ttu-id="c4514-154">此重载必须由派生的更改监视器类实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-154">This overload must be implemented by derived change-monitor classes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-155">时的值`disposing`值是`true`，释放所有的托管和非托管资源，并且对此对象的任何引用都释放，以便派生的更改监视器实例可以被垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="c4514-155">When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</span></span> <span data-ttu-id="c4514-156">这样就保证基<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法将调用实现<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法仅一次。</span><span class="sxs-lookup"><span data-stu-id="c4514-156">It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4514-157">
            <para>更改监视器必须实现<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />重载以释放所有托管和非托管资源时的值<paramref name="disposing" />是<see langword="true" />。<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />具有方法重载<paramref name="disposing" />值<see langword="true" />只调用一次，即，当第一次释放实例时。更改监视器不能调用<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />直接重载。派生的更改监视器可以调用公共参数的<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法对基础<see cref="T:System.Runtime.Caching.ChangeMonitor" />类。或者，更改监视器可以实现终结器方法。在这种情况下，可以调用终结器<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />方法并将其传递<paramref name="disposing" />值<see langword="false" />。但是，这是通常不必要的。通常，由保留的更改监视器实例的引用的服务执行对依赖项更改的监视。引用避免被垃圾回收，该实例，因此不必要的终结器方法。若要在一个依赖项更改时, 避免内存泄露，<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法释放更改监视器实例 （除非初始化尚未完成）。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-157">
              <para>A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />. The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time. A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly. A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.  Alternatively, a change monitor can implement a finalizer method. In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />. However, this is usually unnecessary. Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance. The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary. To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c4514-158">获取一个值，该值指示由 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类监视的状态已发生更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-158">Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c4514-159">如果由 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 实例监视的状态已发生更改，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-159">
              <see langword="true" /> if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-160">你可以检查在派生的此属性的值<xref:System.Runtime.Caching.ChangeMonitor>类，以查看是否已更改依赖项。</span><span class="sxs-lookup"><span data-stu-id="c4514-160">You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.</span></span>  
  
 <span data-ttu-id="c4514-161">值设置为`true`依赖项更改发生时 (即，当<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>调用方法)。</span><span class="sxs-lookup"><span data-stu-id="c4514-161">The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called).</span></span> <span data-ttu-id="c4514-162">后<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法由派生类的值调用<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>属性将为`true`，无论<xref:System.Runtime.Caching.OnChangedCallback>已通过调用通知实例<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-162">After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c4514-163">调用方可以检查<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>属性以查看是否已更改依赖项。</span><span class="sxs-lookup"><span data-stu-id="c4514-163">Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed.</span></span> <span data-ttu-id="c4514-164">但是，在多线程环境中，更简单且更易于维护的方法是将数据插入的缓存实现，而不会检查<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c4514-164">However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property.</span></span> <span data-ttu-id="c4514-165">缓存实现必须检查<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>为你的属性和必须不执行 insert 或设置操作，如果一个或多个关联的依赖关系已更改。</span><span class="sxs-lookup"><span data-stu-id="c4514-165">Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c4514-166">从派生类的构造函数进行调用以指示初始化已完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-166">Called from the constructor of derived classes to indicate that initialization is finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-167">如果一个依赖项更改之前初始化已完成在派生类，派生类的构造函数必须调用<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-167">If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span>  
  
 <span data-ttu-id="c4514-168">当<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>调用方法时，<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>属性自动设置为`true`更改监视器。</span><span class="sxs-lookup"><span data-stu-id="c4514-168">When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor.</span></span> <span data-ttu-id="c4514-169">因此，当更改监视器的构造函数调用<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>方法时，将自动调用基类<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-169">As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="c4514-170">如果初始化已完成，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法自动释放派生的更改监视器实例。</span><span class="sxs-lookup"><span data-stu-id="c4514-170">If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4514-171">
            <para>派生类的构造函数必须调用基<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />构造函数将返回之前的方法。派生类的构造函数可以调用<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法之后才<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />调用，因为<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法引发异常，如果未完成初始化。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-171">
              <para>The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns. The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c4514-172">获取一个值，该值指示释放 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类的派生实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-172">Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c4514-173">如果释放该实例，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-173">
              <see langword="true" /> if the instance is disposed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-174">属性设置为`true`后基<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>派生的类，若要释放的实例中的方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-174">The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">
          <span data-ttu-id="c4514-175">对在某个依赖项更改时要调用的方法的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-175">A reference to a method that is invoked when a dependency has changed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c4514-176">由缓存实施者调用来注册回调，并在某个依赖项已更改时通过 <see cref="T:System.Runtime.Caching.ObjectCache" /> 委托通知 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-176">Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-177">缓存实施者使用此方法连接到的更改监视器。</span><span class="sxs-lookup"><span data-stu-id="c4514-177">Cache implementers use this method to wire themselves up to a change monitor.</span></span> <span data-ttu-id="c4514-178">如果你将一个或多个更改与缓存项的监视器，则传递<xref:System.Runtime.Caching.CacheItemPolicy>具有的针对缓存项的填充的更改监视器属性实例。</span><span class="sxs-lookup"><span data-stu-id="c4514-178">If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item.</span></span> <span data-ttu-id="c4514-179">支持更改监视器缓存实施者负责遍历<xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>属性和寄存器<xref:System.Runtime.Caching.OnChangedCallback>委托与每个更改它找到的监视器。</span><span class="sxs-lookup"><span data-stu-id="c4514-179">A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.</span></span>  
  
 <span data-ttu-id="c4514-180">因为<xref:System.Runtime.Caching.OnChangedCallback>委托包括可选状态参数，则具体更改监视器实现可以传递可选状态信息。</span><span class="sxs-lookup"><span data-stu-id="c4514-180">Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</span></span> <span data-ttu-id="c4514-181">缓存实施者确定是否可将显式依赖类型的回调的一部分传递的自定义更改监视器的状态。</span><span class="sxs-lookup"><span data-stu-id="c4514-181">The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c4514-182">基缓存可扩展性 API 将显式依赖项，不要求对类型的状态。</span><span class="sxs-lookup"><span data-stu-id="c4514-182">The base cache extensibility API has no requirement for explicit dependency on the type of state.</span></span>  
  
 <span data-ttu-id="c4514-183">实现<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法自动确定监视器的状态是否已更改时<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-183">The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called.</span></span> <span data-ttu-id="c4514-184">如果<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>属性是`true`，则该方法会自动调用<xref:System.Runtime.Caching.OnChangedCallback>事件处理程序中，已注册，通过<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-184">If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span> <span data-ttu-id="c4514-185">发生这种情况是因为它是可能，从缓存实现创建的更改监视器，缓存实现获取监视器和最多，线本身的时间的时间的基础的监视的状态已更改。</span><span class="sxs-lookup"><span data-stu-id="c4514-185">This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</span></span> <span data-ttu-id="c4514-186">如果状态已更改的对象传递给<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法是`null`。</span><span class="sxs-lookup"><span data-stu-id="c4514-186">If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.</span></span>  
  
 <span data-ttu-id="c4514-187"><xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法可以调用仅一次，并将在后续调用中引发异常。</span><span class="sxs-lookup"><span data-stu-id="c4514-187">The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4514-188">已调用回调方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-188">The callback method has already been invoked.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4514-189">
            <paramref name="onChangedCallback" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-189">
              <paramref name="onChangedCallback" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4514-190">
            <para>1.必须调用<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />方法的任何依赖项更改的通知。如果已发生了依赖项更改，<see cref="T:System.Runtime.Caching.OnChangedCallback" />实例时将会调用<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />调用。否则为<see cref="T:System.Runtime.Caching.OnChangedCallback" />实例将会调用一次时<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />调用方法时，或者当<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />调用方法，以先发生者为准。<see cref="T:System.Runtime.Caching.OnChangedCallback" />提供缓存实现实例应删除缓存项，如果请求的缓存调用方，则引发必要的更改或更新事件，回退到原始缓存调用方。2.对象缓存实现必须删除与依赖关系更改相关联的缓存项。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-190">
              <para>1.  You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first. The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.  2.  The object cache implementation must remove the cache entry that is associated with a dependency change.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="c4514-191">更改事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-191">The data for the change event.</span>
          </span>
          <span data-ttu-id="c4514-192">此值可为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-192">This value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c4514-193">由派生类调用以在某个依赖项发生更改时引发事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-193">Called by derived classes to raise the event when a dependency changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-194">通常情况下，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>发生依赖项更改时调用方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-194">Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur.</span></span> <span data-ttu-id="c4514-195"><xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>释放更改监视器实例，但仅当尚未调用回调时，才会发生释放时也会调用方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-195">The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</span></span>  
  
 <span data-ttu-id="c4514-196">如果<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法之前调用<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>调用方法时，调用的状态数据<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法保存的缓存实现。</span><span class="sxs-lookup"><span data-stu-id="c4514-196">If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation.</span></span> <span data-ttu-id="c4514-197">此外，到回调<xref:System.Runtime.Caching.OnChangedCallback>立即调用方法时<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="c4514-197">Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c4514-198">获取一个表示 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 类实例的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-198">Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c4514-199">某个更改监视器实例的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-199">The identifier for a change-monitor instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4514-200"><xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>属性值通常包括依赖关系名称组合字符串数据的唯一标识符的数据的所监视的<xref:System.Runtime.Caching.ChangeMonitor>实例。</span><span class="sxs-lookup"><span data-stu-id="c4514-200">The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="c4514-201">值<xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>属性是一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c4514-201">The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string.</span></span> <span data-ttu-id="c4514-202">字符串的值用于分配的唯一 ID<xref:System.Runtime.Caching.ChangeMonitor>实例。</span><span class="sxs-lookup"><span data-stu-id="c4514-202">The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4514-203">
            <para>通过重写属性，可以定义的属性的字符串值的自定义实现，以便将其分配唯一 id。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-203">
              <para>By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="overrides">
          <span data-ttu-id="c4514-204">
            <para>在派生类中，必须在构造函数中设置属性的值。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c4514-204">
              <para>In derived classes, you must set the value of the property in the constructor.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>