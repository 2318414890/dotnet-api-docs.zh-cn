<Type Name="CacheItemPolicy" FullName="System.Runtime.Caching.CacheItemPolicy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="955e9936c6e63b26c6fad1f00cd13990e8685e63" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CacheItemPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CacheItemPolicy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.CacheItemPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheItemPolicy" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheItemPolicy" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="dc6e1-101">表示指定缓存项的一组逐出和过期详细信息。</span>
      <span class="sxs-lookup">
        <span data-stu-id="dc6e1-101">Represents a set of eviction and expiration details for a specific cache entry.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc6e1-102">A<xref:System.Runtime.Caching.CacheItemPolicy>实例包含可能与某个缓存项的信息。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-102">A <xref:System.Runtime.Caching.CacheItemPolicy> instance contains information that can be associated with a cache entry.</span></span> <span data-ttu-id="dc6e1-103">例如，当某个缓存项时将从缓存中移除<xref:System.Runtime.Caching.CacheEntryUpdateArguments>对象传递到回调方法。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-103">For example, when a cache entry is about to be removed from the cache, a <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object is passed to a callback method.</span></span> <span data-ttu-id="dc6e1-104"><xref:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItemPolicy%2A>属性<xref:System.Runtime.Caching.CacheEntryUpdateArguments>对象可以传递对引用<xref:System.Runtime.Caching.CacheItemPolicy>可以包括逐出和过期的缓存项有关的详细信息的实例。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-104">The <xref:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItemPolicy%2A> property of the <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object can pass a reference to a <xref:System.Runtime.Caching.CacheItemPolicy> instance that can include eviction and expiration details about the cache entry.</span></span>  
  
 <span data-ttu-id="dc6e1-105">中的某些方法<xref:System.Runtime.Caching.MemoryCache>和<xref:System.Runtime.Caching.ObjectCache>类接受<xref:System.Runtime.Caching.CacheItemPolicy>实例来描述逐出或过期策略。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-105">Some methods in the <xref:System.Runtime.Caching.MemoryCache> and <xref:System.Runtime.Caching.ObjectCache> classes accept a <xref:System.Runtime.Caching.CacheItemPolicy> instance to describe eviction or expiration policy.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc6e1-106">下面的示例演示如何创建用于监视文本文件的路径的内存中缓存项目。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-106">The following example shows how to create an in-memory cache item that monitors the path for a text file.</span></span> <span data-ttu-id="dc6e1-107">缓存创建<xref:System.Runtime.Caching.CacheItemPolicy>对象并设置<xref:System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration%2A>属性在 60 秒后收回缓存。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-107">The cache creates a <xref:System.Runtime.Caching.CacheItemPolicy> object and sets the <xref:System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration%2A> property to evict the cache after 60 seconds.</span></span>  
  
```vb  
Protected Sub Button1_Click(ByVal sender As Object, _  
            ByVal e As System.EventArgs) Handles Button1.Click  
    Dim cache As ObjectCache = MemoryCache.Default  
    Dim fileContents As String = TryCast(cache("filecontents"), _  
            String)  
    If fileContents Is Nothing Then  
        Dim policy As New CacheItemPolicy()  
        policy.AbsoluteExpiration = _  
            DateTimeOffset.Now.AddSeconds(60.0)  
        Dim filePaths As New List(Of String)()  
     Dim cachedFilePath As String = Server.MapPath("~") & _  
         "\cacheText.txt"  
        filePaths.Add(cachedFilePath)  
        policy.ChangeMonitors.Add(New _  
            HostFileChangeMonitor(filePaths))  
  
        ' Fetch the file contents.  
        fileContents = File.ReadAllText(cachedFilePath)  
        cache.Set("filecontents", fileContents, policy)  
    End If  
    Label1.Text = fileContents  
End Sub  
```  
  
```csharp  
protected void Button1_Click(object sender, EventArgs e)  
    {  
        ObjectCache cache = MemoryCache.Default;  
            string fileContents = cache["filecontents"] as string;  
            if (fileContents == null)  
            {  
                CacheItemPolicy policy = new CacheItemPolicy();  
                policy.AbsoluteExpiration =   
                    DateTimeOffset.Now.AddSeconds(60.0);  
  
                List<string> filePaths = new List<string>();  
             string cachedFilePath = Server.MapPath("~") +   
                 "\\cacheText.txt";  
             filePaths.Add(cachedFilePath);  
  
                policy.ChangeMonitors.Add(new   
                    HostFileChangeMonitor(filePaths));  
  
                // Fetch the file contents.  
                fileContents = File.ReadAllText(cachedFilePath);  
  
                cache.Set("filecontents", fileContents, policy);  
  
            }  
  
            Label1.Text = fileContents;  
        }  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="dc6e1-108">
          <see cref="T:System.Runtime.Caching.CacheItemPolicy" />类型是未密封的以便自定义缓存开发人员可以扩展它。</span>
        <span class="sxs-lookup">
          <span data-stu-id="dc6e1-108">The <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> type is unsealed so that custom cache developers can extend it.</span>
        </span>
      </para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheItemPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.CacheItemPolicy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheItemPolicy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dc6e1-109">初始化 <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-109">Initializes a new instance of the <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AbsoluteExpiration">
      <MemberSignature Language="C#" Value="public DateTimeOffset AbsoluteExpiration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset AbsoluteExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Property AbsoluteExpiration As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeOffset AbsoluteExpiration { DateTimeOffset get(); void set(DateTimeOffset value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dc6e1-110">获取或设置一个值，该值指示是否应在指定的持续时间之后逐出缓存项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-110">Gets or sets a value that indicates whether a cache entry should be evicted after a specified duration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dc6e1-111">在逐出某个缓存项之前必须经过的时间段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-111">The period of time that must pass before a cache entry is evicted.</span>
          </span>
          <span data-ttu-id="dc6e1-112">默认值为 <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" />，这意味着该项未过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-112">The default value is <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" />, meaning that the entry does not expire.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeMonitors">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Runtime.Caching.ChangeMonitor&gt; ChangeMonitors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Runtime.Caching.ChangeMonitor&gt; ChangeMonitors" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChangeMonitors As Collection(Of ChangeMonitor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Runtime::Caching::ChangeMonitor ^&gt; ^ ChangeMonitors { System::Collections::ObjectModel::Collection&lt;System::Runtime::Caching::ChangeMonitor ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Runtime.Caching.ChangeMonitor&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dc6e1-113">获取与某个缓存项关联的 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-113">Gets a collection of <see cref="T:System.Runtime.Caching.ChangeMonitor" /> objects that are associated with a cache entry.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dc6e1-114">更改监视器的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-114">A collection of change monitors.</span>
          </span>
          <span data-ttu-id="dc6e1-115">默认值为空集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-115">The default is an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc6e1-116">你可以添加或删除与某个缓存项关联的更改监视器。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-116">You can add to or remove change monitors that are associated with a cache entry.</span></span> <span data-ttu-id="dc6e1-117">但是，一组更改监视器必须在传递之前完成<xref:System.Runtime.Caching.CacheItemPolicy>到实例<xref:System.Runtime.Caching.ObjectCache>实现。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-117">However, the set of change monitors must be complete before you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance to an <xref:System.Runtime.Caching.ObjectCache> implementation.</span></span> <span data-ttu-id="dc6e1-118">如果在上更改组更改监视器<xref:System.Runtime.Caching.CacheItemPolicy>对象后<xref:System.Runtime.Caching.CacheItemPolicy>已经将对象传递给<xref:System.Runtime.Caching.ObjectCache>实现中，所做的更改产生任何影响。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-118">If you change the set of change monitors on a <xref:System.Runtime.Caching.CacheItemPolicy> object after the <xref:System.Runtime.Caching.CacheItemPolicy> object has been passed to an <xref:System.Runtime.Caching.ObjectCache> implementation, the changes have no effect.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Runtime.Caching.CacheItemPriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Caching.CacheItemPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As CacheItemPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Caching::CacheItemPriority Priority { System::Runtime::Caching::CacheItemPriority get(); void set(System::Runtime::Caching::CacheItemPriority value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.CacheItemPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dc6e1-119">获取或设置用于确定是否逐出某个缓存项的优先级别设置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-119">Gets or sets a priority setting that is used to determine whether to evict a cache entry.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dc6e1-120">用于指示逐出的优先级别的枚举值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-120">One of the enumeration values that indicates the priority for eviction.</span>
          </span>
          <span data-ttu-id="dc6e1-121">默认的优先级别值为 <see cref="F:System.Runtime.Caching.CacheItemPriority.Default" />，这表示无优先级别。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-121">The default priority value is <see cref="F:System.Runtime.Caching.CacheItemPriority.Default" />, which means no priority.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc6e1-122">在 ASP.NET 中，优先级枚举只有两个可能的优先级： <xref:System.Runtime.Caching.CacheItemPriority.Default> （这意味着没有优先级），和<xref:System.Runtime.Caching.CacheItemPriority.NotRemovable>（这意味着该条目不能删除）。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-122">In ASP.NET, the priority enumeration only has two possible priorities: <xref:System.Runtime.Caching.CacheItemPriority.Default> (which means no priority), and <xref:System.Runtime.Caching.CacheItemPriority.NotRemovable> (which means the entry cannot be removed).</span></span> <span data-ttu-id="dc6e1-123">因此，可以设置的唯一优先级是是否缓存条目应保留在缓存中永久。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-123">Therefore, the only priority that can be set is whether a cache entry should remain in the cache forever.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc6e1-124">将项添加到缓存中使用的优先级级别<xref:System.Runtime.Caching.CacheItemPriority.NotRemovable>可能导致缓存溢出永远不能删除的项。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-124">Adding an entry to the cache with a priority level of <xref:System.Runtime.Caching.CacheItemPriority.NotRemovable> can cause the cache to overflow with entries that can never be removed.</span></span> <span data-ttu-id="dc6e1-125">缓存实现应设置<xref:System.Runtime.Caching.CacheItemPriority.NotRemovable>仅当缓存实现提供了方法逐出从缓存条目以及管理缓存条目数的缓存项的优先级。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-125">Cache implementations should set the <xref:System.Runtime.Caching.CacheItemPriority.NotRemovable> priority for a cache entry only if the cache implementation provides ways to evict entries from the cache and to manage the number of cache entries.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovedCallback">
      <MemberSignature Language="C#" Value="public System.Runtime.Caching.CacheEntryRemovedCallback RemovedCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Caching.CacheEntryRemovedCallback RemovedCallback" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.RemovedCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property RemovedCallback As CacheEntryRemovedCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Caching::CacheEntryRemovedCallback ^ RemovedCallback { System::Runtime::Caching::CacheEntryRemovedCallback ^ get(); void set(System::Runtime::Caching::CacheEntryRemovedCallback ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.CacheEntryRemovedCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dc6e1-126">获取或设置对 <see cref="T:System.Runtime.Caching.CacheEntryRemovedCallback" /> 委托的引用，在从缓存中移除某个项后将调用该委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-126">Gets or sets a reference to a <see cref="T:System.Runtime.Caching.CacheEntryRemovedCallback" /> delegate that is called after an entry is removed from the cache.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dc6e1-127">对由缓存实现调用的委托的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-127">A reference to a delegate that is called by a cache implementation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc6e1-128">已从缓存中删除某个缓存项后，缓存时，将调用的回调对象引用的<xref:System.Runtime.Caching.CacheItemPolicy.RemovedCallback%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-128">After a cache entry has been removed from the cache, the cache invokes the callback object that is referenced by the <xref:System.Runtime.Caching.CacheItemPolicy.RemovedCallback%2A> property.</span></span> <span data-ttu-id="dc6e1-129">缓存实现可以使用此回调通知调用的方法已移除某个缓存项。</span><span class="sxs-lookup"><span data-stu-id="dc6e1-129">A cache implementation can use this callback to notify the calling method that a cache entry has been removed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SlidingExpiration">
      <MemberSignature Language="C#" Value="public TimeSpan SlidingExpiration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan SlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Property SlidingExpiration As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan SlidingExpiration { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dc6e1-130">获取或设置一个值，该值指示如果某个缓存项在给定时段内未被访问，是否应被逐出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-130">Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dc6e1-131">一个时段，必须在此时段内访问某个缓存项，否则将从内存中逐出该缓存项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-131">A span of time within which a cache entry must be accessed before the cache entry is evicted from the cache.</span>
          </span>
          <span data-ttu-id="dc6e1-132">默认值为 <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />，这意味着该项的过期不应该基于时间跨度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-132">The default is <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />, meaning that the item should not be expired based on a time span.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCallback">
      <MemberSignature Language="C#" Value="public System.Runtime.Caching.CacheEntryUpdateCallback UpdateCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Caching.CacheEntryUpdateCallback UpdateCallback" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCallback As CacheEntryUpdateCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Caching::CacheEntryUpdateCallback ^ UpdateCallback { System::Runtime::Caching::CacheEntryUpdateCallback ^ get(); void set(System::Runtime::Caching::CacheEntryUpdateCallback ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.CacheEntryUpdateCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dc6e1-133">获取或设置对 <see cref="T:System.Runtime.Caching.CacheEntryUpdateCallback" /> 委托的引用，在从缓存中移除某个缓存项之前将调用该委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-133">Gets or sets a reference to a <see cref="T:System.Runtime.Caching.CacheEntryUpdateCallback" /> delegate that is called before a cache entry is removed from the cache.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dc6e1-134">对由缓存实现调用的委托的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc6e1-134">A reference to a delegate that is called by a cache implementation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>