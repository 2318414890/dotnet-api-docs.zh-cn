<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="da8e76321bbea3bd20575bb12f343508a3e536f7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399291" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义 <see cref="T:System.Data.DataTable" /> 类的扩展方法。 <see cref="T:System.Data.DataTableExtensions" /> 是一个静态类。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="table">从中创建支持 LINQ 的 <see cref="T:System.Data.DataTable" /> 的源 <see cref="T:System.Data.DataView" />。</param>
        <summary>创建并返回支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</summary>
        <returns>支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> 启用数据绑定方案[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]并且可以从创建类型化或非类型化<xref:System.Data.DataTable>，提供该表的默认视图。 在从 <xref:System.Data.DataView> 创建 <xref:System.Data.DataTable> 后，可以在其上设置筛选和排序。 <xref:System.Data.DataView>然后绑定到 UI 控件，如<xref:System.Windows.Forms.DataGrid>或<xref:System.Windows.Forms.DataGridView>，提供简单数据绑定模型。  
  
 有关详细信息和示例，请参阅[创建 DataView 对象](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.DataView>从 SalesOrderDetail 表并将其设置为数据源的<xref:System.Windows.Forms.BindingSource>对象，该代理的对象<xref:System.Windows.Forms.DataGridView>控件：  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
        <param name="source">从中创建支持 LINQ 的 <see cref="T:System.Data.DataView" /> 的源 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 查询。</param>
        <summary>创建并返回一个支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象，该对象表示 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 查询。</summary>
        <returns>支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> 启用数据绑定方案为[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]并且可以从创建[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]查询。 <xref:System.Data.DataView>表示查询本身，并且不是基于查询的视图。 新创建<xref:System.Data.DataView>推断筛选和排序信息从创建它的查询。 <xref:System.Data.DataView>然后绑定到 UI 控件，如<xref:System.Windows.Forms.DataGrid>或<xref:System.Windows.Forms.DataGridView>，提供简单数据绑定模型。  
  
 参数`T`输入参数的`source`仅可以属于类型<xref:System.Data.DataRow>或从派生的类型<xref:System.Data.DataRow>。  
  
 下面的查询运算符，仅，支持在查询中用于创建<xref:System.Data.DataView>:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 有关详细信息和示例，请参阅[创建 DataView 对象](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.DataView>的应付款总计按排序的联机订单：  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">可枚举的源 <see cref="T:System.Data.DataTable" />。</param>
        <summary>返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。 此对象可用在 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 表达式或方法查询中。</summary>
        <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] 查询适用于实现的数据源<xref:System.Collections.Generic.IEnumerable%601>接口或<xref:System.Linq.IQueryable>接口。  <xref:System.Data.DataTable>类不实现任何接口，因此您必须调用<xref:System.Data.DataTableExtensions.AsEnumerable%2A>方法来使用<xref:System.Data.DataTable>作为来源，以`From`子句[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]查询。 你还可以获取自定义的、 特定于域的运算符，如<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>，通过返回<xref:System.Collections.Generic.IEnumerable%601>对象。  
  
 返回的可枚举对象<xref:System.Data.DataTableExtensions.AsEnumerable%2A>方法永久绑定到<xref:System.Data.DataTable>，生成它。 多次调用<xref:System.Data.DataTableExtensions.AsEnumerable%2A>方法将返回多个独立的可查询对象的所有绑定到源<xref:System.Data.DataTable>。  
  
   
  
## Examples  
 在下面的示例中，`DisplayProducts`方法接收包含名为 DataColumn 的 DataTable `ProductName`，提取`ProductName`值，然后输出值。  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Data.DataTable" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在给定输入 <see cref="T:System.Data.DataTable" /> 对象的情况下，返回包含 <see cref="T:System.Data.DataRow" /> 对象副本的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
        <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
        <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataTable" /> 的输入 <see cref="T:System.Data.DataRow" /> 对象的情况下，返回包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象副本的 <see cref="T:System.Data.DataRow" />。</summary>
        <returns>一个 <see cref="T:System.Data.DataTable" />，其中包含作为 <see cref="T:System.Data.DataRow" /> 对象的类型的输入序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 参数`T`输入参数的`source`仅可以属于类型<xref:System.Data.DataRow>或从派生的类型<xref:System.Data.DataRow>。  
  
 在输入的序列可以是任何<xref:System.Collections.Generic.IEnumerable%601>源，不仅查询通过<xref:System.Data.DataTable>。 请注意，是否源序列为查询，调用此运算符将强制立即执行。 枚举的源序列也会导致引发异常。  
  
 目标表的架构基于第一个架构<xref:System.Data.DataRow>源序列中的行。 表元数据提取从<xref:System.Data.DataRow>元数据和表中列的值的值<xref:System.Data.DataRow>。 对于类型化<xref:System.Data.DataTable>，不保留类型。 传输数据和架构，但输出表的结果行不会的类型化<xref:System.Data.DataRow>类型。 <xref:System.Data.DataRow.RowState%2A>和<xref:System.Data.DataRow.RowError%2A>在来自源复制属性不会保留<xref:System.Data.DataRow>到返回<xref:System.Data.DataTable>。  
  
 当**null**引用或值为 null 的类型**null**在源中找到<xref:System.Data.DataRow>，此方法将替换目标中的值<xref:System.Data.DataTable>值为<xref:System.DBNull.Value>。  
  
 生成的方法返回的表具有默认表名称。 如果你想要将命名<xref:System.Data.DataTable>，将其附加到<xref:System.Data.DataSet>，或执行任何其他<xref:System.Data.DataTable>特定操作，你必须之后执行此操作已创建并返回的表。  
  
 有关详细信息，请参阅[创建查询 DataTable 从](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)。  
  
   
  
## Examples  
 以下示例查询 SalesOrderHeader 表的订单，2001 年 8 月 8 日以后，并使用<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>方法来创建<xref:System.Data.DataTable>从该查询。 然后将 <xref:System.Data.DataTable> 绑定到作为 <xref:System.Windows.Forms.BindingSource> 的代理的 <xref:System.Windows.Forms.DataGridView>。  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 <see langword="null" />，因此无法创建新表。</exception>
        <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。  
  
 源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。  
  
 源序列中的 <see cref="T:System.Data.DataRow" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
        <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
        <param name="table">目标 <see cref="T:System.Data.DataTable" />。</param>
        <param name="options">
          <see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 加载选项。</param>
        <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" /> 的输入 <see cref="T:System.Data.DataTable" /> 对象的情况下，将 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 参数`T`输入参数的`source`仅可以属于类型<xref:System.Data.DataRow>，或从派生的类型<xref:System.Data.DataRow>。  
  
 在输入的序列可以是任何<xref:System.Collections.Generic.IEnumerable%601>源，不仅查询通过<xref:System.Data.DataTable>。 请注意，是否源序列为查询，调用此运算符将强制立即执行。 枚举的源序列也会导致引发异常。  
  
 目标表的架构基于第一个架构<xref:System.Data.DataRow>源序列中的行。 表元数据提取从<xref:System.Data.DataRow>元数据和表中列的值的值<xref:System.Data.DataRow>。 对于类型化<xref:System.Data.DataTable>，不保留类型。 传输数据和架构，但输出表的结果行不会的类型化<xref:System.Data.DataRow>类型。 <xref:System.Data.DataRow.RowState%2A>和<xref:System.Data.DataRow.RowError%2A>在来自源复制属性不会保留<xref:System.Data.DataRow>到返回<xref:System.Data.DataTable>。  
  
 当**null**引用或值为 null 的类型**null**在源中找到<xref:System.Data.DataRow>，此方法将替换目标中的值<xref:System.Data.DataTable>值为<xref:System.DBNull.Value>。  
  
 生成的方法返回的表具有默认表名称。 如果你想要将命名<xref:System.Data.DataTable>，将其附加到<xref:System.Data.DataSet>，或执行任何其他<xref:System.Data.DataTable>特定操作，你必须之后执行此操作已创建并返回的表。  
  
 有关详细信息，请参阅[创建查询 DataTable 从](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">复制的 <see cref="T:System.Data.DataRow" /> 对象不符合目标 <see cref="T:System.Data.DataTable" /> 的架构。</exception>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 <see langword="null" />，或者目标 <see cref="T:System.Data.DataTable" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。  
  
 源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。  
  
 源序列中的 <see cref="T:System.Data.DataRow" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
        <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
        <param name="table">目标 <see cref="T:System.Data.DataTable" />。</param>
        <param name="options">
          <see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 加载选项。</param>
        <param name="errorHandler">
          <see cref="T:System.Data.FillErrorEventHandler" /> 委托，表示将处理错误的方法。</param>
        <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" /> 的输入 <see cref="T:System.Data.DataTable" /> 对象的情况下，将 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 参数`T`输入参数的`source`仅可以属于类型<xref:System.Data.DataRow>，或从派生的类型<xref:System.Data.DataRow>。  
  
 在输入的序列可以是任何<xref:System.Collections.Generic.IEnumerable%601>源，不仅查询通过<xref:System.Data.DataTable>。 请注意，是否源序列为查询，调用此运算符将强制立即执行。 枚举的源序列也会导致引发异常。  
  
 目标表的架构基于第一个架构<xref:System.Data.DataRow>源序列中的行。 表元数据提取从<xref:System.Data.DataRow>元数据和表中列的值的值<xref:System.Data.DataRow>。 对于类型化<xref:System.Data.DataTable>，不保留类型。 传输数据和架构，但输出表的结果行不会的类型化<xref:System.Data.DataRow>类型。 <xref:System.Data.DataRow.RowState%2A>和<xref:System.Data.DataRow.RowError%2A>在来自源复制属性不会保留<xref:System.Data.DataRow>到返回<xref:System.Data.DataTable>。  
  
 当**null**引用或值为 null 的类型**null**在源中找到<xref:System.Data.DataRow>，此方法将替换目标中的值<xref:System.Data.DataTable>值为<xref:System.DBNull.Value>。  
  
 生成的方法返回的表具有默认表名称。 如果你想要将命名<xref:System.Data.DataTable>，将其附加到<xref:System.Data.DataSet>，或执行任何其他<xref:System.Data.DataTable>特定操作，你必须之后执行此操作已创建并返回的表。  
  
 如果到目标表，例如约束异常，数据行在复制期间引发异常`errorHandler`调用委托。 A<xref:System.Data.FillErrorEventArgs>传递给`errorHandler`委托具有以下值：  
  
-   <xref:System.Data.FillErrorEventArgs.Values%2A>属性设置为源数据的副本。  
  
-   <xref:System.Data.FillErrorEventArgs.DataTable%2A>属性设置为目标<xref:System.Data.DataTable>。  
  
-   <xref:System.Data.FillErrorEventArgs.Errors%2A>属性设置为捕获的异常。  
  
 <xref:System.Data.FillErrorEventArgs.Continue%2A>委托调用返回后，属性为只读。 如果<xref:System.Data.FillErrorEventArgs.Continue%2A>属性是`true`，源序列将继续进行枚举和加载到数据表。 如果<xref:System.Data.FillErrorEventArgs.Continue%2A>属性是`false`，从引发原始异常<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>方法。  
  
 有关详细信息，请参阅[创建查询 DataTable 从](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">复制的 <see cref="T:System.Data.DataRow" /> 对象不符合目标 <see cref="T:System.Data.DataTable" /> 的架构。</exception>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 <see langword="null" />，或者目标 <see cref="T:System.Data.DataTable" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。  
  
 或  
  
 源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。  
  
 或  
  
 源序列中的 <see cref="T:System.Data.DataRow" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>