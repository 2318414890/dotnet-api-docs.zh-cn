<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="324b1-101">允许对象实现 DataAdapter，并且表示一组用于填充和更新 <see cref="T:System.Data.DataSet" /> 及数据源的方法以及与映射操作有关的属性。</span><span class="sxs-lookup"><span data-stu-id="324b1-101">Allows an object to implement a DataAdapter, and represents a set of methods and mapping action-related properties that are used to fill and update a <see cref="T:System.Data.DataSet" /> and update a data source.</span></span>  
  
 <span data-ttu-id="324b1-102"><see cref="T:System.Data.IDbDataAdapter" /> 实例针对作为（或类似于）具有文字命令（如 Transact-SQL）的关系数据库的数据源，而 <see cref="T:System.Data.IDataAdapter" /> 实例可使用任何类型的数据源。</span><span class="sxs-lookup"><span data-stu-id="324b1-102"><see cref="T:System.Data.IDbDataAdapter" /> instances are for data sources that are (or resemble) relational databases with textual commands (like Transact-SQL), while <see cref="T:System.Data.IDataAdapter" /> instances could can use any type of data source.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="324b1-103"><xref:System.Data.IDataAdapter>接口允许继承类实现 DataAdapter 类，该类表示的数据源之间的桥梁和<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="324b1-103">The <xref:System.Data.IDataAdapter> interface allows an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="324b1-104">有关 DataAdapter 类的详细信息，请参阅[填充数据集从 DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)。</span><span class="sxs-lookup"><span data-stu-id="324b1-104">For more information about DataAdapter classes, see [Populating a DataSet from a DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).</span></span>  
  
 <span data-ttu-id="324b1-105">应用程序不会创建的实例<xref:System.Data.IDataAdapter>接口直接，但实现继承的类的实例<xref:System.Data.IDataAdapter>。</span><span class="sxs-lookup"><span data-stu-id="324b1-105">An application does not create an instance of the <xref:System.Data.IDataAdapter> interface directly, but implements an instance of a class that inherits <xref:System.Data.IDataAdapter>.</span></span>  
  
 <span data-ttu-id="324b1-106">继承的类<xref:System.Data.IDataAdapter>必须实现继承的成员，且通常会定义其他成员来添加提供程序特定的功能。</span><span class="sxs-lookup"><span data-stu-id="324b1-106">Classes that inherit <xref:System.Data.IDataAdapter> must implement the inherited members, and they typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="324b1-107">例如，<xref:System.Data.IDataAdapter>接口定义<xref:System.Data.IDataAdapter.Fill%2A>采用的方法<xref:System.Data.DataSet>作为参数。</span><span class="sxs-lookup"><span data-stu-id="324b1-107">For example, the <xref:System.Data.IDataAdapter> interface defines a <xref:System.Data.IDataAdapter.Fill%2A> method that takes a <xref:System.Data.DataSet> as a parameter.</span></span> <span data-ttu-id="324b1-108">反过来，<xref:System.Data.OleDb.OleDbDataAdapter>类继承<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法和还定义了两个其他重载<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>作为参数的 ADO 记录集对象的方法。</span><span class="sxs-lookup"><span data-stu-id="324b1-108">In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method and also defines two additional overloads of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method that take an ADO Recordset object as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="324b1-109">下面的示例使用派生的类中， <xref:System.Data.SqlClient.SqlCommand>， <xref:System.Data.SqlClient.SqlDataAdapter>，和<xref:System.Data.SqlClient.SqlConnection>，以从数据库中选择的记录。</span><span class="sxs-lookup"><span data-stu-id="324b1-109">The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database.</span></span> <span data-ttu-id="324b1-110">实心<xref:System.Data.DataSet>随后会返回。</span><span class="sxs-lookup"><span data-stu-id="324b1-110">The filled <xref:System.Data.DataSet> is then returned.</span></span> <span data-ttu-id="324b1-111">若要执行此操作，该方法传递初始化<xref:System.Data.DataSet>，连接字符串和是 TRANSACT-SQL SELECT 语句的查询字符串。</span><span class="sxs-lookup"><span data-stu-id="324b1-111">To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="324b1-112">若要提升.NET Framework 数据提供程序之间的一致性，将窗体中的继承类<paramref name="Prv" />DataAdapter 其中<paramref name="Prv" />是为特定的.NET Framework 数据提供程序命名空间中的所有类提供的统一前缀。</span><span class="sxs-lookup"><span data-stu-id="324b1-112">To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="Prv" /> DataAdapter where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace.</span></span> <span data-ttu-id="324b1-113">例如，<paramref name="Sql" />的前缀<see cref="T:System.Data.SqlClient.SqlDataAdapter" />类<see langword="System.Data.SqlClient" />命名空间。</span><span class="sxs-lookup"><span data-stu-id="324b1-113">For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class in the <see langword="System.Data.SqlClient" /> namespace.</span></span>  
  
 <span data-ttu-id="324b1-114">继承自<see cref="T:System.Data.IDataAdapter" />接口，则应实现以下构造函数：</span><span class="sxs-lookup"><span data-stu-id="324b1-114">When you inherit from the <see cref="T:System.Data.IDataAdapter" /> interface, you should implement the following constructors:</span></span>  
  
 <span data-ttu-id="324b1-115"><list type="table"><listheader><term> 项</span><span class="sxs-lookup"><span data-stu-id="324b1-115"><list type="table"><listheader><term> Item</span></span>  
  
 <span data-ttu-id="324b1-116"></term><description> 描述</span><span class="sxs-lookup"><span data-stu-id="324b1-116"></term><description> Description</span></span>  
  
 <span data-ttu-id="324b1-117"></description></listheader><item><term> PrvDataAdapter()</span><span class="sxs-lookup"><span data-stu-id="324b1-117"></description></listheader><item><term> PrvDataAdapter()</span></span>  
  
 <span data-ttu-id="324b1-118"></term><description> 初始化 PrvDataAdapter 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="324b1-118"></term><description> Initializes a new instance of the PrvDataAdapter class.</span></span>  
  
 <span data-ttu-id="324b1-119"></description></item><item><term> PrvDataAdapter (PrvCommand selectCommand)</span><span class="sxs-lookup"><span data-stu-id="324b1-119"></description></item><item><term> PrvDataAdapter(PrvCommand selectCommand)</span></span>  
  
 <span data-ttu-id="324b1-120"></term><description> 使用指定的 SQL SELECT 语句中初始化 PrvDataAdapter 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="324b1-120"></term><description> Initializes a new instance of the PrvDataAdapter class by using the specified SQL SELECT statement.</span></span>  
  
 <span data-ttu-id="324b1-121"></description></item><item><term> PrvDataAdapter （字符串 selectCommandText，字符串 selectConnectionString）</span><span class="sxs-lookup"><span data-stu-id="324b1-121"></description></item><item><term> PrvDataAdapter(string selectCommandText, string selectConnectionString)</span></span>  
  
 <span data-ttu-id="324b1-122"></term><description> 通过使用 SQL SELECT 语句和连接字符串初始化 PrvDataAdapter 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="324b1-122"></term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a connection string.</span></span>  
  
 <span data-ttu-id="324b1-123"></description></item><item><term> PrvDataAdapter （字符串 selectCommandText，PrvConnection selectConnection）</span><span class="sxs-lookup"><span data-stu-id="324b1-123"></description></item><item><term> PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)</span></span>  
  
 <span data-ttu-id="324b1-124"></term><description> 通过使用 SQL SELECT 语句和 PrvConnection 对象初始化 PrvDataAdapter 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="324b1-124"></term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a PrvConnection object.</span></span>  
  
 </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="324b1-125">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="324b1-125">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span></span></param>
        <summary><span data-ttu-id="324b1-126">添加或更新 <see cref="T:System.Data.DataSet" /> 中的行以匹配使用 <see cref="T:System.Data.DataSet" /> 名称的数据源中的行，并创建一个名为“Table”的 <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="324b1-126">Adds or updates rows in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> name, and creates a <see cref="T:System.Data.DataTable" /> named "Table".</span></span></summary>
        <returns><span data-ttu-id="324b1-127">已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。</span><span class="sxs-lookup"><span data-stu-id="324b1-127">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="324b1-128">这不包括受不返回行的语句影响的行。</span><span class="sxs-lookup"><span data-stu-id="324b1-128">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="324b1-129"><xref:System.Data.IDataAdapter.Fill%2A> 从数据源使用指定的一个关联的 SELECT 语句中检索行<xref:System.Data.IDbDataAdapter.SelectCommand%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="324b1-129"><xref:System.Data.IDataAdapter.Fill%2A> retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="324b1-130">与 SELECT 语句关联的连接对象必须是有效，但它不需要处于打开状态。</span><span class="sxs-lookup"><span data-stu-id="324b1-130">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="324b1-131">如果之前连接关闭<xref:System.Data.IDataAdapter.Fill%2A>是调用，其打开以检索数据，然后再将关闭。</span><span class="sxs-lookup"><span data-stu-id="324b1-131">If the connection is closed before <xref:System.Data.IDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="324b1-132">如果连接是打开之前<xref:System.Data.IDataAdapter.Fill%2A>是调用，它保持打开状态。</span><span class="sxs-lookup"><span data-stu-id="324b1-132">If the connection is open before <xref:System.Data.IDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="324b1-133"><xref:System.Data.IDataAdapter.Fill%2A>操作然后将行添加到目标<xref:System.Data.DataTable>中的对象<xref:System.Data.DataSet>，则创建<xref:System.Data.DataTable>对象如果它们尚不存在。</span><span class="sxs-lookup"><span data-stu-id="324b1-133">The <xref:System.Data.IDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist.</span></span> <span data-ttu-id="324b1-134">在创建时<xref:System.Data.DataTable>对象，<xref:System.Data.IDataAdapter.Fill%2A>操作通常会创建仅列名称元数据。</span><span class="sxs-lookup"><span data-stu-id="324b1-134">When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.IDataAdapter.Fill%2A> operation usually creates only column name metadata.</span></span> <span data-ttu-id="324b1-135">但是，如果<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>属性设置为`AddWithKey`，还会创建相应的主键约束。</span><span class="sxs-lookup"><span data-stu-id="324b1-135">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="324b1-136">如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable> 值。</span><span class="sxs-lookup"><span data-stu-id="324b1-136">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="324b1-137">您必须显式定义为主键，以确保正确解析重复行。</span><span class="sxs-lookup"><span data-stu-id="324b1-137">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="324b1-138">有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。</span><span class="sxs-lookup"><span data-stu-id="324b1-138">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
 <span data-ttu-id="324b1-139">如果<xref:System.Data.IDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成连续列，请使用模式"columnname1"、"columnname2"、"columnname3"等的名称。</span><span class="sxs-lookup"><span data-stu-id="324b1-139">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="324b1-140">如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。</span><span class="sxs-lookup"><span data-stu-id="324b1-140">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="324b1-141">多个结果集添加到时<xref:System.Data.DataSet>，每个结果集放在单独的表。</span><span class="sxs-lookup"><span data-stu-id="324b1-141">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="324b1-142">额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。</span><span class="sxs-lookup"><span data-stu-id="324b1-142">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="324b1-143">使用列和表名以确保不会发生冲突，这些命名模式时，应用程序应小心。</span><span class="sxs-lookup"><span data-stu-id="324b1-143">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="324b1-144">当 SELECT 语句用于填充<xref:System.Data.DataSet>返回多个结果，如一批 SQL 语句中，如果其中一个结果包含错误，所有的后续结果会跳过并不添加到<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="324b1-144">When the SELECT statement that is used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, if one of the results contains an error, all successive results are skipped and not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="324b1-145">你可以使用<xref:System.Data.IDataAdapter.Fill%2A>上多次相同的方法<xref:System.Data.DataTable>。</span><span class="sxs-lookup"><span data-stu-id="324b1-145">You can use the <xref:System.Data.IDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="324b1-146">如果存在主键，传入行与已存在的匹配行合并。</span><span class="sxs-lookup"><span data-stu-id="324b1-146">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="324b1-147">如果主键不存在，将传入的行追加到<xref:System.Data.DataTable>。</span><span class="sxs-lookup"><span data-stu-id="324b1-147">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="324b1-148">当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.IDataAdapter.Fill%2A>和<xref:System.Data.IDataAdapter.FillSchema%2A>.NET Framework 数据提供程序检索仅第一个结果的架构信息。</span><span class="sxs-lookup"><span data-stu-id="324b1-148">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.IDataAdapter.Fill%2A> and <xref:System.Data.IDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="324b1-149">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="324b1-149">The <see cref="T:System.Data.DataSet" /> to be filled with the schema from the data source.</span></span></param>
        <param name="schemaType"><span data-ttu-id="324b1-150"><see cref="T:System.Data.SchemaType" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="324b1-150">One of the <see cref="T:System.Data.SchemaType" /> values.</span></span></param>
        <summary><span data-ttu-id="324b1-151">将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</span><span class="sxs-lookup"><span data-stu-id="324b1-151">Adds a <see cref="T:System.Data.DataTable" /> named "Table" to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</span></span></summary>
        <returns><span data-ttu-id="324b1-152"><see cref="T:System.Data.DataTable" /> 对象的数组，这些对象包含从数据源返回的架构信息。</span><span class="sxs-lookup"><span data-stu-id="324b1-152">An array of <see cref="T:System.Data.DataTable" /> objects that contain schema information returned from the data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="324b1-153"><xref:System.Data.IDataAdapter.FillSchema%2A>方法从使用数据源中检索架构<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。</span><span class="sxs-lookup"><span data-stu-id="324b1-153">The <xref:System.Data.IDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="324b1-154">与相关的连接对象<xref:System.Data.IDbDataAdapter.SelectCommand%2A>必须有效，但它不需要处于打开状态。</span><span class="sxs-lookup"><span data-stu-id="324b1-154">The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open.</span></span> <span data-ttu-id="324b1-155">如果之前连接关闭<xref:System.Data.IDataAdapter.FillSchema%2A>是调用，其打开以检索数据，然后再将关闭。</span><span class="sxs-lookup"><span data-stu-id="324b1-155">If the connection is closed before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="324b1-156">如果连接是打开之前<xref:System.Data.IDataAdapter.FillSchema%2A>是调用，它保持打开状态。</span><span class="sxs-lookup"><span data-stu-id="324b1-156">If the connection is open before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="324b1-157">A<xref:System.Data.IDataAdapter.FillSchema%2A>操作添加<xref:System.Data.DataTable>到目标<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="324b1-157">A <xref:System.Data.IDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="324b1-158">然后，它添加到列<xref:System.Data.DataColumnCollection>的<xref:System.Data.DataTable>并配置以下<xref:System.Data.DataColumn>如果它们在数据源中存在的属性：</span><span class="sxs-lookup"><span data-stu-id="324b1-158">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable> and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="324b1-159"><xref:System.Data.DataColumn.AutoIncrement%2A>。</span><span class="sxs-lookup"><span data-stu-id="324b1-159"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="324b1-160">必须设置<xref:System.Data.DataColumn.AutoIncrementStep%2A>和<xref:System.Data.DataColumn.AutoIncrementSeed%2A>单独。</span><span class="sxs-lookup"><span data-stu-id="324b1-160">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="324b1-161"><xref:System.Data.IDataAdapter.FillSchema%2A> 此外可以配置<xref:System.Data.DataTable.PrimaryKey%2A>和<xref:System.Data.DataTable.Constraints%2A>属性根据下列规则：</span><span class="sxs-lookup"><span data-stu-id="324b1-161"><xref:System.Data.IDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="324b1-162">如果一个或多个主键列由<xref:System.Data.IDbDataAdapter.SelectCommand%2A>，用作主键列<xref:System.Data.DataTable>。</span><span class="sxs-lookup"><span data-stu-id="324b1-162">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="324b1-163">如果返回任何主键列但唯一列，不可为 null 的唯一的所有列是否为主键使用唯一的列。</span><span class="sxs-lookup"><span data-stu-id="324b1-163">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if all the unique columns are non-nullable.</span></span> <span data-ttu-id="324b1-164">如果任何列都可以为 null，<xref:System.Data.UniqueConstraint>添加到<xref:System.Data.ConstraintCollection>，但<xref:System.Data.DataTable.PrimaryKey%2A>未设置属性。</span><span class="sxs-lookup"><span data-stu-id="324b1-164">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="324b1-165">如果返回主键列和唯一列，将主键列用作主键列<xref:System.Data.DataTable>。</span><span class="sxs-lookup"><span data-stu-id="324b1-165">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="324b1-166">请注意，主键和唯一约束添加到<xref:System.Data.ConstraintCollection>根据以前的规则，但其他约束类型不会添加。</span><span class="sxs-lookup"><span data-stu-id="324b1-166">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the previous rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="324b1-167">如果唯一聚集索引定义的一列或 SQL Server 表中的列，并且对一组单独的列，定义主键约束，则将返回的聚集索引中列的名称。</span><span class="sxs-lookup"><span data-stu-id="324b1-167">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="324b1-168">若要返回的名称或主键列的名称，用于指定主键索引的名称的 SELECT 语句中的查询提示。</span><span class="sxs-lookup"><span data-stu-id="324b1-168">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="324b1-169">有关如何指定查询提示的详细信息，请参阅[查询提示 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)。</span><span class="sxs-lookup"><span data-stu-id="324b1-169">For more information about how to specify query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).</span></span>  
  
 <span data-ttu-id="324b1-170">如果<xref:System.Data.IDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成连续列，请使用模式"columnname1"、"columnname2"、"columnname3"等的名称。</span><span class="sxs-lookup"><span data-stu-id="324b1-170">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="324b1-171">如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。</span><span class="sxs-lookup"><span data-stu-id="324b1-171">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="324b1-172">多个结果集添加到时<xref:System.Data.DataSet>，每个结果集放在单独的表。</span><span class="sxs-lookup"><span data-stu-id="324b1-172">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="324b1-173">额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。</span><span class="sxs-lookup"><span data-stu-id="324b1-173">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="324b1-174">使用列和表名以确保不会发生冲突，这些命名模式时，应用程序应小心。</span><span class="sxs-lookup"><span data-stu-id="324b1-174">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="324b1-175"><xref:System.Data.IDataAdapter.FillSchema%2A> 不返回任何行。</span><span class="sxs-lookup"><span data-stu-id="324b1-175"><xref:System.Data.IDataAdapter.FillSchema%2A> returns no rows.</span></span> <span data-ttu-id="324b1-176">使用<xref:System.Data.IDataAdapter.Fill%2A>方法以将行添加到<xref:System.Data.DataTable>。</span><span class="sxs-lookup"><span data-stu-id="324b1-176">Use the <xref:System.Data.IDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="324b1-177">获取当执行 SQL SELECT 语句时由用户设置的参数。</span><span class="sxs-lookup"><span data-stu-id="324b1-177">Gets the parameters set by the user when executing an SQL SELECT statement.</span></span></summary>
        <returns><span data-ttu-id="324b1-178"><see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</span><span class="sxs-lookup"><span data-stu-id="324b1-178">An array of <see cref="T:System.Data.IDataParameter" /> objects that contains the parameters set by the user.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits";   
              SqlParameter year = new SqlParameter("@Year", 2012);   
              SqlParameter credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");   
              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   
              command.Parameters.Add(year);   
              command.Parameters.Add(credits);   
              IDbDataAdapter mySchool = new SqlDataAdapter(command);   
              IDataParameter[] parameters = mySchool.GetFillParameters();  
              Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");   
              foreach (IDataParameter parameter in parameters) {   
                 Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   
              }  
           }  
        }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="324b1-179">指示或指定是否将未映射的源表或列与其源名一起传递以便筛选或引发错误。</span><span class="sxs-lookup"><span data-stu-id="324b1-179">Indicates or specifies whether unmapped source tables or columns are passed with their source names in order to be filtered or to raise an error.</span></span></summary>
        <value><span data-ttu-id="324b1-180"><see cref="T:System.Data.MissingMappingAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="324b1-180">One of the <see cref="T:System.Data.MissingMappingAction" /> values.</span></span> <span data-ttu-id="324b1-181">默认值为 <see langword="Passthrough" />。</span><span class="sxs-lookup"><span data-stu-id="324b1-181">The default is <see langword="Passthrough" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="324b1-182"><xref:System.Data.IDataAdapter.TableMappings%2A>属性提供了返回的记录之间的主映射和<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="324b1-182">The <xref:System.Data.IDataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="324b1-183">设置的值不是 <see cref="T:System.Data.MissingMappingAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="324b1-183">The value set is not one of the <see cref="T:System.Data.MissingMappingAction" /> values.</span></span></exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="324b1-184">指示或指定是否将丢失的源表、列及其关系添加到数据集架构中，是否忽略它们或者它们是否会引发错误。</span><span class="sxs-lookup"><span data-stu-id="324b1-184">Indicates or specifies whether missing source tables, columns, and their relationships are added to the dataset schema, ignored, or cause an error to be raised.</span></span></summary>
        <value><span data-ttu-id="324b1-185"><see cref="T:System.Data.MissingSchemaAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="324b1-185">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span> <span data-ttu-id="324b1-186">默认值为 <see langword="Add" />。</span><span class="sxs-lookup"><span data-stu-id="324b1-186">The default is <see langword="Add" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="324b1-187">设置的值不是 <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="324b1-187">The value set is not one of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="324b1-188">指示如何将源表映射到数据集表。</span><span class="sxs-lookup"><span data-stu-id="324b1-188">Indicates how a source table is mapped to a dataset table.</span></span></summary>
        <value><span data-ttu-id="324b1-189">一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。</span><span class="sxs-lookup"><span data-stu-id="324b1-189">A collection that provides the master mapping between the returned records and the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="324b1-190">默认值为空集合。</span><span class="sxs-lookup"><span data-stu-id="324b1-190">The default value is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="324b1-191"><xref:System.Data.IDataAdapter>用于名为"Table"的源表仅的映射。</span><span class="sxs-lookup"><span data-stu-id="324b1-191">The <xref:System.Data.IDataAdapter> uses only the mappings for the source table named "Table".</span></span> <span data-ttu-id="324b1-192">所有 SELECT、 INSERT、 DELETE 和 UPDATE 语句返回的数据必须使用来完成一致列命名。</span><span class="sxs-lookup"><span data-stu-id="324b1-192">All SELECT, INSERT, DELETE, and UPDATE statements returning data must do so using consistent column naming.</span></span> <span data-ttu-id="324b1-193">返回记录中的列名称必须是唯一的否则具有相同名称的列覆盖以前的数据。</span><span class="sxs-lookup"><span data-stu-id="324b1-193">The column names returned in the records must be unique, otherwise columns with duplicate names overwrite previous data.</span></span> <span data-ttu-id="324b1-194">上<xref:System.Data.IDataAdapter.Update%2A>、 只映射到名为"Table"的源表的表将具有已对帐其更改。</span><span class="sxs-lookup"><span data-stu-id="324b1-194">On <xref:System.Data.IDataAdapter.Update%2A>, only the table mapped to the source table named "Table" will have its changes reconciled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="324b1-195">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="324b1-195">The <see cref="T:System.Data.DataSet" /> used to update the data source.</span></span></param>
        <summary><span data-ttu-id="324b1-196">从名为“Table”的 <see cref="T:System.Data.DataSet" /> 为指定的 <see cref="T:System.Data.DataTable" /> 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。</span><span class="sxs-lookup"><span data-stu-id="324b1-196">Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataSet" /> from a <see cref="T:System.Data.DataTable" /> named "Table".</span></span></summary>
        <returns><span data-ttu-id="324b1-197"><see cref="T:System.Data.DataSet" /> 中成功更新的行数。</span><span class="sxs-lookup"><span data-stu-id="324b1-197">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="324b1-198">在应用程序调用<xref:System.Data.IDataAdapter.Update%2A>方法，<xref:System.Data.IDataAdapter>检查<xref:System.Data.DataRow.RowState%2A>属性，并执行所需的 INSERT、 UPDATE 或 DELETE 语句以迭代方式对于每一行，根据在中配置的索引顺序<xref:System.Data.DataSet>.</span><span class="sxs-lookup"><span data-stu-id="324b1-198">When an application calls the <xref:System.Data.IDataAdapter.Update%2A> method, the <xref:System.Data.IDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="324b1-199">例如，<xref:System.Data.IDataAdapter.Update%2A>可能会由于中的行的顺序执行 DELETE 语句，跟 INSERT 语句，并将另一个 DELETE 语句， <xref:System.Data.DataTable>。</span><span class="sxs-lookup"><span data-stu-id="324b1-199">For example, <xref:System.Data.IDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, because of the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="324b1-200">请注意，作为批处理进程; 不执行这些语句单独更新每个行。</span><span class="sxs-lookup"><span data-stu-id="324b1-200">Be aware that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="324b1-201">应用程序可以调用<xref:System.Data.DataSet.GetChanges%2A>方法如果你必须控制的语句类型 （例如，插入更新之前） 的序列。</span><span class="sxs-lookup"><span data-stu-id="324b1-201">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method if you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="324b1-202">有关详细信息，请参阅[使用 Dataadapter 更新数据源](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)。</span><span class="sxs-lookup"><span data-stu-id="324b1-202">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="324b1-203">如果尚未指定 INSERT、 UPDATE 或 DELETE 语句，<xref:System.Data.Common.DataAdapter.Update%2A>方法生成异常。</span><span class="sxs-lookup"><span data-stu-id="324b1-203">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="324b1-204">但是，你可以创建<xref:System.Data.SqlClient.SqlCommandBuilder>或<xref:System.Data.OleDb.OleDbCommandBuilder>对象以自动生成单表更新的 SQL 语句，如果你设置`SelectCommand`.NET Framework 数据提供程序的属性。</span><span class="sxs-lookup"><span data-stu-id="324b1-204">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="324b1-205">然后，由 CommandBuilder 生成未设置任何其他 SQL 语句。</span><span class="sxs-lookup"><span data-stu-id="324b1-205">Then, any additional SQL statements that you do not set are generated by the CommandBuilder.</span></span> <span data-ttu-id="324b1-206">此生成的逻辑需要要中存在的键列信息<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="324b1-206">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="324b1-207">有关详细信息请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。</span><span class="sxs-lookup"><span data-stu-id="324b1-207">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="324b1-208"><xref:System.Data.Common.DataAdapter.Update%2A>方法从第一个映射，然后再执行更新中列出的表中检索行。</span><span class="sxs-lookup"><span data-stu-id="324b1-208">The <xref:System.Data.Common.DataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="324b1-209"><xref:System.Data.Common.DataAdapter.Update%2A>然后更新使用的值的行<xref:System.Data.IDbCommand.UpdatedRowSource%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="324b1-209">The <xref:System.Data.Common.DataAdapter.Update%2A> then updates the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="324b1-210">将忽略所有附加的行返回。</span><span class="sxs-lookup"><span data-stu-id="324b1-210">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="324b1-211">任何数据加载回后<xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件时，允许用户检查经协调<xref:System.Data.DataSet>行和任何输出参数返回命令。</span><span class="sxs-lookup"><span data-stu-id="324b1-211">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="324b1-212">行已成功更新后，会接受对该行的更改。</span><span class="sxs-lookup"><span data-stu-id="324b1-212">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="324b1-213">使用时<xref:System.Data.IDataAdapter.Update%2A>，执行的顺序是，如下所示：</span><span class="sxs-lookup"><span data-stu-id="324b1-213">When using <xref:System.Data.IDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="324b1-214">中的值<xref:System.Data.DataRow>移动到的参数值。</span><span class="sxs-lookup"><span data-stu-id="324b1-214">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="324b1-215">引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。</span><span class="sxs-lookup"><span data-stu-id="324b1-215">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="324b1-216">该命令执行。</span><span class="sxs-lookup"><span data-stu-id="324b1-216">The command executes.</span></span>  
  
4.  <span data-ttu-id="324b1-217">如果该命令设置为`FirstReturnedRecord`，则第一个返回结果放在<xref:System.Data.DataRow>。</span><span class="sxs-lookup"><span data-stu-id="324b1-217">If the command is set to `FirstReturnedRecord`, then the first returned result is put in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="324b1-218">如果没有输出参数，它们都将置于<xref:System.Data.DataRow>。</span><span class="sxs-lookup"><span data-stu-id="324b1-218">If there are output parameters, they are put in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="324b1-219">引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。</span><span class="sxs-lookup"><span data-stu-id="324b1-219">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="324b1-220">调用 <xref:System.Data.DataRow.AcceptChanges%2A>。</span><span class="sxs-lookup"><span data-stu-id="324b1-220"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="324b1-221">与每个命令<xref:System.Data.IDataAdapter>通常有一个与之关联的参数集合。</span><span class="sxs-lookup"><span data-stu-id="324b1-221">Each command associated with the <xref:System.Data.IDataAdapter> usually has a parameter collection associated with it.</span></span> <span data-ttu-id="324b1-222">参数映射到当前行通过`SourceColumn`和`SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类。</span><span class="sxs-lookup"><span data-stu-id="324b1-222">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="324b1-223">`SourceColumn` 是指<xref:System.Data.DataTable>列，<xref:System.Data.IDataAdapter>引用以获取当前行的参数值。</span><span class="sxs-lookup"><span data-stu-id="324b1-223">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.IDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="324b1-224">`SourceColumn` 在应用任何表映射之前是指未映射的列名称。</span><span class="sxs-lookup"><span data-stu-id="324b1-224">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="324b1-225">如果`SourceColumn`引用不存在的列中，执行的操作取决于下列情况之一<xref:System.Data.MissingMappingAction>值。</span><span class="sxs-lookup"><span data-stu-id="324b1-225">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="324b1-226">枚举值</span><span class="sxs-lookup"><span data-stu-id="324b1-226">Enumeration Value</span></span>|<span data-ttu-id="324b1-227">执行操作</span><span class="sxs-lookup"><span data-stu-id="324b1-227">Action Taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="324b1-228">使用的源列名和中的表名<xref:System.Data.DataSet>如果不不存在任何映射。</span><span class="sxs-lookup"><span data-stu-id="324b1-228">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="324b1-229">A<xref:System.SystemException>生成。</span><span class="sxs-lookup"><span data-stu-id="324b1-229">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="324b1-230">当显式设置映射时，则输入参数的缺少映射通常被引起错误所导致。</span><span class="sxs-lookup"><span data-stu-id="324b1-230">When the mappings are explicitly set, a missing mapping for an input parameter is usually caused by an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="324b1-231">A<xref:System.SystemException>生成。</span><span class="sxs-lookup"><span data-stu-id="324b1-231">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="324b1-232">`SourceColumn`属性还用于映射输出的值或输入/输出参数回`DataSet`。</span><span class="sxs-lookup"><span data-stu-id="324b1-232">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="324b1-233">如果它引用不存在的列，则会生成异常。</span><span class="sxs-lookup"><span data-stu-id="324b1-233">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="324b1-234">`SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类确定是否使用`Original`， `Current`，或`Proposed`的列值的版本。</span><span class="sxs-lookup"><span data-stu-id="324b1-234">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the `Original`, `Current`, or `Proposed` version of the column value.</span></span> <span data-ttu-id="324b1-235">此功能常用要包含在 UPDATE 语句，以检查存在开放式并发冲突的 WHERE 子句中的原始值。</span><span class="sxs-lookup"><span data-stu-id="324b1-235">This capability is frequently used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="324b1-236">如果更新行时出错，将引发异常，并执行更新，则停止。</span><span class="sxs-lookup"><span data-stu-id="324b1-236">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="324b1-237">若要继续执行更新操作不会遇到错误时生成异常，设置<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>属性`true`之前调用<xref:System.Data.Common.DbDataAdapter.Update%2A>。</span><span class="sxs-lookup"><span data-stu-id="324b1-237">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="324b1-238">你还可能响应中的每个行基础上的错误`RowUpdated`DataAdapter 事件。</span><span class="sxs-lookup"><span data-stu-id="324b1-238">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="324b1-239">若要继续执行更新操作而不生成了异常`RowUpdated`事件中，设置<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>属性<xref:System.Data.Common.RowUpdatedEventArgs>到<xref:System.Data.UpdateStatus.Continue>。</span><span class="sxs-lookup"><span data-stu-id="324b1-239">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="324b1-240">下面的示例使用派生的类中，<xref:System.Data.OleDb.OleDbDataAdapter>到<xref:System.Data.Common.DataAdapter.Update%2A>数据源。</span><span class="sxs-lookup"><span data-stu-id="324b1-240">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source.</span></span> <span data-ttu-id="324b1-241">此示例假定你已创建了<xref:System.Data.OleDb.OleDbDataAdapter>和<xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="324b1-241">This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException"><span data-ttu-id="324b1-242">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</span><span class="sxs-lookup"><span data-stu-id="324b1-242">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>