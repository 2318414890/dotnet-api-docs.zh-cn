<Type Name="DataColumn" FullName="System.Data.DataColumn">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c319d3c600dc2e2da64f51a76ba9219295794b79" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30400171" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataColumn : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataColumn extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataColumn" />
  <TypeSignature Language="VB.NET" Value="Public Class DataColumn&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataColumn : System::ComponentModel::MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ColumnName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 <see cref="T:System.Data.DataTable" /> 中的列的架构。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn>是用于创建的架构的基本构建块<xref:System.Data.DataTable>。 通过将添加一个或多个生成架构<xref:System.Data.DataColumn>对象添加到<xref:System.Data.DataColumnCollection>。 有关详细信息，请参阅[向数据表添加列](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)。  
  
 每个<xref:System.Data.DataColumn>具有<xref:System.Data.DataColumn.DataType%2A>属性，用于确定的数据类型<xref:System.Data.DataColumn>包含。 例如，你可以限制的数据类型为整数，或字符串或十进制数。 因为所包含的数据<xref:System.Data.DataTable>通常合并回其原始的数据源，你必须与匹配数据源中的数据类型。 有关详细信息，请参阅[在 ADO.NET 中的数据类型映射](~/docs/framework/data/adonet/data-type-mappings-in-ado-net.md)。  
  
 属性，如<xref:System.Data.DataColumn.AllowDBNull%2A>， <xref:System.Data.DataColumn.Unique%2A>，和<xref:System.Data.DataColumn.ReadOnly%2A>施加的输入和更新数据，从而帮助确保数据完整性的限制。 你还可以使用<xref:System.Data.DataColumn.AutoIncrement%2A>， <xref:System.Data.DataColumn.AutoIncrementSeed%2A>，和<xref:System.Data.DataColumn.AutoIncrementStep%2A>属性来控制数据自动生成。 有关详细信息<xref:System.Data.DataColumn.AutoIncrement%2A>列，请参阅[创建 AutoIncrement 列](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-autoincrement-columns.md)。 有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
 你还可以确保中的值<xref:System.Data.DataColumn>都是唯一的创建<xref:System.Data.UniqueConstraint>和将其添加到<xref:System.Data.ConstraintCollection>的<xref:System.Data.DataTable>到<xref:System.Data.DataColumn>所属。 有关详细信息，请参阅[数据表约束](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)。  
  
 若要创建之间的关系<xref:System.Data.DataColumn>对象创建<xref:System.Data.DataRelation>对象，并将其添加到<xref:System.Data.DataRelationCollection>的<xref:System.Data.DataSet>。  
  
 你可以使用<xref:System.Data.DataColumn.Expression%2A>属性<xref:System.Data.DataColumn>对象来计算的值在列中，或创建聚合列。 有关详细信息，请参阅[创建表达式列](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-expression-columns.md)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.DataTable>的多次<xref:System.Data.DataColumn>对象。  
  
 [!code-csharp[Classic WebData DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型是安全的多线程读取操作。 你必须同步任何写入操作。</threadsafe>
    <altmember cref="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)" />
    <altmember cref="T:System.Data.DataColumnCollection" />
    <altmember cref="P:System.Data.DataTable.Constraints" />
    <altmember cref="T:System.Data.ConstraintCollection" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
    <altmember cref="T:System.Data.DataRow" />
    <altmember cref="T:System.Data.DataTable" />
    <altmember cref="T:System.Data.DataSet" />
    <altmember cref="M:System.Data.DataTable.NewRow" />
    <altmember cref="T:System.Data.DataRowCollection" />
    <altmember cref="T:System.Data.UniqueConstraint" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:System.Data.DataColumn" /> 类的新实例初始化为类型字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在创建时，<xref:System.Data.DataColumn>对象具有无默认值<xref:System.Data.DataColumn.ColumnName%2A>或<xref:System.Data.DataColumn.Caption%2A>。 当你将其添加到<xref:System.Data.DataColumnCollection>，如果尚未分配到一个名称，将生成的默认名称 （"Column1"、"Column2"等） <xref:System.Data.DataColumn.ColumnName%2A>。  
  
   
  
## Examples  
 下面的示例创建一个新<xref:System.Data.DataColumn>、 设置各种属性，并将其添加到<xref:System.Data.DataColumnCollection>为<xref:System.Data.DataTable>对象。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 <see langword="null" /> 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
        <summary>使用指定的列名称将 <see cref="T:System.Data.DataColumn" /> 类的新实例初始化为类型字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，特定于列的名称将成为<xref:System.Data.DataColumn.Caption%2A>属性值。  
  
   
  
## Examples  
 下面的示例创建一个新<xref:System.Data.DataColumn>与指定<xref:System.Data.DataColumn.ColumnName%2A>。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 <see langword="null" /> 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
        <param name="dataType">支持的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
        <summary>使用指定列名称和数据类型初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建一个新<xref:System.Data.DataColumn>与指定<xref:System.Data.DataColumn.ColumnName%2A>和<xref:System.Data.DataColumn.DataType%2A>。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定任何 <paramref name="dataType" />。</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type, expr As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 <see langword="null" /> 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
        <param name="dataType">支持的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
        <param name="expr">用于创建该列的表达式。 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</param>
        <summary>使用指定的名称、数据类型和表达式初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建计算的列。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定任何 <paramref name="dataType" />。</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr, valuetype System.Data.MappingType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr, System::Data::MappingType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
        <Parameter Name="type" Type="System.Data.MappingType" />
      </Parameters>
      <Docs>
        <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 <see langword="null" /> 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
        <param name="dataType">支持的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
        <param name="expr">用于创建该列的表达式。 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</param>
        <param name="type">
          <see cref="T:System.Data.MappingType" /> 值之一。</param>
        <summary>使用指定名称、数据类型、表达式和确定列是否为特性的值，初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `type`参数集<xref:System.Data.DataColumn.ColumnMapping%2A>属性。 该属性指定如何<xref:System.Data.DataColumn>时映射<xref:System.Data.DataSet>转换为 XML 文档。 例如，如果列命名为"fName，"，它包含的值为"Bob"和`type`设置为`MappingType.Attribute`，XML 元素将如下：  
  
 \<Name fName = 'Bob'/>  
  
 有关如何将列映射到元素或属性的详细信息，请参阅<xref:System.Data.DataColumn.ColumnMapping%2A>属性。  
  
   
  
## Examples  
 下面的示例构造计算的列。  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定任何 <paramref name="dataType" />。</exception>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.ColumnMapping" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName="AllowDBNull">
      <MemberSignature Language="C#" Value="public bool AllowDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AllowDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDBNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示对于属于该表的行，此列中是否允许空值。</summary>
        <value>
          如果允许空值，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建一个新<xref:System.Data.DataColumn>并设置其<xref:System.Data.DataColumn.AllowDBNull%2A>属性`true`。  
  
 [!code-csharp[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Unique" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrement">
      <MemberSignature Language="C#" Value="public bool AutoIncrement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoIncrement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示对于添加到该表中的新行，列是否将列的值自动递增。</summary>
        <value>
          如果列的值自动递增，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此列的类型不是 Int16、 Int32 或 Int64 时设置此属性，<xref:System.Data.DataColumn.DataType%2A>属性被强制转换为 Int32。 如果这是计算的列，则会生成异常。 <xref:System.Data.DataColumn.Expression%2A>属性设置。 仅当此列中，当添加到列集合中，行的值等于默认值时，才使用递增的值。  
  
 你可以创建新的行使用<xref:System.Data.DataRow.ItemArray%2A>属性<xref:System.Data.DataRow>类，并传入的值的数组。 这是对具有的列的潜在问题其<xref:System.Data.DataColumn.AutoIncrement%2A>设置为`true`，因为其值自动生成。 若要使用<xref:System.Data.DataRow.ItemArray%2A>属性、 位置`null`在数组中的列的位置。 有关详细信息，请参阅<xref:System.Data.DataRow.ItemArray%2A>属性<xref:System.Data.DataRow>类。  
  
 如果列的类型是<xref:System.Data.SqlTypes.SqlInt16>或<xref:System.Data.SqlTypes.SqlInt32>，<xref:System.Data.DataColumn.AutoIncrement%2A>不起作用。 请改用 Int16 或 Int32。  
  
 如果列的类型是<xref:System.Data.SqlTypes.SqlInt64>或<xref:System.Data.SqlTypes.SqlDecimal>，<xref:System.Data.DataColumn.AutoIncrement%2A>将仅部分工作。 改为使用 Int64 或十进制数。  
  
 当<xref:System.Data.DataColumn.AutoIncrementStep%2A>值添加到当前的值中，将取消溢出检查。  
  
   
  
## Examples  
 下面的示例设置<xref:System.Data.DataColumn.AutoIncrement%2A>， <xref:System.Data.DataColumn.AutoIncrementSeed%2A>，和<xref:System.Data.DataColumn.AutoIncrementStep%2A>属性。  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">该列是计算所得的列。</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementSeed">
      <MemberSignature Language="C#" Value="public long AutoIncrementSeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementSeed" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementSeed" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementSeed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementSeed { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 <see langword="true" /> 的列的起始值。 默认值为 0。</summary>
        <value>
          <see cref="P:System.Data.DataColumn.AutoIncrement" /> 功能的起始值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例设置<xref:System.Data.DataColumn.AutoIncrement%2A>， <xref:System.Data.DataColumn.AutoIncrementSeed%2A>，和<xref:System.Data.DataColumn.AutoIncrementStep%2A>属性。  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementStep">
      <MemberSignature Language="C#" Value="public long AutoIncrementStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementStep" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementStep" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementStep As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementStep { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 <see langword="true" /> 的列使用的增量。</summary>
        <value>列的值自动递增的数值。 默认值为 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例设置<xref:System.Data.DataColumn.AutoIncrement%2A>， <xref:System.Data.DataColumn.AutoIncrementSeed%2A>，和<xref:System.Data.DataColumn.AutoIncrementStep%2A>属性。  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置的值为零。</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置列的标题。</summary>
        <value>列的标题。 如果没有设置，则返回 <see cref="P:System.Data.DataColumn.ColumnName" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Data.DataColumn.Caption%2A>属性显示的描述性或友好名称<xref:System.Data.DataColumn>。  
  
   
  
## Examples  
 下面的示例创建一个新<xref:System.Data.DataTable>。 然后添加三个<xref:System.Data.DataColumn>对象添加到<xref:System.Data.DataColumnCollection>和设置<xref:System.Data.DataColumn.Caption%2A>每个属性<xref:System.Data.DataColumn>。  
  
 [!code-csharp[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="CheckNotAllowNull">
      <MemberSignature Language="C#" Value="protected internal void CheckNotAllowNull ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CheckNotAllowNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckNotAllowNull" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CheckNotAllowNull ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CheckNotAllowNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUnique">
      <MemberSignature Language="C#" Value="protected void CheckUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckUnique() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckUnique" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckUnique ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckUnique();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMapping">
      <MemberSignature Language="C#" Value="public virtual System.Data.MappingType ColumnMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MappingType ColumnMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ColumnMapping As MappingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::MappingType ColumnMapping { System::Data::MappingType get(); void set(System::Data::MappingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MappingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置列的 <see cref="T:System.Data.MappingType" />。</summary>
        <value>
          <see cref="T:System.Data.MappingType" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ColumnMapping%2A>属性确定如何<xref:System.Data.DataColumn>时映射<xref:System.Data.DataSet>另存为 XML 文档使用<xref:System.Data.DataSet.WriteXml%2A>方法。  
  
 例如，如果<xref:System.Data.DataColumn>名为"customerID，"并将其<xref:System.Data.DataColumn.ColumnMapping%2A>属性设置为`MappingType.Element`，列的值将产生以下 XML:  
  
```  
<Customers>  
 <customerID>ALFKI</customerID>  
......  
 </Customers>  
 <Orders>  
 <OrderID>12345</OrderID>  
 <customerID>ALFKI</customerID>  
......  
 </Orders>  
```  
  
 但是，如果同一列映射到`MappingType.Attribute`，生成下面的 XML:  
  
```  
<Customers customerID="ALFKI"........more attributes.....>  
 <Order orderID="1234"....more attributes..../>  
 <Order orderID="1234"....more attributes..../>  
...... More orders for this customer  
 </Customers>  
```  
  
 使用<xref:System.Data.DataColumn.%23ctor%2A>构造函数包含`type`参数指定如何<xref:System.Data.DataColumn>时映射其<xref:System.Data.DataSet>转换为 XML 文档。  
  
 <xref:System.Data.DataColumn.ColumnMapping%2A>属性对应于构造函数参数`type`。  
  
   
  
## Examples  
 下面的示例设置<xref:System.Data.DataColumn.ColumnMapping%2A>新类型的属性<xref:System.Data.DataColumn>。  
  
 [!code-csharp[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Data.DataColumnCollection" /> 中的列的名称。</summary>
        <value>列的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Data.DataColumn>是创建，包含任何<xref:System.Data.DataColumn.ColumnName%2A>值。 但是，当<xref:System.Data.DataColumn>添加到<xref:System.Data.DataColumnCollection>为<xref:System.Data.DataTable>对象，它指定一个默认名称 （"Column1"、"Column2"等）。  
  
 默认情况下，<xref:System.Data.DataColumn.Caption%2A>值设置为<xref:System.Data.DataColumn.ColumnName%2A>值。  
  
   
  
## Examples  
 下面的示例获取<xref:System.Data.DataColumn.ColumnName%2A>中每个表中每个列<xref:System.Data.DataSet>。 该示例还演示如何创建<xref:System.Data.DataColumn>用新<xref:System.Data.DataColumn.ColumnName%2A>。  
  
 [!code-csharp[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">属性设置为 <see langword="null" /> 或空字符串，且列属于一个集合。</exception>
        <exception cref="T:System.Data.DuplicateNameException">集合中已经存在同名称的列。 名称比较不区分大小写。</exception>
        <altmember cref="P:System.Data.DataColumn.Caption" />
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public Type DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DataType" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DataType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.ColumnTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置存储在列中的数据的类型。</summary>
        <value>一个 <see cref="T:System.Type" /> 对象，它表示列数据类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置<xref:System.Data.DataColumn.DataType%2A>值是的从而保证正确创建和更新数据源中的数据十分重要。  
  
 <xref:System.Data.DataColumn.DataType%2A>属性支持以下基的.NET Framework 数据类型：  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Byte>  
  
-   <xref:System.Char>  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Double>  
  
-   <xref:System.Guid>  
  
-   <xref:System.Int16>  
  
-   <xref:System.Int32>  
  
-   <xref:System.Int64>  
  
-   <xref:System.SByte>  
  
-   <xref:System.Single>  
  
-   <xref:System.String>  
  
-   <xref:System.TimeSpan>  
  
-   <xref:System.UInt16>  
  
-   <xref:System.UInt32>  
  
-   <xref:System.UInt64>  
  
 以及以下数组类型：  
  
-   `Byte[]`  
  
 在列之后更改此属性已开始存储数据时，会生成异常。  
  
 如果<xref:System.Data.DataColumn.AutoIncrement%2A>设置为`true`之前设置<xref:System.Data.DataColumn.DataType%2A>属性，并且尝试将类型设置为除整数类型，则会生成异常。  
  
> [!NOTE]
>  数据类型的列`Byte[]`只要求在某些情况下的特殊处理，因为与基的.NET Framework 数据类型，它是引用数据类型。 如果数据类型的列`Byte[]`用作<xref:System.Data.DataTable.PrimaryKey%2A>，或被<xref:System.Data.DataView.Sort%2A>或<xref:System.Data.DataView.RowFilter%2A>键<xref:System.Data.DataView>，对该列的值的任何更改都必须包括将`Byte[]`列值赋给单独实例化`Byte[]`对象。 此分配需要触发的排序、 筛选和主键操作由使用的内部索引更新。 下面的示例对此进行演示：  
  
```  
byte[] columnValue = (byte[])myDataTable.Rows[0][0];  
byte[] newValue = (byte[])columnValue.Clone();  
newValue[1] = 2;  
myDataTable.Rows[0][0] = newValue;  
```  
  
> [!NOTE]
>  尽管可以将列定义为数据类型不是基的.NET Framework 数据类型和`Byte[]`，这样的列将被视为用户定义的类型，根据以下使用情况限制。 (有关用户定义的类型的详细信息，请参阅[创建和使用用户定义类型](http://msdn.microsoft.com/library/ec0266d2-7e5b-47e4-938a-85ac9d04fa40)。)  
  
-   列不能属于<xref:System.Data.DataView.RowFilter%2A>或<xref:System.Data.DataTable.Select%2A>表达式。  
  
-   如果列用作<xref:System.Data.DataTable.PrimaryKey%2A>，或被<xref:System.Data.DataView.Sort%2A>或<xref:System.Data.DataView>，必须将视为不可变字段; 添加到表后，必须不会更改列数据。  
  
-   其<xref:System.Data.DataColumn.ColumnMapping%2A>可以仅设置为`MappingType.Element`。  
  
-   列的数据类型必须为的实现都必须标记为类<xref:System.SerializableAttribute>，并且如果需要实现<xref:System.Runtime.Serialization.ISerializable>或<xref:System.Xml.Serialization.IXmlSerializable>接口。  
  
-   更改跟踪的支持是有限的。 若要利用<xref:System.Data.DataTable>类的更改跟踪机制，实现列的数据类型的类必须实现<xref:System.ComponentModel.IChangeTracking>接口，或者接管通知的责任<xref:System.Data.DataRow>当列的值已修改，或者通过调用<xref:System.Data.DataRow.SetModified%2A>在该行上或通过将该列的值对象分配给一个单独实例化的列的值对象。  
  
   
  
## Examples  
 下面的示例将添加到多个数据类型的列<xref:System.Data.DataTable>，然后将一个行添加到表。  
  
 [!code-csharp[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">列已经存储了数据。</exception>
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeMode">
      <MemberSignature Language="C#" Value="public System.Data.DataSetDateTime DateTimeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataSetDateTime DateTimeMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DateTimeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DateTimeMode As DataSetDateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSetDateTime DateTimeMode { System::Data::DataSetDateTime get(); void set(System::Data::DataSetDateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSetDateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置列的 <see langword="DateTimeMode" />。</summary>
        <value>所指定的列的 <see cref="T:System.Data.DataSetDateTime" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.DateTimeMode%2A>行添加到后，无法修改<xref:System.Data.DataColumn>，除外修改从<xref:System.Data.DataSetDateTime.Unspecified>和<xref:System.Data.DataSetDateTime.UnspecifiedLocal>，反之亦然。 从修改`UnspecifiedLocal`到`Unspecified`和相反的操作允许，因为这两个选项之间的差异仅在序列化过程中，不影响存储。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.DefaultValueTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在创建新行时获取或设置列的默认值。</summary>
        <value>适合于列的 <see cref="P:System.Data.DataColumn.DataType" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值是自动分配给列的值时<xref:System.Data.DataRow>创建 (例如，日期和时间<xref:System.Data.DataRow>已创建。  
  
 当<xref:System.Data.DataColumn.AutoIncrement%2A>设置为 true，可以有没有默认值。  
  
 你可以创建新的行使用<xref:System.Data.DataRow.ItemArray%2A>属性<xref:System.Data.DataRow>类和传递的值的数组的方法。 这是默认值为列的潜在问题，因为其值自动生成。 若要使用<xref:System.Data.DataRow.ItemArray%2A>属性对这样的列，将放置`null`在数组中的列的位置。 有关更多信息，请参见 <xref:System.Data.DataRow.ItemArray%2A> 属性。  
  
   
  
## Examples  
 下面的示例创建几个<xref:System.Data.DataColumn>对象具有不同的数据类型，并设置适当的默认值为每一列。  
  
 [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">在添加行时，默认值不是列的数据类型的实例。</exception>
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表达式，用于筛选行、计算列中的值或创建聚合列。</summary>
        <value>用来计算列的值，或创建聚合列的表达式。 表达式的返回类型由列的 <see cref="P:System.Data.DataColumn.DataType" /> 来确定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一种用途<xref:System.Data.DataColumn.Expression%2A>属性是创建计算的列。 例如，若要计算税金值，单价乘以特定区域的税率。 由于税率变化区域区域，因此将不可能将单一税率列; 中相反，使用计算值<xref:System.Data.DataColumn.Expression%2A>属性，如以下部分中的 Visual Basic 代码中所示：  
  
 DataSet1.Tables("Products").Columns("tax").Expression = "UnitPrice * 0.086"  
  
 第二个用途是创建聚合列。 类似于计算得出的值，聚合执行基于的完整集合中的行的操作<xref:System.Data.DataTable>。 一个简单的示例是计算返回集中的行数。 这是想要用于此 Visual Basic 代码中所示计数按特定的销售人员，完成的事务数的方法：  
  
```  
DataSet1.Tables("Orders").Columns("OrderCount").Expression = "Count(OrderID)"  
```  
  
## <a name="expression-syntax"></a>表达式语法  
 当你创建一个表达式时，使用<xref:System.Data.DataColumn.ColumnName%2A>属性引用列。 例如，如果<xref:System.Data.DataColumn.ColumnName%2A>一列是"UnitPrice"和另一个"数量"，请将对表达式，如下所示：  
  
 "UnitPrice * Quantity"  
  
> [!NOTE]
>  如果在表达式中使用某列，然后表达式则称该列上具有依赖关系。 如果重命名或删除依赖列，不引发异常。 访问现在中断表达式列时，将引发异常。  
  
 当你创建的筛选器表达式时，将用单引号的字符串：  
  
 "LastName = 'Jones'"  
  
 如果列名称包含任何非字母数字字符或数字开头 （区分大小写） 匹配任何以下保留字，则需要特殊处理，如以下各段中所述。  
  
 And  
  
 之间  
  
 子级  
  
 False  
  
 内  
  
 是  
  
 Like  
  
 Not  
  
 null  
  
 Or  
  
 父级  
  
 True  
  
 如果列名称满足上述条件之一，它必须被包括在方括号或"'"（重音符） 引号。 例如，若要使用名为"列 #"在表达式中的列，则应编写任一"[列 #]":  
  
 总 * [列 #]  
  
 或"\`列 #":  
  
 总 *\`列 #  
  
 如果列名称括在方括号然后任何] 和\\必须通过将它们与反斜杠转义字符 （但不是属于任何其他字符），在它 ("\\") 字符。 如果列名称括在重音字符然后它不能包含在其中任何重音字符。 例如，一个名为的列"列 []\\"，则会写入：  
  
 总 * [列 [\\]\\\\]  
  
 或  
  
 总 *\`列]\\`  
  
## <a name="user-defined-values"></a>用户定义的值  
 可能在表达式中使用用户定义的值与列的值进行比较。 字符串值应括在单引号内 （和字符串值中的每个单引号字符必须通过将它与另一个单引号字符进行转义）。 日期值应包含在井号 （#） 或单引号 （'） 基于数据提供程序。 小数位数和科学记数法是允许的数字值。 例如:  
  
 "FirstName = 'John'"  
  
 "价格 < = 50.00"  
  
 "出生日期 < #1/31/&#82;"  
  
 对于包含枚举值的列，将值强制转换为整数数据类型。 例如:  
  
 "EnumColumn = 5"  
  
## <a name="parsing-literal-expressions"></a>分析文本表达式  
 所有文本表达式必须表示固定区域性区域设置中。 当`DataSet`分析并转换文本表达式时，它始终使用固定区域性，而不是当前区域性。  
  
 用单引号引起值时标识字符串。 例如:  
  
 'John'  
  
 `Boolean` 文本为 true 和 false;它们不带引号在表达式中。  
  
 `Integer` 文本 [+-]？[0-9] + 被视为`System.Int32`，`System.Int64`或`System.Double`。 `System.Double` 可能会丢失精度，具体取决于数的大小。 例如，如果在文本中的号码是 2147483650，`DataSet`首先会尝试将数字作为解析`Int32`。 由于为太大，这种情况将不会成功。 在这种情况下`DataSet`将分析将数字显示为`Int64`，这将会成功。 如果文本是一个大于最大值的一个 Int64，`DataSet`将分析文本使用`Double`。  
  
 使用科学记数法，例如 4.42372 e 的实际文本-30，被分析使用`System.Double`。  
  
 没有科学记数法，但有小数点，实际的文本将被视为`System.Decimal`。 如果数超过了支持的最大或最小值`System.Decimal`，则将其解析为`System.Double`。 例如:  
  
 142526.144524 将转换为`Decimal`。  
  
 345262.78036719560925667 将被视为`Double`。  
  
## <a name="operators"></a>运算符  
 串联被允许使用布尔 AND、 OR 和 NOT 运算符。 你可以使用括号来组合子句，并强制优先。 AND 运算符的优先级高于其他运算符。 例如:  
  
 (姓氏 = Smith 或姓氏 = 'Jones')和名字 = John  
  
 当创建比较表达式时，不允许使用以下运算符：  
  
 \<  
  
 >  
  
 \<=  
  
 >=  
  
 <>  
  
 =  
  
 IN  
  
 LIKE  
  
 在表达式中还支持下列算术运算符：  
  
 \+ （添加）  
  
 \-（减号）  
  
 \* （乘）  
  
 / （分割）  
  
 %（取模）  
  
## <a name="string-operators"></a>字符串运算符  
 若要连接字符串，使用 + 字符。 值<xref:System.Data.DataSet.CaseSensitive%2A>属性<xref:System.Data.DataSet>类确定字符串比较是否区分大小写。 但是，你可以重写该值与<xref:System.Data.DataTable.CaseSensitive%2A>属性<xref:System.Data.DataTable>类。  
  
## <a name="wildcard-characters"></a>通配符  
 同时 * 和 %可互换的 LIKE 比较中的通配符字符。 如果 LIKE 子句中的字符串包含 * 或 %，这些字符应括在方括号 ([]) 中。 如果在子句中有一个方括号，每个括号字符应括在方括号中 （，例如 [[] 或 []]） 中。 开头和末尾模式中，或在模式的末尾或模式的起始位置，都允许使用通配符。 例如:  
  
 "项目名称类似 * 产品\*"  
  
 "项目名称类似 * 产品"  
  
 "ItemName LIKE 'product*'"  
  
 字符串中间不允许使用通配符。 例如，te * xt 不允许。  
  
## <a name="parentchild-relation-referencing"></a>引用的父/子关系  
 在表达式中通过预先计算列名称与引用父表`Parent`。 例如，`Parent.Price`引用名为父表的列`Price`。  
  
 当子具有多个父行时，使用 Parent(RelationName)。列名称。 例如，Parent(RelationName)。价格引用名价格为通过关系的父表的列。  
  
 可能通过预先计算列名称与在表达式中引用子表中的列`Child`。 但是，由于子关系可能返回多个行，你必须在聚合函数包括对子列的引用。 例如，`Sum(Child.Price)`将返回名为所列的总和`Price`子表中。  
  
 如果表具有多个子级，则语法是： `Child(RelationName)`。 例如，如果表具有两个名为的子表`Customers`和`Orders`，和<xref:System.Data.DataRelation>对象命名为`Customers2Orders`，则引用将如下所示：  
  
 Avg(Child(Customers2Orders).Quantity)  
  
## <a name="aggregates"></a>聚合  
 支持以下聚合类型：  
  
 Sum (Sum)  
  
 Avg （平均值）  
  
 最小值 （最小值）  
  
 最大 （最大值）  
  
 计数 （计数）  
  
 StDev （统计标准偏差）  
  
 Var （统计方差）。  
  
 聚合通常沿着关系执行。 如父/子关系引用前面讨论的所述使用上面列出的函数和子表列之一创建的聚合表达式。 例如:  
  
 Avg(Child.Price)  
  
 Avg(Child(Orders2Details).Price)  
  
 此外可以对单个表执行聚合。 例如，若要在列中创建的图形摘要名为"Price":  
  
 Sum(Price)  
  
> [!NOTE]
>  如果你使用单个表来创建聚合，则不存在任何分组依据功能。 相反，所有行将列中都显示相同的值。  
  
 如果表具有任何行，聚合函数将返回`null`。  
  
 数据类型可以始终通过检查来确定<xref:System.Data.DataColumn.DataType%2A>列属性。 你还可以将转换使用 Convert 函数下, 一节中所示的数据类型。  
  
 聚合可以仅应用于单个列和聚合，可以使用任何其他表达式。  
  
## <a name="functions"></a>函数  
 此外支持以下函数：  
  
 `CONVERT`  
  
|||  
|-|-|  
|描述|将特定表达式转换为指定的.NET Framework 类型。|  
|语法|转换 (`expression`， `type`)|  
|自变量|`expression` --表达式将转换。<br /><br /> `type` --将值转换的.NET Framework 类型。|  
  
 Example: myDataColumn.Expression="Convert(total, 'System.Int32')"  
  
 所有转换都是有效有以下例外：`Boolean`来回可强迫转换`Byte`， `SByte`， `Int16`， `Int32`， `Int64`， `UInt16`， `UInt32`， `UInt64`， `String`和其本身。 `Char` 与可以强制`Int32`， `UInt32`， `String`，和其本身。 `DateTime` 与可以强制`String`和其本身。 `TimeSpan` 与可以强制`String`和其本身。  
  
 `LEN`  
  
|||  
|-|-|  
|描述|获取一个字符串的长度|  
|语法|LEN(`expression`)|  
|自变量|`expression` 要进行求值--字符串。|  
  
 Example: myDataColumn.Expression="Len(ItemName)"  
  
 `ISNULL`  
  
|||  
|-|-|  
|描述|检查已检查的表达式或替换值的表达式并返回。|  
|语法|ISNULL(`expression`, `replacementvalue`)|  
|自变量|`expression` --若要检查的表达式。<br /><br /> `replacementvalue` --如果表达式是`null`，`replacementvalue`返回。|  
  
 Example: myDataColumn.Expression="IsNull(price, -1)"  
  
 `IIF`  
  
|||  
|-|-|  
|描述|获取根据逻辑表达式的结果的两个值之一。|  
|语法|IIF(`expr`, `truepart`, `falsepart`)|  
|自变量|`expr` --要计算的表达式。<br /><br /> `truepart` --表达式为 true 时要返回的值。<br /><br /> `falsepart` --表达式为 false 时要返回的值。|  
  
 Example: myDataColumn.Expression = "IIF(total>1000, 'expensive', 'dear')  
  
 `TRIM`  
  
|||  
|-|-|  
|描述|删除所有前导空格和尾随空白字符，如 \r、 \n、 \t，|  
|语法|TRIM(`expression`)|  
|自变量|`expression` --以修整的表达式。|  
  
 `SUBSTRING`  
  
|||  
|-|-|  
|描述|获取从字符串中指定的点处开始的指定长度的子字符串。|  
|语法|子字符串 (`expression`， `start`， `length`)|  
|自变量|`expression` --源字符串的子字符串。<br /><br /> `start` -指定子字符串的起始位置的整数。<br /><br /> `length` -指定子字符串的长度的整数。|  
  
 Example: myDataColumn.Expression = "SUBSTRING(phone, 7, 8)"  
  
> [!NOTE]
>  你可以重置<xref:System.Data.DataColumn.Expression%2A>通过将它分配 null 值或空字符串的属性。 如果表达式列上设置默认值，所有以前已填充的行分配后的默认值<xref:System.Data.DataColumn.Expression%2A>属性重置。  
  
   
  
## Examples  
 下面的示例创建中的三个列<xref:System.Data.DataTable>。 第二个和第三个列包含表达式;第二个计算税使用变量的税率，并第三个将计算的结果添加到第一列的值。 生成的表所示<xref:System.Windows.Forms.DataGrid>控件。  
  
 [!code-csharp[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">将 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 或 <see cref="P:System.Data.DataColumn.Unique" /> 属性设置为 <see langword="true" />。</exception>
        <exception cref="T:System.FormatException">在使用 CONVERT 函数时，表达式的计算结果为一个字符串，但该字符串不包含可以转换成类型参数的表示形式。</exception>
        <exception cref="T:System.InvalidCastException">在使用 CONVERT 函数时，所请求的强制转换不可能完成。 有关可能的强制转换的详细信息，请参见下面一节中的 Conversion 函数。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在使用 SUBSTRING 函数时，起始参数超出范围。  
  
 - 或者 -  
  
 在使用 SUBSTRING 函数时，长度参数超出范围。</exception>
        <exception cref="T:System.Exception">在使用 LEN 函数或 TRIM 函数时，表达式的计算结果不是字符串。 这包括计算结果为 <see cref="T:System.Char" /> 的表达式。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="T:System.Data.DataColumn" /> 相关的自定义用户信息的集合。</summary>
        <value>自定义信息的 <see cref="T:System.Data.PropertyCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ExtendedProperties%2A>属性，您可以存储与对象的自定义信息。 例如，你可以存储的数据应在进行刷新的时间。  
  
 扩展的属性的类型必须为<xref:System.String>。 并不属于类型的属性<xref:System.String>时不会保留<xref:System.Data.DataColumn>以 XML 形式写入。  
  
   
  
## Examples  
 下面的示例将添加到自定义属性<xref:System.Data.PropertyCollection>返回<xref:System.Data.DataColumn.ExtendedProperties%2A>属性。 第二个示例检索自定义属性。  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.PropertyCollection" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文本列的最大长度。</summary>
        <value>列的最大长度（以字符数表示）。 如果列没有最大长度，该值为 -1（默认值）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.MaxLength%2A>对于非文本列，将忽略属性。 A<xref:System.ArgumentException>是否会引发异常，如果将分配<xref:System.Data.DataColumn.MaxLength%2A>到非字符串列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Data.DataColumn" /> 的命名空间。</summary>
        <value>
          <see cref="T:System.Data.DataColumn" /> 的命名空间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.Namespace%2A>时读取和写入 XML 文档为使用属性<xref:System.Data.DataTable>中<xref:System.Data.DataSet>使用<xref:System.Data.DataSet.ReadXml%2A>， <xref:System.Data.DataSet.WriteXml%2A>， <xref:System.Data.DataSet.ReadXmlSchema%2A>，或<xref:System.Data.DataSet.WriteXmlSchema%2A>方法。  
  
 XML 文档的命名空间用于确定范围 XML 特性和元素时读取到<xref:System.Data.DataSet>。 例如，<xref:System.Data.DataSet>包含架构从文档中读取，它具有命名空间"myCompany，"且尝试读取数据 (与<xref:System.Data.DataSet.ReadXml%2A>方法) 从文档中包含的命名空间"theirCompany。" 与现有架构不对应的任何数据将被忽略。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">该命名空间已有数据。</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">参数引用。</param>
        <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public int Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ordinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Ordinal { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取列在 <see cref="T:System.Data.DataColumnCollection" /> 集合中的位置（从零开始）。</summary>
        <value>列的位置。 如果列不是集合的成员，获取 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例返回列的列名称、 序号和数据类型。  
  
 [!code-csharp[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 XML 前缀，该前缀是 <see cref="T:System.Data.DataTable" /> 的命名空间的别名。</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> 命名空间的 XML 前缀。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Prefix%2A>整个 XML 文档中用于标识元素的命名空间属于<xref:System.Data.DataSet>对象 (通过设置，如同<xref:System.Data.DataSet.Namespace%2A>属性)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">参数引用。</param>
        <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示一旦向表中添加了行，列是否还允许更改。</summary>
        <value>
          如果列为只读，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建<xref:System.Data.DataColumn>并设置其<xref:System.Data.DataColumn.ReadOnly%2A>属性`true`。  
  
 [!code-csharp[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">对于计算所得的列，此属性设置为 <see langword="false" />。</exception>
        <altmember cref="P:System.Data.DataColumn.Unique" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
      </Docs>
    </Member>
    <Member MemberName="SetOrdinal">
      <MemberSignature Language="C#" Value="public void SetOrdinal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrdinal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.SetOrdinal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOrdinal (ordinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOrdinal(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">指定的序号。</param>
        <summary>将 <see cref="T:System.Data.DataColumn" /> 的序号或位置更改为指定的序号或位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Data.DataColumn> 的序号或位置更改为指定的序号或位置。 如果序号小于 0 或大于列 – 1 （大于最后一列的序号） 现有数然后无效<xref:System.ArgumentException>引发。  
  
 当你更改列的序号时，请列移动到的列的集合中的新位置。 上一个和新序号之间的任何列将重新编号，针对列的新序号进行调整。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Table" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Table As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTable ^ Table { System::Data::DataTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取列所属的 <see cref="T:System.Data.DataTable" />。</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> 所属的 <see cref="T:System.Data.DataColumn" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例返回父表的<xref:System.Data.DataColumn>通过其<xref:System.Data.DataColumn.Table%2A>属性。  
  
 [!code-csharp[Classic WebData DataColumn.Table Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Table Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取列的 <see cref="P:System.Data.DataColumn.Expression" />（如果存在的话）。</summary>
        <returns>如果设置了属性；则为 <see cref="P:System.Data.DataColumn.Expression" /> 的值；否则为 <see cref="P:System.Data.DataColumn.ColumnName" /> 的属性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例使用<xref:System.Data.DataColumn.ToString%2A>属性返回的集合的每个成员的默认字符串<xref:System.Data.DataColumn>对象。  
  
 [!code-csharp[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public bool Unique { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Unique" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Unique" />
      <MemberSignature Language="VB.NET" Value="Public Property Unique As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Unique { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示列的每一行中的值是否必须是唯一的。</summary>
        <value>
          如果值必须是唯一的，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一旦此属性从 false 更改为 true，则将在此列以确保值都是唯一上创建唯一约束。  
  
   
  
## Examples  
 下面的示例创建新<xref:System.Data.DataColumn>、 设置其属性，并将其添加到表的列集合。  
  
 [!code-csharp[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">列是计算出的列。</exception>
        <altmember cref="P:System.Data.DataColumn.AllowDBNull" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <altmember cref="P:System.Data.DataTable.Constraints" />
      </Docs>
    </Member>
  </Members>
</Type>