<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6c850ad4d898af0ca92a20c28ec46edd2944b59e" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57946841" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供编码和解码逻辑。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类包含编码和解码类中的方法使用如的逻辑<xref:System.Web.HttpUtility>， <xref:System.Web.HttpServerUtility>，和<xref:System.Net.HttpResponseHeader>。  
  
 可以继承自<xref:System.Web.Util.HttpEncoder>类并重写其行为以进行自定义默认的编码和解码的 ASP.NET 的行为。 然后设置<xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A>属性的<xref:System.Web.Configuration.HttpRuntimeSection>类，以配置自定义类。  
  
 用于编码和解码的自定义类派生自<xref:System.Web.Util.HttpEncoder>可以重写内置 ASP.NET 编码和解码行为或更改只选择了它的方面。  
  
 在 ASP.NET 中来取代或补充以下编码行为，可以配置的自定义编码类型：  
  
-   HTML 编码  
  
-   HTML 特性编码  
  
-   URL 编码  
  
-   URL 路径编码  
  
-   HTTP 标头名称和标头值编码  
  
 默认情况下，ASP.NET 应用程序配置为使用<xref:System.Web.Security.AntiXss.AntiXssEncoder>键入对于所有输出编码。  
  
 下面的示例从应用程序级别 Web.config 文件显示如何<xref:System.Web.Security.AntiXss.AntiXssEncoder>类型设置为 ASP.NET 应用程序：  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 该示例设置中的配置设置<xref:System.Web.Security.AntiXss.AntiXssEncoder>类来执行所有输出应用程序中的编码。 有关详细信息，请参阅<xref:System.Web.Security.AntiXss.AntiXssEncoder>类概述。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>如果您创建一个自定义编码器类，重写基方法的类的基类派生的编码器可能引发异常从任何重写方法。 但是，在以下情况下引发此类异常可能会导致意外行为在 ASP.NET 中： 
-如果 ASP.NET 将呈现一个错误页面，导致未处理的异常引发自定义编码器，ASP.NET 将不会尝试对其错误输出通过调入自定义编码器进行编码。 这样可避免递归错误条件。  
  
-当 ASP.NET HTTP 标头发送到 IIS，ASP.NET 有未经处理的异常无法预配。 因此，将呈现标准 ASP.NET 错误页 （如果配置设置允许要显示此页）。</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Util.HttpEncoder" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置将在应用程序中使用的 <see cref="T:System.Web.Util.HttpEncoder" /> 类型。</summary>
        <value>对将要使用的编码器/解码器类型的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果派生<xref:System.Web.Util.HttpEncoder>在配置文件中，指定类型<xref:System.Web.Util.HttpEncoder.Current%2A>属性返回对自定义类型的引用。 但是，如果使用没有自定义编码器，该属性将返回到默认 ASP.NET 的引用<xref:System.Web.Util.HttpEncoder>实例。  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A>属性不是线程安全。 只能在应用程序中设置此属性`Application_Start`方法，因为`Application_Start`在单个线程上运行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">分配给此属性的编码器实例是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对 ASP.NET 的默认编码器的引用。</summary>
        <value>对默认编码器的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 常见的编码问题是，默认 ASP.NET<xref:System.Web.Util.HttpEncoder.UrlEncode%2A>行为将"+"字符转换为空格。 从历史上看，"+"字符已经成为 Internet 约定，在 URL 中的空格字符编码到更具可读性的方式。 但是，根据标准，空格字符是应该为"%20"，而不是编码为"+"字符。 ASP.NET 使您可以实现更多的标准合规编码算法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string *  *  -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string *  *  -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">要编码的 HTTP 标头名称。</param>
        <param name="headerValue">要编码的 HTTP 标头值。</param>
        <param name="encodedHeaderName">当此方法返回时，返回值包含要用于 HTTP 标头的已编码名称。 此参数未经初始化即被传递。</param>
        <param name="encodedHeaderValue">当此方法返回时，返回值包含要用于 HTTP 标头的已编码值。 此参数未经初始化即被传递。</param>
        <summary>将标头名称和值编码为可用作 HTTP 标头的字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法采用从输入的字符串`headerName`和`headerValue`参数并对它们进行编码。 为输出参数返回已编码的值。  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法使用以下逻辑进行编码标头名称和值：  
  
-   其 Unicode 值小于 32，除 ASCII 字符，第 9 的 ASCII 字符的所有字符都都转换为格式的 URL 编码`%NN`其中`N`字符表示十六进制值。  
  
-   ASCII 字符 9 （水平制表符） 不是 URL 编码。  
  
-   127 的 ASCII 字符编码为`%7F`。  
  
-   所有其他字符不进行编码。  
  
    > [!NOTE]
    >  尽管此方法可以用于 Unicode 值，但它通常用于 ASCII 范围内的值。  
  
 默认实现<xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法将返回的值`headerValue`中`encodedHeaderValue`如果`headerValue`是`null`或为空字符串。 同样的默认实现返回的值`headerName`中`encodedHeaderName`如果`headerName`是`null`或为空字符串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <param name="output">要将已编码值写入到的文本编写器。</param>
        <summary>将传入值编码为可插入 HTML 特性（由单引号或双引号分隔）的字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>方法通过使用标准的 HTML 实体对字符进行编码。 例如， `<` （左的尖括号） 编码为`&lt;`并`\`（反斜杠） 编码为`&#92;`。  
  
 则可以安全地使用<xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>单引号和双引号中的属性中。 值必须用引号引起来。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要解码的字符串。</param>
        <param name="output">要将已解码值写入到的文本编写器。</param>
        <summary>解码 HTML 编码的字符串中的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了 ASP.NET 解码逻辑可以解码的字符序列。  
  
|字符序列|规则|  
|------------------------|----------|  
|`&#NNN;` （的 ASCII 字符十进制代码）。|解码为指定的 ASCII 字符。 字符序列之后的 # 字符开始的第一个数字和分号处完成。|  
|`&#xZZ;` （ASCII 字符的十六进制代码）。|解码为指定的 ASCII 字符。 该编码的格式而不十进制值使用十六进制字符来指定的字符。 字符序列之后的 # 字符开始的第一个数字和分号处完成。|  
|命名的 HTML 实体。|解码为等效的 ASCII 字符。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <param name="output">要将已编码值写入到的文本编写器。</param>
        <summary>将字符串编码为 HTML 编码的字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了 ASP.NET 的编码逻辑可以解码的字符序列。  
  
|字符|编码为|  
|---------------|----------------|  
|`<` （左的尖括号）|`&lt;`|  
|`>` （右尖括号）|`&gt;`|  
|`"` （双引号）|`&quot;`|  
|`&` （与号）|`&amp;`|  
|`\` （反斜杠）|`&#92;`|  
|从 160 到 255 之间的 ASCII 字符|`&#NNN;`其中`NNN`是三位十进制字符代码|  
  
 如果重写<xref:System.Web.Util.HttpEncoder.HtmlEncode%2A>方法，必须生成的安全在 HTML 特性中带双引号或单引号的输出。 这适合于在分析由 Razor 引擎，其中标记和代码可以结合使用，如\<标记 attr ="@value">。 此外，@ 运算符不是上下文感知当 Razor 引擎进行处理，因此它将调用<xref:System.Web.Util.HttpEncoder.HtmlEncode%2A>而非<xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <summary>对字符串进行编码。</summary>
        <returns>已编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 编码可确保所有浏览器正确地传输 URL 字符串中的文本。 可能会截断或某些浏览器已损坏等问号 （？）、 and 符 (&)、 斜杠 （/） 和空格字符。 因此，必须对这些字符进行编码。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要编码的字节数组。</param>
        <param name="offset"><paramref name="bytes" /> 数组中作为编码起始点的位置。</param>
        <param name="count"><paramref name="bytes" /> 数组中要编码的项数。</param>
        <summary>将 URL 中不允许使用的字符数组编码为等效十六进制字符实体。</summary>
        <returns>已编码字符的数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>方法中的多个 URL 编码方法由调用<xref:System.Web.HttpUtility>类。  
  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>方法进行 URL 编码并不处于的一套 ASCII 字符的任何字符都被认为是安全的 URL。 空格编码为 ASCII"`+"`字符。 ASCII URL 安全字符包括 ASCI 字符 (A 到 Z 和一个到 z)，数字 (0 到 9) 和一些标点符号。 下表列出了被视为 URL 安全 ASCII 字符的标点符号。  
  
|字符|描述|  
|---------------|-----------------|  
|-|连字符|  
|_|下划线|  
|.|段 （点）|  
|!|感叹号|  
|*|星号 （*）|  
|(|左括号|  
|)|右括号|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小于零或大于 <paramref name="bytes" /> 数组的长度。  
  
- 或 - 
 <paramref name="count" /> 小于零或 <paramref name="count" /> 加上 <paramref name="offset" /> 大于 <paramref name="bytes" /> 数组的长度。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <summary>对 URL 的子节进行编码。</summary>
        <returns>URL 编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> 方法由 <xref:System.Web.HttpUtility.UrlPathEncode%2A> 方法调用。 <xref:System.Web.HttpUtility.UrlPathEncode%2A>方法执行以下步骤：  
  
-   适用的编码逻辑<xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A>到的 URL （这不包括查询字符串） 的路径部分的方法。 该方法假定 URL 已编码为 utf-8 字符串。  
  
-   将非空格编码，以便在生成编码的字符串中使用的前 128 个 ASCII 字符的一个子集。 在 Unicode 值 128 和更高版本，或 32 且小于，任何字符进行 URL 编码。  
  
-   将空格编码为 %20。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>