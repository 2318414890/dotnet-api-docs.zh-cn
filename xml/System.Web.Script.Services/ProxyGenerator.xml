<Type Name="ProxyGenerator" FullName="System.Web.Script.Services.ProxyGenerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f016ed0467b391ddf0cb3d857f17559470dc4f8" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39937240" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ProxyGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProxyGenerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Services.ProxyGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class ProxyGenerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProxyGenerator abstract sealed" />
  <TypeSignature Language="F#" Value="type ProxyGenerator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示代理代码生成器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Script.Services.ProxyGenerator.GetClientProxyScript%2A>方法来检索用于生成代理类的 Web 服务、 Windows Communication Foundation 服务，或具有静态页面方法的 ECMAScript (JavaScript) 代码<xref:System.Web.Services.WebMethodAttribute>应用属性。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetClientProxyScript">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>检索指定类型的代理生成代码。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetClientProxyScript">
      <MemberSignature Language="C#" Value="public static string GetClientProxyScript (Type type, string path, bool debug);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetClientProxyScript(class System.Type type, string path, bool debug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Services.ProxyGenerator.GetClientProxyScript(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetClientProxyScript(Type ^ type, System::String ^ path, bool debug);" />
      <MemberSignature Language="F#" Value="static member GetClientProxyScript : Type * string * bool -&gt; string" Usage="System.Web.Script.Services.ProxyGenerator.GetClientProxyScript (type, path, debug)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="debug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">要获取其脚本的对象的类型。</param>
        <param name="path">终结点的位置。</param>
        <param name="debug">
          <see langword="true" /> 表示包含 XML 代码注释；否则为 <see langword="false" />。</param>
        <summary>检索指定类型的代理生成代码。</summary>
        <returns>代理生成代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Services.ProxyGenerator.GetClientProxyScript%2A>方法返回代理生成 ECMAScript (JavaScript) 的 Web 服务、 Windows Communication Foundation (WCF) 服务，或具有静态页面方法<xref:System.Web.Services.WebMethodAttribute>应用属性。 `type`参数包含 Web 服务类、 WCF 服务类或 ASP.NET page 类的类型。 当类型是一个 WCF 服务类或接口、 类或接口必须具有<xref:System.ServiceModel.ServiceContractAttribute>应用属性。 如果`debug`参数是`true`，生成的代码包含可用于 Visual Studio 中的 IntelliSense 支持或其他开发环境的 XML 代码注释。 因此，在生成的大小是脚本的更大。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 或 <paramref name="path" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">代理生成不支持该指定类型。</exception>
        <altmember cref="T:System.ServiceModel.ServiceContractAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetClientProxyScript">
      <MemberSignature Language="C#" Value="public static string GetClientProxyScript (Type type, string path, bool debug, System.ServiceModel.Description.ServiceEndpoint serviceEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetClientProxyScript(class System.Type type, string path, bool debug, class System.ServiceModel.Description.ServiceEndpoint serviceEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Services.ProxyGenerator.GetClientProxyScript(System.Type,System.String,System.Boolean,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetClientProxyScript(Type ^ type, System::String ^ path, bool debug, System::ServiceModel::Description::ServiceEndpoint ^ serviceEndpoint);" />
      <MemberSignature Language="F#" Value="static member GetClientProxyScript : Type * string * bool * System.ServiceModel.Description.ServiceEndpoint -&gt; string" Usage="System.Web.Script.Services.ProxyGenerator.GetClientProxyScript (type, path, debug, serviceEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="debug" Type="System.Boolean" />
        <Parameter Name="serviceEndpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="type">要获取其脚本的对象的类型。</param>
        <param name="path">终结点的位置。</param>
        <param name="debug">
          <see langword="true" /> 表示包含 XML 代码注释；否则为 <see langword="false" />。</param>
        <param name="serviceEndpoint">服务终结点。</param>
        <summary>使用路径和服务终结点检索指定类型的代理生成代码。</summary>
        <returns>代理生成代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Services.ProxyGenerator.GetClientProxyScript%2A>方法返回代理生成 ECMAScript (JavaScript) 的 Web 服务、 Windows Communication Foundation (WCF) 服务，或具有静态页面方法<xref:System.Web.Services.WebMethodAttribute>应用属性。 `type`参数包含 Web 服务类、 WCF 服务类或 ASP.NET page 类的类型。 当类型是一个 WCF 服务类或接口、 类或接口必须具有<xref:System.ServiceModel.ServiceContractAttribute>应用属性。 如果`debug`参数是`true`，生成的代码包含可用于 Visual Studio 中的 IntelliSense 支持或其他开发环境的 XML 代码注释。 因此，在生成的大小是脚本的更大。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 或 <paramref name="path" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">代理生成不支持该指定类型。</exception>
        <altmember cref="T:System.ServiceModel.ServiceContractAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>