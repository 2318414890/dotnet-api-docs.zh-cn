<Type Name="GenerateScriptTypeAttribute" FullName="System.Web.Script.Services.GenerateScriptTypeAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8e72b06e5592385d749529cf49ae5dbf1742fe77" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class GenerateScriptTypeAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GenerateScriptTypeAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Services.GenerateScriptTypeAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GenerateScriptTypeAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class GenerateScriptTypeAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Method, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="414a0-101">指定服务器类型必须在代理对象中生成。</span>
      <span class="sxs-lookup">
        <span data-stu-id="414a0-101">Specifies that the server type must be generated in the proxy object.</span>
      </span>
      <span data-ttu-id="414a0-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="414a0-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="414a0-103">在启用了 AJAX 的 ASP.NET Web 站点中，ASP.NET 可以自动生成 Web 服务类的方法的代理对象。</span><span class="sxs-lookup"><span data-stu-id="414a0-103">In AJAX-enabled ASP.NET Web sites, ASP.NET can automatically generate proxy objects for methods of a Web service class.</span></span> <span data-ttu-id="414a0-104">这一点的大多数顶级类型的输入的参数和返回值的任何 Web 方法标记有<xref:System.Web.Script.Services.ScriptServiceAttribute>。</span><span class="sxs-lookup"><span data-stu-id="414a0-104">It does this for most top-level types for the input parameters and return values of any Web methods that are marked with <xref:System.Web.Script.Services.ScriptServiceAttribute>.</span></span>  
  
 <span data-ttu-id="414a0-105">在其他情况下，如果你的代理对象对于服务器类型，生成你必须应用<xref:System.Web.Script.Services.GenerateScriptTypeAttribute>手动。</span><span class="sxs-lookup"><span data-stu-id="414a0-105">In other cases, if you proxy objects generated for server types, you must apply <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> manually.</span></span> <span data-ttu-id="414a0-106">你可以将应用<xref:System.Web.Script.Services.GenerateScriptTypeAttribute>到 Web 服务本身或到任何 Web 服务方法或`static`页方法标记为<xref:System.Web.Services.WebMethodAttribute>。</span><span class="sxs-lookup"><span data-stu-id="414a0-106">You can apply <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> to the Web service itself or to any Web service method or `static` page method marked with <xref:System.Web.Services.WebMethodAttribute>.</span></span>  
  
 <span data-ttu-id="414a0-107">在某些情况下，即使的类型对应的输入的参数或返回值的 Web 服务方法中，代理将不会自动生成。</span><span class="sxs-lookup"><span data-stu-id="414a0-107">In some cases, even if the type corresponds to an input parameter or return value of a Web service method, the proxy will not be generated automatically.</span></span> <span data-ttu-id="414a0-108">在这种情况下，你必须使用<xref:System.Web.Script.Services.GenerateScriptTypeAttribute>属性以生成类型的代理对象。</span><span class="sxs-lookup"><span data-stu-id="414a0-108">In that case, you must use the <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> attribute to generate the proxy object for the type.</span></span> <span data-ttu-id="414a0-109">泛型类型和数组，如具有多个自变量，将发生这种情况`Dictionary<string,<T>>`。</span><span class="sxs-lookup"><span data-stu-id="414a0-109">This occurs for generic types and arrays that have more than one argument, such as `Dictionary<string,<T>>`.</span></span>  
  
 <span data-ttu-id="414a0-110">一个或多个实例<xref:System.Web.Script.Services.GenerateScriptTypeAttribute>可以应用于 Web 服务类或方法。</span><span class="sxs-lookup"><span data-stu-id="414a0-110">One or more instances of <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> can be applied to a Web service class or method.</span></span> <span data-ttu-id="414a0-111">然后，ASP.NET 将生成一个 ECMAScript (JavaScript) 代理类，用于引用的每个声明的每个顶级类型<xref:System.Web.Script.Services.GenerateScriptTypeAttribute>。</span><span class="sxs-lookup"><span data-stu-id="414a0-111">ASP.NET will then generate an ECMAScript (JavaScript) proxy class for each top-level type that is referenced by each declaration of <xref:System.Web.Script.Services.GenerateScriptTypeAttribute>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="414a0-112">如果你想要生成代理对象对于嵌套类型，则必须手动应用<xref:System.Web.Script.Services.GenerateScriptTypeAttribute>对每个嵌套类型。</span><span class="sxs-lookup"><span data-stu-id="414a0-112">If you want to generate proxy objects for nested types, you must manually apply <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> to each nested type.</span></span> <span data-ttu-id="414a0-113">ASP.NET 生成仅为顶级类型的代理，并且不会不自动以递归方式将特性应用于嵌套类型。</span><span class="sxs-lookup"><span data-stu-id="414a0-113">ASP.NET generates proxies only for top-level types and does not automatically recursively apply the attribute to nested types.</span></span>  
  
 <span data-ttu-id="414a0-114">有关如何使用属性的详细信息，请参阅[属性](~/docs/standard/attributes/index.md)。</span><span class="sxs-lookup"><span data-stu-id="414a0-114">For more information about how to use attributes, see [Attributes](~/docs/standard/attributes/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="414a0-115">下面的示例演示如何将应用<xref:System.Web.Script.Services.GenerateScriptTypeAttribute>到 Web 服务类和 Web 方法。</span><span class="sxs-lookup"><span data-stu-id="414a0-115">The following example shows how to apply <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> to a Web service class and to a Web method.</span></span> <span data-ttu-id="414a0-116">因此，`ColorObject`类型和其嵌套的类型`FavoriteColors`纳入代理对象。</span><span class="sxs-lookup"><span data-stu-id="414a0-116">As a result, the `ColorObject` type and its nested type `FavoriteColors` are included in the proxy object.</span></span>  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GenerateScriptTypeAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Services.GenerateScriptTypeAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GenerateScriptTypeAttribute(Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="414a0-117">要包括在代理类中的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="414a0-117">The type to include in the proxy class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="414a0-118">为指定类型初始化 <see cref="T:System.Web.Script.Services.GenerateScriptTypeAttribute" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="414a0-118">Initializes a new instance of the <see cref="T:System.Web.Script.Services.GenerateScriptTypeAttribute" /> class for the specified type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="414a0-119"><xref:System.Web.Script.Services.GenerateScriptTypeAttribute.ScriptTypeId%2A>属性是可选的命名参数，此构造函数。</span><span class="sxs-lookup"><span data-stu-id="414a0-119">The <xref:System.Web.Script.Services.GenerateScriptTypeAttribute.ScriptTypeId%2A> property is an optional named parameter for this constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="414a0-120">下面的示例演示如何使用<xref:System.Web.Script.Services.GenerateScriptTypeAttribute>若要生成的指定类型的元数据标记使用的特定类型标识符代理对象。</span><span class="sxs-lookup"><span data-stu-id="414a0-120">The following example shows how to use <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> to generate a proxy object for the specified type that uses a specific type identifier for the metadata marker.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="414a0-121">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="414a0-121">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptTypeId">
      <MemberSignature Language="C#" Value="public string ScriptTypeId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptTypeId" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Services.GenerateScriptTypeAttribute.ScriptTypeId" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptTypeId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptTypeId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="414a0-122">获取或设置类型元数据标记的类型标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="414a0-122">Gets or sets the type identifier for the type metadata marker.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="414a0-123">序列化的 JavaScript 对象符号 (JSON) 字符串中的类型元数据标记的类型标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="414a0-123">The type identifier for the type metadata marker on the serialized JavaScript Object Notation (JSON) string.</span>
          </span>
          <span data-ttu-id="414a0-124">默认值为此类型的程序集限定名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="414a0-124">The default value is the assembly-qualified name of the type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="414a0-125">这是一个可选属性。</span><span class="sxs-lookup"><span data-stu-id="414a0-125">This is an optional property.</span></span> <span data-ttu-id="414a0-126">如果指定的值<xref:System.Web.Script.Services.GenerateScriptTypeAttribute.ScriptTypeId%2A>上序列化的 JSON 字符串，而不是类型的程序集限定名称中使用 for 类型元数据标记 ("__type")。</span><span class="sxs-lookup"><span data-stu-id="414a0-126">If specified, the value of <xref:System.Web.Script.Services.GenerateScriptTypeAttribute.ScriptTypeId%2A> is used for the type metadata marker ("__type") on the serialized JSON string instead of the assembly-qualified name of the type.</span></span> <span data-ttu-id="414a0-127">在反序列化过程的类型解析程序与该键相关联<xref:System.Web.Script.Serialization.JavaScriptSerializer>对象将使用的类型元数据标记值将映射回相应的托管类型。</span><span class="sxs-lookup"><span data-stu-id="414a0-127">During deserialization, the type resolver that is associated with the <xref:System.Web.Script.Serialization.JavaScriptSerializer> object will use the type metadata marker value to map back to the appropriate managed type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Services.GenerateScriptTypeAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="414a0-128">获取包含在代理对象中的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="414a0-128">Gets the type that is included in the proxy object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="414a0-129">包含在所生成的代理对象中的类型对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="414a0-129">The type object that is included in the generated proxy object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>