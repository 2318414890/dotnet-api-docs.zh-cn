<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71de6c95b5ac06ee9ff4c5ad83a05ad3542abd35" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30408231" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6482a-101">支持 COM 组件启动或关闭时可调用的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6482a-101">Supports methods that can be called when a COM component starts up or shuts down.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6482a-102">实现<xref:System.EnterpriseServices.IProcessInitializer>接口方法上的服务组件如果你想要运行初始化或关闭代码时服务器进程 (Dllhost.exe) 启动或关闭，分别。</span><span class="sxs-lookup"><span data-stu-id="6482a-102">Implement the <xref:System.EnterpriseServices.IProcessInitializer> interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.</span></span>  
  
 <span data-ttu-id="6482a-103">COM + 提供`Startup`和`Shutdown`Dllhost.exe 开始和结束时的事件。</span><span class="sxs-lookup"><span data-stu-id="6482a-103">COM+ provides `Startup` and `Shutdown` events when Dllhost.exe starts and ends.</span></span> <span data-ttu-id="6482a-104">此功能允许任何安装在 COM + 服务器应用程序 （称为服务器组件以后） 来运行自定义初始化和清理代码的 COM + 组件。</span><span class="sxs-lookup"><span data-stu-id="6482a-104">This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code.</span></span> <span data-ttu-id="6482a-105">实现每个组件的实例<xref:System.EnterpriseServices.IProcessInitializer>界面将创建和存储的持续时间内的进程，并在启动和关闭过程中调用接口方法上。</span><span class="sxs-lookup"><span data-stu-id="6482a-105">An instance of each component that implements the <xref:System.EnterpriseServices.IProcessInitializer> interface will be created and stored for the duration of the process, and called on the interface methods during startup and shutdown.</span></span> <span data-ttu-id="6482a-106">在上实现时<xref:System.EnterpriseServices.ServicedComponent>，该组件，注册期间`InitializesServerApplication`中的参数`COMAdminCatalogObject`内组件集合设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="6482a-106">When implemented on a <xref:System.EnterpriseServices.ServicedComponent>, during registration of the component, the `InitializesServerApplication` parameter in the `COMAdminCatalogObject` within the Components collection is set to `true`.</span></span>  
  
 <span data-ttu-id="6482a-107">使用`Startup`和`Shutdown`事件，你可以初始化资源、 创建连接、 初始化共享数据，并运行清理代码。</span><span class="sxs-lookup"><span data-stu-id="6482a-107">Using the `Startup` and `Shutdown` events, you can initialize resources, create connections, initialize shared data, and run cleanup code.</span></span> <span data-ttu-id="6482a-108">但是，你不能访问不特定于 COM +，因为尚未创建的服务器组件实例的状态。</span><span class="sxs-lookup"><span data-stu-id="6482a-108">However, you must not access states that are specific to COM+ because instances of server components have not yet been created.</span></span> <span data-ttu-id="6482a-109">此外中的代码`Startup`和`Shutdown`事件应尽可能快地返回，因为系统等待 90 秒仅针对 Dllhost.exe 若要准备接受激活，则在系统启动过程。</span><span class="sxs-lookup"><span data-stu-id="6482a-109">In addition, the code in the `Startup` and `Shutdown` events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process.</span></span> <span data-ttu-id="6482a-110">如果 Dllhost.exe 不发出信号，就可以在 90 秒内，系统会结束该进程;因此，所有的初始化处理需要在此时限内完成。</span><span class="sxs-lookup"><span data-stu-id="6482a-110">If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame.</span></span> <span data-ttu-id="6482a-111">参与初始化每个服务器组件必须支持<xref:System.EnterpriseServices.IProcessInitializer>接口。</span><span class="sxs-lookup"><span data-stu-id="6482a-111">Each server component that participates in initialization must support the <xref:System.EnterpriseServices.IProcessInitializer> interface.</span></span> <span data-ttu-id="6482a-112">在 DllHost.exe 启动 COM + 创建请求此服务，调用的所有服务器组件`QueryInterface`为<xref:System.EnterpriseServices.IProcessInitializer>接口，并调用<xref:System.EnterpriseServices.IProcessInitializer.Startup%2A>函数。</span><span class="sxs-lookup"><span data-stu-id="6482a-112">On DllHost.exe startup, COM+ creates all server components that requested this service, calls `QueryInterface` for the <xref:System.EnterpriseServices.IProcessInitializer> interface, and calls the <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> function.</span></span> <span data-ttu-id="6482a-113">同样，当 DllHost.exe 进程关闭的情况下，它将调用<xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A>函数对以前存储的接口指针。</span><span class="sxs-lookup"><span data-stu-id="6482a-113">Similarly, when the DllHost.exe process is shut down, it calls the <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> function on those previously stored interface pointers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6482a-114">执行关闭操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6482a-114">Performs shutdown actions.</span>
          </span>
          <span data-ttu-id="6482a-115">关闭 Dllhost.exe 时被调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6482a-115">Called when Dllhost.exe is shut down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6482a-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> 不在 failfast 或其他灾难性关闭事件期间调用。</span><span class="sxs-lookup"><span data-stu-id="6482a-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> is not called during a failfast or other catastrophic shutdown events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">
          <span data-ttu-id="6482a-117">在 Microsoft Windows XP 中，一个指向 <see langword="IUnknown" /> COM 组件启动接口的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6482a-117">In Microsoft Windows XP, a pointer to the <see langword="IUnknown" /> interface of the COM component starting up.</span>
          </span>
          <span data-ttu-id="6482a-118">在 Microsoft Windows 2000 中，该参数始终为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6482a-118">In Microsoft Windows 2000, this argument is always <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6482a-119">在启动时执行初始化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6482a-119">Performs initialization at startup.</span>
          </span>
          <span data-ttu-id="6482a-120">启动 Dllhost.exe 时被调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6482a-120">Called when Dllhost.exe is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6482a-121">所引用的对象`punkProcessControl`实现<xref:System.EnterpriseServices.IProcessInitControl>接口。</span><span class="sxs-lookup"><span data-stu-id="6482a-121">The object referenced by `punkProcessControl` implements an <xref:System.EnterpriseServices.IProcessInitControl> interface.</span></span> <span data-ttu-id="6482a-122"><xref:System.EnterpriseServices.IProcessInitControl> 支持单个方法<xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>。</span><span class="sxs-lookup"><span data-stu-id="6482a-122"><xref:System.EnterpriseServices.IProcessInitControl> supports the single method <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</span></span>  
  
 <span data-ttu-id="6482a-123">中的初始化代码<xref:System.EnterpriseServices.IProcessInitializer.Startup%2A>可以调用<xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>，且超时的值将设置为等于在组件超时的启动之前剩余的秒数。</span><span class="sxs-lookup"><span data-stu-id="6482a-123">The initialization code in <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> can call the <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, with the time-out set equal to the number of seconds remaining before the startup of the component times out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>