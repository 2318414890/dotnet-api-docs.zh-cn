<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ServicedComponent.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5825295aba3162ad64d7c1325b0c7adc2b191a980.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">825295aba3162ad64d7c1325b0c7adc2b191a980</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Represents the base class of all classes using COM+ services.</source>
          <target state="translated">表示使用 COM+ 服务的所有类的基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Under certain conditions, a class that is derived from <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> that runs in a COM+ application may stop responding.</source>
          <target state="translated">某些情况下，派生自的类<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>将在 COM + 应用程序中的运行可能会停止响应。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>This problem is caused by an Activity deadlock.</source>
          <target state="translated">此问题是由活动死锁引起的。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Activities can deadlock on multithreaded applications because of an asynchronous cleanup of component references.</source>
          <target state="translated">在多线程应用程序由于异步清理组件引用的情况下，活动可以死锁。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>To work around this problem, call the <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph> method when you complete work with objects derived from <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>.</source>
          <target state="translated">若要解决此问题，请调用<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>方法完成处理的对象派生自<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>For more information, see <bpt id="p1">[</bpt><ph id="ph1">http://support.microsoft.com/default.aspx?scid=kb</ph>;en-us;327443<ept id="p1">](http://support.microsoft.com/default.aspx?scid=kb;en-us;327443)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt> <ph id="ph1">http://support.microsoft.com/default.aspx?scid=kb</ph>; en-我们; 327443<ept id="p1">](http://support.microsoft.com/default.aspx?scid=kb;en-us;327443)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Client code must call <ph id="ph1">`Dispose`</ph> on serviced components to ensure proper operation.</source>
          <target state="translated">客户端的代码必须调用<ph id="ph1">`Dispose`</ph>服务以确保正确地执行操作的组件上。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>The following code example demonstrates how to expose a class as a configured COM component.</source>
          <target state="translated">下面的代码示例演示如何公开为已配置的 COM 组件的类。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>To deploy this class as a configured COM component, you must generate a strong key, compile the class as a library, and register the library.</source>
          <target state="translated">若要部署此类作为一个已配置的 COM 组件，必须生成一个强密钥、 编译为一个库，类和注册的库。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>These three steps are accomplished by the following three commands.</source>
          <target state="translated">这三个步骤是通过以下三个命令来完成。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.#ctor">
          <source>This constructor is called by derived class constructors to initialize state in this type.</source>
          <target state="translated">派生的类构造函数来初始化此类型中的状态将调用此构造函数。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Activate">
          <source>Called by the infrastructure when the object is created or allocated from a pool.</source>
          <target state="translated">当从池创建或分配对象时，由基础结构调用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Activate">
          <source>Override this method to add custom initialization code to objects.</source>
          <target state="translated">重写此方法以将自定义初始化代码添加到对象中。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Activate">
          <source>The following code example demonstrates the use of this method.</source>
          <target state="translated">下面的代码示例演示如何使用此方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
          <source>This method is called by the infrastructure before the object is put back into the pool.</source>
          <target state="translated">在将对象放回到池中之前结构调用该方法。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
          <source>Override this method to vote on whether the object is put back into the pool.</source>
          <target state="translated">重写此方法以决定是否将对象放回到池中。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the serviced component can be pooled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已维护的组件可被放入池中，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
          <source>The following code example demonstrates the use of this method.</source>
          <target state="translated">下面的代码示例演示如何使用此方法。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)">
          <source>The construction string.</source>
          <target state="translated">结构字符串。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)">
          <source>Called by the infrastructure just after the constructor is called, passing in the constructor string.</source>
          <target state="translated">恰好在调用构造函数后由基础结构调用，并且在构造函数字符串中传递。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)">
          <source>Override this method to make use of the construction string value.</source>
          <target state="translated">重写该方法以使用结构字符串值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Deactivate">
          <source>Called by the infrastructure when the object is about to be deactivated.</source>
          <target state="translated">当对象即将停用时由基础结构调用。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Deactivate">
          <source>Override this method to add custom finalization code to objects when just-in-time (JIT) compiled code or object pooling is used.</source>
          <target state="translated">重写该方法以在使用实时 (JIT) 编译代码或对象池时向对象添加自定义终止代码。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Deactivate">
          <source>The following code example demonstrates the use of this method.</source>
          <target state="translated">下面的代码示例演示如何使用此方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph>.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> 占用的资源。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph>.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> 使用的所有资源。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Finalizes the object and removes the associated COM+ context.</source>
          <target state="translated">确定对象，并删除关联的 COM + 上下文。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>It is recommended to explicitly release COM+ objects and external resources before the garbage collector frees the object.</source>
          <target state="translated">建议垃圾回收器释放对象前显式释放 COM + 对象和外部资源。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>If the external resource is scarce or expensive, better performance can be achieved by explicitly releasing COM+ resources when they are no longer needed.</source>
          <target state="translated">如果外部资源是不足或成本高昂，可以通过显式释放 COM + 资源，在不再需要时实现更好的性能。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Explicit control is provided by the <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">通过提供显式控制<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Calling <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>允许使用的资源<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>可以重新分配用于其他目的。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>For more information about <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Override the <ph id="ph1">&lt;see cref="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" /&gt;</ph> method to customize the dispose logic for this class.</source>
          <target state="translated">重写<ph id="ph1">&lt;see cref="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" /&gt;</ph>方法以自定义此类的释放逻辑。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">若要释放托管资源和非托管资源，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，这仅释放非托管资源。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> 占用的非托管资源，还可以另外再释放托管资源。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">此方法称为由公共<ph id="ph1">`Dispose`</ph>方法和<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 调用受保护<ph id="ph2">`Dispose(Boolean)`</ph>方法替换<ph id="ph3">`disposing`</ph>参数设置为<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 调用<ph id="ph2">`Dispose`</ph>与<ph id="ph3">`disposing`</ph>设置为<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> references.</source>
          <target state="translated">当 <ph id="ph1">`disposing`</ph> 参数为 <ph id="ph2">`true`</ph> 时，此方法释放该 <ph id="ph3">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> 引用的、由任何托管对象持有的全部资源。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">此方法调用每个引用对象的 <ph id="ph1">`Dispose`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 可以由其他对象多次调用。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">重写 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> 时，请注意不要引用在以前调用 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph> 时已释放的对象。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关如何实现详细信息<ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>，请参阅<bpt id="p1">[</bpt>实现 Dispose 方法<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>和<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>重写 Finalize 方法<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)">
          <source>The object to dispose.</source>
          <target state="translated">要释放的对象。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)">
          <source>Finalizes the object and removes the associated COM+ reference.</source>
          <target state="translated">完成对象并移除关联的 COM+ 引用。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)">
          <source>It is preferable to use the <ph id="ph1">`Dispose`</ph> design pattern rather than <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent.DisposeObject%2A&gt;</ph>.</source>
          <target state="translated">最好使用<ph id="ph1">`Dispose`</ph>设计模式而非<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent.DisposeObject%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)">
          <source>Ensures that, in the COM+ context, the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> class object's <ph id="ph2">&lt;see langword="done" /&gt;</ph> bit is set to <ph id="ph3">&lt;see langword="true" /&gt;</ph> after a remote method invocation.</source>
          <target state="translated">确保在 COM+ 上下文中，<ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> 类对象的 <ph id="ph2">&lt;see langword="done" /&gt;</ph> 位在远程方法调用后设置为 <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)">
          <source>A string converted from a response object that implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /&gt;</ph> interface.</source>
          <target state="translated">一个字符串，由实现 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /&gt;</ph> 接口的响应对象转换而成。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A&gt;</ph> method does not belong to the published interface of the <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> class and does not need to be implemented elsewhere.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A&gt;</ph>方法不属于的已发布界面<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>类并不需要在其他位置实现。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
          <source>A string to be converted into a request object that implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> interface.</source>
          <target state="translated">一个字符串，它将转换为实现 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> 接口的请求对象。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
          <source>Does not ensure that, in the COM+ context, the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> class object's <ph id="ph2">&lt;see langword="done" /&gt;</ph> bit is set to <ph id="ph3">&lt;see langword="true" /&gt;</ph> after a remote method invocation.</source>
          <target state="translated">不确保在 COM+ 上下文中，<ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> 类对象的 <ph id="ph2">&lt;see langword="done" /&gt;</ph> 位在远程方法调用后设置为 <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
          <source>A string converted from a response object that implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /&gt;</ph> interface.</source>
          <target state="translated">一个字符串，由实现 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /&gt;</ph> 接口的响应对象转换而成。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A&gt;</ph> method does not belong to the published interface of the <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> class and does not need to be implemented elsewhere.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A&gt;</ph>方法不属于的已发布界面<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>类并不需要在其他位置实现。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
          <source>A bitmask where 0x00000001 is a key for the serviced component's process ID, 0x00000002 is a key for the application domain ID, and 0x00000004 is a key for the serviced component's remote URI.</source>
          <target state="translated">一个位掩码，其中：0x00000001 为服务组件进程 ID 的键，0x00000002 为应用程序域 ID 的键，0x00000004 为服务组件远程 URI 的键。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
          <source>A string array that may contain any or all of the following, in order: the serviced component's process ID, the application domain ID, and the serviced component's remote URI.</source>
          <target state="translated">一个字符串数组，可以依次包含以下任一项或全部项：服务组件的进程 ID、应用程序域 ID 以及服务组件的远程 URI。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
          <source>Obtains certain information about the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> class instance.</source>
          <target state="translated">获取关于 <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> 类实例的某些信息。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
          <source>The <ph id="ph1">&lt;xref:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo%2A&gt;</ph> method does not belong to the published interface of the <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> class and does not need to be implemented elsewhere.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo%2A&gt;</ph>方法不属于的已发布界面<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>类并不需要在其他位置实现。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>