<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IPlaybackControl.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac554fcf7590327e9d2356fc883bfae633d190f6a78.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54fcf7590327e9d2356fc883bfae633d190f6a78</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</source>
          <target state="translated">“消息队列”传送机制的服务器端播放错误和客户端失败的异常处理中的“排队组件”中的函数。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>The exception class defined for the component in the COM+ catalog implements both <ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl&gt;</ph> and the interface for the original class.</source>
          <target state="translated">为同时实现 COM + 目录中的组件定义的异常类<ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl&gt;</ph>和原始类的接口。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>The method implementations of the original class interface are used to perform the exception handling for the failed methods in the class itself.</source>
          <target state="translated">原始的类接口的方法实现用于执行类本身中的失败方法处理的异常。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>They will be called after <ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A&gt;</ph> to process exceptions for the method originally called.</source>
          <target state="translated">它们将之后调用<ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A&gt;</ph>来处理最初调用的方法的异常。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>The Queued Components Player calls the methods of <ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl&gt;</ph> to inform the exception-handler object that a message is about to be placed on the final resting or dead letter queue.</source>
          <target state="translated">队列组件播放器调用的方法<ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl&gt;</ph>以通知即将放在最终停留在线或死信队列的消息的异常处理程序对象。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>The Queued Components Player then calls the same method in the exception-handler object that had failed in the original method call.</source>
          <target state="translated">队列组件播放器然后在出现故障的原始方法调用中的异常处理程序对象调用同一方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>The exception-handler object can implement an alternative, for example, by gathering problem diagnosis information or generating an object or message that informs the client of the problem.</source>
          <target state="translated">异常处理程序对象可以实现一种替代方法，例如，通过收集问题诊断信息，或生成的对象或将告知客户端的问题的消息。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>If the application does not implement <ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl&gt;</ph>, the poison message is placed on the final resting or dead letter queue when the Queued Components Player exhausts all retries.</source>
          <target state="translated">如果应用程序不实现<ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl&gt;</ph>，病毒消息所在最终停留在线或死信队列，当队列组件播放器耗尽所有重试。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>A poison message is a message that cannot be processed for some reason, perhaps because of a problem with the server or queuing system.</source>
          <target state="translated">病毒消息是一条消息，无法处理出于某种原因，可能是因为的服务器或队列系统有问题。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>The transaction is rolled back, and the poison message goes to the top of the queue.</source>
          <target state="translated">事务将回滚和病毒消息将发送到队列的顶部。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>When the message is dequeued again, the same condition occurs.</source>
          <target state="translated">当再次取消排队消息时，将发生同样的情况。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>This message can continue looping indefinitely until something is done to correct the problem.</source>
          <target state="translated">此消息可以继续循环无限期地之前执行以更正此问题的某些操作。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>The Queued Components service handles the poison message by using a series of retries.</source>
          <target state="translated">排队的组件服务只需使用一系列的重试次数，这样就可以处理病毒消息。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>After several unsuccessful retries, the message is moved to a final resting queue.</source>
          <target state="translated">多次失败尝试后, 即会将消息移至最终静止队列。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>Poison messages remain in the resting queue until manually moved by using the Queued Components Message Mover tool.</source>
          <target state="translated">病毒消息保留在静止队列之前通过排队的组件消息发动机工具手动移动。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>The poison message situation can also be resolved programmatically, using the <ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A&gt;</ph> method, which informs the server-side component author that all attempts to play back the deferred activation have failed.</source>
          <target state="translated">有害消息的情况，也可解决以编程方式，使用<ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A&gt;</ph>方法，该通知播放延迟的激活的所有尝试已都失败的服务器端组件作者方法。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>If you discover a poison message, you might be able to solve the underlying cause of the problem quickly.</source>
          <target state="translated">如果你发现病毒消息，你可能能够快速解决问题的根本原因。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>For example, if the server was offline for some reason, you can bring the server back online.</source>
          <target state="translated">例如，如果出于某种原因，服务器已脱机的你可以将服务器重新联机。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>If you cannot solve the problem quickly, you can automatically generate another transaction that notifies the requestor that the transaction did not occur.</source>
          <target state="translated">如果你不能快速解决问题，你可以自动生成通知请求程序事务中未出现的另一个事务。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IPlaybackControl">
          <source>The requestor can then make a compensating transaction that reverses the effect of a transaction that has already committed.</source>
          <target state="translated">请求者然后可以使一个补偿事务，反转已经提交的事务的效果。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry">
          <source>Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</source>
          <target state="translated">通知客户端异常处理组件，消息队列将消息发送至服务器的所有尝试均被拒绝，消息终止于客户端的 Xact 死信队列。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry">
          <source>As messages arrive in the Xact Dead Letter queue, COM+ attempts to invoke a client-side exception handler related to the server class to deliver this notification.</source>
          <target state="translated">当消息到达 Xact 死信队列中时，COM + 尝试调用一个到服务器类，以提供此通知相关的客户端异常处理程序。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry">
          <source>It does so by first calling <ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A&gt;</ph>, then calling the exception-handling version of the failed method in the exception-handler object.</source>
          <target state="translated">它会通过首先调用<ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A&gt;</ph>，然后调用失败的方法的异常处理版本中的异常处理程序对象。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry">
          <source>This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</source>
          <target state="translated">然后，此异常方法可执行的异常操作，例如录制失败，将一封电子邮件发送给管理员，或要花费 （反转更早的事务的效果） 的客户端的补偿行为。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry">
          <source>If the exception method is not successful, the message is left on the Xact Dead Letter queue.</source>
          <target state="translated">如果未成功异常方法，则消息将保留在 Xact 死信队列。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry">
          <source>The Xact Dead Letter queue can be viewed in the Microsoft Message Queue (MSMQ) Explorer.</source>
          <target state="translated">可以在 Microsoft Message Queue (MSMQ) 资源管理器中查看事务死信队列。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry">
          <source>Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</source>
          <target state="translated">通知服务器端异常类实现，所有将被推迟的激活播放至服务器的尝试均已失败，该消息将被移至其最终静止队列。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry">
          <source>As messages arrive on the Xact Dead Letter queue, COM+ attempts to invoke a server-side exception handler related to the server class to deliver this notification.</source>
          <target state="translated">当消息到达 Xact 死信队列时，COM + 尝试调用一个到服务器类，以提供此通知相关的服务器端异常处理程序。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry">
          <source>It does so by first calling <ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A&gt;</ph>, then calling the exception handling version of the failed method in the exception handler object.</source>
          <target state="translated">它会通过首先调用<ph id="ph1">&lt;xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A&gt;</ph>，然后调用异常处理失败的方法中的异常处理程序对象的版本。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry">
          <source>This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</source>
          <target state="translated">然后，此异常方法可执行的异常操作，例如录制失败，将一封电子邮件发送给管理员，或要花费 （反转更早的事务的效果） 的客户端的补偿行为。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry">
          <source>The server object should make every effort to complete this transaction successfully.</source>
          <target state="translated">服务器对象应请尽量将成功完成此事务。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry">
          <source>Otherwise, manual intervention is required to reprocess the message.</source>
          <target state="translated">否则，需要手动干预来重新处理该消息。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry">
          <source>If the exception method is not successful, the message is moved to the final resting queue.</source>
          <target state="translated">如果未成功异常方法，则消息将移到最终静止队列。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>