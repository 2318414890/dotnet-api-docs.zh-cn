<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f1d7e688218f9e4d155f0f11867ab1dd115b8742" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37655111" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>“消息队列”传送机制的服务器端播放错误和客户端失败的异常处理中的“排队组件”中的函数。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为 COM + 目录中的组件同时实现定义的异常类<xref:System.EnterpriseServices.IPlaybackControl>用于原始类和接口。 原始类接口的方法实现用于执行类本身中失败的方法处理的异常。 它们将在调用<xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>或<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>来处理异常的最初调用的方法。  
  
 排入队列组件播放机调用的方法<xref:System.EnterpriseServices.IPlaybackControl>通知消息是要放置在最终的停留或死信队列上的异常处理程序对象。 排入队列组件播放机然后调用原始方法调用中失败的异常处理程序对象中的相同方法。 异常处理程序对象可以实现替代方法，例如，通过收集问题诊断信息，或生成的对象或将告知该问题的客户端的消息。 如果应用程序不实现<xref:System.EnterpriseServices.IPlaybackControl>，病毒消息位于最终停留或死信队列，当队列组件播放器用完所有重试时。  
  
 病毒消息是一条消息，而无法处理由于某种原因，可能是由于服务器或队列系统出现问题。 事务回滚后，和病毒消息将发送到队列的顶部。 消息的重新排队，当相同的条件。 此消息可以继续循环，无限期之前执行某些操作以更正此问题。 队列组件服务通过使用一系列的重试处理有害消息。 多次失败尝试后消息移动到最终静止队列。 有害消息保留在静止队列直到手动移动使用排队组件消息移动工具。  
  
 有害消息的情况，也可解决以编程方式，使用<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>方法，它会通知服务器端组件的作者： 播放推迟的激活的所有尝试都失败。  
  
 如果发现病毒消息，你可以快速解决问题的根本原因。 例如，如果出于某种原因，在服务器处于脱机状态，你可以将服务器恢复联机状态。 如果你不能快速解决问题，可以自动生成通知请求程序在事务中未出现的另一个事务。 然后，请求程序可以使补偿事务，以撤消已提交的事务的效果。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知客户端异常处理组件，消息队列将消息发送至服务器的所有尝试均被拒绝，消息终止于客户端的 Xact 死信队列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当消息到达 Xact 死信队列中时，COM + 尝试调用与此通知传递的服务器类相关的客户端的异常处理程序。 它会通过首先调用<xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>，然后调用异常处理程序对象中的失败的方法的异常处理版本。 此异常方法然后可以采取异常操作，例如录制失败，将一封电子邮件发送给管理员，或执行客户端的补偿操作 （用于翻转效果的更早的事务）。 如果异常方法失败，消息停留在 Xact 死信队列。  
  
 可以在 Microsoft 消息队列 (MSMQ) 资源管理器中查看 Xact 死信队列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知服务器端异常类实现，所有将被推迟的激活播放至服务器的尝试均已失败，该消息将被移至其最终静止队列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当消息到达 Xact 死信队列，COM + 尝试调用与此通知传递的服务器类相关的服务器端异常处理程序。 它会通过首先调用<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>，然后调用异常处理的异常处理程序对象中失败的方法的版本。 此异常方法然后可以采取异常操作，例如录制失败，将一封电子邮件发送给管理员，或执行客户端的补偿操作 （用于翻转效果的更早的事务）。 服务器对象应尽力成功完成此事务。 否则，需要手动干预来重新处理该消息。 如果异常方法失败，消息将移到最终静止队列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>