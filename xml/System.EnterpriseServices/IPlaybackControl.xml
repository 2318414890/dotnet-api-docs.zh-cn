<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="54fcf7590327e9d2356fc883bfae633d190f6a78" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30408881" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>“消息队列”传送机制的服务器端播放错误和客户端失败的异常处理中的“排队组件”中的函数。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为同时实现 COM + 目录中的组件定义的异常类<xref:System.EnterpriseServices.IPlaybackControl>和原始类的接口。 原始的类接口的方法实现用于执行类本身中的失败方法处理的异常。 它们将之后调用<xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>或<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>来处理最初调用的方法的异常。  
  
 队列组件播放器调用的方法<xref:System.EnterpriseServices.IPlaybackControl>以通知即将放在最终停留在线或死信队列的消息的异常处理程序对象。 队列组件播放器然后在出现故障的原始方法调用中的异常处理程序对象调用同一方法。 异常处理程序对象可以实现一种替代方法，例如，通过收集问题诊断信息，或生成的对象或将告知客户端的问题的消息。 如果应用程序不实现<xref:System.EnterpriseServices.IPlaybackControl>，病毒消息所在最终停留在线或死信队列，当队列组件播放器耗尽所有重试。  
  
 病毒消息是一条消息，无法处理出于某种原因，可能是因为的服务器或队列系统有问题。 事务将回滚和病毒消息将发送到队列的顶部。 当再次取消排队消息时，将发生同样的情况。 此消息可以继续循环无限期地之前执行以更正此问题的某些操作。 排队的组件服务只需使用一系列的重试次数，这样就可以处理病毒消息。 多次失败尝试后, 即会将消息移至最终静止队列。 病毒消息保留在静止队列之前通过排队的组件消息发动机工具手动移动。  
  
 有害消息的情况，也可解决以编程方式，使用<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>方法，该通知播放延迟的激活的所有尝试已都失败的服务器端组件作者方法。  
  
 如果你发现病毒消息，你可能能够快速解决问题的根本原因。 例如，如果出于某种原因，服务器已脱机的你可以将服务器重新联机。 如果你不能快速解决问题，你可以自动生成通知请求程序事务中未出现的另一个事务。 请求者然后可以使一个补偿事务，反转已经提交的事务的效果。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知客户端异常处理组件，消息队列将消息发送至服务器的所有尝试均被拒绝，消息终止于客户端的 Xact 死信队列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当消息到达 Xact 死信队列中时，COM + 尝试调用一个到服务器类，以提供此通知相关的客户端异常处理程序。 它会通过首先调用<xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>，然后调用失败的方法的异常处理版本中的异常处理程序对象。 然后，此异常方法可执行的异常操作，例如录制失败，将一封电子邮件发送给管理员，或要花费 （反转更早的事务的效果） 的客户端的补偿行为。 如果未成功异常方法，则消息将保留在 Xact 死信队列。  
  
 可以在 Microsoft Message Queue (MSMQ) 资源管理器中查看事务死信队列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知服务器端异常类实现，所有将被推迟的激活播放至服务器的尝试均已失败，该消息将被移至其最终静止队列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当消息到达 Xact 死信队列时，COM + 尝试调用一个到服务器类，以提供此通知相关的服务器端异常处理程序。 它会通过首先调用<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>，然后调用异常处理失败的方法中的异常处理程序对象的版本。 然后，此异常方法可执行的异常操作，例如录制失败，将一封电子邮件发送给管理员，或要花费 （反转更早的事务的效果） 的客户端的补偿行为。 服务器对象应请尽量将成功完成此事务。 否则，需要手动干预来重新处理该消息。 如果未成功异常方法，则消息将移到最终静止队列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>