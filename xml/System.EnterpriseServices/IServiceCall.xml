<Type Name="IServiceCall" FullName="System.EnterpriseServices.IServiceCall">
  <TypeSignature Language="C#" Value="public interface IServiceCall" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceCall" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IServiceCall" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceCall" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceCall" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("BD3E2E12-42DD-40f4-A09A-95A50C58304B")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="efede-101">实现通过由 <see cref="T:System.EnterpriseServices.Activity" /> 创建的活动提交的批处理工作。</span><span class="sxs-lookup"><span data-stu-id="efede-101">Implements the batch work that is submitted through the activity created by <see cref="T:System.EnterpriseServices.Activity" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efede-102">使用<xref:System.EnterpriseServices.IServiceCall>执行使用 COM + 服务，而无需创建专为使用这些服务组件的批处理工作。</span><span class="sxs-lookup"><span data-stu-id="efede-102">Use <xref:System.EnterpriseServices.IServiceCall> to perform batch work that uses COM+ services without creating a component specifically for using those services.</span></span> <span data-ttu-id="efede-103">如 Internet 信息服务 (IIS) 和 ASP.NET 的脚本环境可以使用此接口利用 COM + 服务而无需创建一个在 COM + 组件。</span><span class="sxs-lookup"><span data-stu-id="efede-103">Script environments such as Internet Information Services (IIS) and ASP.NET can use this interface to utilize COM+ services without the need to create a COM+ component.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnCall">
      <MemberSignature Language="C#" Value="public void OnCall ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCall() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IServiceCall.OnCall" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCall ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCall();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="efede-104">开始执行在此方法中实现的批处理工作。</span><span class="sxs-lookup"><span data-stu-id="efede-104">Starts the execution of the batch work implemented in this method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efede-105">在通过调用创建的活动的上下文和线程单元中运行此方法中运行的批处理工作<xref:System.EnterpriseServices.Activity>。</span><span class="sxs-lookup"><span data-stu-id="efede-105">The batch work that is run in this method runs in the context and thread apartment of the activity created by the call to <xref:System.EnterpriseServices.Activity>.</span></span> <span data-ttu-id="efede-106">此方法中的批处理工作由调用<xref:System.EnterpriseServices.Activity.SynchronousCall%2A?displayProperty=nameWithType>或<xref:System.EnterpriseServices.Activity.AsynchronousCall%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="efede-106">The batch work in this method is run by a call to either <xref:System.EnterpriseServices.Activity.SynchronousCall%2A?displayProperty=nameWithType> or <xref:System.EnterpriseServices.Activity.AsynchronousCall%2A?displayProperty=nameWithType>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="efede-107">你必须确保此方法是线程安全的情况下通过创建的活动对象<xref:System.EnterpriseServices.Activity>不创建具有同步上下文，由于在这种情况下很多调用到<xref:System.EnterpriseServices.IServiceCall.OnCall%2A>可以在同一时间运行。</span><span class="sxs-lookup"><span data-stu-id="efede-107">You must ensure that this method is thread safe in situations where the activity object created by <xref:System.EnterpriseServices.Activity> is not created with a synchronized context, because in such situations many calls to <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> can run at the same time.</span></span>  
  
 <span data-ttu-id="efede-108">若要实现从系统的最佳性能，由活动的上下文配置创建<xref:System.EnterpriseServices.Activity>应执行的批处理工作匹配<xref:System.EnterpriseServices.IServiceCall.OnCall%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="efede-108">To achieve the best performance from the system, the context configuration of the activity created by <xref:System.EnterpriseServices.Activity> should be matched to the batch work performed by the <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> method.</span></span> <span data-ttu-id="efede-109">例如，如果批处理中的工作<xref:System.EnterpriseServices.IServiceCall.OnCall%2A>方法使用能合并的对象，创建的活动<xref:System.EnterpriseServices.Activity>应配置为使用多线程的单元 (MTA)。</span><span class="sxs-lookup"><span data-stu-id="efede-109">For example, if the batch work in the <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> method uses poolable objects, the activity created by <xref:System.EnterpriseServices.Activity> should be configured to use the multithreaded apartment (MTA).</span></span>  
  
 <span data-ttu-id="efede-110">有关能合并的对象的信息，请参阅"要求为能合并的对象"MSDN 中的平台 SDK 中的主题。</span><span class="sxs-lookup"><span data-stu-id="efede-110">For information about poolable objects, see the topic "Requirements for Poolable Objects" in the Platform SDK in MSDN.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>