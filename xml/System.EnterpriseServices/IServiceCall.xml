<Type Name="IServiceCall" FullName="System.EnterpriseServices.IServiceCall">
  <Metadata><Meta Name="ms.openlocfilehash" Value="75a07556256f0bbbe19675d03f2906080979c74c" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53511053" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceCall" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceCall" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IServiceCall" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceCall" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceCall" />
  <TypeSignature Language="F#" Value="type IServiceCall = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("BD3E2E12-42DD-40f4-A09A-95A50C58304B")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>实现通过由 <see cref="T:System.EnterpriseServices.Activity" /> 创建的活动提交的批处理工作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.EnterpriseServices.IServiceCall>来执行批处理工作，以使用 COM + 服务而无需创建专用于使用这些服务的组件。 脚本环境，如 Internet 信息服务 (IIS) 和 ASP.NET 可以使用此接口可利用 COM + 服务而无需创建 COM + 组件。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnCall">
      <MemberSignature Language="C#" Value="public void OnCall ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCall() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IServiceCall.OnCall" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCall ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCall();" />
      <MemberSignature Language="F#" Value="abstract member OnCall : unit -&gt; unit" Usage="iServiceCall.OnCall " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>开始执行在此方法中实现的批处理工作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在通过调用创建的活动的上下文和线程单元中运行此方法中运行的批处理工作<xref:System.EnterpriseServices.Activity>。 在此方法中的批处理工作运行通过调用<xref:System.EnterpriseServices.Activity.SynchronousCall%2A?displayProperty=nameWithType>或<xref:System.EnterpriseServices.Activity.AsynchronousCall%2A?displayProperty=nameWithType>。  
  
> [!CAUTION]
>  必须确保此方法是线程安全的情况下通过创建的活动对象<xref:System.EnterpriseServices.Activity>未创建与同步上下文，因为在这种情况下很多调用到<xref:System.EnterpriseServices.IServiceCall.OnCall%2A>可以在同一时间运行。  
  
 为了实现从系统的最佳性能，通过活动的上下文配置创建<xref:System.EnterpriseServices.Activity>应执行的批处理工作与匹配<xref:System.EnterpriseServices.IServiceCall.OnCall%2A>方法。 例如，如果中的批处理工作<xref:System.EnterpriseServices.IServiceCall.OnCall%2A>方法使用可入池对象，该活动由创建<xref:System.EnterpriseServices.Activity>应配置为使用多线程的单元 (MTA)。  
  
 有关可入池的对象的信息，请参阅"要求的可入池的对象"在 MSDN 中的平台 SDK 中的主题。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>