<Type Name="AddInProcess" FullName="System.AddIn.Hosting.AddInProcess">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9dfe1d8a57d25a7e47494e94e8ea6da84ee1af7d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30360711" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AddInProcess" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInProcess extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInProcess" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInProcess" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInProcess sealed" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个外部进程，用于通过宿主应用程序在进程外运行外接程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要激活外接程序在外部进程中，将传递<xref:System.AddIn.Hosting.AddInProcess>到相应的对象<xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInProcess%2CSystem.Security.PermissionSet%29?displayProperty=nameWithType>方法重载。  
  
 从随 Windows 目录下.NET Framework 一起安装的两个文件之一获取外接程序运行的可执行文件。 默认情况下，使用与主机应用程序每字位数相匹配的可执行文件。 如果主机是 64 位进程，则会运行 AddInProcess.exe;否则，运行 AddInProcess32.exe。 若要指定选择可执行文件的方式，使用<xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29>构造函数来创建<xref:System.AddIn.Hosting.AddInProcess>对象。  
  
   
  
## Examples  
 下面的示例激活外接程序在外部进程中。  
  
 [!code-csharp[AddInP3Host#10](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#10)]
 [!code-vb[AddInP3Host#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInProcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInProcess.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AddInProcess();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数具有相同的效果与使用<xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29>具有构造函数<xref:System.AddIn.Hosting.Platform.Host?displayProperty=nameWithType>标志，以指定外接程序运行的进程将具有与主机进程相同-每字位数。  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">直接调用方的完全信任。 此成员不能由部分信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInProcess (System.AddIn.Hosting.Platform platform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.AddIn.Hosting.Platform platform) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInProcess.#ctor(System.AddIn.Hosting.Platform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AddInProcess(System::AddIn::Hosting::Platform platform);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="platform" Type="System.AddIn.Hosting.Platform" />
      </Parameters>
      <Docs>
        <param name="platform">一个值，该值指定运行外接程序的进程的每字位数。</param>
        <summary>初始化 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 类的新实例，并指定运行外接程序的进程的每字位数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示如何`platform`影响在不同操作系统上的进程每字位数：  
  
||32 位操作系统|64 位操作系统|  
|-|------------------------------|------------------------------|  
|Host|32 位|主机进程相同|  
|AnyCPU|32 位|64 位|  
|X86|32 位|32 位|  
|X64|引发异常|64 位|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">缺少可执行文件（AddInProcess.exe 或 AddInProcess32.exe）路径的注册表项。  
  
 或  
  
 可执行文件丢失。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">直接调用方的完全信任。 此成员不能由部分信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentProcess">
      <MemberSignature Language="C#" Value="public bool IsCurrentProcess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentProcess" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.IsCurrentProcess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrentProcess As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrentProcess { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，指示当前 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 对象是否表示主机应用程序进程。</summary>
        <value>
          如果 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 对象对应于当前进程，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性的值是`true`外, 接程序是过程与主机应用程序。 在这种情况下，使用<xref:System.AddIn.Hosting.AddInProcess.Start%2A>或<xref:System.AddIn.Hosting.AddInProcess.Shutdown%2A>方法抛出异常<xref:System.InvalidOperationException>。  
  
> [!NOTE]
>  <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A?displayProperty=nameWithType>属性返回<xref:System.AddIn.Hosting.AddInProcess>表示主机应用程序进程，如果外接程序正在运行进程内的对象。  
  
   
  
## Examples  
 以下示例激活外接程序在外部进程中并使用<xref:System.AddIn.Hosting.AddInProcess.IsCurrentProcess%2A>属性来确定是否外接程序是在同一进程中为主机应用程序进程。  
  
 [!code-csharp[AddInP3Host#10](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#10)]
 [!code-vb[AddInP3Host#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.KeepAlive" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepAlive { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否使外部进程保持活动状态。</summary>
        <value>
          如果此外部进程应保持活动状态，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将此属性设置为`false`后关闭的最后一个外接程序在过程主动地关闭该外部进程。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Platform">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.Platform Platform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AddIn.Hosting.Platform Platform" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.Platform" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Platform As Platform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::Platform Platform { System::AddIn::Hosting::Platform get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.Platform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取运行进程外外接程序的进程的每字位数。</summary>
        <value>运行外接程序的进程的每字位数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 时，将设置每字位数<xref:System.AddIn.Hosting.AddInProcess>对象会初始化，并不能更改。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessId">
      <MemberSignature Language="C#" Value="public int ProcessId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ProcessId" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.ProcessId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProcessId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ProcessId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取外部进程的进程 ID。</summary>
        <value>外部进程的进程 ID；如果尚未启动外部进程，则返回 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性进行调试。  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直接调用方的完全信任。 此成员不能由部分信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public bool Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInProcess.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Function Shutdown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Shutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>强制关闭外部进程。</summary>
        <returns>
          如果已成功关闭原本在运行的外部进程，则为 <see langword="true" />；如果没有与 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 关联的活动进程，则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">外接程序正运行在宿主应用程序的进程内。 启动和停止进程仅对于外部进程允许，而非主机进程。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShuttingDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.CancelEventArgs&gt; ShuttingDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.CancelEventArgs&gt; ShuttingDown" />
      <MemberSignature Language="DocId" Value="E:System.AddIn.Hosting.AddInProcess.ShuttingDown" />
      <MemberSignature Language="VB.NET" Value="Public Event ShuttingDown As EventHandler(Of CancelEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::CancelEventArgs ^&gt; ^ ShuttingDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.CancelEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当由 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 对象所表示的进程即将关闭时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public bool Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInProcess.Start" />
      <MemberSignature Language="VB.NET" Value="Public Function Start () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>启动外部进程。</summary>
        <returns>
          如果成功启动该进程，则为 <see langword="true" />；如果该进程已正在运行，则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">外接程序正运行在宿主应用程序的进程内。 启动和停止进程仅对于外部进程允许，而非主机进程。</exception>
      </Docs>
    </Member>
    <Member MemberName="StartupTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan StartupTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan StartupTimeout" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.StartupTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property StartupTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan StartupTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置允许进程启动所用的秒数。</summary>
        <value>允许进程启动所用的秒数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值为 10 秒。 此属性通常在调试期间，用于增加的进程外外接程序运行的进程的启动时间。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该进程已在运行。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">赋给的值小于 0（零）。</exception>
      </Docs>
    </Member>
  </Members>
</Type>