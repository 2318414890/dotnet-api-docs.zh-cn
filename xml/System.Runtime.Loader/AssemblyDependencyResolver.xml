<Type Name="AssemblyDependencyResolver" FullName="System.Runtime.Loader.AssemblyDependencyResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51c36a2494ae273e5a140ba5c5a0d093148c1ddf" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156085" /></Metadata><TypeSignature Language="C#" Value="public sealed class AssemblyDependencyResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AssemblyDependencyResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Loader.AssemblyDependencyResolver" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AssemblyDependencyResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class AssemblyDependencyResolver sealed" />
  <TypeSignature Language="F#" Value="type AssemblyDependencyResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Loader</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="007ea-101">允许的程序，解析程序集和本机库为根据给定的程序集的依赖项的路径。</span><span class="sxs-lookup"><span data-stu-id="007ea-101">Allows a program to resolve assemblies and native libraries to paths based on the dependencies of a given assembly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="007ea-102">`AssemblyDependencyResolver`类，应用程序开发人员能够更轻松地开发中一起使用的自定义的插件体系结构<xref:System.Runtime.Loader.AssemblyLoadContext?displayProperty=nameWithType>实例来隔离插件，也可以启用要加载的依赖项的插件。</span><span class="sxs-lookup"><span data-stu-id="007ea-102">The `AssemblyDependencyResolver` class enables application developers to more easily develop a plugin architecture in conjunction with custom <xref:System.Runtime.Loader.AssemblyLoadContext?displayProperty=nameWithType> instances to isolate plugins and also enable plugins to load dependencies.</span></span>

 <span data-ttu-id="007ea-103">[有关使用插件创建.NET Core 应用程序的教程](https://docs.microsoft.com/dotnet/core/tutorials/creating-app-with-plugin-support)介绍如何创建自定义<xref:System.Runtime.Loader.AssemblyLoadContext>，它使用`AssemblyDependencyResolver`解析插件的依赖关系，并正确隔离插件的依赖项从托管应用程序。</span><span class="sxs-lookup"><span data-stu-id="007ea-103">The [tutorial on creating a .NET Core application with plugins](https://docs.microsoft.com/dotnet/core/tutorials/creating-app-with-plugin-support) describes how to create a custom <xref:System.Runtime.Loader.AssemblyLoadContext> that uses an `AssemblyDependencyResolver` to resolve the dependencies of the plugin and correctly isolate the plugin's dependencies from the hosting application.</span></span>
 
    ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssemblyDependencyResolver (string componentAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string componentAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Loader.AssemblyDependencyResolver.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (componentAssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AssemblyDependencyResolver(System::String ^ componentAssemblyPath);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Loader.AssemblyDependencyResolver : string -&gt; System.Runtime.Loader.AssemblyDependencyResolver" Usage="new System.Runtime.Loader.AssemblyDependencyResolver componentAssemblyPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Loader</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="componentAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="componentAssemblyPath"><span data-ttu-id="007ea-104">该组件或插件的托管的入口点的路径。</span><span class="sxs-lookup"><span data-stu-id="007ea-104">The path to the component or plugin's managed entry point.</span></span></param>
        <summary><span data-ttu-id="007ea-105">初始化的新实例<see cref="T:System.Runtime.Loader.AssemblyDependencyResolver" />类组件的程序集的路径。</span><span class="sxs-lookup"><span data-stu-id="007ea-105">Initializes a new instance of the <see cref="T:System.Runtime.Loader.AssemblyDependencyResolver" /> class with a path to a component's assembly.</span></span></summary>
        <remarks><span data-ttu-id="007ea-106">`componentAssemblyPath` 可以是相对路径还是绝对路径。</span><span class="sxs-lookup"><span data-stu-id="007ea-106">`componentAssemblyPath` can be a relative or an absolute path.</span></span> <span data-ttu-id="007ea-107">程序集必须具有描述程序集的依赖关系的相同目录中随附的 deps.json 文件。</span><span class="sxs-lookup"><span data-stu-id="007ea-107">The assembly must have an accompanying deps.json file in the same directory that describes the assembly's dependencies.</span></span> <span data-ttu-id="007ea-108">此文件是在生成过程的输出。</span><span class="sxs-lookup"><span data-stu-id="007ea-108">This file is output during the build process.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveAssemblyToPath">
      <MemberSignature Language="C#" Value="public string ResolveAssemblyToPath (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ResolveAssemblyToPath(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Loader.AssemblyDependencyResolver.ResolveAssemblyToPath(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ResolveAssemblyToPath(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.ResolveAssemblyToPath : System.Reflection.AssemblyName -&gt; string" Usage="assemblyDependencyResolver.ResolveAssemblyToPath assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Loader</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="007ea-109">要解析的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="007ea-109">The assembly name to resolve.</span></span></param>
        <summary><span data-ttu-id="007ea-110">具有给定的程序集名称基于组件的依赖关系解析程序集路径。</span><span class="sxs-lookup"><span data-stu-id="007ea-110">Resolves a path to an assembly with the given assembly name based on the component's dependencies.</span></span></summary>
        <returns><span data-ttu-id="007ea-111">从组件的 deps.json 文件具有给定名称的程序集的路径或<c>null</c>如果程序集 deps.json 文件中不存在或者不是磁盘 deps.json 文件中指定的位置。</span><span class="sxs-lookup"><span data-stu-id="007ea-111">The path to an assembly with the given name from the component's deps.json file, or <c>null</c> if the assembly does not exist in the deps.json file or is not on disk in the location specified by the deps.json file.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUnmanagedDllToPath">
      <MemberSignature Language="C#" Value="public string ResolveUnmanagedDllToPath (string unmanagedDllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ResolveUnmanagedDllToPath(string unmanagedDllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Loader.AssemblyDependencyResolver.ResolveUnmanagedDllToPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveUnmanagedDllToPath (unmanagedDllName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ResolveUnmanagedDllToPath(System::String ^ unmanagedDllName);" />
      <MemberSignature Language="F#" Value="member this.ResolveUnmanagedDllToPath : string -&gt; string" Usage="assemblyDependencyResolver.ResolveUnmanagedDllToPath unmanagedDllName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Loader</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedDllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unmanagedDllName"><span data-ttu-id="007ea-112">若要解决的本机库的名称。</span><span class="sxs-lookup"><span data-stu-id="007ea-112">The name of the native library to resolve.</span></span></param>
        <summary><span data-ttu-id="007ea-113">具有给定名称基于组件的依赖项，将路径解析到本机库。</span><span class="sxs-lookup"><span data-stu-id="007ea-113">Resolves a path to a native library with the given name based on the component's dependencies.</span></span></summary>
        <returns><span data-ttu-id="007ea-114">从组件的 deps.json 文件和当前的运行时标识符，具有给定名称的本机库的路径或<c>null</c>如果程序集 deps.json 文件中不存在或不在指定的位置中的磁盘上deps.json 文件。</span><span class="sxs-lookup"><span data-stu-id="007ea-114">The path to a native library with the given name from the component's deps.json file and the current runtime identifier, or <c>null</c> if the assembly does not exist in the deps.json file or is not on disk  in the location specified by the deps.json file.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>