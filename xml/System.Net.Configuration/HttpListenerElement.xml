<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="454ec0d74116246d40fbfd1ad50cc77b1d5dbb4a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36552984" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type HttpListenerElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="9f4f8-101">表示配置文件中的 HttpListener 元素。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9f4f8-101">Represents the HttpListener element in the configuration file.</span>
      </span>
      <span data-ttu-id="9f4f8-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9f4f8-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f4f8-103">此类对应于\<httpListener > 元素 （网络设置） 配置元素。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-103">This class corresponds to the \<httpListener> Element (Network Settings) configuration element.</span></span> <span data-ttu-id="9f4f8-104">此类提供以编程方式访问可以在配置文件中存储的信息。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-104">This class provides programmatic access to information that can be stored in configuration files.</span></span>  
  
 <span data-ttu-id="9f4f8-105"><xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>属性指示如果<xref:System.Net.HttpListener>而不是转换后的 URI 其中百分比编码的任何值都会转换，并执行其他任何规范化步骤使用原始的未转义的 URI。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-105">The <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property indicates if <xref:System.Net.HttpListener> uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken.</span></span>  
  
 <span data-ttu-id="9f4f8-106">当<xref:System.Net.HttpListener>实例收到的请求通过`http.sys`服务，它创建提供的 URI 字符串的实例`http.sys`，并将数据公开为<xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-106">When a <xref:System.Net.HttpListener> instance receives a request through the `http.sys` service, it creates an instance of the URI string provided by `http.sys`, and exposes it as the <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="9f4f8-107">`http.sys`服务公开两个请求 URI 字符串：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-107">The `http.sys` service exposes two request URI strings:</span></span>  
  
-   <span data-ttu-id="9f4f8-108">原始 URI</span><span class="sxs-lookup"><span data-stu-id="9f4f8-108">Raw URI</span></span>  
  
-   <span data-ttu-id="9f4f8-109">转换后的 URI</span><span class="sxs-lookup"><span data-stu-id="9f4f8-109">Converted URI</span></span>  
  
 <span data-ttu-id="9f4f8-110">原始 URI 是<xref:System.Uri?displayProperty=nameWithType>HTTP 请求的请求行中提供：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-110">The raw URI is the <xref:System.Uri?displayProperty=nameWithType> provided in the request line of a HTTP request:</span></span>  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 <span data-ttu-id="9f4f8-111">通过提供的原始 URI`http.sys`上述，请求为"/ 路径 /"。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-111">The raw URI provided by `http.sys` for the request mentioned above, is "/path/".</span></span> <span data-ttu-id="9f4f8-112">这表示在通过网络发送后面的 HTTP 谓词的字符串。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-112">This represents the string following the HTTP verb as it was sent over the network.</span></span>  
  
 <span data-ttu-id="9f4f8-113">`http.sys`服务从请求中提供通过使用 HTTP 请求行中提供的 URI 的信息创建一个转换后的 URI 和要确定源服务器请求的主机标头应转发到。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-113">The `http.sys` service creates a converted URI from the information provided in the request by using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to.</span></span> <span data-ttu-id="9f4f8-114">这是通过比较中使用一组的已注册的 URI 前缀请求的信息。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-114">This is done by comparing the information from the request with a set of registered URI prefixes.</span></span> <span data-ttu-id="9f4f8-115">HTTP 服务器 SDK 文档是指此转换后的 URI 作为[HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108)结构。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-115">The HTTP Server SDK documentation refers to this converted URI as the [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) structure.</span></span>  
  
 <span data-ttu-id="9f4f8-116">为了能够比较该请求与已注册的 URI 前缀，需要进行一些规范化到请求。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-116">In order to be able to compare the request with registered URI prefixes, some normalization to the request needs to be done.</span></span> <span data-ttu-id="9f4f8-117">对于上面的转换后的 URI 的示例将为，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-117">For the sample above the converted URI would be as follows:</span></span>  
  
 `http://www.contoso.com/path/`  
  
 <span data-ttu-id="9f4f8-118">`http.sys`服务结合<xref:System.Uri.Host%2A?displayProperty=nameWithType>属性值和请求行来创建转换后的 URI 中的字符串。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-118">The `http.sys` service combines the <xref:System.Uri.Host%2A?displayProperty=nameWithType> property value and the string in the request line to create a converted URI.</span></span> <span data-ttu-id="9f4f8-119">此外，`http.sys`和<xref:System.Uri?displayProperty=nameWithType>类还执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-119">In addition, `http.sys` and the <xref:System.Uri?displayProperty=nameWithType> class also do the following:</span></span>  
  
-   <span data-ttu-id="9f4f8-120">取消转义所有百分比编码值。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-120">Un-escapes all percent encoded values.</span></span>  
  
-   <span data-ttu-id="9f4f8-121">将转换百分比编码为 utf-16 字符表示形式的非 ASCII 字符。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-121">Converts percent-encoded non-ASCII characters into a UTF-16 character representation.</span></span> <span data-ttu-id="9f4f8-122">请注意，以及 Unicode 字符 （Unicode 编码使用 %uxxxx 格式） 支持 utf-8 和 ANSI/DBCS 字符。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-122">Note that UTF-8 and ANSI/DBCS characters are supported as well as Unicode characters (Unicode encoding using the %uXXXX format).</span></span>  
  
-   <span data-ttu-id="9f4f8-123">执行其他规范化步骤，如路径压缩。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-123">Executes other normalization steps, like path compression.</span></span>  
  
 <span data-ttu-id="9f4f8-124">请求不包含有关用于百分比编码值的编码的任何信息，因为它可能不能以确定正确的编码只是通过分析百分比编码值。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-124">Since the request doesn't contain any information about the encoding used for percent-encoded values, it may not be possible to determine the correct encoding just by parsing the percent-encoded values.</span></span>  
  
 <span data-ttu-id="9f4f8-125">因此`http.sys`提供用于修改进程的两个注册表项：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-125">Therefore `http.sys` provides two registry keys for modifying the process:</span></span>  
  
|<span data-ttu-id="9f4f8-126">注册表项</span><span class="sxs-lookup"><span data-stu-id="9f4f8-126">Registry Key</span></span>|<span data-ttu-id="9f4f8-127">默认值</span><span class="sxs-lookup"><span data-stu-id="9f4f8-127">Default Value</span></span>|<span data-ttu-id="9f4f8-128">描述</span><span class="sxs-lookup"><span data-stu-id="9f4f8-128">Description</span></span>|  
|------------------|-------------------|-----------------|  
|<span data-ttu-id="9f4f8-129">EnableNonUTF8</span><span class="sxs-lookup"><span data-stu-id="9f4f8-129">EnableNonUTF8</span></span>|<span data-ttu-id="9f4f8-130">1</span><span class="sxs-lookup"><span data-stu-id="9f4f8-130">1</span></span>|<span data-ttu-id="9f4f8-131">如果为零，`http.sys`接受仅 UTF 8 编码的 Url。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-131">If zero, `http.sys` accepts only UTF-8-encoded URLs.</span></span><br /><br /> <span data-ttu-id="9f4f8-132">如果非零，`http.sys`还接受在请求中的 ANSI 编码或 DBCS 编码的 Url。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-132">If non-zero, `http.sys` also accepts ANSI-encoded or DBCS-encoded URLs in requests.</span></span>|  
|<span data-ttu-id="9f4f8-133">FavorUTF8</span><span class="sxs-lookup"><span data-stu-id="9f4f8-133">FavorUTF8</span></span>|<span data-ttu-id="9f4f8-134">1</span><span class="sxs-lookup"><span data-stu-id="9f4f8-134">1</span></span>|<span data-ttu-id="9f4f8-135">如果非零，`http.sys`始终尝试解码 URL 为 utf-8 首先; 如果转换失败和 EnableNonUTF8 为非零，Http.sys 然后尝试对其进行解码为 ANSI 或 DBCS。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-135">If non-zero, `http.sys` always tries to decode a URL as UTF-8 first; if that conversion fails and EnableNonUTF8 is non-zero, Http.sys then tries to decode it as ANSI or DBCS.</span></span><br /><br /> <span data-ttu-id="9f4f8-136">如果为零 （和 EnableNonUTF8 为非零），`http.sys`尝试对其进行解码为 ANSI 或 DBCS; 如果该操作不成功，它会尝试 utf-8 转换。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-136">If zero (and EnableNonUTF8 is non-zero), `http.sys` tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.</span></span>|  
  
 <span data-ttu-id="9f4f8-137">当<xref:System.Net.HttpListener>收到请求时，它使用转换后的 URI 从`http.sys`作为输入到<xref:System.Net.HttpListenerRequest.Url%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-137">When <xref:System.Net.HttpListener> receives a request, it uses the converted URI from `http.sys` as input to the <xref:System.Net.HttpListenerRequest.Url%2A> property.</span></span>  
  
 <span data-ttu-id="9f4f8-138">没有需要在 Uri 中支持除了字符和数字的字符。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-138">There is a need for supporting characters besides characters and numbers in URIs.</span></span> <span data-ttu-id="9f4f8-139">一个示例是下面的 URI，用于检索客户的客户信息数字"1/3812":</span><span class="sxs-lookup"><span data-stu-id="9f4f8-139">An example is the following URI, which is used to retrieve customer information for customer number "1/3812":</span></span>  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 <span data-ttu-id="9f4f8-140">请注意 Uri (%2f) 中的百分号编码斜杠。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-140">Note the percent-encoded slash in the Uri (%2F).</span></span> <span data-ttu-id="9f4f8-141">因为在这种情况下包含斜杠字符表示数据而不是路径分隔符，这是必需的。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-141">This is necessary, since in this case the slash character represents data and not a path delimiter.</span></span>  
  
 <span data-ttu-id="9f4f8-142">将字符串传递给 Uri 构造函数将导致以下 URI:</span><span class="sxs-lookup"><span data-stu-id="9f4f8-142">Passing the string to Uri constructor will lead to the following URI:</span></span>  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 <span data-ttu-id="9f4f8-143">将路径拆分为其段将导致以下元素：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-143">Splitting the path into its segments would result in the following elements:</span></span>  
  
 `Customer('1`  
  
 `3812')`  
  
 <span data-ttu-id="9f4f8-144">这不是请求的发送方的意图。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-144">This is not the intent of the sender of the request.</span></span>  
  
 <span data-ttu-id="9f4f8-145">如果<xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>属性设置为 false，则当<xref:System.Net.HttpListener>收到请求时，它使用的原始 URI 而不是转换后 URI`http.sys`作为输入到<xref:System.Net.HttpListenerRequest.Url%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-145">If the <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property is set to false, then when the <xref:System.Net.HttpListener> receives a request, it uses the raw URI instead of the converted URI from `http.sys` as input to the <xref:System.Net.HttpListenerRequest.Url%2A> property.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f4f8-146">初始化 <see cref="T:System.Net.Configuration.HttpListenerElement" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f4f8-146">Initializes a new instance of the <see cref="T:System.Net.Configuration.HttpListenerElement" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeouts : System.Net.Configuration.HttpListenerTimeoutsElement" Usage="System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f4f8-147">获取用于 <see cref="T:System.Net.HttpListener" /> 对象的默认超时元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f4f8-147">Gets the default timeout elements used for an <see cref="T:System.Net.HttpListener" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f4f8-148">返回 <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f4f8-148">Returns <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />.</span>
          </span>
          <span data-ttu-id="9f4f8-149">用于 <see cref="T:System.Net.HttpListener" /> 对象的超时元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f4f8-149">The timeout elements used for an <see cref="T:System.Net.HttpListener" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UnescapeRequestUrl : bool" Usage="System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f4f8-150">获取一个值，该值指示 <see cref="T:System.Net.HttpListener" /> 是否使用未经转义的原始 URI，而非经过转换的 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f4f8-150">Gets a value that indicates if <see cref="T:System.Net.HttpListener" /> uses the raw unescaped URI instead of the converted URI.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f4f8-151">一个布尔值，该值指示 <see cref="T:System.Net.HttpListener" /> 是否使用未经转义的原始 URI，而非经过转换的 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f4f8-151">A Boolean value that indicates if <see cref="T:System.Net.HttpListener" /> uses the raw unescaped URI, rather than the converted URI.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f4f8-152"><xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>属性指示如果<xref:System.Net.HttpListener>而不是转换后的 URI 其中百分比编码的任何值都会转换，并执行其他任何规范化步骤使用原始的未转义的 URI。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-152">The <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property indicates if <xref:System.Net.HttpListener> uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken.</span></span>  
  
 <span data-ttu-id="9f4f8-153">当<xref:System.Net.HttpListener>实例收到的请求通过`http.sys`服务，它创建提供的 URI 字符串的实例`http.sys`，并将数据公开为<xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-153">When a <xref:System.Net.HttpListener> instance receives a request through the `http.sys` service, it creates an instance of the URI string provided by `http.sys`, and exposes it as the <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="9f4f8-154">`http.sys`服务公开两个请求 URI 字符串：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-154">The `http.sys` service exposes two request URI strings:</span></span>  
  
-   <span data-ttu-id="9f4f8-155">原始 URI</span><span class="sxs-lookup"><span data-stu-id="9f4f8-155">Raw URI</span></span>  
  
-   <span data-ttu-id="9f4f8-156">转换后的 URI</span><span class="sxs-lookup"><span data-stu-id="9f4f8-156">Converted URI</span></span>  
  
 <span data-ttu-id="9f4f8-157">原始 URI 是<xref:System.Uri?displayProperty=nameWithType>HTTP 请求的请求行中提供：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-157">The raw URI is the <xref:System.Uri?displayProperty=nameWithType> provided in the request line of a HTTP request:</span></span>  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 <span data-ttu-id="9f4f8-158">通过提供的原始 URI`http.sys`上述，请求为"/ 路径 /"。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-158">The raw URI provided by `http.sys` for the request mentioned above, is "/path/".</span></span> <span data-ttu-id="9f4f8-159">这表示在通过网络发送后面的 HTTP 谓词的字符串。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-159">This represents the string following the HTTP verb as it was sent over the network.</span></span>  
  
 <span data-ttu-id="9f4f8-160">`http.sys`服务从请求中提供通过使用 HTTP 请求行中提供的 URI 的信息创建一个转换后的 URI 和要确定源服务器请求的主机标头应转发到。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-160">The `http.sys` service creates a converted URI from the information provided in the request by using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to.</span></span> <span data-ttu-id="9f4f8-161">这是通过比较中使用一组的已注册的 URI 前缀请求的信息。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-161">This is done by comparing the information from the request with a set of registered URI prefixes.</span></span> <span data-ttu-id="9f4f8-162">HTTP 服务器 SDK 文档是指此转换后的 URI 作为[HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108)结构。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-162">The HTTP Server SDK documentation refers to this converted URI as the [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) structure.</span></span>  
  
 <span data-ttu-id="9f4f8-163">为了能够比较该请求与已注册的 URI 前缀，需要进行一些规范化到请求。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-163">In order to be able to compare the request with registered URI prefixes, some normalization to the request needs to be done.</span></span> <span data-ttu-id="9f4f8-164">对于上面的转换后的 URI 的示例将为，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-164">For the sample above the converted URI would be as follows:</span></span>  
  
 `http://www.contoso.com/path/`  
  
 <span data-ttu-id="9f4f8-165">`http.sys`服务结合<xref:System.Uri.Host%2A?displayProperty=nameWithType>属性值和请求行来创建转换后的 URI 中的字符串。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-165">The `http.sys` service combines the <xref:System.Uri.Host%2A?displayProperty=nameWithType> property value and the string in the request line to create a converted URI.</span></span> <span data-ttu-id="9f4f8-166">此外，`http.sys`和<xref:System.Uri?displayProperty=nameWithType>类还执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-166">In addition, `http.sys` and the <xref:System.Uri?displayProperty=nameWithType> class also do the following:</span></span>  
  
-   <span data-ttu-id="9f4f8-167">取消转义所有百分比编码值。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-167">Un-escapes all percent encoded values.</span></span>  
  
-   <span data-ttu-id="9f4f8-168">将转换百分比编码为 utf-16 字符表示形式的非 ASCII 字符。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-168">Converts percent-encoded non-ASCII characters into a UTF-16 character representation.</span></span> <span data-ttu-id="9f4f8-169">请注意，以及 Unicode 字符 （Unicode 编码使用 %uxxxx 格式） 支持 utf-8 和 ANSI/DBCS 字符。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-169">Note that UTF-8 and ANSI/DBCS characters are supported as well as Unicode characters (Unicode encoding using the %uXXXX format).</span></span>  
  
-   <span data-ttu-id="9f4f8-170">执行其他规范化步骤，如路径压缩。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-170">Executes other normalization steps, like path compression.</span></span>  
  
 <span data-ttu-id="9f4f8-171">请求不包含有关用于百分比编码值的编码的任何信息，因为它可能不能以确定正确的编码只是通过分析百分比编码值。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-171">Since the request doesn't contain any information about the encoding used for percent-encoded values, it may not be possible to determine the correct encoding just by parsing the percent-encoded values.</span></span>  
  
 <span data-ttu-id="9f4f8-172">因此`http.sys`提供用于修改进程的两个注册表项：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-172">Therefore `http.sys` provides two registry keys for modifying the process:</span></span>  
  
|<span data-ttu-id="9f4f8-173">注册表项</span><span class="sxs-lookup"><span data-stu-id="9f4f8-173">Registry Key</span></span>|<span data-ttu-id="9f4f8-174">默认值</span><span class="sxs-lookup"><span data-stu-id="9f4f8-174">Default Value</span></span>|<span data-ttu-id="9f4f8-175">描述</span><span class="sxs-lookup"><span data-stu-id="9f4f8-175">Description</span></span>|  
|------------------|-------------------|-----------------|  
|<span data-ttu-id="9f4f8-176">EnableNonUTF8</span><span class="sxs-lookup"><span data-stu-id="9f4f8-176">EnableNonUTF8</span></span>|<span data-ttu-id="9f4f8-177">1</span><span class="sxs-lookup"><span data-stu-id="9f4f8-177">1</span></span>|<span data-ttu-id="9f4f8-178">如果为零，`http.sys`接受仅 UTF 8 编码的 Url。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-178">If zero, `http.sys` accepts only UTF-8-encoded URLs.</span></span><br /><br /> <span data-ttu-id="9f4f8-179">如果非零，`http.sys`还接受在请求中的 ANSI 编码或 DBCS 编码的 Url。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-179">If non-zero, `http.sys` also accepts ANSI-encoded or DBCS-encoded URLs in requests.</span></span>|  
|<span data-ttu-id="9f4f8-180">FavorUTF8</span><span class="sxs-lookup"><span data-stu-id="9f4f8-180">FavorUTF8</span></span>|<span data-ttu-id="9f4f8-181">1</span><span class="sxs-lookup"><span data-stu-id="9f4f8-181">1</span></span>|<span data-ttu-id="9f4f8-182">如果非零，`http.sys`始终尝试解码 URL 为 utf-8 首先; 如果转换失败和 EnableNonUTF8 为非零，Http.sys 然后尝试对其进行解码为 ANSI 或 DBCS。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-182">If non-zero, `http.sys` always tries to decode a URL as UTF-8 first; if that conversion fails and EnableNonUTF8 is non-zero, Http.sys then tries to decode it as ANSI or DBCS.</span></span><br /><br /> <span data-ttu-id="9f4f8-183">如果为零 （和 EnableNonUTF8 为非零），`http.sys`尝试对其进行解码为 ANSI 或 DBCS; 如果该操作不成功，它会尝试 utf-8 转换。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-183">If zero (and EnableNonUTF8 is non-zero), `http.sys` tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.</span></span>|  
  
 <span data-ttu-id="9f4f8-184">当<xref:System.Net.HttpListener>收到请求时，它使用转换后的 URI 从`http.sys`作为输入到<xref:System.Net.HttpListenerRequest.Url%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-184">When <xref:System.Net.HttpListener> receives a request, it uses the converted URI from `http.sys` as input to the <xref:System.Net.HttpListenerRequest.Url%2A> property.</span></span>  
  
 <span data-ttu-id="9f4f8-185">没有需要在 Uri 中支持除了字符和数字的字符。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-185">There is a need for supporting characters besides characters and numbers in URIs.</span></span> <span data-ttu-id="9f4f8-186">一个示例是下面的 URI，用于检索客户的客户信息数字"1/3812":</span><span class="sxs-lookup"><span data-stu-id="9f4f8-186">An example is the following URI, which is used to retrieve customer information for customer number "1/3812":</span></span>  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 <span data-ttu-id="9f4f8-187">请注意 Uri (%2f) 中的百分号编码斜杠。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-187">Note the percent-encoded slash in the Uri (%2F).</span></span> <span data-ttu-id="9f4f8-188">因为在这种情况下包含斜杠字符表示数据而不是路径分隔符，这是必需的。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-188">This is necessary, since in this case the slash character represents data and not a path delimiter.</span></span>  
  
 <span data-ttu-id="9f4f8-189">将字符串传递给 Uri 构造函数将导致以下 URI:</span><span class="sxs-lookup"><span data-stu-id="9f4f8-189">Passing the string to Uri constructor will lead to the following URI:</span></span>  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 <span data-ttu-id="9f4f8-190">将路径拆分为其段将导致以下元素：</span><span class="sxs-lookup"><span data-stu-id="9f4f8-190">Splitting the path into its segments would result in the following elements:</span></span>  
  
 `Customer('1`  
  
 `3812')`  
  
 <span data-ttu-id="9f4f8-191">这不是请求的发送方的意图。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-191">This is not the intent of the sender of the request.</span></span>  
  
 <span data-ttu-id="9f4f8-192">如果<xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>属性设置为 false，则当<xref:System.Net.HttpListener>收到请求时，它使用的原始 URI 而不是转换后 URI`http.sys`作为输入到<xref:System.Net.HttpListenerRequest.Url%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="9f4f8-192">If the <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property is set to false, then when the <xref:System.Net.HttpListener> receives a request, it uses the raw URI instead of the converted URI from `http.sys` as input to the <xref:System.Net.HttpListenerRequest.Url%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
      </Docs>
    </Member>
  </Members>
</Type>