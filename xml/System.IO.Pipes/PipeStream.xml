<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PipeStream.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c4ce12188b120bb90db9e7bbf08c300b37b4511a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4ce12188b120bb90db9e7bbf08c300b37b4511a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Pipes.PipeStream">
          <source>Exposes a <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object around a pipe, which supports both anonymous and named pipes.</source>
          <target state="translated">公开管道周围的 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 对象，该对象同时支持匿名管道和命名管道。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class provides the base class for named and anonymous pipes operations in the .NET Framework.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>类提供基本类，用于在.NET Framework 中的匿名和命名管道操作。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.NamedPipeServerStream&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Pipes.NamedPipeClientStream&gt;</ph> classes for named pipe operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.NamedPipeServerStream&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.Pipes.NamedPipeClientStream&gt;</ph>命名的管道操作的类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> classes for anonymous pipe operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph>匿名管道操作的类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>For more information about pipes, see <bpt id="p1">[</bpt>Pipes<ept id="p1">](~/docs/standard/io/pipe-operations.md)</ept>.</source>
          <target state="translated">有关管道的详细信息，请参阅<bpt id="p1">[</bpt>管道<ept id="p1">](~/docs/standard/io/pipe-operations.md)</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>For an example of anonymous pipes, see <bpt id="p1">[</bpt>How to: Use Anonymous Pipes for Local Interprocess Communication<ept id="p1">](~/docs/standard/io/how-to-use-anonymous-pipes-for-local-interprocess-communication.md)</ept>.</source>
          <target state="translated">匿名管道的示例，请参阅<bpt id="p1">[</bpt>如何： 使用匿名管道进行本地进程间通信<ept id="p1">](~/docs/standard/io/how-to-use-anonymous-pipes-for-local-interprocess-communication.md)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>For an example of named pipes, see <bpt id="p1">[</bpt>How to: Use Named Pipes for Network Interprocess Communication<ept id="p1">](~/docs/standard/io/how-to-use-named-pipes-for-network-interprocess-communication.md)</ept>.</source>
          <target state="translated">命名管道的示例，请参阅<bpt id="p1">[</bpt>如何： 使用命名管道进行网络进程间通信<ept id="p1">](~/docs/standard/io/how-to-use-named-pipes-for-network-interprocess-communication.md)</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>for full trust for inheritors.</source>
          <target state="translated">对继承者的完全信任。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">此类不能由部分受信任的代码继承。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.IO.Pipes.PipeStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> values that indicates the direction of the pipe object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值之一，指示管道对象的方向。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than or equal to 0 that indicates the buffer size.</source>
          <target state="translated">一个大于或等于 0 的正 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值，指示缓冲区大小。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> value and buffer size.</source>
          <target state="translated">使用指定的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值和缓冲区大小初始化 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 类的一个新实例。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>This constructor uses a pipe transmission mode of <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Byte&gt;</ph>.</source>
          <target state="translated">此构造函数使用的管道传输模式<ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Byte&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> values that indicates the direction of the pipe object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值之一，指示管道对象的方向。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> values that indicates the transmission mode of the pipe object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值之一，指示管道对象的传输模式。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than or equal to 0 that indicates the buffer size.</source>
          <target state="translated">一个大于或等于 0 的正 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值，指示缓冲区大小。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph>, and buffer size.</source>
          <target state="translated">使用指定的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph>、<ph id="ph3">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 和缓冲区大小初始化 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 类的一个新实例。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="transmissionMode" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="transmissionMode" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read data into.</source>
          <target state="translated">将数据读入的缓冲区。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin reading.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 中的字节偏移量，从此处开始读取。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">最多读取的字节数。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The method to call when the asynchronous read operation is completed.</source>
          <target state="translated">异步读操作完成后调用的方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">开始异步读操作。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object that references the asynchronous read.</source>
          <target state="translated">引用异步读取的 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the returned <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> object to the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> method to determine how many bytes were read and to release operating system resources used for reading.</source>
          <target state="translated">返回值传递<ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>对象传递给<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>方法来确定已读取的字节数和释放用于进行读取的操作系统资源。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> 必须为对每个调用一次调用<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>This can be done either in the same code that called <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph> or in a callback that is passed to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated">这可以在相同的代码调用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>或在传递给回调<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports read operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph>属性来确定是否当前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象支持读操作。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If the pipe is closed or an invalid argument is passed to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>, the appropriate exceptions are raised immediately.</source>
          <target state="translated">如果管道已关闭或无效的自变量传递给<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>，会立即引发相应异常。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous read request occur on the thread pool thread that is performing the request.</source>
          <target state="translated">正在执行请求的线程池线程上发生异步读取请求过程中发生的错误。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The exceptions are raised when the code calls the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> method.</source>
          <target state="translated">当代码调用时，会引发这些异常<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the number of bytes available in <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 中可用的字节数。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe does not support read operations.</source>
          <target state="translated">管道不支持读取操作。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已断开连接，正在等待连接，或尚未设置句柄。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已损坏或出现其他 I/O 错误。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer that contains the data to write to the current stream.</source>
          <target state="translated">包含要写入当前流的数据的缓冲区。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">最多写入的字节数。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The method to call when the asynchronous write operation is completed.</source>
          <target state="translated">异步写操作完成后调用的方法。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">开始异步写操作。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object that references the asynchronous write operation.</source>
          <target state="translated">一个引用异步写操作的 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> 必须为对每个调用一次调用<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>This can be done either in the same code that called <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph> or in a callback that is passed to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated">这可以在相同的代码调用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>或在传递给回调<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports write operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph>属性来确定是否当前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象支持写入操作。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If the pipe is closed or an invalid argument is passed to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>, the appropriate exceptions are raised immediately.</source>
          <target state="translated">如果管道已关闭或无效的自变量传递给<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>，会立即引发相应异常。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous write request occur on the thread pool thread that is performing the request.</source>
          <target state="translated">正在执行请求的线程池线程上发生异步写入请求过程中发生的错误。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The exceptions are raised when the code calls the  <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> method.</source>
          <target state="translated">当代码调用时，会引发这些异常<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the number of bytes available in <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 中可用的字节数。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支持写入操作。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已断开连接，正在等待连接，或未设置句柄。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已损坏或出现其他 I/O 错误。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.CanRead">
          <source>Gets a value indicating whether the current stream supports read operations.</source>
          <target state="translated">获取一个值，该值指示当前流是否支持读操作。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports read operations; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果流支持读操作，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanRead">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object is closed, this property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象已关闭，则此属性返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.CanSeek">
          <source>Gets a value indicating whether the current stream supports seek operations.</source>
          <target state="translated">获取一个值，该值指示当前流是否支持查找操作。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">在所有情况下均为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanSeek">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object is closed, this property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象已关闭，则此属性返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.CanWrite">
          <source>Gets a value indicating whether the current stream supports write operations.</source>
          <target state="translated">获取一个值，该值指示当前流是否支持写操作。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports write operations; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果流支持写操作，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanWrite">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object is closed, this property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象已关闭，则此属性返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
          <source>Verifies that the pipe is in a proper state for getting or setting properties.</source>
          <target state="translated">验证管道是否处于可供获取或设置属性的正确状态。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.CheckReadOperations">
          <source>Verifies that the pipe is in a connected state for read operations.</source>
          <target state="translated">验证管道是否处于可供进行读操作的连接状态。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
          <source>Verifies that the pipe is in a connected state for write operations.</source>
          <target state="translated">验证管道是否处于可供进行写操作的连接状态。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">若要释放托管资源和非托管资源，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；若仅释放非托管资源，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 类使用的非托管资源，并可以选择释放托管资源。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">此方法称为由公共<ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 调用受保护<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph>方法替换<ph id="ph3">`disposing`</ph>参数设置为<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 调用<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph>与<ph id="ph3">`disposing`</ph>设置为<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>When the disposing parameter is <ph id="ph1">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object references.</source>
          <target state="translated">当处置参数是<ph id="ph1">`true`</ph>，此方法释放由任何托管对象持有的全部资源此<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象引用。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">此方法调用每个引用对象的 <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>In derived classes, put all <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> cleanup logic in the <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">在派生类中，使所有<ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>中的清理逻辑<ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 可以由其他对象多次调用。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">重写 <ph id="ph1">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph> 时，请注意不要引用在以前调用 <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 时已释放的对象。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关如何实现详细信息<ph id="ph1">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph>，请参阅<bpt id="p1">[</bpt>实现 Dispose 方法<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>和<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request.</source>
          <target state="translated">对挂起的异步请求的引用。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>Ends a pending asynchronous read request.</source>
          <target state="translated">结束挂起的异步读取请求。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>The number of bytes that were read.</source>
          <target state="translated">已读取的字节数。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>A return value of 0 indicates the end of the stream (the pipe has been closed).</source>
          <target state="translated">返回值 0 指示已到达流的末尾（管道已关闭）。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>This method returns the number of bytes read into the byte array specified by the earlier call to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated">此方法返回的以前调用指定的字节数组中读取的字节数<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>Pass the returned <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> object to the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> method to determine how many bytes were read and to release operating system resources used for reading.</source>
          <target state="translated">返回值传递<ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>对象传递给<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>方法来确定已读取的字节数和释放用于进行读取的操作系统资源。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> 必须为对每个调用一次调用<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>This can be done either in the same code that called <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph> or in a callback that is passed to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated">这可以在相同的代码调用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>或在传递给回调<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports read operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph>属性来确定是否当前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象支持读操作。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>If the pipe is closed or an invalid argument is passed to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>, the appropriate exceptions are raised immediately.</source>
          <target state="translated">如果管道已关闭或无效的自变量传递给<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>，会立即引发相应异常。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous read request occur on the thread pool thread that is performing the request.</source>
          <target state="translated">正在执行请求的线程池线程上发生异步读取请求过程中发生的错误。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>The exceptions are raised when the code calls the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> method.</source>
          <target state="translated">当代码调用时，会引发这些异常<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 不是源自当前流的 <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">流已关闭或出现了内部错误。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request.</source>
          <target state="translated">对挂起的异步请求的引用。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>Ends a pending asynchronous write request.</source>
          <target state="translated">结束挂起的异步写入请求。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> 必须为对每个调用一次调用<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>This can be done either in the same code that called <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph> or in a callback that is passed to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated">这可以在相同的代码调用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>或在传递给回调<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports write operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph>属性来确定是否当前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象支持写入操作。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>If the pipe is closed or an invalid argument is passed to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>, the appropriate exceptions are raised immediately.</source>
          <target state="translated">如果管道已关闭或无效的自变量传递给<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>，会立即引发相应异常。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request occur on the thread pool thread that is performing the request.</source>
          <target state="translated">正在执行请求的线程池线程上发生异步写入请求过程中发生的错误。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>The exceptions are raised when the code the calls <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> method.</source>
          <target state="translated">会引发这些异常时代码在调用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 不是源自当前流的 <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">流已关闭或出现了内部错误。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>Clears the buffer for the current stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">清除当前流的缓冲区，并使所有缓冲的数据都写入到基础设备。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Flush%2A&gt;</ph> method is not supported in the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class and does nothing when it is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Flush%2A&gt;</ph>中不支持方法<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>类而不会被调用时执行任何操作。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支持写入操作。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已损坏或出现其他 I/O 错误。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> object that encapsulates the access control list (ACL) entries for the pipe described by the current <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> 对象，该对象封装当前 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象所描述管道的访问控制列表 (ACL) 项。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> object that encapsulates the access control list (ACL) entries for the pipe described by the current <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> 对象，该对象封装当前 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象所描述管道的访问控制列表 (ACL) 项。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>An access control list (ACL) describes individuals and/or groups that have, or do not have, rights to perform specific actions on a specified file.</source>
          <target state="translated">访问控制列表 (ACL) 描述个人和/或组，或没有执行权限在指定的文件上执行特定操作。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>如何：添加或移除访问控制列表项<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">用于设置安全信息的基础调用失败。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">用于设置安全信息的基础调用失败。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">用于设置安全信息的基础调用失败。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>Gets the size, in bytes, of the inbound buffer for a pipe.</source>
          <target state="translated">获取管道的入站缓冲区的大小（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>An integer value that represents the inbound buffer size, in bytes.</source>
          <target state="translated">一个整数值，表示入站缓冲区的大小（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>If <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.InBufferSize%2A&gt;</ph> is 0, the buffer size is allocated as needed.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.InBufferSize%2A&gt;</ph>为 0，则根据需要分配的缓冲区大小。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>The stream is unreadable.</source>
          <target state="translated">流不可读。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>The pipe is waiting to connect.</source>
          <target state="translated">管道正在等待连接。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已损坏或出现其他 I/O 错误。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> object of the pipe to initialize.</source>
          <target state="translated">要初始化的管道的 <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to expose the handle; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">要公开句柄，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the handle was opened asynchronously; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 指示句柄已异步打开；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object from the specified <ph id="ph2">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> object.</source>
          <target state="translated">从指定的 <ph id="ph2">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> 对象中初始化 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source>If the pipe is in a connected state, this method also sets the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.IsConnected%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果管道是否处于已连接状态，此方法还将设置<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.IsConnected%2A&gt;</ph>属性<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source>A handle cannot be bound to the pipe.</source>
          <target state="translated">句柄无法绑定到管道中。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsAsync">
          <source>Gets a value indicating whether a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object was opened asynchronously or synchronously.</source>
          <target state="translated">获取一个值，该值指示 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象是异步打开还是同步打开。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsAsync">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object was opened asynchronously; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象是异步打开的，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsAsync">
          <source>This property enables your code to use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.SafePipeHandle%2A&gt;</ph> property correctly.</source>
          <target state="translated">此属性使你的代码以使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.SafePipeHandle%2A&gt;</ph>属性正确。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsConnected">
          <source>Gets or sets a value indicating whether a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object is connected.</source>
          <target state="translated">获取或设置一个值，该值指示是否已连接 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsConnected">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object is connected; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已连接 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsConnected">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.IsConnected%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> only if the <ph id="ph3">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object is connected.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.IsConnected%2A&gt;</ph>属性返回<ph id="ph2">`true`</ph>才<ph id="ph3">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>连接对象。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsConnected">
          <source>If this property returns <ph id="ph1">`false`</ph>, the pipe may be waiting to connect, or may be disconnected, closed, or broken.</source>
          <target state="translated">如果此属性返回<ph id="ph1">`false`</ph>，管道可能在等待连接，或可能被断开连接、 关闭，或破坏。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsHandleExposed">
          <source>Gets a value indicating whether a handle to a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object is exposed.</source>
          <target state="translated">获取一个值，该值指示是否公开了 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象的句柄。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsHandleExposed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a handle to the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object is exposed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果公开了 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象的句柄，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsHandleExposed">
          <source>The value of this property is set when obtaining a handle to the pipe that is encapsulated by the current <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object.</source>
          <target state="translated">此属性的值时获取管道的句柄当前包装设置<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>Gets a value indicating whether there is more data in the message returned from the most recent read operation.</source>
          <target state="translated">获取一个值，该值指示最近的读操作返回的消息中是否有更多数据。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if there are no more characters to read in the message; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果消息中没有更多要读取的字符，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>This property is relevant if the pipe's <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.ReadMode%2A&gt;</ph> property was set to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> by the most recent call to <ph id="ph3">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>.</source>
          <target state="translated">此属性是相关如果管道的<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.ReadMode%2A&gt;</ph>属性设置为<ph id="ph2">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>通过最近调用<ph id="ph3">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>The pipe is not connected.</source>
          <target state="translated">管道不可连接。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>The pipe handle has not been set.</source>
          <target state="translated">尚未设置管道句柄。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>The pipe's <ph id="ph1">&lt;see cref="P:System.IO.Pipes.PipeStream.ReadMode" /&gt;</ph> property value is not <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" /&gt;</ph>.</source>
          <target state="translated">管道的 <ph id="ph1">&lt;see cref="P:System.IO.Pipes.PipeStream.ReadMode" /&gt;</ph> 属性值不是 <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.Length">
          <source>Gets the length of a stream, in bytes.</source>
          <target state="translated">获取流长度（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.Length">
          <source>0 in all cases.</source>
          <target state="translated">在所有情况下均为 0。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.Length">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class does not support the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Length%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> 类不支持 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Length%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.Length">
          <source>Always thrown.</source>
          <target state="translated">始终引发。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>Gets the size, in bytes, of the outbound buffer for a pipe.</source>
          <target state="translated">获取管道的出站缓冲区的大小（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>The outbound buffer size, in bytes.</source>
          <target state="translated">出站缓冲区的大小（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>If <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.OutBufferSize%2A&gt;</ph> is 0, the buffer size is allocated as needed.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.OutBufferSize%2A&gt;</ph>为 0，则根据需要分配的缓冲区大小。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>The stream is unwriteable.</source>
          <target state="translated">该流不可写入。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>The pipe is waiting to connect.</source>
          <target state="translated">该管道正在等待连接。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已损坏或出现其他 I/O 错误。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.Position">
          <source>Gets or sets the current position of the current stream.</source>
          <target state="translated">获取或设置当前流的当前位置。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.Position">
          <source>0 in all cases.</source>
          <target state="translated">在所有情况下均为 0。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.Position">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class does not support the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Position%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> 类不支持 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Position%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.Position">
          <source>Always thrown.</source>
          <target state="translated">始终引发。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">此方法返回时，该缓冲区包含指定的字节数组，该数组的 <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> 和 (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) 之间的值由从当前源中读取的字节替换。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in the <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> array at which the bytes that are read will be placed.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 数组中的字节偏移量，其中读取的字节将被替换。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">最多读取的字节数。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads a block of bytes from a stream and writes the data to a specified buffer.</source>
          <target state="translated">从流中读取字节块，并将数据写入指定的缓冲区。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes that are read into <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated">读取到 <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 的总字节数。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This might be less than the number of bytes requested if that number of bytes is not currently available, or 0 if the end of the stream is reached.</source>
          <target state="translated">如果当前可用的字节数没有请求的那么多，则此数小于请求的字节数；或如果已到达流的末尾，则为零。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports read operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph>属性来确定是否当前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象支持读操作。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Calling the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph> method blocks until <ph id="ph2">`count`</ph> bytes are read or the end of the stream is reached.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph>方法进行阻止，直至<ph id="ph2">`count`</ph>读取的字节数，或已到达流结尾。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>For asynchronous read operations, see <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>.</source>
          <target state="translated">异步读取操作，请参阅<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example creates an anonymous pipe client and pipe server.</source>
          <target state="translated">下面的示例创建一个匿名管道客户端和管道服务器。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe server uses the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph> method to read a series of bytes from the pipe client as a validation code.</source>
          <target state="translated">管道服务器使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph>方法来验证代码以对管道客户端从读取的字节序列。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Both the pipe client and the pipe server are part of the same example.</source>
          <target state="translated">管道客户端和的管道服务器属于同一个示例。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The server portion of the example creates a client process and passes it an anonymous pipe handle as an argument.</source>
          <target state="translated">服务器部分的示例创建一个客户端进程，并将其作为自变量传递匿名管道句柄。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the number of bytes available in <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 中可用的字节数。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe does not support read operations.</source>
          <target state="translated">管道不支持读取操作。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已断开连接，正在等待连接，或尚未设置句柄。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Any I/O error occurred.</source>
          <target state="translated">发生了 I/O 错误。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>Reads a byte from a pipe.</source>
          <target state="translated">从管道读取字节。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>The byte, cast to <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>, or -1 indicates the end of the stream (the pipe has been closed).</source>
          <target state="translated">强制转换为 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 的字节或 -1 指示到达流的末尾（管道已关闭）。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports read operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph>属性来确定是否当前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象支持读操作。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>The pipe does not support read operations.</source>
          <target state="translated">管道不支持读取操作。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已断开连接，正在等待连接，或尚未设置句柄。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>Any I/O error occurred.</source>
          <target state="translated">发生了 I/O 错误。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>Gets or sets the reading mode for a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated">获取或设置 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象的读取模式。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> values that indicates how the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object reads from the pipe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值之一，指示如何从管道读取 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> mode message transmission.</source>
          <target state="translated">不支持匿名管道<ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>模式消息传输。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The supplied value is not a valid <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> value.</source>
          <target state="translated">所提供的值不是有效的 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The supplied value is not a supported <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> value for this pipe stream.</source>
          <target state="translated">所提供的值不是此管道流支持的 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The handle has not been set.</source>
          <target state="translated">尚未设置句柄。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The pipe is waiting to connect with a named client.</source>
          <target state="translated">此管道正在等待与命名的客户端进行连接。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The pipe is broken or an I/O error occurred with a named client.</source>
          <target state="translated">管道已中断，或命名的客户端发生了 I/O 错误。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.SafePipeHandle">
          <source>Gets the safe handle for the local end of the pipe that the current <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object encapsulates.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象所封装的本地管道末端的安全句柄。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.SafePipeHandle">
          <source>A <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> object for the pipe that is encapsulated by the current <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated">由当前 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象所封装的管道的一个 <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.SafePipeHandle">
          <source>The pipe handle has not been set.</source>
          <target state="translated">尚未设置管道句柄。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.SafePipeHandle">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The point, relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>, to begin seeking from.</source>
          <target state="translated">相对于 <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> 的点，从此处开始查找。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Specifies the beginning, the end, or the current position as a reference point for <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept>, using a value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 类型的值，将开始位置、结束位置或当前位置指定为 <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> 的参考点。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the current stream to the specified value.</source>
          <target state="translated">将当前流的当前位置设置为指定值。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position in the stream.</source>
          <target state="translated">流中的新位置。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Seek%2A&gt;</ph> method is not supported in pipes and raises a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph> when it is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Seek%2A&gt;</ph>不支持的管道和引发方法<ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>调用时。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> object that specifies an access control list (ACL) entry to apply to the current pipe.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> 对象，该对象指定要应用于当前管道的访问控制列表 (ACL) 项。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>Applies the access control list (ACL) entries specified by a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> object to the pipe specified by the current <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> 对象所指定的访问控制列表 (ACL) 项应用于由当前 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 对象指定的管道。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>An access control list (ACL) describes individuals and/or groups that have, or do not have, rights to perform specific actions on a specified file.</source>
          <target state="translated">访问控制列表 (ACL) 描述个人和/或组，或没有执行权限在指定的文件上执行特定操作。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>如何：添加或移除访问控制列表项<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source><ph id="ph1">&lt;paramref name="pipeSecurity" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pipeSecurity" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">用于设置安全信息的基础调用失败。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">用于设置安全信息的基础调用失败。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">用于设置安全信息的基础调用失败。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
          <source>The new length of the stream.</source>
          <target state="translated">流的新长度。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
          <source>Sets the length of the current stream to the specified value.</source>
          <target state="translated">将当前流的长度设为指定值。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class does not support the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.SetLength%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>类不支持<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.SetLength%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>Gets the pipe transmission mode supported by the current pipe.</source>
          <target state="translated">获取当前管道支持的管道传输模式。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> values that indicates the transmission mode supported by the current pipe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值之一，指示当前管道支持的传输模式。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> mode message transmission.</source>
          <target state="translated">不支持匿名管道<ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>模式消息传输。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>The handle has not been set.</source>
          <target state="translated">尚未设置句柄。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>The pipe is waiting to connect in an anonymous client/server operation or with a named client.</source>
          <target state="translated">管道正在等待在匿名客户端/服务器操作中进行连接或与命名客户端连接。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已损坏或出现其他 I/O 错误。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>Waits for the other end of the pipe to read all sent bytes.</source>
          <target state="translated">等待管道另一端读取所有发送的字节。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.WaitForPipeDrain%2A&gt;</ph> method blocks until the other end of the pipe has read all sent bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.WaitForPipeDrain%2A&gt;</ph>方法阻止，直至管道另一端具有读取所有发送的字节。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支持写入操作。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已损坏或出现其他 I/O 错误。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer that contains data to write to the pipe.</source>
          <target state="translated">包含要写入管道的数据的缓冲区。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to write to the current stream.</source>
          <target state="translated">要写入当前流的最大字节数。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a block of bytes to the current stream using data from a buffer.</source>
          <target state="translated">使用缓冲区中的数据将字节块写入当前流。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports write operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph>属性来确定是否当前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象支持写入操作。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Calling the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Write%2A&gt;</ph> method blocks until <ph id="ph2">`count`</ph> bytes are read or the end of the stream is reached.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Write%2A&gt;</ph>方法进行阻止，直至<ph id="ph2">`count`</ph>读取的字节数，或已到达流结尾。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>For asynchronous read operations, see <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph>.</source>
          <target state="translated">异步读取操作，请参阅<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the number of bytes available in <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大于 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 中可用的字节数。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支持写入操作。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已损坏或出现其他 I/O 错误。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The byte to write to the stream.</source>
          <target state="translated">要写入流中的字节。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current stream.</source>
          <target state="translated">将字节写入当前流。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports write operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph>属性来确定是否当前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>对象支持写入操作。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已关闭。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支持写入操作。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已断开连接，正在等待连接，或未设置句柄。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已损坏或出现其他 I/O 错误。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>