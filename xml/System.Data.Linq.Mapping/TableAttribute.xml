<Type Name="TableAttribute" FullName="System.Data.Linq.Mapping.TableAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4dac8ae4c41ccf03f39361e9cd513773973717f8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36689972" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TableAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TableAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.TableAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TableAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class TableAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type TableAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>将某个类指定为与数据库表相关联的实体类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可将类指定为与数据库表或视图关联的实体类。 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 将具有类<xref:System.Data.Linq.Mapping.TableAttribute>类视为持久性类的属性。  
  
 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 支持仅单表映射。 这就是说，实体类必须映射到一个数据库表，而你不能在同一时间将数据库表映射到多个类。  
  
 你可以使用<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>属性<xref:System.Data.Linq.Mapping.TableAttribute>特性为表中，指定一个名称并且你可以选择使用架构名称限定表名。 如果你不通过使用指定名称<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>属性，表名假定可与类名称相同。  
  
## <a name="schema-qualified-names"></a>架构限定名称  
 （可选） 可以使用架构名称来限定表名。 默认情况下，在第一个期间左侧令牌<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>字符串被视为架构名称。 名称的其余部分被视为表名称。 提供程序行情作为相应的表名称。 例如， [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] SQL Server 提供程序可确保，则使用方括号至少需要位置。  
  
> [!NOTE]
>  在某些情况下，你必须显式特性由于对 SQL Server 提供程序无法自动的括号。 下表显示了一些示例。  
  
|Case|示例： 标识符名称|在属性中的示例： 预期的字符串|否则为...|  
|----------|------------------------------|--------------------------------------------|----------------|  
|架构名称包含句点|架构:"A.B"<br /><br /> 表:"C"|"[A.B]。C"|第一个期间假定架构名称分开的表名称。|  
|架构/表名称开头 `@`|“@SomeName”|"[@SomeName]"|假定为参数名称。|  
|架构开头`[`和结束的 `]`|"[Schema.Table]"|"[[架构]。[表]]]"|不带引号的标识符类似于带引号的标识符。|  
|表开头`[`和结束的 `]`|"[表]"|"[[表]]]"|不带引号的标识符类似于带引号的标识符。|  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.TableAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TableAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Linq.Mapping.TableAttribute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.TableAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Linq.Mapping.TableAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表或视图的名称。</summary>
        <value>默认情况下，此值与类名称相同。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你不通过使用指定名称<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>，假定表名称为的类名称相同。  
  
> [!NOTE]
>  你可以选择使用的架构名称来限定表名 (例如，Schema3.Table5)。 默认情况下，在第一个期间左侧令牌<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>字符串被视为架构名称，并为的表名称的其余部分。  
  
 在下面的示例中，默认表名， `Customer`，更改为`Customers`。  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>