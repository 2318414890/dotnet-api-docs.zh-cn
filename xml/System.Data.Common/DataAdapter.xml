<Type Name="DataAdapter" FullName="System.Data.Common.DataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c2ebaa8f380dc7733c8d56b9c4a0aaeacc1dfa2e" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037821" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataAdapter : System.ComponentModel.Component, System.Data.IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataAdapter extends System.ComponentModel.Component implements class System.Data.IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Class DataAdapter&#xA;Inherits Component&#xA;Implements IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataAdapter : System::ComponentModel::Component, System::Data::IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源的一组 SQL 命令和一个数据库连接。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DataAdapter>用作之间的桥梁<xref:System.Data.DataSet>和用于检索和保存数据的数据源。 <xref:System.Data.Common.DataAdapter>映射提供此桥<xref:System.Data.Common.DataAdapter.Fill%2A>的更改中的数据<xref:System.Data.DataSet>以匹配数据源中的数据和<xref:System.Data.IDataAdapter.Update%2A>，其中更改要匹配中的数据的数据源中的数据<xref:System.Data.DataSet>。  
  
 如果你要连接到 SQL Server 数据库，你可以通过使用提高总体性能<xref:System.Data.SqlClient.SqlDataAdapter>连同其关联的<xref:System.Data.SqlClient.SqlCommand>和<xref:System.Data.SqlClient.SqlConnection>对象。 对于 OLE DB 支持的数据源，使用<xref:System.Data.Common.DataAdapter>及其关联<xref:System.Data.OleDb.OleDbCommand>和<xref:System.Data.OleDb.OleDbConnection>对象。 对于 ODBC 支持的数据源，使用<xref:System.Data.Common.DataAdapter>及其关联<xref:System.Data.Odbc.OdbcCommand>和<xref:System.Data.Odbc.OdbcConnection>对象。 对于 Oracle 数据库，请使用<xref:System.Data.Common.DataAdapter>及其关联<xref:System.Data.OracleClient.OracleCommand>和<xref:System.Data.OracleClient.OracleConnection>对象。  
  
 实例时<xref:System.Data.Common.DataAdapter>创建读/写属性设置为初始值。 有关这些值的列表，请参阅<xref:System.Data.Common.DataAdapter>构造函数。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Common.DataAdapter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Common.DataAdapter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实例时<xref:System.Data.Common.DataAdapter>创建以下读/写属性设置为以下的初始值。  
  
|属性|初始值|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
|<xref:System.Data.Common.DataAdapter.TableMappings%2A>|一个 <xref:System.Data.Common.DataAdapter.TableMappings%2A> 对象数组。|  
  
 你可以更改任何通过单独属性调用这些属性的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataAdapter (System.Data.Common.DataAdapter from);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DataAdapter from) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (from As DataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataAdapter(System::Data::Common::DataAdapter ^ from);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="from" Type="System.Data.Common.DataAdapter" />
      </Parameters>
      <Docs>
        <param name="from">用于创建新 <see cref="T:System.Data.Common.DataAdapter" /> 的 <see cref="T:System.Data.Common.DataAdapter" /> 对象。</param>
        <summary>从同一类型的现有对象中初始化 <see cref="T:System.Data.Common.DataAdapter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.Data.Common.DataAdapter>构造函数旨在使用.NET Framework 数据提供程序实现在克隆的实现中使用的类似构造函数时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChangesDuringFill">
      <MemberSignature Language="C#" Value="public bool AcceptChangesDuringFill { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptChangesDuringFill" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptChangesDuringFill As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptChangesDuringFill { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在任何 Fill 操作过程中，在将 <see cref="M:System.Data.DataRow.AcceptChanges" /> 添加到 <see cref="T:System.Data.DataRow" /> 之后是否在 <see cref="T:System.Data.DataTable" /> 上调用它。</summary>
        <value>
          如果在 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上调用 <see cref="T:System.Data.DataRow" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`false`，<xref:System.Data.DataRow.AcceptChanges%2A>不调用，和新添加的行视为插入的行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChangesDuringUpdate">
      <MemberSignature Language="C#" Value="public bool AcceptChangesDuringUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptChangesDuringUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptChangesDuringUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptChangesDuringUpdate { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期间是否调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />。</summary>
        <value>
          如果在 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在调用期间`Update`方法`DataAdapter`，数据库可以将数据发送回 ADO.NET 应用程序作为输出参数或作为结果集的第一个返回的记录。 ADO.NET 可以检索这些值并在要更新的 <xref:System.Data.DataRow> 中更新相应的列。 默认情况下，ADO.NET 调用`AcceptChanges`方法`DataRow`更新后。 但是，如果你想要合并的更新的行回另一<xref:System.Data.DataTable>，你可能要保留的主键列的原始值。 例如，对应于在数据库中，标识列，如自动递增列的主键列可以包含新数据库分配与中分配的原始值不匹配值`DataRow`。 默认情况下，`AcceptChanges`后更新时，值和原始值中的行，该行可能已被隐式调用<xref:System.Data.DataColumn.AutoIncrement%2A>通过 ADO.NET，赋的值都将丢失。 您可以保留中的原始值`DataRow`通过防止`ADO.NET`调用`AcceptChanges`执行更新某行，通过设置后<xref:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate%2A>属性`false`，从而保留原始值。  
  
> [!NOTE]
>  设置`AcceptChangesDuringUpdate`属性`false`适用于所有的数据修改，而不仅仅是插入。 如果你想要编辑或删除行在相同的更新中，并且你想要禁止显示调用`AcceptChanges`仅对插入，然后而不是设置`AccceptChangesDuringUpdate`到`false`，使用的事件处理程序`RowUpdated`事件`DataAdapter`。 在事件处理程序可以检查<xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A>以确定数据修改是插入，以及如果`true`，将其设置<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>属性<xref:System.Data.Common.RowUpdatedEventArgs>到<xref:System.Data.UpdateStatus.SkipCurrentRow>。 有关详细信息及示例，请参阅[检索标识或自动编号值](~/docs/framework/data/adonet/retrieving-identity-or-autonumber-values.md)。  
  
   
  
## Examples  
 此示例演示从 `DataTable` 中提取已更改的行，然后使用 <xref:System.Data.SqlClient.SqlDataAdapter> 更新数据源并检索新标识列值。 通过设置`AcceptChangesDuringUpdate`属性<xref:System.Data.SqlClient.SqlDataAdapter>到`false`以保留原始的自动递增值，可随之新数据合并到原始<xref:System.Data.DataTable>，即使新的标识值与原始的自动递增不匹配中的值`DataTable`。  
  
 [!code-csharp[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.AcceptChangesDuringUpdate/CS/source.cs#1)]
 [!code-vb[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.AcceptChangesDuringUpdate/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneInternals">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DataAdapter CloneInternals ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DataAdapter CloneInternals() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.CloneInternals" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CloneInternals () As DataAdapter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::DataAdapter ^ CloneInternals();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CloneInternals() has been deprecated.  Use the DataAdapter(DataAdapter from) constructor.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataAdapter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Data.Common.DataAdapter" /> 实例的一个副本。</summary>
        <returns>
          <see cref="T:System.Data.Common.DataAdapter" /> 的克隆实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法已弃用。 <xref:System.Data.Common.DataAdapter.%23ctor%2A>构造函数应使用而不是此方法。  
  
 所有命令， <xref:System.Data.Common.DataAdapter.TableMappings%2A>、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>，和<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>克隆。 但是，这些命令的连接将不复制，而共享。 因此，克隆<xref:System.Data.Common.DataAdapter>可以对作为原始的相同连接使用。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Data.Common.DataAdapter.CloneInternals" />在派生类中，一定要调用基类的<see cref="M:System.Data.Common.DataAdapter.CloneInternals" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ContinueUpdateOnError">
      <MemberSignature Language="C#" Value="public bool ContinueUpdateOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueUpdateOnError" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.ContinueUpdateOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueUpdateOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueUpdateOnError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定在行更新过程中遇到错误时是否生成异常。</summary>
        <value>
          如果要继续更新而不生成异常，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`ContinueUpdateOnError`设置为`true`，行的更新过程中发生错误时引发任何异常。 跳过对行的更新并错误信息放入<xref:System.Data.DataRow.RowError%2A>中错误的行的属性。 <xref:System.Data.Common.DataAdapter>来继续更新后续行。  
  
 如果`ContinueUpdateOnError`设置为`false`，行的更新的过程中发生错误时引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTableMappings">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DataTableMappingCollection CreateTableMappings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DataTableMappingCollection CreateTableMappings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.CreateTableMappings" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateTableMappings () As DataTableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::DataTableMappingCollection ^ CreateTableMappings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataTableMappingCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个新的 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</summary>
        <returns>新的表映射集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Data.Common.DataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法称为由公共<xref:System.IDisposable.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。 `Dispose` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。  
  
 当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Data.Common.DataAdapter> 引用的、由任何托管对象持有的全部资源。 此方法调用每个引用对象的 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 在重写<see langword="Dispose(Boolean)" />，请注意不要引用在以前调用释放的对象<see langword="Dispose" />。 有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
 有关详细信息<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[重写 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行以与数据源中的行匹配。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public virtual int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
        <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行以与数据源中的行匹配。</summary>
        <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DataAdapter.Fill%2A>方法从数据源使用指定的一个关联的 SELECT 语句中检索行<xref:System.Data.IDbDataAdapter.SelectCommand%2A>属性。 与 SELECT 语句关联的连接对象必须是有效，但它不需要处于打开状态。 如果之前连接关闭<xref:System.Data.Common.DataAdapter.Fill%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DataAdapter.Fill%2A>是调用，它保持打开状态。  
  
 <xref:System.Data.Common.DataAdapter.Fill%2A>操作然后将行添加到目标<xref:System.Data.DataTable>中的对象<xref:System.Data.DataSet>，则创建<xref:System.Data.DataTable>对象如果它们尚不存在。 在创建时<xref:System.Data.DataTable>对象，<xref:System.Data.Common.DataAdapter.Fill%2A>操作通常只创建列名称元数据。 但是，如果<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>属性设置为`AddWithKey`，还会创建相应的主键约束。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable> 值。 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
 如果数据适配器在填充时遇到重复的列<xref:System.Data.DataTable>，它会生成后续列，请使用模式"columnname1"、"columnname2"、"columnname3"等的名称。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。 额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 SELECT 语句用于填充<xref:System.Data.DataSet>返回多个结果，例如批处理 SQL 语句，如果其中一个结果包含错误，所有的后续结果会跳过并不添加到<xref:System.Data.DataSet>。  
  
 你可以使用<xref:System.Data.Common.DataAdapter.Fill%2A>上多次相同的方法<xref:System.Data.DataTable>。 如果存在主键，传入行与已存在的匹配行合并。 如果主键不存在，将传入的行追加到<xref:System.Data.DataTable>。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="dataTable">一个要用记录填充的 <see cref="T:System.Data.DataTable" />。</param>
        <param name="dataReader">
          <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
        <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行以与使用 <see cref="T:System.Data.DataTable" /> 名称和指定的 <see cref="T:System.Data.IDataReader" /> 的数据源中的行匹配。</summary>
        <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请参阅备注以`System.Data.Common.DataAdapter.Fill(System.Data.DataSet)`有关其他信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), dataReader As IDataReader, startRecord As Integer, maxRecords As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dataTables">要用记录填充的 <see cref="T:System.Data.DataTable" /> 对象的集合。</param>
        <param name="dataReader">
          <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
        <param name="startRecord">起始记录的从零开始的索引。</param>
        <param name="maxRecords">指示最大记录数的整数。</param>
        <summary>在 <see cref="T:System.Data.DataTable" /> 对象集合的指定范围中添加或刷新行以与数据源中的行匹配。</summary>
        <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请参阅备注以`System.Data.Common.DataAdapter.Fill(System.Data.DataSet)`有关其他信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dataSet">一个要用记录填充的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="srcTable">一个字符串，指示源表的名称。</param>
        <param name="dataReader">
          <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
        <param name="startRecord">起始记录的从零开始的索引。</param>
        <param name="maxRecords">指示最大记录数的整数。</param>
        <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
        <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请参阅备注以`System.Data.Common.DataAdapter.Fill(System.Data.DataSet)`有关其他信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在填充操作过程中出现错误时返回。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **FillError**事件允许用户以确定是否在错误发生后应继续填充操作。 示例**FillError**可能发生事件是：  
  
-   添加到的数据`DataSet`无法转换为公共语言运行时类型，而不会丢失精度。  
  
-   所添加的行包含违反约束，必须在上强制执行的数据`DataColumn`中`DataSet`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillLoadOption">
      <MemberSignature Language="C#" Value="public System.Data.LoadOption FillLoadOption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.LoadOption FillLoadOption" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.FillLoadOption" />
      <MemberSignature Language="VB.NET" Value="Public Property FillLoadOption As LoadOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::LoadOption FillLoadOption { System::Data::LoadOption get(); void set(System::Data::LoadOption value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.LoadOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Data.LoadOption" />，后者确定适配器如何从 <see cref="T:System.Data.DataTable" /> 中填充 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
        <value>一个 <see cref="T:System.Data.LoadOption" /> 值。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Data.LoadOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向指定的 <see cref="T:System.Data.DataTable" /> 添加一个 <see cref="T:System.Data.DataSet" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 值之一。</param>
        <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
        <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DataAdapter.FillSchema%2A>方法从使用数据源中检索架构<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。 与相关的连接对象<xref:System.Data.IDbDataAdapter.SelectCommand%2A>必须有效，但它不需要处于打开状态。 如果之前连接关闭<xref:System.Data.Common.DataAdapter.FillSchema%2A>是调用，它是打开以检索数据，然后关闭。 如果连接是打开之前<xref:System.Data.Common.DataAdapter.FillSchema%2A>是调用，它保持打开状态。  
  
 A<xref:System.Data.Common.DataAdapter.FillSchema%2A>操作添加<xref:System.Data.DataTable>到目标<xref:System.Data.DataSet>。 然后，它添加到列<xref:System.Data.DataColumnCollection>的<xref:System.Data.DataTable>，并配置以下<xref:System.Data.DataColumn>如果它们在数据源中存在的属性：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 必须设置<xref:System.Data.DataColumn.AutoIncrementStep%2A>和<xref:System.Data.DataColumn.AutoIncrementSeed%2A>单独。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DataAdapter.FillSchema%2A> 此外可以配置<xref:System.Data.DataTable.PrimaryKey%2A>和<xref:System.Data.DataTable.Constraints%2A>属性根据下列规则：  
  
-   如果一个或多个主键列由<xref:System.Data.IDbDataAdapter.SelectCommand%2A>，用作主键列<xref:System.Data.DataTable>。  
  
-   如果返回任何主键列但唯一列，唯一的列用作为主键，当且仅当所有唯一列均为 null。 如果任何列都可以为 null，<xref:System.Data.UniqueConstraint>添加到<xref:System.Data.ConstraintCollection>，但<xref:System.Data.DataTable.PrimaryKey%2A>未设置属性。  
  
-   如果返回主键列和唯一列，将主键列用作主键列<xref:System.Data.DataTable>。  
  
> [!NOTE]
>  基础数据存储区可能允许不支持的列属性<xref:System.Data.DataColumn>，这将导致不正确转换某些列属性。 例如，SQL Server 允许 tinyint 数据类型的标识列，而<xref:System.Data.DataColumn>仅允许具有 Int16、 Int32 和 Int64<xref:System.Data.DataColumn.AutoIncrement%2A>属性集。 `FillSchema` 以无提示方式忽略情况下其中<xref:System.Data.DataColumn>能准确地镜像数据源，并不引发任何异常。  
  
 请注意，主键和唯一约束添加到<xref:System.Data.ConstraintCollection>根据前面的规则，但其他约束类型不会添加。  
  
如果唯一聚集索引定义的一列或 SQL Server 表中的列，并且对一组单独的列，定义主键约束，则将返回的聚集索引中列的名称。 若要返回的名称或主键列的名称，用于指定主键索引的名称的 SELECT 语句中的查询提示。 有关指定查询提示的详细信息，请参阅[查询提示 (TRANSACT-SQL)](/sql/t-sql/queries/hints-transact-sql-query)。  
  
 如果<xref:System.Data.Common.DataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。 额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.Common.DataAdapter.FillSchema%2A> 不返回任何行。 使用<xref:System.Data.Common.DataAdapter.Fill%2A>方法以将行添加到<xref:System.Data.DataTable>。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDataReader ^ dataReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="dataTable">要从 <see cref="T:System.Data.DataTable" /> 填充的 <see cref="T:System.Data.IDataReader" />。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 值之一。</param>
        <param name="dataReader">填充 <see cref="T:System.Data.IDataReader" /> 时要用作数据源的 <see cref="T:System.Data.DataTable" />。</param>
        <summary>向指定的 <see cref="T:System.Data.DataTable" /> 添加一个 <see cref="T:System.Data.DataSet" />。</summary>
        <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" /> 对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable, System::Data::IDataReader ^ dataReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="dataSet">要从 <see cref="T:System.Data.DataTable" /> 填充的 <see cref="T:System.Data.IDataReader" />。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 值之一。</param>
        <param name="srcTable">用于表映射的源表的名称。</param>
        <param name="dataReader">填充 <see cref="T:System.Data.IDataReader" /> 时要用作数据源的 <see cref="T:System.Data.DataTable" />。</param>
        <summary>向指定的 <see cref="T:System.Data.DataTable" /> 添加一个 <see cref="T:System.Data.DataSet" />。</summary>
        <returns>对添加到 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataSet" /> 对象集合的引用。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public virtual System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当执行 SQL SELECT 语句时由用户设置的参数。</summary>
        <returns>
          <see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTableMappings">
      <MemberSignature Language="C#" Value="protected bool HasTableMappings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool HasTableMappings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.HasTableMappings" />
      <MemberSignature Language="VB.NET" Value="Protected Function HasTableMappings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool HasTableMappings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示是否已创建了一个 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</summary>
        <returns>
          如果已创建 <see cref="T:System.Data.Common.DataTableMappingCollection" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDataAdapter.MissingMappingAction</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定传入数据没有匹配的表或列时需要执行的操作。</summary>
        <value>
          <see cref="T:System.Data.MissingMappingAction" /> 值之一。 默认值为 <see langword="Passthrough" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DataAdapter.TableMappings%2A>属性提供了返回的记录之间的主映射和<xref:System.Data.DataSet>。  
  
   
  
## Examples  
 下面的示例创建一个派生的类，<xref:System.Data.OleDb.OleDbDataAdapter>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData DataAdapter.MissingMappingAction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.MissingMappingAction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.MissingMappingAction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingMappingAction" /> 值之一。</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDataAdapter.MissingSchemaAction</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定现有 <see cref="T:System.Data.DataSet" /> 架构与传入数据不匹配时需要执行的操作。</summary>
        <value>
          <see cref="T:System.Data.MissingSchemaAction" /> 值之一。 默认值为 <see langword="Add" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建一个派生的类，<xref:System.Data.OleDb.OleDbDataAdapter>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData DataAdapter.MissingMappingAction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.MissingMappingAction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.MissingMappingAction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Data.FillErrorEventArgs" /> 对象。</param>
        <summary>当 <see langword="Fill" /> 过程中出现错误时调用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetFillLoadOption">
      <MemberSignature Language="C#" Value="public void ResetFillLoadOption ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetFillLoadOption() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.ResetFillLoadOption" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetFillLoadOption ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetFillLoadOption();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 重置为默认状态，并使 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" /> 接受 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnProviderSpecificTypes">
      <MemberSignature Language="C#" Value="public virtual bool ReturnProviderSpecificTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReturnProviderSpecificTypes" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ReturnProviderSpecificTypes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ReturnProviderSpecificTypes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see langword="Fill" /> 方法是应当返回提供程序特定的值，还是返回公用的符合 CLS 的值。</summary>
        <value>
          如果 <see langword="true" /> 方法应返回特定于提供程序的值，则为 <see langword="Fill" />；否则如果返回常用的符合 CLS 的值，则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值为 `false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeAcceptChangesDuringFill">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSerializeAcceptChangesDuringFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSerializeAcceptChangesDuringFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldSerializeAcceptChangesDuringFill () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ShouldSerializeAcceptChangesDuringFill();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定是否应保持 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 属性。</summary>
        <returns>
          如果保持 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeFillLoadOption">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSerializeFillLoadOption ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSerializeFillLoadOption() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldSerializeFillLoadOption () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ShouldSerializeFillLoadOption();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定是否应保持 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 属性。</summary>
        <returns>
          如果保持 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTableMappings">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTableMappings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTableMappings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.ShouldSerializeTableMappings" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeTableMappings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeTableMappings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象是否存在，并且它们是否应该是持久的。</summary>
        <returns>
          如果存在一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDataAdapter.TableMappings">
      <MemberSignature Language="C#" Value="System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property TableMappings As ITableMappingCollection Implements IDataAdapter.TableMappings" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::ITableMappingCollection ^ System.Data.IDataAdapter.TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDataAdapter.TableMappings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示如何将源表映射到数据集表。</summary>
        <value>一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。 默认值为空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Data.Common.DataAdapter> 实例强制转换为 <xref:System.Data.IDataAdapter> 接口时使用。  
  
 有关详细信息，请参阅<xref:System.Data.IDataAdapter.TableMappings%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.Common.DataTableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DataTableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As DataTableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DataTableMappingCollection ^ TableMappings { System::Data::Common::DataTableMappingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataTableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个集合，它提供源表和 <see cref="T:System.Data.DataTable" /> 之间的主映射。</summary>
        <value>一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。 默认值为空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当协调更改，<xref:System.Data.Common.DataAdapter>使用<xref:System.Data.Common.DataTableMappingCollection>集合相关联的数据源用于使用的列名称的列名称<xref:System.Data.DataSet>。  
  
   
  
## Examples  
 下面的示例使用派生的类中，<xref:System.Data.OleDb.OleDbDataAdapter>来添加<xref:System.Data.Common.DataTableMapping>对象添加到其<xref:System.Data.Common.DataAdapter.TableMappings%2A>集合，并显示列表中的映射的源表。 此示例假定<xref:System.Data.OleDb.OleDbDataAdapter>已创建。  
  
 [!code-csharp[Classic WebData DataAdapter.TableMappings Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.TableMappings Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.TableMappings Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.TableMappings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Update(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
        <summary>从名为“Table”的 <see cref="T:System.Data.DataSet" /> 为指定的 <see cref="T:System.Data.DataTable" /> 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在行的基础上执行更新。 对于每个插入、 修改和删除的行，<xref:System.Data.Common.DataAdapter.Update%2A>方法确定的一种已对其执行的更改 （插入、 更新或删除）。 具体取决于的更改，类型`Insert`，`Update,`或`Delete`命令模板执行传播到数据源已修改的行。 在应用程序调用<xref:System.Data.Common.DataAdapter.Update%2A>方法，<xref:System.Data.Common.DataAdapter>检查<xref:System.Data.DataRow.RowState%2A>属性，并执行所需的 INSERT、 UPDATE 或 DELETE 语句以迭代方式对于每一行，根据在中配置的索引顺序<xref:System.Data.DataSet>. 例如，<xref:System.Data.Common.DataAdapter.Update%2A>可能会执行 DELETE 语句，接着是 INSERT 语句，则另一个 DELETE 语句，截止日期中的行的顺序<xref:System.Data.DataTable>。  
  
 应注意的是，为批处理; 不执行这些语句单独更新每个行。 应用程序可以调用<xref:System.Data.DataSet.GetChanges%2A>方法在其中你必须控制的语句类型序列的情况下 （例如，在更新之前插入）。 有关详细信息，请参阅[使用 Dataadapter 更新数据源](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)。  
  
 如果尚未指定 INSERT、 UPDATE 或 DELETE 语句，<xref:System.Data.Common.DataAdapter.Update%2A>方法生成异常。 但是，你可以创建<xref:System.Data.SqlClient.SqlCommandBuilder>或<xref:System.Data.OleDb.OleDbCommandBuilder>对象以自动生成单表更新的 SQL 语句，如果你设置`SelectCommand`.NET Framework 数据提供程序的属性。 然后，你未设置任何其他 SQL 语句都由**CommandBuilder**。 此生成的逻辑需要要中存在的键列信息<xref:System.Data.DataSet>。 有关详细信息请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 <xref:System.Data.Common.DataAdapter.Update%2A>方法从第一个映射，然后再执行更新中列出的表中检索行。 <xref:System.Data.Common.DataAdapter.Update%2A>然后刷新使用的值的行<xref:System.Data.IDbCommand.UpdatedRowSource%2A>属性。 将忽略所有附加的行返回。  
  
 任何数据加载回后<xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件时，允许用户检查经协调<xref:System.Data.DataSet>行和任何输出参数返回命令。 行已成功更新后，会接受对该行的更改。  
  
 使用时<xref:System.Data.Common.DataAdapter.Update%2A>，执行的顺序是，如下所示：  
  
1.  中的值<xref:System.Data.DataRow>移动到的参数值。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  该命令执行。  
  
4.  如果该命令设置为`FirstReturnedRecord`，则第一个返回结果将放置在<xref:System.Data.DataRow>。  
  
5.  如果没有输出参数，它们都将置于<xref:System.Data.DataRow>。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=nameWithType>。 这将引发同时<xref:System.Data.DataTable.RowChanging?displayProperty=nameWithType>和<xref:System.Data.DataTable.RowChanged?displayProperty=nameWithType>了已更新的事件<xref:System.Data.DataRow>。  
  
 与每个命令<xref:System.Data.Common.DataAdapter>通常有一个与之关联的参数集合。 参数映射到当前行通过`SourceColumn`和`SourceVersion`的.NET 数据提供程序的属性`Parameter`类。 `SourceColumn` 是指<xref:System.Data.DataTable>列，<xref:System.Data.Common.DataAdapter>引用以获取当前行的参数值。  
  
 `SourceColumn` 在应用任何表映射之前是指未映射的列名称。 如果`SourceColumn`引用不存在的列中，执行的操作取决于下列情况之一<xref:System.Data.MissingMappingAction>值。  
  
|枚举值|执行操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|使用的源列名和中的表名<xref:System.Data.DataSet>如果不不存在任何映射。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>生成。 当显式设置映射时，输入参数的缺少映射通常是错误的结果。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还用于映射输出的值或输入/输出参数回`DataSet`。 如果它引用不存在的列，则会生成异常。  
  
 `SourceVersion`的.NET 数据提供程序的属性`Parameter`类确定是否使用该列的值的原始、 当前或已建议版本。 此功能通常用于在 UPDATE 语句，以检查存在开放式并发冲突的 WHERE 子句中包括原始值。  
  
 调用<xref:System.Data.DataSet.AcceptChanges%2A>方法或<xref:System.Data.DataTable.AcceptChanges%2A>方法中的所有更改将都提交<xref:System.Data.DataSet>或<xref:System.Data.DataTable>。 如果任一方法调用之前<xref:System.Data.Common.DbDataAdapter.Update%2A>方法被调用时，任何更改将提交时<xref:System.Data.Common.DbDataAdapter.Update%2A>调用方法时，除非已以来所做进一步的更改<xref:System.Data.DataSet.AcceptChanges%2A>或<xref:System.Data.DataTable.AcceptChanges%2A>调用。  
  
> [!NOTE]
>  如果更新行时出错，将引发异常，并执行更新，则停止。 若要继续执行更新操作不会遇到错误时生成异常，设置<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>属性`true`之前调用<xref:System.Data.Common.DbDataAdapter.Update%2A>。 你还可能响应中的每个行基础上的错误`RowUpdated`DataAdapter 事件。 若要继续执行更新操作而不生成了异常`RowUpdated`事件中，设置<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>属性<xref:System.Data.Common.RowUpdatedEventArgs>到<xref:System.Data.UpdateStatus.Continue>。  
>   
>  为你传播到数据源每个列<xref:System.Data.Common.DataAdapter.Update%2A>，应将参数添加到`InsertCommand`， `UpdateCommand`，或`DeleteCommand`。 `SourceColumn`参数的属性应设置为列的名称。 此设置指示参数的值未手动设置，但获取自当前处理的行中的特定列。  
  
   
  
## Examples  
 下面的示例使用派生的类中，<xref:System.Data.OleDb.OleDbDataAdapter>到<xref:System.Data.Common.DataAdapter.Update%2A>数据源。  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      </Docs>
    </Member>
  </Members>
</Type>