<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="332e7bf7ba0f9c35c1455cd28bcf8d4bd18ca3f3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36692803" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Aids implementation of the <see cref="T:System.Data.IDbDataAdapter" /> interface. Inheritors of <see cref="T:System.Data.Common.DbDataAdapter" /> implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a **DataAdapter**.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>类继承自<xref:System.Data.Common.DataAdapter>类并实现<xref:System.Data.IDbDataAdapter>接口。 它可帮助实现的类**DataAdapter**专用于关系数据库。  
  
 应用程序不会创建的实例<xref:System.Data.Common.DbDataAdapter>类直接，但创建从它继承的类的实例。  
  
 继承的类<xref:System.Data.Common.DbDataAdapter>必须实现继承的成员，且通常定义其他成员来添加提供程序特定的功能。 例如，<xref:System.Data.Common.DbDataAdapter>类定义<xref:System.Data.IDbDataAdapter.SelectCommand%2A>属性，与<xref:System.Data.Common.DbDataAdapter>类定义的八个重载<xref:System.Data.IDataAdapter.Fill%2A>方法。 反过来，<xref:System.Data.OleDb.OleDbDataAdapter>类继承<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法，并还定义了两个其他重载<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>它们采用 ADO 记录集对象作为参数。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>继承自<see cref="T:System.Data.Common.DbDataAdapter" />类，我们建议你实现以下构造函数： <list type="table"><listheader><term>项</term><description>说明</description></listheader><item><term> *Prv*DataAdapter() </term><description>初始化的新实例 * Prv * DataAdapter 类。 </description></item><item><term> * Prv * DataAdapter (* Prv * 命令 * selectCommand *) </term><description>初始化的新实例 * Prv * 指定的 SQL SELECT DataAdapter 类语句。 </description></item><item><term> * Prv * DataAdapter (字符串 * selectCommandText *、 字符串 * selectConnectionString *) </term><description>初始化的新实例 * Prv * DataAdapter 类使用 SQL SELECT 语句和连接字符串。 </description></item><item><term> * Prv * DataAdapter (字符串 * selectCommandText * * Prv * 连接 * selectConnection *) </term><description>初始化的新实例 * Prv * DataAdapter与 SQL SELECT 语句一起使用的类和一个 * Prv * 连接对象。</description></item></list>  若要将提升.NET Framework 数据提供程序之间的一致性，您应命名窗体中的继承类 * Prv * DataAdapter，其中 * Prv * 是为特定的.NET Framework 数据提供程序命名空间中的所有类提供的统一前缀。例如，"Sql"是前缀<see cref="T:System.Data.SqlClient.SqlDataAdapter" />**System.Data.SqlClient** 命名空间中的类。</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of a <see langword="DataAdapter" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of a **DataAdapter** class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你创建的实例<xref:System.Data.Common.DbDataAdapter>，以下的读/写属性设置为以下的初始值。  
  
|属性|初始值|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|一个新的 <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|一个新的 <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|一个新的 <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|一个新的 <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 你可以更改任何通过单独属性调用这些属性的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">A <see langword="DataAdapter" /> object used to create the new <see langword="DataAdapter" />.</param>
        <summary>Initializes a new instance of a <see langword="DataAdapter" /> class from an existing object of the same type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.Data.Common.DbDataAdapter>构造函数旨在使用.NET Framework 数据提供程序实现在克隆的实现中使用的类似构造函数时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" />
      </Parameters>
      <Docs>
        <param name="command">The <see cref="T:System.Data.IDbCommand" /> to add to the batch.</param>
        <summary>Adds a <see cref="T:System.Data.IDbCommand" /> to the current batch.</summary>
        <returns>The number of commands in the batch before adding the <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:System.Data.Common.DbDataAdapter>，此方法将引发<xref:System.NotSupportedException>。 继承自的类<xref:System.Data.Common.DbDataAdapter>重写此方法以支持批处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>此方法进行保护，并且旨在用于.NET Framework 数据提供程序。如果从继承的类<see cref="T:System.Data.Common.DbDataAdapter" />支持批处理，类重写此方法以允许用户将命令添加到一批。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:System.Data.IDbCommand" /> objects from the batch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:System.Data.Common.DbDataAdapter>，此方法将引发<xref:System.NotSupportedException>。 继承自的类<xref:System.Data.Common.DbDataAdapter>重写此方法以支持批处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>此方法进行保护，并且旨在用于.NET Framework 数据提供程序。如果从继承的类<see cref="T:System.Data.Common.DbDataAdapter" />支持批处理，类重写此方法以允许用户从一批中删除所有命令。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">The <see cref="T:System.Data.DataRow" /> used to update the data source.</param>
        <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
        <param name="tableMapping">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</summary>
        <returns>A new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />在派生类中，一定要调用基类的<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">The <see cref="T:System.Data.DataRow" /> that updates the data source.</param>
        <param name="command">The <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
        <param name="tableMapping">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</summary>
        <returns>A new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />在派生类中，一定要调用基类的<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default name used by the <see cref="T:System.Data.Common.DataAdapter" /> object for table mappings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "表"是使用默认名称<xref:System.Data.Common.DataAdapter>表映射的对象。  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> 是当应用程序将添加要用于表映射<xref:System.Data.Common.DbDataAdapter.Fill%2A>，但未指定<xref:System.Data.DataTable>名称。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a command for deleting records from the data set.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" />过程中使用<see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />若要删除已删除的行在数据集中的数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 期间<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果未设置此属性和主键信息位于<xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>自动生成。  
  
   
  
## Examples  
 下面的示例创建派生的类<xref:System.Data.OleDb.OleDbDataAdapter>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Data.Common.DbDataAdapter" /> and optionally releases the managed resources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executes the current batch.</summary>
        <returns>The return value from the last command in the batch.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:System.Data.Common.DbDataAdapter>，此方法将引发<xref:System.NotSupportedException>。 继承自的类<xref:System.Data.Common.DbDataAdapter>重写此方法以支持批处理。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>此方法进行保护，并且旨在用于.NET Framework 数据提供程序。如果从继承的类<see cref="T:System.Data.Common.DbDataAdapter" />支持批处理，类重写此方法以允许用户执行一个批处理。此方法的实现将适配器中的命令合并到一个批处理，然后执行的批处理，并且返回批处理的返回值。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fills a <see cref="T:System.Data.DataSet" /> or a <see cref="T:System.Data.DataTable" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</param>
        <summary>Adds or refreshes rows in the <see cref="T:System.Data.DataSet" />.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法从使用 SELECT 语句的数据源检索数据。 <xref:System.Data.IDbConnection>与 select 命令关联的对象必须是有效，但它不需要处于打开状态。 如果<xref:System.Data.IDbConnection>之前关闭<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它是打开以检索数据，然后关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它保持打开状态。  
  
 如果遇到错误或异常，则填充数据表时，在发生错误的之前添加的行将保留在数据表中。 该操作的剩余部分将会中止。  
  
 如果命令不返回任何行，没有表将添加到<xref:System.Data.DataSet>，并且不引发任何异常。  
  
 如果<xref:System.Data.Common.DbDataAdapter>对象在填充时遇到重复的列<xref:System.Data.DataTable>，它将生成的后续使用模式的列名称"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。  
  
 当指定的查询返回多个结果时，返回查询的每个行的结果集被置于单独的表。 额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。 因为如果处理插入查询跟 select 查询，查询不返回行，创建没有表，创建了为 select 查询的表的名称为"Table"，因为它是创建的第一个表。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 SELECT 语句用于填充<xref:System.Data.DataSet>多个结果，例如批处理 SQL 语句，如果其中一个结果包含错误，将返回所有的后续结果将被跳过并不会添加到<xref:System.Data.DataSet>。  
  
 当使用后续<xref:System.Data.Common.DbDataAdapter.Fill%2A>调用来刷新的内容<xref:System.Data.DataSet>，必须满足两个条件：  
  
1.  SQL 语句应匹配是最初用来填充<xref:System.Data.DataSet>。  
  
2.  **密钥**列信息必须存在。  
  
 如果主键信息存在，则协调任何重复的行，并且只能出现一次在<xref:System.Data.DataTable>相对应的<xref:System.Data.DataSet>。 主键信息可能被设置通过<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，通过指定<xref:System.Data.DataTable.PrimaryKey%2A>属性<xref:System.Data.DataTable>，或通过设置<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>属性`AddWithKey`。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable> 值。 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">The name of the <see cref="T:System.Data.DataTable" /> to use for table mapping.</param>
        <summary>Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataTable" /> name.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法从数据源使用指定的一个关联的 SELECT 语句中检索行<xref:System.Data.IDbDataAdapter.SelectCommand%2A>属性。 与 SELECT 语句关联的连接对象必须是有效，但它不需要处于打开状态。 如果之前连接关闭<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它保持打开状态。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>操作然后将行添加到目标<xref:System.Data.DataTable>中的对象<xref:System.Data.DataSet>，则创建<xref:System.Data.DataTable>对象如果它们尚不存在。 在创建时<xref:System.Data.DataTable>对象，<xref:System.Data.Common.DbDataAdapter.Fill%2A>操作通常只创建列名称元数据。 但是，如果<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>属性设置为`AddWithKey`，还会创建相应的主键约束。  
  
 如果<xref:System.Data.Common.DbDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。  
  
 重载<xref:System.Data.Common.DbDataAdapter.Fill%2A>采用`DataTable`如参数仅获取第一个结果。 使用的重载<xref:System.Data.Common.DbDataAdapter.Fill%2A>采用`DataSet`作为参数，以获取多个结果。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持方案其中<xref:System.Data.DataSet>包含多个<xref:System.Data.DataTable>名称只有大小写不同的对象。 在这种情况下，<xref:System.Data.Common.DbDataAdapter.Fill%2A>执行区分大小写的比较，以查找相应的表，并创建新表，如果不存在完全匹配。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果<xref:System.Data.Common.DbDataAdapter.Fill%2A>称为和<xref:System.Data.DataSet>只包含一个<xref:System.Data.DataTable>只是大小写，其名称不同，<xref:System.Data.DataTable>更新。 在此方案中，比较是区分大小写。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 你可以使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>上多次相同的方法<xref:System.Data.DataTable>。 如果存在主键，传入行与已存在的匹配行合并。 如果主键不存在，将传入的行追加到<xref:System.Data.DataTable>。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable> 值。 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.Fill%2A>和<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>.NET Framework 数据提供程序检索仅第一个结果的架构信息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <block subset="none" type="overrides">
          <para>此重载<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />方法受保护，并旨在用于.NET Framework 数据提供程序。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <summary>Adds or refreshes rows in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> names.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法从使用 SELECT 语句的数据源检索数据。 <xref:System.Data.IDbConnection>与 select 命令关联的对象必须是有效，但它不需要处于打开状态。 如果<xref:System.Data.IDbConnection>之前关闭<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它保持打开状态。  
  
 如果命令不返回任何行，没有表将添加到<xref:System.Data.DataSet>，并且不引发任何异常。  
  
 如果<xref:System.Data.Common.DbDataAdapter>对象在填充时遇到重复的列<xref:System.Data.DataTable>，它将生成后续列，请使用模式"columnname1"、"columnname2"、"columnname3"等的名称。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。  
  
 当指定的查询返回多个结果时，每个结果集将被置于单独的表。 额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。 由于你可以像处理插入查询跟 select 查询，查询不返回行，创建没有表，表创建了为 select 查询将被命名为"Table"，因为它是创建的第一个表。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持方案其中<xref:System.Data.DataSet>包含多个<xref:System.Data.DataTable>名称只有大小写不同的对象。 在这种情况下，<xref:System.Data.Common.DbDataAdapter.Fill%2A>执行区分大小写的比较，以查找相应的表，并创建新表，如果不存在完全匹配。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果<xref:System.Data.Common.DbDataAdapter.Fill%2A>称为和<xref:System.Data.DataSet>只包含一个<xref:System.Data.DataTable>只是大小写，其名称不同，<xref:System.Data.DataTable>更新。 在此方案中，比较是区分大小写。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 如果遇到错误或异常，则填充数据表时，在发生错误的之前添加的行将保留在数据表中。 该操作的剩余部分将会中止。  
  
 SELECT 语句用于填充<xref:System.Data.DataSet>返回多个结果，如一批 SQL 语句中，注意以下事项：  
  
-   如果其中一个结果包含错误，跳过且不会添加到所有的后续结果<xref:System.Data.DataSet>。  
  
 当使用后续<xref:System.Data.Common.DbDataAdapter.Fill%2A>调用来刷新的内容<xref:System.Data.DataSet>，必须满足两个条件：  
  
1.  SQL 语句应匹配是最初用来填充<xref:System.Data.DataSet>。  
  
2.  **密钥**列信息必须存在。 如果主键信息存在，则协调任何重复的行，并且只能出现一次在<xref:System.Data.DataTable>相对应的<xref:System.Data.DataSet>。 主键信息可能被设置通过<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，通过指定<xref:System.Data.DataTable.PrimaryKey%2A>属性<xref:System.Data.DataTable>，或通过设置<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>属性`AddWithKey`。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable> 值。 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
   
  
## Examples  
 下面的示例使用派生的类中， <xref:System.Data.OleDb.OleDbDataAdapter>，以填充<xref:System.Data.DataSet>与从类别表的行。 此示例假定你已创建了<xref:System.Data.OleDb.OleDbDataAdapter>和<xref:System.Data.DataSet>。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">The source table is invalid.</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />在派生类中，一定要调用基类的<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">A <see cref="T:System.Data.DataTable" /> to fill with records and, if necessary, schema.</param>
        <param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Adds or refreshes rows in a <see cref="T:System.Data.DataTable" /> to match those in the data source using the specified <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.IDbCommand" /> and <see cref="T:System.Data.CommandBehavior" />.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataTable" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法从数据源使用指定的一个关联的 SELECT 语句中检索行<xref:System.Data.IDbDataAdapter.SelectCommand%2A>属性。 与 SELECT 语句关联的连接对象必须是有效，但它不需要处于打开状态。 如果之前连接关闭<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它是打开以检索数据，然后关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它保持打开状态。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>操作然后将行添加到指定目标<xref:System.Data.DataTable>对象在<xref:System.Data.DataSet>，则创建<xref:System.Data.DataTable>对象如果它尚不存在。 在创建时<xref:System.Data.DataTable>对象，<xref:System.Data.Common.DbDataAdapter.Fill%2A>操作通常只创建列名称元数据。 但是，如果<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>属性设置为`AddWithKey`，还会创建相应的主键约束。  
  
 如果<xref:System.Data.Common.DbDataAdapter>对象在填充时遇到重复的列<xref:System.Data.DataTable>，它将生成的后续列，使用模式名称"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。  
  
 重载<xref:System.Data.Common.DbDataAdapter.Fill%2A>采用`DataTable`如参数仅获取第一个结果。 使用的重载<xref:System.Data.Common.DbDataAdapter.Fill%2A>采用`DataSet`作为参数，以获取多个结果。  
  
 你可以使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>上多次相同的方法<xref:System.Data.DataTable>。 如果存在主键，传入行与已存在的匹配行合并。 如果主键不存在，将传入的行追加到<xref:System.Data.DataTable>。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable> 值。 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>此重载<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />方法受保护，并旨在用于.NET Framework 数据提供程序。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">The zero-based record number to start with.</param>
        <param name="maxRecords">The maximum number of records to retrieve.</param>
        <param name="dataTables">The <see cref="T:System.Data.DataTable" /> objects to fill from the data source.</param>
        <summary>Adds or refreshes rows in a <see cref="T:System.Data.DataTable" /> to match those in the data source starting at the specified record and retrieving up to the specified maximum number of records.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataTable" />. This value does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DataAdapter.Fill%2A>方法从数据源使用指定的一个关联的 SELECT 语句中检索行<xref:System.Data.IDbDataAdapter.SelectCommand%2A>属性。 与 SELECT 语句关联的连接对象必须是有效，但它不需要处于打开状态。 如果之前连接关闭<xref:System.Data.Common.DataAdapter.Fill%2A>是调用，它将打开以检索数据，并且再将其关闭。 如果连接是打开之前<xref:System.Data.Common.DataAdapter.Fill%2A>是调用，它保持打开状态。  
  
 <xref:System.Data.Common.DataAdapter.Fill%2A>操作然后将行添加到目标<xref:System.Data.DataTable>中的对象<xref:System.Data.DataSet>，则创建<xref:System.Data.DataTable>对象如果它们尚不存在。 在创建时<xref:System.Data.DataTable>对象，<xref:System.Data.Common.DataAdapter.Fill%2A>操作通常只创建列名称元数据。 但是，如果<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>属性设置为`AddWithKey`，还会创建相应的主键约束。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable> 值。 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
 如果数据适配器在填充时遇到重复的列<xref:System.Data.DataTable>，它会生成后续列，请使用模式"columnname1"、"columnname2"、"columnname3"等的名称。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>，每个结果集放置在单独的表。 额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 SELECT 语句用于填充<xref:System.Data.DataSet>返回多个结果，例如批处理 SQL 语句，如果其中一个结果包含错误，所有的后续结果会跳过并不添加到<xref:System.Data.DataSet>。  
  
 你可以使用<xref:System.Data.Common.DataAdapter.Fill%2A>上多次相同的方法<xref:System.Data.DataTable>。 如果存在主键，传入行与已存在的匹配行合并。 如果主键不存在，将传入的行追加到<xref:System.Data.DataTable>。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</param>
        <param name="startRecord">The zero-based record number to start with.</param>
        <param name="maxRecords">The maximum number of records to retrieve.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <summary>Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> names.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A`maxRecords`值为 0 获取开始记录后找到的所有记录。 如果`maxRecords`大于剩余行的数量只返回剩余的行，并且不会发出错误。  
  
 如果对应的 select 命令是一个语句返回多个结果，<xref:System.Data.Common.DbDataAdapter.Fill%2A>仅适用`maxRecords`到第一个结果。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法从使用 SELECT 语句的数据源检索数据。 <xref:System.Data.IDbConnection>与 SELECT 语句关联的对象必须是有效，但它不需要处于打开状态。 如果<xref:System.Data.IDbConnection>之前关闭<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它是打开以检索数据，然后关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它保持打开状态。  
  
 如果命令不返回任何行，没有表将添加到<xref:System.Data.DataSet>，但不会引发异常。  
  
 如果<xref:System.Data.Common.DbDataAdapter>对象在填充时遇到重复的列<xref:System.Data.DataTable>，它将生成的后续列，使用模式名称"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。  
  
 当指定的查询返回多个结果时，每个结果集将被置于单独的表。 额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。 因为如果处理插入查询跟 select 查询，查询不返回行，创建没有表，创建了为 select 查询的表的名称为"Table"，因为它是创建的第一个表。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持方案其中<xref:System.Data.DataSet>包含多个<xref:System.Data.DataTable>名称只有大小写不同的对象。 在这种情况下，<xref:System.Data.Common.DbDataAdapter.Fill%2A>执行区分大小写的比较，以查找相应的表，并创建新表，如果不存在完全匹配。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果<xref:System.Data.Common.DbDataAdapter.Fill%2A>称为和<xref:System.Data.DataSet>只包含一个<xref:System.Data.DataTable>只是大小写，其名称不同，<xref:System.Data.DataTable>更新。 在此方案中，比较是区分大小写。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 如果遇到错误或异常，则填充数据表时，在发生错误的之前添加的行将保留在数据表中。 该操作的剩余部分将会中止。  
  
 SELECT 语句用于填充<xref:System.Data.DataSet>返回多个结果，例如批处理 SQL 语句，请注意下列情况：  
  
-   处理批处理 SQL 语句中的多个结果时`maxRecords`仅适用于第一个结果。 同样适用于包含章节结果 (.NET Framework Data Provider for OLE DB 仅) 的行。 受限制的最上层结果`maxRecords`，但会在所有子行。  
  
-   如果其中一个结果包含错误，跳过且不会添加到所有的后续结果<xref:System.Data.DataSet>。  
  
 当使用后续<xref:System.Data.Common.DbDataAdapter.Fill%2A>调用来刷新的内容<xref:System.Data.DataSet>，必须满足两个条件：  
  
1.  SQL 语句应匹配是最初用来填充<xref:System.Data.DataSet>。  
  
2.  **密钥**列信息必须存在。  
  
 如果存在主键信息，则将对帐任何重复的行，并只能出现一次在<xref:System.Data.DataTable>相对应的<xref:System.Data.DataSet>。 主键信息可能被设置通过<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，通过指定<xref:System.Data.DataTable.PrimaryKey%2A>属性<xref:System.Data.DataTable>，或通过设置<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>属性`AddWithKey`。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable> 值。 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
> [!NOTE]
>  `DataSet`将不包含多个记录由数`maxRecords`。 但是，由查询生成的整个结果集是仍会从服务器返回。  
  
   
  
## Examples  
 下面的示例使用派生的类中， <xref:System.Data.OleDb.OleDbDataAdapter>，以填充<xref:System.Data.DataSet>15 行，在第 10，行从开始**类别**表。 此示例假定你已创建了<xref:System.Data.OleDb.OleDbDataAdapter>和<xref:System.Data.DataSet>。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.  -or-  The connection is invalid.</exception>
        <exception cref="T:System.InvalidCastException">The connection could not be found.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="startRecord" /> parameter is less than 0.  -or-  The <paramref name="maxRecords" /> parameter is less than 0.</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />在派生类中，一定要调用基类的<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTables">The <see cref="T:System.Data.DataTable" /> objects to fill from the data source.</param>
        <param name="startRecord">The zero-based record number to start with.</param>
        <param name="maxRecords">The maximum number of records to retrieve.</param>
        <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed to fill the <see cref="T:System.Data.DataTable" /> objects.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> names.</summary>
        <returns>The number of rows added to or refreshed in the data tables.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A`maxRecords`值为 0 获取开始记录后找到的所有记录。 如果`maxRecords`大于剩余行数仅返回剩余的行，并且不会发出错误。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法从使用 SELECT 语句的数据源检索数据。 <xref:System.Data.IDbConnection>与 SELECT 语句关联的对象必须是有效，但它不需要处于打开状态。 如果<xref:System.Data.IDbConnection>之前关闭<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它保持打开状态。  
  
 如果命令不返回任何行，没有表将添加到<xref:System.Data.DataSet>，但不会引发异常。  
  
 如果<xref:System.Data.Common.DbDataAdapter>对象在填充时遇到重复的列<xref:System.Data.DataTable>，它将生成的后续列，使用模式名称"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。  
  
 当指定的查询返回多个结果时，每个结果集将被置于单独的表。 额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。 由于你可以像处理插入查询跟 select 查询，查询不返回行，创建没有表，表创建了为 select 查询将被命名为"Table"，因为它是创建的第一个表。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持方案其中<xref:System.Data.DataSet>包含多个<xref:System.Data.DataTable>名称只有大小写不同的对象。 在这种情况下，<xref:System.Data.Common.DbDataAdapter.Fill%2A>执行区分大小写的比较，以查找相应的表，并创建新表，如果不存在完全匹配。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果<xref:System.Data.Common.DbDataAdapter.Fill%2A>称为和<xref:System.Data.DataSet>只包含一个<xref:System.Data.DataTable>只是大小写，其名称不同，<xref:System.Data.DataTable>更新。 在此方案中，比较是区分大小写。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 如果遇到错误或异常，则填充数据表时，在发生错误的之前添加的行将保留在数据表中。 该操作的剩余部分将会中止。  
  
 SELECT 语句用于填充<xref:System.Data.DataTable>对象返回多个结果，如一批 SQL 语句中，注意以下事项：  
  
-   处理批处理 SQL 语句中的多个结果时`maxRecords`仅适用于第一个结果。 同样适用于包含章节结果 (.NET Framework Data Provider for OLE DB 仅) 的行。 受限制的最上层结果`maxRecords`，但会在所有子行。  
  
-   如果其中一个结果包含错误，则跳过所有的后续结果。  
  
> [!NOTE]
>  `DataSet`将不包含多个记录由数`maxRecords`。 但是，由查询生成的整个结果集是仍会从服务器返回。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.  -or-  The connection is invalid.</exception>
        <exception cref="T:System.InvalidCastException">The connection could not be found.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="startRecord" /> parameter is less than 0.  -or-  The <paramref name="maxRecords" /> parameter is less than 0.</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />在派生类中，一定要调用基类的<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</param>
        <param name="startRecord">The zero-based record number to start with.</param>
        <param name="maxRecords">The maximum number of records to retrieve.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and source table names, command string, and command behavior.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法从数据源使用指定的一个关联的 SELECT 语句中检索行<xref:System.Data.IDbDataAdapter.SelectCommand%2A>属性。 与 SELECT 语句关联的连接对象必须是有效，但它不需要处于打开状态。 如果之前连接关闭<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.Fill%2A>是调用，它保持打开状态。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>操作然后将行添加到目标<xref:System.Data.DataTable>中的对象<xref:System.Data.DataSet>，则创建<xref:System.Data.DataTable>对象如果它们尚不存在。 在创建时<xref:System.Data.DataTable>对象，<xref:System.Data.Common.DbDataAdapter.Fill%2A>操作通常只创建列名称元数据。 但是，如果<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>属性设置为`AddWithKey`，还会创建相应的主键约束。  
  
 如果<xref:System.Data.Common.DbDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。 额外的结果集通过将整数值追加到指定的表名 （例如，"表"、"Table1"、"Table2"等） 进行命名。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持方案其中<xref:System.Data.DataSet>包含多个<xref:System.Data.DataTable>名称只有大小写不同的对象。 在这种情况下，<xref:System.Data.Common.DbDataAdapter.Fill%2A>执行区分大小写的比较，以查找相应的表，并创建新表，如果不存在完全匹配。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果<xref:System.Data.Common.DbDataAdapter.Fill%2A>称为和<xref:System.Data.DataSet>只包含一个<xref:System.Data.DataTable>只是大小写，其名称不同，<xref:System.Data.DataTable>更新。 在此方案中，比较是区分大小写。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 你可以使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>上多次相同的方法<xref:System.Data.DataTable>。 如果存在主键，传入行与已存在的匹配行合并。 如果主键不存在，将传入的行追加到<xref:System.Data.DataTable>。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable> 值。 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.Fill%2A>和<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>.NET Framework 数据提供程序检索仅第一个结果的架构信息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="startRecord" /> parameter is less than 0.  -or-  The <paramref name="maxRecords" /> parameter is less than 0.</exception>
        <block subset="none" type="overrides">
          <para>此重载<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />方法受保护，并旨在用于.NET Framework 数据提供程序。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the behavior of the command used to fill the data adapter.</summary>
        <value>
          <see cref="T:System.Data.CommandBehavior" />的用于填充数据适配器的命令。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adds a <see cref="T:System.Data.DataTable" /> to a <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to insert the schema in.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values that specify how to insert the schema.</param>
        <summary>Adds a <see cref="T:System.Data.DataTable" /> named "Table" to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>A reference to a collection of <see cref="T:System.Data.DataTable" /> objects that were added to the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法从数据源使用检索的架构信息<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作添加<xref:System.Data.DataTable>到目标<xref:System.Data.DataSet>。 然后，它添加到列<xref:System.Data.DataColumnCollection>的<xref:System.Data.DataTable>，并配置以下<xref:System.Data.DataColumn>如果它们在数据源中存在的属性：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 必须设置<xref:System.Data.DataColumn.AutoIncrementStep%2A>和<xref:System.Data.DataColumn.AutoIncrementSeed%2A>单独。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 此外可以配置<xref:System.Data.DataTable.PrimaryKey%2A>和<xref:System.Data.DataTable.Constraints%2A>属性根据下列规则：  
  
-   如果一个或多个主键列由<xref:System.Data.IDbDataAdapter.SelectCommand%2A>，用作主键列<xref:System.Data.DataTable>。  
  
-   如果返回任何主键列但唯一列，唯一的列用作为主键，当且仅当所有唯一列均为 null。 如果任何列都可以为 null，<xref:System.Data.UniqueConstraint>添加到<xref:System.Data.ConstraintCollection>，但<xref:System.Data.DataTable.PrimaryKey%2A>未设置属性。  
  
-   如果返回主键列和唯一列，将主键列用作主键列<xref:System.Data.DataTable>。  
  
 请注意，主键和唯一约束添加到<xref:System.Data.ConstraintCollection>根据前面的规则，但其他约束类型不会添加。  
  
 如果唯一聚集索引定义的一列或 SQL Server 表中的列，并且对一组单独的列，定义主键约束，则将返回的聚集索引中列的名称。 若要返回的名称或主键列的名称，用于指定主键索引的名称的 SELECT 语句中的查询提示。 有关指定查询提示的详细信息，请参阅[查询提示 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)。  
  
 过程中使用主键信息<xref:System.Data.Common.DbDataAdapter.Fill%2A>来查找和替换其键的列相匹配的任何行。 如果这不是所需的行为，使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>但未要求架构信息。  
  
 如果<xref:System.Data.IDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。 通过将整数值追加到指定的表名 （例如，"Table"、"Table1"、"Table2"等。） 命名额外的结果集。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.IDbConnection>与 select 命令关联的对象必须是有效，但它不需要打开。 如果<xref:System.Data.IDbConnection>之前关闭<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，它处于打开状态。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，SQL Server.NET Framework 数据提供程序向正在执行的语句追加 FOR BROWSE 子句。 用户应注意的潜在负面影响，如干扰使用 SET FMTONLY ON 语句。 有关详细信息，请参阅 SQL Server 联机丛书。  
  
   
  
## Examples  
 下面的示例使用派生的类中， <xref:System.Data.SqlClient.SqlDataAdapter>，以填充<xref:System.Data.DataSet>架构，并返回与<xref:System.Data.DataSet>。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">The <see cref="T:System.Data.DataTable" /> to be filled with the schema from the data source.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values.</param>
        <summary>Configures the schema of the specified <see cref="T:System.Data.DataTable" /> based on the specified <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information returned from the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法从使用数据源中检索架构<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。 与相关的连接对象<xref:System.Data.IDbDataAdapter.SelectCommand%2A>必须有效，但它不需要处于打开状态。 如果之前连接关闭<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，它保持打开状态。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作将返回<xref:System.Data.DataTable>。 然后，它添加到列<xref:System.Data.DataColumnCollection>的<xref:System.Data.DataTable>，并配置以下<xref:System.Data.DataColumn>如果它们在数据源中存在的属性：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 必须设置<xref:System.Data.DataColumn.AutoIncrementStep%2A>和<xref:System.Data.DataColumn.AutoIncrementSeed%2A>单独。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 此外可以配置<xref:System.Data.DataTable.PrimaryKey%2A>和<xref:System.Data.DataTable.Constraints%2A>属性根据下列规则：  
  
-   如果<xref:System.Data.DataTable.PrimaryKey%2A>已为定义`DataTable`，或`DataTable`包含了数据以及`PrimaryKey`未设置属性。  
  
-   如果一个或多个主键列由<xref:System.Data.IDbDataAdapter.SelectCommand%2A>，用作主键列`DataTable`。  
  
-   如果返回任何主键列但唯一列，唯一的列用作为主键，当且仅当所有唯一列均为 null。 如果任何列都可以为 null，<xref:System.Data.UniqueConstraint>添加到<xref:System.Data.ConstraintCollection>，但`PrimaryKey`未设置属性。  
  
-   如果返回主键列和唯一列，将主键列用作主键列`DataTable`。  
  
 请注意，主键和唯一约束添加到<xref:System.Data.ConstraintCollection>根据前面的规则，但其他约束类型不会添加。 此过程可能需要几个到服务器的往返次数。  
  
 如果唯一聚集索引定义的一列或 SQL Server 表中的列，并且对一组单独的列，定义主键约束，则将返回的聚集索引中列的名称。 若要返回的名称或主键列的名称，用于指定主键索引的名称的 SELECT 语句中的查询提示。 有关指定查询提示的详细信息，请参阅[查询提示 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)。  
  
 如果<xref:System.Data.Common.DbDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。 通过将整数值追加到指定的表名 （例如，"Table"、"Table1"、"Table2"等。） 命名额外的结果集。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 不返回任何行。 使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法以将行添加到<xref:System.Data.DataTable>。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，SQL Server.NET Framework 数据提供程序向正在执行的语句追加 FOR BROWSE 子句。 用户应注意的潜在负面影响，如干扰使用 SET FMTONLY ON 语句。 有关详细信息，请参阅 SQL Server 联机丛书。  
  
   
  
## Examples  
 下面的示例使用派生的类中， <xref:System.Data.SqlClient.SqlDataAdapter>，以填充<xref:System.Data.DataSet>架构，并返回与<xref:System.Data.DataTable>。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to insert the schema in.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values that specify how to insert the schema.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <summary>Adds a <see cref="T:System.Data.DataTable" /> to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based upon the specified <see cref="T:System.Data.SchemaType" /> and <see cref="T:System.Data.DataTable" />.</summary>
        <returns>A reference to a collection of <see cref="T:System.Data.DataTable" /> objects that were added to the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法从数据源使用检索的架构信息<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作添加<xref:System.Data.DataTable>到目标<xref:System.Data.DataSet>。 然后，它添加到列<xref:System.Data.DataColumnCollection>的<xref:System.Data.DataTable>，并配置以下<xref:System.Data.DataColumn>如果它们在数据源中存在的属性：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 必须设置<xref:System.Data.DataColumn.AutoIncrementStep%2A>和<xref:System.Data.DataColumn.AutoIncrementSeed%2A>单独。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 此外可以配置<xref:System.Data.DataTable.PrimaryKey%2A>和<xref:System.Data.DataTable.Constraints%2A>属性根据下列规则：  
  
-   如果一个或多个主键列由<xref:System.Data.IDbDataAdapter.SelectCommand%2A>，用作主键列<xref:System.Data.DataTable>。  
  
-   如果返回任何主键列但唯一列，唯一的列用作为主键，当且仅当所有唯一列均为 null。 如果任何列都可以为 null，<xref:System.Data.UniqueConstraint>添加到<xref:System.Data.ConstraintCollection>，但<xref:System.Data.DataTable.PrimaryKey%2A>未设置属性。  
  
-   如果返回主键列和唯一列，将主键列用作主键列<xref:System.Data.DataTable>。  
  
 请注意，主键和唯一约束添加到<xref:System.Data.ConstraintCollection>根据前面的规则，但其他约束类型不会添加。  
  
 如果唯一聚集索引定义的一列或 SQL Server 表中的列，并且对一组单独的列，定义主键约束，则将返回的聚集索引中列的名称。 若要返回的名称或主键列的名称，用于指定主键索引的名称的 SELECT 语句中的查询提示。 有关指定查询提示的详细信息，请参阅[查询提示 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)。  
  
 过程中使用主键信息<xref:System.Data.Common.DbDataAdapter.Fill%2A>来查找和替换其键的列相匹配的任何行。 如果这不是所需的行为，使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>但未要求架构信息。  
  
 如果<xref:System.Data.Common.DbDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。 通过将整数值追加到指定的表名 （例如，"Table"、"Table1"、"Table2"等。） 命名额外的结果集。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法支持方案其中<xref:System.Data.DataSet>包含多个<xref:System.Data.DataTable>名称只有大小写不同的对象。 在这种情况下，<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>执行区分大小写的比较，以查找相应的表，并创建新表，如果不存在完全匹配。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>称为和<xref:System.Data.DataSet>只包含一个<xref:System.Data.DataTable>只是大小写，其名称不同，<xref:System.Data.DataTable>更新。 在此方案中，比较是区分大小写。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.IDbConnection>与 select 命令关联的对象必须是有效，但它不需要打开。 如果<xref:System.Data.IDbConnection>之前关闭<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，它处于打开状态。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，SQL Server.NET Framework 数据提供程序向正在执行的语句追加 FOR BROWSE 子句。 用户应注意的潜在负面影响，如干扰使用 SET FMTONLY ON 语句。 有关详细信息，请参阅 SQL Server 联机丛书。  
  
   
  
## Examples  
 下面的示例使用派生的类中， <xref:System.Data.SqlClient.SqlDataAdapter>，以填充<xref:System.Data.DataSet>架构，并返回与<xref:System.Data.DataSet>。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A source table from which to get the schema could not be found.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">The <see cref="T:System.Data.DataTable" /> to be filled with the schema from the data source.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values.</param>
        <param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Configures the schema of the specified <see cref="T:System.Data.DataTable" /> based on the specified <see cref="T:System.Data.SchemaType" />, command string, and <see cref="T:System.Data.CommandBehavior" /> values.</summary>
        <returns>A of <see cref="T:System.Data.DataTable" /> object that contains schema information returned from the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法从使用数据源中检索架构<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。 与相关的连接对象<xref:System.Data.IDbDataAdapter.SelectCommand%2A>必须有效，但它不需要处于打开状态。 如果之前连接关闭<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，它保持打开状态。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作添加<xref:System.Data.DataTable>到目标<xref:System.Data.DataSet>。 然后，它添加到列<xref:System.Data.DataColumnCollection>的<xref:System.Data.DataTable>，并配置以下<xref:System.Data.DataColumn>如果它们在数据源中存在的属性：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 必须设置<xref:System.Data.DataColumn.AutoIncrementStep%2A>和<xref:System.Data.DataColumn.AutoIncrementSeed%2A>单独。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 此外可以配置<xref:System.Data.DataTable.PrimaryKey%2A>和<xref:System.Data.DataTable.Constraints%2A>属性根据下列规则：  
  
-   如果一个或多个主键列由<xref:System.Data.IDbDataAdapter.SelectCommand%2A>，用作主键列<xref:System.Data.DataTable>。  
  
-   如果返回任何主键列但唯一列，唯一的列用作为主键，当且仅当所有唯一列均为 null。 如果任何列都可以为 null，<xref:System.Data.UniqueConstraint>添加到<xref:System.Data.ConstraintCollection>，但<xref:System.Data.DataTable.PrimaryKey%2A>未设置属性。  
  
-   如果返回主键列和唯一列，将主键列用作主键列<xref:System.Data.DataTable>。  
  
 请注意，主键和唯一约束添加到<xref:System.Data.ConstraintCollection>根据前面的规则，但其他约束类型不会添加。  
  
 如果唯一聚集索引定义的一列或 SQL Server 表中的列，并且对一组单独的列，定义主键约束，则将返回的聚集索引中列的名称。 若要返回的名称或主键列的名称，用于指定主键索引的名称的 SELECT 语句中的查询提示。 有关指定查询提示的详细信息，请参阅[查询提示 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)。  
  
 如果<xref:System.Data.IDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。 通过将整数值追加到指定的表名 （例如，"Table"、"Table1"、"Table2"等。） 命名额外的结果集。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 不返回任何行。 使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法以将行添加到<xref:System.Data.DataTable>。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，SQL Server.NET Framework 数据提供程序向正在执行的语句追加 FOR BROWSE 子句。 用户应注意的潜在负面影响，如干扰使用 SET FMTONLY ON 语句。 有关详细信息，请参阅 SQL Server 联机丛书。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>此实现的<see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />方法受保护，并旨在用于.NET Framework 数据提供程序。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">The <see cref="T:System.Data.DataSet" /> to be filled with the schema from the data source.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values.</param>
        <param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Adds a <see cref="T:System.Data.DataTable" /> to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataTable" /> objects that contain schema information returned from the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法从使用数据源中检索架构<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。 与相关的连接对象<xref:System.Data.IDbDataAdapter.SelectCommand%2A>必须有效，但它不需要处于打开状态。 如果之前连接关闭<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，其打开以检索数据，然后再将关闭。 如果连接是打开之前<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>是调用，它保持打开状态。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作添加<xref:System.Data.DataTable>到目标<xref:System.Data.DataSet>。 然后，它添加到列<xref:System.Data.DataColumnCollection>的<xref:System.Data.DataTable>，并配置以下<xref:System.Data.DataColumn>如果它们在数据源中存在的属性：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 必须设置<xref:System.Data.DataColumn.AutoIncrementStep%2A>和<xref:System.Data.DataColumn.AutoIncrementSeed%2A>单独。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 此外可以配置<xref:System.Data.DataTable.PrimaryKey%2A>和<xref:System.Data.DataTable.Constraints%2A>属性根据下列规则：  
  
-   如果一个或多个主键列由<xref:System.Data.IDbDataAdapter.SelectCommand%2A>，用作主键列<xref:System.Data.DataTable>。  
  
-   如果返回任何主键列但唯一列，唯一的列用作为主键，当且仅当所有唯一列均为 null。 如果任何列都可以为 null，<xref:System.Data.UniqueConstraint>添加到<xref:System.Data.ConstraintCollection>，但<xref:System.Data.DataTable.PrimaryKey%2A>未设置属性。  
  
-   如果返回主键列和唯一列，将主键列用作主键列<xref:System.Data.DataTable>。  
  
 请注意，主键和唯一约束添加到<xref:System.Data.ConstraintCollection>根据前面的规则，但其他约束类型不会添加。  
  
 如果唯一聚集索引定义的一列或 SQL Server 表中的列，并且对一组单独的列，定义主键约束，则将返回的聚集索引中列的名称。 若要返回的名称或主键列的名称，用于指定主键索引的名称的 SELECT 语句中的查询提示。 有关指定查询提示的详细信息，请参阅[查询提示 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)。  
  
 如果<xref:System.Data.IDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式"*columnname*1"，"*columnname*2"，"*columnname*3"，依次类推。 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式"Column1"、"Column2"等。 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。 通过将整数值追加到指定的表名 （例如，"Table"、"Table1"、"Table2"等。） 命名额外的结果集。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法支持方案其中<xref:System.Data.DataSet>包含多个<xref:System.Data.DataTable>名称只有大小写不同的对象。 在这种情况下，<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>执行区分大小写的比较，以查找相应的表，并创建新表，如果不存在完全匹配。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>称为和<xref:System.Data.DataSet>只包含一个<xref:System.Data.DataTable>只是大小写，其名称不同，<xref:System.Data.DataTable>更新。 在此方案中，比较是区分大小写。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 不返回任何行。 使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法以将行添加到<xref:System.Data.DataTable>。  
  
> [!NOTE]
>  当处理批处理 SQL 语句返回多个结果的实现<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。 若要检索多个结果的架构信息，请使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>与<xref:System.Data.MissingSchemaAction>设置为`AddWithKey`。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，SQL Server.NET Framework 数据提供程序向正在执行的语句追加 FOR BROWSE 子句。 用户应注意的潜在负面影响，如干扰使用 SET FMTONLY ON 语句。 有关详细信息，请参阅 SQL Server 联机丛书。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>此实现的<see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />方法受保护，并旨在用于.NET Framework 数据提供程序。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="parameterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">The index of the command to retrieve the parameter from.</param>
        <param name="parameterIndex">The index of the parameter within the command.</param>
        <summary>Returns a <see cref="T:System.Data.IDataParameter" /> from one of the commands in the current batch.</summary>
        <returns>The <see cref="T:System.Data.IDataParameter" /> specified.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:System.Data.Common.DbDataAdapter>，此方法将引发<xref:System.NotSupportedException>。 继承自的类<xref:System.Data.Common.DbDataAdapter>重写此方法以支持批处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>此方法进行保护，并且旨在用于.NET Framework 数据提供程序。如果从继承的类<see cref="T:System.Data.Common.DbDataAdapter" />支持批处理，类重写此方法以允许用户执行一个批处理。实现使用<paramref name="commandIdentifier" />提供用于查找请求的命令，然后使用<paramref name="parameterIndex" />提供用于查找请求的参数。例如，<paramref name="commandIdentifier" />为 0 和<paramref name="parameterIndex" />0 的批处理中的第一个命令返回的第一个参数。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int *  *  -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int *  *  -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="recordsAffected" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="error" Type="System.Exception&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">The zero-based column ordinal of the individual command within the batch.</param>
        <param name="recordsAffected">The number of rows affected in the data store by the specified command within the batch.</param>
        <param name="error">An <see cref="T:System.Exception" /> thrown during execution of the specified command. Returns <see langword="null" /> (<see langword="Nothing" /> in Visual Basic) if no exception is thrown.</param>
        <summary>Returns information about an individual update attempt within a larger batched update.</summary>
        <returns>Information about an individual update attempt within a larger batched update.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据提供程序支持批处理更新逻辑必须在上重写虚方法的一系列<xref:System.Data.Common.DbDataAdapter>类。 `GetBatchedRecordsAffected` 表示这些虚拟方法之一。 `DbDataAdapter`类依赖于`GetBatchedRecordsAffected`来确定某一批处理中的各次更新尝试成功与否，因此它可以将标记每个相应<xref:System.Data.DataRow>相应地。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the parameters set by the user when executing an SQL SELECT statement.</summary>
        <returns>An array of <see cref="T:System.Data.IDataParameter" /> objects that contains the parameters set by the user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes batching for the <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:System.Data.Common.DbDataAdapter>，此方法将引发<xref:System.NotSupportedException>。 继承自的类<xref:System.Data.Common.DbDataAdapter>重写此方法以支持批处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>此方法进行保护，并且旨在用于.NET Framework 数据提供程序。如果从继承的类<see cref="T:System.Data.Common.DbDataAdapter" />支持批处理，类重写此方法。此方法使类可以初始化支持批处理所需的任何资源。例如，类可以分配用于保存命令集的批处理中的数据结构。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a command used to insert new records into the data source.</summary>
        <value>A<see cref="T:System.Data.IDbCommand" />过程中使用<see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />以插入新行在数据集中的数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 期间<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果未设置此属性和主键信息位于<xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.InsertCommand%2A>将自动生成。  
  
   
  
## Examples  
 下面的示例创建派生的类<xref:System.Data.OleDb.OleDbDataAdapter>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see langword="RowUpdated" /> event of a .NET Framework data provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关概述，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">An <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see langword="RowUpdating" /> event of a .NET Framework data provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关概述，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a command used to select records in the data source.</summary>
        <value>A<see cref="T:System.Data.IDbCommand" />过程中使用<see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />从放置在数据集中的数据源选择记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建派生的类<xref:System.Data.OleDb.OleDbDataAdapter>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement for deleting records from the data set.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" />过程中使用<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />若要删除已删除的行在数据集中的数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.Data.IDbDataAdapter> 接口时使用。  
  
 有关详细信息，请参阅<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement used to insert new records into the data source.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" />过程中使用<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />以插入新行在数据集中的数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.Data.IDbDataAdapter> 接口时使用。  
  
 有关详细信息，请参阅<xref:System.Data.IDbDataAdapter.InsertCommand%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement used to select records in the data source.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" />过程中使用<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />从放置在数据集中的数据源选择记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.Data.IDbDataAdapter> 接口时使用。  
  
 有关详细信息，请参阅<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement used to update records in the data source.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" />过程中使用<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />以更新已修改的行在数据集中的数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.Data.IDbDataAdapter> 接口时使用。  
  
 有关详细信息，请参阅<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new object that is a copy of the current instance.</summary>
        <returns>A new object that is a copy of this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.ICloneable> 接口时使用。  
  
 有关详细信息，请参阅<xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends batching for the <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:System.Data.Common.DbDataAdapter>，此方法将引发<xref:System.NotSupportedException>。 继承自的类<xref:System.Data.Common.DbDataAdapter>重写此方法以支持批处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>此方法进行保护，并且旨在用于.NET Framework 数据提供程序。如果从继承的类<see cref="T:System.Data.Common.DbDataAdapter" />支持批处理，类重写此方法。此方法使类可以释放任何分配的资源以支持批处理。例如，类可以释放批中能容纳命令的数据结构。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">An array of <see cref="T:System.Data.DataRow" /> objects used to update the data source.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array in the <see cref="T:System.Data.DataSet" />.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>方法，<xref:System.Data.Common.DbDataAdapter>检查<xref:System.Data.DataRow.RowState%2A>属性，并执行所需的 INSERT、 UPDATE 或 DELETE 语句以迭代方式对于每一行，根据在中配置的索引顺序<xref:System.Data.DataSet>. 例如，<xref:System.Data.Common.DbDataAdapter.Update%2A>可能会执行 DELETE 语句，接着是 INSERT 语句，则另一个 DELETE 语句，截止日期中的行的顺序<xref:System.Data.DataTable>。  
  
 应注意的是，为批处理; 不执行这些语句单独更新每个行。 应用程序可以调用<xref:System.Data.DataSet.GetChanges%2A>在其中你必须控制的语句类型 （例如，插入更新之前） 的序列的情况下的方法。 有关详细信息，请参阅[使用 Dataadapter 更新数据源](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)。  
  
 如果尚未指定 INSERT、 UPDATE 或 DELETE 语句，<xref:System.Data.Common.DbDataAdapter.Update%2A>方法生成异常。 但是，你可以创建<xref:System.Data.SqlClient.SqlCommandBuilder>或<xref:System.Data.OleDb.OleDbCommandBuilder>对象以自动生成单表更新的 SQL 语句，如果你设置`SelectCommand`.NET Framework 数据提供程序的属性。 然后，你未设置任何其他 SQL 语句都由**CommandBuilder**。 此生成的逻辑需要要中存在的键列信息<xref:System.Data.DataSet>。 有关详细信息请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>方法从第一个映射，然后再执行更新中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后刷新使用的值的行<xref:System.Data.IDbCommand.UpdatedRowSource%2A>属性。 将忽略所有附加的行返回。  
  
 任何数据加载回后<xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件时，允许用户检查经协调<xref:System.Data.DataSet>行和任何输出参数返回命令。 行已成功更新后，会接受对该行的更改。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.Update%2A>，执行的顺序是，如下所示：  
  
1.  中的值<xref:System.Data.DataRow>移动到的参数值。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  该命令执行。  
  
4.  如果该命令设置为`FirstReturnedRecord`，第一个返回结果将放置在<xref:System.Data.DataRow>。  
  
5.  如果没有输出参数，它们都将置于<xref:System.Data.DataRow>。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与每个命令<xref:System.Data.Common.DbDataAdapter>通常有一个与之关联的参数集合。 参数映射到当前行通过`SourceColumn`和`SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类。 `SourceColumn` 是指<xref:System.Data.DataTable>列，<xref:System.Data.Common.DbDataAdapter>引用以获取当前行的参数值。  
  
 `SourceColumn` 在应用任何表映射之前是指未映射的列名称。 如果`SourceColumn`引用不存在的列中，执行的操作取决于下列情况之一<xref:System.Data.MissingMappingAction>值。  
  
|枚举值|执行操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|使用的源列名和中的表名<xref:System.Data.DataSet>如果不不存在任何映射。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>生成。 当显式设置映射时，输入参数的缺少映射通常是错误的结果。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还用于映射输出的值或输入/输出参数回`DataSet`。 如果它引用不存在的列，则会生成异常。  
  
 `SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类确定是否使用该列的值的原始、 当前或已建议版本。 此功能通常用于在 UPDATE 语句，以检查存在开放式并发冲突的 WHERE 子句中包括原始值。  
  
> [!NOTE]
>  如果更新行时出错，将引发异常，并执行更新，则停止。 若要继续执行更新操作不会遇到错误时生成异常，设置<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>属性`true`之前调用<xref:System.Data.Common.DbDataAdapter.Update%2A>。 你还可能响应中的每个行基础上的错误`RowUpdated`DataAdapter 事件。 若要继续执行更新操作而不生成了异常`RowUpdated`事件中，设置<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>属性<xref:System.Data.Common.RowUpdatedEventArgs>到<xref:System.Data.UpdateStatus.Continue>。  
  
   
  
## Examples  
 下面的示例使用派生的类中， <xref:System.Data.OleDb.OleDbDataAdapter>，以更新数据源。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.SystemException">No <see cref="T:System.Data.DataRow" /> exists to update.  -or-  No <see cref="T:System.Data.DataTable" /> exists to update.  -or-  No <see cref="T:System.Data.DataSet" /> exists to use as a source.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">The <see cref="T:System.Data.DataSet" /> used to update the data source.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataSet" />.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>方法，<xref:System.Data.Common.DbDataAdapter>检查<xref:System.Data.DataRow.RowState%2A>属性，并执行所需的 INSERT、 UPDATE 或 DELETE 语句以迭代方式对于每一行，根据在中配置的索引顺序<xref:System.Data.DataSet>. 例如，<xref:System.Data.Common.DbDataAdapter.Update%2A>可能会执行 DELETE 语句，接着是 INSERT 语句，则另一个 DELETE 语句，截止日期中的行的顺序<xref:System.Data.DataTable>。  
  
 应注意的是，为批处理; 不执行这些语句单独更新每个行。 应用程序可以调用<xref:System.Data.DataSet.GetChanges%2A>在其中你必须控制的语句类型 （例如，插入更新之前） 的序列的情况下的方法。 有关详细信息，请参阅[使用 Dataadapter 更新数据源](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)。  
  
 如果尚未指定 INSERT、 UPDATE 或 DELETE 语句，<xref:System.Data.Common.DbDataAdapter.Update%2A>方法生成异常。 但是，你可以创建<xref:System.Data.SqlClient.SqlCommandBuilder>或<xref:System.Data.OleDb.OleDbCommandBuilder>对象以自动生成单表更新的 SQL 语句，如果你设置`SelectCommand`.NET Framework 数据提供程序的属性。 然后，你未设置任何其他 SQL 语句都由**CommandBuilder**。 此生成的逻辑需要要中存在的键列信息<xref:System.Data.DataSet>。 有关详细信息请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>方法从第一个映射，然后再执行更新中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后刷新使用的值的行<xref:System.Data.IDbCommand.UpdatedRowSource%2A>属性。 将忽略所有附加的行返回。  
  
 任何数据加载回后<xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件时，允许用户检查经协调<xref:System.Data.DataSet>行和任何输出参数返回命令。 行已成功更新后，会接受对该行的更改。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.Update%2A>，执行的顺序是，如下所示：  
  
1.  中的值<xref:System.Data.DataRow>移动到的参数值。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  该命令执行。  
  
4.  如果该命令设置为`FirstReturnedRecord`，则第一个返回结果将放置在<xref:System.Data.DataRow>。  
  
5.  如果没有输出参数，它们都将置于<xref:System.Data.DataRow>。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与每个命令<xref:System.Data.Common.DbDataAdapter>通常有一个与之关联的参数集合。 参数映射到当前行通过`SourceColumn`和`SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类。 `SourceColumn` 是指<xref:System.Data.DataTable>列，<xref:System.Data.Common.DbDataAdapter>引用以获取当前行的参数值。  
  
 `SourceColumn` 在应用任何表映射之前是指未映射的列名称。 如果`SourceColumn`引用不存在的列中，执行的操作取决于下列情况之一<xref:System.Data.MissingMappingAction>值。  
  
|枚举值|执行操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|使用的源列名和中的表名<xref:System.Data.DataSet>如果不不存在任何映射。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>生成。 当显式设置映射时，输入参数的缺少映射通常是错误的结果。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还用于映射输出的值或输入/输出参数回`DataSet`。 如果它引用不存在的列，则会生成异常。  
  
 `SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类确定是否使用该列的值的原始、 当前或已建议版本。 此功能通常用于在 UPDATE 语句，以检查存在开放式并发冲突的 WHERE 子句中包括原始值。  
  
> [!NOTE]
>  如果更新行时出错，将引发异常，并执行更新，则停止。 若要继续执行更新操作不会遇到错误时生成异常，设置<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>属性`true`之前调用<xref:System.Data.Common.DbDataAdapter.Update%2A>。 你还可能响应中的每个行基础上的错误`RowUpdated`DataAdapter 事件。 若要继续执行更新操作而不生成了异常`RowUpdated`事件中，设置<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>属性<xref:System.Data.Common.RowUpdatedEventArgs>到<xref:System.Data.UpdateStatus.Continue>。  
  
   
  
## Examples  
 下面的示例使用派生的类中， <xref:System.Data.OleDb.OleDbDataAdapter>，以更新数据源。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">The <see cref="T:System.Data.DataTable" /> used to update the data source.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataTable" />.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataTable" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>方法，<xref:System.Data.Common.DbDataAdapter>检查<xref:System.Data.DataRow.RowState%2A>属性，并执行所需的 INSERT、 UPDATE 或 DELETE 语句以迭代方式对于每一行，根据在中配置的索引顺序<xref:System.Data.DataSet>. 例如，<xref:System.Data.Common.DbDataAdapter.Update%2A>可能会执行 DELETE 语句，接着是 INSERT 语句，则另一个 DELETE 语句，截止日期中的行的顺序<xref:System.Data.DataTable>。  
  
 应注意的是，为批处理; 不执行这些语句单独更新每个行。 应用程序可以调用<xref:System.Data.DataSet.GetChanges%2A>在其中你必须控制的语句类型 （例如，插入更新之前） 的序列的情况下的方法。 有关详细信息，请参阅[使用 Dataadapter 更新数据源](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)。  
  
 如果尚未指定 INSERT、 UPDATE 或 DELETE 语句，<xref:System.Data.Common.DbDataAdapter.Update%2A>方法生成异常。 但是，你可以创建<xref:System.Data.SqlClient.SqlCommandBuilder>或<xref:System.Data.OleDb.OleDbCommandBuilder>对象以自动生成单表更新的 SQL 语句，如果你设置`SelectCommand`.NET Framework 数据提供程序的属性。 然后，你未设置任何其他 SQL 语句都由**CommandBuilder**。 此生成的逻辑需要要中存在的键列信息<xref:System.Data.DataSet>。 有关详细信息请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>方法从第一个映射，然后再执行更新中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后刷新使用的值的行<xref:System.Data.IDbCommand.UpdatedRowSource%2A>属性。 将忽略所有附加的行返回。  
  
 任何数据加载回后<xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件时，允许用户检查经协调<xref:System.Data.DataSet>行和任何输出参数返回命令。 行已成功更新后，会接受对该行的更改。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.Update%2A>，执行的顺序是，如下所示：  
  
1.  中的值<xref:System.Data.DataRow>移动到的参数值。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  该命令执行。  
  
4.  如果该命令设置为`FirstReturnedRecord`，则第一个返回结果将放置在<xref:System.Data.DataRow>。  
  
5.  如果没有输出参数，它们都将置于<xref:System.Data.DataRow>。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与每个命令<xref:System.Data.Common.DbDataAdapter>通常有一个与之关联的参数集合。 参数映射到当前行通过`SourceColumn`和`SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类。 `SourceColumn` 是指<xref:System.Data.DataTable>列，<xref:System.Data.Common.DbDataAdapter>引用以获取当前行的参数值。  
  
 `SourceColumn` 在应用任何表映射之前是指未映射的列名称。 如果`SourceColumn`引用不存在的列中，执行的操作取决于下列情况之一<xref:System.Data.MissingMappingAction>值。  
  
|枚举值|执行操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|使用的源列名和中的表名<xref:System.Data.DataSet>如果不不存在任何映射。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>生成。 当显式设置映射时，输入参数的缺少映射通常是错误的结果。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还用于映射输出的值或输入/输出参数回`DataSet`。 如果它引用不存在的列，则会生成异常。  
  
 `SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类确定是否使用该列的值的原始、 当前或已建议版本。 此功能通常用于在 UPDATE 语句，以检查存在开放式并发冲突的 WHERE 子句中包括原始值。  
  
> [!NOTE]
>  如果更新行时出错，将引发异常，并执行更新，则停止。 若要继续执行更新操作不会遇到错误时生成异常，设置<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>属性`true`之前调用<xref:System.Data.Common.DbDataAdapter.Update%2A>。 你还可能响应中的每个行基础上的错误`RowUpdated`DataAdapter 事件。 若要继续执行更新操作而不生成了异常`RowUpdated`事件中，设置<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>属性<xref:System.Data.Common.RowUpdatedEventArgs>到<xref:System.Data.UpdateStatus.Continue>。  
  
   
  
## Examples  
 下面的示例使用派生的类中， <xref:System.Data.OleDb.OleDbDataAdapter>，以更新数据源。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.SystemException">No <see cref="T:System.Data.DataRow" /> exists to update.  -or-  No <see cref="T:System.Data.DataTable" /> exists to update.  -or-  No <see cref="T:System.Data.DataSet" /> exists to use as a source.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">An array of <see cref="T:System.Data.DataRow" /> objects used to update the data source.</param>
        <param name="tableMapping">The <see cref="P:System.Data.IDataAdapter.TableMappings" /> collection to use.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array of <see cref="T:System.Data.DataSet" /> objects.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>方法，<xref:System.Data.Common.DbDataAdapter>检查<xref:System.Data.DataRow.RowState%2A>属性，并执行所需的 INSERT、 UPDATE 或 DELETE 语句以迭代方式对于每一行，根据在中配置的索引顺序<xref:System.Data.DataSet>. 例如，<xref:System.Data.Common.DbDataAdapter.Update%2A>可能会执行 DELETE 语句，接着是 INSERT 语句，则另一个 DELETE 语句，截止日期中的行的顺序<xref:System.Data.DataTable>。  
  
 应注意的是，为批处理; 不执行这些语句单独更新每个行。 应用程序可以调用<xref:System.Data.DataSet.GetChanges%2A>在其中你必须控制的语句类型 （例如，插入更新之前） 的序列的情况下的方法。 有关详细信息，请参阅[使用 Dataadapter 更新数据源](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)。  
  
 如果尚未指定 INSERT、 UPDATE 或 DELETE 语句，<xref:System.Data.Common.DbDataAdapter.Update%2A>方法生成异常。 但是，你可以创建<xref:System.Data.SqlClient.SqlCommandBuilder>或<xref:System.Data.OleDb.OleDbCommandBuilder>对象以自动生成单表更新的 SQL 语句，如果你设置`SelectCommand`.NET Framework 数据提供程序的属性。 然后，你未设置任何其他 SQL 语句都由**CommandBuilder**。 此生成的逻辑需要要中存在的键列信息<xref:System.Data.DataSet>。 有关详细信息请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>方法从第一个映射，然后再执行更新中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后刷新使用的值的行<xref:System.Data.IDbCommand.UpdatedRowSource%2A>属性。 将忽略所有附加的行返回。  
  
 任何数据加载回后<xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件时，允许用户检查经协调<xref:System.Data.DataSet>行和任何输出参数返回命令。 行已成功更新后，会接受对该行的更改。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.Update%2A>，执行的顺序是，如下所示：  
  
1.  中的值<xref:System.Data.DataRow>移动到的参数值。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  该命令执行。  
  
4.  如果该命令设置为`FirstReturnedRecord`，则第一个返回结果将放置在<xref:System.Data.DataRow>。  
  
5.  如果没有输出参数，它们都将置于<xref:System.Data.DataRow>。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与每个命令<xref:System.Data.Common.DbDataAdapter>通常有一个与之关联的参数集合。 参数映射到当前行通过`SourceColumn`和`SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类。 `SourceColumn` 是指<xref:System.Data.DataTable>列，<xref:System.Data.Common.DbDataAdapter>引用以获取当前行的参数值。  
  
 `SourceColumn` 在应用任何表映射之前是指未映射的列名称。 如果`SourceColumn`引用不存在的列中，执行的操作取决于下列情况之一<xref:System.Data.MissingMappingAction>值。  
  
|枚举值|执行操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|使用的源列名和中的表名<xref:System.Data.DataSet>如果不不存在任何映射。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>生成。 当显式设置映射时，输入参数的缺少映射通常是错误的结果。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还用于映射输出的值或输入/输出参数回`DataSet`。 如果它引用不存在的列，则会生成异常。  
  
 `SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类确定是否使用该列的值的原始、 当前或已建议版本。 此功能通常用于在 UPDATE 语句，以检查存在开放式并发冲突的 WHERE 子句中包括原始值。  
  
> [!NOTE]
>  如果更新行时出错，将引发异常，并执行更新，则停止。 若要继续执行更新操作不会遇到错误时生成异常，设置<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>属性`true`之前调用<xref:System.Data.Common.DbDataAdapter.Update%2A>。 你还可能响应中的每个行基础上的错误`RowUpdated`DataAdapter 事件。 若要继续执行更新操作而不生成了异常`RowUpdated`事件中，设置<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>属性<xref:System.Data.Common.RowUpdatedEventArgs>到<xref:System.Data.UpdateStatus.Continue>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.SystemException">No <see cref="T:System.Data.DataRow" /> exists to update.  -or-  No <see cref="T:System.Data.DataTable" /> exists to update.  -or-  No <see cref="T:System.Data.DataSet" /> exists to use as a source.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">The <see cref="T:System.Data.DataSet" /> to use to update the data source.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet" /> with the specified <see cref="T:System.Data.DataTable" /> name.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>方法，<xref:System.Data.Common.DbDataAdapter>检查<xref:System.Data.DataRow.RowState%2A>属性，并执行所需的 INSERT、 UPDATE 或 DELETE 语句以迭代方式对于每一行，根据在中配置的索引顺序<xref:System.Data.DataSet>. 例如，<xref:System.Data.Common.DbDataAdapter.Update%2A>可能会执行 DELETE 语句，接着是 INSERT 语句，则另一个 DELETE 语句，截止日期中的行的顺序<xref:System.Data.DataTable>。  
  
 应注意的是，为批处理; 不执行这些语句单独更新每个行。 应用程序可以调用<xref:System.Data.DataSet.GetChanges%2A>方法在其中你必须控制的语句类型序列的情况下 （例如，在更新之前插入）。 有关详细信息，请参阅[使用 Dataadapter 更新数据源](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)。  
  
 如果尚未指定 INSERT、 UPDATE 或 DELETE 语句，<xref:System.Data.Common.DbDataAdapter.Update%2A>方法生成异常。 但是，你可以创建<xref:System.Data.SqlClient.SqlCommandBuilder>或<xref:System.Data.OleDb.OleDbCommandBuilder>对象以自动生成单表更新的 SQL 语句，如果你设置`SelectCommand`.NET Framework 数据提供程序的属性。 然后，你未设置任何其他 SQL 语句都由**CommandBuilder**。 此生成的逻辑需要要中存在的键列信息<xref:System.Data.DataSet>。 有关详细信息请参阅[使用 Commandbuilder 生成命令](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>方法支持方案其中<xref:System.Data.DataSet>包含多个<xref:System.Data.DataTable>名称只有大小写不同的对象。 具有相同名称但不同情况下，多个表中的存在时`DataSet`，<xref:System.Data.Common.DbDataAdapter.Update%2A>执行区分大小写的比较，以查找相应的表，并生成异常，如果不存在完全匹配。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 如果<xref:System.Data.Common.DbDataAdapter.Update%2A>称为和<xref:System.Data.DataSet>只包含一个<xref:System.Data.DataTable>只是大小写，其名称不同，<xref:System.Data.DataTable>更新。 在此方案中，比较是区分大小写。 下面的 C# 代码阐释这一行为。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>方法从第一个映射，然后再执行更新中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后刷新使用的值的行<xref:System.Data.IDbCommand.UpdatedRowSource%2A>属性。 将忽略所有附加的行返回。  
  
 任何数据加载回后<xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件时，允许用户检查经协调<xref:System.Data.DataSet>行和任何输出参数返回命令。 行已成功更新后，会接受对该行的更改。  
  
 使用时<xref:System.Data.Common.DbDataAdapter.Update%2A>，执行的顺序是，如下所示：  
  
1.  中的值<xref:System.Data.DataRow>移动到的参数值。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  该命令执行。  
  
4.  如果该命令设置为`FirstReturnedRecord`，则第一个返回结果将放置在<xref:System.Data.DataRow>。  
  
5.  如果没有输出参数，它们都将置于<xref:System.Data.DataRow>。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与每个命令<xref:System.Data.Common.DbDataAdapter>通常有一个与之关联的参数集合。 参数映射到当前行通过`SourceColumn`和`SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类。 `SourceColumn` 是指<xref:System.Data.DataTable>列，<xref:System.Data.Common.DbDataAdapter>引用以获取当前行的参数值。  
  
 `SourceColumn` 在应用任何表映射之前是指未映射的列名称。 如果`SourceColumn`引用不存在的列中，执行的操作取决于下列情况之一<xref:System.Data.MissingMappingAction>值。  
  
|枚举值|执行操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|使用的源列名和中的表名<xref:System.Data.DataSet>如果不不存在任何映射。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>生成。 当显式设置映射时，输入参数的缺少映射通常是错误的结果。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还用于映射输出的值或输入/输出参数回`DataSet`。 如果它引用不存在的列，则会生成异常。  
  
 `SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类确定是否使用该列的值的原始、 当前或已建议版本。 此功能通常用于在 UPDATE 语句，以检查存在开放式并发冲突的 WHERE 子句中包括原始值。  
  
> [!NOTE]
>  如果更新行时出错，将引发异常，并执行更新，则停止。 若要继续执行更新操作不会遇到错误时生成异常，设置<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>属性`true`之前调用<xref:System.Data.Common.DbDataAdapter.Update%2A>。 你还可能响应中的每个行基础上的错误`RowUpdated`DataAdapter 事件。 若要继续执行更新操作而不生成了异常`RowUpdated`事件中，设置<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>属性<xref:System.Data.Common.RowUpdatedEventArgs>到<xref:System.Data.UpdateStatus.Continue>。  
  
   
  
## Examples  
 下面的示例使用派生的类中， <xref:System.Data.OleDb.OleDbDataAdapter>，以更新数据源。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.</summary>
        <value>要处理每批的行数。  
  
 <list type="table"><listheader><term> 值是</term><description>效果</description></listheader><item><term> 0 </term><description>批大小上没有任何限制。</description></item><item><term> 1 </term><description>禁用批处理更新。</description></item><item><term> &gt; 1 </term><description>使用批发送更改<see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />一次的操作。</description></item></list>  所有命令时将此值设置为 1 以外的值，与都关联<see cref="T:System.Data.Common.DbDataAdapter" />必须具有其<see cref="P:System.Data.IDbCommand.UpdatedRowSource" />属性设置为 * * 无 * * 或 * * 输出参数 * *。 否则将引发异常。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A>属性来更新数据源中的更改与<xref:System.Data.DataSet>。 如果数据访问接口支持批处理，这可以通过减少服务器的往返次数来提高应用程序性能。 在 ADO.NET 2.0 中，支持此属性是.NET 数据提供程序的 SQL Server (SqlClient) 和 Oracle (OracleClient)。  
  
 执行极大的批处理会降低性能。 因此，在实现应用程序前应进行测试以得到最佳的批大小。  
  
 <xref:System.ArgumentOutOfRangeException>如果的值设置为一个数字，将引发小于零。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a command used to update records in the data source.</summary>
        <value>A<see cref="T:System.Data.IDbCommand" />过程中使用<see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />以更新已修改的行在数据集中的数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 期间<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果未设置此属性和主键信息位于<xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>将自动生成。  
  
   
  
## Examples  
 下面的示例创建派生的类<xref:System.Data.OleDb.OleDbDataAdapter>并设置其属性的一些。  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>