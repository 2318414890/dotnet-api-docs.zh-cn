<Type Name="BigInteger" FullName="System.Numerics.BigInteger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="87eeecb8b8986cbce06930adde285bc5e388a5d1" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57956461" /></Metadata><TypeSignature Language="C#" Value="public struct BigInteger : IComparable, IComparable&lt;System.Numerics.BigInteger&gt;, IEquatable&lt;System.Numerics.BigInteger&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit BigInteger extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IEquatable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.BigInteger" />
  <TypeSignature Language="VB.NET" Value="Public Structure BigInteger&#xA;Implements IComparable, IComparable(Of BigInteger), IEquatable(Of BigInteger), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class BigInteger : IComparable, IComparable&lt;System::Numerics::BigInteger&gt;, IEquatable&lt;System::Numerics::BigInteger&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type BigInteger = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="87a43-101">表示任意大的带符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-101">Represents an arbitrarily large signed integer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-102"><xref:System.Numerics.BigInteger>类型是不可变类型，表示其值在理论上有没有上限或下限的边界的任意大整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-102">The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.</span></span> <span data-ttu-id="87a43-103">成员<xref:System.Numerics.BigInteger>类型紧密几乎与其他整数类型 ( <xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.Int64>， <xref:System.SByte>， <xref:System.UInt16>， <xref:System.UInt32>，和<xref:System.UInt64>类型)。</span><span class="sxs-lookup"><span data-stu-id="87a43-103">The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types).</span></span> <span data-ttu-id="87a43-104">此类型与其他整数类型中不同[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，其中包含所指示的范围及其`MinValue`和`MaxValue`属性。</span><span class="sxs-lookup"><span data-stu-id="87a43-104">This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87a43-105">因为<xref:System.Numerics.BigInteger>类型是固定不变 (请参阅[可变性和 BigInteger 结构](#mutability))，因为它具有无上限或下限指定边界内<xref:System.OutOfMemoryException>可以为任何操作都将导致引发<xref:System.Numerics.BigInteger>值太增长大型。</span><span class="sxs-lookup"><span data-stu-id="87a43-105">Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.</span></span>  
  
## <a name="instantiating-a-biginteger-object"></a><span data-ttu-id="87a43-106">实例化 BigInteger 对象</span><span class="sxs-lookup"><span data-stu-id="87a43-106">Instantiating a BigInteger Object</span></span>  
 <span data-ttu-id="87a43-107">可以实例化<xref:System.Numerics.BigInteger>几种方式的对象：</span><span class="sxs-lookup"><span data-stu-id="87a43-107">You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:</span></span>  
  
-   <span data-ttu-id="87a43-108">可以使用`new`关键字，并作为参数提供的任何整型或浮点值<xref:System.Numerics.BigInteger>构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-108">You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="87a43-109">(浮点值将被截断之前分配给<xref:System.Numerics.BigInteger>。)下面的示例演示如何使用`new`关键字来实例化<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-109">(Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]
     [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  
  
-   <span data-ttu-id="87a43-110">您可以声明<xref:System.Numerics.BigInteger>变量并将分配一个值，就像您一样任何数值类型，前提是该值是一种整型类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-110">You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type.</span></span> <span data-ttu-id="87a43-111">下面的示例使用分配来创建<xref:System.Numerics.BigInteger>值从<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="87a43-111">The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]
     [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  
  
-   <span data-ttu-id="87a43-112">可以将分配到的十进制或浮点值<xref:System.Numerics.BigInteger>对象，如果将值强制转换或首先将其转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-112">You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first.</span></span> <span data-ttu-id="87a43-113">下面的示例显式强制转换 （在 C# 中) 或 （在 Visual Basic) 将转换<xref:System.Double>和一个<xref:System.Decimal>值设为<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-113">The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]
     [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  
  
 <span data-ttu-id="87a43-114">这些方法使你能够实例化<xref:System.Numerics.BigInteger>对象，其值是一个现有的数值的范围中的类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-114">These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only.</span></span> <span data-ttu-id="87a43-115">可以实例化<xref:System.Numerics.BigInteger>其值可以超过三种方式之一中的现有数值类型的范围的对象：</span><span class="sxs-lookup"><span data-stu-id="87a43-115">You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:</span></span>  
  
-   <span data-ttu-id="87a43-116">可以使用`new`关键字，并提供到任意大小的字节数组<xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType>构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-116">You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="87a43-117">例如:</span><span class="sxs-lookup"><span data-stu-id="87a43-117">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]
     [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  
  
-   <span data-ttu-id="87a43-118">您可以调用<xref:System.Numerics.BigInteger.Parse%2A>或<xref:System.Numerics.BigInteger.TryParse%2A>方法将转换到的数字的字符串表示形式<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-118">You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>.</span></span> <span data-ttu-id="87a43-119">例如:</span><span class="sxs-lookup"><span data-stu-id="87a43-119">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]
     [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  
  
-   <span data-ttu-id="87a43-120">您可以调用`static`(`Shared`在 Visual Basic 中)<xref:System.Numerics.BigInteger>方法，用于对数值表达式执行某种操作并返回计算<xref:System.Numerics.BigInteger>结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-120">You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result.</span></span> <span data-ttu-id="87a43-121">下面的示例执行此通过多维<xref:System.UInt64.MaxValue?displayProperty=nameWithType>并将分配到结果<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-121">The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=nameWithType> and assigning the result to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]
     [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  
  
 <span data-ttu-id="87a43-122">未初始化的值<xref:System.Numerics.BigInteger>是<xref:System.Numerics.BigInteger.Zero%2A>。</span><span class="sxs-lookup"><span data-stu-id="87a43-122">The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.</span></span>  
  
## <a name="performing-operations-on-biginteger-values"></a><span data-ttu-id="87a43-123">对 BigInteger 值执行操作</span><span class="sxs-lookup"><span data-stu-id="87a43-123">Performing Operations on BigInteger Values</span></span>  
 <span data-ttu-id="87a43-124">可以使用<xref:System.Numerics.BigInteger>实例像使用任何其他整数类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-124">You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type.</span></span> <span data-ttu-id="87a43-125"><xref:System.Numerics.BigInteger> 重载标准数值运算符，以使您能够执行基本的数学运算，例如加法、 减法、 除法、 乘法、 减法、 求反和一元求反。</span><span class="sxs-lookup"><span data-stu-id="87a43-125"><xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation.</span></span> <span data-ttu-id="87a43-126">此外可以使用标准数字运算符比较两个<xref:System.Numerics.BigInteger>与每个其他的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-126">You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other.</span></span> <span data-ttu-id="87a43-127">与其他整数类型，类似<xref:System.Numerics.BigInteger>还支持按位`And`， `Or`， `XOr`，左移位和右移位运算符。</span><span class="sxs-lookup"><span data-stu-id="87a43-127">Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators.</span></span> <span data-ttu-id="87a43-128">不支持自定义运算符的语言<xref:System.Numerics.BigInteger>结构还提供了用于执行数学运算的等效方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-128">For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations.</span></span> <span data-ttu-id="87a43-129">其中包括<xref:System.Numerics.BigInteger.Add%2A>， <xref:System.Numerics.BigInteger.Divide%2A>， <xref:System.Numerics.BigInteger.Multiply%2A>， <xref:System.Numerics.BigInteger.Negate%2A>， <xref:System.Numerics.BigInteger.Subtract%2A>，以及其他几个人。</span><span class="sxs-lookup"><span data-stu-id="87a43-129">These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.</span></span>  
  
 <span data-ttu-id="87a43-130">很多成员的<xref:System.Numerics.BigInteger>结构直接对应于其他整数类型的成员。</span><span class="sxs-lookup"><span data-stu-id="87a43-130">Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types.</span></span> <span data-ttu-id="87a43-131">此外，<xref:System.Numerics.BigInteger>添加成员，如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-131">In addition, <xref:System.Numerics.BigInteger> adds members such as the following:</span></span>  
  
-   <span data-ttu-id="87a43-132"><xref:System.Numerics.BigInteger.Sign%2A>它返回一个值，指示的符号<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-132"><xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="87a43-133"><xref:System.Numerics.BigInteger.Abs%2A>它返回的绝对值<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-133"><xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="87a43-134"><xref:System.Numerics.BigInteger.DivRem%2A>它返回商和余数的除法运算。</span><span class="sxs-lookup"><span data-stu-id="87a43-134"><xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.</span></span>  
  
-   <span data-ttu-id="87a43-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>它将返回两个最大公约<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="87a43-136">许多这些其他成员对应于的成员<xref:System.Math>类，该类提供的功能，以使用基元数值类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-136">Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.</span></span>  
  
<a name="mutability"></a>   
## <a name="mutability-and-the-biginteger-structure"></a><span data-ttu-id="87a43-137">可变性和 BigInteger 结构</span><span class="sxs-lookup"><span data-stu-id="87a43-137">Mutability and the BigInteger Structure</span></span>  
 <span data-ttu-id="87a43-138">下面的示例实例化<xref:System.Numerics.BigInteger>对象，然后按 1 递增其值。</span><span class="sxs-lookup"><span data-stu-id="87a43-138">The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  
  
 <span data-ttu-id="87a43-139">虽然此示例中修改现有对象的值，这不是这种情况。</span><span class="sxs-lookup"><span data-stu-id="87a43-139">Although this example appears to modify the value of the existing object, this is not the case.</span></span> <span data-ttu-id="87a43-140"><xref:System.Numerics.BigInteger> 对象是不可变的这意味着在内部，公共语言运行时实际创建一个新<xref:System.Numerics.BigInteger>对象，并将其分配值的值大于其以前的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-140"><xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value.</span></span> <span data-ttu-id="87a43-141">此新对象然后返回到调用方。</span><span class="sxs-lookup"><span data-stu-id="87a43-141">This new object is then returned to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87a43-142">.NET Framework 中的其他数字类型也是不可变的。</span><span class="sxs-lookup"><span data-stu-id="87a43-142">The other numeric types in the .NET Framework are also immutable.</span></span> <span data-ttu-id="87a43-143">但是，因为<xref:System.Numerics.BigInteger>类型具有无上限或下限的边界，其值可以变得非常大并对性能产生明显的影响。</span><span class="sxs-lookup"><span data-stu-id="87a43-143">However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.</span></span>  
  
 <span data-ttu-id="87a43-144">尽管此过程是透明的调用方，但它确实会招致对性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="87a43-144">Although this process is transparent to the caller, it does incur a performance penalty.</span></span> <span data-ttu-id="87a43-145">在某些情况下，尤其是当重复的操作都会在循环中对执行非常大<xref:System.Numerics.BigInteger>值，可显著的性能损失。</span><span class="sxs-lookup"><span data-stu-id="87a43-145">In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant.</span></span> <span data-ttu-id="87a43-146">例如，在以下示例中，执行操作重复最多万次，和一个<xref:System.Numerics.BigInteger>每次该操作成功，值都会递增 1。</span><span class="sxs-lookup"><span data-stu-id="87a43-146">For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  
  
 <span data-ttu-id="87a43-147">在这种情况下，可以提高性能，通过执行所有中间分配到<xref:System.Int32>变量。</span><span class="sxs-lookup"><span data-stu-id="87a43-147">In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable.</span></span> <span data-ttu-id="87a43-148">然后，该变量的最终值可以分配给<xref:System.Numerics.BigInteger>对象循环退出后。</span><span class="sxs-lookup"><span data-stu-id="87a43-148">The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits.</span></span> <span data-ttu-id="87a43-149">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="87a43-149">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  
  
## <a name="working-with-byte-arrays-and-hexadecimal-strings"></a><span data-ttu-id="87a43-150">使用字节数组和十六进制字符串</span><span class="sxs-lookup"><span data-stu-id="87a43-150">Working with Byte Arrays and Hexadecimal Strings</span></span>  
 <span data-ttu-id="87a43-151">如果您在转换<xref:System.Numerics.BigInteger>值到字节数组，或如果您在转换到的字节数组<xref:System.Numerics.BigInteger>值，必须考虑的字节顺序。</span><span class="sxs-lookup"><span data-stu-id="87a43-151">If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes.</span></span> <span data-ttu-id="87a43-152"><xref:System.Numerics.BigInteger>结构需要在要显示在 little-endian 顺序中的字节数组中的各个字节 （即，值的较低序位字节前加上更高序位字节）。</span><span class="sxs-lookup"><span data-stu-id="87a43-152">The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes).</span></span> <span data-ttu-id="87a43-153">你可以往返<xref:System.Numerics.BigInteger>值通过调用<xref:System.Numerics.BigInteger.ToByteArray%2A>方法，然后将传递生成的字节数组到<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>构造函数，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-153">You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  
  
 <span data-ttu-id="87a43-154">若要实例化<xref:System.Numerics.BigInteger>值从字节数组，表示值的一些其他整数类型，可以传递到整数的值<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>方法，并生成的字节数组到然后传递<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-154">To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span> <span data-ttu-id="87a43-155">下面的示例实例化<xref:System.Numerics.BigInteger>值从字节数组，表示<xref:System.Int16>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-155">The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  
  
 <span data-ttu-id="87a43-156"><xref:System.Numerics.BigInteger>结构假定负值会存储通过使用 2 的补数表示。</span><span class="sxs-lookup"><span data-stu-id="87a43-156">The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation.</span></span> <span data-ttu-id="87a43-157">因为<xref:System.Numerics.BigInteger>结构表示没有固定的长度，值的数值<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>构造函数始终解释为符号位数组中的最后一个字节的最高有效位。</span><span class="sxs-lookup"><span data-stu-id="87a43-157">Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit.</span></span> <span data-ttu-id="87a43-158">若要防止<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>让人迷惑不解的 2 的补数表示的值为负正是正数值的符号和量值表示形式的构造函数中的值的最高有效位的字节数组中的最后一个字节通常为集应包含额外的字节，其值为 0。</span><span class="sxs-lookup"><span data-stu-id="87a43-158">To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0.</span></span> <span data-ttu-id="87a43-159">例如，0xC0 0xBD 0xF0 0xFF 是 1000000 或 4293967296 的小字节序十六进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-159">For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296.</span></span> <span data-ttu-id="87a43-160">此数组中的最后一个字节的最高有效位是打开的因为将通过解释的字节数组值<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>为-1000000 的构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-160">Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000.</span></span> <span data-ttu-id="87a43-161">若要实例化<xref:System.Numerics.BigInteger>其值为正，字节数组，其元素是 0xC0 0xBD 0xF0 0xFF 0x00 必须传递给构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-161">To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor.</span></span> <span data-ttu-id="87a43-162">下面的示例阐释了这一点。</span><span class="sxs-lookup"><span data-stu-id="87a43-162">The following example illustrates this.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  
  
 <span data-ttu-id="87a43-163">创建的字节数组<xref:System.Numerics.BigInteger.ToByteArray%2A>从正值的方法包括此额外的零值字节。</span><span class="sxs-lookup"><span data-stu-id="87a43-163">Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte.</span></span> <span data-ttu-id="87a43-164">因此，<xref:System.Numerics.BigInteger>结构成功往返值可以通过分配它们，然后将它们还原从字节数组，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-164">Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  
  
 <span data-ttu-id="87a43-165">但是，您可能需要将此额外的零值字节添加到开发人员通过动态创建的或通过将无符号的整数转换为字节数组的方法返回的字节数组 (如<xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>， <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>，和<xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="87a43-165">However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="87a43-166">分析十六进制字符串时<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>和<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法假定，如果在字符串中的第一个字节的最高有效位设置，或如果字符串的第一个十六进制数字表示较低的四位的字节值，该值为使用 2 的补数表示形式来表示。</span><span class="sxs-lookup"><span data-stu-id="87a43-166">When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation.</span></span> <span data-ttu-id="87a43-167">例如，"FF01"和"F01"表示的十进制值-255。</span><span class="sxs-lookup"><span data-stu-id="87a43-167">For example, both "FF01" and "F01" represent the decimal value -255.</span></span> <span data-ttu-id="87a43-168">若要区分正负值，正值应包含前导零。</span><span class="sxs-lookup"><span data-stu-id="87a43-168">To differentiate positive from negative values, positive values should include a leading zero.</span></span> <span data-ttu-id="87a43-169">相关的重载<xref:System.Numerics.BigInteger.ToString%2A>方法，传递"X"格式字符串时, 添加到正值返回的十六进制字符串前导零。</span><span class="sxs-lookup"><span data-stu-id="87a43-169">The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the "X" format string, add a leading zero to the returned hexadecimal string for positive values.</span></span> <span data-ttu-id="87a43-170">这样就可以往返<xref:System.Numerics.BigInteger>使用值<xref:System.Numerics.BigInteger.ToString%2A>和<xref:System.Numerics.BigInteger.Parse%2A>方法，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-170">This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  
  
 <span data-ttu-id="87a43-171">但是，通过调用创建的十六进制字符串`ToString`其他整数类型或重载的方法<xref:System.Convert.ToString%2A>方法，包括`toBase`参数未指示的值或从其源数据类型的符号十六进制字符串被派生。</span><span class="sxs-lookup"><span data-stu-id="87a43-171">However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived.</span></span> <span data-ttu-id="87a43-172">已成功实例化<xref:System.Numerics.BigInteger>从这样的字符串值需要一些额外的逻辑。</span><span class="sxs-lookup"><span data-stu-id="87a43-172">Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic.</span></span> <span data-ttu-id="87a43-173">下面的示例提供了一种可能实现。</span><span class="sxs-lookup"><span data-stu-id="87a43-173">The following example provides one possible implementation.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-174">初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-174">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : byte[] -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-175">顺序为 little-endian 的字节值的数组。</span><span class="sxs-lookup"><span data-stu-id="87a43-175">An array of byte values in little-endian order.</span></span></param>
        <summary><span data-ttu-id="87a43-176">使用字节数组中的值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-176">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-177">中的单个字节`value`数组应在 little-endian 顺序，从最低序位字节设置为最高序位字节。</span><span class="sxs-lookup"><span data-stu-id="87a43-177">The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte.</span></span> <span data-ttu-id="87a43-178">例如，数值 1000000000000 表示下表中所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-178">For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="87a43-179">十六进制字符串</span><span class="sxs-lookup"><span data-stu-id="87a43-179">Hexadecimal string</span></span>|<span data-ttu-id="87a43-180">E8D4A51000</span><span class="sxs-lookup"><span data-stu-id="87a43-180">E8D4A51000</span></span>|  
|<span data-ttu-id="87a43-181">字节数组 （首先最低索引）</span><span class="sxs-lookup"><span data-stu-id="87a43-181">Byte array (lowest index first)</span></span>|<span data-ttu-id="87a43-182">00 10 A5 D4 E8 00</span><span class="sxs-lookup"><span data-stu-id="87a43-182">00 10 A5 D4 E8 00</span></span>|  
  
 <span data-ttu-id="87a43-183">如将数字值转换为字节数组的大多数方法<xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType>和<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>，在 little-endian 顺序中返回字节数组。</span><span class="sxs-lookup"><span data-stu-id="87a43-183">Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> and <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>, return byte arrays in little-endian order.</span></span>  
  
 <span data-ttu-id="87a43-184">构造函数中要使用符号数值表示法，并且负值使用 2 的补数表示的字节数组需要正的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-184">The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation.</span></span> <span data-ttu-id="87a43-185">换而言之，如果最高顺序位中的最高序位字节`value`设置，则结果<xref:System.Numerics.BigInteger>值为负。</span><span class="sxs-lookup"><span data-stu-id="87a43-185">In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative.</span></span> <span data-ttu-id="87a43-186">根据字节数组的源，这可能会导致正值将被错误解释为负值。</span><span class="sxs-lookup"><span data-stu-id="87a43-186">Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value.</span></span> <span data-ttu-id="87a43-187">字节数组通常按以下方式生成：</span><span class="sxs-lookup"><span data-stu-id="87a43-187">Byte arrays are typically generated in the following ways:</span></span>  
  
-   <span data-ttu-id="87a43-188">通过调用<xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-188">By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="87a43-189">此方法返回到正值零数组集中具有最高序位字节的最高顺序位的字节数组，因为没有可能将解释为负正数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-189">Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative.</span></span> <span data-ttu-id="87a43-190">以未修改形式创建的字节数组<xref:System.Numerics.BigInteger.ToByteArray%2A>方法时传递给总是能成功往返<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-190">Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
-   <span data-ttu-id="87a43-191">通过调用<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>方法，并将其作为参数传递的有符号的整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-191">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it a signed integer as a parameter.</span></span> <span data-ttu-id="87a43-192">由于处理有符号的整数的符号数值表示法和 2 的补数表示，没有可能将解释为负正数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-192">Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.</span></span>  
  
-   <span data-ttu-id="87a43-193">通过调用<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>方法，并将其作为参数传递的无符号的整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-193">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it an unsigned integer as a parameter.</span></span> <span data-ttu-id="87a43-194">因为由其量值仅表示无符号的整数，正值被误解为负值。</span><span class="sxs-lookup"><span data-stu-id="87a43-194">Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values.</span></span> <span data-ttu-id="87a43-195">若要防止这种误解，可以将零字节值添加到数组末尾。</span><span class="sxs-lookup"><span data-stu-id="87a43-195">To prevent this misinterpretation, you can add a zero-byte value to the end of the array.</span></span> <span data-ttu-id="87a43-196">下一节中的示例提供了说明。</span><span class="sxs-lookup"><span data-stu-id="87a43-196">The example in the next section provides an illustration.</span></span>  
  
-   <span data-ttu-id="87a43-197">通过创建一个字节数组，或者动态或静态而不一定调用任何以前的方法，或通过修改现有的字节数组。</span><span class="sxs-lookup"><span data-stu-id="87a43-197">By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array.</span></span> <span data-ttu-id="87a43-198">若要防止正值错误地解释为负值，可以将零字节值添加到数组末尾。</span><span class="sxs-lookup"><span data-stu-id="87a43-198">To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.</span></span>  
  
 <span data-ttu-id="87a43-199">如果`value`是一个空<xref:System.Byte>数组，则新<xref:System.Numerics.BigInteger>对象将初始化为值为<xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-199">If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="87a43-200">如果`value`是`null`，构造函数引发<xref:System.ArgumentNullException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-200">If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-201">下面的示例实例化<xref:System.Numerics.BigInteger>5 元素字节数组，其值是 {5，4，3，2，1} 中的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-201">The following example instantiates a <xref:System.Numerics.BigInteger> object from a 5-element byte array whose value is {5, 4, 3, 2, 1}.</span></span> <span data-ttu-id="87a43-202">然后，它显示<xref:System.Numerics.BigInteger>值，表示为十进制和十六进制数字，到控制台。</span><span class="sxs-lookup"><span data-stu-id="87a43-202">It then displays the <xref:System.Numerics.BigInteger> value, represented as both decimal and hexadecimal numbers, to the console.</span></span> <span data-ttu-id="87a43-203">文本输出与输入数组的比较可以清楚为什么的此重载<xref:System.Numerics.BigInteger>类构造函数创建<xref:System.Numerics.BigInteger>对象，其值为 4328719365 （或 0x102030405）。</span><span class="sxs-lookup"><span data-stu-id="87a43-203">A comparison of the input array with the text output makes it clear why this overload of the <xref:System.Numerics.BigInteger> class constructor creates a <xref:System.Numerics.BigInteger> object whose value is 4328719365 (or 0x102030405).</span></span> <span data-ttu-id="87a43-204">字节数组，其值为 5，第一个元素定义的值的最低序位字节<xref:System.Numerics.BigInteger>对象，它是 0x05:sp。</span><span class="sxs-lookup"><span data-stu-id="87a43-204">The first element of the byte array, whose value is 5, defines the value of the lowest-order byte of the <xref:System.Numerics.BigInteger> object, which is 0x05.</span></span> <span data-ttu-id="87a43-205">字节数组，其值为 4，第二个元素定义的第二个字节的值<xref:System.Numerics.BigInteger>对象，它是 0x04，依次类推。</span><span class="sxs-lookup"><span data-stu-id="87a43-205">The second element of the byte array, whose value is 4, defines the value of the second byte of the <xref:System.Numerics.BigInteger> object, which is 0x04, and so on.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#1)]  
  
 <span data-ttu-id="87a43-206">下面的示例实例化正和负<xref:System.Numerics.BigInteger>值时，请将它们传递到<xref:System.Numerics.BigInteger.ToByteArray%2A>方法，然后还原原始<xref:System.Numerics.BigInteger>中生成的字节数组的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-206">The following example instantiates a positive and a negative <xref:System.Numerics.BigInteger> value, passes them to the <xref:System.Numerics.BigInteger.ToByteArray%2A> method, and then restores the original <xref:System.Numerics.BigInteger> values from the resulting byte array.</span></span> <span data-ttu-id="87a43-207">请注意两个值由相同的字节数组。</span><span class="sxs-lookup"><span data-stu-id="87a43-207">Note that the two values are represented by identical byte arrays.</span></span> <span data-ttu-id="87a43-208">唯一区别是中字节数组中的最后一个元素的最高有效位。</span><span class="sxs-lookup"><span data-stu-id="87a43-208">The only difference between them is in the most significant bit of the last element in the byte array.</span></span> <span data-ttu-id="87a43-209">此位是设置 （的字节的值为 0xFF），如果该数组创建从负<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-209">This bit is set (the value of the byte is 0xFF) if the array is created from a negative <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="87a43-210">位未设置 （的字节的值为零），如果该数组创建一个正从<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-210">The bit is not set (the value of the byte is zero), if the array is created from a positive <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#2)]  
  
 <span data-ttu-id="87a43-211">下面的示例演示如何确保，正值不错误地实例化作为负值通过添加其值为 0 到数组末尾的字节。</span><span class="sxs-lookup"><span data-stu-id="87a43-211">The following example illustrates how to make sure that a positive value is not incorrectly instantiated as a negative value by adding a byte whose value is zero to the end of the array.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87a43-212"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-212"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToByteArray" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : decimal -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-213">十进制数。</span><span class="sxs-lookup"><span data-stu-id="87a43-213">A decimal number.</span></span></param>
        <summary><span data-ttu-id="87a43-214">使用 <see cref="T:System.Numerics.BigInteger" /> 值初始化 <see cref="T:System.Decimal" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-214">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-215">调用此构造函数的结果等同于显式分配<xref:System.Decimal>值设为<xref:System.Numerics.BigInteger>变量。</span><span class="sxs-lookup"><span data-stu-id="87a43-215">The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.</span></span>  
  
 <span data-ttu-id="87a43-216">调用此构造函数可能会导致数据丢失;小数部分`value`实例化时截断<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-216">Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-217">下面的示例演示如何使用<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29>构造函数实例化<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-217">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="87a43-218">它定义的数组<xref:System.Decimal>值，并随后将传递到每个值<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-218">It defines an array of <xref:System.Decimal> values, and then passes each value to the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor.</span></span> <span data-ttu-id="87a43-219">请注意，<xref:System.Decimal>截断的值而不是舍入时分配给<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-219">Note that the <xref:System.Decimal> value is truncated instead of rounded when it is assigned to the <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(double value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : double -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-220">一个双精度浮点值。</span><span class="sxs-lookup"><span data-stu-id="87a43-220">A double-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="87a43-221">使用双精度浮点值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-221">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a double-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-222">小数部分`value`实例化时，参数将被截断<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-222">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="87a43-223">由于缺少精度<xref:System.Double>数据类型，调用此构造函数可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-223">Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.</span></span>  
  
 <span data-ttu-id="87a43-224"><xref:System.Numerics.BigInteger>通过调用此构造函数生成的值是显式分配而得出的值相同<xref:System.Double>值设为<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-224">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-225">下面的示例演示如何使用<xref:System.Numerics.BigInteger.%23ctor%28System.Double%29>构造函数实例化<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-225">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="87a43-226">它还阐释了使用时可能出现的精度降低<xref:System.Double>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-226">It also illustrates the loss of precision that may occur when you use the <xref:System.Double> data type.</span></span> <span data-ttu-id="87a43-227">一个<xref:System.Double>分配较大的值，然后分配给<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-227">A <xref:System.Double> is assigned a large value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="87a43-228">如输出所示，此分配将涉及精度损失。</span><span class="sxs-lookup"><span data-stu-id="87a43-228">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="87a43-229">这两个值然后一为增量递增。</span><span class="sxs-lookup"><span data-stu-id="87a43-229">Both values are then incremented by one.</span></span> <span data-ttu-id="87a43-230">该输出显示<xref:System.Numerics.BigInteger>的对象会反映更改的值，而<xref:System.Double>对象则没有。</span><span class="sxs-lookup"><span data-stu-id="87a43-230">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Double> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#5)]
 [!code-vb[System.Numerics.BigInteger.ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-231"><paramref name="value" /> 为 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-231"><paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(int value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-232">32 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-232">A 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="87a43-233">使用 32 位带符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-233">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 32-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-234">不会丢失精度的实例化时<xref:System.Numerics.BigInteger>通过使用此构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-234">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="87a43-235"><xref:System.Numerics.BigInteger>通过调用此构造函数生成的值是分配而得出的值相同<xref:System.Int32>值设为<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-235">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
 <span data-ttu-id="87a43-236"><xref:System.Numerics.BigInteger>结构不包含具有类型参数的构造函数<xref:System.Byte>， <xref:System.Int16>， <xref:System.SByte>，或<xref:System.UInt16>。</span><span class="sxs-lookup"><span data-stu-id="87a43-236">The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>.</span></span> <span data-ttu-id="87a43-237">但是，<xref:System.Int32>类型支持 8 位和 16 位有符号和无符号整数隐式转换为有符号 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-237">However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers.</span></span> <span data-ttu-id="87a43-238">因此，如果调用此构造函数`value`这四种整型类型的任何一种方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-238">As a result, this constructor is called if `value` is any one of these four integral types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-239">下面的示例调用<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29>构造函数实例化<xref:System.Numerics.BigInteger>32 位整数数组中的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-239">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 32-bit integers.</span></span> <span data-ttu-id="87a43-240">它还使用隐式转换将每个 32 位整数值分配给<xref:System.Numerics.BigInteger>变量。</span><span class="sxs-lookup"><span data-stu-id="87a43-240">It also uses implicit conversion to assign each 32-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="87a43-241">然后，它比较两个值来建立的得到<xref:System.Numerics.BigInteger>值是相同的。</span><span class="sxs-lookup"><span data-stu-id="87a43-241">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.ctors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(long value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-242">64 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-242">A 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="87a43-243">使用 64 位带符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-243">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 64-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-244">不会丢失精度的实例化时<xref:System.Numerics.BigInteger>通过使用此构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-244">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="87a43-245"><xref:System.Numerics.BigInteger>通过调用此构造函数生成的值是分配而得出的值相同<xref:System.Int64>值设为<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-245">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-246">下面的示例调用<xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29>构造函数实例化<xref:System.Numerics.BigInteger>64 位整数数组中的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-246">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 64-bit integers.</span></span> <span data-ttu-id="87a43-247">它还使用隐式转换将每个 64 位整数值分配给<xref:System.Numerics.BigInteger>变量。</span><span class="sxs-lookup"><span data-stu-id="87a43-247">It also uses implicit conversion to assign each 64-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="87a43-248">然后，它比较两个值来建立的得到<xref:System.Numerics.BigInteger>值是相同的。</span><span class="sxs-lookup"><span data-stu-id="87a43-248">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#7)]
 [!code-vb[System.Numerics.BigInteger.ctors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(float value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : single -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-249">单精度浮点值。</span><span class="sxs-lookup"><span data-stu-id="87a43-249">A single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="87a43-250">使用单精度浮点值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-250">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a single-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-251">小数部分`value`实例化时，参数将被截断<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-251">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="87a43-252">由于缺少精度<xref:System.Single>数据类型，调用此构造函数可能会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-252">Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.</span></span>  
  
 <span data-ttu-id="87a43-253"><xref:System.Numerics.BigInteger>通过调用此构造函数生成的值是显式分配而得出的值相同<xref:System.Single>值设为<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-253">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-254">下面的示例演示如何使用<xref:System.Numerics.BigInteger.%23ctor%28System.Single%29>构造函数实例化<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-254">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="87a43-255">它还阐释了使用时可能出现的精度降低<xref:System.Single>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-255">It also illustrates the loss of precision that may occur when you use the <xref:System.Single> data type.</span></span> <span data-ttu-id="87a43-256">一个<xref:System.Single>被赋予较大的负值，然后分配给<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-256">A <xref:System.Single> is assigned a large negative value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="87a43-257">如输出所示，此分配将涉及精度损失。</span><span class="sxs-lookup"><span data-stu-id="87a43-257">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="87a43-258">这两个值然后一为增量递增。</span><span class="sxs-lookup"><span data-stu-id="87a43-258">Both values are then incremented by one.</span></span> <span data-ttu-id="87a43-259">该输出显示<xref:System.Numerics.BigInteger>的对象会反映更改的值，而<xref:System.Single>对象则没有。</span><span class="sxs-lookup"><span data-stu-id="87a43-259">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Single> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#8)]
 [!code-vb[System.Numerics.BigInteger.ctors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-260"><paramref name="value" /> 为 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-260"><paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint32 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-261">32 位无符号整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-261">An unsigned 32-bit integer value.</span></span></param>
        <summary><span data-ttu-id="87a43-262">使用 32 位无符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-262">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using an unsigned 32-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-263">不会丢失精度的实例化时<xref:System.Numerics.BigInteger>使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-263">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="87a43-264"><xref:System.Numerics.BigInteger>通过调用此构造函数生成的值是分配而得出的值相同<xref:System.UInt32>值设为<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-264">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-265">下面的示例使用<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29>构造函数和赋值语句初始化<xref:System.Numerics.BigInteger>的 32 位无符号整数数组中的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-265">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> constructor and an assignment statement to initialize <xref:System.Numerics.BigInteger> values from an array of unsigned 32-bit integers.</span></span> <span data-ttu-id="87a43-266">然后比较初始化的两种方法来演示它的两个值<xref:System.Numerics.BigInteger>值生成完全相同的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-266">It then compares the two values to demonstrate that the two methods of initializing a <xref:System.Numerics.BigInteger> value produce identical results.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#9)]
 [!code-vb[System.Numerics.BigInteger.ctors#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-267">64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-267">An unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="87a43-268">使用 64 位无符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-268">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure with an unsigned 64-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-269">不会丢失精度的实例化时<xref:System.Numerics.BigInteger>使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-269">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="87a43-270"><xref:System.Numerics.BigInteger>通过调用此构造函数生成的值是分配而得出的值相同<xref:System.UInt64>值设为<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-270">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-271">下面的示例使用<xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29>构造函数实例化<xref:System.Numerics.BigInteger>对象，其值为等于<xref:System.UInt64.MaxValue>。</span><span class="sxs-lookup"><span data-stu-id="87a43-271">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object whose value is equal to <xref:System.UInt64.MaxValue>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#10)]
 [!code-vb[System.Numerics.BigInteger.ctors#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ReadOnlySpan&lt;byte&gt; value, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Byte), Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger (value, isUnsigned, isBigEndian)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="isBigEndian" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Abs(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Abs(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-272">数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-272">A number.</span></span></param>
        <summary><span data-ttu-id="87a43-273">获取 <see cref="T:System.Numerics.BigInteger" /> 对象的绝对值。</span><span class="sxs-lookup"><span data-stu-id="87a43-273">Gets the absolute value of a <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="87a43-274"><paramref name="value" /> 的绝对值。</span><span class="sxs-lookup"><span data-stu-id="87a43-274">The absolute value of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-275">下表中所示，数字的绝对值是没有正负号，该数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-275">The absolute value of a number is that number without its sign, as shown in the following table.</span></span>  
  
|<span data-ttu-id="87a43-276">`value` 参数</span><span class="sxs-lookup"><span data-stu-id="87a43-276">`value` parameter</span></span>|<span data-ttu-id="87a43-277">返回值</span><span class="sxs-lookup"><span data-stu-id="87a43-277">Return value</span></span>|  
|-----------------------|------------------|  
|<span data-ttu-id="87a43-278">`value` >= 0</span><span class="sxs-lookup"><span data-stu-id="87a43-278">`value` >= 0</span></span>|`value`|  
|<span data-ttu-id="87a43-279">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="87a43-279">`value` < 0</span></span>|<span data-ttu-id="87a43-280">`value` \* -1</span><span class="sxs-lookup"><span data-stu-id="87a43-280">`value` \* -1</span></span>|  
  
 <span data-ttu-id="87a43-281"><xref:System.Numerics.BigInteger.Abs%2A>方法等效于<xref:System.Math.Abs%2A?displayProperty=nameWithType>基元数值类型的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-281">The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-282">下面的示例使用<xref:System.Numerics.BigInteger.Abs%2A>方法将<xref:System.Numerics.BigInteger>到之前序列化到文件的符号数值表示法之间 2 的补数表示的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-282">The following example uses the <xref:System.Numerics.BigInteger.Abs%2A> method to convert a <xref:System.Numerics.BigInteger> value from two's complement representation to sign-and-magnitude representation before serializing it to a file.</span></span> <span data-ttu-id="87a43-283">文件中的数据然后反序列化和分配给新<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-283">Data in the file is then deserialized and assigned to a new <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Abs(System.SByte)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Add(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Add(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-284">要相加的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-284">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-285">要相加的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-285">The second value to add.</span></span></param>
        <summary><span data-ttu-id="87a43-286">将两个 <see cref="T:System.Numerics.BigInteger" /> 值相加，并返回结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-286">Adds two <see cref="T:System.Numerics.BigInteger" /> values and returns the result.</span></span></summary>
        <returns><span data-ttu-id="87a43-287"><paramref name="left" /> 与 <paramref name="right" /> 的和。</span><span class="sxs-lookup"><span data-stu-id="87a43-287">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-288">可以使用不支持运算符重载或自定义运算符的语言<xref:System.Numerics.BigInteger.Add%2A>方法以执行加法使用<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-288">Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="87a43-289"><xref:System.Numerics.BigInteger.Add%2A>方法实例化时是加法运算符的有用替代<xref:System.Numerics.BigInteger>变量通过将其分配添加，而得出的求和，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-289">The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (left As BigInteger, right As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.Compare (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-290">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-290">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-291">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-291">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-292">比较两个 <see cref="T:System.Numerics.BigInteger" /> 值，并返回一个整数，该整数指示第一个值是小于、等于还是大于第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-292">Compares two <see cref="T:System.Numerics.BigInteger" /> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</span></span></summary>
        <returns><span data-ttu-id="87a43-293">一个有符号整数，指示 <paramref name="left" /> 和 <paramref name="right" /> 的相对值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-293">A signed integer that indicates the relative values of <paramref name="left" /> and <paramref name="right" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="87a43-294">“值”</span><span class="sxs-lookup"><span data-stu-id="87a43-294">Value</span></span> 
 </term><description> <span data-ttu-id="87a43-295">条件</span><span class="sxs-lookup"><span data-stu-id="87a43-295">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="87a43-296">小于零</span><span class="sxs-lookup"><span data-stu-id="87a43-296">Less than zero</span></span> 
 </term><description><span data-ttu-id="87a43-297"><paramref name="left" /> 小于 <paramref name="right" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-297"><paramref name="left" /> is less than <paramref name="right" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-298">零</span><span class="sxs-lookup"><span data-stu-id="87a43-298">Zero</span></span> 
 </term><description><span data-ttu-id="87a43-299"><paramref name="left" /> 等于 <paramref name="right" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-299"><paramref name="left" /> equals <paramref name="right" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-300">大于零</span><span class="sxs-lookup"><span data-stu-id="87a43-300">Greater than zero</span></span> 
 </term><description><span data-ttu-id="87a43-301"><paramref name="left" /> 大于 <paramref name="right" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-301"><paramref name="left" /> is greater than <paramref name="right" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-302">尽管<xref:System.Numerics.BigInteger>类型具有没有固定的范围的比较<xref:System.Numerics.BigInteger>值不是通过精度的浮点数进行比较的特点是缺少。</span><span class="sxs-lookup"><span data-stu-id="87a43-302">Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers.</span></span> <span data-ttu-id="87a43-303">下面的示例比较两个<xref:System.Numerics.BigInteger>1 且每个不同的值有 1896 位。</span><span class="sxs-lookup"><span data-stu-id="87a43-303">The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits.</span></span> <span data-ttu-id="87a43-304"><xref:System.Numerics.BigInteger.Compare%2A>方法将正确报告两个值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-304">The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.CompareTo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-305">将此实例的值与另一个值进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于另一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-305">Compares the value of this instance with another value and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the other value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(long other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : int64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="87a43-306">要比较的 64 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-306">The signed 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-307">将此实例与 64 位带符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位带符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-307">Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="87a43-308">一个带符号整数值，指示此实例与 <paramref name="other" /> 的关系，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-308">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="87a43-309">返回值</span><span class="sxs-lookup"><span data-stu-id="87a43-309">Return value</span></span> 
 </term><description> <span data-ttu-id="87a43-310">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-310">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="87a43-311">小于零</span><span class="sxs-lookup"><span data-stu-id="87a43-311">Less than zero</span></span> 
 </term><description> <span data-ttu-id="87a43-312">当前实例小于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-312">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-313">零</span><span class="sxs-lookup"><span data-stu-id="87a43-313">Zero</span></span> 
 </term><description> <span data-ttu-id="87a43-314">当前实例等于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-314">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-315">大于零</span><span class="sxs-lookup"><span data-stu-id="87a43-315">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="87a43-316">当前实例大于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-316">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-317">如果`other`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>时值<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29>调用方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-317">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-318">下面的示例演示了因调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29>整数值的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-318">The following example illustrates the result of calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method with integral values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#3)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.Numerics.BigInteger -&gt; int&#xA;override this.CompareTo : System.Numerics.BigInteger -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="87a43-319">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-319">The object to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-320">将此实例与另一个 <see cref="T:System.Numerics.BigInteger" /> 进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-320">Compares this instance to a second <see cref="T:System.Numerics.BigInteger" /> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="87a43-321">一个带符号整数值，指示此实例与 <paramref name="other" /> 的关系，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-321">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="87a43-322">返回值</span><span class="sxs-lookup"><span data-stu-id="87a43-322">Return value</span></span> 
 </term><description> <span data-ttu-id="87a43-323">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-323">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="87a43-324">小于零</span><span class="sxs-lookup"><span data-stu-id="87a43-324">Less than zero</span></span> 
 </term><description> <span data-ttu-id="87a43-325">当前实例小于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-325">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-326">零</span><span class="sxs-lookup"><span data-stu-id="87a43-326">Zero</span></span> 
 </term><description> <span data-ttu-id="87a43-327">当前实例等于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-327">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-328">大于零</span><span class="sxs-lookup"><span data-stu-id="87a43-328">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="87a43-329">当前实例大于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-329">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-330">此重载<xref:System.Numerics.BigInteger.CompareTo%2A>方法实现<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-330">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="87a43-331">泛型集合对象使用它来在集合中的项进行排序。</span><span class="sxs-lookup"><span data-stu-id="87a43-331">It is used by generic collection objects to order the items in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-332">下面的示例演示如何使用<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>方法以对一系列`StarInfo`对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-332">The following example illustrates the use of the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> method to order a list of `StarInfo` objects.</span></span> <span data-ttu-id="87a43-333">每个`StarInfo`对象提供有关星型的名称和其距离以英里地球的信息。</span><span class="sxs-lookup"><span data-stu-id="87a43-333">Each `StarInfo` object provides information about a star's name and its distance from the Earth in miles.</span></span> <span data-ttu-id="87a43-334">`StarInfo` 实现<xref:System.IComparable%601>接口，它使`StarInfo`对象进行排序的泛型集合类。</span><span class="sxs-lookup"><span data-stu-id="87a43-334">`StarInfo` implements the <xref:System.IComparable%601> interface, which enables `StarInfo` objects to be sorted by generic collection classes.</span></span> <span data-ttu-id="87a43-335">其<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType>实现仅封装对的调用<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>。</span><span class="sxs-lookup"><span data-stu-id="87a43-335">Its <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> implementation just wraps a call to <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#1)]  
  
 <span data-ttu-id="87a43-336">下面的代码然后实例化四`StarInfo`对象，并将其存储在一个泛型<xref:System.Collections.Generic.List%601>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-336">The following code then instantiates four `StarInfo` objects and stores them in a generic <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="87a43-337">之后<xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>调用方法时，`StarInfo`对象会显示在与地球其距离的顺序。</span><span class="sxs-lookup"><span data-stu-id="87a43-337">After the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> method is called, `StarInfo` objects are displayed in order of their distance from the Earth.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="bigInteger.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="87a43-338">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-338">The object to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-339">将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-339">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="87a43-340">一个带符号整数，指示当前实例与 <paramref name="obj" /> 参数的关系，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-340">A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="87a43-341">返回值</span><span class="sxs-lookup"><span data-stu-id="87a43-341">Return value</span></span> 
 </term><description> <span data-ttu-id="87a43-342">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-342">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="87a43-343">小于零</span><span class="sxs-lookup"><span data-stu-id="87a43-343">Less than zero</span></span> 
 </term><description> <span data-ttu-id="87a43-344">当前实例小于 <paramref name="obj" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-344">The current instance is less than <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-345">零</span><span class="sxs-lookup"><span data-stu-id="87a43-345">Zero</span></span> 
 </term><description> <span data-ttu-id="87a43-346">当前实例等于 <paramref name="obj" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-346">The current instance equals <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-347">大于零</span><span class="sxs-lookup"><span data-stu-id="87a43-347">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="87a43-348">当前实例大于 <paramref name="obj" />，或者 <paramref name="obj" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-348">The current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-349">此重载<xref:System.Numerics.BigInteger.CompareTo%2A>方法实现<xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-349">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="87a43-350">它用于通过非泛型集合对象在集合中的项进行排序。</span><span class="sxs-lookup"><span data-stu-id="87a43-350">It is used by non-generic collection objects to order the items in the collection.</span></span>  
  
 <span data-ttu-id="87a43-351">`obj`参数必须是以下值之一：</span><span class="sxs-lookup"><span data-stu-id="87a43-351">The `obj` parameter must be one of the following:</span></span>  
  
-   <span data-ttu-id="87a43-352">一个对象，其运行时类型是<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="87a43-352">An object whose run-time type is <xref:System.Numerics.BigInteger>.</span></span>  
  
-   <span data-ttu-id="87a43-353"><xref:System.Object>其值变量`null`。</span><span class="sxs-lookup"><span data-stu-id="87a43-353">An <xref:System.Object> variable whose value is `null`.</span></span> <span data-ttu-id="87a43-354">如果的值`obj`参数是`null`，该方法返回 1，指示当前实例是否大于`obj`。</span><span class="sxs-lookup"><span data-stu-id="87a43-354">If the value of the `obj` parameter is `null`, the method returns 1, which indicates that the current instance is greater than `obj`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-355">下面的示例调用<xref:System.Numerics.BigInteger.CompareTo%28System.Object%29>方法来比较<xref:System.Numerics.BigInteger>与一个对象数组中的每个元素的值</span><span class="sxs-lookup"><span data-stu-id="87a43-355">The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87a43-356"><paramref name="obj" /> 不是 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-356"><paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />.</span></span></exception>
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : uint64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="87a43-357">要比较的 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-357">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-358">将此实例与 64 位无符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位无符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-358">Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="87a43-359">一个带符号整数，指示此实例和 <paramref name="other" /> 的相对值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-359">A signed integer that indicates the relative value of this instance and <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="87a43-360">返回值</span><span class="sxs-lookup"><span data-stu-id="87a43-360">Return value</span></span> 
 </term><description> <span data-ttu-id="87a43-361">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-361">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="87a43-362">小于零</span><span class="sxs-lookup"><span data-stu-id="87a43-362">Less than zero</span></span> 
 </term><description> <span data-ttu-id="87a43-363">当前实例小于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-363">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-364">零</span><span class="sxs-lookup"><span data-stu-id="87a43-364">Zero</span></span> 
 </term><description> <span data-ttu-id="87a43-365">当前实例等于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-365">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-366">大于零</span><span class="sxs-lookup"><span data-stu-id="87a43-366">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="87a43-367">当前实例大于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-367">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Divide(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Divide(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="87a43-368">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-368">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="87a43-369">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-369">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="87a43-370">用另一个值除 <see cref="T:System.Numerics.BigInteger" /> 值并返回结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-370">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="87a43-371">相除后的商。</span><span class="sxs-lookup"><span data-stu-id="87a43-371">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-372"><xref:System.Numerics.BigInteger.Divide%2A>方法执行整数除法; 放弃所有相除所得的余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-372">The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded.</span></span> <span data-ttu-id="87a43-373">若要执行整数除法，保留其余部分的同时，调用<xref:System.Numerics.BigInteger.DivRem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-373">To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span> <span data-ttu-id="87a43-374">若要检索的余下部分，请调用<xref:System.Numerics.BigInteger.Remainder%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-374">To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="87a43-375"><xref:System.Numerics.BigInteger.Divide%2A>方法可由不支持运算符重载的语言。</span><span class="sxs-lookup"><span data-stu-id="87a43-375">The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading.</span></span> <span data-ttu-id="87a43-376">其行为等同于使用除法运算符的除法。</span><span class="sxs-lookup"><span data-stu-id="87a43-376">Its behavior is identical to division using the division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-377">下面的示例创建的数组<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-377">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-378">然后，它使用每个元素中使用的除法运算的商作为<xref:System.Numerics.BigInteger.Divide%2A>方法，除法运算符 （/） 和<xref:System.Numerics.BigInteger.DivRem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-378">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="87a43-379"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="87a43-379"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger DivRem(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor, [out] valuetype System.Numerics.BigInteger&amp; remainder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (dividend As BigInteger, divisor As BigInteger, ByRef remainder As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger DivRem(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor, [Runtime::InteropServices::Out] System::Numerics::BigInteger % remainder);" />
      <MemberSignature Language="F#" Value="static member DivRem : System.Numerics.BigInteger * System.Numerics.BigInteger *  -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.DivRem (dividend, divisor, remainder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
        <Parameter Name="remainder" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="87a43-380">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-380">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="87a43-381">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-381">The value to divide by.</span></span></param>
        <param name="remainder"><span data-ttu-id="87a43-382">当此方法返回时，包含一个表示相除余数的 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-382">When this method returns, contains a <see cref="T:System.Numerics.BigInteger" /> value that represents the remainder from the division.</span></span> <span data-ttu-id="87a43-383">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="87a43-383">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="87a43-384">用另一个值除一个 <see cref="T:System.Numerics.BigInteger" /> 值，返回结果，并在输出参数中返回余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-384">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another, returns the result, and returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="87a43-385">相除后的商。</span><span class="sxs-lookup"><span data-stu-id="87a43-385">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-386">此方法会保留商和整数相除所得的余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-386">This method preserves both the quotient and the remainder that results from integer division.</span></span> <span data-ttu-id="87a43-387">如果您不感兴趣的其余部分，使用<xref:System.Numerics.BigInteger.Divide%2A>方法或除法运算符; 如果您是只对感兴趣其余部分中，使用<xref:System.Numerics.BigInteger.Remainder%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-387">If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="87a43-388">所返回的符号`remainder`值是相同的符号`dividend`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-388">The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="87a43-389">行为<xref:System.Numerics.BigInteger.DivRem%2A>方法是相同的<xref:System.Math.DivRem%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-389">The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-390">下面的示例创建的数组<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-390">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-391">然后，它使用每个元素中使用的除法运算的商作为<xref:System.Numerics.BigInteger.Divide%2A>方法，除法运算符 （/） 和<xref:System.Numerics.BigInteger.DivRem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-391">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="87a43-392"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="87a43-392"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-393">返回一个值，该值指示两个数值是否相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-393">Returns a value that indicates whether two numeric values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(long other);" />
      <MemberSignature Language="F#" Value="override this.Equals : int64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="87a43-394">要比较的 64 位带符号整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-394">The signed 64-bit integer value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-395">返回一个值，该值指示当前实例与 64 位带符号整数是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-395">Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</span></span></summary>
        <returns><span data-ttu-id="87a43-396">如果 64 位带符号整数与当前实例具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-396"><see langword="true" /> if the signed 64-bit integer and the current instance have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-397">如果`other`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时调用的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-397">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called.</span></span>  
  
 <span data-ttu-id="87a43-398">若要确定而不是只测试是否相等的两个对象之间的关系，请调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-398">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-399">下面的示例实例化<xref:System.Numerics.BigInteger>从除每个整型类型的对象<xref:System.UInt64>。</span><span class="sxs-lookup"><span data-stu-id="87a43-399">The following example instantiates a <xref:System.Numerics.BigInteger> object from each integral type except <xref:System.UInt64>.</span></span> <span data-ttu-id="87a43-400">然后，它调用<xref:System.Numerics.BigInteger.Equals%28System.Int64%29>方法来比较<xref:System.Numerics.BigInteger>值，该值具有原始整数值传递给<xref:System.Numerics.BigInteger>构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-400">It then calls the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> method to compare the <xref:System.Numerics.BigInteger> value with the original integer value that was passed to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="87a43-401">如输出所示，值相等中每个用例。</span><span class="sxs-lookup"><span data-stu-id="87a43-401">As the output shows, the values are equal in each case.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals.cpp#1)]
 [!code-csharp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.BigInteger -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="87a43-402">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-402">The object to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-403">返回一个值，该值指示当前实例与指定的 <see cref="T:System.Numerics.BigInteger" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-403">Returns a value that indicates whether the current instance and a specified <see cref="T:System.Numerics.BigInteger" /> object have the same value.</span></span></summary>
        <returns><span data-ttu-id="87a43-404">如果此 <see cref="T:System.Numerics.BigInteger" /> 对象与 <paramref name="other" /> 具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-404"><see langword="true" /> if this <see cref="T:System.Numerics.BigInteger" /> object and <paramref name="other" /> have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-405">此方法实现<xref:System.IEquatable%601>接口，并且执行略微优于<xref:System.Numerics.BigInteger.Equals%28System.Object%29>因为它不具有要转换`other`参数<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-405">This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="87a43-406">若要确定两个之间的关系<xref:System.Numerics.BigInteger>对象，而不只测试是否相等，调用<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-406">To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-407">下面的示例将从地球的多个星号与 Epsilon 为了指明从以确定它们是否相等的地球的距离的近似距离进行比较。</span><span class="sxs-lookup"><span data-stu-id="87a43-407">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="87a43-408">该示例使用的每个重载<xref:System.Numerics.BigInteger.Equals%2A>方法来测试相等性。</span><span class="sxs-lookup"><span data-stu-id="87a43-408">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="bigInteger.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="87a43-409">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-409">The object to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-410">返回一个值，该值指示当前实例与指定的对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-410">Returns a value that indicates whether the current instance and a specified object have the same value.</span></span></summary>
        <returns><span data-ttu-id="87a43-411">如果 <paramref name="obj" /> 参数是 <see cref="T:System.Numerics.BigInteger" /> 对象，并且其值等于当前 <see cref="T:System.Numerics.BigInteger" /> 实例的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-411"><see langword="true" /> if the <paramref name="obj" /> argument is a <see cref="T:System.Numerics.BigInteger" /> object, and its value is equal to the value of the current <see cref="T:System.Numerics.BigInteger" /> instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-412">如果`obj`参数不是<xref:System.Numerics.BigInteger>值，该方法将返回`false`。</span><span class="sxs-lookup"><span data-stu-id="87a43-412">If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`.</span></span> <span data-ttu-id="87a43-413">该方法返回`true`仅当`obj`是<xref:System.Numerics.BigInteger>其值是否等于当前实例的实例。</span><span class="sxs-lookup"><span data-stu-id="87a43-413">The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.</span></span>  
  
 <span data-ttu-id="87a43-414">若要确定而不是只测试是否相等的两个对象之间的关系，请调用<xref:System.Numerics.BigInteger.CompareTo%28System.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-414">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-415">下面的示例定义并行<xref:System.Object>和<xref:System.Numerics.BigInteger>数组。</span><span class="sxs-lookup"><span data-stu-id="87a43-415">The following example defines parallel <xref:System.Object> and <xref:System.Numerics.BigInteger> arrays.</span></span> <span data-ttu-id="87a43-416">一个数组的每个元素具有第二个数组的对应元素相同的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-416">Each element of one array has the same value as the corresponding element of the second array.</span></span> <span data-ttu-id="87a43-417">如示例所示，在实例中的输出<xref:System.Numerics.BigInteger>数组被视为等同于在实例<xref:System.Object>数组仅当后者为<xref:System.Numerics.BigInteger>和它们的值是否相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-417">As the output from the example shows, the instance in the <xref:System.Numerics.BigInteger> array is considered to be equal to the instance in the <xref:System.Object> array only if the latter is a <xref:System.Numerics.BigInteger> and their values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/Equals_Obj1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/Equals_Obj1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="override this.Equals : uint64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="87a43-418">要比较的 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-418">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-419">返回一个值，该值指示当前实例与 64 位无符号整数是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-419">Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</span></span></summary>
        <returns><span data-ttu-id="87a43-420">如果当前实例与 64 位无符号整数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-420"><see langword="true" /> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-421">若要确定而不是只测试是否相等的两个对象之间的关系，请调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-421">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-422">下面的示例将从地球的多个星号与 Epsilon 为了指明从以确定它们是否相等的地球的距离的近似距离进行比较。</span><span class="sxs-lookup"><span data-stu-id="87a43-422">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="87a43-423">该示例使用的每个重载<xref:System.Numerics.BigInteger.Equals%2A>方法来测试相等性。</span><span class="sxs-lookup"><span data-stu-id="87a43-423">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (bool isUnsigned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(bool isUnsigned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (Optional isUnsigned As Boolean = false) As Integer" />
      <MemberSignature Language="F#" Value="member this.GetByteCount : bool -&gt; int" Usage="bigInteger.GetByteCount isUnsigned" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="isUnsigned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="bigInteger.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87a43-424">返回当前 <see cref="T:System.Numerics.BigInteger" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="87a43-424">Returns the hash code for the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="87a43-425">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="87a43-425">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreatestCommonDivisor">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger GreatestCommonDivisor(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreatestCommonDivisor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger GreatestCommonDivisor(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member GreatestCommonDivisor : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.GreatestCommonDivisor (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-426">第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-426">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-427">第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-427">The second value.</span></span></param>
        <summary><span data-ttu-id="87a43-428">查找两个 <see cref="T:System.Numerics.BigInteger" /> 值的最大公约数。</span><span class="sxs-lookup"><span data-stu-id="87a43-428">Finds the greatest common divisor of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="87a43-429"><paramref name="left" /> 和 <paramref name="right" /> 的最大公约数。</span><span class="sxs-lookup"><span data-stu-id="87a43-429">The greatest common divisor of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-430">最大公约数是在其中的最大数字这两个<xref:System.Numerics.BigInteger>值可以划分而不返回余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-430">The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.</span></span>  
  
 <span data-ttu-id="87a43-431">如果`left`和`right`参数为非零的数字，该方法始终返回最小值为 1，因为所有数字可都除以 1。</span><span class="sxs-lookup"><span data-stu-id="87a43-431">If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1.</span></span> <span data-ttu-id="87a43-432">如果任一参数为零，该方法将返回非零参数的绝对值。</span><span class="sxs-lookup"><span data-stu-id="87a43-432">If either parameter is zero, the method returns the absolute value of the non-zero parameter.</span></span> <span data-ttu-id="87a43-433">如果这两个值均为零，该方法将返回零。</span><span class="sxs-lookup"><span data-stu-id="87a43-433">If both values are zero, the method returns zero.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87a43-434">计算的非常大的值的最大公约`left`和`right`可以是一个非常耗时的操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-434">Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.</span></span>  
  
 <span data-ttu-id="87a43-435">返回的值<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>方法始终是正而不考虑的符号`left`和`right`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-435">The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-436">下面的示例阐释如何调用<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>方法和异常处理提供了一些有用的信息所需<xref:System.ArgumentOutOfRangeException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-436">The following example illustrates a call to the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method and the exception handling necessary to provide useful information about an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="87a43-437">结果表示这两个数字的最大公约为 1。</span><span class="sxs-lookup"><span data-stu-id="87a43-437">The result indicates that the greatest common divisor of these two numbers is 1.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#10)]
 [!code-vb[System.Numeric.BigInteger.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEven" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsEven" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEven As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEven { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEven : bool" Usage="System.Numerics.BigInteger.IsEven" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87a43-438">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是偶数。</span><span class="sxs-lookup"><span data-stu-id="87a43-438">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is an even number.</span></span></summary>
        <value><span data-ttu-id="87a43-439">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是偶数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-439"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is an even number; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-440">此属性是一项便利功能，该值指示是否<xref:System.Numerics.BigInteger>值是由两个整除。</span><span class="sxs-lookup"><span data-stu-id="87a43-440">This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two.</span></span> <span data-ttu-id="87a43-441">它等效于以下表达式：</span><span class="sxs-lookup"><span data-stu-id="87a43-441">It is equivalent to the following expression:</span></span>  
  
```csharp   
value % 2 == 0;  
```  
  
```vb  
value Mod 2 = 0  
```  
  
 <span data-ttu-id="87a43-442">如果当前的值<xref:System.Numerics.BigInteger>对象是<xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>，该属性返回`true`。</span><span class="sxs-lookup"><span data-stu-id="87a43-442">If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>, the property returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOne">
      <MemberSignature Language="C#" Value="public bool IsOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsOne" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOne As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOne { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOne : bool" Usage="System.Numerics.BigInteger.IsOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87a43-443">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是 <see cref="P:System.Numerics.BigInteger.One" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-443">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />.</span></span></summary>
        <value><span data-ttu-id="87a43-444">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是 <see cref="P:System.Numerics.BigInteger.One" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-444"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-445">此属性提供的性能明显优于其他比较方法，如`thisBigInteger.Equals(BigInteger.One)`。</span><span class="sxs-lookup"><span data-stu-id="87a43-445">This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public bool IsPowerOfTwo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerOfTwo" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerOfTwo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerOfTwo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPowerOfTwo : bool" Usage="System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87a43-446">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是 2 的幂。</span><span class="sxs-lookup"><span data-stu-id="87a43-446">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is a power of two.</span></span></summary>
        <value><span data-ttu-id="87a43-447">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是 2 的幂，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-447"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is a power of two; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-448">此属性确定是否<xref:System.Numerics.BigInteger>值已设置中有一个非零值位。</span><span class="sxs-lookup"><span data-stu-id="87a43-448">This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set.</span></span> <span data-ttu-id="87a43-449">这意味着，它将返回`true`如果当前的值<xref:System.Numerics.BigInteger>对象为 1 (即 2<sup>0</sup>) 或两个任何更强大的功能。</span><span class="sxs-lookup"><span data-stu-id="87a43-449">This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two.</span></span> <span data-ttu-id="87a43-450">它将返回`false`如果当前值<xref:System.Numerics.BigInteger>对象为 0。</span><span class="sxs-lookup"><span data-stu-id="87a43-450">It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZero">
      <MemberSignature Language="C#" Value="public bool IsZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsZero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsZero" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsZero As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsZero { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsZero : bool" Usage="System.Numerics.BigInteger.IsZero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87a43-451">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是 <see cref="P:System.Numerics.BigInteger.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-451">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />.</span></span></summary>
        <value><span data-ttu-id="87a43-452">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是 <see cref="P:System.Numerics.BigInteger.Zero" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-452"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-453">此属性提供的性能明显优于`BigInteger.Equals(BigInteger.Zero)`。</span><span class="sxs-lookup"><span data-stu-id="87a43-453">This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-454">返回指定数字的对数。</span><span class="sxs-lookup"><span data-stu-id="87a43-454">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-455">要查找其对数的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-455">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="87a43-456">返回指定数字的自然对数（底为 <see langword="e" />）。</span><span class="sxs-lookup"><span data-stu-id="87a43-456">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="87a43-457"><paramref name="value" /> 的自然对数（底为 <see langword="e" />），如“备注”部分中的表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-457">The natural (base <see langword="e" />) logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-458">`value`参数指定为底数 10。</span><span class="sxs-lookup"><span data-stu-id="87a43-458">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="87a43-459">此方法的值取决于的符号的精确返回`value`，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-459">The precise return value of this method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="87a43-460">登录的`value`参数</span><span class="sxs-lookup"><span data-stu-id="87a43-460">Sign of `value` parameter</span></span>|<span data-ttu-id="87a43-461">返回值</span><span class="sxs-lookup"><span data-stu-id="87a43-461">Return value</span></span>|  
|-------------------------------|------------------|  
|<span data-ttu-id="87a43-462">正</span><span class="sxs-lookup"><span data-stu-id="87a43-462">Positive</span></span>|<span data-ttu-id="87a43-463">自然对数`value`; 也就是说，ln `value`，或 log e`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-463">The natural logarithm of `value`; that is, ln `value`, or log e`value`.</span></span>|  
|<span data-ttu-id="87a43-464">零</span><span class="sxs-lookup"><span data-stu-id="87a43-464">Zero</span></span>|<span data-ttu-id="87a43-465"><xref:System.Double.NegativeInfinity>。</span><span class="sxs-lookup"><span data-stu-id="87a43-465"><xref:System.Double.NegativeInfinity>.</span></span>|  
|<span data-ttu-id="87a43-466">负数</span><span class="sxs-lookup"><span data-stu-id="87a43-466">Negative</span></span>|<span data-ttu-id="87a43-467"><xref:System.Double.NaN>。</span><span class="sxs-lookup"><span data-stu-id="87a43-467"><xref:System.Double.NaN>.</span></span>|  
  
 <span data-ttu-id="87a43-468">若要计算的 10 为底<xref:System.Numerics.BigInteger>值时，请调用<xref:System.Numerics.BigInteger.Log10%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-468">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="87a43-469">若要计算的另一个基数的数字的对数，请调用<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-469">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.</span></span>  
  
 <span data-ttu-id="87a43-470">您可以通过调用查找数字的平方根<xref:System.Numerics.BigInteger.Log%2A>方法以及<xref:System.Math.Exp%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-470">You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="87a43-471">请注意，结果是<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>如果结果大于<xref:System.Double.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-471">Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if the result is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="87a43-472">下面的示例计算数组中的每个元素的平方根<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-472">The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]
  
 <span data-ttu-id="87a43-473">此方法对应于<xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType>基元数值类型的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-473">This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87a43-474"><paramref name="value" /> 的自然对数超出了 <see cref="T:System.Double" /> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="87a43-474">The natural log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger, baseValue As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value, double baseValue);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger * double -&gt; double" Usage="System.Numerics.BigInteger.Log (value, baseValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-475">要查找其对数的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-475">A number whose logarithm is to be found.</span></span></param>
        <param name="baseValue"><span data-ttu-id="87a43-476">对数的底。</span><span class="sxs-lookup"><span data-stu-id="87a43-476">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="87a43-477">返回指定数字在使用指定底时的对数。</span><span class="sxs-lookup"><span data-stu-id="87a43-477">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="87a43-478"><paramref name="baseValue" /> 的以 <paramref name="value" /> 为底的对数，如“备注”部分中的表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-478">The base <paramref name="baseValue" /> logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-479">`value`和`baseValue`参数为被指定为基 10 个数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-479">The `value` and `baseValue` parameters are specified as base 10 numbers.</span></span>  
  
 <span data-ttu-id="87a43-480">精确，则返回值的方法取决于的符号`value`号和值在`baseValue`，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-480">The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows.</span></span>  
  
|<span data-ttu-id="87a43-481">`value` 参数</span><span class="sxs-lookup"><span data-stu-id="87a43-481">`value` parameter</span></span>|<span data-ttu-id="87a43-482">`baseValue` 参数</span><span class="sxs-lookup"><span data-stu-id="87a43-482">`baseValue` parameter</span></span>|<span data-ttu-id="87a43-483">返回值</span><span class="sxs-lookup"><span data-stu-id="87a43-483">Return value</span></span>|  
|-----------------------|---------------------------|------------------|  
|<span data-ttu-id="87a43-484">`value` > 0</span><span class="sxs-lookup"><span data-stu-id="87a43-484">`value` > 0</span></span>|<span data-ttu-id="87a43-485">(0 < `baseValue` < 1) -or-(`baseValue` > 1)</span><span class="sxs-lookup"><span data-stu-id="87a43-485">(0 < `baseValue` < 1) -or-(`baseValue` > 1)</span></span>|<span data-ttu-id="87a43-486">logbaseValue(`value`)</span><span class="sxs-lookup"><span data-stu-id="87a43-486">logbaseValue(`value`)</span></span>|  
|<span data-ttu-id="87a43-487">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="87a43-487">`value` < 0</span></span>|<span data-ttu-id="87a43-488">（任意值）</span><span class="sxs-lookup"><span data-stu-id="87a43-488">(any value)</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="87a43-489">（任意值）</span><span class="sxs-lookup"><span data-stu-id="87a43-489">(any value)</span></span>|<span data-ttu-id="87a43-490">`baseValue` < 0</span><span class="sxs-lookup"><span data-stu-id="87a43-490">`baseValue` < 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="87a43-491">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="87a43-491">`value` != 1</span></span>|<span data-ttu-id="87a43-492">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="87a43-492">`baseValue` = 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="87a43-493">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="87a43-493">`value` != 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="87a43-494">（任意值）</span><span class="sxs-lookup"><span data-stu-id="87a43-494">(any value)</span></span>|`baseValue` = <xref:System.Double.NaN?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="87a43-495">（任意值）</span><span class="sxs-lookup"><span data-stu-id="87a43-495">(any value)</span></span>|<span data-ttu-id="87a43-496">`baseValue` = 1</span><span class="sxs-lookup"><span data-stu-id="87a43-496">`baseValue` = 1</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="87a43-497">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="87a43-497">`value` = 0</span></span>|<span data-ttu-id="87a43-498">0 < `baseValue` < 1</span><span class="sxs-lookup"><span data-stu-id="87a43-498">0 < `baseValue` < 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="87a43-499">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="87a43-499">`value` = 0</span></span>|<span data-ttu-id="87a43-500">`baseValue` > 1</span><span class="sxs-lookup"><span data-stu-id="87a43-500">`baseValue` > 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="87a43-501">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="87a43-501">`value` = 1</span></span>|<span data-ttu-id="87a43-502">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="87a43-502">`baseValue` = 0</span></span>|<span data-ttu-id="87a43-503">0</span><span class="sxs-lookup"><span data-stu-id="87a43-503">0</span></span>|  
|<span data-ttu-id="87a43-504">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="87a43-504">`value` = 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<span data-ttu-id="87a43-505">0</span><span class="sxs-lookup"><span data-stu-id="87a43-505">0</span></span>|  
  
 <span data-ttu-id="87a43-506">若要计算的 10 为底<xref:System.Numerics.BigInteger>值时，请调用<xref:System.Numerics.BigInteger.Log10%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-506">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="87a43-507">若要计算数字的自然对数，请调用<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-507">To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.</span></span>  
  
 <span data-ttu-id="87a43-508">此方法对应于<xref:System.Math.Log%2A?displayProperty=nameWithType>基元数值类型的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-508">This method corresponds to the <xref:System.Math.Log%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87a43-509"><paramref name="value" /> 的对数超出了 <see cref="T:System.Double" /> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="87a43-509">The log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log10 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-510">要查找其对数的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-510">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="87a43-511">返回指定数字以 10 为底的对数。</span><span class="sxs-lookup"><span data-stu-id="87a43-511">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="87a43-512"><paramref name="value" /> 的以 10 为底的对数，如“备注”部分中的表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-512">The base 10 logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-513">`value`参数指定为底数 10。</span><span class="sxs-lookup"><span data-stu-id="87a43-513">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="87a43-514">该方法的值取决于的符号的精确返回`value`，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-514">The precise return value of the method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="87a43-515">值参数的符号</span><span class="sxs-lookup"><span data-stu-id="87a43-515">Sign of value parameter</span></span>|<span data-ttu-id="87a43-516">返回值</span><span class="sxs-lookup"><span data-stu-id="87a43-516">Return value</span></span>|  
|-----------------------------|------------------|  
|<span data-ttu-id="87a43-517">正</span><span class="sxs-lookup"><span data-stu-id="87a43-517">Positive</span></span>|<span data-ttu-id="87a43-518">为底 10 的对数`value`; 也就是说，log10`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-518">The base 10 log of `value`; that is, log10`value`.</span></span>|  
|<span data-ttu-id="87a43-519">零</span><span class="sxs-lookup"><span data-stu-id="87a43-519">Zero</span></span>|<span data-ttu-id="87a43-520"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-520"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="87a43-521">负数</span><span class="sxs-lookup"><span data-stu-id="87a43-521">Negative</span></span>|<span data-ttu-id="87a43-522"><xref:System.Double.NaN?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-522"><xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>|  
  
 <span data-ttu-id="87a43-523">若要计算的自然对数<xref:System.Numerics.BigInteger>值时，请调用<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-523">To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="87a43-524">若要计算的另一个基数的数字的对数，请调用<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-524">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="87a43-525">此方法对应于<xref:System.Math.Log10%2A?displayProperty=nameWithType>基元数值类型的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-525">This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87a43-526"><paramref name="value" /> 的以 10 为底的对数超出了 <see cref="T:System.Double" /> 数据类型的范围。</span><span class="sxs-lookup"><span data-stu-id="87a43-526">The base 10 log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Max(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Max(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Max : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Max (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-527">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-527">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-528">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-528">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-529">返回两个 <see cref="T:System.Numerics.BigInteger" /> 值中的较大者。</span><span class="sxs-lookup"><span data-stu-id="87a43-529">Returns the larger of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="87a43-530"><paramref name="left" /> 或 <paramref name="right" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="87a43-530">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-531">此方法对应于<xref:System.Math.Max%2A?displayProperty=nameWithType>基元数值类型的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-531">This method corresponds to the <xref:System.Math.Max%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-532">下面的示例使用<xref:System.Numerics.BigInteger.Max%2A>方法来在一个数组中选择的最大数<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-532">The following example uses the <xref:System.Numerics.BigInteger.Max%2A> method to select the largest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/cs/Max1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/vb/Max1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Min(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Min(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Min : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Min (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-533">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-533">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-534">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-534">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-535">返回两个 <see cref="T:System.Numerics.BigInteger" /> 值中的较小者。</span><span class="sxs-lookup"><span data-stu-id="87a43-535">Returns the smaller of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="87a43-536"><paramref name="left" /> 或 <paramref name="right" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="87a43-536">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-537">此方法对应于<xref:System.Math.Min%2A?displayProperty=nameWithType>基元数值类型的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-537">This method corresponds to the <xref:System.Math.Min%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-538">下面的示例使用<xref:System.Numerics.BigInteger.Min%2A>方法来选择最少数量的数组中<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-538">The following example uses the <xref:System.Numerics.BigInteger.Min%2A> method to select the smallest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/cs/Min1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/vb/Min1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="MinusOne">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger MinusOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger MinusOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.MinusOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinusOne As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger MinusOne { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.MinusOne : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.MinusOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87a43-539">获取一个表示数字负一 (-1) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-539">Gets a value that represents the number negative one (-1).</span></span></summary>
        <value><span data-ttu-id="87a43-540">其值为负一 (-1) 的整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-540">An integer whose value is negative one (-1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-541"><xref:System.Numerics.BigInteger.MinusOne%2A>属性用于比较<xref:System.Numerics.BigInteger>值为-1，或将-1 到<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-541">The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
      </Docs>
    </Member>
    <Member MemberName="ModPow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger ModPow(valuetype System.Numerics.BigInteger value, valuetype System.Numerics.BigInteger exponent, valuetype System.Numerics.BigInteger modulus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModPow (value As BigInteger, exponent As BigInteger, modulus As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger ModPow(System::Numerics::BigInteger value, System::Numerics::BigInteger exponent, System::Numerics::BigInteger modulus);" />
      <MemberSignature Language="F#" Value="static member ModPow : System.Numerics.BigInteger * System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.ModPow (value, exponent, modulus)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Numerics.BigInteger" />
        <Parameter Name="modulus" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-542">要计算 <paramref name="exponent" /> 次幂的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-542">The number to raise to the <paramref name="exponent" /> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="87a43-543">对 <paramref name="value" /> 进行幂运算的指数。</span><span class="sxs-lookup"><span data-stu-id="87a43-543">The exponent to raise <paramref name="value" /> by.</span></span></param>
        <param name="modulus"><span data-ttu-id="87a43-544"><paramref name="value" /> 的 <paramref name="exponent" /> 次幂要除以的数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-544">The number by which to divide <paramref name="value" /> raised to the <paramref name="exponent" /> power.</span></span></param>
        <summary><span data-ttu-id="87a43-545">对以某个数为底、以另一个数为指数的幂执行模数除法。</span><span class="sxs-lookup"><span data-stu-id="87a43-545">Performs modulus division on a number raised to the power of another number.</span></span></summary>
        <returns><span data-ttu-id="87a43-546">将 <paramref name="value" /><sup>exponent</sup> 除以 <paramref name="modulus" /> 后的余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-546">The remainder after dividing <paramref name="value" /><sup>exponent</sup> by <paramref name="modulus" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-547"><xref:System.Numerics.BigInteger.ModPow%2A>方法将评估以下表达式：</span><span class="sxs-lookup"><span data-stu-id="87a43-547">The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:</span></span>  
  
 <span data-ttu-id="87a43-548">(baseValue ^ 指数)Mod 取模</span><span class="sxs-lookup"><span data-stu-id="87a43-548">(baseValue ^ exponent) Mod modulus</span></span>  
  
 <span data-ttu-id="87a43-549">若要对执行求幂<xref:System.Numerics.BigInteger>无模数除法的值使用<xref:System.Numerics.BigInteger.Pow%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-549">To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-550">下面的示例提供了调用的简单说明<xref:System.Numerics.BigInteger.ModPow%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-550">The following example provides a simple illustration of calling the <xref:System.Numerics.BigInteger.ModPow%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/cs/ModPow1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/vb/ModPow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="87a43-551"><paramref name="modulus" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="87a43-551"><paramref name="modulus" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87a43-552"><paramref name="exponent" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="87a43-552"><paramref name="exponent" /> is negative.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Multiply(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-553">要相乘的第一个数。</span><span class="sxs-lookup"><span data-stu-id="87a43-553">The first number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-554">要相乘的第二个数。</span><span class="sxs-lookup"><span data-stu-id="87a43-554">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="87a43-555">返回两个 <see cref="T:System.Numerics.BigInteger" /> 值的乘积。</span><span class="sxs-lookup"><span data-stu-id="87a43-555">Returns the product of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="87a43-556"><paramref name="left" /> 与 <paramref name="right" /> 参数的乘积。</span><span class="sxs-lookup"><span data-stu-id="87a43-556">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-557"><xref:System.Numerics.BigInteger.Multiply%2A>语言不支持运算符重载的实现方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-557">The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading.</span></span> <span data-ttu-id="87a43-558">其行为与使用乘法运算符的乘法完全相同。</span><span class="sxs-lookup"><span data-stu-id="87a43-558">Its behavior is identical to multiplication using the multiplication operator.</span></span> <span data-ttu-id="87a43-559">此外，<xref:System.Numerics.BigInteger.Multiply%2A>方法实例化时是乘法运算符的有用替代<xref:System.Numerics.BigInteger>变量通过将其分配乘法，而得出的产品，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-559">In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  
  
 <span data-ttu-id="87a43-560">如果有必要，此方法会自动执行隐式转换为其他整数类型<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-560">If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="87a43-561">在下一节中的示例阐释了这其中<xref:System.Numerics.BigInteger.Multiply%2A>方法传递两个<xref:System.Int64>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-561">This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-562">下面的示例尝试执行具有两个长整数乘法。</span><span class="sxs-lookup"><span data-stu-id="87a43-562">The following example tries to perform multiplication with two long integers.</span></span> <span data-ttu-id="87a43-563">因为结果超出长整数的范围<xref:System.OverflowException>引发，和<xref:System.Numerics.BigInteger.Multiply%2A>调用方法来处理该乘法运算。</span><span class="sxs-lookup"><span data-stu-id="87a43-563">Because the result exceeds the range of a long integer, an <xref:System.OverflowException> is thrown, and the <xref:System.Numerics.BigInteger.Multiply%2A> method is called to handle the multiplication.</span></span> <span data-ttu-id="87a43-564">请注意，C# 需要您使用两个`checked`关键字 （如本例所示） 或`/checked+`编译器选项，以确保在数值溢出将引发异常。</span><span class="sxs-lookup"><span data-stu-id="87a43-564">Note that C# requires that you use either the `checked` keyword (as in this example) or the `/checked+` compiler option to make sure an exception is thrown on a numeric overflow.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#7)]
 [!code-vb[System.Numeric.BigInteger.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Negate(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Negate(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-565">要求反的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-565">The value to negate.</span></span></param>
        <summary><span data-ttu-id="87a43-566">对指定的 <see cref="T:System.Numerics.BigInteger" /> 值求反。</span><span class="sxs-lookup"><span data-stu-id="87a43-566">Negates a specified <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-567"><paramref name="value" /> 参数乘以负一 (-1) 的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-567">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-568">求反运算获取数字的加法逆元。</span><span class="sxs-lookup"><span data-stu-id="87a43-568">Negation obtains the additive inverse of a number.</span></span> <span data-ttu-id="87a43-569">数字的加法逆元是添加到原始编号时生成的值为零的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-569">The additive inverse of a number is a number that produces a value of zero when it is added to the original number.</span></span>  
  
 <span data-ttu-id="87a43-570"><xref:System.Numerics.BigInteger.Negate%2A>语言不支持自定义运算符的实现方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-570">The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="87a43-571">其行为等同于使用一元求反运算符的求反。</span><span class="sxs-lookup"><span data-stu-id="87a43-571">Its behavior is identical to negation using the unary negation operator.</span></span> <span data-ttu-id="87a43-572">此外，<xref:System.Numerics.BigInteger.Negate%2A>方法实例化时是求反运算符的有用替代<xref:System.Numerics.BigInteger>变量，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-572">In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="87a43-573">下面的示例演示三种方式要求反的值<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-573">The following example illustrates three ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger One" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property One As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger One { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.One : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.One" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87a43-574">获取一个表示数字一 (1) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-574">Gets a value that represents the number one (1).</span></span></summary>
        <value><span data-ttu-id="87a43-575">其值为一 (1) 的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-575">An object whose value is one (1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-576"><xref:System.Numerics.BigInteger.One%2A>属性通常用于比较<xref:System.Numerics.BigInteger>值为 1，或若要将分配到 1<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-576">The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
        <altmember cref="P:System.Numerics.BigInteger.MinusOne" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Addition(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-577">要相加的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-577">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-578">要相加的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-578">The second value to add.</span></span></param>
        <summary><span data-ttu-id="87a43-579">将两个指定的 <see cref="T:System.Numerics.BigInteger" /> 对象的值相加。</span><span class="sxs-lookup"><span data-stu-id="87a43-579">Adds the values of two specified <see cref="T:System.Numerics.BigInteger" /> objects.</span></span></summary>
        <returns><span data-ttu-id="87a43-580"><paramref name="left" /> 与 <paramref name="right" /> 的和。</span><span class="sxs-lookup"><span data-stu-id="87a43-580">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-581"><xref:System.Numerics.BigInteger.op_Addition%2A>方法定义的加法运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-581">The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-582">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-582">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]
 [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  
  
 <span data-ttu-id="87a43-583">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Add%2A>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-583">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseAnd">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &amp; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseAnd(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator And (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &amp;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &amp;&amp;&amp; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left &amp;&amp;&amp; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-584">第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-584">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-585">第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-585">The second value.</span></span></param>
        <summary><span data-ttu-id="87a43-586">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行按位 <see langword="And" /> 运算。</span><span class="sxs-lookup"><span data-stu-id="87a43-586">Performs a bitwise <see langword="And" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="87a43-587">按位 <see langword="And" /> 运算的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-587">The result of the bitwise <see langword="And" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-588"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A>方法定义的按位`And`操作<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-588">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-589">按位`And`操作设置结果位仅当相应的位`left`和`right`还设置下, 表中所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-589">The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="87a43-590">中的位 `left`</span><span class="sxs-lookup"><span data-stu-id="87a43-590">Bit in `left`</span></span>|<span data-ttu-id="87a43-591">中的位 `right`</span><span class="sxs-lookup"><span data-stu-id="87a43-591">Bit in `right`</span></span>|<span data-ttu-id="87a43-592">在结果中位</span><span class="sxs-lookup"><span data-stu-id="87a43-592">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="87a43-593">0</span><span class="sxs-lookup"><span data-stu-id="87a43-593">0</span></span>|<span data-ttu-id="87a43-594">0</span><span class="sxs-lookup"><span data-stu-id="87a43-594">0</span></span>|<span data-ttu-id="87a43-595">0</span><span class="sxs-lookup"><span data-stu-id="87a43-595">0</span></span>|  
|<span data-ttu-id="87a43-596">1</span><span class="sxs-lookup"><span data-stu-id="87a43-596">1</span></span>|<span data-ttu-id="87a43-597">0</span><span class="sxs-lookup"><span data-stu-id="87a43-597">0</span></span>|<span data-ttu-id="87a43-598">0</span><span class="sxs-lookup"><span data-stu-id="87a43-598">0</span></span>|  
|<span data-ttu-id="87a43-599">1</span><span class="sxs-lookup"><span data-stu-id="87a43-599">1</span></span>|<span data-ttu-id="87a43-600">1</span><span class="sxs-lookup"><span data-stu-id="87a43-600">1</span></span>|<span data-ttu-id="87a43-601">1</span><span class="sxs-lookup"><span data-stu-id="87a43-601">1</span></span>|  
|<span data-ttu-id="87a43-602">0</span><span class="sxs-lookup"><span data-stu-id="87a43-602">0</span></span>|<span data-ttu-id="87a43-603">1</span><span class="sxs-lookup"><span data-stu-id="87a43-603">1</span></span>|<span data-ttu-id="87a43-604">0</span><span class="sxs-lookup"><span data-stu-id="87a43-604">0</span></span>|  
  
 <span data-ttu-id="87a43-605"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A>方法使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-605">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  
  
 <span data-ttu-id="87a43-606"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A>方法执行按位`And`对两个操作<xref:System.Numerics.BigInteger>值就好像在带虚拟符号扩展的补数表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-606">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator | (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Or (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator |(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ||| ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ||| right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-607">第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-607">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-608">第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-608">The second value.</span></span></param>
        <summary><span data-ttu-id="87a43-609">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行按位 <see langword="Or" /> 运算。</span><span class="sxs-lookup"><span data-stu-id="87a43-609">Performs a bitwise <see langword="Or" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="87a43-610">按位 <see langword="Or" /> 运算的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-610">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-611"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A>方法定义的按位`Or`操作<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-611">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-612">按位`Or`操作一个或两个中的对应位将设置结果位仅当`left`和`right`设置下, 表中所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-612">The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="87a43-613">中的位 `left`</span><span class="sxs-lookup"><span data-stu-id="87a43-613">Bit in `left`</span></span>|<span data-ttu-id="87a43-614">中的位 `right`</span><span class="sxs-lookup"><span data-stu-id="87a43-614">Bit in `right`</span></span>|<span data-ttu-id="87a43-615">在结果中位</span><span class="sxs-lookup"><span data-stu-id="87a43-615">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="87a43-616">0</span><span class="sxs-lookup"><span data-stu-id="87a43-616">0</span></span>|<span data-ttu-id="87a43-617">0</span><span class="sxs-lookup"><span data-stu-id="87a43-617">0</span></span>|<span data-ttu-id="87a43-618">0</span><span class="sxs-lookup"><span data-stu-id="87a43-618">0</span></span>|  
|<span data-ttu-id="87a43-619">1</span><span class="sxs-lookup"><span data-stu-id="87a43-619">1</span></span>|<span data-ttu-id="87a43-620">0</span><span class="sxs-lookup"><span data-stu-id="87a43-620">0</span></span>|<span data-ttu-id="87a43-621">1</span><span class="sxs-lookup"><span data-stu-id="87a43-621">1</span></span>|  
|<span data-ttu-id="87a43-622">1</span><span class="sxs-lookup"><span data-stu-id="87a43-622">1</span></span>|<span data-ttu-id="87a43-623">1</span><span class="sxs-lookup"><span data-stu-id="87a43-623">1</span></span>|<span data-ttu-id="87a43-624">1</span><span class="sxs-lookup"><span data-stu-id="87a43-624">1</span></span>|  
|<span data-ttu-id="87a43-625">0</span><span class="sxs-lookup"><span data-stu-id="87a43-625">0</span></span>|<span data-ttu-id="87a43-626">1</span><span class="sxs-lookup"><span data-stu-id="87a43-626">1</span></span>|<span data-ttu-id="87a43-627">1</span><span class="sxs-lookup"><span data-stu-id="87a43-627">1</span></span>|  
  
 <span data-ttu-id="87a43-628"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A>方法使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-628">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  
  
 <span data-ttu-id="87a43-629"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A>方法执行按位`Or`对两个操作<xref:System.Numerics.BigInteger>值就好像在带虚拟符号扩展的补数表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-629">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator -- (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Decrement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Decrement (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator --(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Decrement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Decrement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-630">要递减的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-630">The value to decrement.</span></span></param>
        <summary><span data-ttu-id="87a43-631">将 <see cref="T:System.Numerics.BigInteger" /> 值减 1。</span><span class="sxs-lookup"><span data-stu-id="87a43-631">Decrements a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="87a43-632"><paramref name="value" /> 参数减 1 后的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-632">The value of the <paramref name="value" /> parameter decremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-633"><xref:System.Numerics.BigInteger.op_Decrement%2A>方法定义的减量操作<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-633">The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-634">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-634">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  
  
 <span data-ttu-id="87a43-635">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Subtract%2A>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-635">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead.</span></span> <span data-ttu-id="87a43-636">例如:</span><span class="sxs-lookup"><span data-stu-id="87a43-636">For example:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  
  
 <span data-ttu-id="87a43-637">因为<xref:System.Numerics.BigInteger>对象是不可变，<xref:System.Numerics.BigInteger.op_Decrement%2A>运算符创建一个新<xref:System.Numerics.BigInteger>对象，其值为一个小于<xref:System.Numerics.BigInteger>所表示对象`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-637">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="87a43-638">这意味着，重复调用<xref:System.Numerics.BigInteger.op_Decrement%2A>可能开销很大。</span><span class="sxs-lookup"><span data-stu-id="87a43-638">This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="87a43-639">此运算符的等效方法是<xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-639">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator / (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Division(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator /(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend / divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="87a43-640">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-640">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="87a43-641">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-641">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="87a43-642">通过使用整除，将指定的 <see cref="T:System.Numerics.BigInteger" /> 值除以另一个指定的 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-642">Divides a specified <see cref="T:System.Numerics.BigInteger" /> value by another specified <see cref="T:System.Numerics.BigInteger" /> value by using integer division.</span></span></summary>
        <returns><span data-ttu-id="87a43-643">相除的整数结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-643">The integral result of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-644"><xref:System.Numerics.BigInteger.op_Division%2A>方法定义的除法运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-644">The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-645">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-645">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]
 [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  
  
 <span data-ttu-id="87a43-646">不支持自定义的运算符和运算符重载的语言可以调用<xref:System.Numerics.BigInteger.Divide%2A>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-646">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.</span></span>  
  
 <span data-ttu-id="87a43-647">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="87a43-647">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="87a43-648">下面的示例创建的数组<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-648">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-649">然后，它使用每个元素中使用的除法运算的商作为<xref:System.Numerics.BigInteger.Divide%2A>方法，除法运算符 （/） 和<xref:System.Numerics.BigInteger.DivRem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-649">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="87a43-650"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="87a43-650"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-651">返回一个值，该值指示两个值是否相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-651">Returns a value that indicates whether two values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-652">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-652">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-653">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-653">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-654">返回一个值，该值指示带符号长整数值与 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-654">Returns a value that indicates whether a signed long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns><span data-ttu-id="87a43-655">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-655"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-656"><xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29>方法定义的相等性比较运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-656">The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-657">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-657">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  
  
 <span data-ttu-id="87a43-658">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>改为实例方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-658">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="87a43-659">如果`left`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-659">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-660">此运算符的等效方法是<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-660">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-661">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-661">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-662">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-662">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-663">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与带符号长整数值是否相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-663">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a signed long integer value are equal.</span></span></summary>
        <returns><span data-ttu-id="87a43-664">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-664"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-665"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29>方法定义的相等性比较运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-665">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-666">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-666">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  
  
 <span data-ttu-id="87a43-667">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>改为实例方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-667">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="87a43-668">如果`right`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-668">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-669">此运算符的等效方法是<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-669">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-670">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-670">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-671">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-671">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-672">返回一个值，该值指示两个 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-672">Returns a value that indicates whether the values of two <see cref="T:System.Numerics.BigInteger" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="87a43-673">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-673"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-674"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法定义的相等运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-674">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-675">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-675">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]
 [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  
  
 <span data-ttu-id="87a43-676">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>改为实例方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-676">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="87a43-677">此运算符的等效方法是<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-677">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.Equals" />
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-678">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-678">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-679">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-679">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-680">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与无符号长整数值是否相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-680">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and an unsigned long integer value are equal.</span></span></summary>
        <returns><span data-ttu-id="87a43-681">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-681"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-682"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法定义的相等性比较运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-682">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-683">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-683">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  
  
 <span data-ttu-id="87a43-684">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>改为实例方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-684">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-685">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-685">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-686">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-686">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-687">返回一个值，该值指示无符号长整数值与 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-687">Returns a value that indicates whether an unsigned long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns><span data-ttu-id="87a43-688">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-688"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-689"><xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法定义的相等性比较运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-689">The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-690">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-690">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]
 [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  
  
 <span data-ttu-id="87a43-691">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>改为实例方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-691">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ^ (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_ExclusiveOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Xor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ^(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ^^^ ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ^^^ right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-692">第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-692">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-693">第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-693">The second value.</span></span></param>
        <summary><span data-ttu-id="87a43-694">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行按位异 <see langword="Or" /> (<see langword="XOr" />) 运算。</span><span class="sxs-lookup"><span data-stu-id="87a43-694">Performs a bitwise exclusive <see langword="Or" /> (<see langword="XOr" />) operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="87a43-695">按位 <see langword="Or" /> 运算的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-695">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-696">结果的按位异`Or`操作是`true`那么两个位的值不同; 否则为它是`false`。</span><span class="sxs-lookup"><span data-stu-id="87a43-696">The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`.</span></span> <span data-ttu-id="87a43-697">下表说明了排他`Or`操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-697">The following table illustrates the exclusive `Or` operation.</span></span>  
  
|<span data-ttu-id="87a43-698">中的位 x `left`</span><span class="sxs-lookup"><span data-stu-id="87a43-698">Bit x in `left`</span></span>|<span data-ttu-id="87a43-699">中的位 x `right`</span><span class="sxs-lookup"><span data-stu-id="87a43-699">Bit x in `right`</span></span>|<span data-ttu-id="87a43-700">返回值</span><span class="sxs-lookup"><span data-stu-id="87a43-700">Return value</span></span>|  
|---------------------|----------------------|------------------|  
|<span data-ttu-id="87a43-701">0</span><span class="sxs-lookup"><span data-stu-id="87a43-701">0</span></span>|<span data-ttu-id="87a43-702">0</span><span class="sxs-lookup"><span data-stu-id="87a43-702">0</span></span>|<span data-ttu-id="87a43-703">0</span><span class="sxs-lookup"><span data-stu-id="87a43-703">0</span></span>|  
|<span data-ttu-id="87a43-704">0</span><span class="sxs-lookup"><span data-stu-id="87a43-704">0</span></span>|<span data-ttu-id="87a43-705">1</span><span class="sxs-lookup"><span data-stu-id="87a43-705">1</span></span>|<span data-ttu-id="87a43-706">1</span><span class="sxs-lookup"><span data-stu-id="87a43-706">1</span></span>|  
|<span data-ttu-id="87a43-707">1</span><span class="sxs-lookup"><span data-stu-id="87a43-707">1</span></span>|<span data-ttu-id="87a43-708">0</span><span class="sxs-lookup"><span data-stu-id="87a43-708">0</span></span>|<span data-ttu-id="87a43-709">1</span><span class="sxs-lookup"><span data-stu-id="87a43-709">1</span></span>|  
|<span data-ttu-id="87a43-710">1</span><span class="sxs-lookup"><span data-stu-id="87a43-710">1</span></span>|<span data-ttu-id="87a43-711">1</span><span class="sxs-lookup"><span data-stu-id="87a43-711">1</span></span>|<span data-ttu-id="87a43-712">0</span><span class="sxs-lookup"><span data-stu-id="87a43-712">0</span></span>|  
  
 <span data-ttu-id="87a43-713"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A>方法使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-713">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]
 [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  
  
 <span data-ttu-id="87a43-714"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A>方法执行按位异`Or`对两个操作<xref:System.Numerics.BigInteger>值就好像在带虚拟符号扩展的补数表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-714">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-715">定义 <see cref="T:System.Numerics.BigInteger" /> 对象与其他类型之间的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-715">Defines an explicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-716">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-716">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-717">定义从 <see cref="T:System.Decimal" /> 对象到 <see cref="T:System.Numerics.BigInteger" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-717">Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-718">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-718">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-719">小数部分`value`在转换前截断参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-719">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="87a43-720">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-720">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-721">因为从转换<xref:System.Decimal>到<xref:System.Numerics.BigInteger>截断小数部分可能涉及到`value`，语言编译器不会自动执行此转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-721">Because the conversion from <xref:System.Decimal> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="87a43-722">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-722">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-723">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-723">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="87a43-724">对于不支持自定义的运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-724">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="87a43-725">以下示例将转换的数组中的各个元素<xref:System.Decimal>值到<xref:System.Numerics.BigInteger>对象，并显示每个转换的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-725">The following example converts the individual elements in an array of <xref:System.Decimal> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="87a43-726">请注意任何小数部分的一部分<xref:System.Decimal>在转换期间截断的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-726">Note that any fractional part of a <xref:System.Decimal> value is truncated during the conversion.</span></span>   

 [!code-csharp[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#1)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Double) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(double value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : double -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-727">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-727">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-728">定义从 <see cref="T:System.Double" /> 值到 <see cref="T:System.Numerics.BigInteger" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-728">Defines an explicit conversion of a <see cref="T:System.Double" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-729">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-729">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-730">小数部分`value`在转换前截断参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-730">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="87a43-731">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-731">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-732">因为从转换<xref:System.Double>到<xref:System.Numerics.BigInteger>截断小数部分可能涉及到`value`，语言编译器不会自动执行此转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-732">Because the conversion from <xref:System.Double> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="87a43-733">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-733">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-734">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-734">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="87a43-735">对于不支持自定义的运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-735">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="87a43-736">以下示例将转换的数组中的各个元素<xref:System.Double>值到<xref:System.Numerics.BigInteger>对象，并显示每个转换的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-736">The following example converts the individual elements in an array of <xref:System.Double> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="87a43-737">请注意任何小数部分的一部分<xref:System.Double>在转换期间截断的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-737">Note that any fractional part of a <xref:System.Double> value is truncated during the conversion.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#2)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#2)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-738"><paramref name="value" /> 为 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-738"><paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator byte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Byte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; byte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-739">要转换为 <see cref="T:System.Byte" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-739">The value to convert to a <see cref="T:System.Byte" />.</span></span></param>
        <summary><span data-ttu-id="87a43-740">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到无符号字节值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-740">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned byte value.</span></span></summary>
        <returns><span data-ttu-id="87a43-741">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-741">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-742">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-742">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-743">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-743">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-744">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CByte`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-744">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CByte` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-745">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-745">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="87a43-746">此操作定义的收缩转换，因为它可能会引发<xref:System.OverflowException>如果在运行时<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Byte>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-746">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span> <span data-ttu-id="87a43-747">没有在随后出现的精度不会丢失<xref:System.Byte>值转换是否成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-747">There is no loss of precision in the resulting <xref:System.Byte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="87a43-748">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.Byte>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-748">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Byte> values.</span></span> <span data-ttu-id="87a43-749">它还处理<xref:System.OverflowException>因为引发<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Byte>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-749">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#1)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-750"><paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-750"><paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; decimal" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-751">要转换为 <see cref="T:System.Decimal" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-751">The value to convert to a <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="87a43-752">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 <see cref="T:System.Decimal" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-752">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-753">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-753">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-754">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-754">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-755">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-755">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-756">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CDec`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-756">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDec` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="87a43-757">此操作定义的收缩转换，因为它可能会引发<xref:System.OverflowException>如果在运行时<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Decimal>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-757">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span> 

## Examples
 <span data-ttu-id="87a43-758">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.Decimal>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-758">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Decimal> values.</span></span> <span data-ttu-id="87a43-759">它还处理<xref:System.OverflowException>因为引发<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Decimal>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-759">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-760"><paramref name="value" /> 小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-760"><paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-761">要转换为 <see cref="T:System.Double" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-761">The value to convert to a <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="87a43-762">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 <see cref="T:System.Double" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-762">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-763">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-763">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-764">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-764">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-765">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-765">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-766">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CDbl`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-766">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDbl` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="87a43-767">因为<xref:System.Numerics.BigInteger>值可以是外部的范围<xref:System.Double>数据类型，此操作是收缩转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-767">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Double> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="87a43-768">如果转换失败，它不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-768">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-769">相反，如果<xref:System.Numerics.BigInteger>值是小于<xref:System.Double.MinValue?displayProperty=nameWithType>，从而<xref:System.Double>值是<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-769">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Double.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="87a43-770">如果<xref:System.Numerics.BigInteger>值大于<xref:System.Double.MaxValue?displayProperty=nameWithType>，从而<xref:System.Double>值是<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-770">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>
 
 <span data-ttu-id="87a43-771">转换<xref:System.Numerics.BigInteger>到<xref:System.Double>可能会丢失精度。</span><span class="sxs-lookup"><span data-stu-id="87a43-771">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Double> may involve a loss of precision.</span></span> <span data-ttu-id="87a43-772">精度降低可能会成功执行该强制转换或转换操作导致在某些情况下，即使<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Double>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-772">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="87a43-773">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="87a43-773">The following example provides an illustration.</span></span> <span data-ttu-id="87a43-774">它分配的最大值<xref:System.Double>为两个<xref:System.Numerics.BigInteger>变量，将一个<xref:System.Numerics.BigInteger>9.999 e 291, 并测试是否相等的两个变量的变量。</span><span class="sxs-lookup"><span data-stu-id="87a43-774">It assigns the maximum value of a <xref:System.Double> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="87a43-775">按预期方式调用<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法演示它们是否不相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-775">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="87a43-776">但是，将较大的转换<xref:System.Numerics.BigInteger>值改回<xref:System.Double>成功，尽管<xref:System.Numerics.BigInteger>值现在超过<xref:System.Double.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-776">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Double> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#4)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#4)]   



## Examples
 <span data-ttu-id="87a43-777">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-777">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Double> values.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator short (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator short(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-778">要转换为 16 位带符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-778">The value to convert to a 16-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="87a43-779">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 16 位带符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-779">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 16-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="87a43-780">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-780">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-781">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-781">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-782">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-782">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-783">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CShort`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-783">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CShort` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-784">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-784">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="87a43-785">此操作定义的收缩转换，因为它可能会引发<xref:System.OverflowException>如果在运行时<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Int16>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-785">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span> <span data-ttu-id="87a43-786">没有在随后出现的精度不会丢失<xref:System.Int16>值转换是否成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-786">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="87a43-787">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.Int16>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-787">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int16> values.</span></span> <span data-ttu-id="87a43-788">它还处理<xref:System.OverflowException>因为引发<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Int16>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-788">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#4)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-789"><paramref name="value" /> 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-789"><paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or is greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-790">要转换为 32 位带符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-790">The value to convert to a 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="87a43-791">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 32 位带符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-791">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 32-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="87a43-792">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-792">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-793">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-793">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-794">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-794">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-795">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CInt`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-795">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CInt` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-796">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-796">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="87a43-797">此操作定义的收缩转换，因为它可能会引发<xref:System.OverflowException>如果在运行时<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Int32>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-797">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span> <span data-ttu-id="87a43-798">没有在随后出现的精度不会丢失<xref:System.Int16>值转换是否成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-798">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="87a43-799">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.Int32>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-799">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int32> values.</span></span> <span data-ttu-id="87a43-800">它还处理<xref:System.OverflowException>因为引发<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Int32>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-800">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#5)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-801"><paramref name="value" /> 小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-801"><paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-802">要转换为 64 位带符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-802">The value to convert to a 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="87a43-803">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 64 位带符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-803">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="87a43-804">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-804">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-805">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-805">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-806">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-806">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-807">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CLng`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-807">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CLng` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-808">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-808">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="87a43-809">此操作定义的收缩转换，因为它可能会引发<xref:System.OverflowException>如果在运行时<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Int64>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-809">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span> 

## Examples
 <span data-ttu-id="87a43-810">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.Int64>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-810">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int64> values.</span></span> <span data-ttu-id="87a43-811">它还处理<xref:System.OverflowException>因为引发<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Int64>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-811">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#6)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-812"><paramref name="value" /> 小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-812"><paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or is greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator sbyte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::SByte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; sbyte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-813">要转换为 8 位带符号值的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-813">The value to convert to a signed 8-bit value.</span></span></param>
        <summary><span data-ttu-id="87a43-814">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 8 位带符号值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-814">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a signed 8-bit value.</span></span>  
  
<span data-ttu-id="87a43-815">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="87a43-815">This API is not CLS-compliant.</span></span> <span data-ttu-id="87a43-816">符合的替代方法是 <see cref="T:System.Int16" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-816">The compliant alternative is <see cref="T:System.Int16" />.</span></span></summary>
        <returns><span data-ttu-id="87a43-817">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-817">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-818">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-818">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-819">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-819">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-820">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CSByte`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-820">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSByte` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-821">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-821">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="87a43-822">此操作定义的收缩转换，因为它可能会引发<xref:System.OverflowException>如果在运行时<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.SByte>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-822">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span> <span data-ttu-id="87a43-823">没有在随后出现的精度不会丢失<xref:System.SByte>值转换是否成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-823">There is no loss of precision in the resulting <xref:System.SByte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="87a43-824">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.SByte>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-824">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.SByte> values.</span></span> <span data-ttu-id="87a43-825">它还处理<xref:System.OverflowException>因为引发<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.SByte>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-825">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#7)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-826"><paramref name="value" /> 小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-826"><paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or is greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; single" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-827">要转换为单精度浮点值的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-827">The value to convert to a single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="87a43-828">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到单精度浮点值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-828">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a single-precision floating-point value.</span></span></summary>
        <returns><span data-ttu-id="87a43-829">一个对象，包含 <paramref name="value" /> 参数的尽可能精确的表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-829">An object that contains the closest possible representation of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-830">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-830">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-831">语言编译器不会自动执行此转换，因为它会导致数据丢失或损失精度。</span><span class="sxs-lookup"><span data-stu-id="87a43-831">Language compilers do not perform this conversion automatically because it can involve data loss or a loss of precision.</span></span> <span data-ttu-id="87a43-832">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CSng`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-832">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSng` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-833">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-833">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="87a43-834">因为<xref:System.Numerics.BigInteger>值可以是外部的范围<xref:System.Single>数据类型，此操作是收缩转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-834">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Single> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="87a43-835">如果转换失败，它不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-835">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-836">相反，如果<xref:System.Numerics.BigInteger>值是小于<xref:System.Single.MinValue?displayProperty=nameWithType>，从而<xref:System.Single>值是<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-836">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Single.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="87a43-837">如果<xref:System.Numerics.BigInteger>值大于<xref:System.Single.MaxValue?displayProperty=nameWithType>，从而<xref:System.Single>值是<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-837">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="87a43-838">转换<xref:System.Numerics.BigInteger>到<xref:System.Single>可能会丢失精度。</span><span class="sxs-lookup"><span data-stu-id="87a43-838">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Single> may involve a loss of precision.</span></span> <span data-ttu-id="87a43-839">精度降低可能会成功执行该强制转换或转换操作导致在某些情况下，即使<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.Single>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-839">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Single> data type.</span></span> <span data-ttu-id="87a43-840">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="87a43-840">The following example provides an illustration.</span></span> <span data-ttu-id="87a43-841">它分配的最大值<xref:System.Single>为两个<xref:System.Numerics.BigInteger>变量，将一个<xref:System.Numerics.BigInteger>9.999 e 291, 并测试是否相等的两个变量的变量。</span><span class="sxs-lookup"><span data-stu-id="87a43-841">It assigns the maximum value of a <xref:System.Single> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="87a43-842">按预期方式调用<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法演示它们是否不相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-842">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="87a43-843">但是，将较大的转换<xref:System.Numerics.BigInteger>值改回<xref:System.Single>成功，尽管<xref:System.Numerics.BigInteger>值现在超过<xref:System.Single.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-843">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Single> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#5)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#5)]   



## Examples
 <span data-ttu-id="87a43-844">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.Single>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-844">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Single> values.</span></span>   
     
 [!code-csharp[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ushort (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt16(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-845">要转换为 16 位无符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-845">The value to convert to an unsigned 16-bit integer.</span></span></param>
        <summary><span data-ttu-id="87a43-846">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 16 位无符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-846">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 16-bit integer value.</span></span>  
  
<span data-ttu-id="87a43-847">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="87a43-847">This API is not CLS-compliant.</span></span> <span data-ttu-id="87a43-848">符合的替代方法是 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-848">The compliant alternative is <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="87a43-849">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-849">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-850">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-850">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-851">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-851">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-852">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CUShort`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-852">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUShort` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-853">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-853">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="87a43-854">此操作定义的收缩转换，因为它可能会引发<xref:System.OverflowException>如果在运行时<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.UInt16>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-854">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span> <span data-ttu-id="87a43-855">没有在随后出现的精度不会丢失<xref:System.UInt16>值转换是否成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-855">There is no loss of precision in the resulting <xref:System.UInt16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="87a43-856">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.UInt16>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-856">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt16> values.</span></span> <span data-ttu-id="87a43-857">它还处理<xref:System.OverflowException>因为引发<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.UInt16>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-857">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#9)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#9)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-858"><paramref name="value" /> 小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-858"><paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" /> or is greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint32" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-859">要转换为 32 位无符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-859">The value to convert to an unsigned 32-bit integer.</span></span></param>
        <summary><span data-ttu-id="87a43-860">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 32 位无符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-860">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 32-bit integer value.</span></span>  
  
<span data-ttu-id="87a43-861">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="87a43-861">This API is not CLS-compliant.</span></span> <span data-ttu-id="87a43-862">符合的替代方法是 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-862">The compliant alternative is <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="87a43-863">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-863">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-864">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-864">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-865">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-865">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-866">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CUInt`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-866">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUInt` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-867">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-867">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="87a43-868">此操作定义的收缩转换，因为它可能会引发<xref:System.OverflowException>如果在运行时<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.UInt32>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-868">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span> <span data-ttu-id="87a43-869">没有在随后出现的精度不会丢失<xref:System.UInt32>值转换是否成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-869">There is no loss of precision in the resulting <xref:System.UInt32> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="87a43-870">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.UInt32>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-870">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt32> values.</span></span> <span data-ttu-id="87a43-871">它还处理<xref:System.OverflowException>因为引发<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.UInt32>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-871">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#10)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#10)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-872"><paramref name="value" /> 小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-872"><paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" /> or is greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-873">要转换为 64 位无符号整数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-873">The value to convert to an unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="87a43-874">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 64 位无符号整数值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-874">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 64-bit integer value.</span></span>  
  
<span data-ttu-id="87a43-875">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="87a43-875">This API is not CLS-compliant.</span></span> <span data-ttu-id="87a43-876">符合的替代方法是 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-876">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="87a43-877">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-877">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-878">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-878">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-879">语言编译器不会自动执行此转换，因为它会导致数据丢失。</span><span class="sxs-lookup"><span data-stu-id="87a43-879">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="87a43-880">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`或`CULng`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-880">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CULng` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-881">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-881">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="87a43-882">此操作定义的收缩转换，因为它可能会引发<xref:System.OverflowException>如果在运行时<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.UInt64>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-882">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span> <span data-ttu-id="87a43-883">没有在随后出现的精度不会丢失<xref:System.UInt64>值转换是否成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-883">There is no loss of precision in the resulting <xref:System.UInt64> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="87a43-884">下面的示例演示的转换<xref:System.Numerics.BigInteger>到<xref:System.UInt64>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-884">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt64> values.</span></span> <span data-ttu-id="87a43-885">它还处理<xref:System.OverflowException>因为引发<xref:System.Numerics.BigInteger>值的范围超出了<xref:System.UInt64>数据类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-885">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#11)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#11)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-886"><paramref name="value" /> 小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-886"><paramref name="value" /> is less than <see cref="F:System.UInt64.MinValue" /> or is greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Single) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(float value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : single -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-887">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-887">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-888">定义从 <see cref="T:System.Single" /> 值到 <see cref="T:System.Numerics.BigInteger" /> 值的显式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-888">Defines an explicit conversion of a <see cref="T:System.Single" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-889">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-889">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-890">小数部分`value`在转换前截断参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-890">Any fractional part of the `value` parameter is truncated before conversion.</span></span>
 
 <span data-ttu-id="87a43-891">重载<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定义的类型，向其或从其<xref:System.Numerics.BigInteger>可转换对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-891">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="87a43-892">因为从转换<xref:System.Single>到<xref:System.Numerics.BigInteger>截断小数部分可能涉及到`value`，语言编译器不会自动执行此转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-892">Because the conversion from <xref:System.Single> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="87a43-893">相反，他们才 （在 C#) 强制转换运算符或转换函数执行转换 (如`CType`在 Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-893">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="87a43-894">否则，它们显示编译器错误。</span><span class="sxs-lookup"><span data-stu-id="87a43-894">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="87a43-895">对于不支持自定义的运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-895">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="87a43-896">以下示例将转换的数组中的各个元素<xref:System.Single>值到<xref:System.Numerics.BigInteger>对象，并显示每个转换的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-896">The following example converts the individual elements in an array of <xref:System.Single> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="87a43-897">请注意任何小数部分的一部分<xref:System.Single>在转换期间截断的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-897">Note that any fractional part of a <xref:System.Single> value is truncated during the conversion.</span></span>
 
 [!code-csharp[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#3)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#3)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="87a43-898"><paramref name="value" /> 为 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-898"><paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-899">返回一个值，该值指示指定的值是否大于另一个指定的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-899">Returns a value that indicates whether a specified value is greater than another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-900">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-900">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-901">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-901">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-902">返回一个值，该值指示 64 位带符号整数是否大于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-902">Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-903">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-903"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-904"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定义的大于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-904">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-905">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-905">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]
 [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  
  
 <span data-ttu-id="87a43-906">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>改为实例方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-906">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span> <span data-ttu-id="87a43-907">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-907">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  
  
 <span data-ttu-id="87a43-908">如果`left`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-908">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-909">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-909">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-910">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-910">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-911">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-911">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-912">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 是否大于 64 位带符号整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-912">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> is greater than a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="87a43-913">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-913"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-914"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定义的大于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-914">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-915">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-915">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]
 [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  
  
 <span data-ttu-id="87a43-916">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-916">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-917">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-917">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  
  
 <span data-ttu-id="87a43-918">如果`right`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-918">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-919">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-919">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-920">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-920">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-921">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-921">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-922">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-922">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-923">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-923"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-924"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定义的大于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-924">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-925">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-925">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]
 [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  
  
 <span data-ttu-id="87a43-926">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-926">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-927">它们还可以调用<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-927">They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  
  
 <span data-ttu-id="87a43-928">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-928">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-929">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-929">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-930">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-930">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-931">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-931">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="87a43-932">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-932"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-933"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定义的大于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-933">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-934">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-934">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]
 [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  
  
 <span data-ttu-id="87a43-935">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-935">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-936">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-936">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-937">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-937">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-938">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-938">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-939">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-939">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="87a43-940">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-940"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-941"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定义的大于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-941">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-942">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-942">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]
 [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  
  
 <span data-ttu-id="87a43-943">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-943">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-944">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-944">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-945">返回一个值，该值指示指定的值是否大于等于另一个指定的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-945">Returns a value that indicates whether a specified value is greater than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-946">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-946">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-947">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-947">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-948">返回一个值，该值指示 64 位带符号整数是否大于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-948">Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-949">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-949"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-950"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法定义大于或等于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-950">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-951">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-951">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]
 [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  
  
 <span data-ttu-id="87a43-952">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-952">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-953">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-953">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  
  
 <span data-ttu-id="87a43-954">如果`left`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-954">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-955">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-955">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-956">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-956">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-957">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-957">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-958">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于等于 64 位带符号整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-958">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="87a43-959">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-959"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-960"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法定义大于或等于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-960">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-961">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-961">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]
 [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  
  
 <span data-ttu-id="87a43-962">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-962">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-963">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-963">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  
  
 <span data-ttu-id="87a43-964">如果`right`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-964">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-965">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-965">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-966">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-966">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-967">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-967">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-968">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于等于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-968">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-969">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-969"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-970"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法定义大于或等于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-970">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-971">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-971">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]
 [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  
  
 <span data-ttu-id="87a43-972">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-972">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-973">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-973">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  
  
 <span data-ttu-id="87a43-974">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-974">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-975">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-975">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-976">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-976">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-977">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于等于 64 位无符号整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-977">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit unsigned integer value.</span></span></summary>
        <returns><span data-ttu-id="87a43-978">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-978"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-979"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法定义大于或等于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-979">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-980">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-980">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]
 [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  
  
 <span data-ttu-id="87a43-981">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-981">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-982">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-982">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  
  
 <span data-ttu-id="87a43-983">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-983">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-984">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-984">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-985">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-985">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-986">返回一个值，该值指示 64 位无符号整数是否大于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-986">Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-987">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-987"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-988"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法定义大于或等于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-988">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-989">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-989">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]
 [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  
  
 <span data-ttu-id="87a43-990">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-990">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-991">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-991">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  
  
 <span data-ttu-id="87a43-992">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-992">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-993">定义 <see cref="T:System.Numerics.BigInteger" /> 对象与其他类型之间的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-993">Defines an implicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-994">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-994">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-995">定义从无符号字节到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-995">Defines an implicit conversion of an unsigned byte to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-996">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-996">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-997">小数部分`value`在转换前截断参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-997">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="87a43-998">对于不支持隐式运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-998">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="87a43-999">重载<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法定义的类型，或从该编译器可自动转换到<xref:System.Numerics.BigInteger>而无需使用显式强制转换运算符 （在 C#) 或调用转换函数 （在 Visual Basic 中) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-999">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="87a43-1000">它们扩大转换，不会丢失数据，不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1000">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-1001">此重载使编译器能够处理从转换<xref:System.Byte>值设为<xref:System.Numerics.BigInteger>值，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1001">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(short value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1002">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1002">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1003">定义从 16 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-1003">Defines an implicit conversion of a signed 16-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1004">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1004">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1005">对于不支持隐式运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1005">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="87a43-1006">重载<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法定义的类型，或从该编译器可自动转换到<xref:System.Numerics.BigInteger>而无需使用显式强制转换运算符 （在 C#) 或调用转换函数 （在 Visual Basic 中) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1006">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="87a43-1007">它们扩大转换，不会丢失数据，不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1007">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-1008">此重载使编译器能够处理从转换<xref:System.Int16>值设为<xref:System.Numerics.BigInteger>值，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1008">This overload lets the compiler handle conversions from a <xref:System.Int16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#2)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(int value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1009">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1009">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1010">定义从 32 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-1010">Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1011">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1011">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1012">对于不支持隐式运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1012">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="87a43-1013">重载<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法定义的类型，或从该编译器可自动转换到<xref:System.Numerics.BigInteger>而无需使用显式强制转换运算符 （在 C#) 或调用转换函数 （在 Visual Basic 中) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1013">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="87a43-1014">它们扩大转换，不会丢失数据，不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1014">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-1015">此重载使编译器能够处理从转换<xref:System.Int32>值设为<xref:System.Numerics.BigInteger>值，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1015">This overload lets the compiler handle conversions from a <xref:System.Int32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(long value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1016">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1016">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1017">定义从 64 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-1017">Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1018">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1018">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1019">对于不支持隐式运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1019">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>.</span></span>   
 
 <span data-ttu-id="87a43-1020">重载<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法定义的类型，或从该编译器可自动转换到<xref:System.Numerics.BigInteger>而无需使用显式强制转换运算符 （在 C#) 或调用转换函数 （在 Visual Basic 中) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1020">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="87a43-1021">它们扩大转换，不会丢失数据，不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1021">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-1022">此重载使编译器能够处理从转换<xref:System.Int64>值设为<xref:System.Numerics.BigInteger>值，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1022">This overload lets the compiler handle conversions from a <xref:System.Int64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1023">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1023">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1024">定义从 8 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-1024">Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="87a43-1025">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="87a43-1025">This API is not CLS-compliant.</span></span> <span data-ttu-id="87a43-1026">符合的替代方法是 <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1026">The compliant alternative is <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</span></span></summary>
        <returns><span data-ttu-id="87a43-1027">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1027">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1028">对于不支持隐式运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1028">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="87a43-1029">重载<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法定义的类型，或从该编译器可自动转换到<xref:System.Numerics.BigInteger>而无需使用显式强制转换运算符 （在 C#) 或调用转换函数 （在 Visual Basic 中) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1029">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="87a43-1030">它们扩大转换，不会丢失数据，不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1030">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-1031">此重载使编译器能够处理从转换<xref:System.SByte>值设为<xref:System.Numerics.BigInteger>值，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1031">This overload lets the compiler handle conversions from a <xref:System.SByte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#5)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1032">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1032">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1033">定义从 16 位无符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-1033">Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="87a43-1034">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="87a43-1034">This API is not CLS-compliant.</span></span> <span data-ttu-id="87a43-1035">符合的替代方法是 <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1035">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="87a43-1036">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1036">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1037">对于不支持隐式运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1037">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="87a43-1038">重载<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法定义的类型，或从该编译器可自动转换到<xref:System.Numerics.BigInteger>而无需使用显式强制转换运算符 （在 C#) 或调用转换函数 （在 Visual Basic 中) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1038">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="87a43-1039">它们扩大转换，不会丢失数据，不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1039">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-1040">此重载使编译器能够处理从转换<xref:System.UInt16>值设为<xref:System.Numerics.BigInteger>值，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1040">This overload lets the compiler handle conversions from a <xref:System.UInt16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#6)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1041">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1041">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1042">定义从 32 位无符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-1042">Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="87a43-1043">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="87a43-1043">This API is not CLS-compliant.</span></span> <span data-ttu-id="87a43-1044">符合的替代方法是 <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1044">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="87a43-1045">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1045">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1046">对于不支持隐式运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1046">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="87a43-1047">重载<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法定义的类型，或从该编译器可自动转换到<xref:System.Numerics.BigInteger>而无需使用显式强制转换运算符 （在 C#) 或调用转换函数 （在 Visual Basic 中) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1047">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="87a43-1048">它们扩大转换，不会丢失数据，不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1048">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-1049">此重载使编译器能够处理从转换<xref:System.UInt32>值设为<xref:System.Numerics.BigInteger>值，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1049">This overload lets the compiler handle conversions from a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#7)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1050">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1050">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1051">定义从 64 位无符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="87a43-1051">Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="87a43-1052">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="87a43-1052">This API is not CLS-compliant.</span></span> <span data-ttu-id="87a43-1053">符合的替代方法是 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1053">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="87a43-1054">包含 <paramref name="value" /> 参数值的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1054">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1055">对于不支持隐式运算符的语言的替代方法是<xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1055">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="87a43-1056">重载<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法定义的类型，或从该编译器可自动转换到<xref:System.Numerics.BigInteger>而无需使用显式强制转换运算符 （在 C#) 或调用转换函数 （在 Visual Basic 中) 的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1056">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="87a43-1057">它们扩大转换，不会丢失数据，不会引发<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1057">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="87a43-1058">此重载使编译器能够处理从转换<xref:System.UInt64>值设为<xref:System.Numerics.BigInteger>值，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1058">This overload lets the compiler handle conversions from a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#8)]   

 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ++ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Increment(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Increment (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ++(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Increment : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Increment value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1059">要递增的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1059">The value to increment.</span></span></param>
        <summary><span data-ttu-id="87a43-1060">将 <see cref="T:System.Numerics.BigInteger" /> 值加 1。</span><span class="sxs-lookup"><span data-stu-id="87a43-1060">Increments a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="87a43-1061"><paramref name="value" /> 参数加 1 后的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1061">The value of the <paramref name="value" /> parameter incremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1062"><xref:System.Numerics.BigInteger.op_Increment%2A>方法定义的递增操作<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1062">The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1063">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1063">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  
  
 <span data-ttu-id="87a43-1064">缺少递增运算符或不支持运算符重载的某些语言 （如 Visual Basic 中) 可以调用<xref:System.Numerics.BigInteger.op_Increment%2A>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1064">Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  
  
 <span data-ttu-id="87a43-1065">因为<xref:System.Numerics.BigInteger>对象是不可变，<xref:System.Numerics.BigInteger.op_Increment%2A>运算符创建一个新<xref:System.Numerics.BigInteger>对象，其值是一个多个<xref:System.Numerics.BigInteger>所表示对象`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1065">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="87a43-1066">因此，重复调用<xref:System.Numerics.BigInteger.op_Increment%2A>可能开销很大。</span><span class="sxs-lookup"><span data-stu-id="87a43-1066">Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="87a43-1067">此运算符的等效方法是<xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1067">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-1068">返回一个值，该值指示两个数值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-1068">Returns a value that indicates whether two numeric values are not equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : int64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1069">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1069">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1070">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1070">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1071">返回一个值，该值指示 64 位带符号整数与 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-1071">Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns><span data-ttu-id="87a43-1072">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1072"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1073"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定义为不等运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1073">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1074">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1074">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]
 [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  
  
 <span data-ttu-id="87a43-1075">不支持自定义的运算符的语言可以使用以下方法之一测试不相等：</span><span class="sxs-lookup"><span data-stu-id="87a43-1075">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="87a43-1076">调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>实例方法，指示之间的关系<xref:System.Numerics.BigInteger>和带符号长整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1076">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="87a43-1077">调用<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>实例方法和反转其值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1077">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method and reversing its value.</span></span>  
  
 <span data-ttu-id="87a43-1078">如果`left`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-1078">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * int64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1079">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1079">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1080">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1080">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1081">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与 64 位带符号整数是否不相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-1081">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit signed integer are not equal.</span></span></summary>
        <returns><span data-ttu-id="87a43-1082">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1082"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1083"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定义为不等运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1083">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1084">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1084">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]
 [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  
  
 <span data-ttu-id="87a43-1085">不支持自定义的运算符的语言可以使用以下方法之一测试不相等：</span><span class="sxs-lookup"><span data-stu-id="87a43-1085">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="87a43-1086">调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法，它指示之间的关系<xref:System.Numerics.BigInteger>和带符号长整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1086">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="87a43-1087">调用<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>方法，并反转其值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1087">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="87a43-1088">如果`right`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-1088">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-1089">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1089">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1090">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1090">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1091">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1091">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1092">返回一个值，该值指示两个 <see cref="T:System.Numerics.BigInteger" /> 对象是否具有不同的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1092">Returns a value that indicates whether two <see cref="T:System.Numerics.BigInteger" /> objects have different values.</span></span></summary>
        <returns><span data-ttu-id="87a43-1093">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1093"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1094"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定义为不等运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1094">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1095">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1095">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]
 [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  
  
 <span data-ttu-id="87a43-1096">不支持自定义的运算符的语言可以使用以下方法之一测试不相等：</span><span class="sxs-lookup"><span data-stu-id="87a43-1096">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="87a43-1097">调用<xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType>方法，指示两个之间的关系<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1097">Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.</span></span>  
  
-   <span data-ttu-id="87a43-1098">调用<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法，并反转其值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1098">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="87a43-1099">此运算符的等效方法是<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1099">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1100">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1100">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1101">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1101">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1102">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与 64 位无符号整数是否不相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-1102">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit unsigned integer are not equal.</span></span></summary>
        <returns><span data-ttu-id="87a43-1103">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1103"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1104"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定义为不等运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1104">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1105">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1105">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]
 [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  
  
 <span data-ttu-id="87a43-1106">不支持自定义的运算符的语言可以使用以下方法之一测试不相等：</span><span class="sxs-lookup"><span data-stu-id="87a43-1106">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="87a43-1107">调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法，它指示之间的关系<xref:System.Numerics.BigInteger>和无符号长整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1107">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="87a43-1108">调用<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>方法，并反转其值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1108">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1109">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1109">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1110">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1110">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1111">返回一个值，该值指示 64 位无符号整数与 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="87a43-1111">Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns><span data-ttu-id="87a43-1112">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1112"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1113"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定义为不等运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1113">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1114">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1114">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]
 [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  
  
 <span data-ttu-id="87a43-1115">不支持自定义的运算符的语言可以使用以下方法之一测试不相等：</span><span class="sxs-lookup"><span data-stu-id="87a43-1115">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="87a43-1116">调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法，它指示之间的关系<xref:System.Numerics.BigInteger>和无符号长整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1116">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="87a43-1117">调用<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>方法，并反转其值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1117">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_LeftShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &lt;&lt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_LeftShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;&lt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &lt;&lt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &lt;&lt;&lt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &lt;&lt;&lt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1118">要移动其位的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1118">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="87a43-1119">将 <paramref name="value" /> 向左移动的位数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1119">The number of bits to shift <paramref name="value" /> to the left.</span></span></param>
        <summary><span data-ttu-id="87a43-1120">将 <see cref="T:System.Numerics.BigInteger" /> 值向左移动指定的位数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1120">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the left.</span></span></summary>
        <returns><span data-ttu-id="87a43-1121">一个已向左移动指定位数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1121">A value that has been shifted to the left by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1122"><xref:System.Numerics.BigInteger.op_LeftShift%2A>方法定义的按位左移运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1122">The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1123">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1123">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]
 [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  
  
> [!NOTE]
>  <span data-ttu-id="87a43-1124">与按位左移运算整数基元<xref:System.Numerics.BigInteger.op_LeftShift%2A>方法将保留原始的符号<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1124">Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="87a43-1125">不支持自定义的运算符的语言可以执行按位左移运算相乘`value`通过`BigInteger.Pow(2, shift)`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1125">Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`.</span></span> <span data-ttu-id="87a43-1126">下面的示例演示的结果与使用此运算符的结果相同。</span><span class="sxs-lookup"><span data-stu-id="87a43-1126">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]
 [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-1127">返回一个值，该值指示指定的值是否小于另一个指定的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1127">Returns a value that indicates whether a specified value is less than a second specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1128">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1128">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1129">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1129">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1130">返回一个值，该值指示 64 位带符号整数是否小于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1130">Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1131">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1131"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1132"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法定义的小于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1132">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1133">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1133">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]
 [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  
  
 <span data-ttu-id="87a43-1134">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1134">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-1135">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1135">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  
  
 <span data-ttu-id="87a43-1136">如果`left`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-1136">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-1137">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1137">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1138">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1138">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1139">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1139">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1140">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于 64 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1140">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="87a43-1141">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1141"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1142"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法定义的小于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1142">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1143">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1143">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]
 [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  
  
 <span data-ttu-id="87a43-1144">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1144">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-1145">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1145">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  
  
 <span data-ttu-id="87a43-1146">如果`right`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-1146">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-1147">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1147">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1148">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1148">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1149">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1149">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1150">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1150">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1151">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1151"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1152"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法定义的小于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1152">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1153">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1153">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]
 [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  
  
 <span data-ttu-id="87a43-1154">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1154">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-1155">此外可以调用某些语言<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1155">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  
  
 <span data-ttu-id="87a43-1156">此运算符的等效方法是<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1156">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1157">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1157">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1158">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1158">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1159">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1159">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="87a43-1160">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1160"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1161"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法定义的小于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1161">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1162">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1162">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]
 [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  
  
 <span data-ttu-id="87a43-1163">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1163">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-1164">它们还可以调用<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1164">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  
  
 <span data-ttu-id="87a43-1165">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1165">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1166">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1166">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1167">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1167">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1168">返回一个值，该值指示 64 位无符号整数是否小于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1168">Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1169">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1169"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1170"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法定义的小于运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1170">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1171">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1171">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]
 [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  
  
 <span data-ttu-id="87a43-1172">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1172">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-1173">它们还可以调用<xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1173">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  
  
 <span data-ttu-id="87a43-1174">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1174">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-1175">返回一个值，该值指示指定的值是否小于等于另一个指定的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1175">Returns a value that indicates whether a specified value is less than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1176">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1176">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1177">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1177">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1178">返回一个值，该值指示 64 位带符号整数是否小于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1178">Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1179">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1179"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1180"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定义的操作的运算符的小于或等于<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1180">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1181">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1181">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]
 [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  
  
 <span data-ttu-id="87a43-1182">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1182">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-1183">它们还可以调用<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1183">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  
  
 <span data-ttu-id="87a43-1184">如果`left`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-1184">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-1185">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1185">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1186">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1186">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1187">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1187">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1188">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于等于 64 位带符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1188">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="87a43-1189">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1189"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1190"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定义的操作的运算符的小于或等于<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1190">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1191">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1191">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]
 [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  
  
 <span data-ttu-id="87a43-1192">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1192">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-1193">它们还可以调用<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1193">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  
  
 <span data-ttu-id="87a43-1194">如果`right`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或者<xref:System.UInt32>值，它将隐式转换为<xref:System.Int64>值时执行该操作。</span><span class="sxs-lookup"><span data-stu-id="87a43-1194">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="87a43-1195">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1195">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1196">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1196">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1197">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1197">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1198">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于等于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1198">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1199">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1199"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1200"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定义的操作的运算符的小于或等于<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1200">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1201">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1201">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]
 [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  
  
 <span data-ttu-id="87a43-1202">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Compare%2A>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1202">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead.</span></span> <span data-ttu-id="87a43-1203">它们还可以调用<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1203">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  
  
 <span data-ttu-id="87a43-1204">此运算符的等效方法是<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1204">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1205">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1205">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1206">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1206">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1207">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于等于 64 位无符号整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1207">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="87a43-1208">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1208"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1209"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定义的操作的运算符的小于或等于<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1209">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1210">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1210">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]
 [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  
  
 <span data-ttu-id="87a43-1211">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1211">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-1212">它们还可以调用<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1212">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  
  
 <span data-ttu-id="87a43-1213">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1213">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1214">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1214">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1215">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1215">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="87a43-1216">返回一个值，该值指示 64 位无符号整数是否小于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1216">Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1217">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1217"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1218"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定义的操作的运算符的小于或等于<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1218">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1219">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1219">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]
 [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  
  
 <span data-ttu-id="87a43-1220">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1220">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="87a43-1221">它们还可以调用<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法直接，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1221">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  
  
 <span data-ttu-id="87a43-1222">此运算符的等效方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1222">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator % (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Modulus(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Mod (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator %(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( % ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend % divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="87a43-1223">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1223">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="87a43-1224">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1224">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="87a43-1225">返回两个指定 <see cref="T:System.Numerics.BigInteger" /> 值相除所得的余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1225">Returns the remainder that results from division with two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="87a43-1226">相除所得的余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1226">The remainder that results from the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1227"><xref:System.Numerics.BigInteger.op_Modulus%2A>方法定义的取模运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1227">The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1228">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1228">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]
 [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  
  
 <span data-ttu-id="87a43-1229">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1229">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="87a43-1230">取模运算返回的值的符号取决于的符号`dividend`:如果`dividend`为正，取模运算返回出正结果; 如果它为负，取模运算返回负数的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-1230">The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result.</span></span> <span data-ttu-id="87a43-1231">使用取模运算的行为<xref:System.Numerics.BigInteger>值等同于与其他整数类型取模运算。</span><span class="sxs-lookup"><span data-stu-id="87a43-1231">The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.</span></span>  
  
 <span data-ttu-id="87a43-1232">此运算符的等效方法是<xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1232">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="87a43-1233"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1233"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator * (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator *(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1234">要相乘的第一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1234">The first value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1235">要相乘的第二个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1235">The second value to multiply.</span></span></param>
        <summary><span data-ttu-id="87a43-1236">两个指定的 <see cref="T:System.Numerics.BigInteger" /> 值相乘。</span><span class="sxs-lookup"><span data-stu-id="87a43-1236">Multiplies two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="87a43-1237"><paramref name="left" /> 与 <paramref name="right" /> 的乘积。</span><span class="sxs-lookup"><span data-stu-id="87a43-1237">The product of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1238"><xref:System.Numerics.BigInteger.op_Multiply%2A>方法定义的乘法运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1238">The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1239">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1239">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]
 [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  
  
 <span data-ttu-id="87a43-1240">此运算符的等效方法是<xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1240">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ~ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_OnesComplement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Not (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ~(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_OnesComplement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_OnesComplement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1241">一个整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1241">An integer value.</span></span></param>
        <summary><span data-ttu-id="87a43-1242">返回 <see cref="T:System.Numerics.BigInteger" /> 值的按位二进制反码。</span><span class="sxs-lookup"><span data-stu-id="87a43-1242">Returns the bitwise one's complement of a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1243"><paramref name="value" /> 的按位二进制反码。</span><span class="sxs-lookup"><span data-stu-id="87a43-1243">The bitwise one's complement of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1244"><xref:System.Numerics.BigInteger.op_OnesComplement%2A>方法定义的按位运算的二进制反码运算符为<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1244">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1245">按位的二进制反码运算符反转中的每个位的数字值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1245">The bitwise one's complement operator reverses each bit in a numeric value.</span></span> <span data-ttu-id="87a43-1246">即中的位将`value`的 0 设置为 1，在结果中，并为 1 的位将设置为 0 的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-1246">That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result.</span></span> <span data-ttu-id="87a43-1247"><xref:System.Numerics.BigInteger.op_OnesComplement%2A>方法使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1247">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  
  
 <span data-ttu-id="87a43-1248">不支持自定义的运算符的语言可能能够调用<xref:System.Numerics.BigInteger.op_OnesComplement%2A>直接方法的执行按位二进制反码运算。</span><span class="sxs-lookup"><span data-stu-id="87a43-1248">Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation.</span></span> <span data-ttu-id="87a43-1249">例如:</span><span class="sxs-lookup"><span data-stu-id="87a43-1249">For example:</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_RightShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &gt;&gt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_RightShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;&gt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &gt;&gt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &gt;&gt;&gt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &gt;&gt;&gt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1250">要移动其位的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1250">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="87a43-1251">将 <paramref name="value" /> 向右移动的位数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1251">The number of bits to shift <paramref name="value" /> to the right.</span></span></param>
        <summary><span data-ttu-id="87a43-1252">将 <see cref="T:System.Numerics.BigInteger" /> 值向右移动指定的位数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1252">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the right.</span></span></summary>
        <returns><span data-ttu-id="87a43-1253">一个已向右移动指定位数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1253">A value that has been shifted to the right by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1254"><xref:System.Numerics.BigInteger.op_RightShift%2A>方法定义的按位右移运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1254">The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1255">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1255">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]
 [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  
  
 <span data-ttu-id="87a43-1256">不支持自定义的运算符的语言可以执行按位右移运算除以`value`由`BigInteger.Pow(2, shift)`减去 1 次`shift`对于负值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1256">Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values.</span></span> <span data-ttu-id="87a43-1257">下面的示例演示的结果与使用此运算符的结果相同。</span><span class="sxs-lookup"><span data-stu-id="87a43-1257">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]
 [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  
  
 <span data-ttu-id="87a43-1258">如果`shift`大于或等于一个正的位数<xref:System.Numerics.BigInteger>值，右移位运算的结果是<xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1258">If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="87a43-1259">如果`shift`大于为负的最大位数<xref:System.Numerics.BigInteger>值，右移位运算的结果是<xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1259">If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Subtraction(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1260">要从中减去的值（被减数）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1260">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1261">要减去的值（减数）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1261">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="87a43-1262">从另一个 <see cref="T:System.Numerics.BigInteger" /> 值中减去 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1262">Subtracts a <see cref="T:System.Numerics.BigInteger" /> value from another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1263"><paramref name="right" /> 减 <paramref name="left" /> 所得的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-1263">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1264"><xref:System.Numerics.BigInteger.op_Subtraction%2A>方法定义的减法运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1264">The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1265">它使代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1265">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]
 [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  
  
 <span data-ttu-id="87a43-1266">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1266">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="87a43-1267">此运算符的等效方法是<xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1267">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryNegation(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1268">要求反的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1268">The value to negate.</span></span></param>
        <summary><span data-ttu-id="87a43-1269">对指定的 BigInteger 值求反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1269">Negates a specified BigInteger value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1270"><paramref name="value" /> 参数乘以负一 (-1) 的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-1270">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1271"><xref:System.Numerics.BigInteger.op_UnaryNegation%2A>方法的定义的一元求反运算符 （或相反运算符） 的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1271">The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1272">该操作生成一个值，会导致在 0 （零） 时将其添加到原始编号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1272">The operation produces a value that results in 0 (zero) when it is added to the original number.</span></span> <span data-ttu-id="87a43-1273">不支持自定义的运算符的语言可以调用<xref:System.Numerics.BigInteger.Negate%2A>方法相反。</span><span class="sxs-lookup"><span data-stu-id="87a43-1273">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="87a43-1274">此运算符的等效方法是 <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="87a43-1274">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="87a43-1275">下面的示例演示三种不同的方式进行求反运算的值<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1275">The following example illustrates three different ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryPlus(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~+ ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="+ value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1276">一个整数值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1276">An integer value.</span></span></param>
        <summary><span data-ttu-id="87a43-1277">返回 <see cref="T:System.Numerics.BigInteger" /> 操作数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1277">Returns the value of the <see cref="T:System.Numerics.BigInteger" /> operand.</span></span> <span data-ttu-id="87a43-1278">（操作数的符号不变。）</span><span class="sxs-lookup"><span data-stu-id="87a43-1278">(The sign of the operand is unchanged.)</span></span></summary>
        <returns><span data-ttu-id="87a43-1279"><paramref name="value" /> 操作数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1279">The value of the <paramref name="value" /> operand.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1280"><xref:System.Numerics.BigInteger.op_UnaryPlus%2A>方法定义的一元正运算符的运算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1280">The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-1281">将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1281">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1282">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="87a43-1282">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="87a43-1283">将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1283">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="87a43-1284">一个值，等于 <paramref name="value" /> 参数中指定的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1284">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1285">`value`参数应为以下形式的数字的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1285">The `value` parameter should be the string representation of a number in the following form.</span></span>  
  
 <span data-ttu-id="87a43-1286">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="87a43-1286">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="87a43-1287">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="87a43-1287">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="87a43-1288">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="87a43-1288">The following table describes each element.</span></span>  
  
|<span data-ttu-id="87a43-1289">元素</span><span class="sxs-lookup"><span data-stu-id="87a43-1289">Element</span></span>|<span data-ttu-id="87a43-1290">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-1290">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="87a43-1291">*ws*</span><span class="sxs-lookup"><span data-stu-id="87a43-1291">*ws*</span></span>|<span data-ttu-id="87a43-1292">可选的空白区域。</span><span class="sxs-lookup"><span data-stu-id="87a43-1292">Optional white space.</span></span>|  
|<span data-ttu-id="87a43-1293">*sign*</span><span class="sxs-lookup"><span data-stu-id="87a43-1293">*sign*</span></span>|<span data-ttu-id="87a43-1294">一个可选符号后。</span><span class="sxs-lookup"><span data-stu-id="87a43-1294">An optional sign.</span></span> <span data-ttu-id="87a43-1295">有效的符号字符由<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>和<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>当前区域性的属性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1295">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="87a43-1296">*digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1296">*digits*</span></span>|<span data-ttu-id="87a43-1297">范围从 0 到 9 的数字的序列。</span><span class="sxs-lookup"><span data-stu-id="87a43-1297">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="87a43-1298">将忽略任何前导零。</span><span class="sxs-lookup"><span data-stu-id="87a43-1298">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="87a43-1299">指定的字符串`value`参数解释使用<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>样式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1299">The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="87a43-1300">不能包含任何组分隔符或小数分隔符，而且不能包含小数部分。</span><span class="sxs-lookup"><span data-stu-id="87a43-1300">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="87a43-1301">`value`通过使用中的格式设置信息分析参数<xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType>对象，将初始化为当前系统区域性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1301">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> object that is initialized for the current system culture.</span></span> <span data-ttu-id="87a43-1302">有关详情，请参阅<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1302">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="87a43-1303">若要使用特定区域性的格式设置信息分析一个字符串，请使用<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1303">To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87a43-1304">如果您使用<xref:System.Numerics.BigInteger.Parse%2A>往返的字符串表示形式的方法的<xref:System.Numerics.BigInteger>输出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，则应使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>方法使用"R"格式说明符生成的字符串表示形式<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1304">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="87a43-1305">否则为的字符串表示形式<xref:System.Numerics.BigInteger>50，最高有效位的原始值和数据可能会丢失，当您使用仅保留<xref:System.Numerics.BigInteger.Parse%2A>方法来还原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1305">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1306">下面的示例使用<xref:System.Numerics.BigInteger.Parse%28System.String%29>方法来实例化两个<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1306">The following example uses the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="87a43-1307">它将乘以另一个数的每个对象，然后调用<xref:System.Numerics.BigInteger.Compare%2A>方法来确定两个值之间的关系。</span><span class="sxs-lookup"><span data-stu-id="87a43-1307">It multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87a43-1308"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1308"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="87a43-1309"><paramref name="value" /> 的格式不正确。</span><span class="sxs-lookup"><span data-stu-id="87a43-1309"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1310">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="87a43-1310">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="87a43-1311">枚举值的按位组合，这些枚举值指定 <paramref name="value" /> 所允许的格式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1311">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1312">将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1312">Converts the string representation of a number in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="87a43-1313">一个值，等于 <paramref name="value" /> 参数中指定的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1313">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1314">`style`参数定义中允许的样式元素 （如空格、 正或负号符号、 组分隔符符号或十进制点符号）`value`分析操作成功的参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1314">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="87a43-1315">`styles` 必须是中的位标志的组合<xref:System.Globalization.NumberStyles>枚举。</span><span class="sxs-lookup"><span data-stu-id="87a43-1315">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="87a43-1316">`style`参数将使得此方法重载非常有用`value`包含十六进制值的字符串表示形式时数系 （十进制或十六进制） 由`value`仅在运行时，已知时，或者当你想要禁止的空白区域或正负符号`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1316">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="87a43-1317">具体取决于值`style`，则`value`参数可能包含以下元素：</span><span class="sxs-lookup"><span data-stu-id="87a43-1317">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="87a43-1318">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="87a43-1318">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="87a43-1319">如果`style`包括<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>，则`value`参数可能包含下列元素：</span><span class="sxs-lookup"><span data-stu-id="87a43-1319">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may contain the following elements:</span></span>  
  
 <span data-ttu-id="87a43-1320">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="87a43-1320">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="87a43-1321">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="87a43-1321">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="87a43-1322">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="87a43-1322">The following table describes each element.</span></span>  
  
|<span data-ttu-id="87a43-1323">元素</span><span class="sxs-lookup"><span data-stu-id="87a43-1323">Element</span></span>|<span data-ttu-id="87a43-1324">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-1324">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="87a43-1325">*ws*</span><span class="sxs-lookup"><span data-stu-id="87a43-1325">*ws*</span></span>|<span data-ttu-id="87a43-1326">可选的空白区域。</span><span class="sxs-lookup"><span data-stu-id="87a43-1326">Optional white space.</span></span> <span data-ttu-id="87a43-1327">空白可以出现在开头`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>标志，它可以出现在末尾`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1327">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="87a43-1328">特定于区域性的货币符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1328">A culture-specific currency symbol.</span></span> <span data-ttu-id="87a43-1329">在字符串中的位置由<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>和<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>当前区域性的属性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1329">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="87a43-1330">当前区域性的货币符号可以出现在`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1330">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1331">*sign*</span><span class="sxs-lookup"><span data-stu-id="87a43-1331">*sign*</span></span>|<span data-ttu-id="87a43-1332">一个可选符号后。</span><span class="sxs-lookup"><span data-stu-id="87a43-1332">An optional sign.</span></span> <span data-ttu-id="87a43-1333">符号可以显示在开头`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>标志，它可以出现在末尾`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1333">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="87a43-1334">可以在使用括号`value`指示负值`style`包括<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1334">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1335">*digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1335">*digits*</span></span><br /><br /> <span data-ttu-id="87a43-1336">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1336">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="87a43-1337">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1337">*exponential_digits*</span></span>|<span data-ttu-id="87a43-1338">从 0 到 9 的数字的序列。</span><span class="sxs-lookup"><span data-stu-id="87a43-1338">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="87a43-1339">有关*fractional_digits*、 仅数字 0 是有效。</span><span class="sxs-lookup"><span data-stu-id="87a43-1339">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="87a43-1340">*，*</span><span class="sxs-lookup"><span data-stu-id="87a43-1340">*,*</span></span>|<span data-ttu-id="87a43-1341">特定于区域性的组分隔符符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1341">A culture-specific group separator symbol.</span></span> <span data-ttu-id="87a43-1342">当前区域性的组分隔符可以出现在`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1342">The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1343">*.*</span><span class="sxs-lookup"><span data-stu-id="87a43-1343">*.*</span></span>|<span data-ttu-id="87a43-1344">特定于区域性的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1344">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="87a43-1345">当前区域性的小数点符号可以出现在`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1345">The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="87a43-1346">数字 0 可以显示为分析操作成功; 一个小数数字如果*fractional_digits*包括任何其他数字<xref:System.FormatException>引发。</span><span class="sxs-lookup"><span data-stu-id="87a43-1346">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="87a43-1347">E</span><span class="sxs-lookup"><span data-stu-id="87a43-1347">E</span></span>|<span data-ttu-id="87a43-1348">"E"或者"E"字符，指示指数 （科学型） 表示法表示值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1348">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="87a43-1349">`value`参数可以表示指数表示法的数字，如果`style`包括<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1349">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1350">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1350">*hexdigits*</span></span>|<span data-ttu-id="87a43-1351">一系列十六进制数字从 0 到 f 或从 0 到 f。</span><span class="sxs-lookup"><span data-stu-id="87a43-1351">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="87a43-1352">中的任何终止 NUL (U + 0000) 字符`s`在分析操作，而不考虑的值，将忽略`style`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1352">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="87a43-1353">仅为数字的字符串 (对应于<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>样式) 总是可以分析成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-1353">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="87a43-1354">其余的大多数<xref:System.Globalization.NumberStyles>成员控件可能会显示，但不是要求是存在于输入字符串中的元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1354">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="87a43-1355">下表指示个别<xref:System.Globalization.NumberStyles>成员影响可能会出现在元素`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1355">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="87a43-1356">`NumberStyles` 值</span><span class="sxs-lookup"><span data-stu-id="87a43-1356">`NumberStyles` value</span></span>|<span data-ttu-id="87a43-1357">元素中允许使用`value`除数字之外</span><span class="sxs-lookup"><span data-stu-id="87a43-1357">Elements permitted in `value` in addition to digits</span></span>|  
|--------------------------|---------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="87a43-1358">*位数*仅元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1358">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="87a43-1359">小数点 （.） 和*小数位数*元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1359">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="87a43-1360">"E"或"E"字符，它指示指数记数法，连同*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="87a43-1360">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="87a43-1361">*Ws*元素的开头`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1361">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="87a43-1362">*Ws*结尾的元素`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1362">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="87a43-1363">*符号*元素的开头`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1363">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="87a43-1364">*符号*结尾的元素`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1364">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="87a43-1365">*登录*形式的括号内包含的数字值的元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1365">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="87a43-1366">组分隔符 （，） 元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1366">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="87a43-1367">货币 （$） 元素中。</span><span class="sxs-lookup"><span data-stu-id="87a43-1367">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="87a43-1368">所有元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1368">All elements.</span></span> <span data-ttu-id="87a43-1369">但是，`value`不能表示十六进制数或指数表示法的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1369">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="87a43-1370">*Ws*元素的开头或末尾`value`，*登录*开头处`value`，和小数点 (*。*) 符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1370">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="87a43-1371">`value`参数还可以使用指数记数法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1371">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="87a43-1372">`ws`， `sign`，组分隔符 (*，*)，和小数点 (*。*) 元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1372">The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="87a43-1373">所有元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1373">All elements.</span></span> <span data-ttu-id="87a43-1374">但是，`value`不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1374">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="87a43-1375">如果您使用<xref:System.Numerics.BigInteger.Parse%2A>往返的字符串表示形式的方法的<xref:System.Numerics.BigInteger>输出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，则应使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>方法使用"R"格式说明符生成的字符串表示形式<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1375">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="87a43-1376">否则为的字符串表示形式<xref:System.Numerics.BigInteger>50，最高有效位的原始值和数据可能会丢失，当您使用仅保留<xref:System.Numerics.BigInteger.Parse%2A>方法来还原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1376">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="87a43-1377">与其他不同<xref:System.Globalization.NumberStyles>值，该值允许，但不是需要，特定样式中的元素是否存在`value`，则<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>样式值意味着中的单个数字字符`value`始终解释为十六进制字符。</span><span class="sxs-lookup"><span data-stu-id="87a43-1377">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="87a43-1378">有效的十六进制字符是 0-9、 A-F 和 a-f。</span><span class="sxs-lookup"><span data-stu-id="87a43-1378">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="87a43-1379">其他标志只有可以结合`style`参数是<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>和<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1379">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="87a43-1380">(<xref:System.Globalization.NumberStyles>枚举包括复合数字样式<xref:System.Globalization.NumberStyles.HexNumber>，其中包含这两个空白标志。)</span><span class="sxs-lookup"><span data-stu-id="87a43-1380">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87a43-1381">如果`value`的字符串表示形式的十六进制数，它不能带有任何修饰符 (如`0x`或`&h`) 用于将其识别为十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1381">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="87a43-1382">这将导致转换失败。</span><span class="sxs-lookup"><span data-stu-id="87a43-1382">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="87a43-1383">如果`value`是一个十六进制字符串<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>方法将解释`value`作为存储使用其前两个十六进制数字是否大于或等于 2 的补数表示的负数`0x80`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1383">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="87a43-1384">换而言之，此方法将解释中的第一个字节的最高顺序位`value`用作符号位。</span><span class="sxs-lookup"><span data-stu-id="87a43-1384">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="87a43-1385">若要确保十六进制字符串正确地解释为正数中的第一个数字`value`必须具有值为零。</span><span class="sxs-lookup"><span data-stu-id="87a43-1385">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="87a43-1386">例如，此方法将解释`0x80`为负值，但它会解释任一`0x080`或`0x0080`为正值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1386">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="87a43-1387">下面的示例阐释表示负数和正数值的十六进制字符串之间的差异。</span><span class="sxs-lookup"><span data-stu-id="87a43-1387">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="87a43-1388">`value`通过使用中的格式设置信息分析参数<xref:System.Globalization.NumberFormatInfo>对象，将初始化为当前系统区域性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1388">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="87a43-1389">若要指定其格式设置信息用于分析操作的区域性，调用<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>重载。</span><span class="sxs-lookup"><span data-stu-id="87a43-1389">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1390">下面的示例演示如何调用<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>方法替换为多个可能值`style`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1390">The following example illustrates calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method with several possible values for the `style` parameter.</span></span> <span data-ttu-id="87a43-1391">它演示了如何将字符串解释为十六进制值，以及如何不允许空格和正负符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1391">It illustrates how to interpret a string as a hexadecimal value, and how to disallow spaces and sign symbols.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#5)]
 [!code-vb[System.Numeric.BigInteger.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87a43-1392"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1392"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="87a43-1393">- 或 -</span><span class="sxs-lookup"><span data-stu-id="87a43-1393">-or-</span></span> 
 <span data-ttu-id="87a43-1394"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1394"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87a43-1395"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1395"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="87a43-1396"><paramref name="value" /> 不符合由 <see cref="T:System.Globalization.NumberStyles" /> 指定的输入模式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1396"><paramref name="value" /> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1397">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="87a43-1397">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="87a43-1398">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="87a43-1398">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1399">将指定的区域性特定格式的数字字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1399">Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="87a43-1400">一个值，等于 <paramref name="value" /> 参数中指定的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1400">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1401">`value`参数应为以下形式的数字的字符串表示形式：</span><span class="sxs-lookup"><span data-stu-id="87a43-1401">The `value` parameter should be the string representation of a number in the following form:</span></span>  
  
 <span data-ttu-id="87a43-1402">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="87a43-1402">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="87a43-1403">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="87a43-1403">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="87a43-1404">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="87a43-1404">The following table describes each element.</span></span>  
  
|<span data-ttu-id="87a43-1405">元素</span><span class="sxs-lookup"><span data-stu-id="87a43-1405">Element</span></span>|<span data-ttu-id="87a43-1406">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-1406">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="87a43-1407">*ws*</span><span class="sxs-lookup"><span data-stu-id="87a43-1407">*ws*</span></span>|<span data-ttu-id="87a43-1408">可选的空白区域。</span><span class="sxs-lookup"><span data-stu-id="87a43-1408">Optional white space.</span></span>|  
|<span data-ttu-id="87a43-1409">*sign*</span><span class="sxs-lookup"><span data-stu-id="87a43-1409">*sign*</span></span>|<span data-ttu-id="87a43-1410">一个可选符号后。</span><span class="sxs-lookup"><span data-stu-id="87a43-1410">An optional sign.</span></span> <span data-ttu-id="87a43-1411">有效的符号字符由<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>并<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>的属性<xref:System.Globalization.NumberFormatInfo>返回的对象`provider`对象的<xref:System.IFormatProvider.GetFormat%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1411">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.</span></span>|  
|<span data-ttu-id="87a43-1412">*digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1412">*digits*</span></span>|<span data-ttu-id="87a43-1413">范围从 0 到 9 的数字的序列。</span><span class="sxs-lookup"><span data-stu-id="87a43-1413">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="87a43-1414">将忽略任何前导零。</span><span class="sxs-lookup"><span data-stu-id="87a43-1414">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="87a43-1415">指定的字符串`value`参数被解释使用<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>样式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1415">The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="87a43-1416">不能包含任何组分隔符或小数分隔符，而且不能包含小数部分。</span><span class="sxs-lookup"><span data-stu-id="87a43-1416">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87a43-1417">如果您使用<xref:System.Numerics.BigInteger.Parse%2A>往返的字符串表示形式的方法的<xref:System.Numerics.BigInteger>输出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，则应使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>方法使用"R"格式说明符生成的字符串表示形式<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1417">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="87a43-1418">否则为的字符串表示形式<xref:System.Numerics.BigInteger>50，最高有效位的原始值和数据可能会丢失，当您使用仅保留<xref:System.Numerics.BigInteger.Parse%2A>方法来还原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1418">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="87a43-1419">`provider`参数是<xref:System.IFormatProvider>实现其<xref:System.IFormatProvider.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>提供特定于区域性的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1419">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="87a43-1420">当<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29>调用方法时，它调用`provider`参数的<xref:System.IFormatProvider.GetFormat%2A>方法并将其传递<xref:System.Type>对象，表示<xref:System.Globalization.NumberFormatInfo>类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-1420">When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="87a43-1421"><xref:System.IFormatProvider.GetFormat%2A>方法随后返回<xref:System.Globalization.NumberFormatInfo>提供的格式有关的信息的对象`value`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1421">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter.</span></span> <span data-ttu-id="87a43-1422">有三种方法使用`provider`参数来提供到分析操作的自定义格式设置信息：</span><span class="sxs-lookup"><span data-stu-id="87a43-1422">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="87a43-1423">可以将传递<xref:System.Globalization.CultureInfo>对象，表示提供格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1423">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="87a43-1424">其<xref:System.Globalization.CultureInfo.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>提供该区域性的数字格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1424">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="87a43-1425">您可以将传递的实际<xref:System.Globalization.NumberFormatInfo>提供数字格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1425">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="87a43-1426">(其实现<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>只返回其自身。)</span><span class="sxs-lookup"><span data-stu-id="87a43-1426">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="87a43-1427">可以传递用于实现的自定义对象<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1427">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="87a43-1428">其<xref:System.IFormatProvider.GetFormat%2A>方法实例化并返回<xref:System.Globalization.NumberFormatInfo>提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1428">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="87a43-1429">如果`provider`是`null`的格式设置`value`被解释基于<xref:System.Globalization.NumberFormatInfo>当前区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1429">If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1430">下面的示例演示两种方法来定义颚化符 （~） 为负号的格式设置<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1430">The following examples show two ways to define the tilde (~) as a negative sign for formatting <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="87a43-1431">请注意，若要显示<xref:System.Numerics.BigInteger>原始字符串的格式相同的值，你的代码必须调用<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法并将其传递<xref:System.Globalization.NumberFormatInfo>提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1431">Note that to display the <xref:System.Numerics.BigInteger> values in the same format as the original strings, your code must call the <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> method and pass it the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="87a43-1432">第一个示例定义了一个类实现<xref:System.IFormatProvider>，并使用<xref:System.IFormatProvider.GetFormat%2A>方法以返回<xref:System.Globalization.NumberFormatInfo>提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1432">The first example defines a class that implements <xref:System.IFormatProvider> and uses the <xref:System.IFormatProvider.GetFormat%2A> method to return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#2)]  
  
 <span data-ttu-id="87a43-1433">一个<xref:System.Numerics.BigInteger>然后可以使用以下代码实例化对象：</span><span class="sxs-lookup"><span data-stu-id="87a43-1433">A <xref:System.Numerics.BigInteger> object can then be instantiated with the following code:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#3)]
 [!code-vb[System.Numeric.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#3)]  
  
 <span data-ttu-id="87a43-1434">第二个示例是更简单。</span><span class="sxs-lookup"><span data-stu-id="87a43-1434">The second example is more straightforward.</span></span> <span data-ttu-id="87a43-1435">它将传递<xref:System.Globalization.NumberFormatInfo>对象，它提供到格式设置信息`provider`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1435">It passes the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information to the `provider` parameter.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#4)]
 [!code-vb[System.Numeric.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87a43-1436"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1436"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="87a43-1437"><paramref name="value" /> 的格式不正确。</span><span class="sxs-lookup"><span data-stu-id="87a43-1437"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As BigInteger" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1438">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="87a43-1438">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="87a43-1439">枚举值的按位组合，这些枚举值指定 <paramref name="value" /> 所允许的格式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1439">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <param name="provider"><span data-ttu-id="87a43-1440">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="87a43-1440">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="87a43-1441">将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1441">Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="87a43-1442">一个值，等于 <paramref name="value" /> 参数中指定的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1442">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1443">`style`参数定义中允许的样式元素 （如空格、 正或负号符号、 组分隔符符号或十进制点符号）`value`分析操作成功的参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1443">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="87a43-1444">`styles` 必须是中的位标志的组合<xref:System.Globalization.NumberStyles>枚举。</span><span class="sxs-lookup"><span data-stu-id="87a43-1444">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="87a43-1445">`style`参数将使得此方法重载非常有用`value`包含十六进制值的字符串表示形式时数系 （十进制或十六进制） 由`value`仅在运行时，已知时，或者当你想要禁止的空白区域或正负符号`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1445">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="87a43-1446">具体取决于值`style`，则`value`参数可能包含以下元素：</span><span class="sxs-lookup"><span data-stu-id="87a43-1446">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="87a43-1447">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="87a43-1447">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="87a43-1448">如果`style`包括<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>，则`value`参数可能包含以下元素：</span><span class="sxs-lookup"><span data-stu-id="87a43-1448">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="87a43-1449">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="87a43-1449">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="87a43-1450">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="87a43-1450">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="87a43-1451">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="87a43-1451">The following table describes each element.</span></span>  
  
|<span data-ttu-id="87a43-1452">元素</span><span class="sxs-lookup"><span data-stu-id="87a43-1452">Element</span></span>|<span data-ttu-id="87a43-1453">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-1453">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="87a43-1454">*ws*</span><span class="sxs-lookup"><span data-stu-id="87a43-1454">*ws*</span></span>|<span data-ttu-id="87a43-1455">可选的空白区域。</span><span class="sxs-lookup"><span data-stu-id="87a43-1455">Optional white space.</span></span> <span data-ttu-id="87a43-1456">空白可以出现在开头`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>标志，它可以出现在末尾`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1456">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="87a43-1457">特定于区域性的货币符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1457">A culture-specific currency symbol.</span></span> <span data-ttu-id="87a43-1458">在字符串中的位置由<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>并<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>的区域性属性由`provider`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1458">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the culture indicated by the `provider` parameter.</span></span> <span data-ttu-id="87a43-1459">当前区域性的货币符号可以出现在`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1459">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1460">*sign*</span><span class="sxs-lookup"><span data-stu-id="87a43-1460">*sign*</span></span>|<span data-ttu-id="87a43-1461">一个可选符号后。</span><span class="sxs-lookup"><span data-stu-id="87a43-1461">An optional sign.</span></span> <span data-ttu-id="87a43-1462">符号可以显示在开头`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>标志，它可以出现在末尾`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1462">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="87a43-1463">可以在使用括号`value`指示负值`style`包括<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1463">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1464">*digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1464">*digits*</span></span><br /><br /> <span data-ttu-id="87a43-1465">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1465">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="87a43-1466">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1466">*exponential_digits*</span></span>|<span data-ttu-id="87a43-1467">从 0 到 9 的数字的序列。</span><span class="sxs-lookup"><span data-stu-id="87a43-1467">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="87a43-1468">有关*fractional_digits*、 仅数字 0 是有效。</span><span class="sxs-lookup"><span data-stu-id="87a43-1468">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="87a43-1469">*，*</span><span class="sxs-lookup"><span data-stu-id="87a43-1469">*,*</span></span>|<span data-ttu-id="87a43-1470">特定于区域性的组分隔符符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1470">A culture-specific group separator symbol.</span></span> <span data-ttu-id="87a43-1471">指定的区域性的组分隔符符号`provider`可以出现在`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1471">The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1472">*.*</span><span class="sxs-lookup"><span data-stu-id="87a43-1472">*.*</span></span>|<span data-ttu-id="87a43-1473">特定于区域性的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1473">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="87a43-1474">指定的区域性的小数点符号`provider`可以出现在`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1474">The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="87a43-1475">数字 0 可以显示为分析操作成功; 一个小数数字如果*fractional_digits*包括任何其他数字<xref:System.FormatException>引发。</span><span class="sxs-lookup"><span data-stu-id="87a43-1475">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="87a43-1476">E</span><span class="sxs-lookup"><span data-stu-id="87a43-1476">E</span></span>|<span data-ttu-id="87a43-1477">"E"或者"E"字符，指示指数 （科学型） 表示法表示值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1477">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="87a43-1478">`value`参数可以表示指数表示法的数字，如果`style`包括<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1478">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1479">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1479">*hexdigits*</span></span>|<span data-ttu-id="87a43-1480">一系列十六进制数字从 0 到 f 或从 0 到 f。</span><span class="sxs-lookup"><span data-stu-id="87a43-1480">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="87a43-1481">中的任何终止 NUL (U + 0000) 字符`s`在分析操作，而不考虑的值，将忽略`style`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1481">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="87a43-1482">仅为数字的字符串 (对应于<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>样式) 总是可以分析成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-1482">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="87a43-1483">其余的大多数<xref:System.Globalization.NumberStyles>成员控件可能会显示，但不是要求是存在于输入字符串中的元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1483">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="87a43-1484">下表指示个别<xref:System.Globalization.NumberStyles>成员影响可能会出现在元素`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1484">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="87a43-1485">NumberStyles 值</span><span class="sxs-lookup"><span data-stu-id="87a43-1485">NumberStyles value</span></span>|<span data-ttu-id="87a43-1486">除数字之外的值中允许的元素</span><span class="sxs-lookup"><span data-stu-id="87a43-1486">Elements permitted in value in addition to digits</span></span>|  
|------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="87a43-1487">*位数*仅元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1487">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="87a43-1488">小数点 （.） 和*小数位数*元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1488">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="87a43-1489">"E"或者"E"字符，它指示指数记数法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1489">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="87a43-1490">连同*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="87a43-1490">along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="87a43-1491">*Ws*元素的开头`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1491">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="87a43-1492">*Ws*结尾的元素`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1492">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="87a43-1493">*符号*元素的开头`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1493">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="87a43-1494">*符号*结尾的元素`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1494">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="87a43-1495">*登录*形式的括号内包含的数字值的元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1495">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="87a43-1496">组分隔符 （，） 元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1496">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="87a43-1497">货币 （$） 元素中。</span><span class="sxs-lookup"><span data-stu-id="87a43-1497">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="87a43-1498">所有元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1498">All elements.</span></span> <span data-ttu-id="87a43-1499">但是，`value`不能表示十六进制数或指数表示法的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1499">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="87a43-1500">*Ws*元素的开头或末尾`value`，*登录*开头处`value`，和小数点 （.） 符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1500">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="87a43-1501">`value`参数还可以使用指数记数法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1501">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="87a43-1502">`ws`， `sign`，组分隔符 （，） 和小数点 （.） 元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1502">The `ws`, `sign`, group separator (,), and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="87a43-1503">所有元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1503">All elements.</span></span> <span data-ttu-id="87a43-1504">但是，`value`不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1504">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="87a43-1505">如果您使用<xref:System.Numerics.BigInteger.Parse%2A>往返的字符串表示形式的方法的<xref:System.Numerics.BigInteger>输出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，则应使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>方法使用"R"格式说明符生成的字符串表示形式<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1505">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="87a43-1506">否则为的字符串表示形式<xref:System.Numerics.BigInteger>50，最高有效位的原始值和数据可能会丢失，当您使用仅保留<xref:System.Numerics.BigInteger.Parse%2A>方法来还原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1506">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="87a43-1507">与其他不同<xref:System.Globalization.NumberStyles>值，该值允许但不是需要特定样式中的元素是否存在`value`，则<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>样式值意味着中的单个数字字符`value`始终解释为十六进制字符。</span><span class="sxs-lookup"><span data-stu-id="87a43-1507">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="87a43-1508">有效的十六进制字符是 0-9、 A-F 和 a-f。</span><span class="sxs-lookup"><span data-stu-id="87a43-1508">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="87a43-1509">其他标志只有可以结合`style`参数是<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>和<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1509">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="87a43-1510">(<xref:System.Globalization.NumberStyles>枚举包括复合数字样式<xref:System.Globalization.NumberStyles.HexNumber>，其中包含这两个空白标志。)</span><span class="sxs-lookup"><span data-stu-id="87a43-1510">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87a43-1511">如果`value`的字符串表示形式的十六进制数，它不能带有任何修饰符 (如`0x`或`&h`) 用于将其识别为十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1511">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="87a43-1512">这将导致转换失败。</span><span class="sxs-lookup"><span data-stu-id="87a43-1512">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="87a43-1513">如果`value`是一个十六进制字符串<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>方法将解释`value`作为存储使用其前两个十六进制数字是否大于或等于 2 的补数表示的负数`0x80`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1513">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="87a43-1514">换而言之，此方法将解释中的第一个字节的最高顺序位`value`用作符号位。</span><span class="sxs-lookup"><span data-stu-id="87a43-1514">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="87a43-1515">若要确保十六进制字符串正确地解释为正数中的第一个数字`value`必须具有值为零。</span><span class="sxs-lookup"><span data-stu-id="87a43-1515">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="87a43-1516">例如，此方法将解释`0x80`为负值，但它会解释任一`0x080`或`0x0080`为正值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1516">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="87a43-1517">下面的示例阐释表示负数和正数值的十六进制字符串之间的差异。</span><span class="sxs-lookup"><span data-stu-id="87a43-1517">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="87a43-1518">`provider`参数是<xref:System.IFormatProvider>实现。</span><span class="sxs-lookup"><span data-stu-id="87a43-1518">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="87a43-1519">其<xref:System.IFormatProvider.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>对象，它提供特定于区域性的格式信息`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1519">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="87a43-1520">通常情况下，`provider`可以是以下之一：</span><span class="sxs-lookup"><span data-stu-id="87a43-1520">Typically, `provider` can be any one of the following:</span></span>  
  
-   <span data-ttu-id="87a43-1521">一个<xref:System.Globalization.CultureInfo>对象，表示提供数字格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1521">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="87a43-1522">其<xref:System.Globalization.CultureInfo.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>提供数字格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1522">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>  
  
-   <span data-ttu-id="87a43-1523">一个<xref:System.Globalization.NumberFormatInfo>提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1523">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="87a43-1524">(其实现<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>只返回其自身。)</span><span class="sxs-lookup"><span data-stu-id="87a43-1524">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="87a43-1525">实现一个自定义对象<xref:System.IFormatProvider>，并使用<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>方法以实例化并返回<xref:System.Globalization.NumberFormatInfo>提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1525">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="87a43-1526">如果`provider`是`null`，则<xref:System.Globalization.NumberFormatInfo>对象使用当前区域性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1526">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1527">以下示例使多次调用<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>方法使用的值的各种组合`style`和`provider`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1527">The following example makes several calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#2)]  
  
 <span data-ttu-id="87a43-1528">单个调用的数量<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>方法的以下实例传递`BigIntegerFormatProvider`类，该类为负号定义颚化符 （~）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1528">A number of the individual calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87a43-1529"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1529"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="87a43-1530">- 或 -</span><span class="sxs-lookup"><span data-stu-id="87a43-1530">-or-</span></span> 
 <span data-ttu-id="87a43-1531"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1531"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87a43-1532"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1532"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="87a43-1533"><paramref name="value" /> 不符合由 <paramref name="style" /> 指定的输入模式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1533"><paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Pow(valuetype System.Numerics.BigInteger value, int32 exponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As BigInteger, exponent As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Pow(System::Numerics::BigInteger value, int exponent);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Pow (value, exponent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1534">要计算 <paramref name="exponent" /> 次幂的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1534">The number to raise to the <paramref name="exponent" /> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="87a43-1535">对 <paramref name="value" /> 进行幂运算的指数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1535">The exponent to raise <paramref name="value" /> by.</span></span></param>
        <summary><span data-ttu-id="87a43-1536">求以 <see cref="T:System.Numerics.BigInteger" /> 值为底、以指定的值为指数的幂。</span><span class="sxs-lookup"><span data-stu-id="87a43-1536">Raises a <see cref="T:System.Numerics.BigInteger" /> value to the power of a specified value.</span></span></summary>
        <returns><span data-ttu-id="87a43-1537"><paramref name="value" /> 的 <paramref name="exponent" /> 次幂的计算结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-1537">The result of raising <paramref name="value" /> to the <paramref name="exponent" /> power.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1538"><xref:System.Numerics.BigInteger.Pow%2A>方法返回 1，如果指数参数的值为 0，或者这两者的值`value`和`exponent`参数均为 0。</span><span class="sxs-lookup"><span data-stu-id="87a43-1538">The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0.</span></span> <span data-ttu-id="87a43-1539">如果`exponent`为 1，<xref:System.Numerics.BigInteger.Pow%2A>方法将返回`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1539">If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`.</span></span> <span data-ttu-id="87a43-1540">如果`value`是负数，该方法返回负数的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-1540">If `value` is negative, the method returns a negative result.</span></span>  
  
 <span data-ttu-id="87a43-1541">此方法对应于<xref:System.Math.Pow%2A?displayProperty=nameWithType>基元数值类型的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1541">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1542">下面的示例演示如何使用求幂<xref:System.Numerics.BigInteger>值和其值介于 0 到 10 的指数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1542">The following example illustrates exponentiation using a <xref:System.Numerics.BigInteger> value and an exponent whose value ranges from 0 to 10.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#32)]
 [!code-vb[System.Numeric.BigInteger.Class#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87a43-1543"><paramref name="exponent" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1543"><paramref name="exponent" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Remainder(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remainder (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Remainder(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Remainder : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Remainder (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="87a43-1544">要作为被除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1544">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="87a43-1545">要作为除数的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1545">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="87a43-1546">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行整除并返回余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1546">Performs integer division on two <see cref="T:System.Numerics.BigInteger" /> values and returns the remainder.</span></span></summary>
        <returns><span data-ttu-id="87a43-1547">将 <paramref name="dividend" /> 除以 <paramref name="divisor" /> 后的余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1547">The remainder after dividing <paramref name="dividend" /> by <paramref name="divisor" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1548">余数的符号是符号`dividend`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1548">The sign of the remainder is the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="87a43-1549"><xref:System.Numerics.BigInteger.Remainder%2A>语言不支持自定义运算符的实现方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1549">The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="87a43-1550">其行为等同于使用取模运算符的除法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1550">Its behavior is identical to division using the modulus operator.</span></span>  
  
 <span data-ttu-id="87a43-1551">如果有必要，该方法会自动执行隐式转换为其他整数类型<xref:System.Numerics.BigInteger>对象，然后再执行取模运算。</span><span class="sxs-lookup"><span data-stu-id="87a43-1551">If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1552">下面的示例比较的余数<xref:System.Numerics.BigInteger.DivRem%2A>方法返回的其余部分替换<xref:System.Numerics.BigInteger.Remainder%2A>方法以建立两个方法计算相同的余数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1552">The following example compares the remainder from the <xref:System.Numerics.BigInteger.DivRem%2A> method with the remainder returned by the <xref:System.Numerics.BigInteger.Remainder%2A> method to establish that the two methods calculate identical remainders.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/cs/Remainder1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/vb/Remainder1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="87a43-1553"><paramref name="divisor" /> 是 0（零）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1553"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public int Sign { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Sign" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Sign" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sign As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Sign { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Sign : int" Usage="System.Numerics.BigInteger.Sign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87a43-1554">获取一个数字，该数字指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的符号（负、正或零）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1554">Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <value><span data-ttu-id="87a43-1555">一个指示 <see cref="T:System.Numerics.BigInteger" /> 对象的符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1555">A number that indicates the sign of the <see cref="T:System.Numerics.BigInteger" /> object, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="87a43-1556">数字</span><span class="sxs-lookup"><span data-stu-id="87a43-1556">Number</span></span> 
 </term><description> <span data-ttu-id="87a43-1557">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-1557">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="87a43-1558">-1</span><span class="sxs-lookup"><span data-stu-id="87a43-1558">-1</span></span> 
 </term><description> <span data-ttu-id="87a43-1559">此对象的值为负。</span><span class="sxs-lookup"><span data-stu-id="87a43-1559">The value of this object is negative.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-1560">0</span><span class="sxs-lookup"><span data-stu-id="87a43-1560">0</span></span> 
 </term><description> <span data-ttu-id="87a43-1561">此对象的值为 0（零）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1561">The value of this object is 0 (zero).</span></span>  
  
 </description></item><item><term> <span data-ttu-id="87a43-1562">1</span><span class="sxs-lookup"><span data-stu-id="87a43-1562">1</span></span> 
 </term><description> <span data-ttu-id="87a43-1563">此对象的值为正。</span><span class="sxs-lookup"><span data-stu-id="87a43-1563">The value of this object is positive.</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1564"><xref:System.Numerics.BigInteger.Sign%2A>属性相当于<xref:System.Math.Sign%2A?displayProperty=nameWithType>基元数值类型的方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1564">The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Subtract(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Subtract(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="87a43-1565">要从中减去的值（被减数）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1565">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="87a43-1566">要减去的值（减数）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1566">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="87a43-1567">从另一个值中减去一个 <see cref="T:System.Numerics.BigInteger" /> 值并返回结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-1567">Subtracts one <see cref="T:System.Numerics.BigInteger" /> value from another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="87a43-1568"><paramref name="right" /> 减 <paramref name="left" /> 所得的结果。</span><span class="sxs-lookup"><span data-stu-id="87a43-1568">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1569">可以使用不支持自定义的运算符的语言<xref:System.Numerics.BigInteger.Subtract%2A>方法来执行减法使用<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1569">Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="87a43-1570"><xref:System.Numerics.BigInteger.Subtract%2A>方法实例化时是减法运算符的有用替代<xref:System.Numerics.BigInteger>变量通过将其分配减法运算，而得出的差异，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1570">The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ToByteArray();" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : unit -&gt; byte[]" Usage="bigInteger.ToByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87a43-1571">将 <see cref="T:System.Numerics.BigInteger" /> 值转换为字节数组。</span><span class="sxs-lookup"><span data-stu-id="87a43-1571">Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</span></span></summary>
        <returns><span data-ttu-id="87a43-1572">转换为字节数组的当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1572">The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1573">此方法返回的数组中的各个字节出现在 little-endian 顺序。</span><span class="sxs-lookup"><span data-stu-id="87a43-1573">The individual bytes in the array returned by this method appear in little-endian order.</span></span> <span data-ttu-id="87a43-1574">也就是说，值的较低序位字节前加上更高序位字节。</span><span class="sxs-lookup"><span data-stu-id="87a43-1574">That is, the lower-order bytes of the value precede the higher-order bytes.</span></span> <span data-ttu-id="87a43-1575">数组的第一个字节反映了第一个八位<xref:System.Numerics.BigInteger>值，第二个字节反映的下一步的八位，依此类推。</span><span class="sxs-lookup"><span data-stu-id="87a43-1575">The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on.</span></span> <span data-ttu-id="87a43-1576">例如，值 1024 或 0x0400，存储为以下两个字节的数组：</span><span class="sxs-lookup"><span data-stu-id="87a43-1576">For example, the value 1024, or 0x0400, is stored as the following array of two bytes:</span></span>  
  
|<span data-ttu-id="87a43-1577">元素</span><span class="sxs-lookup"><span data-stu-id="87a43-1577">Element</span></span>|<span data-ttu-id="87a43-1578">字节值</span><span class="sxs-lookup"><span data-stu-id="87a43-1578">Byte value</span></span>|  
|-------------|----------------|  
|<span data-ttu-id="87a43-1579">0</span><span class="sxs-lookup"><span data-stu-id="87a43-1579">0</span></span>|<span data-ttu-id="87a43-1580">0x00</span><span class="sxs-lookup"><span data-stu-id="87a43-1580">0x00</span></span>|  
|<span data-ttu-id="87a43-1581">1</span><span class="sxs-lookup"><span data-stu-id="87a43-1581">1</span></span>|<span data-ttu-id="87a43-1582">0x04</span><span class="sxs-lookup"><span data-stu-id="87a43-1582">0x04</span></span>|  
  
 <span data-ttu-id="87a43-1583">负值将写入数组中的最紧凑的窗体可能使用 2 的补数表示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1583">Negative values are written to the array using two's complement representation in the most compact form possible.</span></span> <span data-ttu-id="87a43-1584">例如，-1 表示为一个字节，其值是`0xFF`而不是数组其中多个元素，如`0xFF`，`0xFF`或`0xFF`， `0xFF`， `0xFF`， `0xFF`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1584">For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.</span></span>  
  
 <span data-ttu-id="87a43-1585">因为 2 的补数始终表示形式解释的最后一个字节数组中的最高顺序位 (位置处的字节<xref:System.Array.Length%2A?displayProperty=nameWithType> `- 1`) 用作符号位，该方法返回具有额外的元素值为零的字节数组到消除歧义正值，否则无法解释为具有设置其符号位。</span><span class="sxs-lookup"><span data-stu-id="87a43-1585">Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=nameWithType>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set.</span></span> <span data-ttu-id="87a43-1586">例如，值 120 或`0x78`表示为单字节数组： `0x78`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1586">For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`.</span></span> <span data-ttu-id="87a43-1587">但是，128 或`0x80`，表示为两个字节的数组： `0x80`， `0x00`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1587">However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.</span></span>  
  
 <span data-ttu-id="87a43-1588">你可以往返<xref:System.Numerics.BigInteger>值，从而将其存储为字节数组，然后将其使用还原<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1588">You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="87a43-1589">如果你的代码修改之前还原的值，此方法返回数组中的各个字节的值，则必须确保不要无意中更改符号位。</span><span class="sxs-lookup"><span data-stu-id="87a43-1589">If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit.</span></span> <span data-ttu-id="87a43-1590">例如，如果您的修改增加一个正值，以便最高顺序位中的字节数组的最后一个元素将成为设置，可以添加其值为 0 到数组末尾的新字节。</span><span class="sxs-lookup"><span data-stu-id="87a43-1590">For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1591">下面的示例演示如何一些<xref:System.Numerics.BigInteger>值以字节数组表示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1591">The following example illustrates how some <xref:System.Numerics.BigInteger> values are represented in byte arrays.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/cs/ToByteArray1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/vb/ToByteArray1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray (bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray(bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray (Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : bool * bool -&gt; byte[]" Usage="bigInteger.ToByteArray (isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="isBigEndian" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-1592">将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为其等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1592">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="bigInteger.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87a43-1593">将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为其等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1593">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="87a43-1594">当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1594">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1595"><xref:System.Numerics.BigInteger.ToString>方法格式<xref:System.Numerics.BigInteger>"R"或往返，当前区域性的格式中的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1595">The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format of the current culture.</span></span> <span data-ttu-id="87a43-1596">如果你想要指定不同的格式或区域性，使用的其他重载<xref:System.Numerics.BigInteger.ToString%2A>方法，按如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1596">If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="87a43-1597">若要使用格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1597">To use format</span></span>|<span data-ttu-id="87a43-1598">区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1598">For culture</span></span>|<span data-ttu-id="87a43-1599">使用重载</span><span class="sxs-lookup"><span data-stu-id="87a43-1599">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="87a43-1600">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1600">Round-trip ("R") format</span></span>|<span data-ttu-id="87a43-1601">特定区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1601">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%2A>|  
|<span data-ttu-id="87a43-1602">特定的格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1602">A specific format</span></span>|<span data-ttu-id="87a43-1603">默认值 （当前） 区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1603">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="87a43-1604">特定的格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1604">A specific format</span></span>|<span data-ttu-id="87a43-1605">特定区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1605">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="87a43-1606">字符串表示形式<xref:System.Numerics.BigInteger>值包含负号，如果其值为负数，且从 0 到 9 之间，不带前导零的数字的序列。</span><span class="sxs-lookup"><span data-stu-id="87a43-1606">The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros.</span></span> <span data-ttu-id="87a43-1607">负号由<xref:System.Globalization.NumberFormatInfo>为当前区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1607">The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1608">下面的示例显示<xref:System.Numerics.BigInteger>使用默认值<xref:System.Numerics.BigInteger.ToString>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1608">The following example displays a <xref:System.Numerics.BigInteger> value by using the default <xref:System.Numerics.BigInteger.ToString> method.</span></span> <span data-ttu-id="87a43-1609">它还显示的字符串表示形式<xref:System.Numerics.BigInteger>使用一些标准格式说明符而得出的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1609">It also displays the string representations of the <xref:System.Numerics.BigInteger> value that results from using some standard format specifiers.</span></span> <span data-ttu-id="87a43-1610">这些示例使用 EN-US 区域性的格式设置约定来显示。</span><span class="sxs-lookup"><span data-stu-id="87a43-1610">The examples are displayed using the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="87a43-1611">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="87a43-1611">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="87a43-1612">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="87a43-1612">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="bigInteger.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="87a43-1613">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1613">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="87a43-1614">使用指定的区域性特定格式设置信息将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1614">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="87a43-1615">当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式，该值使用 <paramref name="provider" /> 参数指定的格式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1615">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="provider" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1616"><xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>方法格式<xref:System.Numerics.BigInteger>值中的"R"或往返，格式化通过使用<xref:System.Globalization.NumberFormatInfo>指定区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1616">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="87a43-1617">如果你想要指定不同的格式或当前区域性，使用的其他重载<xref:System.Numerics.BigInteger.ToString%2A>方法，按如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1617">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="87a43-1618">若要使用格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1618">To use format</span></span>|<span data-ttu-id="87a43-1619">区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1619">For culture</span></span>|<span data-ttu-id="87a43-1620">使用重载</span><span class="sxs-lookup"><span data-stu-id="87a43-1620">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="87a43-1621">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1621">Round-trip ("R") format</span></span>|<span data-ttu-id="87a43-1622">默认值 （当前） 区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1622">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="87a43-1623">特定的格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1623">A specific format</span></span>|<span data-ttu-id="87a43-1624">默认值 （当前） 区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1624">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="87a43-1625">特定的格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1625">A specific format</span></span>|<span data-ttu-id="87a43-1626">特定区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1626">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="87a43-1627">`provider`参数是<xref:System.IFormatProvider>实现。</span><span class="sxs-lookup"><span data-stu-id="87a43-1627">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="87a43-1628">其<xref:System.IFormatProvider.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>提供此方法返回的字符串的格式的区域性特定信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1628">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="87a43-1629">如果`provider`是`null`，则<xref:System.Numerics.BigInteger>值进行格式设置使用<xref:System.Globalization.NumberFormatInfo>当前区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1629">If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span> <span data-ttu-id="87a43-1630">唯一的属性<xref:System.Globalization.NumberFormatInfo>对象，用于控制的字符串表示形式<xref:System.Numerics.BigInteger>值使用常规格式说明符是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>，它定义表示负号的字符。</span><span class="sxs-lookup"><span data-stu-id="87a43-1630">The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, which defines the character that represents the negative sign.</span></span>  
  
 <span data-ttu-id="87a43-1631">`provider`参数可以是以下值之一：</span><span class="sxs-lookup"><span data-stu-id="87a43-1631">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="87a43-1632">一个<xref:System.Globalization.CultureInfo>对象，表示提供格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1632">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="87a43-1633"><xref:System.Globalization.NumberFormatInfo>提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1633">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="87a43-1634">实现一个自定义对象<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1634">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="87a43-1635">其<xref:System.IFormatProvider.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1635">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1636">下面的示例实例化一个自定义<xref:System.Globalization.NumberFormatInfo>波形符 （~） 定义为一个负号的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1636">The following example instantiates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span> <span data-ttu-id="87a43-1637"><xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>方法，然后使用自定义<xref:System.Globalization.NumberFormatInfo>对象来显示一个负<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1637">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method then uses the custom <xref:System.Globalization.NumberFormatInfo> object to display a negative <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/cs/System.Numeric.BigInteger.ToString.cs#1)]
 [!code-vb[System.Numeric.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/vb/System.Numeric.BigInteger.ToString.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="bigInteger.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="87a43-1638">标准或自定义的数值格式字符串。</span><span class="sxs-lookup"><span data-stu-id="87a43-1638">A standard or custom numeric format string.</span></span></param>
        <summary><span data-ttu-id="87a43-1639">使用指定的格式将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1639">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format.</span></span></summary>
        <returns><span data-ttu-id="87a43-1640">当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式，该值使用 <paramref name="format" /> 参数指定的格式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1640">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="format" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1641"><xref:System.Numerics.BigInteger.ToString%28System.String%29>方法格式<xref:System.Numerics.BigInteger>通过使用指定的格式值<xref:System.Globalization.NumberFormatInfo>对象，表示当前区域性的约定。</span><span class="sxs-lookup"><span data-stu-id="87a43-1641">The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture.</span></span> <span data-ttu-id="87a43-1642">如果你想要使用"R"或往返，设置格式或指定不同的区域性，使用的其他重载<xref:System.Numerics.BigInteger.ToString%2A>方法，按如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1642">If you want to use the "R", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="87a43-1643">若要使用格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1643">To use format</span></span>|<span data-ttu-id="87a43-1644">区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1644">For culture</span></span>|<span data-ttu-id="87a43-1645">使用重载</span><span class="sxs-lookup"><span data-stu-id="87a43-1645">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="87a43-1646">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1646">Round-trip ("R") format</span></span>|<span data-ttu-id="87a43-1647">默认值 （当前） 区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1647">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="87a43-1648">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1648">Round-trip ("R") format</span></span>|<span data-ttu-id="87a43-1649">特定区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1649">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="87a43-1650">特定的格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1650">A specific format</span></span>|<span data-ttu-id="87a43-1651">特定区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1651">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="87a43-1652">`format`参数可以是任何有效[标准数字字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)，或的任意组合[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="87a43-1652">The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="87a43-1653">如果`format`等同于<xref:System.String.Empty?displayProperty=nameWithType>是否`null`，当前的返回值<xref:System.Numerics.BigInteger>对象往返格式说明符 ("R") 进行格式设置。</span><span class="sxs-lookup"><span data-stu-id="87a43-1653">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="87a43-1654">如果`format`为其他任何值，该方法将引发<xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1654">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="87a43-1655">.NET Framework 提供了广泛的格式设置支持，其格式设置的以下主题中更详细地介绍：</span><span class="sxs-lookup"><span data-stu-id="87a43-1655">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="87a43-1656">有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)并[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="87a43-1656">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="87a43-1657">有关对.NET Framework 中的格式设置支持的详细信息，请参阅[格式设置类型](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="87a43-1657">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="87a43-1658">返回字符串的格式由<xref:System.Globalization.NumberFormatInfo>为当前区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1658">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="87a43-1659">具体取决于`format`参数，此对象可以控制在输出字符串中的负号、 组分隔符和小数点符号等符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1659">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="87a43-1660">若要提供除当前区域性以外区域性的格式设置信息，请调用<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>重载。</span><span class="sxs-lookup"><span data-stu-id="87a43-1660">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1661">下面的示例初始化<xref:System.Numerics.BigInteger>值并将其显示通过使用每个标准格式字符串和一些自定义格式字符串。</span><span class="sxs-lookup"><span data-stu-id="87a43-1661">The following example initializes a <xref:System.Numerics.BigInteger> value and displays it by using each standard format string and some custom format strings.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="87a43-1662"><paramref name="format" /> 不是有效的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="87a43-1662"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="87a43-1663">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="87a43-1663">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="87a43-1664">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="87a43-1664">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="bigInteger.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="87a43-1665">标准或自定义的数值格式字符串。</span><span class="sxs-lookup"><span data-stu-id="87a43-1665">A standard or custom numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="87a43-1666">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1666">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="87a43-1667">使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1667">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="87a43-1668">由 <paramref name="format" /> 和 <paramref name="provider" /> 参数指定的当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1668">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1669"><xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>方法格式<xref:System.Numerics.BigInteger>通过使用指定的格式值<xref:System.Globalization.NumberFormatInfo>指定区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1669">The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="87a43-1670">如果你想要使用往返格式或默认区域性设置，使用的其他重载<xref:System.Numerics.BigInteger.ToString%2A>方法，按如下所示：</span><span class="sxs-lookup"><span data-stu-id="87a43-1670">If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="87a43-1671">若要使用格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1671">To use format</span></span>|<span data-ttu-id="87a43-1672">区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1672">For culture</span></span>|<span data-ttu-id="87a43-1673">使用重载</span><span class="sxs-lookup"><span data-stu-id="87a43-1673">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="87a43-1674">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1674">Round-trip ("R") format</span></span>|<span data-ttu-id="87a43-1675">默认值 （当前） 区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1675">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="87a43-1676">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1676">Round-trip ("R") format</span></span>|<span data-ttu-id="87a43-1677">特定区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1677">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="87a43-1678">特定的格式</span><span class="sxs-lookup"><span data-stu-id="87a43-1678">A specific format</span></span>|<span data-ttu-id="87a43-1679">默认值 （当前） 区域性</span><span class="sxs-lookup"><span data-stu-id="87a43-1679">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
  
 <span data-ttu-id="87a43-1680">`format`参数可以是任何有效[标准数字字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)，或的任意组合[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="87a43-1680">The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="87a43-1681">如果`format`等同于<xref:System.String.Empty?displayProperty=nameWithType>是否`null`，当前的返回值<xref:System.Numerics.BigInteger>对象往返格式说明符 ("R") 进行格式设置。</span><span class="sxs-lookup"><span data-stu-id="87a43-1681">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="87a43-1682">如果`format`为其他任何值，该方法将引发<xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1682">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="87a43-1683">.NET Framework 提供了广泛的格式设置支持，其格式设置的以下主题中更详细地介绍：</span><span class="sxs-lookup"><span data-stu-id="87a43-1683">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="87a43-1684">有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)并[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="87a43-1684">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="87a43-1685">有关对.NET Framework 中的格式设置支持的详细信息，请参阅[格式设置类型](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="87a43-1685">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="87a43-1686">`provider`参数是<xref:System.IFormatProvider>实现。</span><span class="sxs-lookup"><span data-stu-id="87a43-1686">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="87a43-1687">其<xref:System.IFormatProvider.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>提供此方法返回的字符串的格式的区域性特定信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1687">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="87a43-1688">当<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>调用方法时，它调用`provider`参数的<xref:System.IFormatProvider.GetFormat%2A>方法并将其传递<xref:System.Type>对象，表示<xref:System.Globalization.NumberFormatInfo>类型。</span><span class="sxs-lookup"><span data-stu-id="87a43-1688">When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="87a43-1689"><xref:System.IFormatProvider.GetFormat%2A>方法随后返回<xref:System.Globalization.NumberFormatInfo>提供的格式设置信息的对象`value`参数，如负号符号、 组分隔符符号或小数点符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1689">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol.</span></span> <span data-ttu-id="87a43-1690">有三种方法使用`provider`参数来提供到格式设置信息<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>方法：</span><span class="sxs-lookup"><span data-stu-id="87a43-1690">There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:</span></span>  
  
-   <span data-ttu-id="87a43-1691">可以将传递<xref:System.Globalization.CultureInfo>对象，表示提供格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1691">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="87a43-1692">其<xref:System.Globalization.CultureInfo.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>提供该区域性的数字格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1692">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="87a43-1693">您可以将传递的实际<xref:System.Globalization.NumberFormatInfo>提供数字格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1693">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="87a43-1694">(其实现<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>只返回其自身。)</span><span class="sxs-lookup"><span data-stu-id="87a43-1694">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="87a43-1695">可以传递用于实现的自定义对象<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1695">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="87a43-1696">其<xref:System.IFormatProvider.GetFormat%2A>方法实例化并返回<xref:System.Globalization.NumberFormatInfo>提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1696">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="87a43-1697">如果`provider`是`null`，则返回的字符串的格式设置基于<xref:System.Globalization.NumberFormatInfo>当前区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1697">If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1698">下面的示例初始化<xref:System.Numerics.BigInteger>值，并将其显示在控制台中使用标准格式字符串和一个<xref:System.Globalization.NumberFormatInfo>波形符 （~） 定义为一个负号的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1698">The following example initializes a <xref:System.Numerics.BigInteger> value, and displays it to the console using a standard format string and a <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="87a43-1699"><paramref name="format" /> 不是有效的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="87a43-1699"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="87a43-1700">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="87a43-1700">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="87a43-1701">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="87a43-1701">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="bigInteger.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87a43-1702">尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />，并返回一个指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1702">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1703">数字的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1703">The string representation of a number.</span></span></param>
        <param name="result"><span data-ttu-id="87a43-1704">当此方法返回时，包含与 <paramref name="value" /> 中所包含的数字等效的 <see cref="T:System.Numerics.BigInteger" />；如果转换失败，则包含零 (0)。</span><span class="sxs-lookup"><span data-stu-id="87a43-1704">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or zero (0) if the conversion fails.</span></span> <span data-ttu-id="87a43-1705">如果 <paramref name="value" /> 参数为 <see langword="null" />，或者其格式不正确，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="87a43-1705">The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not of the correct format.</span></span> <span data-ttu-id="87a43-1706">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="87a43-1706">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="87a43-1707">尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />，并返回一个指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1707">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="87a43-1708">如果 <see langword="true" /> 成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1708"><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1709"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29>方法就像<xref:System.Numerics.BigInteger.Parse%28System.String%29>方法，但它不会引发异常，如果转换失败。</span><span class="sxs-lookup"><span data-stu-id="87a43-1709">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="87a43-1710">此方法无需使用异常处理来测试<xref:System.FormatException>如果`value`无效，不能成功分析。</span><span class="sxs-lookup"><span data-stu-id="87a43-1710">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="87a43-1711">`value`参数应为以下形式的十进制数字的字符串表示形式：</span><span class="sxs-lookup"><span data-stu-id="87a43-1711">The `value` parameter should be the string representation of a decimal number in the following form:</span></span>  
  
 <span data-ttu-id="87a43-1712">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="87a43-1712">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="87a43-1713">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="87a43-1713">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="87a43-1714">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="87a43-1714">The following table describes each element.</span></span>  
  
|<span data-ttu-id="87a43-1715">元素</span><span class="sxs-lookup"><span data-stu-id="87a43-1715">Element</span></span>|<span data-ttu-id="87a43-1716">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-1716">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="87a43-1717">*ws*</span><span class="sxs-lookup"><span data-stu-id="87a43-1717">*ws*</span></span>|<span data-ttu-id="87a43-1718">可选的空白区域。</span><span class="sxs-lookup"><span data-stu-id="87a43-1718">Optional white space.</span></span>|  
|<span data-ttu-id="87a43-1719">*sign*</span><span class="sxs-lookup"><span data-stu-id="87a43-1719">*sign*</span></span>|<span data-ttu-id="87a43-1720">一个可选符号后。</span><span class="sxs-lookup"><span data-stu-id="87a43-1720">An optional sign.</span></span> <span data-ttu-id="87a43-1721">有效的符号字符由<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>和<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>当前区域性的属性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1721">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="87a43-1722">*digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1722">*digits*</span></span>|<span data-ttu-id="87a43-1723">范围从 0 到 9 的十进制数字的序列。</span><span class="sxs-lookup"><span data-stu-id="87a43-1723">A sequence of decimal digits ranging from 0 to 9.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="87a43-1724">指定的字符串`value`参数不能包含任何组分隔符或小数分隔符，而且不能包含小数部分。</span><span class="sxs-lookup"><span data-stu-id="87a43-1724">The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="87a43-1725">`value`参数解释使用<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>样式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1725">The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="87a43-1726">除了十进制数字，允许仅前导空格和尾随空格以及前导符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1726">In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed.</span></span> <span data-ttu-id="87a43-1727">若要显式定义使用可出现在特定于区域性的格式设置信息的样式元素`value`，调用<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1727">To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.</span></span>  
  
 <span data-ttu-id="87a43-1728">`value`通过使用中的格式设置信息分析参数<xref:System.Globalization.NumberFormatInfo>为当前区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1728">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="87a43-1729">有关详情，请参阅<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1729">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="87a43-1730">此重载将解释中的所有位`value`为十进制数字的参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1730">This overload interprets all digits in the `value` parameter as decimal digits.</span></span> <span data-ttu-id="87a43-1731">若要分析的十六进制数字的字符串表示形式，请调用<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>改为重载。</span><span class="sxs-lookup"><span data-stu-id="87a43-1731">To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1732">下面的示例使用<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29>方法来实例化两个<xref:System.Numerics.BigInteger>对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1732">The following example uses the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="87a43-1733">如果转换成功，它将乘以另一个数的每个对象，然后调用<xref:System.Numerics.BigInteger.Compare%2A>方法来确定两个对象之间的关系。</span><span class="sxs-lookup"><span data-stu-id="87a43-1733">If the conversions succeed, it multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two objects.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/cs/System.Numeric.BigInteger.TryParse.cs#1)]
 [!code-vb[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/vb/System.Numeric.BigInteger.TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87a43-1734"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1734"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="87a43-1735">数字的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="87a43-1735">The string representation of a number.</span></span> <span data-ttu-id="87a43-1736">该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</span><span class="sxs-lookup"><span data-stu-id="87a43-1736">The string is interpreted using the style specified by <paramref name="style" />.</span></span></param>
        <param name="style"><span data-ttu-id="87a43-1737">枚举值的按位组合，用于指示可出现在 <paramref name="value" /> 中的样式元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1737">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />.</span></span> <span data-ttu-id="87a43-1738">要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1738">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <param name="provider"><span data-ttu-id="87a43-1739">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="87a43-1739">An object that supplies culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <param name="result"><span data-ttu-id="87a43-1740">当此方法返回时，包含与 <paramref name="value" /> 中所包含的数字等效的 <see cref="T:System.Numerics.BigInteger" />；如果转换失败，则包含 <see cref="P:System.Numerics.BigInteger.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1740">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed.</span></span> <span data-ttu-id="87a43-1741">如果 <paramref name="value" /> 参数为 <see langword="null" /> 或其格式不符合 <paramref name="style" />，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="87a43-1741">The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not in a format that is compliant with <paramref name="style" />.</span></span> <span data-ttu-id="87a43-1742">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="87a43-1742">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="87a43-1743">尝试将指定样式和区域性特定格式的数字的字符串表示形式转换为其 <see cref="T:System.Numerics.BigInteger" /> 等效项，并返回一个指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1743">Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="87a43-1744">如果 <see langword="true" /> 参数成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87a43-1744"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1745"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法就像<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>方法，但它不会引发异常，如果转换失败。</span><span class="sxs-lookup"><span data-stu-id="87a43-1745">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="87a43-1746">此方法无需使用异常处理来测试<xref:System.FormatException>如果`value`无效，不能成功分析。</span><span class="sxs-lookup"><span data-stu-id="87a43-1746">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.</span></span>  
  
 <span data-ttu-id="87a43-1747">`style`参数定义中允许的样式元素 （如空格或正号或负号）`value`分析操作成功的参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1747">The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="87a43-1748">它必须是从位标志的组合<xref:System.Globalization.NumberStyles>枚举。</span><span class="sxs-lookup"><span data-stu-id="87a43-1748">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="87a43-1749">具体取决于值`style`，则`value`参数可能包含以下元素：</span><span class="sxs-lookup"><span data-stu-id="87a43-1749">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="87a43-1750">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="87a43-1750">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="87a43-1751">如果`style`参数包含<xref:System.Globalization.NumberStyles.AllowHexSpecifier>，则`value`参数可能包含以下元素：</span><span class="sxs-lookup"><span data-stu-id="87a43-1751">If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="87a43-1752">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="87a43-1752">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="87a43-1753">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="87a43-1753">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="87a43-1754">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="87a43-1754">The following table describes each element.</span></span>  
  
|<span data-ttu-id="87a43-1755">元素</span><span class="sxs-lookup"><span data-stu-id="87a43-1755">Element</span></span>|<span data-ttu-id="87a43-1756">描述</span><span class="sxs-lookup"><span data-stu-id="87a43-1756">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="87a43-1757">*ws*</span><span class="sxs-lookup"><span data-stu-id="87a43-1757">*ws*</span></span>|<span data-ttu-id="87a43-1758">可选的空白区域。</span><span class="sxs-lookup"><span data-stu-id="87a43-1758">Optional white space.</span></span> <span data-ttu-id="87a43-1759">空白可以出现在开头`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>标志，或在末尾`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1759">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="87a43-1760">特定于区域性的货币符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1760">A culture-specific currency symbol.</span></span> <span data-ttu-id="87a43-1761">在字符串中的位置由<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>的属性<xref:System.Globalization.NumberFormatInfo>返回的对象<xref:System.IFormatProvider.GetFormat%2A>方法的`provider`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1761">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="87a43-1762">货币符号可以出现在`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1762">The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1763">*sign*</span><span class="sxs-lookup"><span data-stu-id="87a43-1763">*sign*</span></span>|<span data-ttu-id="87a43-1764">一个可选符号后。</span><span class="sxs-lookup"><span data-stu-id="87a43-1764">An optional sign.</span></span> <span data-ttu-id="87a43-1765">符号可以显示在开头`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>标志，它可以出现在末尾`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1765">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="87a43-1766">可以在使用括号`value`指示负值`style`包括<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1766">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1767">*digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1767">*digits*</span></span>|<span data-ttu-id="87a43-1768">从 0 到 9 的数字的序列。</span><span class="sxs-lookup"><span data-stu-id="87a43-1768">A sequence of digits from 0 through 9.</span></span>|  
|<span data-ttu-id="87a43-1769">*，*</span><span class="sxs-lookup"><span data-stu-id="87a43-1769">*,*</span></span>|<span data-ttu-id="87a43-1770">特定于区域性的组分隔符。</span><span class="sxs-lookup"><span data-stu-id="87a43-1770">A culture-specific group separator.</span></span> <span data-ttu-id="87a43-1771">指定的区域性的组分隔符`provider`可以出现在`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1771">The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1772">*.*</span><span class="sxs-lookup"><span data-stu-id="87a43-1772">*.*</span></span>|<span data-ttu-id="87a43-1773">特定于区域性的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1773">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="87a43-1774">指定的区域性的小数点符号`provider`可以出现在`value`如果`style`包括<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1774">The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1775">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1775">*fractional_digits*</span></span>|<span data-ttu-id="87a43-1776">数字 0 的一个或多个匹配项。</span><span class="sxs-lookup"><span data-stu-id="87a43-1776">One or more occurrences of the digit 0.</span></span> <span data-ttu-id="87a43-1777">在中出现的小数位`value`仅当`style`包括<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1777">Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1778">E</span><span class="sxs-lookup"><span data-stu-id="87a43-1778">E</span></span>|<span data-ttu-id="87a43-1779">"E"或者"E"字符，指示指数 （科学型） 表示法表示值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1779">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="87a43-1780">`value`参数可以表示指数表示法的数字，如果`style`包括<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1780">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1781">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1781">*exponential_digits*</span></span>|<span data-ttu-id="87a43-1782">从 0 到 9 的数字的序列。</span><span class="sxs-lookup"><span data-stu-id="87a43-1782">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="87a43-1783">`value`参数可以表示指数表示法的数字，如果`style`包括<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="87a43-1783">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="87a43-1784">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="87a43-1784">*hexdigits*</span></span>|<span data-ttu-id="87a43-1785">一系列十六进制数字从 0 到 f 或从 0 到 f。</span><span class="sxs-lookup"><span data-stu-id="87a43-1785">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="87a43-1786">中的任何终止 NUL (U + 0000) 字符`s`在分析操作，而不考虑的值，将忽略`style`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1786">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="87a43-1787">仅带有十进制数字的字符串 (对应于<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>标志) 总是可以分析成功。</span><span class="sxs-lookup"><span data-stu-id="87a43-1787">A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> flag) always parses successfully.</span></span> <span data-ttu-id="87a43-1788">其余的大多数<xref:System.Globalization.NumberStyles>成员控件可能会显示，但不是要求必须存在，此输入字符串中的元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1788">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string.</span></span> <span data-ttu-id="87a43-1789">下表指示个别<xref:System.Globalization.NumberStyles>成员影响可能会出现在元素`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1789">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="87a43-1790">非复合`NumberStyles`值</span><span class="sxs-lookup"><span data-stu-id="87a43-1790">Non-composite `NumberStyles` values</span></span>|<span data-ttu-id="87a43-1791">除数字之外的值中允许的元素</span><span class="sxs-lookup"><span data-stu-id="87a43-1791">Elements permitted in value in addition to digits</span></span>|  
|------------------------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="87a43-1792">十进制数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1792">Decimal digits only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="87a43-1793">小数点 (*。*) 和*fractional_digits*元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1793">The decimal point (*.*) and *fractional_digits* elements.</span></span> <span data-ttu-id="87a43-1794">但是， *fractional_digits*必须包含一个或多个数字 0 或该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1794">However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="87a43-1795">"E"或"E"字符，它指示指数记数法，连同*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="87a43-1795">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span> <span data-ttu-id="87a43-1796">如果`value`表示的数字在指数记数法，它不能具有非零的小数部分。</span><span class="sxs-lookup"><span data-stu-id="87a43-1796">If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="87a43-1797">*Ws*元素的开头`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1797">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="87a43-1798">*Ws*结尾的元素`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1798">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="87a43-1799">*符号*之前的元素*数字*。</span><span class="sxs-lookup"><span data-stu-id="87a43-1799">The *sign* element before *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="87a43-1800">*符号*元素后的*数字*。</span><span class="sxs-lookup"><span data-stu-id="87a43-1800">The *sign* element after *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="87a43-1801">*登录*形式的括号内包含的数字值的元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1801">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="87a43-1802">组分隔符 (*，*) 元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1802">The group separator (*,*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="87a43-1803">货币 (*$*) 元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1803">The currency (*$*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="87a43-1804">所有元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1804">All elements.</span></span> <span data-ttu-id="87a43-1805">但是，`value`不能表示十六进制数或指数表示法的数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1805">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="87a43-1806">*Ws*元素的开头或末尾`value`，*登录*开头处`value`，和小数点 (*。*) 符号。</span><span class="sxs-lookup"><span data-stu-id="87a43-1806">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="87a43-1807">`value`参数还可以使用指数记数法。</span><span class="sxs-lookup"><span data-stu-id="87a43-1807">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="87a43-1808">*Ws*，*登录*，组分隔符 (*，*)，和小数点 (*。*) 元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1808">The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="87a43-1809">所有元素。</span><span class="sxs-lookup"><span data-stu-id="87a43-1809">All elements.</span></span> <span data-ttu-id="87a43-1810">但是，`value`不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1810">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="87a43-1811">如果您使用<xref:System.Numerics.BigInteger.TryParse%2A>往返的字符串表示形式的方法的<xref:System.Numerics.BigInteger>输出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，则应使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>方法使用"R"格式说明符生成的字符串表示形式<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1811">If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="87a43-1812">否则为的字符串表示形式<xref:System.Numerics.BigInteger>50，最高有效位的原始值和数据可能会丢失，当您使用仅保留<xref:System.Numerics.BigInteger.TryParse%2A>方法来还原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1812">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="87a43-1813">如果<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>使用标志，`value`必须是十六进制值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1813">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `value` must be a hexadecimal value.</span></span> <span data-ttu-id="87a43-1814">其他标志只有可出现在`style`都<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>和<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1814">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="87a43-1815">(<xref:System.Globalization.NumberStyles>枚举具有复合样式<xref:System.Globalization.NumberStyles.HexNumber>，其中包含这两个空白标志。)</span><span class="sxs-lookup"><span data-stu-id="87a43-1815">(The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87a43-1816">如果`value`的字符串表示形式的十六进制数，它不能带有任何修饰符 (如`0x`或`&h`) 用于将其识别为十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="87a43-1816">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="87a43-1817">这将导致转换失败。</span><span class="sxs-lookup"><span data-stu-id="87a43-1817">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="87a43-1818">如果`value`是一个十六进制字符串<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法将解释`value`作为存储使用其前两个十六进制数字是否大于或等于 2 的补数表示的负数`0x80`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1818">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="87a43-1819">换而言之，此方法将解释中的第一个字节的最高顺序位`value`用作符号位。</span><span class="sxs-lookup"><span data-stu-id="87a43-1819">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="87a43-1820">若要确保十六进制字符串正确地解释为正数中的第一个数字`value`必须具有值为零。</span><span class="sxs-lookup"><span data-stu-id="87a43-1820">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="87a43-1821">例如，此方法将解释`0x80`为负值，但它会解释任一`0x080`或`0x0080`为正值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1821">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="87a43-1822">下面的示例阐释表示负数和正数值的十六进制字符串之间的差异。</span><span class="sxs-lookup"><span data-stu-id="87a43-1822">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  
  
 <span data-ttu-id="87a43-1823">`provider`参数是<xref:System.IFormatProvider>实现。</span><span class="sxs-lookup"><span data-stu-id="87a43-1823">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="87a43-1824">其<xref:System.IFormatProvider.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>对象，它提供特定于区域性的格式信息`value`。</span><span class="sxs-lookup"><span data-stu-id="87a43-1824">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="87a43-1825">`provider`参数可以是以下之一：</span><span class="sxs-lookup"><span data-stu-id="87a43-1825">The `provider` parameter can be any one of the following:</span></span>  
  
-   <span data-ttu-id="87a43-1826">一个<xref:System.Globalization.CultureInfo>对象，表示提供格式设置信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1826">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="87a43-1827">其<xref:System.Globalization.CultureInfo.GetFormat%2A>方法将返回<xref:System.Globalization.NumberFormatInfo>提供该区域性的数字格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1827">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="87a43-1828">一个<xref:System.Globalization.NumberFormatInfo>提供数字格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1828">A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="87a43-1829">(其实现<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>只返回其自身。)</span><span class="sxs-lookup"><span data-stu-id="87a43-1829">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="87a43-1830">实现一个自定义对象<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="87a43-1830">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="87a43-1831">其<xref:System.IFormatProvider.GetFormat%2A>方法实例化并返回<xref:System.Globalization.NumberFormatInfo>提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="87a43-1831">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="87a43-1832">如果`provider`是`null`，则<xref:System.Globalization.NumberFormatInfo>对象使用当前区域性。</span><span class="sxs-lookup"><span data-stu-id="87a43-1832">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87a43-1833">以下示例使某些调用<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法使用的值的各种组合`style`和`provider`参数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1833">The following example makes some calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#2)]  
  
 <span data-ttu-id="87a43-1834">单个调用的数量<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法的以下实例传递`BigIntegerFormatProvider`类，该类为负号定义颚化符 （~）。</span><span class="sxs-lookup"><span data-stu-id="87a43-1834">A number of the individual calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87a43-1835"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1835"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="87a43-1836">- 或 -</span><span class="sxs-lookup"><span data-stu-id="87a43-1836">-or-</span></span> 
 <span data-ttu-id="87a43-1837"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1837"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public bool TryWriteBytes (Span&lt;byte&gt; destination, out int bytesWritten, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryWriteBytes (destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryWriteBytes : Span&lt;byte&gt; *  * bool * bool -&gt; bool" Usage="bigInteger.TryWriteBytes (destination, bytesWritten, isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="isBigEndian" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger Zero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Zero As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger Zero { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.Zero : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Zero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87a43-1838">获取一个表示数字 0（零）的值。</span><span class="sxs-lookup"><span data-stu-id="87a43-1838">Gets a value that represents the number 0 (zero).</span></span></summary>
        <value><span data-ttu-id="87a43-1839">其值为 0（零）的整数。</span><span class="sxs-lookup"><span data-stu-id="87a43-1839">An integer whose value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87a43-1840"><xref:System.Numerics.BigInteger>此属性返回的对象提供了方便的来源的零值赋值和比较中使用。</span><span class="sxs-lookup"><span data-stu-id="87a43-1840">The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsZero" />
      </Docs>
    </Member>
  </Members>
</Type>