<Type Name="Keyboard" FullName="Microsoft.VisualBasic.Devices.Keyboard">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3935cead12b64f3f847734107688d50ba271bff1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659094" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Devices.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard" />
  <TypeSignature Language="F#" Value="type Keyboard = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供了用于访问键盘当前状态（如当前按下了哪些键）的属性，并提供了用于将击键发送到活动窗口的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard`计算机的键盘为接口提供的对象。 属性`My.Computer.Keyboard`提供几个特殊键的状态有关的信息。 `My.Computer.Keyboard.SendKeys`方法使你可以将密钥发送到活动窗口，就像它们具有已键入键盘上输入一样。  
  
## <a name="tasks"></a>任务  
 下表列出的任务涉及示例`My.Computer.Keyboard`对象。  
  
|到|查看|  
|-|-|  
|将击键发送到应用程序|[如何：启动应用程序并向其发送击键 (Visual Basic)](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-start-an-application-and-send-it-keystrokes.md)|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Computer.Keyboard.CtrlKeyDown`属性来确定按下计算机的 CTRL 键。  
  
 [!code-vb[VbVbalrMyComputer#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#36)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Keyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Keyboard();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Devices.Keyboard" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="AltKeyDown">
      <MemberSignature Language="C#" Value="public bool AltKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AltKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AltKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AltKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AltKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see langword="Boolean" />，该值指示是否按下了 Alt 键。</summary>
        <value>一个 <see langword="Boolean" /> 值：如果按下了 Alt 键，则为 <see langword="True" />；否则为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.AltKeyDown`属性提供的功能类似于<xref:System.Windows.Forms.Control.ModifierKeys%2A>属性。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Computer.Keyboard.AltKeyDown`属性来确定是否按下计算机的 ALT 键。  
  
 [!code-vb[VbVbalrMyComputer#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#23)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see langword="Boolean" />，该值指示 Caps Lock 是否已打开。</summary>
        <value>一个 <see langword="Boolean" /> 值：如果 Caps Lock 已打开，则为 <see langword="True" />；否则为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回仅 caps LOCK 键的状态。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Computer.Keyboard.CapsLock`属性来确定计算机的 CAPS LOCK 已开启。  
  
 [!code-vb[VbVbalrMyComputer#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="CtrlKeyDown">
      <MemberSignature Language="C#" Value="public bool CtrlKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CtrlKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CtrlKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CtrlKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CtrlKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see langword="Boolean" />，该值指示是否按下了 Ctrl 键。</summary>
        <value>一个 <see langword="Boolean" /> 值。 如果 CTRL 键处于按下状态，则为 <see langword="True" />；否则为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.CtrlKeyDown`属性提供的功能类似于<xref:System.Windows.Forms.Control.ModifierKeys%2A>属性。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Computer.Keyboard.CtrlKeyDown`属性来确定是否按下计算机的 CTRL 键。  
  
 [!code-vb[VbVbalrMyComputer#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="NumLock">
      <MemberSignature Language="C#" Value="public bool NumLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NumLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NumLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see langword="Boolean" />，该值指示 Num Lock 键是否已打开。</summary>
        <value>一个 <see langword="Boolean" /> 值。 如果 NUM LOCK 处于开启状态，则为 <see langword="True" />；否则为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回仅 NUM LOCK 键的状态。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Computer.Keyboard.NumLock`属性来确定计算机的 NUM LOCK 键是否亮起。  
  
 [!code-vb[VbVbalrMyComputer#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="ScrollLock">
      <MemberSignature Language="C#" Value="public bool ScrollLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScrollLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see langword="Boolean" />，该值指示 Scroll Lock 键是否已打开。</summary>
        <value>一个 <see langword="Boolean" /> 值。 如果 Scroll Lock 已打开，则为 <see langword="True" />；否则为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回仅 SCROLL LOCK 键的状态。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Computer.Keyboard.ScrollLock`属性来确定计算机的 SCROLL LOCK 键是否亮起。  
  
 [!code-vb[VbVbalrMyComputer#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendKeys">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向活动窗口发送一个或多个键击，就像在键盘键入一样。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string -&gt; unit" Usage="keyboard.SendKeys keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">一个 <see langword="String" />，定义要发送的键。</param>
        <summary>向活动窗口发送一个或多个键击，就像在键盘键入一样。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys`方法提供的功能类似于<xref:System.Windows.Forms.SendKeys.Send%2A>和<xref:System.Windows.Forms.SendKeys.SendWait%2A>方法。  
  
 `wait`参数非常有用，如果在你的应用程序可以继续之前，必须完成其他应用程序。  
  
> [!NOTE]
>  由于没有激活其他应用程序的托管的方法，你可以使用此类当前应用程序中，手动选择窗口发送键，或使用 Windows API 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。 有关详细信息，请参阅[演练： 调用 Windows Api](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md)。  
  
 `keys`自变量可以指定任何单个项或任何与键组合 ALT、 CTRL 或 SHIFT （或这些密钥的任意组合）。 每个键表示由一个或多个字符，如`a`字符"a"，或`{ENTER}`ENTER 键。  
  
 若要将某个键组合使用 shift 键，在前面使用的键代码`+`（加号）。 若要将某个键组合使用 CTRL，在前面使用的键代码`^`（插入符号）。 若要将某个键与 ALT 组合，在前面使用的键代码`%`（百分号）。 若要指定重复键，使用该窗体`{`*键数*`}`。 必须放置之间留一个空格*密钥*和*数*。 例如，`{LEFT 42}`意味着"按向左的箭头键 42 次";`{h 10}`表示"按 'h' 10 次。"  
  
 下表列出可用于指定当按下 （如 ENTER 或选项卡上） 的相应密钥时不会显示的字符的代码。  
  
|键|代码|  
|-|-|  
|退格符|{退格符} 或 {BS}|  
|中断|{BREAK}|  
|大写锁定|{CAPSLOCK}|  
|清除|{清除}|  
|DELETE|{删除} 或 {DEL}|  
|向下键|{DOWN}|  
|End|{结束}|  
|Enter 键 （数字键盘）|{输入}|  
|Enter|~|  
|Esc|{转义} 或 {ESC}|  
|帮助|{HELP}|  
|Home|{主页}|  
|Ins|{插入}|  
|向左键|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|返回|{返回}|  
|向右键|{RIGHT}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|Tab|{选项卡}|  
|向上键|{UP}|  
|F1 到 F15|{F1} 通过 {F15}|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Computer.Keyboard.SendKeys`方法若要将击键发送到外部应用程序，计算器应用程序，通过启动`Shell`函数。  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 如果找不到具有请求的进程标识符的应用程序，则会引发 <xref:System.ArgumentException> 异常。  
  
 对 `Shell` 函数的调用需要完全信任（<xref:System.Security.SecurityException> 类）。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">存在部分信任的情况，此时用户缺少足够的权限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制文件和文件夹的访问权限。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制用户界面和剪贴板相关的权限。 关联枚举：<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys, bool wait);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys, bool wait) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String, wait As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys, bool wait);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string * bool -&gt; unit" Usage="keyboard.SendKeys (keys, wait)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="wait" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keys">一个 <see langword="String" />，定义要发送的键。</param>
        <param name="wait">可选。 一个 <see langword="Boolean" /> 值，指定在应用程序继续之前是否等待键击处理完成。 默认值为 <see langword="True" />。</param>
        <summary>向活动窗口发送一个或多个键击，就像在键盘键入一样。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys`方法提供的功能类似于<xref:System.Windows.Forms.SendKeys.Send%2A>和<xref:System.Windows.Forms.SendKeys.SendWait%2A>方法。  
  
 `wait`参数非常有用，如果在你的应用程序可以继续之前，必须完成其他应用程序。  
  
> [!NOTE]
>  由于没有激活其他应用程序的托管的方法，你可以使用此类当前应用程序中，手动选择窗口发送键，或使用 Windows API 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。 有关详细信息，请参阅[演练： 调用 Windows Api](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md)。  
  
 `keys`自变量可以指定任何单个项或任何与键组合 ALT、 CTRL 或 SHIFT （或这些密钥的任意组合）。 每个键表示由一个或多个字符，如`a`字符"a"，或`{ENTER}`ENTER 键。  
  
 若要将某个键组合使用 shift 键，在前面使用的键代码`+`（加号）。 若要将某个键组合使用 CTRL，在前面使用的键代码`^`（插入符号）。 若要将某个键与 ALT 组合，在前面使用的键代码`%`（百分号）。 若要指定重复键，使用该窗体`{`*键数*`}`。 必须放置之间留一个空格*密钥*和*数*。 例如，`{LEFT 42}`意味着"按向左的箭头键 42 次";`{h 10}`表示"按 'h' 10 次。"  
  
 下表列出可用于指定当按下 （如 ENTER 或选项卡上） 的相应密钥时不会显示的字符的代码。  
  
|键|代码|  
|-|-|  
|退格符|{退格符} 或 {BS}|  
|中断|{BREAK}|  
|大写锁定|{CAPSLOCK}|  
|清除|{清除}|  
|DELETE|{删除} 或 {DEL}|  
|向下键|{DOWN}|  
|End|{结束}|  
|Enter 键 （数字键盘）|{输入}|  
|Enter|~|  
|Esc|{转义} 或 {ESC}|  
|帮助|{HELP}|  
|Home|{主页}|  
|Ins|{插入}|  
|向左键|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|返回|{返回}|  
|向右键|{RIGHT}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|Tab|{选项卡}|  
|向上键|{UP}|  
|F1 到 F15|{F1} 通过 {F15}|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Computer.Keyboard.SendKeys`方法若要将击键发送到外部应用程序，计算器应用程序，通过启动`Shell`函数。  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 如果找不到具有请求的进程标识符的应用程序，则会引发 <xref:System.ArgumentException> 异常。  
  
 对 `Shell` 函数的调用需要完全信任（<xref:System.Security.SecurityException> 类）。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">存在部分信任的情况，此时用户缺少足够的权限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制文件和文件夹的访问权限。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制用户界面和剪贴板相关的权限。 关联枚举：<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ShiftKeyDown">
      <MemberSignature Language="C#" Value="public bool ShiftKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShiftKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShiftKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShiftKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShiftKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see langword="Boolean" />，该值指示是否按下了 Shift 键。</summary>
        <value>一个 <see langword="Boolean" /> 值。 如果 SHIFT 键处于按下状态，则为 <see langword="True" />；否则为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.ShiftKeyDown`属性提供的功能类似于<xref:System.Windows.Forms.Control.ModifierKeys%2A>属性。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Computer.Keyboard.ShiftKeyDown`属性来确定计算机的 SHIFT 键的其中一个是否关闭。  
  
 [!code-vb[VbVbalrMyComputer#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
  </Members>
</Type>