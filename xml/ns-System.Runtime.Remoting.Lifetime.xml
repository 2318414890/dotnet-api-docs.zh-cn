<Namespace Name="System.Runtime.Remoting.Lifetime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5ac8c7510ea8c5026f390f2936bebfb8b315c4f4" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="30735631" />
  </Metadata>
  <Docs>
    <summary>
      <span data-ttu-id="8e8bb-101">
        <see cref="N:System.Runtime.Remoting.Lifetime" /> 命名空间包含管理远程对象生存期的类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8e8bb-101">The <see cref="N:System.Runtime.Remoting.Lifetime" /> namespace contains classes that manage the lifetime of remote objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e8bb-102">传统上，分布式的垃圾回收使用引用计数和 ping 来控制对象的生存期。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-102">Traditionally, distributed garbage collection uses reference counts and pinging for control over the lifetime of objects.</span></span> <span data-ttu-id="8e8bb-103">这适用于有几个客户端，每个服务，但无法很好地有成千上万的每个服务的客户端。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-103">This works well when there are a few clients per service, but doesn't scale well when there are thousands of clients per service.</span></span> <span data-ttu-id="8e8bb-104">远程处理生存期服务将租约与每个服务相关联，并当其租约时间到期时删除服务。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-104">The remoting lifetime service associates a lease with each service, and deletes a service when its lease time expires.</span></span> <span data-ttu-id="8e8bb-105">生存期服务可能需要对传统的分布式垃圾回收器，该函数，它还将调整好每台服务器的客户端的数量增加时。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-105">The lifetime service can take on the function of a traditional distributed garbage collector, and it also adjusts well when the numbers of clients per server increases.</span></span>  
  
 <span data-ttu-id="8e8bb-106">每个应用程序域包含负责控制其域中的租约的租约管理器。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-106">Each application domain contains a lease manager that is responsible for controlling leases in its domain.</span></span> <span data-ttu-id="8e8bb-107">所有租约将定期都检查过期的租约时间。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-107">All leases are examined periodically for expired lease times.</span></span> <span data-ttu-id="8e8bb-108">如果租约已过期，一个或多个租约主办方是调用，并且可以续订租约。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-108">If a lease has expired, one or more of the lease's sponsors are invoked and given the opportunity to renew the lease.</span></span> <span data-ttu-id="8e8bb-109">如果没有主办方决定续订租约，租约管理器将移除该租约，并可由垃圾回收器收集该对象。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-109">If none of the sponsors decides to renew the lease, the lease manager removes the lease and the object can be collected by the garbage collector.</span></span> <span data-ttu-id="8e8bb-110">租约管理器维护具有按剩余租约时间排序的租约的租约列表。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-110">The lease manager maintains a lease list with leases sorted by remaining lease time.</span></span> <span data-ttu-id="8e8bb-111">剩余时间最短的租约都存储在列表顶部。</span><span class="sxs-lookup"><span data-stu-id="8e8bb-111">The leases with the shortest remaining time are stored at the top of the list.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>