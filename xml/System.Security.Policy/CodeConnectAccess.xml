<Type Name="CodeConnectAccess" FullName="System.Security.Policy.CodeConnectAccess">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6c72d2e15fade048a2b73080a97e60c80dd12d42" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30499851" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeConnectAccess" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeConnectAccess extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Policy.CodeConnectAccess" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeConnectAccess" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeConnectAccess" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定授予代码的网络资源访问权限。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 结合使用此类<xref:System.Security.Policy.NetCodeGroup>类来控制如何执行代码可以连接回站点它从下载。 这些类提供的编程控制<xref:System.Net.WebPermission>授予执行控制哪些方案和代码可以使用的端口访问其源站点的代码。 你可以指定方案和端口对允许使用基于代码的来源位置的 URL 中的方案。  
  
 若要创建<xref:System.Security.Policy.CodeConnectAccess>对象基于代码的原始方案，请使用<xref:System.Security.Policy.CodeConnectAccess.CreateOriginSchemeAccess%2A>方法。  
  
 若要创建<xref:System.Security.Policy.CodeConnectAccess>可以使用任何一种方案，但端口，使用受限对象<xref:System.Security.Policy.CodeConnectAccess.CreateAnySchemeAccess%2A>方法。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Security.Policy.NetCodeGroup>对象并将其添加到用户策略级别。  
  
 [!code-cpp[NclCodeGroup#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#3)]
 [!code-csharp[NclCodeGroup#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeConnectAccess (string allowScheme, int allowPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string allowScheme, int32 allowPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.CodeConnectAccess.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (allowScheme As String, allowPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeConnectAccess(System::String ^ allowScheme, int allowPort);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="allowScheme" Type="System.String" />
        <Parameter Name="allowPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="allowScheme">当前实例表示的 URI 方案。</param>
        <param name="allowPort">当前实例表示的端口。</param>
        <summary>初始化 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Policy.CodeConnectAccess.Scheme%2A>属性使用设置`allowScheme`参数。 方案转换为小写。 值<xref:System.Security.Policy.CodeConnectAccess.Scheme%2A>控制执行代码可用于连接到网络资源的方案。  
  
 <xref:System.Security.Policy.CodeConnectAccess.Port%2A>属性使用设置`allowPort`参数。 值<xref:System.Security.Policy.CodeConnectAccess.Port%2A>控制执行代码可用于连接到网络资源的端口。  
  
   
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Security.Policy.CodeConnectAccess>对象允许下载的代码以连接回其原始服务器使用 HTTP 协议和所用的端口上已下载。 有关示例，演示如何使用<xref:System.Security.Policy.CodeConnectAccess>对象创建的代码组并将代码组添加到策略级别，请参阅<xref:System.Security.Policy.CodeConnectAccess>类概述。  
  
 [!code-cpp[NclCodeGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#2)]
 [!code-csharp[NclCodeGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowScheme" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="allowScheme" /> 为空字符串 ("")。  
  
 或  
  
 <paramref name="allowScheme" /> 包含方案中不允许的字符。  
  
 或  
  
 <paramref name="allowPort" /> 小于 0。  
  
 或  
  
 <paramref name="allowPort" /> 大于 65,535。</exception>
      </Docs>
    </Member>
    <Member MemberName="AnyScheme">
      <MemberSignature Language="C#" Value="public static readonly string AnyScheme;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string AnyScheme" />
      <MemberSignature Language="DocId" Value="F:System.Security.Policy.CodeConnectAccess.AnyScheme" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AnyScheme As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ AnyScheme;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>包含表示方案通配符的字符串值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 作为构造的替代方法<xref:System.Security.Policy.CodeConnectAccess>对象使用此值，可以调用<xref:System.Security.Policy.CodeConnectAccess.CreateAnySchemeAccess%2A>方法来获取<xref:System.Security.Policy.CodeConnectAccess>对象，表示指定的端口和任何方案。  
  
 此字段的值是"*"。  
  
   
  
## Examples  
 下面的代码示例显示了此字段的值。  
  
 [!code-cpp[NclCodeGroup#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#6)]
 [!code-csharp[NclCodeGroup#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnySchemeAccess">
      <MemberSignature Language="C#" Value="public static System.Security.Policy.CodeConnectAccess CreateAnySchemeAccess (int allowPort);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Policy.CodeConnectAccess CreateAnySchemeAccess(int32 allowPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.CodeConnectAccess.CreateAnySchemeAccess(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAnySchemeAccess (allowPort As Integer) As CodeConnectAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Policy::CodeConnectAccess ^ CreateAnySchemeAccess(int allowPort);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.CodeConnectAccess</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="allowPort">返回的实例表示的端口。</param>
        <summary>返回一个 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 实例，该实例表示使用任何方案对指定端口的访问权限。</summary>
        <returns>指定端口的 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Policy.CodeConnectAccess>此方法返回的实例使用的方案通配符值<xref:System.Security.Policy.CodeConnectAccess.AnyScheme>("*") 来表示方案。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。 有关示例，演示如何使用<xref:System.Security.Policy.CodeConnectAccess>对象创建的代码组并将代码组添加到策略级别，请参阅<xref:System.Security.Policy.CodeConnectAccess>类概述。  
  
 [!code-cpp[NclCodeGroup#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#5)]
 [!code-csharp[NclCodeGroup#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowPort" /> 小于 0。  
  
 或  
  
 <paramref name="allowPort" /> 大于 65,535。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOriginSchemeAccess">
      <MemberSignature Language="C#" Value="public static System.Security.Policy.CodeConnectAccess CreateOriginSchemeAccess (int allowPort);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Policy.CodeConnectAccess CreateOriginSchemeAccess(int32 allowPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.CodeConnectAccess.CreateOriginSchemeAccess(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOriginSchemeAccess (allowPort As Integer) As CodeConnectAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Policy::CodeConnectAccess ^ CreateOriginSchemeAccess(int allowPort);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.CodeConnectAccess</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="allowPort">返回的实例表示的端口。</param>
        <summary>返回一个 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 实例，该实例表示使用代码的原始方案对指定端口的访问权限。</summary>
        <returns>指定端口的 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Policy.CodeConnectAccess>此方法返回的实例具有的方案值<xref:System.Security.Policy.CodeConnectAccess.OriginScheme>。 原始方案是从代码来源的 URI 的方案值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Security.Policy.CodeConnectAccess>对象创建的代码组并将代码组添加到策略级别。  
  
 [!code-cpp[NclCodeGroup#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#3)]
 [!code-csharp[NclCodeGroup#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowPort" /> 小于 0。  
  
 或  
  
 <paramref name="allowPort" /> 大于 65,535。</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultPort">
      <MemberSignature Language="C#" Value="public static readonly int DefaultPort;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 DefaultPort" />
      <MemberSignature Language="DocId" Value="F:System.Security.Policy.CodeConnectAccess.DefaultPort" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultPort As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int DefaultPort;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>包含用于表示默认端口的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要创建<xref:System.Security.Policy.CodeConnectAccess>对象，它具有的默认端口为指定的方案，请将此字段用作`allowPort`参数<xref:System.Security.Policy.CodeConnectAccess.%23ctor%2A>构造函数。  
  
 此字段的值为-3。  
  
   
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Security.Policy.CodeConnectAccess>对象，它指定方案和默认端口为 FTP 的 FTP。  
  
 [!code-cpp[NclCodeGroup#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#1)]
 [!code-csharp[NclCodeGroup#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.CodeConnectAccess.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">要与当前 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 对象进行比较的对象。</param>
        <summary>返回一个值，指示两个 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 对象是否表示相同的方案和端口。</summary>
        <returns>
          如果两个对象表示相同的方案和端口，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 两个<xref:System.Security.Policy.CodeConnectAccess>对象相等，如果其<xref:System.Security.Policy.CodeConnectAccess.Scheme%2A>和<xref:System.Security.Policy.CodeConnectAccess.Port%2A>属性值是否相等。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.CodeConnectAccess.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用作特定类型的哈希函数。</summary>
        <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="OriginPort">
      <MemberSignature Language="C#" Value="public static readonly int OriginPort;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 OriginPort" />
      <MemberSignature Language="DocId" Value="F:System.Security.Policy.CodeConnectAccess.OriginPort" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OriginPort As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int OriginPort;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>包含用于表示代码原始 URI 中的端口值的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要创建<xref:System.Security.Policy.CodeConnectAccess>与中执行代码的 URL 证据的端口具有相同的端口的对象使用该字段用作`allowPort`参数<xref:System.Security.Policy.CodeConnectAccess.%23ctor%2A>构造函数。  
  
 此字段的值是-4。  
  
   
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Security.Policy.CodeConnectAccess>对象，它指定 HTTP 方案和源端口。  
  
 [!code-cpp[NclCodeGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#2)]
 [!code-csharp[NclCodeGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginScheme">
      <MemberSignature Language="C#" Value="public static readonly string OriginScheme;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string OriginScheme" />
      <MemberSignature Language="DocId" Value="F:System.Security.Policy.CodeConnectAccess.OriginScheme" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OriginScheme As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ OriginScheme;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>包含用于表示代码原始 URL 中的方案的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不要使用此字段与<xref:System.Security.Policy.CodeConnectAccess.%23ctor%2A>构造函数。 请改用<xref:System.Security.Policy.CodeConnectAccess.CreateOriginSchemeAccess%2A>方法。  
  
 此字段的值是"$origin"。  
  
   
  
## Examples  
 下面的代码示例显示了此字段的值。  
  
 [!code-cpp[NclCodeGroup#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#6)]
 [!code-csharp[NclCodeGroup#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Security.Policy.CodeConnectAccess.Port" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Port As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Port { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前实例表示的端口。</summary>
        <value>一个 <see cref="T:System.Int32" /> 值，标识与 <see cref="P:System.Security.Policy.CodeConnectAccess.Scheme" /> 属性一起使用的计算机端口。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 端口的值为 0 到 65535 之间。 当你创建的实例时指定端口值<xref:System.Security.Policy.CodeConnectAccess>。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclCodeGroup#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#4)]
 [!code-csharp[NclCodeGroup#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.Security.Policy.CodeConnectAccess.Scheme" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前实例表示的 URI 方案。</summary>
        <value>标识 URI 方案的 <see cref="T:System.String" />，已转换为小写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你创建的实例时指定的方案值<xref:System.Security.Policy.CodeConnectAccess>。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclCodeGroup#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclCodeGroup/cpp/sample.cpp#4)]
 [!code-csharp[NclCodeGroup#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclCodeGroup/CS/sample.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>