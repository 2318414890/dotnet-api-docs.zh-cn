<Type Name="Prompt" FullName="System.Speech.Synthesis.Prompt">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8d29dfe7e39e1f7c19f076434f86854436b386a4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408548" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Prompt" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Prompt extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.Prompt" />
  <TypeSignature Language="VB.NET" Value="Public Class Prompt" />
  <TypeSignature Language="C++ CLI" Value="public ref class Prompt" />
  <TypeSignature Language="F#" Value="type Prompt = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>由 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />表示有关的可呈现的信息，文本或音频文件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Speech.Synthesis.Prompt>对象可以包含纯文本，文本标记语言或音频文件进行格式设置。  
  
 一个空<xref:System.Speech.Synthesis.Prompt>对象创建的每个新实例<xref:System.Speech.Synthesis.PromptBuilder>。  <xref:System.Speech.Synthesis.PromptBuilder>类提供的方法添加的内容，包括文本、 SSML 标记、 书签、 和预先录制音频文件 （如.wav 文件），空<xref:System.Speech.Synthesis.Prompt>它所包含的对象。 通常，应用程序将使用<xref:System.Speech.Synthesis.PromptBuilder>，而不是<xref:System.Speech.Synthesis.Prompt>对象，若要创建提示并使用内容填充它们。  
  
 若要生成的内容的语音<xref:System.Speech.Synthesis.Prompt>对象，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建 <see cref="T:System.Speech.Synthesis.Prompt" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Prompt (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.Prompt.#ctor(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Prompt(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.Prompt : System.Speech.Synthesis.PromptBuilder -&gt; System.Speech.Synthesis.Prompt" Usage="new System.Speech.Synthesis.Prompt promptBuilder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">要讲述的内容。</param>
        <summary>利用 <see cref="T:System.Speech.Synthesis.Prompt" /> 对象创建 <see cref="T:System.Speech.Synthesis.PromptBuilder" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Prompt (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.Prompt.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Prompt(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.Prompt : string -&gt; System.Speech.Synthesis.Prompt" Usage="new System.Speech.Synthesis.Prompt textToSpeak" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">要朗读的文本。</param>
        <summary>创建 <see cref="T:System.Speech.Synthesis.Prompt" /> 类的新实例并指定要朗读的文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建<xref:System.Speech.Synthesis.Prompt>从字符串的对象并将对象作为参数传递<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Prompt (string textToSpeak, System.Speech.Synthesis.SynthesisTextFormat media);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string textToSpeak, valuetype System.Speech.Synthesis.SynthesisTextFormat media) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.Prompt.#ctor(System.String,System.Speech.Synthesis.SynthesisTextFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (textToSpeak As String, media As SynthesisTextFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Prompt(System::String ^ textToSpeak, System::Speech::Synthesis::SynthesisTextFormat media);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.Prompt : string * System.Speech.Synthesis.SynthesisTextFormat -&gt; System.Speech.Synthesis.Prompt" Usage="new System.Speech.Synthesis.Prompt (textToSpeak, media)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="media" Type="System.Speech.Synthesis.SynthesisTextFormat" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">要朗读的文本。</param>
        <param name="media">用来指定文本格式的值。</param>
        <summary>创建 <see cref="T:System.Speech.Synthesis.Prompt" /> 类的新实例并指定要朗读的文本，和其格式是否为纯文本或标记语言。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容`textToSpeak`参数必须包含`speak`元素，并且必须符合[语音合成标记语言 (SSML) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)。 有关详细信息，请参阅[语音合成标记语言参考](http://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94)。  
  
   
  
## Examples  
 下面的示例生成一个字符串，包含 SSML 标记，创建<xref:System.Speech.Synthesis.Prompt>对象从字符串，并说出提示。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build an SSML prompt in a string.  
        string fileName = "<speak version=\"1.0\" ";  
        fileName += "xmlns=\"http://www.w3.org/2001/10/synthesis\" ";  
        fileName += "xml:lang=\"en-US\">";  
        fileName += "Say a name for the new file <mark name=\"fileName\" />.";  
        fileName += "</speak>";  
  
        // Create a Prompt object from the string.  
        Prompt ssmlFile = new Prompt(fileName, SynthesisTextFormat.Ssml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.Prompt.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Speech.Synthesis.Prompt.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Speech.Synthesis.Prompt" /> 是否已经完成播放。</summary>
        <value>如果已完成提示，则返回 <see langword="true" />，否则返回 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>