<Type Name="SpeechSynthesizer" FullName="System.Speech.Synthesis.SpeechSynthesizer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd0e6eb123f9b6aae2230f80156e89d3042cb7ee" /><Meta Name="ms.sourcegitcommit" Value="0b4deef443af9fe6334aa34b8a17190223bf0486" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/14/2019" /><Meta Name="ms.locfileid" Value="65609709" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpeechSynthesizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpeechSynthesizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeechSynthesizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpeechSynthesizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechSynthesizer sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechSynthesizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c2c72-101">提供对已安装的语音合成引擎的功能的访问。</span><span class="sxs-lookup"><span data-stu-id="c2c72-101">Provides access to the functionality of an installed speech synthesis engine.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-102">当您创建一个新<xref:System.Speech.Synthesis.SpeechSynthesizer>对象，它使用默认系统声音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-102">When you create a new <xref:System.Speech.Synthesis.SpeechSynthesizer> object, it uses the default system voice.</span></span> <span data-ttu-id="c2c72-103">若要配置<xref:System.Speech.Synthesis.SpeechSynthesizer>若要使用其中一个安装的语音合成 （文字到语音） 语音，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>或<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-103">To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method.</span></span> <span data-ttu-id="c2c72-104">若要获取有关哪些安装语音的信息，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类。</span><span class="sxs-lookup"><span data-stu-id="c2c72-104">To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.</span></span>  
  
 <span data-ttu-id="c2c72-105">此类还提供了控制语音合成的以下方面：</span><span class="sxs-lookup"><span data-stu-id="c2c72-105">This class also provides control over the following aspects of speech synthesis:</span></span>  
  
-   <span data-ttu-id="c2c72-106">若要配置的输出<xref:System.Speech.Synthesis.SpeechSynthesizer>对象，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>，和<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-106">To configure the output for the <xref:System.Speech.Synthesis.SpeechSynthesizer> object, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.</span></span>  
  
-   <span data-ttu-id="c2c72-107">若要生成语音，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>，或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-107">To generate speech, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.</span></span> <span data-ttu-id="c2c72-108"><xref:System.Speech.Synthesis.SpeechSynthesizer>可以生成文本，从语音<xref:System.Speech.Synthesis.Prompt>或<xref:System.Speech.Synthesis.PromptBuilder>对象，或从[语音合成标记语言 (SSML) 版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)。</span><span class="sxs-lookup"><span data-stu-id="c2c72-108">The <xref:System.Speech.Synthesis.SpeechSynthesizer> can produce speech from text, a <xref:System.Speech.Synthesis.Prompt> or <xref:System.Speech.Synthesis.PromptBuilder> object, or from [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763).</span></span>  
  
-   <span data-ttu-id="c2c72-109">若要暂停和恢复语音合成，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>和<xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-109">To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.</span></span>  
  
-   <span data-ttu-id="c2c72-110">若要添加或删除词典，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>和<xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-110">To add or remove lexicons, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> methods.</span></span> <span data-ttu-id="c2c72-111"><xref:System.Speech.Synthesis.SpeechSynthesizer>可以使用一个或多个词典来引导其发音的词。</span><span class="sxs-lookup"><span data-stu-id="c2c72-111">The <xref:System.Speech.Synthesis.SpeechSynthesizer> can use one or more lexicons to guide its pronunciation of words.</span></span>  
  
-   <span data-ttu-id="c2c72-112">若要修改语音输出的传递，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A>和<xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c2c72-112">To modify the delivery of speech output, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> properties.</span></span>  
  
 <span data-ttu-id="c2c72-113"><xref:System.Speech.Synthesis.SpeechSynthesizer>遇到提示中的某些功能时引发事件: (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>， <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>， <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>，和<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>)。</span><span class="sxs-lookup"><span data-stu-id="c2c72-113">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises events when it encounters certain features in prompts: (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>).</span></span> <span data-ttu-id="c2c72-114">它还触发报告开始事件 (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) 和结束 (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) 的朗读操作和语音的更改 (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>)。</span><span class="sxs-lookup"><span data-stu-id="c2c72-114">It also raises events that report on the start (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) and end (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) of speak operations and on the change of the speaking voice (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c2c72-115">每次释放对 <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Speech.Synthesis.SpeechSynthesizer>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-115">Always call <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> before you release your last reference to the <xref:System.Speech.Synthesis.SpeechSynthesizer>.</span></span> <span data-ttu-id="c2c72-116">否则，在垃圾回收器调用 <xref:System.Speech.Synthesis.SpeechSynthesizer> 对象的 <xref:System.Object.Finalize%2A> 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="c2c72-116">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Speech.Synthesis.SpeechSynthesizer> object's <xref:System.Object.Finalize%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-117">下面的示例是初始化一个控制台应用程序的一部分<xref:System.Speech.Synthesis.SpeechSynthesizer>对象并说出一个字符串。</span><span class="sxs-lookup"><span data-stu-id="c2c72-117">The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and speaks a string.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string.  
      synth.Speak("This example demonstrates a basic use of Speech Synthesizer");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
    <altmember cref="T:System.Speech.Synthesis.Prompt" />
    <altmember cref="T:System.Speech.Synthesis.PromptBuilder" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361644(v%3doffice.14)"><span data-ttu-id="c2c72-118">语音合成</span><span class="sxs-lookup"><span data-stu-id="c2c72-118">Speech Synthesis</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechSynthesizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-119">初始化 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c2c72-119">Initializes a new instance of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-120">当您初始化一个新<xref:System.Speech.Synthesis.SpeechSynthesizer>实例，它使用默认系统声音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-120">When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer> instance, it uses the default system voice.</span></span> <span data-ttu-id="c2c72-121">若要配置<xref:System.Speech.Synthesis.SpeechSynthesizer>若要使用其中一个安装的语音合成 （文字到语音） 语音，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>或<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-121">To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method.</span></span> <span data-ttu-id="c2c72-122">若要获取有关哪些安装语音的信息，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类。</span><span class="sxs-lookup"><span data-stu-id="c2c72-122">To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public void AddLexicon (Uri uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLexicon(class System.Uri uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLexicon(Uri ^ uri, System::String ^ mediaType);" />
      <MemberSignature Language="F#" Value="member this.AddLexicon : Uri * string -&gt; unit" Usage="speechSynthesizer.AddLexicon (uri, mediaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="c2c72-123">词典信息的位置。</span><span class="sxs-lookup"><span data-stu-id="c2c72-123">The location of the lexicon information.</span></span></param>
        <param name="mediaType"><span data-ttu-id="c2c72-124">词典的媒体类型。</span><span class="sxs-lookup"><span data-stu-id="c2c72-124">The media type of the lexicon.</span></span> <span data-ttu-id="c2c72-125">媒体类型值不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="c2c72-125">Media type values are not case sensitive.</span></span></param>
        <summary><span data-ttu-id="c2c72-126">添加词典到<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-126">Adds a lexicon to the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-127">发音词典是字词或短语以及及其发音，字母和受支持的语音字母表中的字符组成的集合。</span><span class="sxs-lookup"><span data-stu-id="c2c72-127">A pronunciation lexicon is a collection of words or phrases together with their pronunciations, which consist of letters and characters from a supported phonetic alphabet.</span></span> <span data-ttu-id="c2c72-128">词典可用于在应用程序中指定自定义发音为专用的词汇。</span><span class="sxs-lookup"><span data-stu-id="c2c72-128">You can use a lexicon to specify custom pronunciations for specialized vocabulary in your application.</span></span>  
  
 <span data-ttu-id="c2c72-129">发音外部词典文件中指定的优先级高于发音的语音合成器的内部字典或字典。</span><span class="sxs-lookup"><span data-stu-id="c2c72-129">Pronunciations specified in an external lexicon file take precedence over the pronunciations of the speech synthesizer's internal lexicon or dictionary.</span></span> <span data-ttu-id="c2c72-130">但是，发音中创建的任何提示指定内联<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>，或<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>方法优先于任何词典中指定的发音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-130">However, pronunciations specified inline in prompts created with any of the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods take precedence over pronunciations specified in any lexicon.</span></span> <span data-ttu-id="c2c72-131">内联发音仅适用于 word 的单一匹配项。</span><span class="sxs-lookup"><span data-stu-id="c2c72-131">Inline pronunciations apply only to a single occurrence of a word.</span></span> <span data-ttu-id="c2c72-132">请参阅[词典和的注音字母表](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14))有关详细信息。</span><span class="sxs-lookup"><span data-stu-id="c2c72-132">See [Lexicons and Phonetic Alphabets](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) for more information.</span></span>  
  
 <span data-ttu-id="c2c72-133">您可以添加到多个词典<xref:System.Speech.Synthesis.SpeechSynthesizer>对象。目前支持两个值`mediaType`参数：</span><span class="sxs-lookup"><span data-stu-id="c2c72-133">You can add multiple lexicons to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object.Two values are currently supported for the `mediaType` parameter:</span></span>  
  
-   <span data-ttu-id="c2c72-134">该值`application/pls+xml`指示词典符合[发音词典规范 (PLS) 版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201766)。</span><span class="sxs-lookup"><span data-stu-id="c2c72-134">The value `application/pls+xml` indicates that the lexicon conforms to the [Pronunciation Lexicon Specification (PLS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201766).</span></span> <span data-ttu-id="c2c72-135">这是要使用的首选的格式。</span><span class="sxs-lookup"><span data-stu-id="c2c72-135">This is the preferred format to use.</span></span>  
  
-   <span data-ttu-id="c2c72-136">值`application/vdn.ms-sapi-lex`指示词典格式为未压缩的词典，是一种 Microsoft 专有格式。</span><span class="sxs-lookup"><span data-stu-id="c2c72-136">The value `application/vdn.ms-sapi-lex` indicates that the lexicon format is Uncompressed Lexicon, which is a Microsoft-proprietary format.</span></span> <span data-ttu-id="c2c72-137">这是旧格式，我们建议使用上文所述的 PLS 格式。</span><span class="sxs-lookup"><span data-stu-id="c2c72-137">This is a legacy format and we recommend that you use the PLS format described above.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-138">下面的示例演示了添加和删除词典包含"蓝色"一词的自定义发音的效果。</span><span class="sxs-lookup"><span data-stu-id="c2c72-138">The following example demonstrates the effect of adding and removing a lexicon that contains a custom pronunciation for the word "blue".</span></span> <span data-ttu-id="c2c72-139">词典听起来要像"bleep"定义"蓝色"发音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-139">The lexicon defines the pronunciation of "blue" to sound like "bleep".</span></span> <span data-ttu-id="c2c72-140">加载词典，语音合成器则使用在词典中定义的发音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-140">While the lexicon is loaded, the speech synthesizer uses the pronunciation defined in the lexicon.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Add a lexicon that changes the pronunciation of "blue".  
        synth.AddLexicon(new Uri("C:\\test\\Blue.pls"), "application/pls+xml");  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Remove the lexicon.  
        synth.RemoveLexicon(new Uri("C:\\test\\Blue.pls"));  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 <span data-ttu-id="c2c72-141">以下是词典文件 Blue.pls 的内容：</span><span class="sxs-lookup"><span data-stu-id="c2c72-141">Following are the contents of the lexicon file Blue.pls:</span></span>  
  
```xml  
<?xml version="1.0" encoding="UTF-8"?>  
  
<lexicon version="1.0"   
      xmlns="http://www.w3.org/2005/01/pronunciation-lexicon"  
      alphabet="x-microsoft-ups" xml:lang="en-US">  
  
  <lexeme>  
    <grapheme> blue </grapheme>  
    <phoneme> B L I P </phoneme>  
  </lexeme>  
  
</lexicon>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="BookmarkReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BookmarkReached As EventHandler(Of BookmarkReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::BookmarkReachedEventArgs ^&gt; ^ BookmarkReached;" />
      <MemberSignature Language="F#" Value="member this.BookmarkReached : EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " Usage="member this.BookmarkReached : System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-142">时引发<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />遇到一条提示中的书签。</span><span class="sxs-lookup"><span data-stu-id="c2c72-142">Raised when the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> encounters a bookmark in a prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-143"><xref:System.Speech.Synthesis.SpeechSynthesizer>处理的任何时将引发此事件<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>，或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-143">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event while processing any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span> <span data-ttu-id="c2c72-144">与事件相关联的数据有关的信息，请参阅<xref:System.Speech.Synthesis.BookmarkReachedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-144">For information about data associated with the event, see <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>.</span></span>  
  
 <span data-ttu-id="c2c72-145">您可以添加使用书签<xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-145">You can add bookmarks using the <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-146">以下示例创建包含两个书签，并将输出发送到播放 WAV 文件的提示。</span><span class="sxs-lookup"><span data-stu-id="c2c72-146">The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback.</span></span> <span data-ttu-id="c2c72-147">处理程序<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>事件引发到控制台时，事件会写入书签和音频流中的位置的名称。</span><span class="sxs-lookup"><span data-stu-id="c2c72-147">The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechSynthesizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-148">处置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象并释放会话期间使用的资源。</span><span class="sxs-lookup"><span data-stu-id="c2c72-148">Disposes the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SpeechSynthesizer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="speechSynthesizer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-149">充当一种安全措施来清理资源的事件中<see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" />不会调用方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-149">Acts as a safeguard to clean up resources in the event that the <see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" /> method is not called.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentlySpokenPrompt">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentlySpokenPrompt () As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ GetCurrentlySpokenPrompt();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentlySpokenPrompt : unit -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.GetCurrentlySpokenPrompt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-150">获取在提示符下<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />正在说话。</span><span class="sxs-lookup"><span data-stu-id="c2c72-150">Gets the prompt that the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> is speaking.</span></span></summary>
        <returns><span data-ttu-id="c2c72-151">返回当前正在朗读的提示对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-151">Returns the prompt object that is currently being spoken.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInstalledVoices">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2c72-152">返回当前安装在系统的合成 （文字到语音） 语音的语音的集合。</span><span class="sxs-lookup"><span data-stu-id="c2c72-152">Returns the collection of speech synthesis (text-to-speech) voices that are currently installed on the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-153">当应用程序调用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>，该方法会验证，每个语音 （适用于文本到语音转换引擎） 中找到注册表满足某些最低标准。</span><span class="sxs-lookup"><span data-stu-id="c2c72-153">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices (engines for text-to-speech) it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="c2c72-154">未通过验证，任何语音<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>设置其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性设置为`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-154">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="c2c72-155">应用程序不能选择语音其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性是`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-155">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="c2c72-156">通常情况下，应用程序不会设置语音<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c2c72-156">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices () As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices();" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-157">返回所有已安装的语音合成 （文字到语音） 语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-157">Returns all of the installed speech synthesis (text-to-speech) voices.</span></span></summary>
        <returns><span data-ttu-id="c2c72-158">返回当前在系统上安装的语音的只读集合。</span><span class="sxs-lookup"><span data-stu-id="c2c72-158">Returns a read-only collection of the voices currently installed on the system.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-159">语音是用于在系统安装的语音合成 （文字到语音或 TTS） 引擎。</span><span class="sxs-lookup"><span data-stu-id="c2c72-159">A voice is an engine for speech synthesis (text-to-speech or TTS) that is installed on the system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-160">下面的示例是初始化一个控制台应用程序的一部分<xref:System.Speech.Synthesis.SpeechSynthesizer>对象和已安装的语音 （适用于语音合成引擎） 的列表输出到控制台并演示了可用于每个语音的信息。</span><span class="sxs-lookup"><span data-stu-id="c2c72-160">The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices.   
        Console.WriteLine("Installed voices -");  
        foreach (InstalledVoice voice in synth.GetInstalledVoices())  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          string AudioFormats = "";  
          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  
          {  
            AudioFormats += String.Format("{0}\n",  
            fmt.EncodingFormat.ToString());  
          }  
  
          Console.WriteLine(" Name:          " + info.Name);  
          Console.WriteLine(" Culture:       " + info.Culture);  
          Console.WriteLine(" Age:           " + info.Age);  
          Console.WriteLine(" Gender:        " + info.Gender);  
          Console.WriteLine(" Description:   " + info.Description);  
          Console.WriteLine(" ID:            " + info.Id);  
          Console.WriteLine(" Enabled:       " + voice.Enabled);  
          if (info.SupportedAudioFormats.Count != 0)  
          {  
            Console.WriteLine( " Audio formats: " + AudioFormats);  
          }  
          else  
          {  
            Console.WriteLine(" No supported audio formats found");  
          }  
  
          string AdditionalInfo = "";  
          foreach (string key in info.AdditionalInfo.Keys)  
          {  
            AdditionalInfo += String.Format("  {0}: {1}\n", key, info.AdditionalInfo[key]);  
          }  
  
          Console.WriteLine(" Additional Info - " + AdditionalInfo);  
          Console.WriteLine();  
        }  
      }  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints" />
        <altmember cref="Overload:System.Speech.Synthesis.PromptBuilder.StartVoice" />
      </Docs>
    </Member>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices (culture As CultureInfo) As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : System.Globalization.CultureInfo -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="c2c72-161">语音必须支持的区域设置。</span><span class="sxs-lookup"><span data-stu-id="c2c72-161">The locale that the voice must support.</span></span></param>
        <summary><span data-ttu-id="c2c72-162">返回所有已安装的语音合成 （文字到语音） 语音支持特定的区域设置。</span><span class="sxs-lookup"><span data-stu-id="c2c72-162">Returns all of the installed speech synthesis  (text-to-speech) voices that support a specific locale.</span></span></summary>
        <returns><span data-ttu-id="c2c72-163">返回当前安装在系统上支持指定的区域设置的语音的只读集合。</span><span class="sxs-lookup"><span data-stu-id="c2c72-163">Returns a read-only collection of the voices currently installed on the system that support the specified locale.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-164">如果没有已安装的语音支持指定的区域设置，此方法返回一个空集合。</span><span class="sxs-lookup"><span data-stu-id="c2c72-164">If none of the installed voices support the specified locale, this method returns an empty collection.</span></span>  
  
 <span data-ttu-id="c2c72-165">Microsoft Windows 和 System.Speech API 接受所有有效语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="c2c72-165">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="c2c72-166">若要执行文本到语音转换使用的区域性属性中指定的语言，必须安装支持该语言-国家/地区代码的语音合成引擎。</span><span class="sxs-lookup"><span data-stu-id="c2c72-166">To perform text-to-speech using the language specified in the Culture property, a speech synthesis engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="c2c72-167">随 Microsoft Windows 7 的语音合成引擎使用以下语言-国家/地区代码：</span><span class="sxs-lookup"><span data-stu-id="c2c72-167">The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:</span></span>  
  
-   <span data-ttu-id="c2c72-168">EN-US。</span><span class="sxs-lookup"><span data-stu-id="c2c72-168">en-US.</span></span> <span data-ttu-id="c2c72-169">英语 （美国）</span><span class="sxs-lookup"><span data-stu-id="c2c72-169">English (United States)</span></span>  
  
-   <span data-ttu-id="c2c72-170">zh CN。</span><span class="sxs-lookup"><span data-stu-id="c2c72-170">zh-CN.</span></span> <span data-ttu-id="c2c72-171">中文 （中国）</span><span class="sxs-lookup"><span data-stu-id="c2c72-171">Chinese (China)</span></span>  
  
-   <span data-ttu-id="c2c72-172">zh-TW。</span><span class="sxs-lookup"><span data-stu-id="c2c72-172">zh-TW.</span></span> <span data-ttu-id="c2c72-173">中文 （台湾）</span><span class="sxs-lookup"><span data-stu-id="c2c72-173">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="c2c72-174">此外允许使用两个字母的语言代码，例如"en"。</span><span class="sxs-lookup"><span data-stu-id="c2c72-174">Two-letter language codes such as "en" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-175">下面的示例是初始化一个控制台应用程序的一部分<xref:System.Speech.Synthesis.SpeechSynthesizer>对象，并输出到控制台的已安装的语音支持 EN-US 区域设置的列表。</span><span class="sxs-lookup"><span data-stu-id="c2c72-175">The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices that support the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices that  
        // support the en-US locale.   
        Console.WriteLine("Installed voices for the en-US locale:");  
        foreach (InstalledVoice voice in  
          synthesizer.GetInstalledVoices(new CultureInfo("en-US")))  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          OutputVoiceInfo(info);  
        }  
  
        // Output information about the current voice.  
        Console.WriteLine();  
        Console.WriteLine("Current voice:");  
        OutputVoiceInfo(synthesizer.Voice);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Display information about a synthesizer voice.  
    private static void OutputVoiceInfo(VoiceInfo info)  
    {  
      Console.WriteLine("  Name: {0}, culture: {1}, gender: {2}, age: {3}.",  
        info.Name, info.Culture, info.Gender, info.Age);  
      Console.WriteLine("    Description: {0}", info.Description);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="speechSynthesizer.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-176">暂停<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-176">Pauses the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="PhonemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PhonemeReached As EventHandler(Of PhonemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::PhonemeReachedEventArgs ^&gt; ^ PhonemeReached;" />
      <MemberSignature Language="F#" Value="member this.PhonemeReached : EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " Usage="member this.PhonemeReached : System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-177">当音素达到时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-177">Raised when a phoneme is reached.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-178">一个音素是书面语言的基本组件，通常以字母的字母 （或两个字母的组合） 表示一个或多个不同的声音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-178">A phoneme is a basic component of written language, typically a letter of an alphabet (or the combination of two letters) that represents one or more distinct sounds.</span></span> <span data-ttu-id="c2c72-179">例如，字母"c"是听起来像"s"中"cinder"或"catch"中"k"等音素。</span><span class="sxs-lookup"><span data-stu-id="c2c72-179">For example, the letter "c" is a phoneme that may sound like "s" in "cinder", or like "k" in "catch".</span></span> <span data-ttu-id="c2c72-180">文字是音素的集合。</span><span class="sxs-lookup"><span data-stu-id="c2c72-180">A written word is an assemblage of phonemes.</span></span> <span data-ttu-id="c2c72-181">单词中更改一个音素将改变它的拼写。</span><span class="sxs-lookup"><span data-stu-id="c2c72-181">Changing a phoneme in a word will alter its spelling.</span></span>  
  
 <span data-ttu-id="c2c72-182">一个<xref:System.Speech.Synthesis.SpeechSynthesizer>实例生成<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>的每个部分构成一个音素某个词的事件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-182">A <xref:System.Speech.Synthesis.SpeechSynthesizer> instance generates a <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> event for each portion of a word that constitutes a phoneme.</span></span> <span data-ttu-id="c2c72-183">例如，词"主题"将生成三个<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>事件; 为"th"声音、"e"声音和"m"声音 (me) 的一个。</span><span class="sxs-lookup"><span data-stu-id="c2c72-183">For example, for the word "theme" would generate three <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> events; one for the "th" sound, one for the "e" sound, and one for the "m" sound (me).</span></span>  
  
 <span data-ttu-id="c2c72-184">有关示例，以及与事件相关联的数据有关的信息，请参阅<xref:System.Speech.Synthesis.PhonemeReachedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-184">For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public int Rate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rate" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberSignature Language="VB.NET" Value="Public Property Rate As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rate { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Rate : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-185">获取或设置的语速<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-185">Gets or sets the speaking rate of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <value><span data-ttu-id="c2c72-186">返回的语速<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象，从-10 到 10。</span><span class="sxs-lookup"><span data-stu-id="c2c72-186">Returns the speaking rate of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object, from -10 through 10.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2c72-187">下面的示例使用一个字符串，语言与设置为-2 的语速。</span><span class="sxs-lookup"><span data-stu-id="c2c72-187">The following example speaks a string with the speaking rate set to -2.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Set a value for the speaking rate.  
      synth.Rate = -2;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a text string synchronously.  
      synth.Speak("This example speaks a string with the speaking rate set to -2.");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }     
  }    
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.PromptStyle" />
        <altmember cref="T:System.Speech.Synthesis.PromptRate" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public void RemoveLexicon (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveLexicon(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveLexicon(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="member this.RemoveLexicon : Uri -&gt; unit" Usage="speechSynthesizer.RemoveLexicon uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="c2c72-188">词典文档的位置。</span><span class="sxs-lookup"><span data-stu-id="c2c72-188">The location of the lexicon document.</span></span></param>
        <summary><span data-ttu-id="c2c72-189">移除从词典<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-189">Removes a lexicon from the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-190">有关示例，请参见 <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-190">See <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="speechSynthesizer.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-191">恢复<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象后已暂停。</span><span class="sxs-lookup"><span data-stu-id="c2c72-191">Resumes the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object after it has been paused.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoice">
      <MemberSignature Language="C#" Value="public void SelectVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.SelectVoice : string -&gt; unit" Usage="speechSynthesizer.SelectVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c2c72-192">要选择的语音的名称。</span><span class="sxs-lookup"><span data-stu-id="c2c72-192">The name of the voice to select.</span></span></param>
        <summary><span data-ttu-id="c2c72-193">按名称选择特定语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-193">Selects a specific voice by name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-194">使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类来获取名称的安装可以选择的文本到语音转换 (TTS) 语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-194">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="c2c72-195">若要选择一种声音，请将传递的全部内容<xref:System.Speech.Synthesis.VoiceInfo.Name%2A>属性的参数作为<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-195">To select a voice, pass the entire contents of the <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> property as the argument for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span> <span data-ttu-id="c2c72-196"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象中选择包含的第一个已安装的语音`name`中的语音<xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="c2c72-196">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice that contains `name` in the voice's <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c2c72-197"><xref:System.Speech.Synthesis.SpeechSynthesizer>执行区分大小写，子字符串比较，以确定是否与匹配语音`name`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-197">The <xref:System.Speech.Synthesis.SpeechSynthesizer> performs a case-sensitive, substring comparison to determine if the voice matches the `name`.</span></span>  
  
 <span data-ttu-id="c2c72-198">当应用程序调用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>，该方法会验证在注册表中找到的语音的每个满足某些最低标准。</span><span class="sxs-lookup"><span data-stu-id="c2c72-198">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="c2c72-199">未通过验证，任何语音<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>设置其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性设置为`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-199">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="c2c72-200">应用程序不能选择语音其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性是`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-200">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="c2c72-201">通常情况下，应用程序不会设置语音<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c2c72-201">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c2c72-202">若要选择语音的性别、 年龄或区域设置，请使用其中一个<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-202">To select a voice by gender, age, or locale, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectVoiceByHints">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2c72-203">选择具有特定特征的语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-203">Selects a voice with specific characteristics.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-204">使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类来获取名称的安装可以选择的文本到语音转换 (TTS) 语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-204">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="c2c72-205"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象将选择第一个匹配指定的特性的已安装的语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-205">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice that matches the specified characteristics.</span></span>  
  
 <span data-ttu-id="c2c72-206">当应用程序调用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>，该方法会验证在注册表中找到的语音的每个满足某些最低标准。</span><span class="sxs-lookup"><span data-stu-id="c2c72-206">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="c2c72-207">未通过验证，任何语音<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>设置其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性设置为`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-207">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="c2c72-208">应用程序不能选择语音其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性是`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-208">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="c2c72-209">通常情况下，应用程序不会设置语音<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c2c72-209">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c2c72-210">若要按名称选择语音，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>方法</span><span class="sxs-lookup"><span data-stu-id="c2c72-210">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="c2c72-211">要选择的语音的性别。</span><span class="sxs-lookup"><span data-stu-id="c2c72-211">The gender of the voice to select.</span></span></param>
        <summary><span data-ttu-id="c2c72-212">选择具有特定性别的语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-212">Selects a voice with a specific gender.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-213">使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类来获取名称的安装可以选择的文本到语音转换 (TTS) 语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-213">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="c2c72-214"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象选择第一个已安装的语音其<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>属性匹配`gender`参数。</span><span class="sxs-lookup"><span data-stu-id="c2c72-214">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> property matches the `gender` parameter.</span></span>  
  
 <span data-ttu-id="c2c72-215">当应用程序调用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>，该方法会验证在注册表中找到的语音的每个满足某些最低标准。</span><span class="sxs-lookup"><span data-stu-id="c2c72-215">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="c2c72-216">未通过验证，任何语音<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>设置其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性设置为`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-216">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="c2c72-217">应用程序不能选择语音其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性是`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-217">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="c2c72-218">通常情况下，应用程序不会设置语音<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c2c72-218">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c2c72-219">若要选择其他特征的声音，请参阅其他<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-219">To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.</span></span>  
  
 <span data-ttu-id="c2c72-220">若要按名称选择语音，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-220">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="c2c72-221">要选择的语音的性别。</span><span class="sxs-lookup"><span data-stu-id="c2c72-221">The gender of the voice to select.</span></span></param>
        <param name="age"><span data-ttu-id="c2c72-222">要选择的语音的年龄。</span><span class="sxs-lookup"><span data-stu-id="c2c72-222">The age of the voice to select.</span></span></param>
        <summary><span data-ttu-id="c2c72-223">选择具有特定性别和年龄的语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-223">Selects a voice with a specific gender and age.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-224">使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类来获取名称的安装可以选择的文本到语音转换 (TTS) 语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-224">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="c2c72-225"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象选择第一个已安装的语音其<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>并<xref:System.Speech.Synthesis.VoiceInfo.Age%2A>属性匹配`gender`和`age`参数。</span><span class="sxs-lookup"><span data-stu-id="c2c72-225">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters.</span></span>  
  
 <span data-ttu-id="c2c72-226">当应用程序调用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>，该方法会验证在注册表中找到的语音的每个满足某些最低标准。</span><span class="sxs-lookup"><span data-stu-id="c2c72-226">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="c2c72-227">未通过验证，任何语音<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>设置其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性设置为`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-227">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="c2c72-228">应用程序不能选择语音其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性是`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-228">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="c2c72-229">通常情况下，应用程序不会设置语音<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c2c72-229">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c2c72-230">若要选择其他特征的声音，请参阅其他<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-230">To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.</span></span>  
  
 <span data-ttu-id="c2c72-231">若要按名称选择语音，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-231">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="c2c72-232">要选择的语音的性别。</span><span class="sxs-lookup"><span data-stu-id="c2c72-232">The gender of the voice to select.</span></span></param>
        <param name="age"><span data-ttu-id="c2c72-233">要选择的语音的年龄。</span><span class="sxs-lookup"><span data-stu-id="c2c72-233">The age of the voice to select.</span></span></param>
        <param name="voiceAlternate"><span data-ttu-id="c2c72-234">要选择的语音的位置。</span><span class="sxs-lookup"><span data-stu-id="c2c72-234">The position of the voice to select.</span></span></param>
        <summary><span data-ttu-id="c2c72-235">选择具有特定性别和年龄，基于语音的排序位置的语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-235">Selects a voice with a specific gender and age, based on the position in which the voices are ordered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-236">使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类来获取名称的安装可以选择的文本到语音转换 (TTS) 语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-236">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="c2c72-237"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象查找安装语音其<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>并<xref:System.Speech.Synthesis.VoiceInfo.Age%2A>属性匹配`gender`和`age`参数。</span><span class="sxs-lookup"><span data-stu-id="c2c72-237">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds installed voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters.</span></span> <span data-ttu-id="c2c72-238"><xref:System.Speech.Synthesis.SpeechSynthesizer>计数的匹配项，它将找到，并返回所用的声音时计数等于`voiceAlternate`参数。</span><span class="sxs-lookup"><span data-stu-id="c2c72-238">The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="c2c72-239">当应用程序调用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>，该方法会验证在注册表中找到的语音的每个满足某些最低标准。</span><span class="sxs-lookup"><span data-stu-id="c2c72-239">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="c2c72-240">未通过验证，任何语音<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>设置其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性设置为`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-240">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="c2c72-241">应用程序不能选择语音其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性是`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-241">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="c2c72-242">通常情况下，应用程序不会设置语音<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c2c72-242">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c2c72-243">若要选择其他特征的声音，请参阅其他<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>重载。</span><span class="sxs-lookup"><span data-stu-id="c2c72-243">To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads.</span></span>  
  
 <span data-ttu-id="c2c72-244">若要按名称选择语音，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-244">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer, culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int * System.Globalization.CultureInfo -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="c2c72-245">要选择的语音的性别。</span><span class="sxs-lookup"><span data-stu-id="c2c72-245">The gender of the voice to select.</span></span></param>
        <param name="age"><span data-ttu-id="c2c72-246">要选择的语音的年龄。</span><span class="sxs-lookup"><span data-stu-id="c2c72-246">The age of the voice to select.</span></span></param>
        <param name="voiceAlternate"><span data-ttu-id="c2c72-247">要选择的语音的位置。</span><span class="sxs-lookup"><span data-stu-id="c2c72-247">The position of the voice to select.</span></span></param>
        <param name="culture"><span data-ttu-id="c2c72-248">要选择的语音的区域设置。</span><span class="sxs-lookup"><span data-stu-id="c2c72-248">The locale of the voice to select.</span></span></param>
        <summary><span data-ttu-id="c2c72-249">选择具有特定性别、 年龄和区域设置，基于语音的排序位置的语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-249">Selects a voice with a specific gender, age, and locale, based on the position in which the voices are ordered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-250"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象查找观点发布其<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>， <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>，和<xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>属性匹配`gender`， `age`，和`culture`参数。</span><span class="sxs-lookup"><span data-stu-id="c2c72-250">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>, <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>, and <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> properties match the `gender`, `age`, and `culture` parameters.</span></span> <span data-ttu-id="c2c72-251"><xref:System.Speech.Synthesis.SpeechSynthesizer>计数的匹配项，它将找到，并返回所用的声音时计数等于`voiceAlternate`参数。</span><span class="sxs-lookup"><span data-stu-id="c2c72-251">The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="c2c72-252">Microsoft Windows 和 System.Speech API 接受所有有效语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="c2c72-252">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="c2c72-253">若要执行文本到语音转换使用中指定的语言`culture`参数、 支持语言-国家/地区代码，必须在安装的语音合成引擎。</span><span class="sxs-lookup"><span data-stu-id="c2c72-253">To perform text-to-speech using the language specified in the `culture` parameter, a speech synthesis engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="c2c72-254">随 Microsoft Windows 7 的语音合成引擎使用以下语言-国家/地区代码：</span><span class="sxs-lookup"><span data-stu-id="c2c72-254">The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:</span></span>  
  
-   <span data-ttu-id="c2c72-255">EN-US。</span><span class="sxs-lookup"><span data-stu-id="c2c72-255">en-US.</span></span> <span data-ttu-id="c2c72-256">英语 （美国）</span><span class="sxs-lookup"><span data-stu-id="c2c72-256">English (United States)</span></span>  
  
-   <span data-ttu-id="c2c72-257">zh CN。</span><span class="sxs-lookup"><span data-stu-id="c2c72-257">zh-CN.</span></span> <span data-ttu-id="c2c72-258">中文 （中国）</span><span class="sxs-lookup"><span data-stu-id="c2c72-258">Chinese (China)</span></span>  
  
-   <span data-ttu-id="c2c72-259">zh-TW。</span><span class="sxs-lookup"><span data-stu-id="c2c72-259">zh-TW.</span></span> <span data-ttu-id="c2c72-260">中文 （台湾）</span><span class="sxs-lookup"><span data-stu-id="c2c72-260">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="c2c72-261">此外允许使用两个字母的语言代码，例如"en"。</span><span class="sxs-lookup"><span data-stu-id="c2c72-261">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 <span data-ttu-id="c2c72-262">当应用程序调用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>，该方法会验证在注册表中找到的语音的每个满足某些最低标准。</span><span class="sxs-lookup"><span data-stu-id="c2c72-262">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="c2c72-263">未通过验证，任何语音<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>设置其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性设置为`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-263">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="c2c72-264">应用程序不能选择语音其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性是`False`。</span><span class="sxs-lookup"><span data-stu-id="c2c72-264">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="c2c72-265">通常情况下，应用程序不会设置语音<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c2c72-265">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c2c72-266">若要选择其他特征的声音，请参阅其他<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>重载。</span><span class="sxs-lookup"><span data-stu-id="c2c72-266">To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads.</span></span>  
  
 <span data-ttu-id="c2c72-267">若要按名称选择语音，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-267">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToAudioStream(class System.IO.Stream audioDestination, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToAudioStream (audioDestination As Stream, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToAudioStream(System::IO::Stream ^ audioDestination, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToAudioStream (audioDestination, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioDestination"><span data-ttu-id="c2c72-268">要追加合成输出流。</span><span class="sxs-lookup"><span data-stu-id="c2c72-268">The stream to which to append synthesis output.</span></span></param>
        <param name="formatInfo"><span data-ttu-id="c2c72-269">要用于合成输出的格式。</span><span class="sxs-lookup"><span data-stu-id="c2c72-269">The format to use for the synthesis output.</span></span></param>
        <summary><span data-ttu-id="c2c72-270">配置<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象以追加输出到音频流。</span><span class="sxs-lookup"><span data-stu-id="c2c72-270">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to an audio stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-271">调用<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>释放<xref:System.Speech.Synthesis.SpeechSynthesizer>的流的引用。</span><span class="sxs-lookup"><span data-stu-id="c2c72-271">Call <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> to release the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s  reference to the stream.</span></span>  
  
 <span data-ttu-id="c2c72-272">有关其他输出配置选项，请参阅<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>，和<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-272">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetOutputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToDefaultAudioDevice : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-273">配置<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象将输出发送到默认音频设备。</span><span class="sxs-lookup"><span data-stu-id="c2c72-273">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to send output to the default audio device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-274">可以使用**声音**在 Windows 中的窗口**控制面板**若要配置的计算机的默认音频设备。</span><span class="sxs-lookup"><span data-stu-id="c2c72-274">You can use the  **Sound** window in the Windows **Control Panel** to configure the default audio device for the computer.</span></span>  
  
 <span data-ttu-id="c2c72-275">有关其他输出配置选项，请参阅<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>，和<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-275">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-276">以下示例使用合成器要朗读短语到默认的音频输出。</span><span class="sxs-lookup"><span data-stu-id="c2c72-276">The following example uses the synthesizer to speak a phrase to the default audio output.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the synthesizer to send output to the default audio device.  
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToNull">
      <MemberSignature Language="C#" Value="public void SetOutputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToNull : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-277">配置<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象以不将输出从合成操作发送到设备、 文件或流。</span><span class="sxs-lookup"><span data-stu-id="c2c72-277">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to not send output from synthesis operations to a device, file, or stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-278">使用此方法释放<xref:System.Speech.Synthesis.SpeechSynthesizer>的文件或流的引用。</span><span class="sxs-lookup"><span data-stu-id="c2c72-278">Use this method to release the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s reference to a file or stream.</span></span> <span data-ttu-id="c2c72-279">有关示例，请参见 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-279">See <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> for an example.</span></span>  
  
 <span data-ttu-id="c2c72-280">有关其他输出配置选项，请参阅<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>，和<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-280">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputToWaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2c72-281">配置<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象以追加输出到波形音频格式文件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-281">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to a Waveform audio format file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-282">若要释放<xref:System.Speech.Synthesis.SpeechSynthesizer>的引用匹配到文件中，重新配置<xref:System.Speech.Synthesis.SpeechSynthesizer>的输出，例如，通过调用<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-282">To release the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s  reference to the file, reconfigure the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s output, for example, by calling <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.</span></span>  
  
 <span data-ttu-id="c2c72-283">有关其他输出配置选项，请参阅<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>，和<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-283">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c2c72-284">文件的路径。</span><span class="sxs-lookup"><span data-stu-id="c2c72-284">The path to the file.</span></span></param>
        <summary><span data-ttu-id="c2c72-285">配置<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象以追加输出到包含波形格式音频的文件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-285">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to a file that contains Waveform format audio.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-286">若要配置输出和指定的音频格式，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-286">To configure the output and specify the audio format, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-287">下面的示例使用的实例<xref:System.Media.SoundPlayer>播放已被输出到.wav 文件的提示。</span><span class="sxs-lookup"><span data-stu-id="c2c72-287">The following example uses an instance of <xref:System.Media.SoundPlayer> to play a prompt that has been output to a .wav file.</span></span> <span data-ttu-id="c2c72-288">因为<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>调用是异步的<xref:System.Media.SoundPlayer>创建实例 (和<xref:System.Media.SoundPlayer.Play%2A>方法调用) 的处理程序中<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-288">Because the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> call is asynchronous, the <xref:System.Media.SoundPlayer> instance is created (and the <xref:System.Media.SoundPlayer.Play%2A> method invoked) in the handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToWaveFile(@"C:\Test\Sample.wav");  
  
      // Register for the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Build a prompt.  
      PromptBuilder builder = new PromptBuilder();  
      builder.AppendText("This sample asynchronously speaks a prompt to a WAVE file.");  
  
      // Speak the string asynchronously.  
      synth.SpeakAsync(builder);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeakCompleted event.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
  
      // Create a SoundPlayer instance to play the output audio file.  
      System.Media.SoundPlayer m_SoundPlayer =  
        new System.Media.SoundPlayer(@"C:\Test\Sample.wav");  
  
      //  Play the output file.  
      m_SoundPlayer.Play();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile (path, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c2c72-289">文件的路径。</span><span class="sxs-lookup"><span data-stu-id="c2c72-289">The path to the file.</span></span></param>
        <param name="formatInfo"><span data-ttu-id="c2c72-290">音频格式的信息。</span><span class="sxs-lookup"><span data-stu-id="c2c72-290">The audio format information.</span></span></param>
        <summary><span data-ttu-id="c2c72-291">配置<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象以追加输出到波形音频格式文件中指定的格式。</span><span class="sxs-lookup"><span data-stu-id="c2c72-291">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to a Waveform audio format file in a specified format.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2c72-292">以下示例指定语音合成输出的格式，并将其发送到一个 WAV 文件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-292">The following example specifies the format of the output of speech synthesis and sends it to a WAV file.</span></span>  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\temp\test.wav",   
          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Create a SoundPlayer instance to play output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =   
          new System.Media.SoundPlayer(@"C:\temp\test.wav");  
  
        // Build a prompt.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is sample output to a WAVE file.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveStream (System.IO.Stream audioDestination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveStream(class System.IO.Stream audioDestination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveStream (audioDestination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveStream(System::IO::Stream ^ audioDestination);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveStream audioDestination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioDestination"><span data-ttu-id="c2c72-293">要追加合成输出流。</span><span class="sxs-lookup"><span data-stu-id="c2c72-293">The stream to which to append synthesis output.</span></span></param>
        <summary><span data-ttu-id="c2c72-294">配置<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象以追加输出到包含波形格式音频的流。</span><span class="sxs-lookup"><span data-stu-id="c2c72-294">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to a stream that contains Waveform format audio.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-295">若要释放<xref:System.Speech.Synthesis.SpeechSynthesizer>的引用匹配到流中，重新配置合成器的输出，例如，通过调用<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-295">To release the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s reference to the stream, reconfigure the synthesizer's output, for example, by calling <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.</span></span>  
  
 <span data-ttu-id="c2c72-296">有关其他输出配置选项，请参阅<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>，和<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-296">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-297">下面的示例输出到 WAV 流短语。</span><span class="sxs-lookup"><span data-stu-id="c2c72-297">The following example outputs a phrase to a WAV stream.</span></span>  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      using (MemoryStream streamAudio = new MemoryStream())  
      {  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  
  
        // Configure the synthesizer to output to an audio stream.  
        synth.SetOutputToWaveStream(streamAudio);  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
        streamAudio.Position = 0;  
        m_SoundPlayer.Stream = streamAudio;  
        m_SoundPlayer.Play();  
  
        // Set the synthesizer output to null to release the stream.   
        synth.SetOutputToNull();  
  
        // Insert code to persist or process the stream contents here.  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Speak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2c72-298">从字符串、 同步生成语音输出<see cref="T:System.Speech.Synthesis.Prompt" />对象，或<see cref="T:System.Speech.Synthesis.PromptBuilder" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-298">Generates speech output synchronously from a string, a <see cref="T:System.Speech.Synthesis.Prompt" /> object, or a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-299"><xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法会将同步生成语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-299">The <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> methods generate speech synchronously.</span></span> <span data-ttu-id="c2c72-300">方法不返回之前的内容<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>实例完全所说。</span><span class="sxs-lookup"><span data-stu-id="c2c72-300">The methods do not return until the content of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> instance has been completely spoken.</span></span> <span data-ttu-id="c2c72-301">这是生成语音的最简单方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-301">This is the simplest way to generate speech.</span></span> <span data-ttu-id="c2c72-302">但是，如果你的应用程序需要时执行任务，例如突出显示文本、 绘制动画、 监视器控件或其他任务，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>方法或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法以异步方式生成语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-302">However, if your application needs to perform tasks while speaking, for example highlight text, paint animation, monitor controls, or other tasks, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method to generate speech asynchronously.</span></span>  
  
 <span data-ttu-id="c2c72-303">在对此方法的调用期间<xref:System.Speech.Synthesis.SpeechSynthesizer>可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="c2c72-303">During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:</span></span>  
  
-   <span data-ttu-id="c2c72-304"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-304"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span></span> <span data-ttu-id="c2c72-305">合成器的讲话状态更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-305">Raised when the speaking state of the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="c2c72-306"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-306"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span></span> <span data-ttu-id="c2c72-307">当生成语音合成器开始时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-307">Raised when the synthesizer begins generating speech.</span></span>  
  
-   <span data-ttu-id="c2c72-308"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-308"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span></span> <span data-ttu-id="c2c72-309">合成器达到以字母或字母构成的一种语言中的语音离散声音组合每次引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-309">Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.</span></span>  
  
-   <span data-ttu-id="c2c72-310"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-310"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span></span> <span data-ttu-id="c2c72-311">每次引发合成器完成讲一个单词。</span><span class="sxs-lookup"><span data-stu-id="c2c72-311">Raised each time the synthesizer completes speaking a word.</span></span>  
  
-   <span data-ttu-id="c2c72-312"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-312"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span></span> <span data-ttu-id="c2c72-313">每次语音的输出要求嘴巴或面部肌肉用于生成语音的位置中进行更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-313">Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.</span></span>  
  
-   <span data-ttu-id="c2c72-314"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-314"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span></span> <span data-ttu-id="c2c72-315">合成器遇到一条提示中的书签时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-315">Raised when the synthesizer encounters a bookmark in a prompt.</span></span>  
  
-   <span data-ttu-id="c2c72-316"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-316"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span></span> <span data-ttu-id="c2c72-317">说话的语音合成器的更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-317">Raised when the speaking voice for the synthesizer changes.</span></span>  
  
 <span data-ttu-id="c2c72-318"><xref:System.Speech.Synthesis.SpeechSynthesizer>不会引发<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>事件处理的任何时<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-318">The <xref:System.Speech.Synthesis.SpeechSynthesizer> does not raise the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event while processing any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.Speak prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt"><span data-ttu-id="c2c72-319">要使用的内容。</span><span class="sxs-lookup"><span data-stu-id="c2c72-319">The content to speak.</span></span></param>
        <summary><span data-ttu-id="c2c72-320">内容的同步语言<see cref="T:System.Speech.Synthesis.Prompt" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-320">Synchronously speaks the contents of a <see cref="T:System.Speech.Synthesis.Prompt" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-321">若要以异步方式说出的内容<xref:System.Speech.Synthesis.Prompt>对象，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-321">To asynchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-322">下面的示例创建<xref:System.Speech.Synthesis.Prompt>对象从一个字符串，并将对象作为参数传递<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-322">The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="speechSynthesizer.Speak promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder"><span data-ttu-id="c2c72-323">要使用的内容。</span><span class="sxs-lookup"><span data-stu-id="c2c72-323">The content to speak.</span></span></param>
        <summary><span data-ttu-id="c2c72-324">内容的同步语言<see cref="T:System.Speech.Synthesis.PromptBuilder" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-324">Synchronously speaks the contents of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-325">若要以异步方式说出的内容<xref:System.Speech.Synthesis.PromptBuilder>对象，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-325">To asynchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-326">下面的示例创建<xref:System.Speech.Synthesis.PromptBuilder>对象从一个字符串，并将对象作为参数传递<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-326">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder song = new PromptBuilder();  
        song.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(song);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.Speak : string -&gt; unit" Usage="speechSynthesizer.Speak textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="c2c72-327">要朗读的文本。</span><span class="sxs-lookup"><span data-stu-id="c2c72-327">The text to speak.</span></span></param>
        <summary><span data-ttu-id="c2c72-328">以同步方式使用语言字符串的内容。</span><span class="sxs-lookup"><span data-stu-id="c2c72-328">Synchronously speaks the contents of a string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-329">若要以同步方式都包含 SSML 标记的字符串，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-329">To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method.</span></span> <span data-ttu-id="c2c72-330">若要以异步方式说出的字符串的内容，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-330">To asynchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-331">下面的示例中所示<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法提供了生成语音输出同步的最简单方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-331">As shown in the following example, the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method provides the simplest means to generate speech output synchronously.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a string synchronously.  
        synth.Speak("What is your favorite color?");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpeakAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2c72-332">从字符串、 异步生成语音输出<see cref="T:System.Speech.Synthesis.Prompt" />对象，或<see cref="T:System.Speech.Synthesis.PromptBuilder" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-332">Generates speech output asynchronously from a string, a <see cref="T:System.Speech.Synthesis.Prompt" /> object, or a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-333"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>方法以异步方式生成语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-333">The <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> methods generate speech asynchronously.</span></span> <span data-ttu-id="c2c72-334">方法立即返回而不等待的内容<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>完成谈到的对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-334">The methods return immediately without waiting for the content of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> object to finish speaking.</span></span> <span data-ttu-id="c2c72-335">使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>如果你的应用程序需要时执行的任务，例如突出显示的文本，绘制动画、 监视器控件或其他任务。</span><span class="sxs-lookup"><span data-stu-id="c2c72-335">Use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> if your application needs to perform tasks while speaking, for example highlight text, paint animation, monitor controls, or other tasks.</span></span>  
  
 <span data-ttu-id="c2c72-336">在对此方法的调用期间<xref:System.Speech.Synthesis.SpeechSynthesizer>可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="c2c72-336">During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:</span></span>  
  
-   <span data-ttu-id="c2c72-337"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-337"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span></span> <span data-ttu-id="c2c72-338">合成器的讲话状态更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-338">Raised when the speaking state of the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="c2c72-339"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-339"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span></span> <span data-ttu-id="c2c72-340">当生成语音合成器开始时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-340">Raised when the synthesizer begins generating speech.</span></span>  
  
-   <span data-ttu-id="c2c72-341"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-341"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span></span> <span data-ttu-id="c2c72-342">合成器达到以字母或字母构成的一种语言中的语音离散声音组合每次引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-342">Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.</span></span>  
  
-   <span data-ttu-id="c2c72-343"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-343"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span></span> <span data-ttu-id="c2c72-344">每次引发合成器完成讲一个单词。</span><span class="sxs-lookup"><span data-stu-id="c2c72-344">Raised each time the synthesizer completes speaking a word.</span></span>  
  
-   <span data-ttu-id="c2c72-345"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-345"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span></span> <span data-ttu-id="c2c72-346">每次语音的输出要求嘴巴或面部肌肉用于生成语音的位置中进行更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-346">Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.</span></span>  
  
-   <span data-ttu-id="c2c72-347"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-347"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span></span> <span data-ttu-id="c2c72-348">合成器遇到一条提示中的书签时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-348">Raised when the synthesizer encounters a bookmark in a prompt.</span></span>  
  
-   <span data-ttu-id="c2c72-349"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-349"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span></span> <span data-ttu-id="c2c72-350">说话的语音合成器的更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-350">Raised when the speaking voice for the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="c2c72-351"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-351"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>.</span></span> <span data-ttu-id="c2c72-352">合成器完成时引发<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>操作。</span><span class="sxs-lookup"><span data-stu-id="c2c72-352">Raised when the synthesizer finishes a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> operation.</span></span>  
  
 <span data-ttu-id="c2c72-353">如果你的应用程序不需要时执行任务，则可以使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>方法来同步生成语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-353">If your application does not need to perform tasks while speaking, you can use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method to generate speech synchronously.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsync(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsync(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsync prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt"><span data-ttu-id="c2c72-354">要使用的内容。</span><span class="sxs-lookup"><span data-stu-id="c2c72-354">The content to speak.</span></span></param>
        <summary><span data-ttu-id="c2c72-355">内容的异步语言<see cref="T:System.Speech.Synthesis.Prompt" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-355">Asynchronously speaks the contents of a <see cref="T:System.Speech.Synthesis.Prompt" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-356">您可以取消的异步讲话的时候的提示符下进行<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-356">You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.</span></span>  
  
 <span data-ttu-id="c2c72-357">若要以同步方式说出的内容<xref:System.Speech.Synthesis.Prompt>对象，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-357">To synchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-358">下面的示例创建<xref:System.Speech.Synthesis.Prompt>对象从一个字符串，并将对象作为参数传递<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-358">The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a prompt from a string.  
      Prompt color = new Prompt("What is your favorite color?");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(color);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.PromptBuilder -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder"><span data-ttu-id="c2c72-359">要使用的内容。</span><span class="sxs-lookup"><span data-stu-id="c2c72-359">The content to speak.</span></span></param>
        <summary><span data-ttu-id="c2c72-360">内容的异步语言<see cref="T:System.Speech.Synthesis.PromptBuilder" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-360">Asynchronously speaks the contents of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="c2c72-361">返回包含要使用的内容的对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-361">Returns the object that contains the content to speak.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-362">若要以同步方式说出的内容<xref:System.Speech.Synthesis.PromptBuilder>对象，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-362">To synchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-363">下面的示例创建<xref:System.Speech.Synthesis.PromptBuilder>对象从一个字符串，并将对象作为参数传递<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-363">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a PromptBuilder object and append a text string.  
      PromptBuilder song = new PromptBuilder();  
      song.AppendText("Say the name of the song you want to hear");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(song);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="c2c72-364">要朗读的文本。</span><span class="sxs-lookup"><span data-stu-id="c2c72-364">The text to speak.</span></span></param>
        <summary><span data-ttu-id="c2c72-365">异步使用字符串的内容。</span><span class="sxs-lookup"><span data-stu-id="c2c72-365">Asynchronously speaks the contents of a string.</span></span></summary>
        <returns><span data-ttu-id="c2c72-366">返回包含要使用的内容的对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-366">Returns the object that contains the content to speak.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-367">若要以异步方式都包含 SSML 标记的字符串，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-367">To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.</span></span> <span data-ttu-id="c2c72-368">若要以同步方式说出的字符串的内容，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-368">To synchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span> <span data-ttu-id="c2c72-369">您可以取消的异步讲话的时候的提示符下进行<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-369">You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-370">下面的示例中所示<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>方法提供了生成语音异步输出的最简单方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-370">As shown in the following example, the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method provides the simplest means to generate speech output asynchronously.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.Speak" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancel">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancel(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancel(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancel : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancel prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt"><span data-ttu-id="c2c72-371">要为其移除调用操作内容。</span><span class="sxs-lookup"><span data-stu-id="c2c72-371">The content for which to cancel a speak operation.</span></span></param>
        <summary><span data-ttu-id="c2c72-372">取消一个排队的提示的异步合成操作。</span><span class="sxs-lookup"><span data-stu-id="c2c72-372">Cancels the asynchronous synthesis operation for a queued prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-373">此外可以使用此方法取消异步说出以下操作：</span><span class="sxs-lookup"><span data-stu-id="c2c72-373">You can also use this method to cancel an asynchronous speak operation for the following:</span></span>  
  
-   <span data-ttu-id="c2c72-374">内容<xref:System.String>指定的<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-374">The contents of a <xref:System.String> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="c2c72-375">内容<xref:System.Speech.Synthesis.PromptBuilder>指定的<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-375">The contents of a <xref:System.Speech.Synthesis.PromptBuilder> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="c2c72-376">内容<xref:System.String>包含由指定的 SSML<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-376">The contents of a <xref:System.String> containing SSML specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c2c72-377">当您调用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>，或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>，创建 System.Speech<xref:System.Speech.Synthesis.Prompt>对象并使用该方法的参数的内容填充它，并返回<xref:System.Speech.Synthesis.Prompt>对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-377">When you call <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, System.Speech creates a <xref:System.Speech.Synthesis.Prompt> object and populates it with the contents of the method's parameter, and returns the <xref:System.Speech.Synthesis.Prompt> object.</span></span> <span data-ttu-id="c2c72-378">如果保留一份返回<xref:System.Speech.Synthesis.Prompt>，可以将其传递<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>取消中指定的讲话内容<xref:System.String>或<xref:System.Speech.Synthesis.PromptBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-378">If you retain a copy of the returned <xref:System.Speech.Synthesis.Prompt>, you can pass it into <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> to cancel speaking content specified in a <xref:System.String> or a <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancelAll">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancelAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsyncCancelAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancelAll();" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancelAll : unit -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancelAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c72-379">取消所有排队、 异步、 语音合成操作。</span><span class="sxs-lookup"><span data-stu-id="c2c72-379">Cancels all queued, asynchronous, speech synthesis operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2c72-380">下面的示例显示使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A>取消的异步讲话的时候提示符处，以便可以说出新提示符。</span><span class="sxs-lookup"><span data-stu-id="c2c72-380">The following example show a use of <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> to cancel the asynchronous speaking of a prompt, so that a new prompt can be spoken.</span></span> <span data-ttu-id="c2c72-381">请注意，<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>事件时将触发<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>取消操作。</span><span class="sxs-lookup"><span data-stu-id="c2c72-381">Note that the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event fires when a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> operation is cancelled.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Threading;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the StateChanged event.  
      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  
  
      // Subscribe to the SpeakProgress event.  
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Subscribe to the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Begin speaking a text string asynchronously.  
      synth.SpeakAsync("Speech is an effective and natural way for people to interact with applications, " +  
        "complementing or even replacing the use of mice, keyboards, controllers, and gestures.");  
  
      // Speak for four seconds.  
      Thread.Sleep(4000);  
  
      // Cancel the SpeakAsync operation and wait one second.  
      synth.SpeakAsyncCancelAll();  
      Thread.Sleep(1000);  
  
      // Speak a new text string.  
      synth.Speak("An urgent email message has arrived. Do you want to hear it?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write to the console when the SpeakAsync operation has been cancelled.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
      Console.WriteLine("\nThe SpeakAsync operation was cancelled!!");  
    }  
  
    // When it changes, write the state of the SpeechSynthesizer to the console.  
    static void synth_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      Console.WriteLine("\nSynthesizer State: {0}    Previous State: {1}\n", e.State, e.PreviousState);  
    }  
  
    // Write the text being spoken by the SpeechSynthesizer to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }      
  }    
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakCompleted As EventHandler(Of SpeakCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakCompletedEventArgs ^&gt; ^ SpeakCompleted;" />
      <MemberSignature Language="F#" Value="member this.SpeakCompleted : EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " Usage="member this.SpeakCompleted : System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-382">时引发<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />完成提示说到。</span><span class="sxs-lookup"><span data-stu-id="c2c72-382">Raised when the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> completes the speaking of a prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-383"><xref:System.Speech.Synthesis.SpeechSynthesizer>将引发<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>在完成时的任何事件<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-383">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event at the completion of any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> or  <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c2c72-384"><xref:System.Speech.Synthesis.SpeakCompletedEventArgs>类不具有任何属性，且不返回数据从<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-384">The <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> class has no properties, and does not return data from the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event.</span></span> <span data-ttu-id="c2c72-385">它用于启用应用程序作者编写事件处理程序<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-385">It is provided to enable application authors to write event handlers for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.SpeakCompletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeakProgress">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakProgress As EventHandler(Of SpeakProgressEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakProgressEventArgs ^&gt; ^ SpeakProgress;" />
      <MemberSignature Language="F#" Value="member this.SpeakProgress : EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " Usage="member this.SpeakProgress : System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-386">后引发<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />发表在提示符下的每个单词。</span><span class="sxs-lookup"><span data-stu-id="c2c72-386">Raised after the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> speaks each individual word of a prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-387"><xref:System.Speech.Synthesis.SpeechSynthesizer>引发此事件对于它在提示符下使用任一说出每个新单词<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>，或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-387">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span> <span data-ttu-id="c2c72-388">有关示例和与事件相关联的数据有关的详细信息，请参阅<xref:System.Speech.Synthesis.SpeakProgressEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-388">For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsml">
      <MemberSignature Language="C#" Value="public void SpeakSsml (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakSsml(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakSsml (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakSsml(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsml : string -&gt; unit" Usage="speechSynthesizer.SpeakSsml textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="c2c72-389">要朗读的 SSML 字符串。</span><span class="sxs-lookup"><span data-stu-id="c2c72-389">The SSML string to speak.</span></span></param>
        <summary><span data-ttu-id="c2c72-390">同步<see cref="T:System.String" />，其中包含 SSML 标记。</span><span class="sxs-lookup"><span data-stu-id="c2c72-390">Synchronously speaks a <see cref="T:System.String" /> that contains SSML markup.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-391">内容`textToSpeak`参数必须包含`speak`元素，并且必须符合[语音合成标记语言 (SSML) 版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)。</span><span class="sxs-lookup"><span data-stu-id="c2c72-391">The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763).</span></span> <span data-ttu-id="c2c72-392">有关详细信息，请参阅[语音合成标记语言参考](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94)。</span><span class="sxs-lookup"><span data-stu-id="c2c72-392">For more information, see [Speech Synthesis Markup Language Reference](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).</span></span>  
  
 <span data-ttu-id="c2c72-393">若要以异步方式都包含 SSML 标记的字符串，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-393">To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.</span></span> <span data-ttu-id="c2c72-394">可以使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>启动的同步讲话的时候不包含 SSML 标记的字符串。</span><span class="sxs-lookup"><span data-stu-id="c2c72-394">You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> to initiate the synchronous speaking of a string that does not contain SSML markup.</span></span>  
  
 <span data-ttu-id="c2c72-395">在对此方法的调用期间<xref:System.Speech.Synthesis.SpeechSynthesizer>可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="c2c72-395">During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:</span></span>  
  
-   <span data-ttu-id="c2c72-396"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-396"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span></span> <span data-ttu-id="c2c72-397">合成器的讲话状态更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-397">Raised when the speaking state of the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="c2c72-398"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-398"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span></span> <span data-ttu-id="c2c72-399">当生成语音合成器开始时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-399">Raised when the synthesizer begins generating speech.</span></span>  
  
-   <span data-ttu-id="c2c72-400"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-400"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span></span> <span data-ttu-id="c2c72-401">合成器达到以字母或字母构成的一种语言中的语音离散声音组合每次引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-401">Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.</span></span>  
  
-   <span data-ttu-id="c2c72-402"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-402"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span></span> <span data-ttu-id="c2c72-403">每次引发合成器完成讲一个单词。</span><span class="sxs-lookup"><span data-stu-id="c2c72-403">Raised each time the synthesizer completes speaking a word.</span></span>  
  
-   <span data-ttu-id="c2c72-404"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-404"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span></span> <span data-ttu-id="c2c72-405">每次语音的输出要求嘴巴或面部肌肉用于生成语音的位置中进行更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-405">Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.</span></span>  
  
-   <span data-ttu-id="c2c72-406"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-406"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span></span> <span data-ttu-id="c2c72-407">合成器遇到一条提示中的书签时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-407">Raised when the synthesizer encounters a bookmark in a prompt.</span></span>  
  
-   <span data-ttu-id="c2c72-408"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-408"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span></span> <span data-ttu-id="c2c72-409">说话的语音合成器的更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-409">Raised when the speaking voice for the synthesizer changes.</span></span>  
  
 <span data-ttu-id="c2c72-410"><xref:System.Speech.Synthesis.SpeechSynthesizer>不会引发<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>事件处理时<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-410">The <xref:System.Speech.Synthesis.SpeechSynthesizer> does not raise the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event while processing the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-411">下面的示例呈现日期，1/29/2009 作为日期，采用月、 日、 年顺序。</span><span class="sxs-lookup"><span data-stu-id="c2c72-411">The following example renders the date 1/29/2009 as a date, in month, day, year order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt synchronously.
      synth.SpeakSsml(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsmlAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakSsmlAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakSsmlAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakSsmlAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsmlAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakSsmlAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="c2c72-412">要朗读的 SMML 标记。</span><span class="sxs-lookup"><span data-stu-id="c2c72-412">The SMML markup to speak.</span></span></param>
        <summary><span data-ttu-id="c2c72-413">异步使用<see cref="T:System.String" />，其中包含 SSML 标记。</span><span class="sxs-lookup"><span data-stu-id="c2c72-413">Asynchronously speaks a <see cref="T:System.String" /> that contains SSML markup.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-414">内容`textToSpeak`参数必须包含`speak`元素，并且必须符合[语音合成标记语言 (SSML) 版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)。</span><span class="sxs-lookup"><span data-stu-id="c2c72-414">The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763).</span></span> <span data-ttu-id="c2c72-415">有关详细信息，请参阅[语音合成标记语言参考](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94)。</span><span class="sxs-lookup"><span data-stu-id="c2c72-415">For more information, see [Speech Synthesis Markup Language Reference](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).</span></span>  
  
 <span data-ttu-id="c2c72-416">若要以同步方式都包含 SSML 标记的字符串，使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-416">To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method.</span></span> <span data-ttu-id="c2c72-417">可以使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>启动的异步讲话的时候不包含 SSML 标记的字符串。</span><span class="sxs-lookup"><span data-stu-id="c2c72-417">You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> to initiate the asynchronous speaking of a string that does not contain SSML markup.</span></span>  
  
 <span data-ttu-id="c2c72-418">在对此方法的调用期间<xref:System.Speech.Synthesis.SpeechSynthesizer>可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="c2c72-418">During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:</span></span>  
  
-   <span data-ttu-id="c2c72-419"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-419"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span></span> <span data-ttu-id="c2c72-420">合成器的讲话状态更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-420">Raised when the speaking state of the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="c2c72-421"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-421"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span></span> <span data-ttu-id="c2c72-422">当生成语音合成器开始时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-422">Raised when the synthesizer begins generating speech.</span></span>  
  
-   <span data-ttu-id="c2c72-423"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-423"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span></span> <span data-ttu-id="c2c72-424">合成器达到以字母或字母构成的一种语言中的语音离散声音组合每次引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-424">Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.</span></span>  
  
-   <span data-ttu-id="c2c72-425"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-425"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span></span> <span data-ttu-id="c2c72-426">每次引发合成器完成讲一个单词。</span><span class="sxs-lookup"><span data-stu-id="c2c72-426">Raised each time the synthesizer completes speaking a word.</span></span>  
  
-   <span data-ttu-id="c2c72-427"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-427"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span></span> <span data-ttu-id="c2c72-428">每次语音的输出要求嘴巴或面部肌肉用于生成语音的位置中进行更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-428">Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.</span></span>  
  
-   <span data-ttu-id="c2c72-429"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-429"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span></span> <span data-ttu-id="c2c72-430">合成器遇到一条提示中的书签时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-430">Raised when the synthesizer encounters a bookmark in a prompt.</span></span>  
  
-   <span data-ttu-id="c2c72-431"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-431"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span></span> <span data-ttu-id="c2c72-432">说话的语音合成器的更改时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-432">Raised when the speaking voice for the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="c2c72-433"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-433"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>.</span></span> <span data-ttu-id="c2c72-434">合成器完成处理时引发<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>操作。</span><span class="sxs-lookup"><span data-stu-id="c2c72-434">Raised when the synthesizer finishes processing a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> operation.</span></span>  
  
 <span data-ttu-id="c2c72-435">如果应用程序 dos 不需要时执行任务，则可以使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>方法来同步生成语音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-435">If your application dos not need to perform tasks while speaking, you can use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method to generate speech synchronously.</span></span>  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakSsmlAsync(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakStarted As EventHandler(Of SpeakStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakStartedEventArgs ^&gt; ^ SpeakStarted;" />
      <MemberSignature Language="F#" Value="member this.SpeakStarted : EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " Usage="member this.SpeakStarted : System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-436">时引发<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />开始谈到一条提示。</span><span class="sxs-lookup"><span data-stu-id="c2c72-436">Raised when the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> begins the speaking of a prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-437"><xref:System.Speech.Synthesis.SpeechSynthesizer>引发此事件时将开始处理在提示符下使用任一<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>，或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-437">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when it begins processing a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c2c72-438"><xref:System.Speech.Synthesis.SpeakStartedEventArgs>类不具有任何属性，且不返回数据从<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>事件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-438">The <xref:System.Speech.Synthesis.SpeakStartedEventArgs> class has no properties, and does not return data from the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> event.</span></span> <span data-ttu-id="c2c72-439">它用于启用应用程序作者编写事件处理程序<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>事件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-439">It is provided to enable application authors to write event handlers for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.SynthesizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.SynthesizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As SynthesizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::SynthesizerState State { System::Speech::Synthesis::SynthesizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.SynthesizerState" Usage="System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.SynthesizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-440">获取当前语速<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-440">Gets the current speaking state of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <value><span data-ttu-id="c2c72-441">返回的当前语速<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-441">Returns the current speaking state of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-442">若要获取的新状态<xref:System.Speech.Synthesis.SpeechSynthesizer>发生更改后，使用<xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A>属性的<xref:System.Speech.Synthesis.StateChangedEventArgs>类。</span><span class="sxs-lookup"><span data-stu-id="c2c72-442">To get the new state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> after it changes, use the <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> property of the <xref:System.Speech.Synthesis.StateChangedEventArgs> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-443">下面的示例演示的状态<xref:System.Speech.Synthesis.SpeechSynthesizer>之前、 期间和之后谈到一条提示。</span><span class="sxs-lookup"><span data-stu-id="c2c72-443">The following example illustrates the state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> before, during, and after speaking a prompt.</span></span>  
  
```csharp  
using System;  
using System.Threading;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer() ;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the SpeakProgress event.         
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Write the state of the SpeechSynthesizer to the console.  
      Console.WriteLine("Current Synthesizer state: " + synth.State + "\n");  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      // Write the state of the SpeechSynthesizer to the console while it is speaking.  
      Thread.Sleep(1000);  
      Console.WriteLine("\n - Current Synthesizer state: " + synth.State + " - \n");  
  
      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  
      Thread.Sleep(2000);  
      Console.WriteLine("\nCurrent Synthesizer state: " + synth.State);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of StateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-444">时引发的状态<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />更改。</span><span class="sxs-lookup"><span data-stu-id="c2c72-444">Raised when the state of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-445"><xref:System.Speech.Synthesis.SpeechSynthesizer>引发该事件时其谈到<xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A>更改。</span><span class="sxs-lookup"><span data-stu-id="c2c72-445">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when its speaking <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> changes.</span></span> <span data-ttu-id="c2c72-446">有关示例和与事件相关联的数据有关的详细信息，请参阅<xref:System.Speech.Synthesis.StateChangedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-446">For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.StateChangedEventArgs>.</span></span>  
  
 <span data-ttu-id="c2c72-447">若要暂停和恢复语音合成，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>和<xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-447">To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisemeReached As EventHandler(Of VisemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VisemeReachedEventArgs ^&gt; ^ VisemeReached;" />
      <MemberSignature Language="F#" Value="member this.VisemeReached : EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " Usage="member this.VisemeReached : System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-448">当 viseme 达到时引发。</span><span class="sxs-lookup"><span data-stu-id="c2c72-448">Raised when a viseme is reached.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-449">一个 viseme 时读出音素嘴巴和人脸的基本位置。</span><span class="sxs-lookup"><span data-stu-id="c2c72-449">A viseme is the basic position of the mouth and face when pronouncing a phoneme.</span></span> <span data-ttu-id="c2c72-450">Visemes 是音素的可视表示形式。</span><span class="sxs-lookup"><span data-stu-id="c2c72-450">Visemes are visual representations of phonemes.</span></span>  
  
 <span data-ttu-id="c2c72-451">System.Speech 支持美国英语，其中每个对应于一个或多个音素 21 visemes。</span><span class="sxs-lookup"><span data-stu-id="c2c72-451">System.Speech supports 21 visemes for US English, each of which corresponds to one or more phonemes.</span></span>  <span data-ttu-id="c2c72-452"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> 当新音素达到具有比上一个音素达到不同相应 viseme 时，会引发事件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-452"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> events are raised when a new phoneme reached has a different corresponding viseme than the previous phoneme reached.</span></span> <span data-ttu-id="c2c72-453">由于某些 visemes 表示多个音素<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>下一个音素达到对应于同一个 viseme 作为上一个音素时，不会生成事件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-453">Since some visemes represent more than one phoneme, a <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> event is not generated if the next phoneme reached corresponds to the same viseme as the previous phoneme.</span></span> <span data-ttu-id="c2c72-454">例如，对于说出的单词"此区域"<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>中"this"的"s"和"区域"中的"z"引发事件。</span><span class="sxs-lookup"><span data-stu-id="c2c72-454">For example, for the spoken words "this zone", a <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> event is raised for the "s" in "this" and the "z" in "zone".</span></span> <span data-ttu-id="c2c72-455">但是，<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>不会引发事件的"区域"中的"z"因为它对应于"s"中"this"作为同一个 viseme。</span><span class="sxs-lookup"><span data-stu-id="c2c72-455">However, a <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> event is not raised for the "z" in "zone" because it corresponds to the same viseme as the "s" in "this".</span></span>  
  
 <span data-ttu-id="c2c72-456">下面是 21 SAPI 音素和对应于在美国英语 viseme 的音素组的列表。</span><span class="sxs-lookup"><span data-stu-id="c2c72-456">The following is a list of the 21 SAPI phonemes and phoneme groups that correspond to a viseme in US English.</span></span>  
  
|<span data-ttu-id="c2c72-457">Viseme</span><span class="sxs-lookup"><span data-stu-id="c2c72-457">Viseme</span></span>|<span data-ttu-id="c2c72-458">Phoneme(s)</span><span class="sxs-lookup"><span data-stu-id="c2c72-458">Phoneme(s)</span></span>|  
|------------|------------------|  
|<span data-ttu-id="c2c72-459">0</span><span class="sxs-lookup"><span data-stu-id="c2c72-459">0</span></span>|<span data-ttu-id="c2c72-460">无声段</span><span class="sxs-lookup"><span data-stu-id="c2c72-460">silence</span></span>|  
|<span data-ttu-id="c2c72-461">1</span><span class="sxs-lookup"><span data-stu-id="c2c72-461">1</span></span>|<span data-ttu-id="c2c72-462">ae，ax，噢</span><span class="sxs-lookup"><span data-stu-id="c2c72-462">ae, ax, ah</span></span>|  
|<span data-ttu-id="c2c72-463">2</span><span class="sxs-lookup"><span data-stu-id="c2c72-463">2</span></span>|<span data-ttu-id="c2c72-464">aa</span><span class="sxs-lookup"><span data-stu-id="c2c72-464">aa</span></span>|  
|<span data-ttu-id="c2c72-465">3</span><span class="sxs-lookup"><span data-stu-id="c2c72-465">3</span></span>|<span data-ttu-id="c2c72-466">ao</span><span class="sxs-lookup"><span data-stu-id="c2c72-466">ao</span></span>|  
|<span data-ttu-id="c2c72-467">4</span><span class="sxs-lookup"><span data-stu-id="c2c72-467">4</span></span>|<span data-ttu-id="c2c72-468">键，是吧，嗯</span><span class="sxs-lookup"><span data-stu-id="c2c72-468">ey, eh, uh</span></span>|  
|<span data-ttu-id="c2c72-469">5</span><span class="sxs-lookup"><span data-stu-id="c2c72-469">5</span></span>|<span data-ttu-id="c2c72-470">er</span><span class="sxs-lookup"><span data-stu-id="c2c72-470">er</span></span>|  
|<span data-ttu-id="c2c72-471">6</span><span class="sxs-lookup"><span data-stu-id="c2c72-471">6</span></span>|<span data-ttu-id="c2c72-472">y、 iy、 ih、 ix</span><span class="sxs-lookup"><span data-stu-id="c2c72-472">y, iy, ih, ix</span></span>|  
|<span data-ttu-id="c2c72-473">7</span><span class="sxs-lookup"><span data-stu-id="c2c72-473">7</span></span>|<span data-ttu-id="c2c72-474">w uw</span><span class="sxs-lookup"><span data-stu-id="c2c72-474">w, uw</span></span>|  
|<span data-ttu-id="c2c72-475">8</span><span class="sxs-lookup"><span data-stu-id="c2c72-475">8</span></span>|<span data-ttu-id="c2c72-476">ow</span><span class="sxs-lookup"><span data-stu-id="c2c72-476">ow</span></span>|  
|<span data-ttu-id="c2c72-477">9</span><span class="sxs-lookup"><span data-stu-id="c2c72-477">9</span></span>|<span data-ttu-id="c2c72-478">aw</span><span class="sxs-lookup"><span data-stu-id="c2c72-478">aw</span></span>|  
|<span data-ttu-id="c2c72-479">10</span><span class="sxs-lookup"><span data-stu-id="c2c72-479">10</span></span>|<span data-ttu-id="c2c72-480">oy</span><span class="sxs-lookup"><span data-stu-id="c2c72-480">oy</span></span>|  
|<span data-ttu-id="c2c72-481">11</span><span class="sxs-lookup"><span data-stu-id="c2c72-481">11</span></span>|<span data-ttu-id="c2c72-482">结果</span><span class="sxs-lookup"><span data-stu-id="c2c72-482">ay</span></span>|  
|<span data-ttu-id="c2c72-483">12</span><span class="sxs-lookup"><span data-stu-id="c2c72-483">12</span></span>|<span data-ttu-id="c2c72-484">h</span><span class="sxs-lookup"><span data-stu-id="c2c72-484">h</span></span>|  
|<span data-ttu-id="c2c72-485">13</span><span class="sxs-lookup"><span data-stu-id="c2c72-485">13</span></span>|<span data-ttu-id="c2c72-486">r</span><span class="sxs-lookup"><span data-stu-id="c2c72-486">r</span></span>|  
|<span data-ttu-id="c2c72-487">14</span><span class="sxs-lookup"><span data-stu-id="c2c72-487">14</span></span>|<span data-ttu-id="c2c72-488">l</span><span class="sxs-lookup"><span data-stu-id="c2c72-488">l</span></span>|  
|<span data-ttu-id="c2c72-489">15</span><span class="sxs-lookup"><span data-stu-id="c2c72-489">15</span></span>|<span data-ttu-id="c2c72-490">s, z</span><span class="sxs-lookup"><span data-stu-id="c2c72-490">s, z</span></span>|  
|<span data-ttu-id="c2c72-491">16</span><span class="sxs-lookup"><span data-stu-id="c2c72-491">16</span></span>|<span data-ttu-id="c2c72-492">sh，ch、 jh、 zh</span><span class="sxs-lookup"><span data-stu-id="c2c72-492">sh, ch, jh, zh</span></span>|  
|<span data-ttu-id="c2c72-493">17</span><span class="sxs-lookup"><span data-stu-id="c2c72-493">17</span></span>|<span data-ttu-id="c2c72-494">th dh</span><span class="sxs-lookup"><span data-stu-id="c2c72-494">th, dh</span></span>|  
|<span data-ttu-id="c2c72-495">18</span><span class="sxs-lookup"><span data-stu-id="c2c72-495">18</span></span>|<span data-ttu-id="c2c72-496">f、 v</span><span class="sxs-lookup"><span data-stu-id="c2c72-496">f, v</span></span>|  
|<span data-ttu-id="c2c72-497">19</span><span class="sxs-lookup"><span data-stu-id="c2c72-497">19</span></span>|<span data-ttu-id="c2c72-498">d、 t、 n</span><span class="sxs-lookup"><span data-stu-id="c2c72-498">d, t, n</span></span>|  
|<span data-ttu-id="c2c72-499">20</span><span class="sxs-lookup"><span data-stu-id="c2c72-499">20</span></span>|<span data-ttu-id="c2c72-500">k、 g、 ng</span><span class="sxs-lookup"><span data-stu-id="c2c72-500">k, g, ng</span></span>|  
|<span data-ttu-id="c2c72-501">21</span><span class="sxs-lookup"><span data-stu-id="c2c72-501">21</span></span>|<span data-ttu-id="c2c72-502">p、 b、 m</span><span class="sxs-lookup"><span data-stu-id="c2c72-502">p, b, m</span></span>|  
  
 <span data-ttu-id="c2c72-503">与关联的数据有关的信息`VisemeReached`事件，请参阅<xref:System.Speech.Synthesis.VisemeReachedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-503">For information about data associated with the `VisemeReached` event, see <xref:System.Speech.Synthesis.VisemeReachedEventArgs>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Voice">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.VoiceInfo Voice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Synthesis.VoiceInfo Voice" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Voice As VoiceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::VoiceInfo ^ Voice { System::Speech::Synthesis::VoiceInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Voice : System.Speech.Synthesis.VoiceInfo" Usage="System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.VoiceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-504">获取有关当前语音的信息<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-504">Gets information about the current voice of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <value><span data-ttu-id="c2c72-505">返回有关当前语音的信息<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-505">Returns information about the current voice of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-506">当您初始化一个新<xref:System.Speech.Synthesis.SpeechSynthesizer>，它使用默认系统声音。</span><span class="sxs-lookup"><span data-stu-id="c2c72-506">When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer>, it uses the default system voice.</span></span> <span data-ttu-id="c2c72-507">若要配置<xref:System.Speech.Synthesis.SpeechSynthesizer>对象使用安装的语音合成语音之一，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>或<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-507">To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> object to use one of the installed speech synthesis voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method.</span></span> <span data-ttu-id="c2c72-508">若要获取有关哪些安装语音的信息，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类。</span><span class="sxs-lookup"><span data-stu-id="c2c72-508">To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c72-509">下面的示例初始化的实例<xref:System.Speech.Synthesis.SpeechSynthesizer>和获取有关当前语音的信息。</span><span class="sxs-lookup"><span data-stu-id="c2c72-509">The following example initializes an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer> and gets information about the current voice.</span></span>  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Get information about supported audio formats.  
        string AudioFormats = "";  
        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  
        {  
          AudioFormats += String.Format("{0}\n",  
          fmt.EncodingFormat.ToString());  
        }  
  
        // Write information about the voice to the console.  
        Console.WriteLine(" Name:          " + synth.Voice.Name);  
        Console.WriteLine(" Culture:       " + synth.Voice.Culture);  
        Console.WriteLine(" Age:           " + synth.Voice.Age);  
        Console.WriteLine(" Gender:        " + synth.Voice.Gender);  
        Console.WriteLine(" Description:   " + synth.Voice.Description);  
        Console.WriteLine(" ID:            " + synth.Voice.Id);  
        if (synth.Voice.SupportedAudioFormats.Count != 0)  
        {  
          Console.WriteLine(" Audio formats: " + AudioFormats);  
        }  
        else  
        {  
          Console.WriteLine(" No supported audio formats found");  
        }  
  
        // Get additional information about the voice.  
        string AdditionalInfo = "";  
        foreach (string key in synth.Voice.AdditionalInfo.Keys)  
        {  
          AdditionalInfo += String.Format("  {0}: {1}\n",  
            key, synth.Voice.AdditionalInfo[key]);  
        }  
  
        Console.WriteLine(" Additional Info - " + AdditionalInfo);  
        Console.WriteLine();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </Member>
    <Member MemberName="VoiceChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VoiceChange As EventHandler(Of VoiceChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VoiceChangeEventArgs ^&gt; ^ VoiceChange;" />
      <MemberSignature Language="F#" Value="member this.VoiceChange : EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " Usage="member this.VoiceChange : System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-510">时引发的语音<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />更改。</span><span class="sxs-lookup"><span data-stu-id="c2c72-510">Raised when the voice of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c72-511">有关示例，以及与事件相关联的数据有关的信息，请参阅<xref:System.Speech.Synthesis.VoiceChangeEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="c2c72-511">For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.VoiceChangeEventArgs>.</span></span>  
  
 <span data-ttu-id="c2c72-512">您可以更改所用的声音，<xref:System.Speech.Synthesis.SpeechSynthesizer>使用的任何<xref:System.Speech.Synthesis.PromptBuilder>的<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>方法或<xref:System.Speech.Synthesis.SpeechSynthesizer>的<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>或<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c2c72-512">You can change the voice that the <xref:System.Speech.Synthesis.SpeechSynthesizer> uses with any of the <xref:System.Speech.Synthesis.PromptBuilder>'s <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public int Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Volume" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberSignature Language="VB.NET" Value="Public Property Volume As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Volume { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Volume : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c2c72-513">获取或设置输出量<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />对象。</span><span class="sxs-lookup"><span data-stu-id="c2c72-513">Get or sets the output volume of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <value><span data-ttu-id="c2c72-514">返回的卷<see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />，从 0 到 100 之间。</span><span class="sxs-lookup"><span data-stu-id="c2c72-514">Returns the volume of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />, from 0 through 100.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2c72-515">下面的示例设置的卷<xref:System.Speech.Synthesis.SpeechSynthesizer>合成的语音和 WAV 文件的音频输出。</span><span class="sxs-lookup"><span data-stu-id="c2c72-515">The following example sets the volume of the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s audio output for the synthesized voice and the WAV file.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Set the volume of the SpeechSynthesizer's ouput.  
        synth.Volume = 60;  
  
        // Build a prompt containing recorded audio and synthesized speech.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendAudio("C:\\Test\\WelcomeToContosoRadio.wav");  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>