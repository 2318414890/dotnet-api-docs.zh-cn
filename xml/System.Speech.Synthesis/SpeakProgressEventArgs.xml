<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f54b8b8b6532e77da1f9a29531dd75b0711073d1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609842" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <TypeSignature Language="F#" Value="type SpeakProgressEventArgs = class&#xA;    inherit PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>从 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" /> 事件返回数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实例<xref:System.Speech.Synthesis.SpeakProgressEventArgs>时，将创建<xref:System.Speech.Synthesis.SpeechSynthesizer>对象会引发<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>事件。 <xref:System.Speech.Synthesis.SpeechSynthesizer>引发此事件对于它在提示符下使用任一说出每个新单词<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>，或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。  
  
 返回的数据为基础上的代码生成语音合成标记语言 (SSML)。 返回值<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>包含空格字符和由代码生成的 SSML 标记的内容。  
  
   
  
## Examples  
 下面的示例演示从可用的信息<xref:System.Speech.Synthesis.SpeakProgressEventArgs>。 请注意如何<xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>， <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>， <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>，和<xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>方法影响<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>由其添加** \<p >**， **  \< /p >**， ** \<s >**，并** \</s >** 到生成的 SSML 标记。 此外，"30%"，一个用于要朗读此数字的字符串 （30%） 的每个单词的输出中有两个条目。 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>和<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>是相同的每个条目，表示字符"30%。 但是，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A>发生更改以反映的讲话的单词"30"和"百分比"通过<xref:System.Speech.Synthesis.SpeechSynthesizer>。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character postion to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取事件的音频位置。</summary>
        <value>返回音频输出流中的事件的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>规范化数字与对应于如何数将会被朗读的单词。 例如，合成器说出号"4003"作为"四个三个"。 它会发出<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>说出的单词，并返回每个事件<xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A>每个单词。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterCount : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取事件引发之前刚刚说出的单词中的字符数。</summary>
        <value>返回引发事件之前讲出的单词中的字符数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>规范化数字与对应于如何数将会被朗读的单词。 例如，合成器说出号"4003"作为"四个三个"。 它会发出<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>说出的单词的每个事件。 但是，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>的三个单词的每个属性是相同。 在这种情况下，是计数中的字符数"4003"文本中出现提示时，四个。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterPosition : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从提示开始到刚刚说出的单词的第一字母之前的位置的字符与空格数。</summary>
        <value>返回从提示符开始到刚刚讲出的单词的第一个字母前的字符和空格数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> XML 标记，包括其封闭括号中包含的字符计数。 当使用任一<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>，或<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>方法，内容将添加到包括打开和关闭的 SSML 提示`speak`元素。 左括号`speak`元素添加 82 个字符的偏移量和到空间<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>的所有单词和提示中的字母。 例如，在以下代码片段， <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> "this"的第一个字，是 82。  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 在上面的示例<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>"test"的单词为 92。 在以下代码片段<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>的单词"test"为 23 个字符更高版本 (115)，因为左括号**\<诗体论音调 ="高">** 它前面的标记包含 23 个字符和空格 （两个转义符字符"\\"不计算在内)。  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 如果您使用<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>方法将内容添加到在提示符下，通过指定的文件，打开`xml`声明和`speak`文件中的元素不是使用或计数。 在打开后文件中的第一个字符`speak`标记将在位置 82 是否提示中的第一个内容。  
  
 与之相反，字符串参数的<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法不会被添加到的 SSML 提示之前谈话。 因此，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>的第一个单词，"this"，以下代码段中为零。  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>规范化数字与对应于如何数将会被朗读的单词。 例如，合成器说出号"4003"作为"四个三个"。 它会发出<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>三个说出的单词的每个事件。 但是，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>的三个单词的每个属性是相同。 它是数字"4003"文本中的提示的第一个字符之前的位置。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Speech.Synthesis.PromptBuilder>，并追加的 SSML 内容的 XML 文件使用<xref:System.Xml.XmlReader>。 该示例将输出到播放 WAV 文件的语音。 下面的代码示例显示包含 SSML 的 XML 文件的内容。  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>引发事件时只读的文本。</summary>
        <value>返回引发事件时朗读的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>规范化数字与对应于如何数将会被朗读的单词。 例如，合成器说出号"4003"作为"四个三个"。 它会发出<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>说出的单词的每个事件。 但是，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A>的三个单词的每个属性是相同。 它是从提示的文本"4003"。  
  
   
  
## Examples  
 下面的示例演示了如何<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>事件报告<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>和<xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A>包含数字的字符串的属性。  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>