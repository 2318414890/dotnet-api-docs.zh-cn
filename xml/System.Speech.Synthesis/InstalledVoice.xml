<Type Name="InstalledVoice" FullName="System.Speech.Synthesis.InstalledVoice">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4c6248e14c6654b23b0ba72209254b12e023a62a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30526931" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InstalledVoice" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstalledVoice extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.InstalledVoice" />
  <TypeSignature Language="VB.NET" Value="Public Class InstalledVoice" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstalledVoice" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{VoiceInfo.Name} [{Enabled ? "Enabled" : "Disabled"}]")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>包含有关 Windows 中安装的语音合成的声音的信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类用于获取已安装的声音，包括其区域性、 名称、 性别、 年龄有关的信息以及是否启用它。  
  
 若要执行文本到语音转换使用中指定的语言<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>属性、 语音合成引擎支持，必须安装语言-国家/地区代码。 随 Microsoft Windows 7 的语音合成引擎使用以下语言-国家/地区代码：  
  
-   EN-US。 英语 （美国）  
  
-   中文-CN。 中文 （中国）  
  
-   中文-TW。 中文 （台湾）  
  
 此外允许两个字母的语言代码，例如"en"。  
  
   
  
## Examples  
 下面的示例是初始化一个控制台应用程序的一部分<xref:System.Speech.Synthesis.SpeechSynthesizer>对象并输出到控制台的已安装语音 （语音合成引擎） 列表并演示可用于每个语音的信息。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices.   
        Console.WriteLine("Installed voices -");  
        foreach (InstalledVoice voice in synth.GetInstalledVoices())  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          string AudioFormats = "";  
          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  
          {  
            AudioFormats += String.Format("{0}\n",  
            fmt.EncodingFormat.ToString());  
          }  
  
          Console.WriteLine(" Name:          " + info.Name);  
          Console.WriteLine(" Culture:       " + info.Culture);  
          Console.WriteLine(" Age:           " + info.Age);  
          Console.WriteLine(" Gender:        " + info.Gender);  
          Console.WriteLine(" Description:   " + info.Description);  
          Console.WriteLine(" ID:            " + info.Id);  
          Console.WriteLine(" Enabled:       " + voice.Enabled);  
          if (info.SupportedAudioFormats.Count != 0)  
          {  
            Console.WriteLine( " Audio formats: " + AudioFormats);  
          }  
          else  
          {  
            Console.WriteLine(" No supported audio formats found");  
          }  
  
          string AdditionalInfo = "";  
          foreach (string key in info.AdditionalInfo.Keys)  
          {  
            AdditionalInfo += String.Format("  {0}: {1}\n", key, info.AdditionalInfo[key]);  
          }  
  
          Console.WriteLine(" Additional Info - " + AdditionalInfo);  
          Console.WriteLine();  
        }  
      }  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.InstalledVoice.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置某个声音是否可用来生成语音。</summary>
        <value>返回表示声音的启用状态的 <see langword="bool" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性是`true`默认情况下。 在应用程序调用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>，该方法验证是否在注册表中查找的语音的每个符合特定最小的条件。 对于未通过验证，任何声音<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>设置其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性`false`。 应用程序不能选择一种声音其<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性是`false`。 通常情况下，应用程序不会设置某个声音<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints" />
        <altmember cref="Overload:System.Speech.Synthesis.PromptBuilder.StartVoice" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.InstalledVoice.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">可强制转换为 <see cref="T:System.Speech.Synthesis.InstalledVoice" /> 的实例的对象。</param>
        <summary>确定给定对象是否为 <see cref="T:System.Speech.Synthesis.InstalledVoice" /> 的实例且等于 <see cref="T:System.Speech.Synthesis.InstalledVoice" /> 的当前实例。</summary>
        <returns>如果 <see cref="T:System.Speech.Synthesis.InstalledVoice" /> 的当前实例等于从 <paramref name="obj" /> 参数中获取的实例，则返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此方法返回 false<xref:System.Object>由`obj`自变量不能强制转换为<xref:System.Speech.Synthesis.InstalledVoice>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.InstalledVoice.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供 <c>InstalledVoice</c> 对象的哈希代码。</summary>
        <returns>当前 <see cref="T:System.Speech.Synthesis.InstalledVoice" /> 对象的哈希代码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoiceInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.VoiceInfo VoiceInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Synthesis.VoiceInfo VoiceInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.InstalledVoice.VoiceInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VoiceInfo As VoiceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::VoiceInfo ^ VoiceInfo { System::Speech::Synthesis::VoiceInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.VoiceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取有关语音的信息，例如区域性、名称、性别和年龄。</summary>
        <value>有关已安装语音的信息。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>