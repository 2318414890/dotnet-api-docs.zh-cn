<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="JsonReaderWriterFactory.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c0092286e389e04d7f227b072971845d72f42e71.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0092286e389e04d7f227b072971845d72f42e71</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Produces instances of <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of <ph id="ph2">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that can map an XML Infoset to JSON and write JSON-encoded data to a stream.</source>
          <target state="translated">生成 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> 实例和 <ph id="ph2">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> 实例，前者可以从流或缓冲区中读取 JavaScript 对象表示法 (JSON) 编码数据，并将其映射到 XML Infoset；后者可以将 XML Infoset 映射到 JSON，并将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> processes JSON messages using a mapping between JSON data and the XML Infoset.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 使用 JSON 数据和 XML Infoset 之间的映射来处理 JSON 消息。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Normally, this mapping is hidden from view.</source>
          <target state="translated">通常，此映射是隐藏的。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>However, in some advanced scenarios it may be necessary to manually convert between JSON and XML.</source>
          <target state="translated">但是，在某些高级方案中，可能需要手动在 JSON 和 XML 之间进行转换。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> class can be used to create the necessary XML readers and writers.</source>
          <target state="translated">在这种情况下，可以使用 <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> 类来创建所需的 XML 读取器和编写器。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Note that not every XML Infoset element can be mapped to JSON.</source>
          <target state="translated">请注意，并非每个 XML Infoset 元素都可以映射到 JSON。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> mapping, see <bpt id="p1">[</bpt>How to: Serialize and Deserialize JSON Data<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 映射，请参阅<bpt id="p1">[</bpt>如何： 序列化和反序列化 JSON 数据<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map - streams or buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>，它可以将 JavaScript 对象表示法 (JSON) 编码流或缓冲区映射到 XML Infoset。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Each of the overloads uses a <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service (DoS) attacks when reading untrusted data.</source>
          <target state="translated">每个重载均使用 <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> 来防止在读取不受信任数据时受到拒绝服务 (DOS) 攻击。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 使用<ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph>若要防止拒绝服务攻击，在读取不受信任的数据时，请参阅<bpt id="p1">[</bpt>数据的安全注意事项<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> buffer array from which to read.</source>
          <target state="translated">要从中读取数据的输入 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> 缓冲区数组。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">用于防止在读取不受信任数据时受到拒绝服务攻击的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>，它可以将 JavaScript 对象表示法 (JSON) 编码缓冲区映射到 XML Infoset。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can process JavaScript Object Notation (JSON) data.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>，它可以处理 JavaScript 对象表示法 (JSON) 数据。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>This overload does not accept an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
          <target state="translated">此重载不接受 <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> 参数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
          <target state="translated">在读取数据时，将自动检测字符编码（UTF-8、Unicode 或 Big-Endian Unicode）。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 使用<ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph>若要防止拒绝服务攻击，在读取不受信任的数据时，请参阅<bpt id="p1">[</bpt>数据的安全注意事项<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> from which to read.</source>
          <target state="translated">要从中读取数据的输入 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">用于防止在读取不受信任数据时受到拒绝服务攻击的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>，它可以将 JavaScript 对象表示法 (JSON) 编码流映射到 XML Infoset。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">一个可读取 JavaScript 对象表示法 (JSON) 的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>This overload does not take an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
          <target state="translated">此重载不采用 <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> 参数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
          <target state="translated">在读取数据时，将自动检测字符编码（UTF-8、Unicode 或 Big-Endian Unicode）。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 使用<ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph>若要防止拒绝服务攻击，在读取不受信任的数据时，请参阅<bpt id="p1">[</bpt>数据的安全注意事项<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> buffer array from which to read.</source>
          <target state="translated">要从中读取数据的输入 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> 缓冲区数组。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Starting position from which to read in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">在缓冲区<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>中开始读取数据的位置。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Number of bytes that can be read from <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">可以从缓冲区<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>中读取的字节数。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">用于防止在读取不受信任数据时受到拒绝服务攻击的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>，它可以将 JavaScript 对象表示法 (JSON) 编码缓冲区（具有指定大小和偏移量）映射到 XML Infoset。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">一个可读取 JavaScript 对象表示法 (JSON) 的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>This overload does not take an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
          <target state="translated">此重载不采用 <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> 参数。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
          <target state="translated">在读取数据时，将自动检测字符编码（UTF-8、Unicode 或 Big-Endian Unicode）。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 使用<ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph>若要防止拒绝服务攻击，在读取不受信任的数据时，请参阅<bpt id="p1">[</bpt>数据的安全注意事项<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> from which to read.</source>
          <target state="translated">要从中读取数据的输入 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the reader.</source>
          <target state="translated">指定读取器使用的字符编码的 <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is specified as the value, the reader attempts to auto-detect the encoding.</source>
          <target state="translated">如果指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 作为值，读取器将尝试自动检测编码。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">用于防止在读取不受信任数据时受到拒绝服务攻击的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> delegate to call when the reader is closed.</source>
          <target state="translated">在读取器关闭时调用的 <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> 委托。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>，它可以将 JavaScript 对象表示法 (JSON) 编码流（具有指定大小和偏移量）映射到 XML Infoset。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">一个可读取 JavaScript 对象表示法 (JSON) 的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 使用<ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph>若要防止拒绝服务攻击，在读取不受信任的数据时，请参阅<bpt id="p1">[</bpt>数据的安全注意事项<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> buffer array from which to read.</source>
          <target state="translated">要从中读取数据的输入 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> 缓冲区数组。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Starting position from which to read in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">在缓冲区<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>中开始读取数据的位置。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Number of bytes that can be read from <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">可以从缓冲区<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>中读取的字节数。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the reader.</source>
          <target state="translated">指定读取器使用的字符编码的 <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is specified as the value, the reader attempts to auto-detect the encoding.</source>
          <target state="translated">如果指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 作为值，读取器将尝试自动检测编码。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">用于防止在读取不受信任数据时受到拒绝服务攻击的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> delegate to call when the reader is closed.</source>
          <target state="translated">在读取器关闭时调用的 <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> 委托。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>，它可以将 JavaScript 对象表示法 (JSON) 编码缓冲区（具有指定大小、偏移量和字符编码）映射到 XML Infoset。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">一个可读取 JavaScript 对象表示法 (JSON) 的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 使用<ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph>若要防止拒绝服务攻击，在读取不受信任的数据时，请参阅<bpt id="p1">[</bpt>数据的安全注意事项<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> static method returns an instance of an <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> that can map an XML Infoset to a JSON stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> 静态方法返回 <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> 的实例，该实例可以将 XML Infoset 映射到 JSON 流。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> is not guaranteed to produce valid JSON.</source>
          <target state="translated">无法保证 <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> 可生成有效的 JSON。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>If it is used in a way not supported by the JSON-XML mapping, it may either throw an exception or write an invalid JSON document.</source>
          <target state="translated">如果以 JSON-XML 映射不支持的方式使用它，则可能会引发异常或写入无效 JSON 文档。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">JSON 编写器的输出 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它基于 XML Infoset 将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>The default character encoding is UTF-8.</source>
          <target state="translated">默认字符编码为 UTF-8。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>When the writer is closed, the stream is closed as well.</source>
          <target state="translated">在关闭编写器时，也会关闭流。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">JSON 编写器的输出 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">指定写入器使用的字符编码的 <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">默认编码为 UTF-8。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character encoding.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它使用指定的字符编码将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它基于 XML Infoset 将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>When the writer is closed, the stream is closed as well.</source>
          <target state="translated">在关闭编写器时，也会关闭流。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">JSON 编写器的输出 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">指定写入器使用的字符编码的 <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">默认编码为 UTF-8。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则在完成时写入器关闭输出流；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character encoding.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它使用指定的字符编码将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它基于 XML Infoset 将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">JSON 编写器的输出 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">指定写入器使用的字符编码的 <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">默认编码为 UTF-8。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则在完成时写入器关闭输出流；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output uses multiline format, indenting each level properly; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，输出会使用多行的布局，恰当地缩进每个级别；否则， <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它使用指定的字符将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它基于 XML Infoset 将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">JSON 编写器的输出 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">指定写入器使用的字符编码的 <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">默认编码为 UTF-8。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则在完成时写入器关闭输出流；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output uses multiline format, indenting each level properly; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，输出会使用多行的布局，恰当地缩进每个级别；否则， <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The string used to indent each level.</source>
          <target state="translated">用于缩进每个级别的字符串。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它使用指定的字符将 JSON 编码数据写入流中。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>，它基于 XML Infoset 将 JSON 编码数据写入流中。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>