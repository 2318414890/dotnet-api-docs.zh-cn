<Type Name="JsonReaderWriterFactory" FullName="System.Runtime.Serialization.Json.JsonReaderWriterFactory">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="66f9191772d6ceb62ed433c4a22052685c41d796" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52192858" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class JsonReaderWriterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonReaderWriterFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonReaderWriterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonReaderWriterFactory abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonReaderWriterFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Web</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="80f9c-101">生成 <see cref="T:System.Xml.XmlDictionaryReader" /> 实例和 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，前者可以从流或缓冲区中读取 JavaScript 对象表示法 (JSON) 编码数据，并将其映射到 XML Infoset；后者可以将 XML Infoset 映射到 JSON，并将 JSON 编码数据写入流中。</span>
      <span class="sxs-lookup">
        <span data-stu-id="80f9c-101">Produces instances of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of <see cref="T:System.Xml.XmlDictionaryWriter" /> that can map an XML Infoset to JSON and write JSON-encoded data to a stream.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-102">Windows Communication Foundation (WCF) 来处理 JSON 消息使用 JSON 数据和 XML Infoset 之间的映射。</span><span class="sxs-lookup"><span data-stu-id="80f9c-102">Windows Communication Foundation (WCF) processes JSON messages using a mapping between JSON data and the XML Infoset.</span></span> <span data-ttu-id="80f9c-103">通常，此映射是隐藏的。</span><span class="sxs-lookup"><span data-stu-id="80f9c-103">Normally, this mapping is hidden from view.</span></span> <span data-ttu-id="80f9c-104">但是，在某些高级方案中，可能需要手动在 JSON 和 XML 之间进行转换。</span><span class="sxs-lookup"><span data-stu-id="80f9c-104">However, in some advanced scenarios it may be necessary to manually convert between JSON and XML.</span></span> <span data-ttu-id="80f9c-105">在这种情况下，可以使用 <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory> 类来创建所需的 XML 读取器和编写器。</span><span class="sxs-lookup"><span data-stu-id="80f9c-105">In this case, the <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory> class can be used to create the necessary XML readers and writers.</span></span> <span data-ttu-id="80f9c-106">请注意，并非每个 XML Infoset 元素都可以映射到 JSON。</span><span class="sxs-lookup"><span data-stu-id="80f9c-106">Note that not every XML Infoset element can be mapped to JSON.</span></span> <span data-ttu-id="80f9c-107">有关映射的详细信息，请参阅[如何： 序列化和反序列化 JSON 数据](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)。</span><span class="sxs-lookup"><span data-stu-id="80f9c-107">For more information about mapping, see [How to: Serialize and Deserialize JSON Data](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateJsonReader">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="80f9c-108">创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码流或缓冲区映射到 XML Infoset。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-108">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map - streams or buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-109">每个重载均使用 <xref:System.Xml.XmlDictionaryReaderQuotas> 来防止在读取不受信任数据时受到拒绝服务 (DOS) 攻击。</span><span class="sxs-lookup"><span data-stu-id="80f9c-109">Each of the overloads uses a <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service (DoS) attacks when reading untrusted data.</span></span> <span data-ttu-id="80f9c-110">有关使用详细信息<xref:System.Xml.XmlDictionaryReaderQuotas>若要防止拒绝服务攻击在读取不受信任的数据时，请参阅[数据的安全注意事项](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)。</span><span class="sxs-lookup"><span data-stu-id="80f9c-110">For more information about using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (byte[] buffer, System.Xml.XmlDictionaryReaderQuotas quotas);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(unsigned int8[] buffer, class System.Xml.XmlDictionaryReaderQuotas quotas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateJsonReader (buffer As Byte(), quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(cli::array &lt;System::Byte&gt; ^ buffer, System::Xml::XmlDictionaryReaderQuotas ^ quotas);" />
      <MemberSignature Language="F#" Value="static member CreateJsonReader : byte[] * System.Xml.XmlDictionaryReaderQuotas -&gt; System.Xml.XmlDictionaryReader" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader (buffer, quotas)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="80f9c-111">要从中读取数据的输入 <see cref="T:System.Byte" /> 缓冲区数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-111">The input <see cref="T:System.Byte" /> buffer array from which to read.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="80f9c-112">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-112">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-113">创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码缓冲区映射到 XML Infoset。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-113">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-114">一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以处理 JavaScript 对象表示法 (JSON) 数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-114">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can process JavaScript Object Notation (JSON) data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-115">此重载不接受 <xref:System.Text.Encoding> 参数。</span><span class="sxs-lookup"><span data-stu-id="80f9c-115">This overload does not accept an <xref:System.Text.Encoding> parameter.</span></span> <span data-ttu-id="80f9c-116">在读取数据时，将自动检测字符编码（UTF-8、Unicode 或 Big-Endian Unicode）。</span><span class="sxs-lookup"><span data-stu-id="80f9c-116">The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</span></span>  
  
 <span data-ttu-id="80f9c-117">有关使用详细信息<xref:System.Xml.XmlDictionaryReaderQuotas>若要防止拒绝服务攻击在读取不受信任的数据时，请参阅[数据的安全注意事项](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)。</span><span class="sxs-lookup"><span data-stu-id="80f9c-117">For more information about using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (System.IO.Stream stream, System.Xml.XmlDictionaryReaderQuotas quotas);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(class System.IO.Stream stream, class System.Xml.XmlDictionaryReaderQuotas quotas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(System::IO::Stream ^ stream, System::Xml::XmlDictionaryReaderQuotas ^ quotas);" />
      <MemberSignature Language="F#" Value="static member CreateJsonReader : System.IO.Stream * System.Xml.XmlDictionaryReaderQuotas -&gt; System.Xml.XmlDictionaryReader" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader (stream, quotas)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="80f9c-118">要从中读取数据的输入 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-118">The input <see cref="T:System.IO.Stream" /> from which to read.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="80f9c-119">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-119">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-120">创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码流映射到 XML Infoset。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-120">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-121">一个可读取 JavaScript 对象表示法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-121">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-122">此重载不采用 <xref:System.Text.Encoding> 参数。</span><span class="sxs-lookup"><span data-stu-id="80f9c-122">This overload does not take an <xref:System.Text.Encoding> parameter.</span></span> <span data-ttu-id="80f9c-123">在读取数据时，将自动检测字符编码（UTF-8、Unicode 或 Big-Endian Unicode）。</span><span class="sxs-lookup"><span data-stu-id="80f9c-123">The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</span></span>  
  
 <span data-ttu-id="80f9c-124">有关使用详细信息<xref:System.Xml.XmlDictionaryReaderQuotas>若要防止拒绝服务攻击在读取不受信任的数据时，请参阅[数据的安全注意事项](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)。</span><span class="sxs-lookup"><span data-stu-id="80f9c-124">For more information about using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (byte[] buffer, int offset, int count, System.Xml.XmlDictionaryReaderQuotas quotas);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(unsigned int8[] buffer, int32 offset, int32 count, class System.Xml.XmlDictionaryReaderQuotas quotas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateJsonReader (buffer As Byte(), offset As Integer, count As Integer, quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Xml::XmlDictionaryReaderQuotas ^ quotas);" />
      <MemberSignature Language="F#" Value="static member CreateJsonReader : byte[] * int * int * System.Xml.XmlDictionaryReaderQuotas -&gt; System.Xml.XmlDictionaryReader" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader (buffer, offset, count, quotas)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="80f9c-125">要从中读取数据的输入 <see cref="T:System.Byte" /> 缓冲区数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-125">The input <see cref="T:System.Byte" /> buffer array from which to read.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="80f9c-126">
            <paramref name="buffer" /> 中开始读取数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-126">Starting position from which to read in <paramref name="buffer" />.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="80f9c-127">可以从 <paramref name="buffer" /> 中读取的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-127">Number of bytes that can be read from <paramref name="buffer" />.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="80f9c-128">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-128">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-129">创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码缓冲区（具有指定大小和偏移量）映射到 XML Infoset。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-129">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-130">一个可读取 JavaScript 对象表示法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-130">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-131">此重载不采用 <xref:System.Text.Encoding> 参数。</span><span class="sxs-lookup"><span data-stu-id="80f9c-131">This overload does not take an <xref:System.Text.Encoding> parameter.</span></span> <span data-ttu-id="80f9c-132">在读取数据时，将自动检测字符编码（UTF-8、Unicode 或 Big-Endian Unicode）。</span><span class="sxs-lookup"><span data-stu-id="80f9c-132">The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</span></span>  
  
 <span data-ttu-id="80f9c-133">有关使用详细信息<xref:System.Xml.XmlDictionaryReaderQuotas>若要防止拒绝服务攻击在读取不受信任的数据时，请参阅[数据的安全注意事项](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)。</span><span class="sxs-lookup"><span data-stu-id="80f9c-133">For more information about using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (System.IO.Stream stream, System.Text.Encoding encoding, System.Xml.XmlDictionaryReaderQuotas quotas, System.Xml.OnXmlDictionaryReaderClose onClose);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(class System.IO.Stream stream, class System.Text.Encoding encoding, class System.Xml.XmlDictionaryReaderQuotas quotas, class System.Xml.OnXmlDictionaryReaderClose onClose) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, System::Xml::XmlDictionaryReaderQuotas ^ quotas, System::Xml::OnXmlDictionaryReaderClose ^ onClose);" />
      <MemberSignature Language="F#" Value="static member CreateJsonReader : System.IO.Stream * System.Text.Encoding * System.Xml.XmlDictionaryReaderQuotas * System.Xml.OnXmlDictionaryReaderClose -&gt; System.Xml.XmlDictionaryReader" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader (stream, encoding, quotas, onClose)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
        <Parameter Name="onClose" Type="System.Xml.OnXmlDictionaryReaderClose" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="80f9c-134">要从中读取数据的输入 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-134">The input <see cref="T:System.IO.Stream" /> from which to read.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="80f9c-135">指定读取器使用的字符编码的 <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-135">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the reader.</span>
          </span>
          <span data-ttu-id="80f9c-136">如果指定 <see langword="null" /> 作为值，读取器将尝试自动检测编码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-136">If <see langword="null" /> is specified as the value, the reader attempts to auto-detect the encoding.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="80f9c-137">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-137">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <param name="onClose">
          <span data-ttu-id="80f9c-138">在读取器关闭时调用的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-138">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> delegate to call when the reader is closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-139">创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码流（具有指定大小和偏移量）映射到 XML Infoset。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-139">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-140">一个可读取 JavaScript 对象表示法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-140">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-141">有关使用详细信息<xref:System.Xml.XmlDictionaryReaderQuotas>若要防止拒绝服务攻击在读取不受信任的数据时，请参阅[数据的安全注意事项](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)。</span><span class="sxs-lookup"><span data-stu-id="80f9c-141">For more information about using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (byte[] buffer, int offset, int count, System.Text.Encoding encoding, System.Xml.XmlDictionaryReaderQuotas quotas, System.Xml.OnXmlDictionaryReaderClose onClose);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(unsigned int8[] buffer, int32 offset, int32 count, class System.Text.Encoding encoding, class System.Xml.XmlDictionaryReaderQuotas quotas, class System.Xml.OnXmlDictionaryReaderClose onClose) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Text::Encoding ^ encoding, System::Xml::XmlDictionaryReaderQuotas ^ quotas, System::Xml::OnXmlDictionaryReaderClose ^ onClose);" />
      <MemberSignature Language="F#" Value="static member CreateJsonReader : byte[] * int * int * System.Text.Encoding * System.Xml.XmlDictionaryReaderQuotas * System.Xml.OnXmlDictionaryReaderClose -&gt; System.Xml.XmlDictionaryReader" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader (buffer, offset, count, encoding, quotas, onClose)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
        <Parameter Name="onClose" Type="System.Xml.OnXmlDictionaryReaderClose" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="80f9c-142">要从中读取数据的输入 <see cref="T:System.Byte" /> 缓冲区数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-142">The input <see cref="T:System.Byte" /> buffer array from which to read.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="80f9c-143">
            <paramref name="buffer" /> 中开始读取数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-143">Starting position from which to read in <paramref name="buffer" />.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="80f9c-144">可以从 <paramref name="buffer" /> 中读取的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-144">Number of bytes that can be read from <paramref name="buffer" />.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="80f9c-145">指定读取器使用的字符编码的 <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-145">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the reader.</span>
          </span>
          <span data-ttu-id="80f9c-146">如果指定 <see langword="null" /> 作为值，读取器将尝试自动检测编码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-146">If <see langword="null" /> is specified as the value, the reader attempts to auto-detect the encoding.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="80f9c-147">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-147">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <param name="onClose">
          <span data-ttu-id="80f9c-148">在读取器关闭时调用的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-148">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> delegate to call when the reader is closed.</span>
          </span>
          <span data-ttu-id="80f9c-149">默认值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-149">The default value is <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-150">创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码缓冲区（具有指定大小、偏移量和字符编码）映射到 XML Infoset。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-150">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-151">一个可读取 JavaScript 对象表示法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-151">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-152">有关使用详细信息<xref:System.Xml.XmlDictionaryReaderQuotas>若要防止拒绝服务攻击在读取不受信任的数据时，请参阅[数据的安全注意事项](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)。</span><span class="sxs-lookup"><span data-stu-id="80f9c-152">For more information about using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateJsonWriter">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="80f9c-153">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-153">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-154"><xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> 静态方法返回 <xref:System.Xml.XmlDictionaryWriter> 的实例，该实例可以将 XML Infoset 映射到 JSON 流。</span><span class="sxs-lookup"><span data-stu-id="80f9c-154">The <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> static method returns an instance of an <xref:System.Xml.XmlDictionaryWriter> that can map an XML Infoset to a JSON stream.</span></span> <span data-ttu-id="80f9c-155">无法保证 <xref:System.Xml.XmlDictionaryWriter> 可生成有效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="80f9c-155">The <xref:System.Xml.XmlDictionaryWriter> is not guaranteed to produce valid JSON.</span></span> <span data-ttu-id="80f9c-156">如果以 JSON-XML 映射不支持的方式使用它，则可能会引发异常或写入无效 JSON 文档。</span><span class="sxs-lookup"><span data-stu-id="80f9c-156">If it is used in a way not supported by the JSON-XML mapping, it may either throw an exception or write an invalid JSON document.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member CreateJsonWriter : System.IO.Stream -&gt; System.Xml.XmlDictionaryWriter" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="80f9c-157">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-157">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-158">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-158">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-159">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-159">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-160">默认字符编码为 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="80f9c-160">The default character encoding is UTF-8.</span></span> <span data-ttu-id="80f9c-161">在关闭编写器时，也会关闭流。</span><span class="sxs-lookup"><span data-stu-id="80f9c-161">When the writer is closed, the stream is closed as well.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="static member CreateJsonWriter : System.IO.Stream * System.Text.Encoding -&gt; System.Xml.XmlDictionaryWriter" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter (stream, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="80f9c-162">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-162">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="80f9c-163">指定写入器使用的字符编码的 <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-163">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer.</span>
          </span>
          <span data-ttu-id="80f9c-164">默认编码为 UTF-8。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-164">The default encoding is UTF-8.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-165">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它使用指定的字符编码将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-165">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-166">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-166">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f9c-167">在关闭编写器时，也会关闭流。</span><span class="sxs-lookup"><span data-stu-id="80f9c-167">When the writer is closed, the stream is closed as well.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream, System.Text.Encoding encoding, bool ownsStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream, class System.Text.Encoding encoding, bool ownsStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, bool ownsStream);" />
      <MemberSignature Language="F#" Value="static member CreateJsonWriter : System.IO.Stream * System.Text.Encoding * bool -&gt; System.Xml.XmlDictionaryWriter" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter (stream, encoding, ownsStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="ownsStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="80f9c-168">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-168">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="80f9c-169">指定写入器使用的字符编码的 <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-169">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer.</span>
          </span>
          <span data-ttu-id="80f9c-170">默认编码为 UTF-8。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-170">The default encoding is UTF-8.</span>
          </span>
        </param>
        <param name="ownsStream">
          <span data-ttu-id="80f9c-171">如果为 <see langword="true" />，则在完成时写入器关闭输出流；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-171">If <see langword="true" />, the output stream is closed by the writer when done; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="80f9c-172">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-172">The default value is <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-173">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它使用指定的字符编码将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-173">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-174">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-174">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream, System.Text.Encoding encoding, bool ownsStream, bool indent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream, class System.Text.Encoding encoding, bool ownsStream, bool indent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, bool ownsStream, bool indent);" />
      <MemberSignature Language="F#" Value="static member CreateJsonWriter : System.IO.Stream * System.Text.Encoding * bool * bool -&gt; System.Xml.XmlDictionaryWriter" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter (stream, encoding, ownsStream, indent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="ownsStream" Type="System.Boolean" />
        <Parameter Name="indent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="80f9c-175">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-175">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="80f9c-176">指定写入器使用的字符编码的 <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-176">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer.</span>
          </span>
          <span data-ttu-id="80f9c-177">默认编码为 UTF-8。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-177">The default encoding is UTF-8.</span>
          </span>
        </param>
        <param name="ownsStream">
          <span data-ttu-id="80f9c-178">如果为 <see langword="true" />，则在完成时写入器关闭输出流；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-178">If <see langword="true" />, the output stream is closed by the writer when done; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="80f9c-179">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-179">The default value is <see langword="true" />.</span>
          </span>
        </param>
        <param name="indent">
          <span data-ttu-id="80f9c-180">如果 <see langword="true" />，输出会使用多行的布局，恰当地缩进每个级别；否则， <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-180">If <see langword="true" />, the output uses multiline format, indenting each level properly; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-181">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它使用指定的字符将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-181">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-182">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-182">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream, System.Text.Encoding encoding, bool ownsStream, bool indent, string indentChars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream, class System.Text.Encoding encoding, bool ownsStream, bool indent, string indentChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, bool ownsStream, bool indent, System::String ^ indentChars);" />
      <MemberSignature Language="F#" Value="static member CreateJsonWriter : System.IO.Stream * System.Text.Encoding * bool * bool * string -&gt; System.Xml.XmlDictionaryWriter" Usage="System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter (stream, encoding, ownsStream, indent, indentChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="ownsStream" Type="System.Boolean" />
        <Parameter Name="indent" Type="System.Boolean" />
        <Parameter Name="indentChars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="80f9c-183">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-183">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="80f9c-184">指定写入器使用的字符编码的 <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-184">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer.</span>
          </span>
          <span data-ttu-id="80f9c-185">默认编码为 UTF-8。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-185">The default encoding is UTF-8.</span>
          </span>
        </param>
        <param name="ownsStream">
          <span data-ttu-id="80f9c-186">如果为 <see langword="true" />，则在完成时写入器关闭输出流；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-186">If <see langword="true" />, the output stream is closed by the writer when done; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="80f9c-187">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-187">The default value is <see langword="true" />.</span>
          </span>
        </param>
        <param name="indent">
          <span data-ttu-id="80f9c-188">如果 <see langword="true" />，输出会使用多行的布局，恰当地缩进每个级别；否则， <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-188">If <see langword="true" />, the output uses multiline format, indenting each level properly; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="indentChars">
          <span data-ttu-id="80f9c-189">用于缩进每个级别的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-189">The string used to indent each level.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80f9c-190">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它使用指定的字符将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-190">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="80f9c-191">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="80f9c-191">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>