<Type Name="ComContractElement" FullName="System.ServiceModel.Configuration.ComContractElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ccc0a3a59cc97bc42a1b56428a2ab7ce41b1030" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ComContractElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComContractElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Configuration.ComContractElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComContractElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComContractElement sealed : System::Configuration::ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8d78a-101">指定 COM+ 集成服务协定。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8d78a-101">Specifies a COM+ integration service contract.</span>
      </span>
      <span data-ttu-id="8d78a-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8d78a-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d78a-103">COM + 集成服务协定是当前只限于"http://tempuri.org"命名空间和协定名称从支持的 COM 接口派生。</span><span class="sxs-lookup"><span data-stu-id="8d78a-103">COM+ integration service contracts are currently restricted to the "http://tempuri.org" namespace, and the contract name is derived from the supporting COM interface.</span></span> <span data-ttu-id="8d78a-104">但是，可以使用配置文件中的 `comContracts` 节来指定替代服务协定。</span><span class="sxs-lookup"><span data-stu-id="8d78a-104">You can, however, specify alternatives by using the `comContracts` section in the configuration file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d78a-105">可以使用以下配置来指定命名空间、协定名称和要包含的用户定义类型。</span><span class="sxs-lookup"><span data-stu-id="8d78a-105">You can use the following configuration to specify the namespace, contract name, and user defined types to be included.</span></span> <span data-ttu-id="8d78a-106">您还可以为服务协定指定其他设置。</span><span class="sxs-lookup"><span data-stu-id="8d78a-106">You can also specify other settings for a service contract</span></span>  
  
 [!code-xml[S_UEComContractElement#100](~/samples/snippets/csharp/VS_Snippets_CFX/s_uecomcontractelement/common/app.config#100)]   
  
 <span data-ttu-id="8d78a-107">在初始化服务时，指定的命名空间和协定名称将应用到生成的服务说明。</span><span class="sxs-lookup"><span data-stu-id="8d78a-107">When the service is initialized, the specified namespaces and contract names are applied to the generated service descriptions.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8d78a-108">初始化 <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-108">Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComContractElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Configuration.ComContractElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComContractElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8d78a-109">初始化 <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-109">Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComContractElement (string contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Configuration.ComContractElement.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComContractElement(System::String ^ contractType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contractType">
          <span data-ttu-id="8d78a-110">一个包含协定类型的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-110">A string that contains the type of contract.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8d78a-111">初始化 <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-111">Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contract">
      <MemberSignature Language="C#" Value="public string Contract { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Contract" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.Contract" />
      <MemberSignature Language="VB.NET" Value="Public Property Contract As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Contract { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("contract", Options=System.Configuration.ConfigurationPropertyOptions.IsKey | System.Configuration.ConfigurationPropertyOptions.IsRequired)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d78a-112">获取或设置协定类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-112">Gets or sets the contract type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d78a-113">协定类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-113">The contract type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExposedMethods">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Configuration.ComMethodElementCollection ExposedMethods { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Configuration.ComMethodElementCollection ExposedMethods" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.ExposedMethods" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExposedMethods As ComMethodElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Configuration::ComMethodElementCollection ^ ExposedMethods { System::ServiceModel::Configuration::ComMethodElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("exposedMethods", Options=System.Configuration.ConfigurationPropertyOptions.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Configuration.ComMethodElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d78a-114">获取在 COM+ 组件上的接口作为 Web 服务公开时所公开的 COM+ 方法的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-114">Gets a collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d78a-115">一个在 COM+ 组件上的接口作为 Web 服务公开时所公开的 COM+ 方法的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-115">The collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d78a-116">可以使用 COM+ 集成配置工具 (ComSvcConfig.exe) 来添加 COM 接口中的特定方法，使其出现在生成的服务协定中。</span><span class="sxs-lookup"><span data-stu-id="8d78a-116">The COM+ integration configuration tool (ComSvcConfig.exe) can be used to add specific methods from a COM interface to appear on the generated service contract.</span></span>  
  
 <span data-ttu-id="8d78a-117">例如，可以使用以下命令将 `IFinances` 组件上的 `ItemOrders.Financial` COM 接口中的三个命名方法添加到生成的服务协定中。</span><span class="sxs-lookup"><span data-stu-id="8d78a-117">For example, you can use the following command to add the three named methods from the `IFinances` COM interface on the `ItemOrders.Financial` component, to the generated service contract.</span></span>  
  
```  
ComSvcConfig.exe /i /application:OnlineStore /contract:ItemOrders.Financial,IFinances.{TransferFunds,AddFunds,RemoveFunds} /hosting:complus  
```  
  
 <span data-ttu-id="8d78a-118">在运行 ComSvcConfig.exe 工具时，该工具还会生成以下服务协定，将先前提到的方法作为 `exposedMethod` 元素列出。</span><span class="sxs-lookup"><span data-stu-id="8d78a-118">When you run the ComSvcConfig.exe tool, it then generates the following service contract listing the previously mentioned methods as `exposedMethod` elements.</span></span>  
  
 [!code-xml[S_UEComContractElement#101](~/samples/snippets/csharp/VS_Snippets_CFX/s_uecomcontractelement/common/app2.config#101)]   
  
 <span data-ttu-id="8d78a-119">在服务初始化时，运行库会试图通过只反射和添加 `exposedMethod` 元素列表中所包括的方法来生成服务协定。</span><span class="sxs-lookup"><span data-stu-id="8d78a-119">At service initialization time, the runtime attempts to generate a service contract by reflecting over and adding only the methods included in the list of `exposedMethod` elements.</span></span> <span data-ttu-id="8d78a-120">对于该服务协定中未包括的每个接口方法，都会产生一个跟踪。</span><span class="sxs-lookup"><span data-stu-id="8d78a-120">A trace is produced for every interface method that is not included on the service contract.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("name", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d78a-121">获取或设置协定名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-121">Gets or sets the contract name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d78a-122">协定名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-122">The contract name.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("namespace", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d78a-123">获取或设置协定命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-123">Gets or sets the contract namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d78a-124">协定命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-124">The contract namespace.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistableTypes">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Configuration.ComPersistableTypeElementCollection PersistableTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Configuration.ComPersistableTypeElementCollection PersistableTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.PersistableTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistableTypes As ComPersistableTypeElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Configuration::ComPersistableTypeElementCollection ^ PersistableTypes { System::ServiceModel::Configuration::ComPersistableTypeElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("persistableTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Configuration.ComPersistableTypeElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d78a-125">获取所有持久类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-125">Gets all the persistable types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d78a-126">持久类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-126">The persistable types.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresSession">
      <MemberSignature Language="C#" Value="public bool RequiresSession { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresSession" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.RequiresSession" />
      <MemberSignature Language="VB.NET" Value="Public Property RequiresSession As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequiresSession { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requiresSession", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d78a-127">获取或设置一个布尔值，该值指定是否只能在会话绑定上使用该协定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-127">Gets or sets a Boolean value that specifies whether the contract can only be used on sessionful bindings.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d78a-128">如果只能在会话绑定上使用该协定，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-128">
              <see langword="true" /> if the contract can only be used on sessionful bindings; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8d78a-129">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-129">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d78a-130">在初始化服务时，集成运行库可以确保此设置与要使用的绑定的类型一致。</span><span class="sxs-lookup"><span data-stu-id="8d78a-130">When the service is initialized, the integration runtime ensures that this setting is consistent with the type of binding to be used.</span></span> <span data-ttu-id="8d78a-131">如果协定的一个或多个绑定存在冲突，则会生成异常。</span><span class="sxs-lookup"><span data-stu-id="8d78a-131">An exception is generated if one or more of the bindings for the contract are in conflict.</span></span> <span data-ttu-id="8d78a-132">如果此属性为 `false`、使用的是单向通道并且存在任何 [out] 参数，则也会生成异常。</span><span class="sxs-lookup"><span data-stu-id="8d78a-132">If this property is `false`, a one-way channel is in use and there are any [out] parameters, an exception is also generated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserDefinedTypes">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Configuration.ComUdtElementCollection UserDefinedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Configuration.ComUdtElementCollection UserDefinedTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserDefinedTypes As ComUdtElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Configuration::ComUdtElementCollection ^ UserDefinedTypes { System::ServiceModel::Configuration::ComUdtElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("userDefinedTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Configuration.ComUdtElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8d78a-133">获取要包括在服务协定中的用户定义类型 (UDT) 的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-133">Gets a collection of User Defined Types (UDT) that is to be included in the service contract.</span>
          </span>
          <span data-ttu-id="8d78a-134">此类不能被继承。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-134">This class cannot be inherited.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8d78a-135">用户定义类型 (UDT) 的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8d78a-135">The collection of User Defined Types (UDT).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d78a-136">COM+ 集成运行时通过检查类型库来创建服务。</span><span class="sxs-lookup"><span data-stu-id="8d78a-136">The COM+ integration runtime creates services by inspecting the type library.</span></span> <span data-ttu-id="8d78a-137">当 COM+ 组件包含传递 VARIANT 的方法时，系统将无法确定要在运行时之前传递的实际类型。</span><span class="sxs-lookup"><span data-stu-id="8d78a-137">When a COM+ component contains methods that pass a VARIANT, the system cannot determine the actual types to be passed prior to runtime.</span></span> <span data-ttu-id="8d78a-138">因此，当您试图在 VARIANT 内传递用户定义类型 (UDT) 时，将由于该类型不是可供序列化的已知类型而失败。</span><span class="sxs-lookup"><span data-stu-id="8d78a-138">Therefore, when you attempt to pass a User Defined Type (UDT) within a VARIANT, it fails because it is not a known type for serialization.</span></span>  
  
 <span data-ttu-id="8d78a-139">若要避免此问题，可以将 UDT 添加到配置文件，以使 UDT 作为已知类型包括到相应的服务协定中。</span><span class="sxs-lookup"><span data-stu-id="8d78a-139">To circumvent this problem, you can add the UDTs to the configuration file so that they can be included as known types on the appropriate service contract.</span></span> <span data-ttu-id="8d78a-140">为此，必须唯一地标识 UDT 和协定（即使用它的原始 COM 接口）。</span><span class="sxs-lookup"><span data-stu-id="8d78a-140">In order to do so, you have to uniquely identify the UDT and the contract(s), that is, the original COM interface(s) that uses it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d78a-141">下面的示例演示将两个特定的 UDT 添加到配置文件的 <`userDefinedTypes`> 节，以便达到此目的。</span><span class="sxs-lookup"><span data-stu-id="8d78a-141">The following example demonstrates adding two specific UDTs to the <`userDefinedTypes`> section of the configuration file for this purpose.</span></span>  
  
 [!code-xml[S_UEComContractElement#102](~/samples/snippets/csharp/VS_Snippets_CFX/s_uecomcontractelement/common/app3.config#102)]   
  
 <span data-ttu-id="8d78a-142">属性 <`userDefinedType`> 元素定义，如下所示：</span><span class="sxs-lookup"><span data-stu-id="8d78a-142">The attributes of the <`userDefinedType`> element are defined as follows:</span></span>  
  
-   <span data-ttu-id="8d78a-143">`typeName`：一个提供可读取的类型名称的可选属性。</span><span class="sxs-lookup"><span data-stu-id="8d78a-143">`typeName`: An optional attribute that provides the readable type name.</span></span> <span data-ttu-id="8d78a-144">运行库不使用该属性，但该属性可以帮助读取器区分类型。</span><span class="sxs-lookup"><span data-stu-id="8d78a-144">This is not used by the runtime but helps a reader to distinguish the types.</span></span>  
  
-   <span data-ttu-id="8d78a-145">`typeLibID`：一个 GUID 字符串，指定定义该类型的已注册类型库。</span><span class="sxs-lookup"><span data-stu-id="8d78a-145">`typeLibID`: A GUID string that specifies the registered type library that defines the type.</span></span>  
  
-   <span data-ttu-id="8d78a-146">`typeLibVersion`：一个字符串，指定定义该类型的类型库版本。</span><span class="sxs-lookup"><span data-stu-id="8d78a-146">`typeLibVersion`: A string that specifies the type library version that defines the type.</span></span>  
  
-   <span data-ttu-id="8d78a-147">`typeDefID`：一个 GUID 字符串，指定已注册类型库中的特定 UDT 类型。</span><span class="sxs-lookup"><span data-stu-id="8d78a-147">`typeDefID`: A GUID string that specifies the specific UDT type within the registered type library.</span></span>  
  
 <span data-ttu-id="8d78a-148">在初始化服务时，集成运行库会查找指定的类型，然后将这些类型添加到指定协定的已知类型集合中。</span><span class="sxs-lookup"><span data-stu-id="8d78a-148">When the service is initialized, the integration runtime looks up the specified types and adds them to the known types collection for the specified contracts.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>