<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Lookup`2.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86ca9e2980211c039a479e811548ed9a6c5b7ef05b5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9e2980211c039a479e811548ed9a6c5b7ef05b5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The type of the keys in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中的键的类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The type of the elements of each <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> value in the <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 中的每个 <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 值的元素的类型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Lookup`2">
          <source>Represents a collection of keys each mapped to one or more values.</source>
          <target state="translated">表示键的集合，其中每个键映射到一个或多个值。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> resembles a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>类似于<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The difference is that a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> maps keys to single values, whereas a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> maps keys to collections of values.</source>
          <target state="translated">差异在于<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>键映射到单个值，而<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>键映射到值的集合。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>You can create an instance of a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> by calling <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph> on an object that implements <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">你可以创建的实例<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>通过调用<ph id="ph2">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph>上实现的对象<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>There is no public constructor to create a new instance of a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">没有公共构造函数创建的新实例<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> objects are immutable, that is, you cannot add or remove elements or keys from a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> object after it has been created.</source>
          <target state="translated">此外，<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>对象的不可变，，也就是说，你无法添加或删除元素或键从<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>对象已被创建后。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> from a collection of objects.</source>
          <target state="translated">下面的示例创建<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>从对象的集合。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>It then enumerates the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> and outputs each key and each value in the key's associated collection of values.</source>
          <target state="translated">然后枚举<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>并输出每个密钥和密钥的关联值的集合中每个值。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>It also demonstrates how to use the properties <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> and the methods <ph id="ph3">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>.</source>
          <target state="translated">它还演示如何使用属性<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph>和方法<ph id="ph3">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>The type of the result values produced by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">结果值的类型由<bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>A function to project a result value from each key and its associated values.</source>
          <target state="translated">从每个键及其关联值投影结果值的函数。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>Applies a transform function to each key and its associated values and returns the results.</source>
          <target state="translated">对每个键及其关联值应用转换函数，并返回结果。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>A collection that contains one value for each key/value collection pair in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">包含 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中的各个键/值对集合中的一个值的集合。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>The key to find in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">要在 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中查找的键。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>Determines whether a specified key is in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">确定指定的键是否位于 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is in the <ph id="ph3">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="key" /&gt;</ph> 在 <ph id="ph3">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> to determine whether a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> contains a specified key.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph>以确定是否<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>包含指定的键。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Count">
          <source>Gets the number of key/value collection pairs in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中的键/值对集合的数目。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The number of key/value collection pairs in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中键/值集合对的数目。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The value of the <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> property does not change because items cannot be added to or removed from a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> object after it has been created.</source>
          <target state="translated">值<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph>属性未更改，因为无法添加到项，或将其删除从<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>对象已被创建后。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> to determine the number of key/value collection pairs in a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph>确定中的键/值集合对的数目<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>Returns a generic enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">返回一个循环访问 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 的泛型枚举数。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>An enumerator for the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">用于 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 的枚举数。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph> to iterate through the keys and values of a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>来循环访问键和值的<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The key of the desired collection of values.</source>
          <target state="translated">所需值集合的键。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>Gets the collection of values indexed by the specified key.</source>
          <target state="translated">获取由指定的键编制索引的值的集合。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The collection of values indexed by the specified key.</source>
          <target state="translated">由指定键编制索引的值的集合。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>This indexed property provides the ability to index a specific collection of values in the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> by using the following syntax: <ph id="ph2">`myLookup[key]`</ph> in Visual C# or <ph id="ph3">`myLookup(key)`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">此索引的属性提供对特定集合中的值进行索引的能力<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>通过使用以下语法：<ph id="ph2">`myLookup[key]`</ph>在 Visual C# 或<ph id="ph3">`myLookup(key)`</ph>中<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>If the <ph id="ph1">`key`</ph> is not found in the collection, an empty sequence is returned.</source>
          <target state="translated">如果<ph id="ph1">`key`</ph>找不到在集合中，返回空序列。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> to index directly into a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph>直接进行索引<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">返回循环访问 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 的枚举数。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">用于 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 的枚举数。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>