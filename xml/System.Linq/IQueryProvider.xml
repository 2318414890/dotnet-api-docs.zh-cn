<Type Name="IQueryProvider" FullName="System.Linq.IQueryProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="43437223431198ae56edf5e994cd058f15633faa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30458201" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IQueryProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IQueryProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义用于创建和执行 <see cref="T:System.Linq.IQueryable" /> 对象所描述的查询的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IQueryProvider>接口仅供查询提供程序实现。  
  
 有关如何创建你自己 LINQ 提供程序的详细信息，请参阅[LINQ： 生成 IQueryable 提供程序](http://go.microsoft.com/fwlink/?LinkID=112370)MSDN 博客。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
    <altmember cref="T:System.Linq.IQueryable`1" />
  </Docs>
  <Members>
    <Member MemberName="CreateQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::IQueryable ^ CreateQuery(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">表示 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 查询的表达式目录树。</param>
        <summary>构造一个 <see cref="T:System.Linq.IQueryable" /> 对象，该对象可计算指定表达式树所表示的查询。</summary>
        <returns>一个 <see cref="T:System.Linq.IQueryable" />，它可计算指定表达式树所表示的查询。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Linq.IQueryable.Expression%2A>属性返回<xref:System.Linq.IQueryable>对象是否等于`expression`。  
  
 <xref:System.Linq.IQueryProvider.CreateQuery%2A>方法用于创建新<xref:System.Linq.IQueryable>对象，给定一个表达式树。 通过返回的对象表示的查询是与特定的 LINQ 提供程序关联。  
  
 在中定义的标准查询运算符方法的几个<xref:System.Linq.Queryable>，如<xref:System.Linq.Queryable.OfType%2A>和<xref:System.Linq.Queryable.Cast%2A>，调用此方法。 将其传递<xref:System.Linq.Expressions.MethodCallExpression>表示[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]查询。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;TElement&gt; CreateQuery&lt;TElement&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TElement&gt; CreateQuery&lt;TElement&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Linq::IQueryable&lt;TElement&gt; ^ CreateQuery(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TElement">返回的 <see cref="T:System.Linq.IQueryable`1" /> 的元素的类型。</typeparam>
        <param name="expression">表示 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 查询的表达式目录树。</param>
        <summary>构造一个 <see cref="T:System.Linq.IQueryable`1" /> 对象，该对象可计算指定表达式树所表示的查询。</summary>
        <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，它可计算指定表达式树所表示的查询。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Linq.IQueryable.Expression%2A>属性返回<xref:System.Linq.IQueryable%601>对象是否等于`expression`。  
  
 <xref:System.Linq.IQueryProvider.CreateQuery%2A>方法用于创建新<xref:System.Linq.IQueryable%601>对象，给定一个表达式树。 通过返回的对象表示的查询是与特定的 LINQ 提供程序关联。  
  
 大部分<xref:System.Linq.Queryable>返回可枚举的结果的标准查询运算符方法调用此方法。 将其传递<xref:System.Linq.Expressions.MethodCallExpression>表示[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]查询。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public object Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Execute(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">表示 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 查询的表达式目录树。</param>
        <summary>执行指定表达式树所表示的查询。</summary>
        <returns>执行指定查询所生成的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IQueryProvider.Execute%2A>方法执行返回单个值 （而不是值的可枚举序列） 的查询。 表示返回可枚举的结果的查询的表达式目录树执行时其关联<xref:System.Linq.IQueryable>枚举对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Execute(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">执行查询所生成的值的类型。</typeparam>
        <param name="expression">表示 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 查询的表达式目录树。</param>
        <summary>执行指定表达式树所表示的强类型查询。</summary>
        <returns>执行指定查询所生成的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IQueryProvider.Execute%2A>方法执行返回单个值 （而不是值的可枚举序列） 的查询。 执行返回可枚举的结果的查询表示表达式树时<xref:System.Linq.IQueryable%601>枚举对象，其中包含的表达式树。  
  
 <xref:System.Linq.Queryable>返回单一实例结果调用的标准查询运算符方法<xref:System.Linq.IQueryProvider.Execute%2A>。 将其传递<xref:System.Linq.Expressions.MethodCallExpression>表示[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]查询。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>