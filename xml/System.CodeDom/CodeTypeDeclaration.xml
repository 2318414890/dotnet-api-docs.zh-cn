<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeTypeDeclaration.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac552c8bfcbe9527832064fa06fd15fae096ecb1cf0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52c8bfcbe9527832064fa06fd15fae096ecb1cf0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Represents a type declaration for a class, structure, interface, or enumeration.</source>
          <target state="translated">表示类、结构、接口或枚举的类型声明。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to represent code that declares a class, structure, interface, or enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> 可以用于表示声明类、 结构、 接口或枚举的代码。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to declare a type that is nested within another type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> 可用来声明嵌套在另一种类型的类型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> property specifies the base type or base types of the type being declared.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph>属性指定的基类型的声明的类型的基类型。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property contains the type members, which can include methods, fields, properties, comments and other types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph>属性包含类型成员，它们可以包含方法、 字段、 属性、 注释和其他类型。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property indicates the <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> values for the type declaration, which indicate the type category of the type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph>属性指示<ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph>类型声明中，这表明类型的类型类别的值。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph>方法指示类型是否是类、 结构、 枚举或接口类型，分别。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Some programming languages only support the declaration of reference types, or classes.</source>
          <target state="translated">一些编程语言仅支持引用类型或类的声明。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method to test for the appropriate <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags.</source>
          <target state="translated">若要检查是否支持声明接口、 枚举或值类型的特定于语言的 CodeDOM 代码生成器，请调用<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph>方法来测试相应<ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> indicates support for interfaces, <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph> indicates support for enumerations, and <ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph> indicates support for value types such as structures.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> 指示支持接口，<ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph>指示枚举，支持和<ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph>指示值类型，例如结构的支持。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">可以生成一个类或结构实现一个完整声明中的，也可以分布在多个声明的实现。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property indicates whether the type declaration is complete or partial.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>属性指示的类型声明为完整或部分。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">并非所有的代码生成器支持分部类型声明，因此你应通过调用来测试此支持<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph>具有标志方法<ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to declare a type.</source>
          <target state="translated">此示例演示如何使用<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>来声明类型。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>The name for the new type.</source>
          <target state="translated">新类型的名称。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class with the specified name.</source>
          <target state="translated">用指定的名称初始化 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>Gets the base types of the type.</source>
          <target state="translated">获取类型的基类型。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> object that indicates the base types of the type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> 对象，它指示类型的基类型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <ph id="ph1">&lt;xref:System.Object&gt;</ph> as the first item in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> collection.</source>
          <target state="translated">若要在 Visual Basic 中，将不能继承基类型，但实现一个或多个接口生成的类，必须包括<ph id="ph1">&lt;xref:System.Object&gt;</ph>作为第一个项出现在<ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph>集合。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>In the .NET Framework version 2.0 you do not need the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for <ph id="ph2">&lt;xref:System.Object&gt;</ph> if the interface you are implementing already exists and you are referring to it by type.</source>
          <target state="translated">.NET Framework 不需要的 2.0 版中<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>为<ph id="ph2">&lt;xref:System.Object&gt;</ph>是否要在已实现的接口存在并向其引用的类型。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>For example, if you are implementing the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface and add it to the collection with this statement, <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.</source>
          <target state="translated">例如，如果你要实现<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>接口，并将其添加到具有此语句的集合<ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>，不需要前面<ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph>语句。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The following code illustrates the addition of a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> to the collection that refers to <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">下面的代码演示添加<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>到引用的集合<ph id="ph2">&lt;xref:System.Object&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The preceding code generates the equivalent of the following Visual Basic code.</source>
          <target state="translated">前面的代码生成以下 Visual Basic 代码的等效项。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>However, the Visual Basic code actually generated is the following.</source>
          <target state="translated">但是，实际生成的 Visual Basic 代码如下所示。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source>Gets or sets a value indicating whether the type is a class or reference type.</source>
          <target state="translated">获取或设置一个值，该值指示该类型是否是类或引用类型。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a class or reference type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果该类型是类或引用类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source>Gets or sets a value indicating whether the type is an enumeration.</source>
          <target state="translated">获取或设置一个值，该值指示该类型是否是枚举。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an enumeration; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果该类型是枚举，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source>Gets or sets a value indicating whether the type is an interface.</source>
          <target state="translated">获取或设置一个值，该值指示该类型是否是接口。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an interface; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果该类型是接口，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Gets or sets a value indicating whether the type declaration is complete or partial.</source>
          <target state="translated">获取或设置一个值，该值指示该类型声明是完整的类型声明还是分部类型声明。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class or structure declaration is a partial representation of the implementation; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the declaration is a complete implementation of the class or structure.</source>
          <target state="translated">如果该类或结构声明是实现的分部表示形式，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果该声明是该类或结构的完整实现，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">可以生成一个完整声明中的类或结构实现，也可以分布在多个声明的实现。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Implementations are commonly supplied in one complete type declaration.</source>
          <target state="translated">实现通常提供一个完整的类型声明中。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In this case, set the type declaration <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.</source>
          <target state="translated">在这种情况下，设置的类型声明<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>属性<ph id="ph2">`false`</ph>，指示该类型声明表示为类或结构实现的所有详细信息。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</source>
          <target state="translated">分部类型声明使其更轻松地生成的类或结构实现在不同模块中，你的应用程序的不同部分。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</source>
          <target state="translated">可以存储在一个源文件，或分布在最终将被编译在一起以形成组合的类型实现的多个源文件分部类型声明。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The C# language supports partial type declarations of classes and structures through the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">C# 语言支持分部类型声明的类和结构通过<ph id="ph1">`partial`</ph>关键字。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Basic supports partial type declarations of classes and structures with the <ph id="ph1">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic 支持分部类型声明的类和结构与<ph id="ph1">`Partial`</ph>关键字。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">并非所有的代码生成器支持分部类型声明，因此你应通过调用来测试此支持<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph>具有标志方法<ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Partial type declarations are supported for classes and structures.</source>
          <target state="translated">分部类型声明也受支持的类和结构。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</source>
          <target state="translated">如果你指定枚举或接口的分部类型声明，生成的代码将生成编译器错误。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>When supplying a class or structure implementation across multiple declarations, set the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph> for the initial declaration and all supplemental declarations.</source>
          <target state="translated">跨多个声明中提供的类或结构实现时, 设置<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>属性<ph id="ph2">`true`</ph>初始声明和所有补充声明。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</source>
          <target state="translated">初始的声明必须完全指定的类型签名，包括访问修饰符，继承的类型和实现的接口。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The supplementary declarations do not need to re-specify the type signature.</source>
          <target state="translated">补充声明不需要重新指定类型签名。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A compiler error typically results if you redefine the type signature in a supplementary declaration.</source>
          <target state="translated">通常，如果重新定义了补充声明中的类型签名，将导致编译器错误。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Studio 2005 uses partial types to separate user-generated code from designer code.</source>
          <target state="translated">Visual Studio 2005 使用分部类型将用户生成的代码与设计器代码分开。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id="ph1">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id="ph2">`Partial`</ph> keyword.</source>
          <target state="translated">在 Visual Basic Windows 应用程序项目中，用户代码放入分部类，其中没有限定<ph id="ph1">`Partial`</ph>关键字; 设计器提供的代码会在分部类具有<ph id="ph2">`Partial`</ph>关键字。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In C#, both the user code and designer code appear in partial classes identified by the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">在 C# 中，用户代码和设计器代码出现在分部类由标识<ph id="ph1">`partial`</ph>关键字。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to supply a class implementation across multiple declarations.</source>
          <target state="translated">此示例演示如何使用<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>跨多个声明中提供的类实现。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The example builds the initial class declaration statement and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">此示例生成初始类声明语句和设置<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>属性<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A different method in the example extends the class implementation.</source>
          <target state="translated">该示例中的不同方法扩展的类实现。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This method builds a new type declaration statement for the existing class and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">此方法可生成新类型声明语句的现有类和集<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>属性<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The compiler combines the two partial type declarations together for the complete class implementation.</source>
          <target state="translated">编译器将组合在一起，以便完成类实现的两个分部类型声明。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source>Gets or sets a value indicating whether the type is a value type (struct).</source>
          <target state="translated">获取或设置一个值，该值指示该类型是不是值类型（结构）。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a value type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果该类型是值类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>Gets the collection of class members for the represented type.</source>
          <target state="translated">获取所表示的类型的类成员的集合。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph> object that indicates the class members.</source>
          <target state="translated">一个指示类成员的 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated">当首次访问 <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph> 集合时发生。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated">当首次访问 <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph> 集合时发生。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Gets or sets the attributes of the type.</source>
          <target state="translated">获取或设置类型的特性。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph> object that indicates the attributes of the type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph> 对象，它指示该类型的特性。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> property contains the same type of values used by <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> when investigating a type at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph>属性包含相同类型的值由<ph id="ph2">&lt;xref:System.Reflection&gt;</ph>调查在运行时类型时。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Many of these flags do not correspond to the type declaration syntax for some languages.</source>
          <target state="translated">许多这些标志不对应于某些语言中的类型声明语法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>As a result, only the following flags are significant to <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> : <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>, and <ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>.</source>
          <target state="translated">因此，仅的以下标志对是有意义<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>: <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>， <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>， <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>， <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>， <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>， <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>， <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>，和<ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Some of the flags such as <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph> overlap with the meaning of flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property of <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> that is inherited from <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>.</source>
          <target state="translated">某些如标志<ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>标志中的含义与重叠<ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph>属性<ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>继承自<ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property is a side effect of the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> class inheriting from <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph> so that classes can be nested.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph>属性是会产生副作用<ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>类继承自<ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>，以便可以嵌套类。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The flags in the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property should be used instead of the flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">中的标志<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph>属性应该使用而不是中的标志<ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The pattern for setting the visibility flags (flags containing the words <ph id="ph1">`Public`</ph> or <ph id="ph2">`Nested`</ph>) is to mask out all visibility flags using the <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph> and then set the desired visibility flag.</source>
          <target state="translated">设置可见性标志的模式 (包含单词的标志<ph id="ph1">`Public`</ph>或<ph id="ph2">`Nested`</ph>) 是所有的可见性掩盖标志使用<ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph>，然后设置所需的可见性标志。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>For example, the C# code statement to identify the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> (named <ph id="ph2">`cd`</ph>) as an internal class is <ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</source>
          <target state="translated">例如，C# 代码语句以标识<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>(名为<ph id="ph2">`cd`</ph>) 的内部类原样<ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The code to set the same value in Visual Basic is <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</source>
          <target state="translated">要在 Visual Basic 中设置相同的值的代码是<ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Setting the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property directly to a visibility flag (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph>直接向可见性标志的属性 (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) 会清除可能设置的所有其他标志。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>Gets the type parameters for the type declaration.</source>
          <target state="translated">获取类型声明的类型参数。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph> that contains the type parameters for the type declaration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph> 包含类型声明的类型参数。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A generic type declaration contains one or more unspecified types known as type parameters.</source>
          <target state="translated">泛型类型声明包含一个或多个未指定名为类型参数的类型。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A type parameter name stands for the type within the body of the generic declaration.</source>
          <target state="translated">类型参数名称代表泛型声明主体中的类型。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For example, the generic declaration for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains the type parameter <ph id="ph2">`T`</ph>.</source>
          <target state="translated">例如，为该泛型声明<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>类包含类型参数<ph id="ph2">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.</source>
          <target state="translated">有关泛型的详细信息，请参阅<bpt id="p1">[</bpt>.NET Framework 类库中的泛型<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>