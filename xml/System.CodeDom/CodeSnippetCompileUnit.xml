<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeSnippetCompileUnit.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54436a73a37dbf0c4e953f3f876be3041743dc518.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4436a73a37dbf0c4e953f3f876be3041743dc518</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source>Represents a literal code fragment that can be compiled.</source>
          <target state="translated">表示可编译的原义代码片段。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph> can represent a literal block of code that is included directly in the source without modification.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph> 可以表示文本的直接包含在源而无需修改的代码块。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph> stores a section of code, exactly in its original format, as a string.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph>完全按照其原始格式，以字符串形式存储的代码，部分。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source>The CodeDOM does not translate literal code fragments.</source>
          <target state="translated">CodeDOM 不会转换原义代码片段。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source>Literal code fragments are stored and output in their original format.</source>
          <target state="translated">存储和在其原始格式输出文本的代码片段。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source>CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.</source>
          <target state="translated">提供了包含文本的代码的 codeDOM 对象，以便开发人员可以封装已在目标语言的代码。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A&gt;</ph> property contains the literal code fragment as a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A&gt;</ph>属性包含字符串形式的文本的代码片段。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A&gt;</ph> property is optional and specifies the position of the code within a source code document.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A&gt;</ph>属性是可选的它指定源代码文档内的代码的位置。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source>The following code example demonstrates how to create a new instance of the <ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph> class by using a string that represents literal code.</source>
          <target state="translated">下面的代码示例演示如何创建的新实例<ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph>通过使用一个字符串，表示文本的代码的类。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeSnippetCompileUnit">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeSnippetCompileUnit" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeSnippetCompileUnit" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeSnippetCompileUnit" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeSnippetCompileUnit" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
          <source>If you use this constructor you should also set the <ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A&gt;</ph> property.</source>
          <target state="translated">如果使用此构造函数还应设置<ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
          <source>The literal code fragment to represent.</source>
          <target state="translated">要表示的原义代码片段。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeSnippetCompileUnit" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeSnippetCompileUnit" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
          <source>The following code example demonstrates how to create a new instance of the <ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph> class by using a string that represents literal code.</source>
          <target state="translated">下面的代码示例演示如何创建的新实例<ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph>通过使用一个字符串，表示文本的代码的类。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
          <source>Gets or sets the line and file information about where the code is located in a source code document.</source>
          <target state="translated">获取或设置有关代码在源代码文档中的位置的行信息和文件信息。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeLinePragma" /&gt;</ph> that indicates the position of the code fragment.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeLinePragma" /&gt;</ph>，指示代码片段的位置。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeSnippetCompileUnit.Value">
          <source>Gets or sets the literal code fragment to represent.</source>
          <target state="translated">获取或设置要表示的原义代码片段。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeSnippetCompileUnit.Value">
          <source>The literal code fragment.</source>
          <target state="translated">原义代码片段。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>