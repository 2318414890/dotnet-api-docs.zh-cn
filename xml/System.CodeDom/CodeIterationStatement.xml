<Type Name="CodeIterationStatement" FullName="System.CodeDom.CodeIterationStatement">
  <TypeSignature Language="C#" Value="public class CodeIterationStatement : System.CodeDom.CodeStatement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeIterationStatement extends System.CodeDom.CodeStatement" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeIterationStatement" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeIterationStatement&#xA;Inherits CodeStatement" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeIterationStatement : System::CodeDom::CodeStatement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeStatement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="899da-101">表示 <see langword="for" /> 语句或语句块内的循环（使用测试表达式作为继续循环的条件）。</span><span class="sxs-lookup"><span data-stu-id="899da-101">Represents a <see langword="for" /> statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="899da-102">A<xref:System.CodeDom.CodeIterationStatement>可以表示`for`循环或`while`循环。</span><span class="sxs-lookup"><span data-stu-id="899da-102">A <xref:System.CodeDom.CodeIterationStatement> can represent a `for` loop or `while` loop.</span></span>  
  
 <span data-ttu-id="899da-103"><xref:System.CodeDom.CodeIterationStatement.InitStatement%2A>属性指定要在第一次循环迭代之前执行的语句。</span><span class="sxs-lookup"><span data-stu-id="899da-103">The <xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> property specifies the statement to execute before the first loop iteration.</span></span> <span data-ttu-id="899da-104"><xref:System.CodeDom.CodeIterationStatement.TestExpression%2A>属性指定循环延续表达式计算结果必须为`true`末尾的另一个迭代开始每个循环迭代。</span><span class="sxs-lookup"><span data-stu-id="899da-104">The <xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> property specifies the loop continuation expression, which must evaluate to `true` at the end of each loop iteration for another iteration to begin.</span></span> <span data-ttu-id="899da-105"><xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A>属性指定要执行的每个循环迭代末尾的语句。</span><span class="sxs-lookup"><span data-stu-id="899da-105">The <xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> property specifies the statement to execute at the end of each loop iteration.</span></span> <span data-ttu-id="899da-106"><xref:System.CodeDom.CodeIterationStatement.Statements%2A>属性指定要在循环内执行的语句的集合。</span><span class="sxs-lookup"><span data-stu-id="899da-106">The <xref:System.CodeDom.CodeIterationStatement.Statements%2A> property specifies the collection of statements to execute within the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="899da-107">此示例演示如何使用<xref:System.CodeDom.CodeIterationStatement>来表示`for`循环。</span><span class="sxs-lookup"><span data-stu-id="899da-107">This example demonstrates using a <xref:System.CodeDom.CodeIterationStatement> to represent a `for` loop.</span></span>  
  
 [!code-cpp[CodeIterationStatementExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeIterationStatementExample/CPP/codeiterationstatementexample.cpp#2)]
 [!code-csharp[CodeIterationStatementExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeIterationStatementExample/CS/codeiterationstatementexample.cs#2)]
 [!code-vb[CodeIterationStatementExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeIterationStatementExample/VB/codeiterationstatementexample.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="899da-108">初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="899da-108">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="899da-109">初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="899da-109">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement (System.CodeDom.CodeStatement initStatement, System.CodeDom.CodeExpression testExpression, System.CodeDom.CodeStatement incrementStatement, params System.CodeDom.CodeStatement[] statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeStatement initStatement, class System.CodeDom.CodeExpression testExpression, class System.CodeDom.CodeStatement incrementStatement, class System.CodeDom.CodeStatement[] statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initStatement As CodeStatement, testExpression As CodeExpression, incrementStatement As CodeStatement, ParamArray statements As CodeStatement())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement(System::CodeDom::CodeStatement ^ initStatement, System::CodeDom::CodeExpression ^ testExpression, System::CodeDom::CodeStatement ^ incrementStatement, ... cli::array &lt;System::CodeDom::CodeStatement ^&gt; ^ statements);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="testExpression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="incrementStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="statements" Type="System.CodeDom.CodeStatement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="initStatement"><span data-ttu-id="899da-110"><see cref="T:System.CodeDom.CodeStatement" />，包含循环初始化语句。</span><span class="sxs-lookup"><span data-stu-id="899da-110">A <see cref="T:System.CodeDom.CodeStatement" /> containing the loop initialization statement.</span></span></param>
        <param name="testExpression"><span data-ttu-id="899da-111"><see cref="T:System.CodeDom.CodeExpression" />，包含用于测试退出条件的表达式。</span><span class="sxs-lookup"><span data-stu-id="899da-111">A <see cref="T:System.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</span></span></param>
        <param name="incrementStatement"><span data-ttu-id="899da-112"><see cref="T:System.CodeDom.CodeStatement" />，包含随循环递增的语句。</span><span class="sxs-lookup"><span data-stu-id="899da-112">A <see cref="T:System.CodeDom.CodeStatement" /> containing the per-cycle increment statement.</span></span></param>
        <param name="statements"><span data-ttu-id="899da-113"><see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，包含循环范围内的语句。</span><span class="sxs-lookup"><span data-stu-id="899da-113">An array of type <see cref="T:System.CodeDom.CodeStatement" /> containing the statements within the loop.</span></span></param>
        <summary><span data-ttu-id="899da-114">使用指定参数初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="899da-114">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class using the specified parameters.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="IncrementStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement IncrementStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement IncrementStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.IncrementStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property IncrementStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ IncrementStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="899da-115">获取或设置在每个循环周期后调用的语句。</span><span class="sxs-lookup"><span data-stu-id="899da-115">Gets or sets the statement that is called after each loop cycle.</span></span></summary>
        <value><span data-ttu-id="899da-116"><see cref="T:System.CodeDom.CodeStatement" />，指示随循环递增的语句。</span><span class="sxs-lookup"><span data-stu-id="899da-116">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the per cycle increment statement.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="899da-117">此语句在每次迭代之后调用。</span><span class="sxs-lookup"><span data-stu-id="899da-117">This statement is called after each iteration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="InitStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement InitStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement InitStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.InitStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property InitStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ InitStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="899da-118">获取或设置循环初始化语句。</span><span class="sxs-lookup"><span data-stu-id="899da-118">Gets or sets the loop initialization statement.</span></span></summary>
        <value><span data-ttu-id="899da-119"><see cref="T:System.CodeDom.CodeStatement" />，指示循环初始化语句。</span><span class="sxs-lookup"><span data-stu-id="899da-119">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the loop initialization statement.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="899da-120">你可以通过将此属性设置为指定空的初始化语句<xref:System.CodeDom.CodeExpressionStatement>包含<xref:System.CodeDom.CodeSnippetExpression>包含一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="899da-120">You can specify an empty initialization statement by setting this property to a <xref:System.CodeDom.CodeExpressionStatement> that contains a <xref:System.CodeDom.CodeSnippetExpression> that contains an empty string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Statements">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatementCollection Statements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatementCollection Statements" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.Statements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Statements As CodeStatementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatementCollection ^ Statements { System::CodeDom::CodeStatementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="899da-121">获取要在循环内执行的语句的集合。</span><span class="sxs-lookup"><span data-stu-id="899da-121">Gets the collection of statements to be executed within the loop.</span></span></summary>
        <value><span data-ttu-id="899da-122"><see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，指示循环范围内的语句。</span><span class="sxs-lookup"><span data-stu-id="899da-122">An array of type <see cref="T:System.CodeDom.CodeStatement" /> that indicates the statements within the loop.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="TestExpression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression TestExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression TestExpression" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.TestExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property TestExpression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ TestExpression { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="899da-123">获取或设置作为循环继续的条件进行测试的表达式。</span><span class="sxs-lookup"><span data-stu-id="899da-123">Gets or sets the expression to test as the condition that continues the loop.</span></span></summary>
        <value><span data-ttu-id="899da-124"><see cref="T:System.CodeDom.CodeExpression" />，指示要测试的表达式。</span><span class="sxs-lookup"><span data-stu-id="899da-124">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the expression to test.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="899da-125">如果此表达式解析为`true`，则循环将继续。</span><span class="sxs-lookup"><span data-stu-id="899da-125">If this expression resolves to `true`, the loop will continue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>