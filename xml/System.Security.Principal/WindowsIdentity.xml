<Type Name="WindowsIdentity" FullName="System.Security.Principal.WindowsIdentity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2f851e11b9f4d68ee549248393d4930433485f88" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WindowsIdentity : System.Security.Claims.ClaimsIdentity, IDisposable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit WindowsIdentity extends System.Security.Claims.ClaimsIdentity implements class System.IDisposable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable, class System.Security.Principal.IIdentity" />
  <TypeSignature Language="DocId" Value="T:System.Security.Principal.WindowsIdentity" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsIdentity&#xA;Inherits ClaimsIdentity&#xA;Implements IDeserializationCallback, IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsIdentity : System::Security::Claims::ClaimsIdentity, IDisposable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Principal.Windows</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Claims.ClaimsIdentity</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="54a18-101">表示 Windows 用户。</span>
      <span class="sxs-lookup">
        <span data-stu-id="54a18-101">Represents a Windows user.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-102">调用<xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A>方法来创建<xref:System.Security.Principal.WindowsIdentity>表示当前用户的对象。</span><span class="sxs-lookup"><span data-stu-id="54a18-102">Call the <xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A> method to create a <xref:System.Security.Principal.WindowsIdentity> object that represents the current user.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="54a18-103">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="54a18-103">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="54a18-104">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="54a18-104">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="54a18-105">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="54a18-105">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="54a18-106">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="54a18-106">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="54a18-107">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="54a18-107">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-108">下面的示例演示了利用的成员<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-108">The following example shows the use of members of <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  <span data-ttu-id="54a18-109">有关示例显示如何获取 Windows 帐户标记通过调用非托管的 Win32`LogonUser`函数，并使用该标记来模拟其他用户时，请参阅<xref:System.Security.Principal.WindowsImpersonationContext>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-109">For an example showing how to obtain a Windows account token through a call to the unmanaged Win32 `LogonUser` function, and use that token to impersonate another user, see the <xref:System.Security.Principal.WindowsImpersonationContext> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#1)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#1)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-110">初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-110">Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsIdentity (IntPtr userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (userToken As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsIdentity(IntPtr userToken);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="userToken" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="54a18-111">用户的帐户标记，代码当前即以该用户的名义运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-111">The account token for the user on whose behalf the code is running.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-112">为指定的 Windows 帐户标记表示的用户初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-112">Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-113">下表显示的实例的初始属性值<xref:System.Security.Principal.WindowsIdentity>。</span><span class="sxs-lookup"><span data-stu-id="54a18-113">The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>.</span></span>  
  
|<span data-ttu-id="54a18-114">Property</span><span class="sxs-lookup"><span data-stu-id="54a18-114">Property</span></span>|<span data-ttu-id="54a18-115">初始值</span><span class="sxs-lookup"><span data-stu-id="54a18-115">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>|`Negotiate`|  
|<xref:System.Security.Principal.WindowsAccountType>|`Normal`|  
|<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|  
  
> [!NOTE]
>  <span data-ttu-id="54a18-116">你可以检索所表示的令牌`userToken`通过调用非托管的代码如 Win32 API`LogonUser`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-116">You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function.</span></span> <span data-ttu-id="54a18-117">始终释放`userToken`通过调用 Win32 API`CloseHandle`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-117">Always release `userToken` by calling the Win32 API `CloseHandle` function.</span></span> <span data-ttu-id="54a18-118">调用非托管的代码的详细信息，请参阅[使用非托管 DLL 函数](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="54a18-118">For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="54a18-119">
            <paramref name="userToken" /> 为 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-119">
              <paramref name="userToken" /> is 0.</span>
          </span>
          <span data-ttu-id="54a18-120">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-120">-or-</span>
          </span>
          <span data-ttu-id="54a18-121">
            <paramref name="userToken" /> 是重复的，对于模拟无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-121">
              <paramref name="userToken" /> is duplicated and invalid for impersonation.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-122">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-122">The caller does not have the correct permissions.</span>
          </span>
          <span data-ttu-id="54a18-123">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-123">-or-</span>
          </span>
          <span data-ttu-id="54a18-124">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-124">A Win32 error occurred.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-125">若要访问非托管的代码的功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-125">for the ability to access unmanaged code.</span>
          </span>
          <span data-ttu-id="54a18-126">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-126">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WindowsIdentity (System.Security.Principal.WindowsIdentity identity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.WindowsIdentity identity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (identity As WindowsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WindowsIdentity(System::Security::Principal::WindowsIdentity ^ identity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.WindowsIdentity" />
      </Parameters>
      <Docs>
        <param name="identity">
          <span data-ttu-id="54a18-127">根据其构造 <see cref="T:System.Security.Principal.WindowsIdentity" /> 新实例的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-127">The object from which to construct the new instance of <see cref="T:System.Security.Principal.WindowsIdentity" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-128">使用指定的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-128">Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class by using the specified <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsIdentity (string sUserPrincipalName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string sUserPrincipalName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sUserPrincipalName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsIdentity(System::String ^ sUserPrincipalName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sUserPrincipalName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sUserPrincipalName">
          <span data-ttu-id="54a18-129">代码运行时所代表用户的 UPN。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-129">The UPN for the user on whose behalf the code is running.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-130">初始化以指定用户主名称 (UPN) 表示的用户的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-130">Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified User Principal Name (UPN).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-131">UPN 采用格式*用户名*@*domainname*.com，换而言之，电子邮件地址。</span><span class="sxs-lookup"><span data-stu-id="54a18-131">A UPN has the format *username*@*domainname*.com, in other words, an email address.</span></span> <span data-ttu-id="54a18-132">中的 UPN 标识`sUserPrincipalName`用于检索该用户通过 Win32 API 的令牌`LsaLogonUser`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-132">The UPN identified in `sUserPrincipalName` is used to retrieve a token for that user through the Win32 API `LsaLogonUser` function.</span></span> <span data-ttu-id="54a18-133">反过来，该令牌用于标识用户。</span><span class="sxs-lookup"><span data-stu-id="54a18-133">In turn that token is used to identify the user.</span></span> <span data-ttu-id="54a18-134">异常可能会返回由于无法使用所提供的 UPN 登录。</span><span class="sxs-lookup"><span data-stu-id="54a18-134">An exception might be returned due to the inability to log on using the supplied UPN.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="54a18-135">此构造函数用于仅在加入到 Windows Server 2003 或更高版本的域的计算机上。</span><span class="sxs-lookup"><span data-stu-id="54a18-135">This constructor is intended for use only on computers joined to Windows Server 2003 or later domains.</span></span> <span data-ttu-id="54a18-136">对于更早版本的域类型引发异常。</span><span class="sxs-lookup"><span data-stu-id="54a18-136">An exception is thrown for earlier domain types.</span></span> <span data-ttu-id="54a18-137">此限制是因为，此构造函数使用[KERB_S4U_LOGON 结构](http://go.microsoft.com/fwlink/?LinkId=143533)，最初在 Windows Server 2003 中引入。</span><span class="sxs-lookup"><span data-stu-id="54a18-137">This restriction is due to the fact that this constructor uses the [KERB_S4U_LOGON structure](http://go.microsoft.com/fwlink/?LinkId=143533), which was first introduced in Windows Server 2003.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="54a18-138">Windows 返回 Windows NT 状态代码 STATUS_ACCESS_DENIED。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-138">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="54a18-139">没有足够的可用内存。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-139">There is insufficient memory available.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-140">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-140">The caller does not have the correct permissions.</span>
          </span>
          <span data-ttu-id="54a18-141">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-141">-or-</span>
          </span>
          <span data-ttu-id="54a18-142">计算机未连接到 Windows 2003 或更高版本的域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-142">The computer is not attached to a Windows 2003 or later domain.</span>
          </span>
          <span data-ttu-id="54a18-143">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-143">-or-</span>
          </span>
          <span data-ttu-id="54a18-144">计算机没有运行 Windows 2003 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-144">The computer is not running Windows 2003 or later.</span>
          </span>
          <span data-ttu-id="54a18-145">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-145">-or-</span>
          </span>
          <span data-ttu-id="54a18-146">用户不是计算机所连接域的成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-146">The user is not a member of the domain the computer is attached to.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-147">若要访问非托管的代码的功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-147">for the ability to access unmanaged code.</span>
          </span>
          <span data-ttu-id="54a18-148">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-148">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsIdentity (IntPtr userToken, string type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int userToken, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (userToken As IntPtr, type As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsIdentity(IntPtr userToken, System::String ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="userToken" Type="System.IntPtr" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="54a18-149">用户的帐户标记，代码当前即以该用户的名义运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-149">The account token for the user on whose behalf the code is running.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="54a18-150">（仅供参考之用。）用于标识用户的身份验证的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-150">(Informational use only.) The type of authentication used to identify the user.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-151">为指定的 Windows 帐户标记和指定的身份验证类型表示的用户初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-151">Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token and the specified authentication type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-152">下表显示的实例的初始属性值<xref:System.Security.Principal.WindowsIdentity>。</span><span class="sxs-lookup"><span data-stu-id="54a18-152">The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>.</span></span>  
  
|<span data-ttu-id="54a18-153">Property</span><span class="sxs-lookup"><span data-stu-id="54a18-153">Property</span></span>|<span data-ttu-id="54a18-154">初始值</span><span class="sxs-lookup"><span data-stu-id="54a18-154">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Security.Principal.WindowsAccountType>|`Normal`|  
|<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|  
  
 <span data-ttu-id="54a18-155">值`type`参数用于设置<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>参数。</span><span class="sxs-lookup"><span data-stu-id="54a18-155">The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter.</span></span> <span data-ttu-id="54a18-156">如果`type`是`null`，安全系统组<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>到`Negotiate`在 Windows Vista 和更高版本的 Windows 操作系统和`Kerberos`早期版本的 Windows 操作系统上。</span><span class="sxs-lookup"><span data-stu-id="54a18-156">If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system.</span></span> <span data-ttu-id="54a18-157">安全系统不使用此值;它是仅用于提供信息。</span><span class="sxs-lookup"><span data-stu-id="54a18-157">The security system does not use this value; it is for informational use only.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="54a18-158">你可以检索所表示的令牌`userToken`通过调用非托管的代码如 Win32 API`LogonUser`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-158">You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function.</span></span> <span data-ttu-id="54a18-159">始终释放`userToken`通过调用 Win32 API`CloseHandle`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-159">Always release `userToken` by calling the Win32 API `CloseHandle` function.</span></span> <span data-ttu-id="54a18-160">调用非托管的代码的详细信息，请参阅[使用非托管 DLL 函数](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="54a18-160">For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-161">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.%23ctor%2A>构造函数来创建的新实例<xref:System.Security.Principal.WindowsIdentity>按指定的 Windows 帐户标记和指定的身份验证类型表示的用户类。</span><span class="sxs-lookup"><span data-stu-id="54a18-161">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.%23ctor%2A> constructor to create a new instance of the  <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token and the specified authentication type.</span></span> <span data-ttu-id="54a18-162">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-162">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#4)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#4)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="54a18-163">
            <paramref name="userToken" /> 为 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-163">
              <paramref name="userToken" /> is 0.</span>
          </span>
          <span data-ttu-id="54a18-164">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-164">-or-</span>
          </span>
          <span data-ttu-id="54a18-165">
            <paramref name="userToken" /> 是重复的，对于模拟无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-165">
              <paramref name="userToken" /> is duplicated and invalid for impersonation.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-166">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-166">The caller does not have the correct permissions.</span>
          </span>
          <span data-ttu-id="54a18-167">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-167">-or-</span>
          </span>
          <span data-ttu-id="54a18-168">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-168">A Win32 error occurred.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-169">若要访问非托管的代码的功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-169">for the ability to access unmanaged code.</span>
          </span>
          <span data-ttu-id="54a18-170">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-170">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsIdentity(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="54a18-171">包含用户帐户信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-171">The object containing the account information for the user.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="54a18-172">指示流特征的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-172">An object that indicates the stream characteristics.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-173">初始化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 流中的信息所表示的用户的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-173">Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by information in a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="54a18-174">调用此方法不受信任的数据会带来安全风险。</span><span class="sxs-lookup"><span data-stu-id="54a18-174">Calling this method with untrusted data is a security risk.</span></span> <span data-ttu-id="54a18-175">调用此方法仅受信任的数据。</span><span class="sxs-lookup"><span data-stu-id="54a18-175">Call this method only with trusted data.</span></span> <span data-ttu-id="54a18-176">有关详细信息，请参阅[数据验证](https://www.owasp.org/index.php/Data_Validation)。</span><span class="sxs-lookup"><span data-stu-id="54a18-176">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="54a18-177">
            <see cref="T:System.Security.Principal.WindowsIdentity" /> 无法跨进程序列化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-177">A <see cref="T:System.Security.Principal.WindowsIdentity" /> cannot be serialized across processes.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-178">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-178">The caller does not have the correct permissions.</span>
          </span>
          <span data-ttu-id="54a18-179">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-179">-or-</span>
          </span>
          <span data-ttu-id="54a18-180">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-180">A Win32 error occurred.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-181">有关操作的主体对象的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-181">for ability to manipulate the principal object.</span>
          </span>
          <span data-ttu-id="54a18-182">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-182">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsIdentity (string sUserPrincipalName, string type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string sUserPrincipalName, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sUserPrincipalName As String, type As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsIdentity(System::String ^ sUserPrincipalName, System::String ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sUserPrincipalName" Type="System.String" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sUserPrincipalName">
          <span data-ttu-id="54a18-183">代码运行时所代表用户的 UPN。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-183">The UPN for the user on whose behalf the code is running.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="54a18-184">（仅供参考之用。）用于标识用户的身份验证的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-184">(Informational use only.) The type of authentication used to identify the user.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-185">初始化以指定用户主名称 (UPN) 和指定身份验证类型共同表示的用户的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-185">Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified User Principal Name (UPN) and the specified authentication type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-186">值`type`参数用于设置<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>参数。</span><span class="sxs-lookup"><span data-stu-id="54a18-186">The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter.</span></span> <span data-ttu-id="54a18-187">如果`type`是`null`，安全系统组<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>到`Negotiate`在 Windows Vista 和更高版本的 Windows 操作系统和`Kerberos`早期版本的 Windows 操作系统上。</span><span class="sxs-lookup"><span data-stu-id="54a18-187">If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system.</span></span> <span data-ttu-id="54a18-188">安全系统不使用此值;它是仅用于提供信息。</span><span class="sxs-lookup"><span data-stu-id="54a18-188">The security system does not use this value; it is for informational use only.</span></span>  
  
 <span data-ttu-id="54a18-189">中的 UPN 标识`sUserPrincipalName`用于检索该用户通过 Win32 API 的令牌`LsaLogonUser`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-189">The UPN identified in `sUserPrincipalName` is used to retrieve a token for that user through the Win32 API `LsaLogonUser` function.</span></span> <span data-ttu-id="54a18-190">反过来，该令牌用于标识用户。</span><span class="sxs-lookup"><span data-stu-id="54a18-190">In turn that token is used to identify the user.</span></span> <span data-ttu-id="54a18-191">异常可能会返回由于无法使用所提供的 UPN 登录。</span><span class="sxs-lookup"><span data-stu-id="54a18-191">An exception might be returned due to the inability to log on using the supplied UPN.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="54a18-192">此构造函数用于仅在加入到 Windows Server 2003 或更高版本的域的计算机上。</span><span class="sxs-lookup"><span data-stu-id="54a18-192">This constructor is intended for use only on computers joined to Windows Server 2003 or later domains.</span></span> <span data-ttu-id="54a18-193">对于更早版本的域类型引发异常。</span><span class="sxs-lookup"><span data-stu-id="54a18-193">An exception is thrown for earlier domain types.</span></span> <span data-ttu-id="54a18-194">此限制是因为，此构造函数使用[KERB_S4U_LOGON 结构](http://go.microsoft.com/fwlink/?LinkId=143533)，最初在 Windows Server 2003 中引入。</span><span class="sxs-lookup"><span data-stu-id="54a18-194">This restriction is due to the fact that this constructor uses the [KERB_S4U_LOGON structure](http://go.microsoft.com/fwlink/?LinkId=143533), which was first introduced in Windows Server 2003.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="54a18-195">Windows 返回 Windows NT 状态代码 STATUS_ACCESS_DENIED。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-195">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="54a18-196">没有足够的可用内存。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-196">There is insufficient memory available.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-197">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-197">The caller does not have the correct permissions.</span>
          </span>
          <span data-ttu-id="54a18-198">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-198">-or-</span>
          </span>
          <span data-ttu-id="54a18-199">计算机未连接到 Windows 2003 或更高版本的域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-199">The computer is not attached to a Windows 2003 or later domain.</span>
          </span>
          <span data-ttu-id="54a18-200">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-200">-or-</span>
          </span>
          <span data-ttu-id="54a18-201">计算机没有运行 Windows 2003 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-201">The computer is not running Windows 2003 or later.</span>
          </span>
          <span data-ttu-id="54a18-202">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-202">-or-</span>
          </span>
          <span data-ttu-id="54a18-203">用户不是计算机所连接域的成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-203">The user is not a member of the domain the computer is attached to.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-204">若要访问非托管的代码的功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-204">for the ability to access unmanaged code.</span>
          </span>
          <span data-ttu-id="54a18-205">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-205">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int userToken, string type, valuetype System.Security.Principal.WindowsAccountType acctType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (userToken As IntPtr, type As String, acctType As WindowsAccountType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsIdentity(IntPtr userToken, System::String ^ type, System::Security::Principal::WindowsAccountType acctType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="userToken" Type="System.IntPtr" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="acctType" Type="System.Security.Principal.WindowsAccountType" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="54a18-206">用户的帐户标记，代码当前即以该用户的名义运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-206">The account token for the user on whose behalf the code is running.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="54a18-207">（仅供参考之用。）用于标识用户的身份验证的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-207">(Informational use only.) The type of authentication used to identify the user.</span>
          </span>
        </param>
        <param name="acctType">
          <span data-ttu-id="54a18-208">枚举值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-208">One of the enumeration values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-209">为指定的 Windows 帐户标记、指定的身份验证类型和指定的 Windows 帐户类型表示的用户初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-209">Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-210">下表显示的实例的初始属性值<xref:System.Security.Principal.WindowsIdentity>。</span><span class="sxs-lookup"><span data-stu-id="54a18-210">The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>.</span></span>  
  
|<span data-ttu-id="54a18-211">Property</span><span class="sxs-lookup"><span data-stu-id="54a18-211">Property</span></span>|<span data-ttu-id="54a18-212">初始值</span><span class="sxs-lookup"><span data-stu-id="54a18-212">Initial Value</span></span>|  
|--------------|-------------------|  
|<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|  
  
 <span data-ttu-id="54a18-213">值`type`参数用于设置<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>参数。</span><span class="sxs-lookup"><span data-stu-id="54a18-213">The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter.</span></span> <span data-ttu-id="54a18-214">如果`type`是`null`，安全系统组<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>到`Negotiate`在 Windows Vista 和更高版本的 Windows 操作系统和`Kerberos`早期版本的 Windows 操作系统上。</span><span class="sxs-lookup"><span data-stu-id="54a18-214">If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system.</span></span> <span data-ttu-id="54a18-215">安全系统不使用此值;它是仅用于提供信息。</span><span class="sxs-lookup"><span data-stu-id="54a18-215">The security system does not use this value; it is for informational use only.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="54a18-216">你可以检索所表示的令牌`userToken`通过调用非托管的代码如 Win32 API`LogonUser`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-216">You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function.</span></span> <span data-ttu-id="54a18-217">始终释放`userToken`通过调用 Win32 API`CloseHandle`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-217">Always release `userToken` by calling the Win32 API `CloseHandle` function.</span></span> <span data-ttu-id="54a18-218">调用非托管的代码的详细信息，请参阅[使用非托管 DLL 函数](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="54a18-218">For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-219">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.%23ctor%2A>构造函数来创建的新实例<xref:System.Security.Principal.WindowsIdentity>类，用于表示指定的 Windows 帐户标记、 指定的身份验证类型和指定的 Windows 帐户类型的用户。</span><span class="sxs-lookup"><span data-stu-id="54a18-219">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.%23ctor%2A> constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type.</span></span> <span data-ttu-id="54a18-220">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-220">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#7)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#7)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="54a18-221">
            <paramref name="userToken" /> 为 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-221">
              <paramref name="userToken" /> is 0.</span>
          </span>
          <span data-ttu-id="54a18-222">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-222">-or-</span>
          </span>
          <span data-ttu-id="54a18-223">
            <paramref name="userToken" /> 是重复的，对于模拟无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-223">
              <paramref name="userToken" /> is duplicated and invalid for impersonation.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-224">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-224">The caller does not have the correct permissions.</span>
          </span>
          <span data-ttu-id="54a18-225">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-225">-or-</span>
          </span>
          <span data-ttu-id="54a18-226">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-226">A Win32 error occurred.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-227">若要访问非托管的代码的功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-227">for the ability to access unmanaged code.</span>
          </span>
          <span data-ttu-id="54a18-228">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-228">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int userToken, string type, valuetype System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (userToken As IntPtr, type As String, acctType As WindowsAccountType, isAuthenticated As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsIdentity(IntPtr userToken, System::String ^ type, System::Security::Principal::WindowsAccountType acctType, bool isAuthenticated);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="userToken" Type="System.IntPtr" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="acctType" Type="System.Security.Principal.WindowsAccountType" />
        <Parameter Name="isAuthenticated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="54a18-229">用户的帐户标记，代码当前即以该用户的名义运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-229">The account token for the user on whose behalf the code is running.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="54a18-230">（仅供参考之用。）用于标识用户的身份验证的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-230">(Informational use only.) The type of authentication used to identify the user.</span>
          </span>
        </param>
        <param name="acctType">
          <span data-ttu-id="54a18-231">枚举值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-231">One of the enumeration values.</span>
          </span>
        </param>
        <param name="isAuthenticated">
          <span data-ttu-id="54a18-232">
            <see langword="true" /> 指示用户已经过身份验证，否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-232">
              <see langword="true" /> to indicate that the user is authenticated; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-233">为指定的 Windows 帐户标记、指定的身份验证类型、指定的 Windows 帐户类型和指定的身份验证状态表示的用户初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-233">Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-234">值`type`参数用于设置<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>参数。</span><span class="sxs-lookup"><span data-stu-id="54a18-234">The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter.</span></span> <span data-ttu-id="54a18-235">如果`type`是`null`，安全系统组<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>到`Negotiate`在 Windows Vista 和更高版本的 Windows 操作系统和`Kerberos`早期版本的 Windows 操作系统上。</span><span class="sxs-lookup"><span data-stu-id="54a18-235">If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system.</span></span> <span data-ttu-id="54a18-236">安全系统不使用此值;它是仅用于提供信息。</span><span class="sxs-lookup"><span data-stu-id="54a18-236">The security system does not use this value; it is for informational use only.</span></span>  
  
 <span data-ttu-id="54a18-237">你可以检索所表示的令牌`userToken`通过调用非托管的代码如 Win32 API`LogonUser`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-237">You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function.</span></span> <span data-ttu-id="54a18-238">始终释放`userToken`通过调用 Win32 API`CloseHandle`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-238">Always release `userToken` by calling the Win32 API `CloseHandle` function.</span></span> <span data-ttu-id="54a18-239">调用非托管的代码的详细信息，请参阅[使用非托管 DLL 函数](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="54a18-239">For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-240">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.%23ctor%2A>构造函数来创建的新实例<xref:System.Security.Principal.WindowsIdentity>类，用于表示指定的 Windows 帐户标记、 指定的身份验证类型、 指定的 Windows 帐户类型的用户和指定的身份验证状态。</span><span class="sxs-lookup"><span data-stu-id="54a18-240">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.%23ctor%2A> constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status.</span></span> <span data-ttu-id="54a18-241">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-241">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#17)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#17)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="54a18-242">
            <paramref name="userToken" /> 为 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-242">
              <paramref name="userToken" /> is 0.</span>
          </span>
          <span data-ttu-id="54a18-243">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-243">-or-</span>
          </span>
          <span data-ttu-id="54a18-244">
            <paramref name="userToken" /> 是重复的，对于模拟无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-244">
              <paramref name="userToken" /> is duplicated and invalid for impersonation.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-245">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-245">The caller does not have the correct permissions.</span>
          </span>
          <span data-ttu-id="54a18-246">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-246">-or-</span>
          </span>
          <span data-ttu-id="54a18-247">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-247">A Win32 error occurred.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-248">若要访问非托管的代码的功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-248">for the ability to access unmanaged code.</span>
          </span>
          <span data-ttu-id="54a18-249">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-249">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="AccessToken">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeAccessTokenHandle AccessToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeAccessTokenHandle AccessToken" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.AccessToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AccessToken As SafeAccessTokenHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeAccessTokenHandle ^ AccessToken { Microsoft::Win32::SafeHandles::SafeAccessTokenHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeAccessTokenHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-250">获取此 <see cref="T:System.Security.Principal.WindowsIdentity" /> 实例的此 <see cref="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-250">Gets this <see cref="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" /> for this <see cref="T:System.Security.Principal.WindowsIdentity" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-251">返回 <see cref="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-251">Returns a <see cref="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationType">
      <MemberSignature Language="C#" Value="public override sealed string AuthenticationType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthenticationType" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.AuthenticationType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property AuthenticationType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AuthenticationType { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Principal.IIdentity.AuthenticationType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-252">获取用于标识用户的身份验证的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-252">Gets the type of authentication used to identify the user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-253">用于标识用户的身份验证的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-253">The type of authentication used to identify the user.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-254">此属性是信息性;通过安全系统不使用它。</span><span class="sxs-lookup"><span data-stu-id="54a18-254">This property is informational; it is not used by the security system.</span></span> <span data-ttu-id="54a18-255">在 Windows Vista 和更高版本的 Windows 操作系统上，此属性的默认值是`Negotiate`，其中选择最佳安全支持提供程序 (SSP) 根据客户配置安全策略。</span><span class="sxs-lookup"><span data-stu-id="54a18-255">On Windows Vista and later versions of the Windows operating system, the default value for this property is `Negotiate`, which chooses the best security support provider (SSP) based on customer-configured security policy.</span></span> <span data-ttu-id="54a18-256">早期版本的 Windows 操作系统的默认属性值是`Kerberos`。</span><span class="sxs-lookup"><span data-stu-id="54a18-256">The default property value for earlier versions of the Windows operating system is `Kerberos`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="54a18-257">Windows 返回 Windows NT 状态代码 STATUS_ACCESS_DENIED。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-257">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="54a18-258">没有足够的可用内存。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-258">There is insufficient memory available.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-259">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-259">The caller does not have the correct permissions.</span>
          </span>
          <span data-ttu-id="54a18-260">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-260">-or-</span>
          </span>
          <span data-ttu-id="54a18-261">计算机未连接到 Windows 2003 或更高版本的域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-261">The computer is not attached to a Windows 2003 or later domain.</span>
          </span>
          <span data-ttu-id="54a18-262">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-262">-or-</span>
          </span>
          <span data-ttu-id="54a18-263">计算机没有运行 Windows 2003 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-263">The computer is not running Windows 2003 or later.</span>
          </span>
          <span data-ttu-id="54a18-264">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-264">-or-</span>
          </span>
          <span data-ttu-id="54a18-265">用户不是计算机所连接域的成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-265">The user is not a member of the domain the computer is attached to.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Claims">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; Claims { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; Claims" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.Claims" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Claims As IEnumerable(Of Claim)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Security::Claims::Claim ^&gt; ^ Claims { System::Collections::Generic::IEnumerable&lt;System::Security::Claims::Claim ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Security.Principal.WindowsIdentity/&lt;get_Claims&gt;d__95))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-266">为用户获取此 Windows 标识表示的所有声明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-266">Gets all claims for the user represented by this Windows identity.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-267">表示该 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象的请求的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-267">A collection of claims for this <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override System.Security.Claims.ClaimsIdentity Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Claims.ClaimsIdentity Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Clone () As ClaimsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Claims::ClaimsIdentity ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsIdentity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="54a18-268">创建作为当前实例副本的新对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-268">Creates a new  object that is a copy of the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="54a18-269">当前实例的副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-269">A copy of the current instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultIssuer">
      <MemberSignature Language="C#" Value="public const string DefaultIssuer;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultIssuer" />
      <MemberSignature Language="DocId" Value="F:System.Security.Principal.WindowsIdentity.DefaultIssuer" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultIssuer As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultIssuer;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-270">标识默认 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 颁发者的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-270">Identifies the name of the default <see cref="T:System.Security.Claims.ClaimsIdentity" /> issuer.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceClaims">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; DeviceClaims { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; DeviceClaims" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.DeviceClaims" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeviceClaims As IEnumerable(Of Claim)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Security::Claims::Claim ^&gt; ^ DeviceClaims { System::Collections::Generic::IEnumerable&lt;System::Security::Claims::Claim ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-271">获取有 <see cref="F:System.Security.Claims.ClaimTypes.WindowsDeviceClaim" /> 属性密钥的声明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-271">Gets claims that have the <see cref="F:System.Security.Claims.ClaimTypes.WindowsDeviceClaim" /> property key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-272">具有 <see cref="F:System.Security.Claims.ClaimTypes.WindowsDeviceClaim" /> 属性键的声明的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-272">A collection of claims that have the <see cref="F:System.Security.Claims.ClaimTypes.WindowsDeviceClaim" /> property key.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-273">释放由 <see cref="T:System.Security.Principal.WindowsIdentity" /> 占用的资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-273">Releases the resources used by the <see cref="T:System.Security.Principal.WindowsIdentity" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="54a18-274">释放由 <see cref="T:System.Security.Principal.WindowsIdentity" /> 使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-274">Releases all resources used by the <see cref="T:System.Security.Principal.WindowsIdentity" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-275">在完成使用 <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> 后，应调用 <xref:System.Security.Principal.WindowsIdentity>。</span><span class="sxs-lookup"><span data-stu-id="54a18-275">Call <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> when you are finished using the <xref:System.Security.Principal.WindowsIdentity>.</span></span> <span data-ttu-id="54a18-276"><xref:System.Security.Principal.WindowsIdentity.Dispose%2A> 方法使 <xref:System.Security.Principal.WindowsIdentity> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="54a18-276">The <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> method leaves the <xref:System.Security.Principal.WindowsIdentity> in an unusable state.</span></span> <span data-ttu-id="54a18-277">在调用<xref:System.Security.Principal.WindowsIdentity.Dispose%2A>，必须释放对所有引用<xref:System.Security.Principal.WindowsIdentity>以便垃圾回收器才能回收的内存，<xref:System.Security.Principal.WindowsIdentity>占用。</span><span class="sxs-lookup"><span data-stu-id="54a18-277">After calling <xref:System.Security.Principal.WindowsIdentity.Dispose%2A>, you must release all references to the <xref:System.Security.Principal.WindowsIdentity> so the garbage collector can reclaim the memory that the <xref:System.Security.Principal.WindowsIdentity> was occupying.</span></span> <span data-ttu-id="54a18-278">有关详细信息，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="54a18-278">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="54a18-279">每次释放对 <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Security.Principal.WindowsIdentity>。</span><span class="sxs-lookup"><span data-stu-id="54a18-279">Always call <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> before you release your last reference to the <xref:System.Security.Principal.WindowsIdentity>.</span></span> <span data-ttu-id="54a18-280">否则，在垃圾回收器调用 <xref:System.Security.Principal.WindowsIdentity> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="54a18-280">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Principal.WindowsIdentity> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="54a18-281">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-281">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-282">释放由 <see cref="T:System.Security.Principal.WindowsIdentity" /> 占用的非托管资源，还可以另外再释放托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-282">Releases the unmanaged resources used by the <see cref="T:System.Security.Principal.WindowsIdentity" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-283">此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="54a18-283">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="54a18-284">`Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="54a18-284">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="54a18-285"><xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="54a18-285"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="54a18-286">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Security.Principal.WindowsIdentity> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="54a18-286">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Principal.WindowsIdentity> references.</span></span> <span data-ttu-id="54a18-287">此方法调用每个引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="54a18-287">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="54a18-288">
              <see langword="Dispose" /> 可以由其他对象多次调用。</span>
            <span class="sxs-lookup">
              <span data-stu-id="54a18-288">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="54a18-289">在重写<see langword="Dispose(Boolean)" />请注意不要引用已释放的以前调用中的对象<see langword="Dispose" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="54a18-289">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="54a18-290">有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="54a18-290">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="54a18-291">有关详细信息<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="54a18-291">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAnonymous">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity GetAnonymous ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Principal.WindowsIdentity GetAnonymous() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.GetAnonymous" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAnonymous () As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Principal::WindowsIdentity ^ GetAnonymous();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="54a18-292">返回 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象，可在代码中将其用作 sentinel 值来表示匿名用户。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-292">Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that you can use as a sentinel value in your code to represent an anonymous user.</span>
          </span>
          <span data-ttu-id="54a18-293">属性值不表示 Windows 操作系统使用的内置匿名标识。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-293">The property value does not represent the built-in anonymous identity used by the Windows operating system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="54a18-294">表示匿名用户的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-294">An object that represents an anonymous user.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-295">此属性返回一个空<xref:System.Security.Principal.WindowsIdentity>使您能够将操作视为匿名的对象。</span><span class="sxs-lookup"><span data-stu-id="54a18-295">This property returns an empty <xref:System.Security.Principal.WindowsIdentity> object that enables you to treat operations as anonymous.</span></span> <span data-ttu-id="54a18-296">属性值不对应 Windows 匿名用户，并且不用于模拟。</span><span class="sxs-lookup"><span data-stu-id="54a18-296">The property value does not correspond to a Windows anonymous user and cannot be used for impersonation.</span></span> <span data-ttu-id="54a18-297">此外，请注意，此属性返回的标识不是静态的;每次调用<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>返回不同的匿名标识。</span><span class="sxs-lookup"><span data-stu-id="54a18-297">Also, note that the identity returned by this property is not static; each call to <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> returns a different anonymous identity.</span></span>  
  
 <span data-ttu-id="54a18-298">你可以使用<xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>属性来检测的返回值<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>。</span><span class="sxs-lookup"><span data-stu-id="54a18-298">You can use the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property to detect the return value from <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>.</span></span> <span data-ttu-id="54a18-299">但是，<xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>检测 Windows 匿名标识和此方法返回的匿名标识。</span><span class="sxs-lookup"><span data-stu-id="54a18-299">However, <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> detects both the Windows anonymous identity and the anonymous identity returned by this method.</span></span> <span data-ttu-id="54a18-300">若要使用后一种标识，缓存<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>返回值而不是依靠<xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="54a18-300">To use the latter identity, cache the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> return value instead of relying on the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-301">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>方法以返回<xref:System.Security.Principal.WindowsIdentity>表示匿名 Windows 用户的对象。</span><span class="sxs-lookup"><span data-stu-id="54a18-301">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents an anonymous Windows user.</span></span> <span data-ttu-id="54a18-302">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-302">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#15)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#15)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-303">返回表示当前 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-303">Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current Windows user.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity GetCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Principal.WindowsIdentity GetCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.GetCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrent () As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Principal::WindowsIdentity ^ GetCurrent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="54a18-304">返回表示当前 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-304">Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current Windows user.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="54a18-305">表示当前用户的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-305">An object that represents the current user.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="54a18-306">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A>方法以返回<xref:System.Security.Principal.WindowsIdentity>对象，表示当前 Windows 用户。</span><span class="sxs-lookup"><span data-stu-id="54a18-306">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A> method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents the current Windows user.</span></span> <span data-ttu-id="54a18-307">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-307">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#13)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#13)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-308">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-308">The caller does not have the correct permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-309">有关操作的主体对象的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-309">for ability to manipulate the principal object.</span>
          </span>
          <span data-ttu-id="54a18-310">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-310">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity GetCurrent (bool ifImpersonating);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Principal.WindowsIdentity GetCurrent(bool ifImpersonating) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrent (ifImpersonating As Boolean) As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Principal::WindowsIdentity ^ GetCurrent(bool ifImpersonating);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifImpersonating" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ifImpersonating">
          <span data-ttu-id="54a18-311">如果为 <see langword="true" />，则仅在线程当前正在模拟时才返回 <see cref="T:System.Security.Principal.WindowsIdentity" />；如果为 <see langword="false" />，则在线程正在模拟时返回线程的 <see cref="T:System.Security.Principal.WindowsIdentity" />，或在线程当前没有模拟时返回进程的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-311">
              <see langword="true" /> to return the <see cref="T:System.Security.Principal.WindowsIdentity" /> only if the thread is currently impersonating; <see langword="false" /> to return the <see cref="T:System.Security.Principal.WindowsIdentity" /> of the thread if it is impersonating or the <see cref="T:System.Security.Principal.WindowsIdentity" /> of the process if the thread is not currently impersonating.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-312">返回一个 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象，该对象表示线程或进程（具体取决于 <paramref name="ifImpersonating" /> 参数的值）的 Windows 标识。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-312">Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the Windows identity for either the thread or the process, depending on the value of the <paramref name="ifImpersonating" /> parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="54a18-313">表示 Windows 用户的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-313">An object that represents a Windows user.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-314">如果`ifImpersonating`是`true`和线程不模拟时，返回<xref:System.Security.Principal.WindowsIdentity>对象不具有任何值。</span><span class="sxs-lookup"><span data-stu-id="54a18-314">If `ifImpersonating` is `true` and the thread is not impersonating, the returned <xref:System.Security.Principal.WindowsIdentity> object has no value.</span></span>  <span data-ttu-id="54a18-315">如果`ifImpersonating`是`false`和线程正在模拟，则<xref:System.Security.Principal.WindowsIdentity>返回线程。</span><span class="sxs-lookup"><span data-stu-id="54a18-315">If `ifImpersonating` is `false` and the thread is impersonating, the <xref:System.Security.Principal.WindowsIdentity> for the thread is returned.</span></span>  <span data-ttu-id="54a18-316">如果`ifImpersonating`是`false`且线程不模拟，则<xref:System.Security.Principal.WindowsIdentity>返回进程。</span><span class="sxs-lookup"><span data-stu-id="54a18-316">If `ifImpersonating` is `false` and the thread is not impersonating, the <xref:System.Security.Principal.WindowsIdentity> for the process is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-317">有关操作的主体对象的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-317">for ability to manipulate the principal object.</span>
          </span>
          <span data-ttu-id="54a18-318">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-318">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity GetCurrent (System.Security.Principal.TokenAccessLevels desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Principal.WindowsIdentity GetCurrent(valuetype System.Security.Principal.TokenAccessLevels desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrent (desiredAccess As TokenAccessLevels) As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Principal::WindowsIdentity ^ GetCurrent(System::Security::Principal::TokenAccessLevels desiredAccess);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredAccess" Type="System.Security.Principal.TokenAccessLevels" />
      </Parameters>
      <Docs>
        <param name="desiredAccess">
          <span data-ttu-id="54a18-319">枚举值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-319">A bitwise combination of the enumeration values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-320">返回一个 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象，该对象使用指定的所需标记访问级别来表示当前 Windows 用户。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-320">Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current Windows user, using the specified desired token access level.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="54a18-321">表示当前用户的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-321">An object that represents the current user.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-322">`desiredAccess`参数指定标识的访问权限的访问令牌的请求的类型的访问掩码。</span><span class="sxs-lookup"><span data-stu-id="54a18-322">The `desiredAccess` parameter specifies an access mask that identifies the requested types of access to the access token.</span></span> <span data-ttu-id="54a18-323">与令牌的自由访问控制列表 (DACL) 来确定同意或拒绝哪些类型的访问，这些请求的访问类型进行比较。</span><span class="sxs-lookup"><span data-stu-id="54a18-323">These requested access types are compared with the token's discretionary access control list (DACL) to determine which types of access are granted or denied.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-324">有关操作的主体对象的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-324">for ability to manipulate the principal object.</span>
          </span>
          <span data-ttu-id="54a18-325">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-325">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IdentityReferenceCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IdentityReferenceCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.Groups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Groups As IdentityReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IdentityReferenceCollection ^ Groups { System::Security::Principal::IdentityReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IdentityReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-326">获取当前 Windows 用户所属的组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-326">Gets the groups the current Windows user belongs to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-327">一个对象，它表示当前 Windows 用户所属的组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-327">An object representing the groups the current Windows user belongs to.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="54a18-328">下面的代码示例演示了利用<xref:System.Security.Principal.WindowsIdentity.Groups%2A>属性，以显示当前用户所属的组的标识引用。</span><span class="sxs-lookup"><span data-stu-id="54a18-328">The following code example shows the use of the <xref:System.Security.Principal.WindowsIdentity.Groups%2A> property to display the identity references for the groups the current user belongs to.</span></span>  <span data-ttu-id="54a18-329">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-329">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#20)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Impersonate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-330">允许代码模拟不同的 Windows 用户。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-330">Allows code to impersonate a different Windows user.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Impersonate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.WindowsImpersonationContext Impersonate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Principal.WindowsImpersonationContext Impersonate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.Impersonate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Impersonate () As WindowsImpersonationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Principal::WindowsImpersonationContext ^ Impersonate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsImpersonationContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="54a18-331">模拟 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象表示的用户。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-331">Impersonates the user represented by the <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="54a18-332">表示模拟之前 Windows 用户的对象，这可以用于恢复为原始用户的上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-332">An object that represents the Windows user prior to impersonation; this can be used to revert to the original user's context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-333">在 Windows NT 平台上，当前用户必须具有足够的权限，以允许模拟。</span><span class="sxs-lookup"><span data-stu-id="54a18-333">On Windows NT platforms, the current user must have sufficient rights to allow impersonation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-334">下面的示例演示如何获取 Windows 帐户标记，通过调用非托管的 Win32`LogonUser`函数，以及如何使用该令牌模拟其他用户，然后恢复到原始标识。</span><span class="sxs-lookup"><span data-stu-id="54a18-334">The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.</span></span>  
  
 [!code-cpp[WindowsIdentity Impersonation#1](~/samples/snippets/cpp/VS_Snippets_CLR/WindowsIdentity Impersonation/CPP/source.cpp#1)]
 [!code-csharp[WindowsIdentity Impersonation#1](~/samples/snippets/csharp/VS_Snippets_CLR/WindowsIdentity Impersonation/CS/source.cs#1)]
 [!code-vb[WindowsIdentity Impersonation#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WindowsIdentity Impersonation/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="54a18-335">匿名标识尝试执行模拟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-335">An anonymous identity attempted to perform an impersonation.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-336">出现 Win32 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-336">A Win32 error occurred.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="54a18-337">Microsoft Windows 98 和 Windows Millennium Edition (Windows Me) 平台没有用户令牌，因为模拟不会在这些平台上的发生。</span>
            <span class="sxs-lookup">
              <span data-stu-id="54a18-337">Because Microsoft Windows 98 and Windows Millennium Edition (Windows Me) platforms do not have user tokens, impersonation cannot take place on those platforms.</span>
            </span>
          </para>
        </block>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="54a18-338">之后使用<see cref="M:System.Security.Principal.WindowsIdentity.Impersonate" />，务必要调用<see cref="M:System.Security.Principal.WindowsImpersonationContext.Undo" />方法来结束模拟。</span>
            <span class="sxs-lookup">
              <span data-stu-id="54a18-338">After using <see cref="M:System.Security.Principal.WindowsIdentity.Impersonate" />, it is important to call the <see cref="M:System.Security.Principal.WindowsImpersonationContext.Undo" /> method to end the impersonation.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Impersonate">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsImpersonationContext Impersonate (IntPtr userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Principal.WindowsImpersonationContext Impersonate(native int userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Impersonate (userToken As IntPtr) As WindowsImpersonationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Principal::WindowsImpersonationContext ^ Impersonate(IntPtr userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsImpersonationContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="54a18-339">Windows 帐户标记的句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-339">The handle of a Windows account token.</span>
          </span>
          <span data-ttu-id="54a18-340">通常，通过调用非托管代码（如调用 Win32 API <see langword="LogonUser" /> 函数）来检索此标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-340">This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API <see langword="LogonUser" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-341">模拟指定用户标记表示的用户。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-341">Impersonates the user represented by the specified user token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="54a18-342">表示模拟之前 Windows 用户的对象，该对象可以用于恢复为原始用户的上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-342">An object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-343">在 Windows NT 平台上，当前用户必须具有足够的权限，以允许模拟。</span><span class="sxs-lookup"><span data-stu-id="54a18-343">On Windows NT platforms, the current user must have sufficient rights to allow impersonation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="54a18-344">调用<xref:System.Security.Principal.WindowsIdentity.Impersonate%28System.IntPtr%29>方法替换`userToken`值<xref:System.IntPtr.Zero>等效于调用 Win32`RevertToSelf`函数。</span><span class="sxs-lookup"><span data-stu-id="54a18-344">Calling the <xref:System.Security.Principal.WindowsIdentity.Impersonate%28System.IntPtr%29> method with a `userToken` value of <xref:System.IntPtr.Zero> is equivalent to calling the Win32 `RevertToSelf` function.</span></span> <span data-ttu-id="54a18-345">如果当前被模拟另一个用户，控件将恢复为原始用户。</span><span class="sxs-lookup"><span data-stu-id="54a18-345">If another user is currently being impersonated, control reverts to the original user.</span></span>  
  
 <span data-ttu-id="54a18-346">有关调用非托管代码的详细信息，请参阅[使用非托管 DLL 函数](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="54a18-346">For more information about calls to unmanaged code, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-347">下面的示例演示如何获取 Windows 帐户标记，通过调用非托管的 Win32`LogonUser`函数，以及如何使用该令牌模拟其他用户，然后恢复到原始标识。</span><span class="sxs-lookup"><span data-stu-id="54a18-347">The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.</span></span>  
  
 [!code-csharp[WindowsIdentity Impersonation2#1](~/samples/snippets/csharp/VS_Snippets_CLR/windowsidentity impersonation2/cs/source.cs#1)]
 [!code-vb[WindowsIdentity Impersonation2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/windowsidentity impersonation2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="54a18-348">Windows 返回 Windows NT 状态代码 STATUS_ACCESS_DENIED。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-348">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="54a18-349">没有足够的可用内存。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-349">There is insufficient memory available.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="54a18-350">调用方没有正确的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-350">The caller does not have the correct permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-351">表示操作的主体对象和访问非托管的代码的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-351">for the ability to manipulate the principal object and access unmanaged code.</span>
          </span>
          <span data-ttu-id="54a18-352">关联的枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />和 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-352">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> and <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="54a18-353">Microsoft Windows 98 和 Windows Millennium Edition (Windows Me) 平台没有用户令牌，因为模拟不会在这些平台上的发生。</span>
            <span class="sxs-lookup">
              <span data-stu-id="54a18-353">Because Microsoft Windows 98 and Windows Millennium Edition (Windows Me) platforms do not have user tokens, impersonation cannot take place on those platforms.</span>
            </span>
          </para>
        </block>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="54a18-354">之后使用<see cref="M:System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)" />，务必要调用<see cref="M:System.Security.Principal.WindowsImpersonationContext.Undo" />方法来结束模拟。</span>
            <span class="sxs-lookup">
              <span data-stu-id="54a18-354">After using <see cref="M:System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)" />, it is important to call the <see cref="M:System.Security.Principal.WindowsImpersonationContext.Undo" /> method to end the impersonation.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-355">获取用户的模拟级别。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-355">Gets the impersonation level for the user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-356">用于指定模拟级别的枚举值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-356">One of the enumeration values that specifies the impersonation level.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-357">描述连接到 WMI 时将使用的模拟级别。</span><span class="sxs-lookup"><span data-stu-id="54a18-357">Describes the impersonation level to be used to connect to WMI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-358">下面的代码示例演示了利用<xref:System.Security.Principal.WindowsIdentity.ImpersonationLevel%2A>属性来显示当前用户的模拟级别。</span><span class="sxs-lookup"><span data-stu-id="54a18-358">The following code example shows the use of the <xref:System.Security.Principal.WindowsIdentity.ImpersonationLevel%2A> property to display the impersonation level for the current user.</span></span> <span data-ttu-id="54a18-359">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-359">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#21)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnonymous">
      <MemberSignature Language="C#" Value="public virtual bool IsAnonymous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnonymous" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.IsAnonymous" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsAnonymous As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAnonymous { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-360">获取一个值，该值指示系统是否将用户帐户标识为匿名帐户。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-360">Gets a value that indicates whether the user account is identified as an anonymous account by the system.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-361">如果用户帐户是匿名帐户，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-361">
              <see langword="true" /> if the user account is an anonymous account; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-362"><xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>属性检测 Windows 匿名标识和匿名标识返回<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="54a18-362">The <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property detects both the Windows anonymous identity and the anonymous identity that is returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method.</span></span>  
  
 <span data-ttu-id="54a18-363">匿名帐户通常仅只能从基于 ASP.NET 的应用程序中时遇到由 Internet 信息服务 (IIS) 允许匿名访问。</span><span class="sxs-lookup"><span data-stu-id="54a18-363">Anonymous accounts are typically only encountered only from within ASP.NET-based applications when anonymous access is allowed by Internet Information Services (IIS).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-364">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>属性来检测系统是否用户帐户标识为匿名帐户。</span><span class="sxs-lookup"><span data-stu-id="54a18-364">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property to detect whether the user account is identified as an anonymous account by the system.</span></span> <span data-ttu-id="54a18-365">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-365">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#9)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#9)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Principal.IIdentity.IsAuthenticated</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-366">获取一个值，该值指示 Windows 是否对用户进行了身份验证。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-366">Gets a value indicating whether the user has been authenticated by Windows.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-367">如果用户已经过验证，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-367">
              <see langword="true" /> if the user was authenticated; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGuest">
      <MemberSignature Language="C#" Value="public virtual bool IsGuest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGuest" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.IsGuest" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGuest As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGuest { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-368">获取一个值，该值指示系统是否将用户帐户标识为 <see cref="F:System.Security.Principal.WindowsAccountType.Guest" /> 帐户。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-368">Gets a value indicating whether the user account is identified as a <see cref="F:System.Security.Principal.WindowsAccountType.Guest" /> account by the system.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-369">如果用户帐户是 <see cref="F:System.Security.Principal.WindowsAccountType.Guest" /> 帐户，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-369">
              <see langword="true" /> if the user account is a <see cref="F:System.Security.Principal.WindowsAccountType.Guest" /> account; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="54a18-370">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.IsGuest%2A>属性以返回一个值，该值指示是否将用户帐户标识为<xref:System.Security.Principal.WindowsAccountType.Guest>系统帐户。</span><span class="sxs-lookup"><span data-stu-id="54a18-370">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.IsGuest%2A> property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType.Guest> account by the system.</span></span> <span data-ttu-id="54a18-371">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-371">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#12)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#12)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSystem">
      <MemberSignature Language="C#" Value="public virtual bool IsSystem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSystem" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.IsSystem" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSystem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSystem { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-372">获取一个值，该值指示系统是否将用户帐户标识为 <see cref="F:System.Security.Principal.WindowsAccountType.System" /> 帐户。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-372">Gets a value indicating whether the user account is identified as a <see cref="F:System.Security.Principal.WindowsAccountType.System" /> account by the system.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-373">如果用户帐户是 <see cref="F:System.Security.Principal.WindowsAccountType.System" /> 帐户，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-373">
              <see langword="true" /> if the user account is a <see cref="F:System.Security.Principal.WindowsAccountType.System" /> account; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="54a18-374">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.IsSystem%2A>属性以返回一个值，该值指示是否将用户帐户标识为<xref:System.Security.Principal.WindowsAccountType.System>系统帐户。</span><span class="sxs-lookup"><span data-stu-id="54a18-374">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.IsSystem%2A> property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType.System> account by the system.</span></span> <span data-ttu-id="54a18-375">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-375">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#11)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#11)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Principal.IIdentity.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-376">获取用户的 Windows 登录名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-376">Gets the user's Windows logon name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-377">用户的 Windows 登录名，当前即以该用户的名义运行代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-377">The Windows logon name of the user on whose behalf the code is being run.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-378">登录名是在窗体域 \ 用户名。</span><span class="sxs-lookup"><span data-stu-id="54a18-378">The logon name is in the form DOMAIN\USERNAME.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-379">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.Name%2A>属性来获取用户的 Windows 登录名。</span><span class="sxs-lookup"><span data-stu-id="54a18-379">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.Name%2A> property to get the user's Windows logon name.</span></span> <span data-ttu-id="54a18-380">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-380">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#8)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#8)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Security.Principal.SecurityIdentifier Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.SecurityIdentifier Owner" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As SecurityIdentifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::SecurityIdentifier ^ Owner { System::Security::Principal::SecurityIdentifier ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.SecurityIdentifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-381">获取标记所有者的安全标识符 (SID)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-381">Gets the security identifier (SID) for the token owner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-382">标记所有者的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-382">An object for the token owner.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-383">SID 唯一标识用户或组在所有 Windows NT 实现上。</span><span class="sxs-lookup"><span data-stu-id="54a18-383">The SID uniquely identifies a user or group on all Windows NT implementations.</span></span>  <span data-ttu-id="54a18-384">返回的 SID 标识默认所有者将应用到新创建的对象的 SID。</span><span class="sxs-lookup"><span data-stu-id="54a18-384">The returned SID identifies the default owner SID that will be applied to newly created objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-385">下面的代码示例演示了利用<xref:System.Security.Principal.WindowsIdentity.Owner%2A>属性显示标记所有者的安全标识符。</span><span class="sxs-lookup"><span data-stu-id="54a18-385">The following code example shows the use of the <xref:System.Security.Principal.WindowsIdentity.Owner%2A> property to display the security identifier for the token owner.</span></span>  <span data-ttu-id="54a18-386">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类</span><span class="sxs-lookup"><span data-stu-id="54a18-386">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class</span></span>  
  
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#19)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunImpersonated">
      <MemberSignature Language="C#" Value="public static void RunImpersonated (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RunImpersonated(class Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RunImpersonated(Microsoft::Win32::SafeHandles::SafeAccessTokenHandle ^ safeAccessTokenHandle, Action ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeAccessTokenHandle" Type="Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" />
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="safeAccessTokenHandle">
          <span data-ttu-id="54a18-387">模拟 Windows 标识 SafeAccessTokenHandle。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-387">The SafeAccessTokenHandle of the impersonated Windows identity.</span>
          </span>
        </param>
        <param name="action">
          <span data-ttu-id="54a18-388">要运行的 System.Action。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-388">The System.Action to run.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-389">作为模拟 Windows 标识运行指定操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-389">Runs the specified action as the impersonated Windows identity.</span>
          </span>
          <span data-ttu-id="54a18-390">可以使用 <see cref="M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)" /> 并直接作为参数提供函数，而不是使用模拟方法调用并在 <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> 中运行函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-390">Instead of using an impersonated method call and running your function in <see cref="T:System.Security.Principal.WindowsImpersonationContext" />, you can use <see cref="M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)" /> and provide your function directly as a parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="54a18-391">下面的示例演示了利用<xref:System.Security.Principal.WindowsIdentity>类，以模拟用户。</span><span class="sxs-lookup"><span data-stu-id="54a18-391">The following example demonstrates the use of the <xref:System.Security.Principal.WindowsIdentity> class to impersonate a user.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="54a18-392">此示例要求用户在控制台屏幕上输入密码。</span><span class="sxs-lookup"><span data-stu-id="54a18-392">This sample asks the user to enter a password on the console screen.</span></span> <span data-ttu-id="54a18-393">可看到密码在屏幕上，因为控制台窗口不以本机方式支持的屏蔽的输入。</span><span class="sxs-lookup"><span data-stu-id="54a18-393">The password will be visible on the screen, because the console window does not support masked input natively.</span></span>  
  
```csharp  
// The following example demonstrates the use of the WindowsIdentity class to impersonate a user.   
// IMPORTANT NOTE:   
// This sample asks the user to enter a password on the console screen.   
// The password will be visible on the screen, because the console window   
// does not support masked input natively.  
  
using System;  
using System.Runtime.InteropServices;  
using System.Security;  
using System.Security.Principal;  
using Microsoft.Win32.SafeHandles;  
  
public class ImpersonationDemo  
{  
    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]  
    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,  
        int dwLogonType, int dwLogonProvider, out SafeAccessTokenHandle phToken);  
  
    public static void Main()  
    {  
        // Get the user token for the specified user, domain, and password using the   
        // unmanaged LogonUser method.   
        // The local machine name can be used for the domain name to impersonate a user on this machine.  
        Console.Write("Enter the name of the domain on which to log on: ");  
        string domainName = Console.ReadLine();  
  
        Console.Write("Enter the login of a user on {0} that you wish to impersonate: ", domainName);  
        string userName = Console.ReadLine();  
  
        Console.Write("Enter the password for {0}: ", userName);  
  
        const int LOGON32_PROVIDER_DEFAULT = 0;  
        //This parameter causes LogonUser to create a primary token.   
        const int LOGON32_LOGON_INTERACTIVE = 2;  
  
        // Call LogonUser to obtain a handle to an access token.   
        SafeAccessTokenHandle safeAccessTokenHandle;  
        bool returnValue = LogonUser(userName, domainName, Console.ReadLine(),  
            LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,  
            out safeAccessTokenHandle);  
  
        if (false == returnValue)  
        {  
            int ret = Marshal.GetLastWin32Error();  
            Console.WriteLine("LogonUser failed with error code : {0}", ret);  
            throw new System.ComponentModel.Win32Exception(ret);  
        }  
  
        Console.WriteLine("Did LogonUser Succeed? " + (returnValue ? "Yes" : "No"));  
        // Check the identity.  
        Console.WriteLine("Before impersonation: " + WindowsIdentity.GetCurrent().Name);  
  
        // Note: if you want to run as unimpersonated, pass  
        //       'SafeAccessTokenHandle.InvalidHandle' instead of variable 'safeAccessTokenHandle'  
        WindowsIdentity.RunImpersonated(  
            safeAccessTokenHandle,  
            // User action  
            () =>  
            {  
                // Check the identity.  
                Console.WriteLine("During impersonation: " + WindowsIdentity.GetCurrent().Name);  
            }  
            );  
  
        // Check the identity again.  
        Console.WriteLine("After impersonation: " + WindowsIdentity.GetCurrent().Name);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunImpersonated&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T RunImpersonated&lt;T&gt; (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Func&lt;T&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T RunImpersonated&lt;T&gt;(class Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, class System.Func`1&lt;!!T&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T RunImpersonated(Microsoft::Win32::SafeHandles::SafeAccessTokenHandle ^ safeAccessTokenHandle, Func&lt;T&gt; ^ func);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="safeAccessTokenHandle" Type="Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" />
        <Parameter Name="func" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="54a18-394">函数使用并返回的对象的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-394">The type of object used by and returned by the function.</span>
          </span>
        </typeparam>
        <param name="safeAccessTokenHandle">
          <span data-ttu-id="54a18-395">模拟 Windows 标识 SafeAccessTokenHandle。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-395">The SafeAccessTokenHandle of the impersonated Windows identity.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="54a18-396">要运行的 System.Func。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-396">The System.Func to run.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-397">作为模拟 Windows 标识运行指定函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-397">Runs the specified function as the impersonated Windows identity.</span>
          </span>
          <span data-ttu-id="54a18-398">可以使用 <see cref="M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)" /> 并直接作为参数提供函数，而不是使用模拟方法调用并在 <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> 中运行函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-398">Instead of using an impersonated method call and running your function in <see cref="T:System.Security.Principal.WindowsImpersonationContext" />, you can use <see cref="M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)" /> and provide your function directly as a parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="54a18-399">返回函数的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-399">Returns the result of the function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="54a18-400">下面的示例演示了利用<xref:System.Security.Principal.WindowsIdentity>类，以模拟用户。</span><span class="sxs-lookup"><span data-stu-id="54a18-400">The following example demonstrates the use of the <xref:System.Security.Principal.WindowsIdentity> class to impersonate a user.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="54a18-401">此示例要求用户在控制台屏幕上输入密码。</span><span class="sxs-lookup"><span data-stu-id="54a18-401">This sample asks the user to enter a password on the console screen.</span></span> <span data-ttu-id="54a18-402">可看到密码在屏幕上，因为控制台窗口不以本机方式支持的屏蔽的输入。</span><span class="sxs-lookup"><span data-stu-id="54a18-402">The password will be visible on the screen, because the console window does not support masked input natively.</span></span>  
  
```csharp  
// The following example demonstrates the use of the WindowsIdentity class to impersonate a user.   
// IMPORTANT NOTE:   
// This sample asks the user to enter a password on the console screen.   
// The password will be visible on the screen, because the console window   
// does not support masked input natively.  
  
using System;  
using System.Runtime.InteropServices;  
using System.Security;  
using System.Security.Principal;  
using Microsoft.Win32.SafeHandles;  
  
public class ImpersonationDemo  
{  
    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]  
    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,  
        int dwLogonType, int dwLogonProvider, out SafeAccessTokenHandle phToken);  
  
    public static void Main()  
    {  
        // Get the user token for the specified user, domain, and password using the   
        // unmanaged LogonUser method.   
        // The local machine name can be used for the domain name to impersonate a user on this machine.  
        Console.Write("Enter the name of the domain on which to log on: ");  
        string domainName = Console.ReadLine();  
  
        Console.Write("Enter the login of a user on {0} that you wish to impersonate: ", domainName);  
        string userName = Console.ReadLine();  
  
        Console.Write("Enter the password for {0}: ", userName);  
  
        const int LOGON32_PROVIDER_DEFAULT = 0;  
        //This parameter causes LogonUser to create a primary token.   
        const int LOGON32_LOGON_INTERACTIVE = 2;  
  
        // Call LogonUser to obtain a handle to an access token.   
        SafeAccessTokenHandle safeAccessTokenHandle;  
        bool returnValue = LogonUser(userName, domainName, Console.ReadLine(),  
            LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,  
            out safeAccessTokenHandle);  
  
        if (false == returnValue)  
        {  
            int ret = Marshal.GetLastWin32Error();  
            Console.WriteLine("LogonUser failed with error code : {0}", ret);  
            throw new System.ComponentModel.Win32Exception(ret);  
        }  
  
        Console.WriteLine("Did LogonUser Succeed? " + (returnValue ? "Yes" : "No"));  
        // Check the identity.  
        Console.WriteLine("Before impersonation: " + WindowsIdentity.GetCurrent().Name);  
  
        // Note: if you want to run as unimpersonated, pass  
        //       'SafeAccessTokenHandle.InvalidHandle' instead of variable 'safeAccessTokenHandle'  
        WindowsIdentity.RunImpersonated(  
            safeAccessTokenHandle,  
            // User action  
            () =>  
            {  
                // Check the identity.  
                Console.WriteLine("During impersonation: " + WindowsIdentity.GetCurrent().Name);  
            }  
            );  
  
        // Check the identity again.  
        Console.WriteLine("After impersonation: " + WindowsIdentity.GetCurrent().Name);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="54a18-403">反序列化事件源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-403">The source of the deserialization event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-404">实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化后由反序列化事件回调。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-404">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and is called back by the deserialization event when deserialization is complete.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="54a18-405">一个对象，它包含序列化 <see cref="T:System.Collections.Hashtable" /> 所需的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-405">An object containing the information required to serialize the <see cref="T:System.Collections.Hashtable" />.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="54a18-406">一个对象，该对象包含与 <see cref="T:System.Collections.Hashtable" /> 相关联的序列化流的源和目标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-406">An object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="54a18-407">用重新创建此执行上下文的实例所需的逻辑上下文信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-407">Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate an instance of this execution context.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-408">此方法会设置<xref:System.Runtime.Serialization.SerializationInfo>用逻辑调用上下文信息。</span><span class="sxs-lookup"><span data-stu-id="54a18-408">This method sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information.</span></span> <span data-ttu-id="54a18-409">在反序列化过程的执行上下文对象重建从<xref:System.Runtime.Serialization.SerializationInfo>通过流传输。</span><span class="sxs-lookup"><span data-stu-id="54a18-409">During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.</span></span>  
  
 <span data-ttu-id="54a18-410">有关详情，请参阅<xref:System.Runtime.Serialization.SerializationInfo>。</span><span class="sxs-lookup"><span data-stu-id="54a18-410">For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="54a18-411">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-411">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="54a18-412">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-412">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public virtual IntPtr Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Token" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.Token" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Token As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Token { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-413">获取用户的 Windows 帐户标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-413">Gets the Windows account token for the user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-414">与当前执行线程关联的访问令牌的句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-414">The handle of the access token associated with the current execution thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-415">不要显式释放返回用户的帐户标记<xref:System.Security.Principal.WindowsIdentity.Token%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="54a18-415">Do not explicitly release the account token that is returned by the <xref:System.Security.Principal.WindowsIdentity.Token%2A> property.</span></span> <span data-ttu-id="54a18-416">令牌发布的<xref:System.Security.Principal.WindowsIdentity.Dispose%2A>方法，你可以在代码中调用该方法。</span><span class="sxs-lookup"><span data-stu-id="54a18-416">The token is released by the <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> method, which you can call in code.</span></span> <span data-ttu-id="54a18-417"><xref:System.Security.Principal.WindowsIdentity.Dispose%2A> 此外会自动由垃圾回收器调用。</span><span class="sxs-lookup"><span data-stu-id="54a18-417"><xref:System.Security.Principal.WindowsIdentity.Dispose%2A> is also automatically called by the garbage collector.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="54a18-418">返回用户的帐户标记<xref:System.Security.Principal.WindowsIdentity.Token%2A>属性是用于创建 Windows 令牌的重复<xref:System.Security.Principal.WindowsIdentity>对象，并由.NET Framework 自动释放。</span><span class="sxs-lookup"><span data-stu-id="54a18-418">The account token that is returned by the <xref:System.Security.Principal.WindowsIdentity.Token%2A> property is a duplicate of the Windows token that is used to create the <xref:System.Security.Principal.WindowsIdentity> object and is automatically released by the .NET Framework.</span></span> <span data-ttu-id="54a18-419">这是不同于用户的帐户标记 (`userToken`构造函数的参数)，用于创建<xref:System.Security.Principal.WindowsIdentity>对象。</span><span class="sxs-lookup"><span data-stu-id="54a18-419">This is different from the account token (the `userToken` parameter for the constructor), which is used to create the <xref:System.Security.Principal.WindowsIdentity> object.</span></span> <span data-ttu-id="54a18-420">`userToken` 是通过调用创建的 Windows 帐户标记`LogonUser`，必须关闭以避免内存泄露。</span><span class="sxs-lookup"><span data-stu-id="54a18-420">`userToken` is a Windows account token that is created by a call to `LogonUser` and must be closed to avoid a memory leak.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a18-421">下面的代码演示如何使用<xref:System.Security.Principal.WindowsIdentity.IsSystem%2A>属性来获取该用户的 Windows 帐户标记。</span><span class="sxs-lookup"><span data-stu-id="54a18-421">The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.IsSystem%2A> property to get the Windows account token for the user.</span></span> <span data-ttu-id="54a18-422">此代码示例摘自更大的示例为提供<xref:System.Security.Principal.WindowsIdentity>类。</span><span class="sxs-lookup"><span data-stu-id="54a18-422">This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.</span></span>  
  
 [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CPP/windowsidentitymembers.cpp#14)]
 [!code-csharp[System.Security.Principal.WindowsIdentity_AllMembers#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/CS/windowsidentitymembers.cs#14)]
 [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsIdentity_AllMembers/VB/Form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="54a18-423">若要访问非托管的代码的功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-423">for the ability to access unmanaged code.</span>
          </span>
          <span data-ttu-id="54a18-424">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-424">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.SecurityIdentifier User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.SecurityIdentifier User" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As SecurityIdentifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::SecurityIdentifier ^ User { System::Security::Principal::SecurityIdentifier ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Principal.Windows</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.SecurityIdentifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-425">获取用户的安全标识符 (SID)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-425">Gets the security identifier (SID) for the user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-426">用户对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-426">An object for the user.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a18-427">SID 唯一标识用户或组在所有 Windows NT 实现上。</span><span class="sxs-lookup"><span data-stu-id="54a18-427">The SID uniquely identifies a user or group on all Windows NT implementations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="54a18-428"><xref:System.Security.Principal.WindowsIdentity>返回对象<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>方法不是 Windows 匿名用户相同。</span><span class="sxs-lookup"><span data-stu-id="54a18-428">The <xref:System.Security.Principal.WindowsIdentity> object returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method is not the same as the Windows anonymous user.</span></span> <span data-ttu-id="54a18-429">此属性获取`null`表示匿名用户<xref:System.Security.Principal.WindowsIdentity>返回对象<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>方法; 它不会获取表示匿名 Windows 用户的 SID。</span><span class="sxs-lookup"><span data-stu-id="54a18-429">This property gets `null` for an anonymous user represented by the <xref:System.Security.Principal.WindowsIdentity> object returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method; it does not get the SID representing an anonymous Windows user.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserClaims">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; UserClaims { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; UserClaims" />
      <MemberSignature Language="DocId" Value="P:System.Security.Principal.WindowsIdentity.UserClaims" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property UserClaims As IEnumerable(Of Claim)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Security::Claims::Claim ^&gt; ^ UserClaims { System::Collections::Generic::IEnumerable&lt;System::Security::Claims::Claim ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="54a18-430">获取有 <see cref="F:System.Security.Claims.ClaimTypes.WindowsUserClaim" /> 属性密钥的声明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-430">Gets claims that have the <see cref="F:System.Security.Claims.ClaimTypes.WindowsUserClaim" /> property key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="54a18-431">具有 <see cref="F:System.Security.Claims.ClaimTypes.WindowsUserClaim" /> 属性键的声明的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54a18-431">A collection of claims that have the <see cref="F:System.Security.Claims.ClaimTypes.WindowsUserClaim" /> property key.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>