<Type Name="EnumerableToDispatchMarshaler" FullName="System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6edccf55832b67ee61b9946a537dd53b71dfd106" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EnumerableToDispatchMarshaler : System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EnumerableToDispatchMarshaler extends System.Object implements class System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Class EnumerableToDispatchMarshaler&#xA;Implements ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnumerableToDispatchMarshaler : System::Runtime::InteropServices::ICustomMarshaler" />
  <AssemblyInfo>
    <AssemblyName>CustomMarshalers</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices.ICustomMarshaler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="2c334-101">将 COM <see langword="IDispatch" /> 接口封送处理到 .NET Framework <see cref="T:System.Collections.IEnumerable" /> 接口，反之亦然。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c334-101">Marshals the COM <see langword="IDispatch" /> interface to the .NET Framework <see cref="T:System.Collections.IEnumerable" /> interface, and vice versa.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c334-102">此自定义封送处理程序将封送`IDispatch`到<xref:System.Collections.IEnumerable>和封送处理<xref:System.Collections.IEnumerable>到`IDispatch`时存在 dispid 为-4 的成员。</span><span class="sxs-lookup"><span data-stu-id="2c334-102">This custom marshaler marshals `IDispatch` to <xref:System.Collections.IEnumerable> and marshals <xref:System.Collections.IEnumerable> to `IDispatch` when a member with a DISPID of -4 exists.</span></span> <span data-ttu-id="2c334-103">如果你使用类型库导入程序 (Tlbimp.exe) 来创建一个类以实现<xref:System.Collections.IEnumerable>，则 CLR 会使用自动向桥 COM 枚举器和.NET 枚举器此自定义封送处理程序。</span><span class="sxs-lookup"><span data-stu-id="2c334-103">When you use the Type Library Importer (Tlbimp.exe) to create a class that implements <xref:System.Collections.IEnumerable> , the CLR uses this custom marshaler automatically to bridge COM enumerators and .NET enumerators.</span></span> <span data-ttu-id="2c334-104">调用<xref:System.Collections.IEnumerable.GetEnumerator%2A>导致`IDispatch.Invoke`与一个 DISPID-4，为调用，反之亦然。</span><span class="sxs-lookup"><span data-stu-id="2c334-104">Calling <xref:System.Collections.IEnumerable.GetEnumerator%2A> results in `IDispatch.Invoke` being called with a DISPID of -4, and vice versa.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public virtual void CleanUpManagedData (object pManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object pManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CleanUpManagedData (pManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CleanUpManagedData(System::Object ^ pManagedObj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pManagedObj">
          <span data-ttu-id="2c334-105">要销毁的托管对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-105">The managed object to be destroyed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c334-106">不再需要时执行必要的托管数据的清除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-106">Performs necessary cleanup of the managed data when it is no longer needed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c334-107">CLR 调用此方法来清理中分配的托管数据<xref:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.MarshalNativeToManaged%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="2c334-107">The CLR calls this method to clean up managed data allocated in the <xref:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.MarshalNativeToManaged%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public virtual void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">
          <span data-ttu-id="2c334-108">指向要销毁的非托管数据的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-108">A pointer to the unmanaged data to be destroyed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c334-109">不再需要时执行必要的非托管数据的清除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-109">Performs necessary cleanup of the unmanaged data when it is no longer needed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c334-110">CLR 调用此方法来清理中分配的非托管数据<xref:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.MarshalManagedToNative%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="2c334-110">The CLR calls this method to clean up the unmanaged data allocated in the <xref:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.MarshalManagedToNative%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.ICustomMarshaler GetInstance (string pstrCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.InteropServices.ICustomMarshaler GetInstance(string pstrCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.GetInstance(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (pstrCookie As String) As ICustomMarshaler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::ICustomMarshaler ^ GetInstance(System::String ^ pstrCookie);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.ICustomMarshaler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pstrCookie" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pstrCookie">
          <span data-ttu-id="2c334-111">可以由自定义封送拆收器使用的字符串“cookie”参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-111">String "cookie" parameter that can be used by the custom marshaler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c334-112">返回自定义封送拆收器的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-112">Returns an instance of the custom marshaler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c334-113">自定义封送拆收器的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-113">An instance of the custom marshaler.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c334-114">尽管这不是，所有自定义封必须实现此方法的一部分<xref:System.Runtime.InteropServices.ICustomMarshaler>接口定义。</span><span class="sxs-lookup"><span data-stu-id="2c334-114">All custom marshalers must implement this method, although it is not part of the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface definition.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public virtual int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetNativeDataSize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c334-115">返回要封送处理的非托管数据的大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-115">Returns the size in bytes of the unmanaged data to be marshaled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c334-116">-1 指示此封送拆收器处理的类型不是值类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-116">-1 to indicate the type this marshaler handles is not a value type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c334-117">由于.NET Framework 不支持自定义封送处理值类型，此方法始终返回-1。</span><span class="sxs-lookup"><span data-stu-id="2c334-117">Because custom marshaling of value types is not supported in the .NET Framework, this method always returns -1.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public virtual IntPtr MarshalManagedToNative (object pManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object pManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MarshalManagedToNative (pManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr MarshalManagedToNative(System::Object ^ pManagedObj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pManagedObj">
          <span data-ttu-id="2c334-118">要转换的托管对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-118">The managed object to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c334-119">将一个对象从托管代码封送处理到非托管代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-119">Marshals an object from managed code to unmanaged code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c334-120">指向非托管对象的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-120">A pointer to the unmanaged object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c334-121">CLR 调用此方法使用指定的实例托管的对象来将该对象从托管代码转换到非托管代码，并将指针返回到相应的非托管对象，表示该对象的 COM 视图。</span><span class="sxs-lookup"><span data-stu-id="2c334-121">The CLR calls this method with the specified instance of a managed object to convert that object from managed code to unmanaged code, and it returns a pointer to the appropriate unmanaged object, representing the COM view of that object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c334-122">
            <paramref name="pManagedObj" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-122">
              <paramref name="pManagedObj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public virtual object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumerableToDispatchMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">
          <span data-ttu-id="2c334-123">指向要转换的非托管对象的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-123">A pointer to the unmanaged object to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c334-124">将一个对象从非托管代码封送处理到托管代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-124">Marshals an object from unmanaged code to managed code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c334-125">一个托管对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-125">A managed object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c334-126">CLR 使用指向要将该对象从非托管代码转换为托管代码的非托管对象的指定指针调用此方法，并返回一个表示非托管数据的托管的视图的托管的对象。</span><span class="sxs-lookup"><span data-stu-id="2c334-126">The CLR calls this method with the specified pointer to an unmanaged object to convert that object from unmanaged code to managed code, and returns a managed object representing the managed view of the unmanaged data.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c334-127">
            <paramref name="pNativeData" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c334-127">
              <paramref name="pNativeData" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>