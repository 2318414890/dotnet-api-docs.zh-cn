<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="06c63942927ed1dafce0982447f6df085309a7d1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36478511" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type InstrumentationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="aa6d9-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span>
      <span class="sxs-lookup">
        <span data-stu-id="aa6d9-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span>
      </span>
      <span data-ttu-id="aa6d9-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span>
      <span class="sxs-lookup">
        <span data-stu-id="aa6d9-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span>
      </span>
      <span data-ttu-id="aa6d9-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span>
      <span class="sxs-lookup">
        <span data-stu-id="aa6d9-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aa6d9-104">分离的提供程序托管的应用程序。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-104">Decoupled providers are hosted by an application.</span></span> <span data-ttu-id="aa6d9-105">两种方法可以由应用程序提供的 WMI 类的实例： 发布/撤消或回调方法。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-105">Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</span></span> <span data-ttu-id="aa6d9-106">回调方法使用<xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>和<xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-106">The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.</span></span>  
  
 <span data-ttu-id="aa6d9-107">在发布/撤消模型中，WMI 基础结构为很多您需要在回调方法中自行编写方法提供默认行为。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-107">In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</span></span> <span data-ttu-id="aa6d9-108">其中包括在枚举和绑定方法。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-108">These include the enumeration and bind methods.</span></span> <span data-ttu-id="aa6d9-109">在此模型中，应用程序创建实例，并将其发布。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-109">In this model, the application creates instances and publishes them.</span></span> <span data-ttu-id="aa6d9-110">应用程序负责确保遵循类键属性。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-110">The application is responsible for ensuring that the key properties of the classes are respected.</span></span> <span data-ttu-id="aa6d9-111">此外，应用程序负责删除实例。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-111">The application is also responsible for deleting instances.</span></span>  
  
 <span data-ttu-id="aa6d9-112">在回调模型中，WMI 基础结构需要应用程序具有处理枚举、 绑定和实现的提供程序的功能所需的任何其他方法的方法。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-112">In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</span></span> <span data-ttu-id="aa6d9-113">调入此功能的应用程序，并且如果它不存在或未正确实施将失败。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-113">It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</span></span> <span data-ttu-id="aa6d9-114">应用程序中注册其 WMI 类的类型与基础结构，通过调用<xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>并指示它不再需要通过调用公开的 WMI 类<xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-114">The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa6d9-115">下面的示例演示如何使用发布/撤消模型。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-115">The following example demonstrates how to use the publish/revoke model.</span></span> <span data-ttu-id="aa6d9-116">创建和发布的路由器类的两个实例。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-116">Two instances of the router class are created and published.</span></span> <span data-ttu-id="aa6d9-117">更高版本已吊销。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-117">They are later revoked.</span></span>  
  
```  
public class Sample_InstanceProvider  
{  
public int Main (string[] args)   
{  
Router r_one = new Router ();  
r_one.Name = "one";  
InstrumentationManager.Publish(r_one);  
Router r_two = new Router ();  
r_two.Name = "two";  
InstrumentationManager.Publish(r_two);  
// ....  
InstrumentationManager.Revoke(r_one);  
InstrumentationManager.Revoke(r_two);  
return 0;  
}  
}  
```  
  
 <span data-ttu-id="aa6d9-118">在下一步的示例中，注册的回调方法用于公开 RouterNew 类。</span><span class="sxs-lookup"><span data-stu-id="aa6d9-118">In the next example, the callback method of registration is used to expose the RouterNew class.</span></span>  
  
```  
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Publish : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Publish value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="aa6d9-119">An instance of the class that implements the provider to publish.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-119">An instance of the class that implements the provider to publish.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aa6d9-120">Makes an instance of a provider available within the WMI infrastructure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-120">Makes an instance of a provider available within the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member RegisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">
          <span data-ttu-id="aa6d9-121">The assembly to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-121">The assembly to register.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aa6d9-122">Registers an assembly with the WMI infrastructure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-122">Registers an assembly with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member RegisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">
          <span data-ttu-id="aa6d9-123">The type of the class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-123">The type of the class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aa6d9-124">Registers a class with the WMI infrastructure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-124">Registers a class with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```  
static int Main(string[] args)  
{  
   InstrumentationManager.RegisterType(typeof(MySampleProvider));  
   return 0;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Revoke : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Revoke value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="aa6d9-125">An instance of the class that implements the provider to revoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-125">An instance of the class that implements the provider to revoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aa6d9-126">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-126">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member UnregisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">
          <span data-ttu-id="aa6d9-127">The registered assembly to unregister.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-127">The registered assembly to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aa6d9-128">Unregisters an assembly currently registered with the WMI infrastructure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-128">Unregisters an assembly currently registered with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member UnregisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">
          <span data-ttu-id="aa6d9-129">The registered type to unregister.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-129">The registered type to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aa6d9-130">Unregisters a class registered with the WMI infrastructure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa6d9-130">Unregisters a class registered with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>