<Type Name="InPlaceHostingManager" FullName="System.Deployment.Application.InPlaceHostingManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37a2d5acb62923ae574d83fa0e8f1aa751bfbd07" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51866122" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InPlaceHostingManager : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InPlaceHostingManager extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Deployment.Application.InPlaceHostingManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InPlaceHostingManager&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class InPlaceHostingManager : IDisposable" />
  <TypeSignature Language="F#" Value="type InPlaceHostingManager = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Deployment</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>在计算机上安装或更新 ClickOnce 部署。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用<xref:System.Deployment.Application.InPlaceHostingManager>若要编写程序该安装[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]应用程序以编程方式。 例如，在受控的系统管理软件 (SMS) 环境中或在需要复杂的安装执行次数的本地计算机上预安装或安装后操作的情况下可以使用此类。 通常情况下，想要按特定顺序使用此类的成员：  
  
1.  创建 <xref:System.Deployment.Application.InPlaceHostingManager> 的一个新实例。  
  
2.  通过下载部署清单<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A>。  
  
3.  可以通过使用适当的权限运行应用程序的检查<xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>。  
  
4.  下载并安装该应用程序使用<xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>。  
  
-   如果你调用任意这些参数的顺序，则将会引发异常。  
  
 <xref:System.Deployment.Application.InPlaceHostingManager> 可以安装[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]应用程序，但不能执行它。 某些方法在此类，如<xref:System.Deployment.Application.InPlaceHostingManager.Execute%2A>，会保留，用于下载 Web 浏览器内运行的基于 Windows Presentation Foundation 的应用程序时。  
  
 若要使用<xref:System.Deployment.Application.InPlaceHostingManager>若要下载和安装应用程序，则必须确保证书以签署[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]你打算安装的应用程序作为受信任的发布服务器上已安装客户端计算机上。 有关受信任的发行者的详细信息，请参阅[受信任的应用程序部署概述](https://msdn.microsoft.com/library/b24a1702-8fbe-45b1-87a0-9618a0708f1d)。  
  
> [!NOTE]
>  目前有一个产品限制，即可以防止<xref:System.Deployment.Application.InPlaceHostingManager>从你的代码使用 Visual Studio 调试时正常工作。 如果使用 f5 调试应用程序在 Visual Studio 中的，在调用时，该示例将引发不明原因的异常<xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>。 若要使用 Visual Studio 进行调试，而不进行调试，启动应用程序，然后附加调试器。 或者，可以使用另一个调试器，WinDbg 等。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Deployment.Application.InPlaceHostingManager>若要安装[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]以编程方式在客户端计算机应用程序。  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#1)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建 <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> 的一个新实例以下载和安装指定的应用程序。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InPlaceHostingManager (Uri deploymentManifest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri deploymentManifest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (deploymentManifest As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InPlaceHostingManager(Uri ^ deploymentManifest);" />
      <MemberSignature Language="F#" Value="new System.Deployment.Application.InPlaceHostingManager : Uri -&gt; System.Deployment.Application.InPlaceHostingManager" Usage="new System.Deployment.Application.InPlaceHostingManager deploymentManifest" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="deploymentManifest" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="deploymentManifest">指向 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 应用程序的部署清单的统一资源标识符 (<see cref="T:System.Uri" />)。</param>
        <summary>创建 <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> 的一个新实例以下载和安装浏览器承载的指定应用程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你想要下载 Web 浏览器中托管的基于 Windows Presentation Foundation 的应用程序时，使用此构造函数。 若要下载的基于 Windows 窗体的应用程序使用部署[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]，使用<xref:System.Deployment.Application.InPlaceHostingManager.%23ctor%2A>构造函数与`launchInHostProcess`参数设置为`false`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> 只能用于 Windows XP 或更高版本的 Windows 操作系统中。</exception>
        <exception cref="T:System.ArgumentNullException">无法为 <paramref name="deploymentManifest" /> 参数传递 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="deploymentManifest" /> 使用不受 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 支持的 URI 方案。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InPlaceHostingManager (Uri deploymentManifest, bool launchInHostProcess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri deploymentManifest, bool launchInHostProcess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.#ctor(System.Uri,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (deploymentManifest As Uri, launchInHostProcess As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InPlaceHostingManager(Uri ^ deploymentManifest, bool launchInHostProcess);" />
      <MemberSignature Language="F#" Value="new System.Deployment.Application.InPlaceHostingManager : Uri * bool -&gt; System.Deployment.Application.InPlaceHostingManager" Usage="new System.Deployment.Application.InPlaceHostingManager (deploymentManifest, launchInHostProcess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="deploymentManifest" Type="System.Uri" />
        <Parameter Name="launchInHostProcess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deploymentManifest">指向将安装的应用程序的部署清单的统一资源标识符 (URI)。</param>
        <param name="launchInHostProcess">此应用程序是否将在主机（如 Web 浏览器）中运行。 对于独立应用程序，将此值设置为 <see langword="false" />。</param>
        <summary>创建 <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> 的一个新实例以下载和安装指定的应用程序，该应用程序可以是基于 Windows 窗体的独立应用程序，也可以是承载在 Web 浏览器中的应用程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建的实例<xref:System.Deployment.Application.InPlaceHostingManager>，可用于下载基于 Windows 窗体的应用程序使用部署[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]。  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#2)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> 只能用于 Windows XP 或更高版本的 Windows 操作系统中。</exception>
        <exception cref="T:System.ArgumentNullException">无法为 <paramref name="deploymentManifest" /> 参数传递 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="deploymentManifest" /> 使用不受 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 支持的 URI 方案。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AssertApplicationRequirements">
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定 ClickOnce 应用程序是否具有合适的权限和平台依赖项，以便在本地计算机上运行。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AssertApplicationRequirements">
      <MemberSignature Language="C#" Value="public void AssertApplicationRequirements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssertApplicationRequirements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssertApplicationRequirements ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssertApplicationRequirements();" />
      <MemberSignature Language="F#" Value="member this.AssertApplicationRequirements : unit -&gt; unit" Usage="inPlaceHostingManager.AssertApplicationRequirements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 应用程序是否具有合适的权限和平台依赖项，以便在本地计算机上运行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须调用<xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>后<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A>成功返回。 您必须调用<xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>除非调用<xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>，并返回不会出错。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>，随后在成功的正文中调用<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted>事件处理程序。  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#3)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在 <see cref="M:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync" /> 方法之前调用此方法时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="AssertApplicationRequirements">
      <MemberSignature Language="C#" Value="public void AssertApplicationRequirements (bool grantApplicationTrust);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssertApplicationRequirements(bool grantApplicationTrust) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssertApplicationRequirements (grantApplicationTrust As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssertApplicationRequirements(bool grantApplicationTrust);" />
      <MemberSignature Language="F#" Value="member this.AssertApplicationRequirements : bool -&gt; unit" Usage="inPlaceHostingManager.AssertApplicationRequirements grantApplicationTrust" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grantApplicationTrust" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="grantApplicationTrust">如果为 <see langword="true" />，应用程序将尝试将其权限提升至所需级别。</param>
        <summary>确定 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 应用程序是否具有合适的权限和平台依赖项，以便在本地计算机上运行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`grantApplicationTrust`是`true`，<xref:System.Deployment.Application.InPlaceHostingManager>将授予该应用程序是否需要这些提升的权限。 这种情况只有<xref:System.Deployment.Application.InPlaceHostingManager>能够授予这些权限。 例如，如果[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]正在作为较大包的一部分安装应用程序并且安装程序已被授予完全信任<xref:System.Deployment.Application.InPlaceHostingManager>能够授予[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]应用程序完全信任。 如果`grantApplicationTrust`是`false`，应用程序将不授予任何权限。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="inPlaceHostingManager.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消异步下载操作。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="inPlaceHostingManager.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> 使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.Deployment.Application.InPlaceHostingManager.Dispose%2A> 后，应调用 <xref:System.Deployment.Application.InPlaceHostingManager>。 <xref:System.Deployment.Application.InPlaceHostingManager.Dispose%2A> 方法使 <xref:System.Deployment.Application.InPlaceHostingManager> 处于不可用状态。 在调用<xref:System.Deployment.Application.InPlaceHostingManager.Dispose%2A>，必须释放对所有引用<xref:System.Deployment.Application.InPlaceHostingManager>这样垃圾回收器才能收回内存的<xref:System.Deployment.Application.InPlaceHostingManager>占用。 有关详细信息，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  每次释放对 <xref:System.Deployment.Application.InPlaceHostingManager.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Deployment.Application.InPlaceHostingManager>。 否则，在垃圾回收器调用 <xref:System.Deployment.Application.InPlaceHostingManager> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadApplicationAsync">
      <MemberSignature Language="C#" Value="public void DownloadApplicationAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadApplicationAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadApplicationAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadApplicationAsync();" />
      <MemberSignature Language="F#" Value="member this.DownloadApplicationAsync : unit -&gt; unit" Usage="inPlaceHostingManager.DownloadApplicationAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在后台下载应用程序更新。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必须调用此方法之后调用<xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>，随后的成功结束时调用<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted>事件处理程序。  
  
 下面的代码示例假定已定义和创建的实例<xref:System.Deployment.Application.InPlaceHostingManager>名为`iphm`。  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#3)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在 <see cref="M:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync" /> 和 <see cref="M:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements" /> 方法之前调用此方法时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadApplicationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Deployment.Application.DownloadApplicationCompletedEventArgs&gt; DownloadApplicationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Deployment.Application.DownloadApplicationCompletedEventArgs&gt; DownloadApplicationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event DownloadApplicationCompleted As EventHandler(Of DownloadApplicationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Deployment::Application::DownloadApplicationCompletedEventArgs ^&gt; ^ DownloadApplicationCompleted;" />
      <MemberSignature Language="F#" Value="member this.DownloadApplicationCompleted : EventHandler&lt;System.Deployment.Application.DownloadApplicationCompletedEventArgs&gt; " Usage="member this.DownloadApplicationCompleted : System.EventHandler&lt;System.Deployment.Application.DownloadApplicationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Deployment.Application.DownloadApplicationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>应用程序向本地计算机下载完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在安装基于 Windows 窗体的应用程序，你将需要指示用户启动应用程序本身;您不能以编程方式启动基于 Windows 窗体的应用程序使用<xref:System.Deployment.Application.InPlaceHostingManager.Execute%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示了一个处理程序<xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationCompleted>事件。  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#7)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadProgressChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Deployment.Application.DownloadProgressChangedEventArgs&gt; DownloadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Deployment.Application.DownloadProgressChangedEventArgs&gt; DownloadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Deployment.Application.InPlaceHostingManager.DownloadProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event DownloadProgressChanged As EventHandler(Of DownloadProgressChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Deployment::Application::DownloadProgressChangedEventArgs ^&gt; ^ DownloadProgressChanged;" />
      <MemberSignature Language="F#" Value="member this.DownloadProgressChanged : EventHandler&lt;System.Deployment.Application.DownloadProgressChangedEventArgs&gt; " Usage="member this.DownloadProgressChanged : System.EventHandler&lt;System.Deployment.Application.DownloadProgressChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Deployment.Application.DownloadProgressChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更改应用程序或清单下载状态时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在控制台应用程序中，事件是从线程池分配给线程。 因此，可能会收到进度更新事件无序，与显示与上一个事件降低后续事件。 不会看到在基于 Windows 窗体的应用程序，这种行为，因为在 Windows 窗体中的事件按顺序处理从用户界面 (UI) 线程的消息队列。  
  
   
  
## Examples  
 下面的代码示例演示如何更新<xref:System.Windows.Forms.ToolStripProgressBar>包含在<xref:System.Windows.Forms.StatusStrip>。  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#6)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle Execute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle Execute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.Execute" />
      <MemberSignature Language="VB.NET" Value="Public Function Execute () As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ Execute();" />
      <MemberSignature Language="F#" Value="member this.Execute : unit -&gt; System.Runtime.Remoting.ObjectHandle" Usage="inPlaceHostingManager.Execute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当且仅当 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 应用程序是一个在 Web 浏览器中运行的基于 Windows Presentation Foundation 的应用程序时，才启动该应用程序。</summary>
        <returns>对应于已启动应用程序的 <see cref="T:System.Runtime.Remoting.ObjectHandle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法是仅对基于 Windows Presentation Foundation 的应用程序可以托管在 Web 浏览器中有效 (也就是说，其部署清单定义`hostInBrowser`XML 元素)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifestAsync">
      <MemberSignature Language="C#" Value="public void GetManifestAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetManifestAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetManifestAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetManifestAsync();" />
      <MemberSignature Language="F#" Value="member this.GetManifestAsync : unit -&gt; unit" Usage="inPlaceHostingManager.GetManifestAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在后台下载 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 应用程序的部署清单，并在操作完成或遇到错误时引发事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要接收通知的此事件完成时，创建的事件处理程序<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted>事件。 如果调用此事件，并不指示任何错误<xref:System.Deployment.Application.GetManifestCompletedEventArgs>，接下来应调用<xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>以验证该应用程序将有权在本地计算机上运行。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A>方法。 处理程序<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted>事件回调检查以确定如果清单下载已成功完成，并且如果是这样，通过提示用户有关应用程序的其他信息。 如果用户同意才能继续安装，该处理程序调用<xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>。  
  
 下面的代码示例假定已定义和创建的实例<xref:System.Deployment.Application.InPlaceHostingManager>名为`iphm`。  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#3)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#3)]  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifestCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Deployment.Application.GetManifestCompletedEventArgs&gt; GetManifestCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Deployment.Application.GetManifestCompletedEventArgs&gt; GetManifestCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event GetManifestCompleted As EventHandler(Of GetManifestCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Deployment::Application::GetManifestCompletedEventArgs ^&gt; ^ GetManifestCompleted;" />
      <MemberSignature Language="F#" Value="member this.GetManifestCompleted : EventHandler&lt;System.Deployment.Application.GetManifestCompletedEventArgs&gt; " Usage="member this.GetManifestCompleted : System.EventHandler&lt;System.Deployment.Application.GetManifestCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Deployment.Application.GetManifestCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>部署清单已下载到本地计算机时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>的属性<xref:System.Deployment.Application.GetManifestCompletedEventArgs>若要检查是否<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A>已成功完成或返回了错误。 如果<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>为 null，<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A>已成功完成，并且可以调用<xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A>方法。 处理程序<xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted>事件回调检查以确定如果清单下载已成功完成，并且如果是这样，通过提示用户有关应用程序的其他信息。 如果用户同意才能继续安装，该处理程序调用<xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>。  
  
 下面的代码示例假定已定义和创建的实例<xref:System.Deployment.Application.InPlaceHostingManager>名为`iphm`。  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#2)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#2)]  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#3)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UninstallCustomAddIn">
      <MemberSignature Language="C#" Value="public static void UninstallCustomAddIn (string subscriptionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UninstallCustomAddIn(string subscriptionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.UninstallCustomAddIn(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UninstallCustomAddIn (subscriptionId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UninstallCustomAddIn(System::String ^ subscriptionId);" />
      <MemberSignature Language="F#" Value="static member UninstallCustomAddIn : string -&gt; unit" Usage="System.Deployment.Application.InPlaceHostingManager.UninstallCustomAddIn subscriptionId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">一个包含订阅标识符的字符串，它指示要移除的外接程序。</param>
        <summary>删除应用程序中以前安装的用户定义组件。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" /> 不是有效的订阅标识，或者不包括名称、公钥标记、处理器架构和版本号。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UninstallCustomUXApplication">
      <MemberSignature Language="C#" Value="public static void UninstallCustomUXApplication (string subscriptionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UninstallCustomUXApplication(string subscriptionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.UninstallCustomUXApplication(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UninstallCustomUXApplication (subscriptionId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UninstallCustomUXApplication(System::String ^ subscriptionId);" />
      <MemberSignature Language="F#" Value="static member UninstallCustomUXApplication : string -&gt; unit" Usage="System.Deployment.Application.InPlaceHostingManager.UninstallCustomUXApplication subscriptionId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">一个包含订阅标识符的字符串，指示要移除的 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 应用程序。</param>
        <summary>删除 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 应用程序，该应用程序包含 &lt;customUX&gt; 元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法卸载以前安装[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]使用应用程序`<customUX>`中的元素[&lt;入口点&gt;元素](/visualstudio/deployment/entrypoint-element-clickonce-application)。  
  
 自定义安装程序不创建为一个添加或删除程序条目[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]应用程序必须存储在中找到订阅标识符<xref:System.Deployment.Application.GetManifestCompletedEventArgs.SubscriptionIdentity%2A>在安装过程中的属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>