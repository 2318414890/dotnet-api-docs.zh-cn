<Type Name="GrammarBuilder" FullName="System.Speech.Recognition.GrammarBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="98da164e53b40a45073d60c360d0897674bf1959" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GrammarBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GrammarBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.GrammarBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class GrammarBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class GrammarBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d3cd1-101">提供机制以便以编程方式为语音识别语法生成约束。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d3cd1-101">Provides a mechanism for programmatically building the constraints for a speech recognition grammar.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-102">在使用定义的 XML 格式通常创作语音识别语法[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-102">Speech recognition grammars are commonly authored in the XML format defined by the [Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761).</span></span> <span data-ttu-id="d3cd1-103">如果你熟悉 SRGS 但想要以编程方式生成语法，你可以使用<xref:System.Speech.Recognition.SrgsGrammar>命名空间，其成员的元素和特性定义 SRGS 密切对应。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-103">If you are familiar with SRGS but want to generate the grammars programmatically, you can use the <xref:System.Speech.Recognition.SrgsGrammar> namespace, whose members correspond closely to the elements and attributes defined by SRGS.</span></span> <span data-ttu-id="d3cd1-104">如果你不熟悉 SRGS，或者你想创作的语法与你可以有效地的轻量、 编程方法来完成许多常见方案;你可以使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>类。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-104">If you are unfamiliar with SRGS, or you want a lightweight, programmatic approach to authoring grammars with which you can efficiently accomplish many common scenarios; you can use the <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> classes.</span></span>  
  
 <span data-ttu-id="d3cd1-105">使用<xref:System.Speech.Recognition.GrammarBuilder>对象生成一个层次结构树组成<xref:System.Speech.Recognition.Choices>对象，其中包含与前导码和在每个节点的后 amble 短语交织在一起并使用传递的含义的语义值设定种子的备用短语回流到应用程序。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-105">Use <xref:System.Speech.Recognition.GrammarBuilder> objects to build a hierarchical tree composed of <xref:System.Speech.Recognition.Choices> objects that contain alternate phrases, interspersed with preamble and post-amble phrases at each node, and seeded with semantic values that convey  meaning back to the application.</span></span>  
  
 <span data-ttu-id="d3cd1-106">若要使用<xref:System.Speech.Recognition.GrammarBuilder>创建<xref:System.Speech.Recognition.Grammar>对象，请使用以下步骤。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-106">To use a <xref:System.Speech.Recognition.GrammarBuilder> to create a <xref:System.Speech.Recognition.Grammar> object, use the following steps.</span></span>  
  
1.  <span data-ttu-id="d3cd1-107">创建 <xref:System.Speech.Recognition.GrammarBuilder> 对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-107">Create a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
2.  <span data-ttu-id="d3cd1-108">追加到约束<xref:System.Speech.Recognition.GrammarBuilder>，如<xref:System.String>对象， <xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.SemanticResultValue>， <xref:System.Speech.Recognition.DictationGrammar>，和其他<xref:System.Speech.Recognition.GrammarBuilder>定义的语法的约束的对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-108">Append constraints to the <xref:System.Speech.Recognition.GrammarBuilder>, such as <xref:System.String> objects, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>, and other <xref:System.Speech.Recognition.GrammarBuilder> objects that define the constraints for the grammar.</span></span>  
  
3.  <span data-ttu-id="d3cd1-109">使用之一<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数来创建<xref:System.Speech.Recognition.Grammar>对象从已完成<xref:System.Speech.Recognition.GrammarBuilder>语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-109">Use one of the <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructors to create a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder> grammar.</span></span>  
  
 <span data-ttu-id="d3cd1-110">使用创作<xref:System.Speech.Recognition.GrammarBuilder>最适合于具有包含列表或可能是列表的列表，一项规则的语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-110">Authoring with <xref:System.Speech.Recognition.GrammarBuilder> is best suited to grammars that have a single rule containing lists, or perhaps lists of lists.</span></span> <span data-ttu-id="d3cd1-111">若要以编程方式生成具有多个规则，或者需要以使的内部规则引用的语法，使用的类<xref:System.Speech.Recognition.SrgsGrammar>命名空间。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-111">To programmatically build grammars that have multiple rules, or that need to make internal rule references, use the classes of the <xref:System.Speech.Recognition.SrgsGrammar> namespace.</span></span>  
  
 <span data-ttu-id="d3cd1-112">实例<xref:System.Speech.Recognition.GrammarBuilder>也可以通过从某些其他类隐式转换或通过组合获取<xref:System.Speech.Recognition.GrammarBuilder>与第二个对象包含的语法约束...</span><span class="sxs-lookup"><span data-stu-id="d3cd1-112">Instances of <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained by implicit conversions from certain other classes or by combining a  <xref:System.Speech.Recognition.GrammarBuilder> with a second object that contains constraints for a grammar..</span></span> <span data-ttu-id="d3cd1-113">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符和<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-113">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators and the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods.</span></span>  
  
 <span data-ttu-id="d3cd1-114">若要将规则添加到现有<xref:System.Speech.Recognition.GrammarBuilder>，使用<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>， <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>，和<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-114">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-115">使用包含具有相同的密钥名称重复语义元素或多个可以反复修改相同的语义元素的值的语义元素语音识别语法时，语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-115">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d3cd1-116">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-116">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d3cd1-117">若要帮助进行调试，<xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A>属性返回的当前状态<xref:System.Speech.Recognition.GrammarBuilder>作为字符串。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-117">To help with debugging, the <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> property returns the current status of the <xref:System.Speech.Recognition.GrammarBuilder> as a string.</span></span>  
  
 <span data-ttu-id="d3cd1-118">有关生成和使用语音识别语法的详细信息，请参阅[语音识别](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-118">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-119">下面的示例使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>对象来构造能够识别的两个短语，任一语法"使背景*colorChoice*"或"设置为背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d3cd1-119">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d3cd1-120">该示例使用<xref:System.Speech.Recognition.Choices>要创建的可接受的值的列表对象*colorChoice*从数组<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-120">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="d3cd1-121">A<xref:System.Speech.Recognition.Choices>对象是类似于`one-of`SRGS 规范中的元素和包含一组备用短语，其中的任何读出时可以被识别。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-121">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="d3cd1-122">此示例还使用<xref:System.Speech.Recognition.Choices>对象进行分组的两个数组<xref:System.Speech.Recognition.GrammarBuilder>分为的替代结果语法可以识别的短语对的对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-122">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="d3cd1-123">备用的词或短语是大多数语法的组成部分和<xref:System.Speech.Recognition.Choices>对象提供此功能使用的语法构造<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-123">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d3cd1-124">最后，该示例创建<xref:System.Speech.Recognition.Grammar>对象<xref:System.Speech.Recognition.GrammarBuilder>从构造<xref:System.Speech.Recognition.Choices>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-124">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Choices" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-125">初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-125">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-126">通过从其他类的隐式转换或通过组合，也可以获取此类的实例<xref:System.Speech.Recognition.GrammarBuilder>对象是否与从新到第二个对象<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-126">Instances of this class can also be obtained by implicit conversions from other classes or by combining a <xref:System.Speech.Recognition.GrammarBuilder> object with a second object to from a new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d3cd1-127">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-127">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods.</span></span>  
  
 <span data-ttu-id="d3cd1-128">若要将约束添加到现有<xref:System.Speech.Recognition.GrammarBuilder>，使用<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>， <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>，和<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>方法，与<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-128">To add constraints to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-129">使用包含具有相同的密钥名称重复语义元素或多个可以反复修改相同的语义元素的值的语义元素语音识别语法时，语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-129">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d3cd1-130">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-130">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d3cd1-131">有关生成和使用语音识别语法的详细信息，请参阅[语音识别](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-131">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-132">初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新的空实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-132">Initializes a new, empty instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-133">若要将规则添加到现有<xref:System.Speech.Recognition.GrammarBuilder>对象，请使用<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>， <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>，和<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>方法，与<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-133">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder> object, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-134">使用包含具有相同的密钥名称重复语义元素或多个可以反复修改相同的语义元素的值的语义元素语音识别语法时，语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-134">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d3cd1-135">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-135">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-136">下面的示例使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>对象来构造能够识别的两个短语，任一语法"使背景*colorChoice*"或"设置为背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d3cd1-136">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d3cd1-137">该示例使用<xref:System.Speech.Recognition.Choices>要创建的可接受的值的列表对象*colorChoice*从数组<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-137">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="d3cd1-138">A<xref:System.Speech.Recognition.Choices>对象是类似于`one-of`SRGS 规范中的元素和包含一组备用短语，其中的任何一个读出时可以被识别。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-138">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any one of which can be recognized when spoken.</span></span> <span data-ttu-id="d3cd1-139">此示例还使用<xref:System.Speech.Recognition.Choices>对象进行分组的两个数组<xref:System.Speech.Recognition.GrammarBuilder>分为的替代结果语法可以识别的短语对的对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-139">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="d3cd1-140">备用的词或短语是大多数语法的组成部分和<xref:System.Speech.Recognition.Choices>对象提供此功能使用的语法构造<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-140">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d3cd1-141">最后，该示例创建<xref:System.Speech.Recognition.Grammar>对象<xref:System.Speech.Recognition.GrammarBuilder>从构造<xref:System.Speech.Recognition.Choices>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-141">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  GrammarBuilder bothPhrases = new GrammarBuilder();  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  bothPhrases.Append(bothChoices);  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices">
          <span data-ttu-id="d3cd1-142">其他注意事项的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-142">The set of alternatives.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-143">从备选项的集合中初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-143">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a set of alternatives.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-144">有关生成包含的替代项语音识别语法的详细信息，请参阅[使用选项创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-144">For more information about building a speech recognition grammar that contains alternatives, see [Using Choices to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-145">下面的示例使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>对象来构造能够识别的两个短语，任一语法"使背景*colorChoice*"或"设置为背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d3cd1-145">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d3cd1-146">该示例使用<xref:System.Speech.Recognition.Choices>要创建的可接受的值的列表对象*colorChoice*从数组<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-146">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="d3cd1-147">A<xref:System.Speech.Recognition.Choices>对象是类似于`one-of`SRGS 规范中的元素和包含一组备用短语，其中的任何读出时可以被识别。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-147">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="d3cd1-148">此示例还使用<xref:System.Speech.Recognition.Choices>对象进行分组的两个数组<xref:System.Speech.Recognition.GrammarBuilder>分为的替代结果语法可以识别的短语对的对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-148">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="d3cd1-149">备用的词或短语是大多数语法的组成部分和<xref:System.Speech.Recognition.Choices>对象提供此功能使用的语法构造<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-149">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d3cd1-150">最后，该示例创建<xref:System.Speech.Recognition.Grammar>对象<xref:System.Speech.Recognition.GrammarBuilder>从构造<xref:System.Speech.Recognition.Choices>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-150">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="d3cd1-151">语义键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-151">The semantic key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-152">初始化语义钥中的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-152">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-153">当你创建<xref:System.Speech.Recognition.GrammarBuilder>实例从<xref:System.Speech.Recognition.SemanticResultValue>对象，将语义信息添加到可以识别结果中返回的语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-153">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="d3cd1-154">你可以访问在识别结果中使用的语义信息<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>，这是可用的处理程序中`SpeechRecognized`事件。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-154">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="d3cd1-155">如果<xref:System.Speech.Recognition.GrammarBuilder>定义<xref:System.Speech.Recognition.SemanticResultKey>，这可以用于检索与键关联的识别结果中的语义信息。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-155">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="d3cd1-156">请参阅示例<xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>，并还会看到<xref:System.Speech.Recognition.SemanticResultValue>和<xref:System.Speech.Recognition.SemanticResultKey>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-156">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-157">构造时<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-157">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-158">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-158">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-159">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-159">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-160">下面的示例创建可以识别的两个短语语音识别语法"使背景*colorChoice*"和"设置为背景*colorChoice*"，其中*colorChoice*从一组颜色选择。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-160">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="d3cd1-161">语法允许朗读的多个颜色名称，任何用户，并识别的颜色名称的语义信息返回到应用程序。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-161">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="d3cd1-162">该示例使用单个<xref:System.Speech.Recognition.SemanticResultKey>与可以检索<xref:System.Speech.Recognition.SemanticValue>这是由用户说出的颜色关联。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-162">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="d3cd1-163">例如，如果输入包含这个短语:"为红色的一组后台"识别结果包含"#FF0000"，后者可以检索使用的处理程序的语义值`SpeechRecognized`事件。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-163">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="d3cd1-164">该示例使用<xref:System.String>， <xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.SemanticResultValue>，和<xref:System.Speech.Recognition.GrammarBuilder>对象以生成所有中最后一个包含约束<xref:System.Speech.Recognition.GrammarBuilder>对象， `bothPhrases`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-164">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="d3cd1-165">最后，该示例构造<xref:System.Speech.Recognition.Grammar>对象从已完成<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-165">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices object for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the Grammar object from the GrammarBuilder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d3cd1-166">语义值或名称/值对。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-166">The semantic value or name/value pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-167">初始化语义值中的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-167">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-168">当你创建<xref:System.Speech.Recognition.GrammarBuilder>实例从<xref:System.Speech.Recognition.SemanticResultValue>对象，将语义信息添加到可以识别结果中返回的语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-168">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="d3cd1-169">你可以访问在识别结果中使用的语义信息<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>，这是可用的处理程序中`SpeechRecognized`事件。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-169">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="d3cd1-170">如果<xref:System.Speech.Recognition.GrammarBuilder>定义<xref:System.Speech.Recognition.SemanticResultKey>，这可以用于检索与键关联的识别结果中的语义信息。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-170">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="d3cd1-171">请参阅示例<xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>，并还会看到<xref:System.Speech.Recognition.SemanticResultValue>和<xref:System.Speech.Recognition.SemanticResultKey>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-171">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-172">构造时<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-172">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-173">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-173">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-174">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-174">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-175">下面的示例创建可以识别的两个短语语音识别语法"使背景*colorChoice*"和"设置为背景*colorChoice*"，其中*colorChoice*从一组颜色选择。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-175">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="d3cd1-176">语法允许朗读的多个颜色名称，任何用户，并识别的颜色名称的语义信息返回到应用程序。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-176">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="d3cd1-177">该示例使用单个<xref:System.Speech.Recognition.SemanticResultKey>与可以检索<xref:System.Speech.Recognition.SemanticValue>这是由用户说出的颜色关联。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-177">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="d3cd1-178">例如，如果输入包含这个短语:"为红色的一组后台"识别结果包含"#FF0000"，后者可以检索使用的处理程序的语义值`SpeechRecognized`事件。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-178">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="d3cd1-179">该示例使用<xref:System.String>， <xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.SemanticResultValue>，和<xref:System.Speech.Recognition.GrammarBuilder>对象以生成所有中最后一个包含约束<xref:System.Speech.Recognition.GrammarBuilder>对象， `bothPhrases`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-179">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="d3cd1-180">最后，该示例构造<xref:System.Speech.Recognition.Grammar>对象从已完成<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-180">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the grammar from the grammar builder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d3cd1-181">字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-181">The sequence of words.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-182">从字序列中初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-182">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a sequence of words.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-183">短语表示语音识别语法可以识别的精确的口头的短语。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-183">The phrase represents an exact spoken phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="d3cd1-184">有关生成包含字符串语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-184">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-185">下面的示例使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>对象来构造能够识别的两个短语，任一语法"使背景*colorChoice*"或"设置为背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d3cd1-185">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d3cd1-186">创建可接受的值的列表之后*colorChoice*使用<xref:System.Speech.Recognition.Choices>对象，该示例初始化两个<xref:System.Speech.Recognition.GrammarBuilder>对象，`makePhrase`和`setPhrase`，使用字符串作为自变量。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-186">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using a string as an argument.</span></span>  
  
 <span data-ttu-id="d3cd1-187">最后，该示例创建<xref:System.Speech.Recognition.Grammar>对象<xref:System.Speech.Recognition.Choices>对象强制转换为<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-187">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d3cd1-188">字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-188">The sequence of words.</span>
          </span>
        </param>
        <param name="subsetMatchingCriteria">
          <span data-ttu-id="d3cd1-189">用于识别短语的语法识别语法的匹配模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-189">The matching mode the speech recognition grammar uses to recognize the phrase.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-190">根据字序列的子集初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-190">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class for a subset of a sequence of words.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-191">`phrase`参数表示语音识别语法可以识别的短语。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-191">The `phrase` parameter represents the phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="d3cd1-192">`subsetMatchingMode`参数指定要朗读若要实现的整个短语成功识别的短语的子集。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-192">The `subsetMatchingMode` parameter specifies a subset of the phrase that can be spoken to achieve successful recognition of the entire phrase.</span></span> <span data-ttu-id="d3cd1-193">可以使用此语法创建与具有较长的名称，而无需用户说出整个名称，以匹配项的项的列表。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-193">You can use this to create a grammar with a list of entries that have long names, without requiring users to speak an entire name to match an item.</span></span>  
  
 <span data-ttu-id="d3cd1-194">有关匹配的模式的详细信息，请参阅<xref:System.Speech.Recognition.SubsetMatchingMode>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-194">For more information about the matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode>.</span></span> <span data-ttu-id="d3cd1-195">有关生成包含字符串语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-195">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-196">下面的示例创建每个语音识别语法<xref:System.Speech.Recognition.SubsetMatchingMode>值和匹配的模式语法之间进行选择的语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-196">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value and a grammar for choosing between the matching mode grammars.</span></span> <span data-ttu-id="d3cd1-197">如果值`phrase`是"一个两个三个四个五个六个七个"，然后子序列语法识别输入"两个三个四个"，但不是输入"一个三个五个"。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-197">If the value of `phrase` is "one two three four five six seven", then the Subsequence grammar recognizes the input "two three four", but not the input "one three five".</span></span> <span data-ttu-id="d3cd1-198">但是，排序子集语法认识到这两个这些输入。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-198">However, the Ordered Subset grammar recognizes both of these inputs.</span></span>  
  
```csharp  
  
private static IEnumerable<Grammar>  
  CreateMatchingModeGrammars(string phrase)  
{  
  List<Grammar> grammars = new List<Grammar>(5);  
  
  Choices modeChoice = new Choices();  
  Type enumType = typeof(SubsetMatchingMode);  
  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  
  {  
    string modeName = Enum.GetName(enumType, mode);  
    modeName = BreakAtCaps(modeName);  
  
    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  
    Grammar modeGrammar = new Grammar(builder);  
    modeGrammar.Name = modeName;  
    modeGrammar.Enabled = false;  
    grammars.Add(modeGrammar);  
  
    modeChoice.Add(modeName);  
  }  
  
  Grammar choiceGrammar = new Grammar(modeChoice);  
  choiceGrammar.Name = "choice";  
  grammars.Add(choiceGrammar);  
  
  return grammars;  
}  
  
// Insert spaces preceding each uppercase letter in a string.   
private static string BreakAtCaps(string item)  
{  
  if (item == null || item.Length == 0)  
  {  
    return item;  
  }  
  
  StringBuilder sb = new StringBuilder(item[0].ToString());  
  for (int i = 1; i < item.Length; i++)  
  {  
    char c = item[i];  
    if (char.IsUpper(c))  
    {  
      sb.Append(" ");  
    }  
    sb.Append(c);  
  }  
  
  return sb.ToString();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SubsetMatchingMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d3cd1-199">被重复元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-199">The repeated element.</span>
          </span>
        </param>
        <param name="minRepeat">
          <span data-ttu-id="d3cd1-200">必须发生输入匹配 <c>builder</c> 定义的元素的最小次数才能构成匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-200">The minimum number of times that input matching the element defined by <c>builder</c> must occur to constitute a match.</span>
          </span>
        </param>
        <param name="maxRepeat">
          <span data-ttu-id="d3cd1-201">可能发生输入匹配 <c>builder</c> 定义的元素的最大次数以构成匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-201">The maximum number of times that input matching the element defined by <c>builder</c> can occur to constitute a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-202">从重复元素中初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-202">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a repeated element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-203">如果值`minRepeat`为 0，则新<xref:System.Speech.Recognition.GrammarBuilder>表示可选元素。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-203">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="d3cd1-204">值`minRepeat`必须大于或等于 0 且小于或等于的值`maxRepeat`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-204">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-205">当指定的重复<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-205">When you specify repeats for <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-206">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-206">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-207">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-207">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-208">下面的示例创建排序顺序，比萨语音识别的语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-208">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="d3cd1-209">它开头后跟一至四个浇头的可选，打开短语并关闭 word"比萨"。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-209">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object from a string array of alternative toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d3cd1-210">重复的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-210">The repeated sequence of words.</span>
          </span>
        </param>
        <param name="minRepeat">
          <span data-ttu-id="d3cd1-211">必须发生构成匹配的输入匹配的短语的最小次数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-211">The minimum number of times that input matching the phrase must occur to constitute a match.</span>
          </span>
        </param>
        <param name="maxRepeat">
          <span data-ttu-id="d3cd1-212">可能发生构成匹配的输入匹配的短语的最大次数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-212">The maximum number of times that input matching the phrase can occur to constitute a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-213">初始化来自 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 中的单词的序列的 <see cref="T:System.String" /> 类的新实例并指定 <see cref="T:System.String" /> 可以重复使用的次数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-213">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from the sequence of words in a <see cref="T:System.String" /> and specifies how many times the <see cref="T:System.String" /> can be repeated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-214">如果值`minRepeat`为 0，则新<xref:System.Speech.Recognition.GrammarBuilder>表示可选元素。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-214">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="d3cd1-215">值`minRepeat`必须大于或等于 0 且小于或等于的值`maxRepeat`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-215">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span> <span data-ttu-id="d3cd1-216">有关生成包含字符串语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-216">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-217">下面的示例创建排序顺序，比萨语音识别的语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-217">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="d3cd1-218">它开头后跟一至四个浇头的可选，打开短语并关闭 word"比萨"。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-218">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-219">创建包含两个语法元素序列的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-219">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-220">静态<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>方法提供了另一种机制，依据你可以组合各种类型创建多样性和使用生成的语法中的灵活性<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-220">The static <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods provide another mechanism by which you can combine various types to create diversity and flexibility in grammars built with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d3cd1-221">这些方法对应于静态<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>方法，还定义了<xref:System.Speech.Recognition.GrammarBuilder>类。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-221">These methods correspond to the static <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods, which are also defined on the <xref:System.Speech.Recognition.GrammarBuilder> class.</span></span> <span data-ttu-id="d3cd1-222">参数的顺序确定在新的元素的顺序<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-222">The order of the parameters determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d3cd1-223">A<xref:System.Speech.Recognition.GrammarBuilder>也可以从获取<xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.SemanticResultValue>，和[字符串](http://go.microsoft.com/fwlink/?LinkId=159733)对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-223">A <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained from <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and [String](http://go.microsoft.com/fwlink/?LinkId=159733) objects.</span></span> <span data-ttu-id="d3cd1-224">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-224">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-225">使用包含具有相同的密钥名称重复语义元素或多个可以反复修改相同的语义元素的值的语义元素语音识别语法时，语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-225">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d3cd1-226">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-226">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d3cd1-227">有关生成和使用语音识别语法的详细信息，请参阅[语音识别](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-227">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices">
          <span data-ttu-id="d3cd1-228">第一个语法元素，表示一组替代项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-228">The first grammar element, which represents a set of alternatives.</span>
          </span>
        </param>
        <param name="builder">
          <span data-ttu-id="d3cd1-229">第二个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-229">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-230">创建一个新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含一个 <see cref="T:System.Speech.Recognition.Choices" /> 对象以及跟随在此对象后面的一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-230">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-231">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="choices" /> 元素后面跟随一个 <paramref name="builder" /> 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-231">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> element followed by the <paramref name="builder" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-232"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类隐式转换：</span><span class="sxs-lookup"><span data-stu-id="d3cd1-232"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-233">此方法接受上面所列对象`builder`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-233">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="d3cd1-234">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-234">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-235">在合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-235">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-236">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-236">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-237">有关生成包含语义信息语音识别语法的详细信息，请参阅[GrammarBuilder 语法添加语义](https://msdn.microsoft.com/library/hh361581.aspx)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-237">For more information about building a speech recognition grammar that contains semantic information, see [Add Semantics to a GrammarBuilder Grammar](https://msdn.microsoft.com/library/hh361581.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d3cd1-238">第一个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-238">The first grammar element.</span>
          </span>
        </param>
        <param name="choices">
          <span data-ttu-id="d3cd1-239">第一个表示替换系列的语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-239">The second grammar element, which represents a set of alternatives.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-240">创建一个新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象以及跟随在此对象后面的一个 <see cref="T:System.Speech.Recognition.Choices" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-240">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a <see cref="T:System.Speech.Recognition.Choices" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-241">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="builder" /> 元素后面跟随一个 <paramref name="choices" /> 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-241">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="choices" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-242"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类隐式转换：</span><span class="sxs-lookup"><span data-stu-id="d3cd1-242"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-243">此方法接受上面所列对象`builder`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-243">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="d3cd1-244">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-244">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-245">在合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例与其他语法元素，请确保你避免使用同一密钥名称或多个语义元素创建重复的语义元素可以反复修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-245">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-246">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-246">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-247">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-247">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-248">下面的示例创建可以识别的两个短语语音识别语法"使背景*颜色*"和"设置为背景*颜色*"，其中*颜色*从一组颜色选择。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-248">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d3cd1-249">各种类型用于生成最终的语法，如[字符串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-249">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="d3cd1-250">调用中的显式强制转换运算符<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>方法都是可选的。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-250">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1">
          <span data-ttu-id="d3cd1-251">第一个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-251">The first grammar element.</span>
          </span>
        </param>
        <param name="builder2">
          <span data-ttu-id="d3cd1-252">第二个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-252">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-253">创建包含两个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象序列的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-253">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-254">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="builder1" /> 元素后面跟随一个 <paramref name="builder2" /> 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-254">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> element followed by the <paramref name="builder2" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-255"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类隐式转换：</span><span class="sxs-lookup"><span data-stu-id="d3cd1-255"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-256">此方法接受上面所列对象`builder1`或`builder2`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-256">This method accepts the objects listed above for the `builder1` or `builder2` parameter.</span></span>  
  
 <span data-ttu-id="d3cd1-257">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-257">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-258">在合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例与其他语法元素，请确保你避免使用同一密钥名称或多个语义元素创建重复的语义元素可以反复修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-258">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-259">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-259">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-260">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-260">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-261">下面的示例创建可以识别的两个短语语音识别语法"使背景*颜色*"和"设置为背景*颜色*"，其中*颜色*从一组颜色选择。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-261">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d3cd1-262">各种类型用于生成最终的语法，如[字符串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-262">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="d3cd1-263">调用中的显式强制转换运算符<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>方法都是可选的。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-263">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d3cd1-264">第一个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-264">The first grammar element.</span>
          </span>
        </param>
        <param name="phrase">
          <span data-ttu-id="d3cd1-265">第二个表示字序列的语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-265">The second grammar element, which represents a sequence of words.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-266">创建包含后跟一个短语的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-266">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a phrase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-267">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="builder" /> 元素后面跟随一个 <paramref name="phrase" /> 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-267">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="phrase" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-268"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类隐式转换：</span><span class="sxs-lookup"><span data-stu-id="d3cd1-268"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-269">此方法接受上面所列对象`builder`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-269">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="d3cd1-270">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-270">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-271">下面的示例创建可以识别的两个短语语音识别语法"使背景*颜色*"和"设置为背景*颜色*"，其中*颜色*从一组颜色选择。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-271">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d3cd1-272">各种类型用于生成最终的语法，如[字符串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-272">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="d3cd1-273">调用中的显式强制转换运算符<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>方法都是可选的。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-273">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d3cd1-274">第一个表示字序列的语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-274">The first grammar element, which represents a sequence of words.</span>
          </span>
        </param>
        <param name="builder">
          <span data-ttu-id="d3cd1-275">第二个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-275">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-276">创建包含 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象后跟的一个短语的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-276">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-277">一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，顺序为 <paramref name="phrase" /> 元素后面跟随一个 <paramref name="builder" /> 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-277">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> element followed by the <paramref name="builder" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-278"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类隐式转换：</span><span class="sxs-lookup"><span data-stu-id="d3cd1-278"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-279">此方法接受上面所列对象`builder`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-279">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="d3cd1-280">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-280">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-281">下面的示例创建可以识别的两个短语语音识别语法"使背景*颜色*"和"设置为背景*颜色*"，其中*颜色*从一组颜色选择。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-281">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d3cd1-282">各种类型用于生成最终的语法，如[字符串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-282">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="d3cd1-283">调用中的显式强制转换运算符<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>方法都是可选的。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-283">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-284">为语法元素的当前顺序追加语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-284">Appends a grammar element to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-285">使用这些方法来将语法元素附加到现有<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-285">Use these methods to append grammar elements to an existing <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d3cd1-286">在创建语法元素时，你可以将它们追加到现有的生成器渐进式开发语音识别语法的约束。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-286">As you create grammar elements, you can append them to the existing builder to progressively develop the constraints for a speech recognition grammar.</span></span> <span data-ttu-id="d3cd1-287">每个元素添加到元素的当前序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-287">Each element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="d3cd1-288">此方法具有重载，以便追加<xref:System.Speech.Recognition.GrammarBuilder>， <xref:System.String>， <xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>，和<xref:System.Speech.Recognition.SemanticResultValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-288">This method has overloads for appending <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, and <xref:System.Speech.Recognition.SemanticResultValue> objects.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-289">使用包含具有相同的密钥名称重复语义元素或多个可以反复修改相同的语义元素的值的语义元素语音识别语法时，语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-289">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d3cd1-290">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-290">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d3cd1-291">有关生成和使用语音识别语法的详细信息，请参阅[语音识别](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-291">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices">
          <span data-ttu-id="d3cd1-292">要追加的替代组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-292">The set of alternatives to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-293">为语法元素的当前顺序追加替代项集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-293">Appends a set of alternatives to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-294">`alternateChoices` 添加到元素的当前序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-294">`alternateChoices` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-295">当追加<xref:System.Speech.Recognition.Choices>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个无法重复的语义元素创建重复的语义元素修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-295">When you append <xref:System.Speech.Recognition.Choices> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-296">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-296">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-297">有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-297">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-298">下面的示例创建如"调用 James 在工作"和"在其手机上的调用 Anne"短语语音识别语法其中 word"电话"是可选的。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-298">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="d3cd1-299">示例重点介绍使用<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-299">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d3cd1-300">追加的语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-300">The grammar element to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-301">为语法元素的当前顺序追加语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-301">Appends a grammar element to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-302">`builder` 添加到当前的语法元素序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-302">`builder` is added to the end of the current sequence of grammar elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d3cd1-303">当追加<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个无法重复的语义元素创建重复的语义元素修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-303">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-304">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-304">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-305">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-305">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-306">下面的示例创建如"调用 James 在工作"和"在其手机上的调用 Anne"短语语音识别语法其中 word"电话"是可选的。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-306">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="d3cd1-307"><xref:System.Speech.Recognition.GrammarBuilder> 和<xref:System.Speech.Recognition.Choices>对象用于构造语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-307"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="d3cd1-308">示例重点介绍使用<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-308">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="d3cd1-309">要转换的语义键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-309">The semantic key to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-310">为语法元素的当前顺序追加语义密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-310">Appends a semantic key to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-311">`key` 添加到元素的当前序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-311">`key` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-312">当追加<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-312">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-313">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-313">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-314">有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-314">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-315">下面的示例是用于选择为航班的起点和目标城市的控制台应用程序的一部分。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-315">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="d3cd1-316">应用程序识别短语，例如"我想亲自从迈阿密前往芝加哥。"</span><span class="sxs-lookup"><span data-stu-id="d3cd1-316">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="d3cd1-317">处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件使用<xref:System.Speech.Recognition.SemanticResultKey>提取中指定的机场代码<xref:System.Speech.Recognition.SemanticResultValue>对源和目标个城市。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-317">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a Choices object and add  cities and airport codes  
        // using SemanticResultValue objects.  
        Choices cities = new Choices();  
        cities.Add(new SemanticResultValue("Chicago", "ORD"));  
        cities.Add(new SemanticResultValue("Boston", "BOS"));  
        cities.Add(new SemanticResultValue("Miami", "MIA"));  
        cities.Add(new SemanticResultValue("Dallas", "DFW"));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d3cd1-318">要追加的语义值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-318">The semantic value to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-319">为语法元素的当前顺序追加语义值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-319">Appends a semantic value to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-320">`value` 添加到元素的当前序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-320">`value` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-321">当追加<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-321">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-322">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-322">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-323">有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-323">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-324">下面的示例是用于选择为航班的起点和目标城市的控制台应用程序的一部分。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-324">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="d3cd1-325">应用程序识别短语，例如"我想亲自从迈阿密前往芝加哥。"</span><span class="sxs-lookup"><span data-stu-id="d3cd1-325">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="d3cd1-326">处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件使用<xref:System.Speech.Recognition.SemanticResultKey>提取中指定的机场代码<xref:System.Speech.Recognition.SemanticResultValue>对源和目标个城市。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-326">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create GrammarBuilder objects and append SemanticResultValue objects   
        // that contain cities and airport codes.  
  
        GrammarBuilder chicago = new GrammarBuilder();  
        chicago.Append(new SemanticResultValue("Chicago", "ORD"));  
  
        GrammarBuilder boston = new GrammarBuilder();  
        boston.Append(new SemanticResultValue("Boston", "BOS"));  
  
        GrammarBuilder miami = new GrammarBuilder();  
        miami.Append(new SemanticResultValue("Miami", "MIA"));  
  
        GrammarBuilder dallas = new GrammarBuilder();  
        dallas.Append(new SemanticResultValue("Dallas", "DFW"));  
  
        // Create a Choices object and add the cities using implicit conversion from   
        // SemanticResultValue to GrammarBuilder.  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d3cd1-327">追加的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-327">The sequence of words to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-328">为语法元素的当前顺序追加短语。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-328">Appends a phrase to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-329">`phrase` 添加到元素的当前序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-329">`phrase` is added to the end of the current sequence of elements.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d3cd1-330">追加的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-330">The sequence of words to append.</span>
          </span>
        </param>
        <param name="subsetMatchingCriteria">
          <span data-ttu-id="d3cd1-331">使用的语法识别该声明匹配的模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-331">The matching mode the grammar uses to recognize the phrase.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-332">为语法元素的当前顺序追加一个短语子集元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-332">Appends an element for a subset of a phrase to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-333">该子集元素已添加到元素的当前序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-333">The subset element is added to the end of the current sequence of elements.</span></span> <span data-ttu-id="d3cd1-334">有关生成使用字符串语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-334">For more information about building a speech recognition grammar using strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
 <span data-ttu-id="d3cd1-335">使用匹配模式的子集的详细信息，请参阅<xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-335">For detailed information on the use of subset matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-336">下面的示例创建每个语音识别语法<xref:System.Speech.Recognition.SubsetMatchingMode>值。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-336">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value.</span></span> <span data-ttu-id="d3cd1-337">例如，生成的语法`OrderedSubset`识别短语，"三个四个五个"和"一个三个五个"，和语法`Subsequence`识别短语"三个四个五个"，但这个短语:"一个三个五个"。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-337">For example, the generated grammar `OrderedSubset` recognizes the phrases, "three four five" and "one three five", and the grammar `Subsequence` recognizes the phrase "three four five", but not the phrase, "one three five".</span></span>  
  
```csharp  
  
private Grammar[] CreateSubsetMatchTest()  
{  
  List<Grammar> grammars = new List<Grammar>(4);  
  
  string phrase = "one two three four five six";  
  foreach (SubsetMatchingMode mode in  
    Enum.GetValues(typeof(SubsetMatchingMode)))  
  {  
    GrammarBuilder gb = new GrammarBuilder();  
    gb.Append(phrase, mode);  
  
    Grammar grammar = new Grammar(gb);  
    grammar.Name = mode.ToString();  
    grammars.Add(grammar);  
  }  
  
  return grammars.ToArray();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d3cd1-338">追加的重复语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-338">The repeated grammar element to append.</span>
          </span>
        </param>
        <param name="minRepeat">
          <span data-ttu-id="d3cd1-339">必须发生输入匹配 <c>builder</c> 定义的元素的最小次数才能构成匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-339">The minimum number of times that input matching the element defined by <c>builder</c> must occur to constitute a match.</span>
          </span>
        </param>
        <param name="maxRepeat">
          <span data-ttu-id="d3cd1-340">可能发生输入匹配 <c>builder</c> 定义的元素的最大次数以构成匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-340">The maximum number of times that input matching the element defined by <c>builder</c> can occur to constitute a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-341">为语法元素的当前顺序追加重复的语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-341">Appends a repeated grammar element to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-342">值`minRepeat`必须大于或等于 0 且小于或等于的值`maxRepeat`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-342">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-343">当追加<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个无法重复的语义元素创建重复的语义元素修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-343">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-344">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-344">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-345">有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-345">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-346">下面的示例创建如"调用 James 在工作"和"在其手机上的调用 Anne"短语语音识别语法其中 word"电话"是可选的。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-346">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="d3cd1-347"><xref:System.Speech.Recognition.GrammarBuilder> 和<xref:System.Speech.Recognition.Choices>对象用于构造语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-347"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="d3cd1-348">示例重点介绍使用<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-348">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d3cd1-349">追加的重复的字符序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-349">The repeated sequence of words to append.</span>
          </span>
        </param>
        <param name="minRepeat">
          <span data-ttu-id="d3cd1-350">必须发生输入匹配 <c>phrase</c> 的最小次数才能构成匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-350">The minimum number of times that input matching <c>phrase</c> must occur to constitute a match.</span>
          </span>
        </param>
        <param name="maxRepeat">
          <span data-ttu-id="d3cd1-351">可能发生输入匹配 <c>phrase</c> 的最大次数以构成匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-351">The maximum number of times that input matching <c>phrase</c> can occur to constitute a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-352">为语法元素的当前顺序追加重复的短语。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-352">Appends a repeated phrase to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-353">值`minRepeat`必须大于或等于 0 且小于或等于的值`maxRepeat`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-353">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-354">下面的示例创建如"调用 James 在工作"和"在其手机上的调用 Anne"短语语音识别语法其中 word"电话"是可选的。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-354">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="d3cd1-355"><xref:System.Speech.Recognition.GrammarBuilder> 和<xref:System.Speech.Recognition.Choices>对象用于构造语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-355"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="d3cd1-356">示例重点介绍使用<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-356">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendDictation">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-357">为语法元素的当前顺序追加听写语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-357">Appends a dictation grammar to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-358"><xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>方法，你可以将作为一种规则追加听写语法<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-358">The <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> methods allow you to append a dictation grammar as a rule to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d3cd1-359">听写语法的详细信息，请参阅<xref:System.Speech.Recognition.DictationGrammar>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-359">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-360">为语法元素的当前顺序追加默认的听写语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-360">Appends the default dictation grammar to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-361">听写语法的详细信息，请参阅<xref:System.Speech.Recognition.DictationGrammar>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-361">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-362">下面的示例创建包含听写语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-362">The following example creates a speech recognition grammar that incorporates dictation.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation();  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation(string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation (category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation(System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">
          <span data-ttu-id="d3cd1-363">附加口述语法的类别。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-363">The category of the dictation grammar to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-364">为语法元素的当前顺序追加指定的听写语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-364">Appends the specified dictation grammar to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-365">若要使用的拼写听写语法，设置`category`到`spelling`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-365">To use the spelling dictation grammar, set `category` to `spelling`.</span></span>  
  
 <span data-ttu-id="d3cd1-366">听写语法的详细信息，请参阅<xref:System.Speech.Recognition.DictationGrammar>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-366">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-367">下面的示例创建合并的拼写听写语法规则语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-367">The following example creates a speech recognition grammar that incorporates the spelling dictation grammar rules.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation("spelling");  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendRuleReference">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-368">为语法元素的当前顺序追加语法文件或语法规则。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-368">Appends a grammar file or a grammar rule to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-369"><xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>方法可以追加语法文件或从文件的语法规则。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-369">The <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> methods can append a grammar file or a grammar rule from a file.</span></span> <span data-ttu-id="d3cd1-370">这些方法允许应用程序以利用预部署或公开提供的语法规则。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-370">These methods allow applications to make use of pre-deployed or publicly available grammar rules.</span></span> <span data-ttu-id="d3cd1-371">应用程序必须具有读取访问权限指定的语法文件的位置。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-371">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="d3cd1-372">这些方法可从以下格式读取语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-372">These methods can read a speech recognition grammar from the following formats.</span></span>  
  
-   <span data-ttu-id="d3cd1-373">符合 W3C 的 XML 格式文件[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)</span><span class="sxs-lookup"><span data-stu-id="d3cd1-373">XML-format files that conform to the W3C [Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)</span></span>  
  
-   <span data-ttu-id="d3cd1-374">符合 Microsoft 语音识别语法二进制格式 （.cfg 文件扩展名） 的二进制文件</span><span class="sxs-lookup"><span data-stu-id="d3cd1-374">Binary files that conform to the Microsoft Speech Recognition Grammar Binary Format (.cfg file extension)</span></span>  
  
 <span data-ttu-id="d3cd1-375">编译 XML 格式 SRGS.cfg 扩展名的二进制语法文件的语法文件可减少搜索匹配项，使用的时间尤其是在语法需要大量的单词和短语的识别。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-375">Compiling an XML-format SRGS grammar file to a binary grammar file with the .cfg extension can reduce the time consumed by searches for a match, especially if the grammar requires recognition of a large number of words and phrases.</span></span> <span data-ttu-id="d3cd1-376">有关编译为 CFG 的二进制格式的 SRGS 语法的信息，请参阅<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-376">For information about compiling SRGS grammars to the CFG binary format, see <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="d3cd1-377">在一个支持的布局描述语音识别语法的路径通用资源标识符（URI）的文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-377">The path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-378">为语法元素的当前顺序追加语法定义文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-378">Appends a grammar definition file to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-379">通过提供的 URI`path`参数可能为本地或远程。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-379">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="d3cd1-380">应用程序必须具有读取访问权限指定的语法文件的位置。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-380">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="d3cd1-381">W3C 语音识别语法规范 (SRGS) 表示可以定义根规则。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-381">A W3C Speech Recognition Grammar Specification (SRGS) representation can define a root rule.</span></span> <span data-ttu-id="d3cd1-382">此方法将追加的语法，其根规则，语法元素的当前序列开头。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-382">This method appends the grammar, beginning with its root rule, to the current sequence of grammar elements.</span></span> <span data-ttu-id="d3cd1-383">若要将追加指定的语法规则，请使用<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-383">To append a specific grammar rule, use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-384">下面的 C# 示例创建使用名为的规则语音识别语法`Cities`在本地 SRGS 文件中，cities.grxml。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-384">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="d3cd1-385">下面的 C# 代码示例显示 cities.grxml 文件的内容。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-385">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar1()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.AppendRuleReference("file://c:/temp/cities.grxml");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 1";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-16" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path, string rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path, string rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String, rule As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path, System::String ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="rule" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="d3cd1-386">在一个支持的布局描述语音识别语法的路径通用资源标识符（URI）的文件路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-386">The file path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span>
          </span>
        </param>
        <param name="rule">
          <span data-ttu-id="d3cd1-387">规则的追加、或追加语法文件的默认根规则的标识符 <see langword="null" /> 。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-387">The identifier of the rule to append, or <see langword="null" /> to append the default root rule of the grammar file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-388">为语法元素的当前顺序追加指定的语法定义文件规则。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-388">Appends the specified rule of a grammar definition file to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-389">通过提供的 URI`path`参数可能为本地或远程。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-389">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="d3cd1-390">应用程序必须具有读取访问权限指定的语法文件的位置。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-390">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="d3cd1-391">你可以使用使用<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>方法要追加其根规则开头的语法文件。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-391">You can use the use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method to append a grammar file beginning with its root rule.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-392">下面的 C# 示例创建使用名为的规则语音识别语法`Cities`在本地 SRGS 文件中，cities.grxml。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-392">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="d3cd1-393">下面的 C# 代码示例显示 cities.grxml 文件的内容。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-393">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar2()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("Does");  
  builder.AppendRuleReference(@"c:\temp\cities.grxml", "Cities");  
  builder.Append("have a shuttle");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendWildcard">
      <MemberSignature Language="C#" Value="public void AppendWildcard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendWildcard() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendWildcard ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendWildcard();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-394">为语法元素的当前顺序追加与任何输入匹配的识别语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-394">Appends a recognition grammar element that matches any input to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-395">通配符元素添加到元素的当前序列的末尾。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-395">The wildcard element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="d3cd1-396">通配符元素都与匹配任何说出的词语。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-396">The wildcard element matches any spoken word.</span></span> <span data-ttu-id="d3cd1-397">它不匹配背景噪音或静默。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-397">It does not match background noise or silence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-398">下面的示例创建接受密码输入作为通配符语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-398">The following example creates a grammar that accepts password input as a wildcard.</span></span> <span data-ttu-id="d3cd1-399">该示例将附加<xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType>语法，用于验证的密码输入的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-399">The example attaches a <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> event handler to the grammar that validates the password input.</span></span>  
  
```csharp  
private Grammar CreatePasswordGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey passwordKey =  
    new SemanticResultKey("Password", wildcardBuilder);  
  
  GrammarBuilder passwordBuilder =  
    new GrammarBuilder("My Password is");  
  passwordBuilder.Append(passwordKey);  
  
  Grammar passwordGrammar = new Grammar(passwordBuilder);  
  passwordGrammar.Name = "Password input";  
  
  passwordGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      PasswordInputHandler);  
  
  return passwordGrammar;  
}  
  
// Handle the SpeechRecognized event for the password grammar.  
private void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Password"))  
  {  
    RecognizedAudio passwordAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    if (IsValidPassword(passwordAudio))  
    {  
      Console.WriteLine("Password accepted.");  
  
      // Add code to handle a valid password here.  
    }  
    else  
    {  
      Console.WriteLine("Invalid password.");  
  
      // Add code to handle an invalid password here.  
    }  
  }  
}  
  
// Validate the password input.   
private bool IsValidPassword(RecognizedAudio passwordAudio)  
{  
  Console.WriteLine("Validating password.");  
  
  // Add password validation code here.  
  
  return false;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-400">获取或设置语音识别语法的区域性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-400">Gets or sets the culture of the speech recognition grammar.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d3cd1-401">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的区域性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-401">The culture of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
          <span data-ttu-id="d3cd1-402">区域性是执行线程的<see cref="P:System.Threading.Thread.CurrentUICulture" />属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-402">The default is the executing thread's <see cref="P:System.Threading.Thread.CurrentUICulture" /> property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-403"><xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数创建<xref:System.Speech.Recognition.Grammar>可由语音识别器的相应的区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-403">The <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor creates a <xref:System.Speech.Recognition.Grammar> object that can be used by a speech recognizer of the corresponding culture.</span></span> <span data-ttu-id="d3cd1-404">仅<xref:System.Speech.Recognition.GrammarBuilder.Culture%2A>属性<xref:System.Speech.Recognition.GrammarBuilder>提供如语法构造函数的参数用于设置生成的语音识别语法的区域性。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-404">Only the <xref:System.Speech.Recognition.GrammarBuilder.Culture%2A> property of the <xref:System.Speech.Recognition.GrammarBuilder> that is provided as the parameter to the Grammar constructor is used to set the culture of the resulting speech recognition grammar.</span></span>  
  
 <span data-ttu-id="d3cd1-405">Microsoft Windows 和 System.Speech API 接受所有有效的语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-405">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="d3cd1-406">若要执行使用中指定的语言的语音识别`Culture`属性、 语音识别引擎支持，必须安装语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-406">To perform speech recognition using the language specified in the `Culture` property, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="d3cd1-407">随 Microsoft Windows 7 的语音识别引擎使用以下语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-407">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="d3cd1-408">en GB。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-408">en-GB.</span></span> <span data-ttu-id="d3cd1-409">英语 （英国）</span><span class="sxs-lookup"><span data-stu-id="d3cd1-409">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="d3cd1-410">EN-US。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-410">en-US.</span></span> <span data-ttu-id="d3cd1-411">英语 （美国）</span><span class="sxs-lookup"><span data-stu-id="d3cd1-411">English (United States)</span></span>  
  
-   <span data-ttu-id="d3cd1-412">-d。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-412">de-DE.</span></span> <span data-ttu-id="d3cd1-413">德语 （德国）</span><span class="sxs-lookup"><span data-stu-id="d3cd1-413">German (Germany)</span></span>  
  
-   <span data-ttu-id="d3cd1-414">es-ES.</span><span class="sxs-lookup"><span data-stu-id="d3cd1-414">es-ES.</span></span> <span data-ttu-id="d3cd1-415">西班牙语 （西班牙）</span><span class="sxs-lookup"><span data-stu-id="d3cd1-415">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="d3cd1-416">fr 法属</span><span class="sxs-lookup"><span data-stu-id="d3cd1-416">fr-FR.</span></span> <span data-ttu-id="d3cd1-417">法语 （法国）</span><span class="sxs-lookup"><span data-stu-id="d3cd1-417">French (France)</span></span>  
  
-   <span data-ttu-id="d3cd1-418">日本 JP。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-418">ja-JP.</span></span> <span data-ttu-id="d3cd1-419">日语 （日本）</span><span class="sxs-lookup"><span data-stu-id="d3cd1-419">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="d3cd1-420">中文-CN。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-420">zh-CN.</span></span> <span data-ttu-id="d3cd1-421">中文 （中国）</span><span class="sxs-lookup"><span data-stu-id="d3cd1-421">Chinese (China)</span></span>  
  
-   <span data-ttu-id="d3cd1-422">中文-TW。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-422">zh-TW.</span></span> <span data-ttu-id="d3cd1-423">中文 （台湾）</span><span class="sxs-lookup"><span data-stu-id="d3cd1-423">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="d3cd1-424">两个字母的语言代码，例如"en"，"fr"或者"es"还允许使用。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-424">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3cd1-425">下面的示例创建排序顺序，使用最多四个浇头比萨语音识别的语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-425">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="d3cd1-426">它专门设置<xref:System.Speech.Recognition.GrammarBuilder>对象的区域性为英语 （美国）。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-426">It specifically sets the <xref:System.Speech.Recognition.GrammarBuilder> object's culture to English (United States).</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="DebugShowPhrases">
      <MemberSignature Language="C#" Value="public string DebugShowPhrases { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugShowPhrases" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DebugShowPhrases As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DebugShowPhrases { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-427">获取一个字符串，此字符串显示  <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 包含的语法的内容和结构。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-427">Gets a string that shows the contents and structure of the grammar contained by the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d3cd1-428">当前内容和结构 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-428">The current content and structure of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d3cd1-429">下面的示例创建排序顺序，使用最多四个浇头比萨语音识别的语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-429">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="d3cd1-430">它将写入的状态<xref:System.Speech.Recognition.GrammarBuilder>到之前创建语法控制台。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-430">It writes the status of the <xref:System.Speech.Recognition.GrammarBuilder> to the console before creating the grammar.</span></span> <span data-ttu-id="d3cd1-431">此方法会生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="d3cd1-431">This method generates the following output:</span></span>  
  
-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Write the contents and structure of the GrammarBuilder to the console.  
  Console.WriteLine("Grammar content and structure: {0}", gb.DebugShowPhrases);  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-432">创建对应于两个语法元素序列的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-432">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that corresponds to a sequence of two grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-433">操作数的顺序确定在新的元素的顺序<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-433">The order of the operands determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-434">组合时，建议注意<xref:System.Speech.Recognition.Choices>或<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>与其他语法元素的实例。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-434">Caution is recommended when combining <xref:System.Speech.Recognition.Choices> or <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements.</span></span> <span data-ttu-id="d3cd1-435">使用包含具有相同的密钥名称重复语义元素或多个可以反复修改相同的语义元素的值的语义元素语音识别语法时，语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-435">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d3cd1-436">有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-436">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d3cd1-437">有关生成和使用语音识别语法的详细信息，请参阅[语音识别](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[创建 GrammarBuilder 语法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-437">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices">
          <span data-ttu-id="d3cd1-438">第一个语法元素，表示一组替代项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-438">The first grammar element, which represents a set of alternatives.</span>
          </span>
        </param>
        <param name="builder">
          <span data-ttu-id="d3cd1-439">第二个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-439">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-440">创建一个新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含一个 <see cref="T:System.Speech.Recognition.Choices" /> 对象以及跟随在此对象后面的一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-440">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-441">返回 <paramref name="choices" /> 参数后面的 <paramref name="builder" /> 参数序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-441">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> parameter followed by the <paramref name="builder" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-442"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类的转换。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-442"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-443">此方法接受上面所列对象`builder`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-443">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="d3cd1-444">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-444">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-445">在合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-445">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-446">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-446">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-447">有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-447">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d3cd1-448">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d3cd1-448">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d3cd1-449">第一个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-449">The first grammar element.</span>
          </span>
        </param>
        <param name="choices">
          <span data-ttu-id="d3cd1-450">第二个表示重置系列的替换元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-450">The second grammar element, which represents a set of alternative elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-451">创建包含后跟一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的新 <see cref="T:System.Speech.Recognition.Choices" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-451">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a <see cref="T:System.Speech.Recognition.Choices" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-452">返回 <paramref name="builder" /> 参数后面的 <paramref name="choices" /> 参数序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-452">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="choices" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-453"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类的转换：</span><span class="sxs-lookup"><span data-stu-id="d3cd1-453"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-454">此方法接受上面所列对象`builder`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-454">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="d3cd1-455">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-455">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-456">在合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-456">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-457">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-457">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-458">有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-458">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d3cd1-459">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d3cd1-459">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d3cd1-460">下面的示例创建可以识别的两个短语语音识别语法"使背景*颜色*"和"设置为背景*颜色*"，其中*颜色*从一组颜色选择。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-460">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d3cd1-461">各种类型用于生成最终的语法，如[字符串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-461">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1">
          <span data-ttu-id="d3cd1-462">第一个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-462">The first grammar element.</span>
          </span>
        </param>
        <param name="builder2">
          <span data-ttu-id="d3cd1-463">第二个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-463">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-464">创建包含两个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象序列的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-464">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-465">返回 <paramref name="builder1" /> 参数后面的 <paramref name="builder2" /> 参数序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-465">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> parameter followed by the <paramref name="builder2" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-466"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类的转换。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-466"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-467">此方法接受上面所列对象`builder1`和`builder2`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-467">This method accepts the objects listed above for the `builder1` and `builder2` parameters.</span></span> <span data-ttu-id="d3cd1-468">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-468">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3cd1-469">在合并<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-469">When you combine <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d3cd1-470">如果遇到这些情况下，在语音识别器可以引发异常。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-470">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d3cd1-471">有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-471">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d3cd1-472">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d3cd1-472">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d3cd1-473">第一个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-473">The first grammar element.</span>
          </span>
        </param>
        <param name="phrase">
          <span data-ttu-id="d3cd1-474">第二个表示字序列的语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-474">The second grammar element, which represents a sequence of words.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-475">创建包含后跟一个短语的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-475">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a phrase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-476">返回 <paramref name="builder" /> 参数后面的 <paramref name="phrase" /> 参数序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-476">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="phrase" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-477"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类的转换。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-477"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-478">此方法接受上面所列对象`builder`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-478">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="d3cd1-479">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-479">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="d3cd1-480">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d3cd1-480">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d3cd1-481">第一个表示字序列的语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-481">The first grammar element, which represents a sequence of words.</span>
          </span>
        </param>
        <param name="builder">
          <span data-ttu-id="d3cd1-482">第二个语法元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-482">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-483">创建包含 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 后跟的一个短语的新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-483">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-484">返回 <paramref name="phrase" /> 参数后面的 <paramref name="builder" /> 参数序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-484">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> parameter followed by the <paramref name="builder" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-485"><xref:System.Speech.Recognition.GrammarBuilder> 支持从以下类的转换。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-485"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-486">此方法接受上面所列对象`builder`参数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-486">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="d3cd1-487">有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-487">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="d3cd1-488">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d3cd1-488">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d3cd1-489">下面的示例创建可以识别的两个短语语音识别语法"使背景*颜色*"和"设置为背景*颜色*"，其中*颜色*从一组颜色选择。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-489">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d3cd1-490">各种类型用于生成最终的语法，如[字符串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-490">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d3cd1-491">将另一种类型为 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-491">Converts another type to a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-492">隐式转换创建的新实例<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-492">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d3cd1-493">你可以将每个将以下类强制转换<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-493">You can cast each of the following classes to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d3cd1-494">每个隐式强制转换为等效于调用的构造函数。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-494">Each of the implicit casts is equivalent to calling the constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::Choices ^ choices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="choices">
          <span data-ttu-id="d3cd1-495">要转换的替代组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-495">The set of alternatives to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-496">将 <see cref="T:System.Speech.Recognition.Choices" /> 对象转换为 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-496">Converts a <see cref="T:System.Speech.Recognition.Choices" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-497">被转换的 <see cref="T:System.Speech.Recognition.Choices" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-497">The converted <see cref="T:System.Speech.Recognition.Choices" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-498">隐式转换创建的新实例<xref:System.Speech.Recognition.GrammarBuilder>。此转换运算符是等效于调用<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>并指定`choices`为`alternateChoices`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-498">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `choices` for the `alternateChoices`.</span></span>  
  
 <span data-ttu-id="d3cd1-499">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d3cd1-499">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d3cd1-500">下面的示例创建了可以识别响应"是"或"否"问题语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-500">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="d3cd1-501">在构造使用隐式转换运算符<xref:System.Speech.Recognition.SemanticResultValue>对象<xref:System.Speech.Recognition.Choices>对象，在构造<xref:System.Speech.Recognition.Choices>从两个对象<xref:System.Speech.Recognition.SemanticResultValue>对象，并在构造<xref:System.Speech.Recognition.Grammar>从对象<xref:System.Speech.Recognition.SemanticResultKey>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-501">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultKey semanticKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultKey semanticKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticKey As SemanticResultKey) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultKey ^ semanticKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticKey" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="semanticKey">
          <span data-ttu-id="d3cd1-502">要转换的语义键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-502">The semantic key to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-503">将 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 对象转换为 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-503">Converts a <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-504">被转换的 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-504">The converted <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-505">隐式转换创建的新实例<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-505">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d3cd1-506">此转换运算符是等效于调用<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>并指定`semanticKey`为`key`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-506">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticKey` for the `key`.</span></span>  
  
 <span data-ttu-id="d3cd1-507">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d3cd1-507">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d3cd1-508">下面的示例创建了可以识别响应"是"或"否"问题语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-508">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="d3cd1-509">在构造使用隐式转换运算符<xref:System.Speech.Recognition.SemanticResultValue>对象<xref:System.Speech.Recognition.Choices>对象，在构造<xref:System.Speech.Recognition.Choices>从两个对象<xref:System.Speech.Recognition.SemanticResultValue>对象，并在构造<xref:System.Speech.Recognition.Grammar>从对象<xref:System.Speech.Recognition.SemanticResultKey>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-509">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultValue semanticValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultValue semanticValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticValue As SemanticResultValue) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultValue ^ semanticValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticValue" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="semanticValue">
          <span data-ttu-id="d3cd1-510">要转换的 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-510">The <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-511">将 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象转换为 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-511">Converts a <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-512">被转换的 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-512">The converted <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-513">隐式转换创建的新实例<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-513">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d3cd1-514">此转换运算符是等效于调用<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>并指定`semanticValue`为`value`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-514">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticValue` for the `value`.</span></span>  
  
 <span data-ttu-id="d3cd1-515">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d3cd1-515">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d3cd1-516">下面的示例创建了可以识别响应"是"或"否"问题语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-516">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="d3cd1-517">在构造使用隐式转换运算符<xref:System.Speech.Recognition.SemanticResultValue>对象<xref:System.Speech.Recognition.Choices>对象，在构造<xref:System.Speech.Recognition.Choices>从两个对象<xref:System.Speech.Recognition.SemanticResultValue>对象，并在构造<xref:System.Speech.Recognition.Grammar>从对象<xref:System.Speech.Recognition.SemanticResultKey>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-517">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices>object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d3cd1-518">要转换的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-518">The string to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3cd1-519">将字符串转换为 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-519">Converts a string to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3cd1-520">已转换的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3cd1-520">The converted string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3cd1-521">隐式转换创建的新实例<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-521">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d3cd1-522">此转换运算符是等效于调用<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>并指定相同`phrase`。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-522">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying the same `phrase`.</span></span>  
  
 <span data-ttu-id="d3cd1-523">此运算符的等效方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d3cd1-523">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d3cd1-524">下面的示例使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>对象来构造能够识别的两个短语，任一语法"使背景*colorChoice*"或"设置为背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d3cd1-524">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d3cd1-525">创建可接受的值的列表之后*colorChoice*使用<xref:System.Speech.Recognition.Choices>对象，该示例初始化两个<xref:System.Speech.Recognition.GrammarBuilder>对象，`makePhrase`和`setPhrase`，使用从字符串的隐式转换对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-525">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using implicit conversion from string objects.</span></span>  
  
 <span data-ttu-id="d3cd1-526">最后，该示例创建<xref:System.Speech.Recognition.Grammar>对象<xref:System.Speech.Recognition.Choices>对象强制转换为<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="d3cd1-526">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
  </Members>
</Type>