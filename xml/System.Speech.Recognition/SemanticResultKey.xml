<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cfb6e3c20ee70cd7a40e0bcf953cbaa576342d34" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37610806" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b5267-101">将密匙字符串与 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 值关联，以定义 <see cref="T:System.Speech.Recognition.SemanticValue" /> 对象。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b5267-101">Associates a key string with <see cref="T:System.Speech.Recognition.SemanticResultValue" /> values to define <see cref="T:System.Speech.Recognition.SemanticValue" /> objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5267-102">System.Speech 中语义表达式的基本单位是<xref:System.Speech.Recognition.SemanticValue>，这是键/值对。</span><span class="sxs-lookup"><span data-stu-id="b5267-102">The basic unit of semantic expression in System.Speech is the <xref:System.Speech.Recognition.SemanticValue>, which is a key/value pair.</span></span>  
  
 <span data-ttu-id="b5267-103">使用<xref:System.Speech.Recognition.SemanticResultKey>对象，你标记<xref:System.Speech.Recognition.SemanticResultValue>实例中包含<xref:System.Speech.Recognition.GrammarBuilder>对象和字符串，以便从可能随时可访问的值<xref:System.Speech.Recognition.SemanticValue>上识别的实例。</span><span class="sxs-lookup"><span data-stu-id="b5267-103">Using <xref:System.Speech.Recognition.SemanticResultKey> objects, you tag <xref:System.Speech.Recognition.SemanticResultValue> instances contained in <xref:System.Speech.Recognition.GrammarBuilder> objects and strings so that the values may readily be accessed from <xref:System.Speech.Recognition.SemanticValue> instances on recognition.</span></span>  
  
 <span data-ttu-id="b5267-104">可以使用<xref:System.Speech.Recognition.SemanticResultValue>并<xref:System.Speech.Recognition.SemanticResultKey>对象，结合<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>对象，若要定义的语音识别语法的语义结构。</span><span class="sxs-lookup"><span data-stu-id="b5267-104">You can use <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> objects, in conjunction with <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects, to define the semantic structure for a speech recognition grammar.</span></span> <span data-ttu-id="b5267-105">若要访问在识别结果中的语义信息，请获取的实例<xref:System.Speech.Recognition.SemanticValue>通过<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性上的<xref:System.Speech.Recognition.RecognizedPhrase>。</span><span class="sxs-lookup"><span data-stu-id="b5267-105">To access the semantic information in a recognition result, obtain an instance of <xref:System.Speech.Recognition.SemanticValue> through the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property on <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="b5267-106">有关使用详细信息<xref:System.Speech.Recognition.SemanticResultValue>并<xref:System.Speech.Recognition.SemanticResultKey>对象，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)和[使用提取 SemanticResultKeySemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa)中[对.NET Framework 4.0 的系统语音编程指南](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043)。</span><span class="sxs-lookup"><span data-stu-id="b5267-106">For more information about using <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> objects, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c) and [Using a SemanticResultKey to Extract a SemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa) in the [System Speech Programming Guide for .NET Framework 4.0](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5267-107">下面的示例创建<xref:System.Speech.Recognition.Grammar>识别密码输入窗体的"我的密码是......"，其中实际输入匹配的通配符。</span><span class="sxs-lookup"><span data-stu-id="b5267-107">The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form "My password is …", where the actual input is matched with a wildcard.</span></span>  
  
 <span data-ttu-id="b5267-108">通配符标记有一个语义密匙和<xref:System.Speech.Recognition.Grammar.SpeechRecognized>处理程序进行检查以验证是否已发生的密码输入此标记是否存在。</span><span class="sxs-lookup"><span data-stu-id="b5267-108">The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.</span></span>  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b5267-109">构造一个 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 实例并将项与语法组件关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5267-109">Constructs an instance of <see cref="T:System.Speech.Recognition.SemanticResultKey" /> and associates the key with grammar components.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5267-110">构造函数<xref:System.Speech.Recognition.SemanticResultKey>指定文本标记 （语义键） 和一组要添加到语音识别语法的语法组件。</span><span class="sxs-lookup"><span data-stu-id="b5267-110">The constructors for <xref:System.Speech.Recognition.SemanticResultKey> specify a text tag (the semantic key) and a set of grammar components to add to a speech recognition grammar.</span></span>  
  
 <span data-ttu-id="b5267-111">组件可以是的语法指定数组的形式<xref:System.Speech.Recognition.GrammarBuilder>对象，或数组的形式<xref:System.String>实例。</span><span class="sxs-lookup"><span data-stu-id="b5267-111">The grammar components can be specified either as an array of <xref:System.Speech.Recognition.GrammarBuilder> objects, or as an array of <xref:System.String> instances.</span></span>  
  
 <span data-ttu-id="b5267-112">如果语法组件用于识别，则可以访问返回<xref:System.Speech.Recognition.SemanticValue>使用的构造函数提供的文本标签<xref:System.Speech.Recognition.SemanticResultKey>用作语义键。</span><span class="sxs-lookup"><span data-stu-id="b5267-112">If the grammar components are used in recognition, you can access the returned <xref:System.Speech.Recognition.SemanticValue> using the text tag provided to the constructor of <xref:System.Speech.Recognition.SemanticResultKey> as a semantic key.</span></span> <span data-ttu-id="b5267-113"><xref:System.Speech.Recognition.SemanticValue.Value%2A>的属性<xref:System.Speech.Recognition.SemanticValue>实例将由的定义中使用的语法组件<xref:System.Speech.Recognition.SemanticResultKey>。</span><span class="sxs-lookup"><span data-stu-id="b5267-113">The <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of the <xref:System.Speech.Recognition.SemanticValue> instance will be determined by the grammar components used in the definition of <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">
          <span data-ttu-id="b5267-114">要用作语义键访问与 <c>builders</c> 参数所指定 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象相关联的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 实例的标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5267-114">The tag to be used as a semantic key to access the <see cref="T:System.Speech.Recognition.SemanticValue" /> instance associated with the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects specified by the <c>builders</c> argument.</span>
          </span>
        </param>
        <param name="builders">
          <span data-ttu-id="b5267-115">语法组件的数组，它将与可用 <c>semanticResultKey</c> 中定义的标记访问的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 对象相关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5267-115">An array of grammar components that will be associated with a <see cref="T:System.Speech.Recognition.SemanticValue" /> object accessible with the tag defined in <c>semanticResultKey</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b5267-116">分配一个语义密匙给一个或多个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象，用于创建语音识别语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5267-116">Assigns a semantic key to one or more <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects used to create a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5267-117">由于隐式转换`builders`参数支持<xref:System.Speech.Recognition.SemanticResultValue>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.Choices>，和<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="b5267-117">Because of implicit conversions, the `builders` argument supports <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, and <xref:System.String> objects as well.</span></span> <span data-ttu-id="b5267-118">有关隐式转换的详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>。</span><span class="sxs-lookup"><span data-stu-id="b5267-118">For more information on implicit conversions, see <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.</span></span>  
  
 <span data-ttu-id="b5267-119">当执行识别操作，<xref:System.Speech.Recognition.GrammarBuilder>中提供的对象`builders`参数的处理顺序。</span><span class="sxs-lookup"><span data-stu-id="b5267-119">When performing a recognition operation, the <xref:System.Speech.Recognition.GrammarBuilder> objects provided in the `builders` argument are treated as sequential.</span></span> <span data-ttu-id="b5267-120">例如，如果以下<xref:System.Speech.Recognition.SemanticResultValue>用来构造<xref:System.Speech.Recognition.Grammar>，识别引擎的输入必须包含单词"the quick brown fox"序列中要被识别。</span><span class="sxs-lookup"><span data-stu-id="b5267-120">For example, if the following <xref:System.Speech.Recognition.SemanticResultValue> is used to construct a <xref:System.Speech.Recognition.Grammar>, input to the recognition engine must contain the words "the quick brown fox" in sequence to be recognized.</span></span>  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 <span data-ttu-id="b5267-121">`semanticResultKey`参数中包含的使用的标记访问<xref:System.Speech.Recognition.SemanticValue>这可能会返回。</span><span class="sxs-lookup"><span data-stu-id="b5267-121">The `semanticResultKey` argument contains the tag used to access the <xref:System.Speech.Recognition.SemanticValue> which might be returned.</span></span>  
  
 <span data-ttu-id="b5267-122"><xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>由<xref:System.Speech.Recognition.GrammarBuilder>提供的实例`builders`参数。</span><span class="sxs-lookup"><span data-stu-id="b5267-122">The <xref:System.Speech.Recognition.SemanticValue.Value%2A> of the <xref:System.Speech.Recognition.SemanticValue> is determined by the <xref:System.Speech.Recognition.GrammarBuilder> instances provided by the `builders` parameter.</span></span>  
  
 <span data-ttu-id="b5267-123">如果<xref:System.Speech.Recognition.GrammarBuilder>对象包含的任何定义实例<xref:System.Speech.Recognition.SemanticResultValue>，则<xref:System.Speech.Recognition.SemanticValue>是`null`。</span><span class="sxs-lookup"><span data-stu-id="b5267-123">If the <xref:System.Speech.Recognition.GrammarBuilder> objects contain no defining instances of <xref:System.Speech.Recognition.SemanticResultValue>, the value of the <xref:System.Speech.Recognition.SemanticValue> is `null`.</span></span>  
  
 <span data-ttu-id="b5267-124">如果<xref:System.Speech.Recognition.GrammarBuilder>中提供的对象`builders`参数提供无标记 (未与关联<xref:System.Speech.Recognition.SemanticResultKey>对象)<xref:System.Speech.Recognition.SemanticResultValue>识别逻辑，该实例使用的实例<xref:System.Speech.Recognition.SemanticResultValue>将定义<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性的<xref:System.Speech.Recognition.SemanticValue>的生成。</span><span class="sxs-lookup"><span data-stu-id="b5267-124">If the <xref:System.Speech.Recognition.GrammarBuilder> objects provided in the `builders` parameter provide an untagged (not associated with a <xref:System.Speech.Recognition.SemanticResultKey> object) <xref:System.Speech.Recognition.SemanticResultValue> instance that is used by the recognition logic, that instance of <xref:System.Speech.Recognition.SemanticResultValue> will define the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of the <xref:System.Speech.Recognition.SemanticValue> that is produced.</span></span>  
  
 <span data-ttu-id="b5267-125">应有一个，并仅有一个无标记<xref:System.Speech.Recognition.SemanticResultValue>实例中<xref:System.Speech.Recognition.GrammarBuilder>指定的对象`builders`参数。</span><span class="sxs-lookup"><span data-stu-id="b5267-125">There should be one, and only one, untagged <xref:System.Speech.Recognition.SemanticResultValue> instance in the <xref:System.Speech.Recognition.GrammarBuilder> objects specified by the `builders` parameter.</span></span> <span data-ttu-id="b5267-126">如果多个实例的无标记<xref:System.Speech.Recognition.SemanticResultValue>与关联<xref:System.Speech.Recognition.SemanticResultKey>，每个将尝试对集的值<xref:System.Speech.Recognition.SemanticValue>识别结果中生成。</span><span class="sxs-lookup"><span data-stu-id="b5267-126">If multiple instances of untagged <xref:System.Speech.Recognition.SemanticResultValue> are associated with the <xref:System.Speech.Recognition.SemanticResultKey>, each will attempt to the set the value of the <xref:System.Speech.Recognition.SemanticValue> produced in the recognition result.</span></span> <span data-ttu-id="b5267-127">不允许此操作，并识别器将生成一个异常，当它尝试使用<xref:System.Speech.Recognition.Grammar>使用此类创建<xref:System.Speech.Recognition.SemanticResultKey>实例。</span><span class="sxs-lookup"><span data-stu-id="b5267-127">This is not permitted, and the recognizer will generate an exception when it attempts to use a <xref:System.Speech.Recognition.Grammar> created using such a <xref:System.Speech.Recognition.SemanticResultKey> instance.</span></span>  
  
 <span data-ttu-id="b5267-128">实例<xref:System.Speech.Recognition.SemanticResultValue>中包含<xref:System.Speech.Recognition.GrammarBuilder>指定的对象`builders`参数和已与另一个关联<xref:System.Speech.Recognition.SemanticResultKey>对当前没有影响<xref:System.Speech.Recognition.SemanticResultKey>实例。</span><span class="sxs-lookup"><span data-stu-id="b5267-128">Instances of <xref:System.Speech.Recognition.SemanticResultValue> contained in the <xref:System.Speech.Recognition.GrammarBuilder> objects specified by the `builders` parameter and already associated with another <xref:System.Speech.Recognition.SemanticResultKey> have no effect on the current <xref:System.Speech.Recognition.SemanticResultKey> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5267-129">下面的示例创建<xref:System.Speech.Recognition.Grammar>识别密码输入窗体的"我的密码是......"，其中实际输入匹配的通配符。</span><span class="sxs-lookup"><span data-stu-id="b5267-129">The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form "My password is …", where the actual input is matched with a wildcard.</span></span>  
  
 <span data-ttu-id="b5267-130">由标记通配符<xref:System.Speech.Recognition.SpeechRecognizer>其密钥的值为"Password"。</span><span class="sxs-lookup"><span data-stu-id="b5267-130">The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is "Password".</span></span> <span data-ttu-id="b5267-131"><xref:System.Speech.Recognition.Grammar.SpeechRecognized>处理程序检查是否存在此标记、 获取的音频输入的密码，并验证密码。</span><span class="sxs-lookup"><span data-stu-id="b5267-131">The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.</span></span>  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">
          <span data-ttu-id="b5267-132">要用于访问与 <c>phrases</c> 参数所指定 <see cref="T:System.String" /> 对象相关联的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 实例的标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5267-132">The tag to be used access the <see cref="T:System.Speech.Recognition.SemanticValue" /> instance associated with the <see cref="T:System.String" /> objects specified by the <c>phrases</c> argument.</span>
          </span>
        </param>
        <param name="phrases">
          <span data-ttu-id="b5267-133">一个或多个 <see cref="T:System.String" /> 对象，其连接文本将与可使用 <c>semanticResultKey</c> 所定义标记访问的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 对象相关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5267-133">One or more <see cref="T:System.String" /> objects, whose concatenated text will be associated with a <see cref="T:System.Speech.Recognition.SemanticValue" /> object accessible with the tag defined in <c>semanticResultKey</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b5267-134">分配一个语义密匙给一个或多个 <see cref="T:System.String" /> 实例，用于创建语音识别语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5267-134">Assigns a semantic key to one or more <see cref="T:System.String" /> instances used to create a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5267-135">当执行识别操作，<xref:System.String>中使用的对象`phrases`参数的处理顺序。</span><span class="sxs-lookup"><span data-stu-id="b5267-135">When performing a recognition operation, the <xref:System.String> objects used in the `phrases` parameter are treated as sequential.</span></span> <span data-ttu-id="b5267-136">例如，如果以下<xref:System.Speech.Recognition.SemanticResultValue>用来构造<xref:System.Speech.Recognition.Grammar>，识别引擎的输入必须包含单词"the quick brown fox"序列中要被识别。</span><span class="sxs-lookup"><span data-stu-id="b5267-136">For example, if the following <xref:System.Speech.Recognition.SemanticResultValue> is used to construct a <xref:System.Speech.Recognition.Grammar>, input to the recognition engine must contain the words "the quick brown fox" in sequence to be recognized.</span></span>  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 <span data-ttu-id="b5267-137">`semanticResultKey`参数确定使用的密钥访问<xref:System.Speech.Recognition.SemanticValue>这可能会返回。</span><span class="sxs-lookup"><span data-stu-id="b5267-137">The `semanticResultKey` argument determines the key used to access the <xref:System.Speech.Recognition.SemanticValue> which might be returned.</span></span>  
  
 <span data-ttu-id="b5267-138">如果构造<xref:System.Speech.Recognition.Grammar>使用<xref:System.Speech.Recognition.GrammarBuilder>对象，其中包含字符串对象的数组与一个语义密匙<xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>生成的识别操作将是用于识别的字符串。</span><span class="sxs-lookup"><span data-stu-id="b5267-138">If you construct a <xref:System.Speech.Recognition.Grammar> using a <xref:System.Speech.Recognition.GrammarBuilder> object that contains a semantic key with an array of string objects,  the <xref:System.Speech.Recognition.SemanticValue.Value%2A> of the <xref:System.Speech.Recognition.SemanticValue> produced by a recognition operation  will be the string used in recognition.</span></span> <span data-ttu-id="b5267-139">在上述示例中，这意味着<xref:System.Speech.Recognition.SemanticValue.Value%2A>将是"the quick brown fox"。</span><span class="sxs-lookup"><span data-stu-id="b5267-139">In the preceding example, this means that <xref:System.Speech.Recognition.SemanticValue.Value%2A> would be "the quick brown fox".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5267-140">下面的示例创建<xref:System.Speech.Recognition.Grammar>从<xref:System.Speech.Recognition.GrammarBuilder>对象，它使用<xref:System.Speech.Recognition.SemanticResultKey>，其定义的数组<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="b5267-140">The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.</span></span>  
  
 <span data-ttu-id="b5267-141">识别引擎使用<xref:System.Speech.Recognition.Grammar>创建将识别短语"color 红色绿色蓝色零"。</span><span class="sxs-lookup"><span data-stu-id="b5267-141">A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase "color red green blue zero".</span></span> <span data-ttu-id="b5267-142">语义<xref:System.Speech.Recognition.RecognizedPhrase>返回的将包含识别<xref:System.Speech.Recognition.SemanticValue>与<xref:System.Speech.Recognition.SemanticValue.Value%2A>的"红色绿色蓝色"。</span><span class="sxs-lookup"><span data-stu-id="b5267-142">The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of "red green blue".</span></span> <span data-ttu-id="b5267-143">您可以访问<xref:System.Speech.Recognition.SemanticValue>使用"代码"标记。</span><span class="sxs-lookup"><span data-stu-id="b5267-143">You can access the <xref:System.Speech.Recognition.SemanticValue> using the "code" tag.</span></span>  
  
 <span data-ttu-id="b5267-144">由于`SemanticResultValue("zero", 5)`追加到<xref:System.Speech.Recognition.GrammarBuilder>，根<xref:System.Speech.Recognition.SemanticValue>对象中<xref:System.Speech.Recognition.RecognizedPhrase>将具有值为 5。</span><span class="sxs-lookup"><span data-stu-id="b5267-144">Because of the `SemanticResultValue("zero", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.</span></span>  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b5267-145">从 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 实例返回 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 结构的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5267-145">Returns an instance of <see cref="T:System.Speech.Recognition.GrammarBuilder" /> constructed from the current <see cref="T:System.Speech.Recognition.SemanticResultKey" /> instance.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5267-146">利用<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>相当于使用<xref:System.Speech.Recognition.GrammarBuilder>构造函数采用<xref:System.Speech.Recognition.SemanticResultKey>作为参数 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>)。</span><span class="sxs-lookup"><span data-stu-id="b5267-146">The use of <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> is equivalent to using the <xref:System.Speech.Recognition.GrammarBuilder> constructor which takes <xref:System.Speech.Recognition.SemanticResultKey> as an argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5267-147">下面的示例创建<xref:System.Speech.Recognition.Grammar>支持命令以更改背景色的对象。</span><span class="sxs-lookup"><span data-stu-id="b5267-147">The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.</span></span>  
  
 <span data-ttu-id="b5267-148">一个<xref:System.Speech.Recognition.Choices>对象 (`colorChoice`) 使用包含列表的选项的背景颜色填充<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>方法替换<xref:System.Speech.Recognition.GrammarBuilder>实例。</span><span class="sxs-lookup"><span data-stu-id="b5267-148">A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> method with <xref:System.Speech.Recognition.GrammarBuilder> instances.</span></span> <span data-ttu-id="b5267-149"><xref:System.Speech.Recognition.GrammarBuilder>实例通过获得<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>方法<xref:System.Speech.Recognition.SemanticResultValue>颜色字符串从创建的对象。</span><span class="sxs-lookup"><span data-stu-id="b5267-149">The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.</span></span>  
  
 <span data-ttu-id="b5267-150">一个<xref:System.Speech.Recognition.GrammarBuilder>然后通过调用获取<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>上<xref:System.Speech.Recognition.SemanticResultKey>实例，将用于密钥中的语义选择`colorChoice`。</span><span class="sxs-lookup"><span data-stu-id="b5267-150">A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.</span></span>  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>