<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8575672daa1b47341a5318fbc03fee7083638d8a" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58457479" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>将密匙字符串与 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 值关联，以定义 <see cref="T:System.Speech.Recognition.SemanticValue" /> 对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 System.Speech 中语义表达式的基本单位是<xref:System.Speech.Recognition.SemanticValue>，这是键/值对。  
  
 使用<xref:System.Speech.Recognition.SemanticResultKey>对象，你标记<xref:System.Speech.Recognition.SemanticResultValue>实例中包含<xref:System.Speech.Recognition.GrammarBuilder>对象和字符串，以便从可能随时可访问的值<xref:System.Speech.Recognition.SemanticValue>上识别的实例。  
  
 可以使用<xref:System.Speech.Recognition.SemanticResultValue>并<xref:System.Speech.Recognition.SemanticResultKey>对象，结合<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>对象，若要定义的语音识别语法的语义结构。 若要访问在识别结果中的语义信息，请获取的实例<xref:System.Speech.Recognition.SemanticValue>通过<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性上的<xref:System.Speech.Recognition.RecognizedPhrase>。  
  
  
## Examples  
 下面的示例创建<xref:System.Speech.Recognition.Grammar>识别密码输入窗体的"我的密码是......"，其中实际输入匹配的通配符。  
  
 通配符标记有一个语义密匙和<xref:System.Speech.Recognition.Grammar.SpeechRecognized>处理程序进行检查以验证是否已发生的密码输入此标记是否存在。  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">使用 SemanticResultKey 提取 SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>构造一个 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 实例并将项与语法组件关联。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数<xref:System.Speech.Recognition.SemanticResultKey>指定文本标记 （语义键） 和一组要添加到语音识别语法的语法组件。  
  
 组件可以是的语法指定数组的形式<xref:System.Speech.Recognition.GrammarBuilder>对象，或数组的形式<xref:System.String>实例。  
  
 如果语法组件用于识别，则可以访问返回<xref:System.Speech.Recognition.SemanticValue>使用的构造函数提供的文本标签<xref:System.Speech.Recognition.SemanticResultKey>用作语义键。 <xref:System.Speech.Recognition.SemanticValue.Value%2A>的属性<xref:System.Speech.Recognition.SemanticValue>实例将由的定义中使用的语法组件<xref:System.Speech.Recognition.SemanticResultKey>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">要用于作为语义关键访问 <see cref="T:System.Speech.Recognition.SemanticValue" /> 与参数指定的对象 <see cref="T:System.Speech.Recognition.GrammarBuilder" />关联的实例 <paramref name="builders" /> 的标记。</param>
        <param name="builders">将与可用 <paramref name="semanticResultKey" /> 中定义的标记访问的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 对象相关联的语法组件的数组。</param>
        <summary>分配一个语义密匙给一个或多个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象，用于创建语音识别语法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于隐式转换`builders`参数支持<xref:System.Speech.Recognition.SemanticResultValue>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.Choices>，和<xref:System.String>对象。 有关隐式转换的详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>。  
  
 当执行识别操作，<xref:System.Speech.Recognition.GrammarBuilder>中提供的对象`builders`参数的处理顺序。 例如，如果以下<xref:System.Speech.Recognition.SemanticResultValue>用来构造<xref:System.Speech.Recognition.Grammar>，识别引擎的输入必须包含单词"the quick brown fox"序列中要被识别。  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 `semanticResultKey`参数中包含的使用的标记访问<xref:System.Speech.Recognition.SemanticValue>这可能会返回。  
  
 <xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>由<xref:System.Speech.Recognition.GrammarBuilder>提供的实例`builders`参数。  
  
 如果<xref:System.Speech.Recognition.GrammarBuilder>对象包含的任何定义实例<xref:System.Speech.Recognition.SemanticResultValue>，则<xref:System.Speech.Recognition.SemanticValue>是`null`。  
  
 如果<xref:System.Speech.Recognition.GrammarBuilder>中提供的对象`builders`参数提供无标记 (未与关联<xref:System.Speech.Recognition.SemanticResultKey>对象)<xref:System.Speech.Recognition.SemanticResultValue>识别逻辑，该实例使用的实例<xref:System.Speech.Recognition.SemanticResultValue>将定义<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性的<xref:System.Speech.Recognition.SemanticValue>的生成。  
  
 应有一个，并仅有一个无标记<xref:System.Speech.Recognition.SemanticResultValue>实例中<xref:System.Speech.Recognition.GrammarBuilder>指定的对象`builders`参数。 如果多个实例的无标记<xref:System.Speech.Recognition.SemanticResultValue>与关联<xref:System.Speech.Recognition.SemanticResultKey>，每个将尝试对集的值<xref:System.Speech.Recognition.SemanticValue>识别结果中生成。 不允许此操作，并识别器将生成一个异常，当它尝试使用<xref:System.Speech.Recognition.Grammar>使用此类创建<xref:System.Speech.Recognition.SemanticResultKey>实例。  
  
 实例<xref:System.Speech.Recognition.SemanticResultValue>中包含<xref:System.Speech.Recognition.GrammarBuilder>指定的对象`builders`参数和已与另一个关联<xref:System.Speech.Recognition.SemanticResultKey>对当前没有影响<xref:System.Speech.Recognition.SemanticResultKey>实例。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Speech.Recognition.Grammar>识别密码输入窗体的"我的密码是......"，其中实际输入匹配的通配符。  
  
 由标记通配符<xref:System.Speech.Recognition.SpeechRecognizer>其密钥的值为"Password"。 <xref:System.Speech.Recognition.Grammar.SpeechRecognized>处理程序检查是否存在此标记、 获取的音频输入的密码，并验证密码。  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">要用于访问与由 <paramref name="phrases" /> 参数指定的对象 <see cref="T:System.String" /> 相关联的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 实例的标记。</param>
        <param name="phrases">一个或多个 <see cref="T:System.String" /> 对象，其连接文本将与使用定义在 <paramref name="semanticResultKey" /> 标记可访问的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 对象关联。</param>
        <summary>分配一个语义密匙给一个或多个 <see cref="T:System.String" /> 实例，用于创建语音识别语法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当执行识别操作，<xref:System.String>中使用的对象`phrases`参数的处理顺序。 例如，如果以下<xref:System.Speech.Recognition.SemanticResultValue>用来构造<xref:System.Speech.Recognition.Grammar>，识别引擎的输入必须包含单词"the quick brown fox"序列中要被识别。  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 `semanticResultKey`参数确定使用的密钥访问<xref:System.Speech.Recognition.SemanticValue>这可能会返回。  
  
 如果构造<xref:System.Speech.Recognition.Grammar>使用<xref:System.Speech.Recognition.GrammarBuilder>对象，其中包含字符串对象的数组与一个语义密匙<xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>生成的识别操作将是用于识别的字符串。 在上述示例中，这意味着<xref:System.Speech.Recognition.SemanticValue.Value%2A>将是"the quick brown fox"。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Speech.Recognition.Grammar>从<xref:System.Speech.Recognition.GrammarBuilder>对象，它使用<xref:System.Speech.Recognition.SemanticResultKey>，其定义的数组<xref:System.String>对象。  
  
 识别引擎使用<xref:System.Speech.Recognition.Grammar>创建将识别短语"color 红色绿色蓝色零"。 语义<xref:System.Speech.Recognition.RecognizedPhrase>返回的将包含识别<xref:System.Speech.Recognition.SemanticValue>与<xref:System.Speech.Recognition.SemanticValue.Value%2A>的"红色绿色蓝色"。 您可以访问<xref:System.Speech.Recognition.SemanticValue>使用"代码"标记。  
  
 由于`SemanticResultValue("zero", 5)`追加到<xref:System.Speech.Recognition.GrammarBuilder>，根<xref:System.Speech.Recognition.SemanticValue>对象中<xref:System.Speech.Recognition.RecognizedPhrase>将具有值为 5。  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 实例返回 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 结构的实例。</summary>
        <returns>从当前 <see langword="SemanticResultKey" /> 实例构造的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 利用<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>相当于使用<xref:System.Speech.Recognition.GrammarBuilder>构造函数采用<xref:System.Speech.Recognition.SemanticResultKey>作为参数 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Speech.Recognition.Grammar>支持命令以更改背景色的对象。  
  
 一个<xref:System.Speech.Recognition.Choices>对象 (`colorChoice`) 使用包含列表的选项的背景颜色填充<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>方法替换<xref:System.Speech.Recognition.GrammarBuilder>实例。 <xref:System.Speech.Recognition.GrammarBuilder>实例通过获得<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>方法<xref:System.Speech.Recognition.SemanticResultValue>颜色字符串从创建的对象。  
  
 一个<xref:System.Speech.Recognition.GrammarBuilder>然后通过调用获取<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>上<xref:System.Speech.Recognition.SemanticResultKey>实例，将用于密钥中的语义选择`colorChoice`。  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>