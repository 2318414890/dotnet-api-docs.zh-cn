<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0994dda76ea9387e46152c95cb0e898ef716c561" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39998408" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechRecognitionEngine = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="bba50-101">提供访问和管理进程内语音识别引擎。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bba50-101">Provides the means to access and manage an in-process speech recognition engine.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-102">可以为任何安装的语音识别器来创建此类的实例。</span><span class="sxs-lookup"><span data-stu-id="bba50-102">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="bba50-103">若要获取有关哪些识别程序已安装的信息，请使用静态<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-103">To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-104">此类用于语音识别引擎进程中运行，并提供对语音识别的各个方面的控制，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba50-104">This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:</span></span>  
  
-   <span data-ttu-id="bba50-105">若要创建进程内语音识别器，请使用其中一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="bba50-105">To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.</span></span>  
  
-   <span data-ttu-id="bba50-106">若要管理的语音识别语法，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A>方法，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-106">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
-   <span data-ttu-id="bba50-107">若要配置到识别器输入，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>，或<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-107">To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.</span></span>  
  
-   <span data-ttu-id="bba50-108">若要执行语音识别，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-108">To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="bba50-109">若要修改识别沈默或意外的输入的处理，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-109">To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="bba50-110">若要更改识别器返回的备用项的数量，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-110">To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property.</span></span> <span data-ttu-id="bba50-111">识别器返回识别结果中的<xref:System.Speech.Recognition.RecognitionResult>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-111">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="bba50-112">若要将更改同步到识别器，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-112">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="bba50-113">识别器使用多个线程来执行任务。</span><span class="sxs-lookup"><span data-stu-id="bba50-113">The recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="bba50-114">若要模拟输入到识别器，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-114">To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="bba50-115"><xref:System.Speech.Recognition.SpeechRecognitionEngine>对象是唯一使用的进程的实例化对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-115">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object is for the sole use of the process that instantiated the object.</span></span> <span data-ttu-id="bba50-116">与此相反，<xref:System.Speech.Recognition.SpeechRecognizer>与想要使用它的任何应用程序共享一个识别器。</span><span class="sxs-lookup"><span data-stu-id="bba50-116">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba50-117">始终调用<xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A>发布到语音识别器最后一个引用之前。</span><span class="sxs-lookup"><span data-stu-id="bba50-117">Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="bba50-118">否则，它所使用的资源不会释放垃圾回收器调用的识别器对象之前`Finalize`方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-119">下面的示例显示了一部分演示基本的语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-119">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="bba50-120">因为此示例使用`Multiple`模式下的<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法，它可以执行识别，直到关闭控制台窗口或停止调试。</span><span class="sxs-lookup"><span data-stu-id="bba50-120">Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-121">初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-121">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-122">您可以构造<xref:System.Speech.Recognition.SpeechRecognitionEngine>从以下任一实例：</span><span class="sxs-lookup"><span data-stu-id="bba50-122">You can construct a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance from any of the following:</span></span>  
  
-   <span data-ttu-id="bba50-123">系统默认语音识别引擎</span><span class="sxs-lookup"><span data-stu-id="bba50-123">The default speech recognition engine for the system</span></span>  
  
-   <span data-ttu-id="bba50-124">按名称指定了特定语音识别引擎</span><span class="sxs-lookup"><span data-stu-id="bba50-124">A specific speech recognition engine that you specify by name</span></span>  
  
-   <span data-ttu-id="bba50-125">您指定的区域设置默认语音识别引擎</span><span class="sxs-lookup"><span data-stu-id="bba50-125">The default speech recognition engine for a locale that you specify</span></span>  
  
-   <span data-ttu-id="bba50-126">符合条件中指定一个特定的识别引擎<xref:System.Speech.Recognition.RecognizerInfo>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-126">A specific recognition engine that meets the criteria that you specify in a <xref:System.Speech.Recognition.RecognizerInfo> object.</span></span>  
  
 <span data-ttu-id="bba50-127">语音识别器可以开始识别之前，必须加载至少一个语音识别语法，并配置为识别器的输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-127">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="bba50-128">若要加载的语法，请调用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-128">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-129">若要配置的音频输入，请使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="bba50-129">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-130">使用系统的默认语音识别器来初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-130">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for the system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-131">语音识别器可以开始语音识别之前，必须加载至少一个识别语法，并配置为识别器的输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-131">Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="bba50-132">若要加载的语法，请调用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-132">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-133">若要配置的音频输入，请使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="bba50-133">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Globalization.CultureInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="bba50-134">语音识别器必须支持的区域设置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-134">The locale that the speech recognizer must support.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-135">使用指定的区域设置的默认语音识别器来初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-135">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for a specified locale.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-136">Microsoft Windows 和 System.Speech API 接受所有有效语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="bba50-136">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="bba50-137">若要执行使用中指定的语言的语音识别`CultureInfo`参数时，语音识别引擎支持，必须安装语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="bba50-137">To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="bba50-138">随 Microsoft Windows 7 的语音识别引擎使用以下语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="bba50-138">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="bba50-139">en GB。</span><span class="sxs-lookup"><span data-stu-id="bba50-139">en-GB.</span></span> <span data-ttu-id="bba50-140">英语 （英国）</span><span class="sxs-lookup"><span data-stu-id="bba50-140">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="bba50-141">EN-US。</span><span class="sxs-lookup"><span data-stu-id="bba50-141">en-US.</span></span> <span data-ttu-id="bba50-142">英语 （美国）</span><span class="sxs-lookup"><span data-stu-id="bba50-142">English (United States)</span></span>  
  
-   <span data-ttu-id="bba50-143">DE-DE。</span><span class="sxs-lookup"><span data-stu-id="bba50-143">de-DE.</span></span> <span data-ttu-id="bba50-144">德语 （德国）</span><span class="sxs-lookup"><span data-stu-id="bba50-144">German (Germany)</span></span>  
  
-   <span data-ttu-id="bba50-145">es 的多少号。</span><span class="sxs-lookup"><span data-stu-id="bba50-145">es-ES.</span></span> <span data-ttu-id="bba50-146">西班牙语 （西班牙）</span><span class="sxs-lookup"><span data-stu-id="bba50-146">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="bba50-147">fr-fr。</span><span class="sxs-lookup"><span data-stu-id="bba50-147">fr-FR.</span></span> <span data-ttu-id="bba50-148">法语 （法国）</span><span class="sxs-lookup"><span data-stu-id="bba50-148">French (France)</span></span>  
  
-   <span data-ttu-id="bba50-149">日本-JP。</span><span class="sxs-lookup"><span data-stu-id="bba50-149">ja-JP.</span></span> <span data-ttu-id="bba50-150">日语 （日本）</span><span class="sxs-lookup"><span data-stu-id="bba50-150">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="bba50-151">zh CN。</span><span class="sxs-lookup"><span data-stu-id="bba50-151">zh-CN.</span></span> <span data-ttu-id="bba50-152">中文 （中国）</span><span class="sxs-lookup"><span data-stu-id="bba50-152">Chinese (China)</span></span>  
  
-   <span data-ttu-id="bba50-153">zh-TW。</span><span class="sxs-lookup"><span data-stu-id="bba50-153">zh-TW.</span></span> <span data-ttu-id="bba50-154">中文 （台湾）</span><span class="sxs-lookup"><span data-stu-id="bba50-154">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="bba50-155">两个字母的语言代码，例如"en"，"fr"或者"es"还可使用。</span><span class="sxs-lookup"><span data-stu-id="bba50-155">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
 <span data-ttu-id="bba50-156">语音识别器可以开始识别之前，必须加载至少一个语音识别语法，并配置为识别器的输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-156">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="bba50-157">若要加载的语法，请调用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-157">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-158">若要配置的音频输入，请使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="bba50-158">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-159">下面的示例显示了一部分的演示了基本的语音识别，并初始化 EN-US 区域设置语音识别器的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-159">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-160">未安装的语音识别器都不支持区域设置，或者 <paramref name="culture" /> 为固定区域性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-160">None of the installed speech recognizers support the specified locale, or <paramref name="culture" /> is the invariant culture.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-161">
            <paramref name="Culture" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-161">
              <paramref name="Culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Speech::Recognition::RecognizerInfo ^ recognizerInfo);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Speech.Recognition.RecognizerInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerInfo" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo">
          <span data-ttu-id="bba50-162">特定语音识别器的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-162">The information for the specific speech recognizer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-163">用 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象中的信息初始化  <see cref="T:System.Speech.Recognition.RecognizerInfo" /> 来指定要使用的识别器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-163">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> using the information in a <see cref="T:System.Speech.Recognition.RecognizerInfo" /> object to specify the recognizer to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-164">可以为任何安装的语音识别器来创建此类的实例。</span><span class="sxs-lookup"><span data-stu-id="bba50-164">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="bba50-165">若要获取有关哪些识别程序已安装的信息，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-165">To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-166">语音识别器可以开始识别之前，必须加载至少一个语音识别语法，并配置为识别器的输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-166">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="bba50-167">若要加载的语法，请调用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-167">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-168">若要配置的音频输入，请使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="bba50-168">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-169">下面的示例显示了一部分的演示了基本的语音识别，并初始化支持英语语言的语音识别器的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-169">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.</span></span>  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recognizerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::String ^ recognizerId);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : string -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerId" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId">
          <span data-ttu-id="bba50-170">使用一个识别器的标记名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-170">The token name of the speech recognizer to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-171">使用字符串参数初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 类的新实例，该参数指定要使用的识别器的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-171">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class with a string parameter that specifies the name of the recognizer to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-172">识别器的标记名称为的值<xref:System.Speech.Recognition.RecognizerInfo.Id%2A>的属性<xref:System.Speech.Recognition.RecognizerInfo>对象返回的<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A>的识别器的属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-172">The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer.</span></span> <span data-ttu-id="bba50-173">若要获取所有已安装的识别器的集合，请使用静态<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-173">To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-174">语音识别器可以开始识别之前，必须加载至少一个语音识别语法，并配置为识别器的输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-174">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="bba50-175">若要加载的语法，请调用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-175">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-176">若要配置的音频输入，请使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="bba50-176">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-177">下面的示例显示了一部分的控制台应用程序演示了基本的语音识别，并为 Windows 创建语音识别器 8.0 的实例 (英语-美国)。</span><span class="sxs-lookup"><span data-stu-id="bba50-177">The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-178">没有带有此标记名称的语音识别器未安装，或者 <paramref name="recognizerId" /> 是空字符串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-178">No speech recognizer with that token name is installed, or <paramref name="recognizerId" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-179">
            <paramref name="recognizerId" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-179">
              <paramref name="recognizerId" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-180">获取 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 接收的音频格式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-180">Gets the format of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-181">音频格式于实例 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 输入或 <see langword="null" /> ，如果输入不配置或设置为无效输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-181">The format of audio at the input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance, or <see langword="null" /> if the input is not configured or set to the null input.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-182">若要配置的音频输入，请使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="bba50-182">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-183">下面的示例使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A>来获取并显示数据的音频格式。</span><span class="sxs-lookup"><span data-stu-id="bba50-183">The example below uses <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> to obtain and display audio format data.</span></span>  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioLevel : int" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-184">获取 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 接收的音频级别.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-184">Gets the level of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-185">输入的音频级别到语音识别器，从 0 到 100。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-185">The audio level of the input to the speech recognizer, from 0 through 100.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-186">值 0 表示 silence、，100 表示最大输入的卷。</span><span class="sxs-lookup"><span data-stu-id="bba50-186">The value 0 represents silence, and 100 represents the maximum input volume.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberSignature Language="F#" Value="member this.AudioLevelUpdated : EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " Usage="member this.AudioLevelUpdated : System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-187">当 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 报告其音频输入的级别的时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-187">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reports the level of its audio input.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-188"><xref:System.Speech.Recognition.SpeechRecognitionEngine>引发多个时间每秒此事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-188">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second.</span></span> <span data-ttu-id="bba50-189">与引发事件的频率取决于其运行应用程序的计算机。</span><span class="sxs-lookup"><span data-stu-id="bba50-189">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="bba50-190">若要在该事件时获取的音频级别，请使用<xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A>关联的属性<xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="bba50-190">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="bba50-191">若要获取的识别器的输入当前的音频级别，请使用识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-191">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="bba50-192">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> 委托时，需要标识将要处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-192">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-193">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-193">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-194">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-194">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-195">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-195">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-196">下面的示例添加的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated>事件<xref:System.Speech.Recognition.SpeechRecognitionEngine>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-196">The following example adds a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.</span></span> <span data-ttu-id="bba50-197">该处理程序将输出到控制台的新音频级别。</span><span class="sxs-lookup"><span data-stu-id="bba50-197">The handler outputs the new audio level to the console.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-198">获取音频流中的当前位置，此音频流由向 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 提供输入的设备产生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-198">Gets the current location in the audio stream being generated by the device that is providing input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-199">输入设备生成的音频流中的当前位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-199">The current location in the audio stream being generated by the input device.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-200"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>属性引用其生成的音频流中的输入的设备的位置。</span><span class="sxs-lookup"><span data-stu-id="bba50-200">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="bba50-201">与此相反，<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>属性引用其音频输入中的识别器的位置。</span><span class="sxs-lookup"><span data-stu-id="bba50-201">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input.</span></span> <span data-ttu-id="bba50-202">这些位置可以是不同的。</span><span class="sxs-lookup"><span data-stu-id="bba50-202">These positions can be different.</span></span> <span data-ttu-id="bba50-203">例如，如果识别器已收到输入并为具有不还生成识别结果然后的值<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>属性小于的值<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-203">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-204">在以下示例中，进程内语音识别器使用听写语法来匹配语音输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-204">In the following example, the in-process speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="bba50-205">处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>事件将写入控制台<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A>当语音识别器检测到在其输入的语音。</span><span class="sxs-lookup"><span data-stu-id="bba50-205">A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberSignature Language="F#" Value="member this.AudioSignalProblemOccurred : EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " Usage="member this.AudioSignalProblemOccurred : System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-206">当 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 检测在音频信号的问题的时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-206">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects a problem in the audio signal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-207">若要获取出现的问题，请使用<xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A>关联的属性<xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="bba50-207">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="bba50-208">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> 委托时，需要标识将要处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-208">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-209">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-209">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-210">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-210">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-211">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-211">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-212">下面的示例定义的事件处理程序收集的有关信息<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-212">The following example defines an event handler that gathers information about an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> event.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioState : System.Speech.Recognition.AudioState" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-213">获取 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />接收的状态音频.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-213">Gets the state of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-214">语音识别器处理的音频输入的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-214">The state of the audio input to the speech recognizer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-215"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A>属性表示的成员的音频状态<xref:System.Speech.Recognition.AudioState>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba50-215">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberSignature Language="F#" Value="member this.AudioStateChanged : EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " Usage="member this.AudioStateChanged : System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-216">当状态在 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 接收的音频更改的时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-216">Raised when the state changes in the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-217">若要在该事件时获取音频的状态，请使用<xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A>关联的属性<xref:System.Speech.Recognition.AudioStateChangedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="bba50-217">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="bba50-218">若要获取识别器的输入音频的当前状态，请使用识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-218">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property.</span></span> <span data-ttu-id="bba50-219">有关音频状态的详细信息，请参阅<xref:System.Speech.Recognition.AudioState>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba50-219">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="bba50-220">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> 委托时，需要标识将要处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-220">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-221">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-221">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-222">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-222">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-223">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-223">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-224">下面的示例使用的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>要写入的识别器事件的新<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A>到控制台每次使用的成员更改<xref:System.Speech.Recognition.AudioState>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba50-224">The following example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BabbleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BabbleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.BabbleTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-225">获取或设置时间间隔，在此时间间隔内，<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 将在终结识别之前接受仅包含背景噪音的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-225">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only background noise, before finalizing recognition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-226">计时器间隔的持续时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-226">The duration of the time interval.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-227">每个语音识别器有一个算法来区分 silence 和语音。</span><span class="sxs-lookup"><span data-stu-id="bba50-227">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="bba50-228">识别器将分类为背景噪音与任何识别器的初始规则不匹配任何非无声输入加载并启用语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="bba50-228">The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="bba50-229">如果识别器接收干扰超时间隔内仅背景噪音和静音，识别器完成该识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-229">If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="bba50-230">对于异步标识操作，识别器将引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，其中<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType>属性是`true`，和<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType>属性是`null`。</span><span class="sxs-lookup"><span data-stu-id="bba50-230">For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="bba50-231">有关同步的识别操作和仿真，识别器返回`null`，而不是有效<xref:System.Speech.Recognition.RecognitionResult>。</span><span class="sxs-lookup"><span data-stu-id="bba50-231">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="bba50-232">干扰超时期限设置为 0，如果识别器不执行干扰超时复选。</span><span class="sxs-lookup"><span data-stu-id="bba50-232">If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.</span></span> <span data-ttu-id="bba50-233">超时间隔可以是任何非负值。</span><span class="sxs-lookup"><span data-stu-id="bba50-233">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="bba50-234">默认值为 0 秒。</span><span class="sxs-lookup"><span data-stu-id="bba50-234">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-235">下面的示例显示了演示设置的基本语音识别的控制台应用程序的一部分<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>并<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>的属性<xref:System.Speech.Recognition.SpeechRecognitionEngine>之前启动语音识别。</span><span class="sxs-lookup"><span data-stu-id="bba50-235">The following example shows part of a console application that demonstrates basic speech recognition that sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="bba50-236">语音识别器的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>并<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件输出到控制台，以演示的事件信息如何<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>的属性<xref:System.Speech.Recognition.SpeechRecognitionEngine>影响识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-236">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="bba50-237">该属性已设置为小于 0 秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-237">This property is set to less than 0 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-238">处置此 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-238">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechRecognitionEngine.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-239">处置此 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-239">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="speechRecognitionEngine.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="bba50-240">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-240">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-241">处置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象并释放会话期间使用的资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-241">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object and releases resources used during the session.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-242">使用文本代替同步语音识别的音频来模拟输入到语音识别器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-242">Emulates input to the speech recognizer, using text in place of audio for synchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-243">这些方法绕过系统音频输入，并提供到作为识别的文本<xref:System.String>对象或数组的形式<xref:System.Speech.Recognition.RecognizedWordUnit>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-243">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="bba50-244">在测试或调试应用程序或语法时，这可以是有帮助。</span><span class="sxs-lookup"><span data-stu-id="bba50-244">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="bba50-245">例如，可以使用模拟来确定某个词是否在语法中，以及识别字词时返回哪些语义。</span><span class="sxs-lookup"><span data-stu-id="bba50-245">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="bba50-246">使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>方法以在模拟操作过程中禁用到语音识别引擎的音频输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-246">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="bba50-247">语音识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件就像不模拟识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-247">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="bba50-248">识别器忽略新行和额外的空白区域，并将标点符号视为文字输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-248">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba50-249"><xref:System.Speech.Recognition.RecognitionResult>响应模拟输入到语音识别器生成的对象的值为`null`有关其<xref:System.Speech.Recognition.RecognitionResult.Audio%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-249">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="bba50-250">若要模拟异步标识，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-250">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="bba50-251">标识操作的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-251">The input for the recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-252">使用文本代替同步语音识别的音频来模拟输入短语到语音识别器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-252">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bba50-253">输入的标识结果或 <see langword="null" /> ，如果操作不成功或识别器未启用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-253">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-254">语音识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件就像不模拟识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-254">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="bba50-255">随 Vista 和 Windows 7 的识别器忽略大小写和字符宽度，在将语法规则应用到输入短语。</span><span class="sxs-lookup"><span data-stu-id="bba50-255">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="bba50-256">有关这种比较类型的详细信息，请参阅<xref:System.Globalization.CompareOptions>枚举值<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>和<xref:System.Globalization.CompareOptions.IgnoreWidth>。</span><span class="sxs-lookup"><span data-stu-id="bba50-256">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="bba50-257">识别器还忽略新行和额外的空白区域，并将标点符号视为文字输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-257">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-258">下面的代码示例是演示模拟的输入、 相关联的识别结果和相关的事件引发的语音识别器的控制台应用程序的一部分。</span><span class="sxs-lookup"><span data-stu-id="bba50-258">The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="bba50-259">该示例生成以下输出。</span><span class="sxs-lookup"><span data-stu-id="bba50-259">The example generates the following output.</span></span>  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bba50-260">识别器没有加载的语音识别语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-260">The recognizer has no speech recognition grammars loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-261">
            <paramref name="inputText" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-261">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-262">
            <paramref name="inputText" /> 为空字符串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-262">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">
          <span data-ttu-id="bba50-263">词单元数组，包含识别操作输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-263">An array of word units that contains the input for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="bba50-264">描述用于模拟识别操作的比较说明类型的枚举值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-264">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-265">使用文本代替同步语音识别的音频来模拟特定字输入到语音识别器，并指定识别器如何处理单词和加载的语音识别语法间的 Unicode 比较。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-265">Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bba50-266">输入的标识结果或 <see langword="null" /> ，如果操作不成功或识别器未启用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-266">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-267">语音识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件就像不模拟识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-267">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="bba50-268">识别器使用`compareOptions`如果它适用于输入短语语法规则。</span><span class="sxs-lookup"><span data-stu-id="bba50-268">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="bba50-269">随 Vista 和 Windows 7 的识别器忽略大小写，如果<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>或<xref:System.Globalization.CompareOptions.IgnoreCase>值是否存在。</span><span class="sxs-lookup"><span data-stu-id="bba50-269">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="bba50-270">识别器始终忽略字符宽度，永远不会忽略假名类型。</span><span class="sxs-lookup"><span data-stu-id="bba50-270">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="bba50-271">识别器还会忽略新行和额外的空白区域，并将标点符号视为文字输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-271">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="bba50-272">有关字符宽度和假名类型的详细信息，请参阅<xref:System.Globalization.CompareOptions>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba50-272">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bba50-273">识别器没有加载的语音识别语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-273">The recognizer has no speech recognition grammars loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-274">
            <paramref name="wordUnits" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-274">
              <paramref name="wordUnits" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-275">
            <paramref name="wordUnits" /> 包含一个或多个 <see langword="null" /> 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-275">
              <paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="bba50-276">
            <paramref name="compareOptions" /> 包含值 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />， <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />，或 <see cref="F:System.Globalization.CompareOptions.StringSort" /> 标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-276">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="bba50-277">标识操作的输入相。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-277">The input phrase for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="bba50-278">描述用于模拟识别操作的比较说明类型的枚举值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-278">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-279">使用文本代替异步语音识别的音频来模拟短语输入到语音识别器，并指定识别器如何处理短语和加载的语音识别语法间的 Unicode 比较。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-279">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bba50-280">输入的标识结果或 <see langword="null" /> ，如果操作不成功或识别器未启用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-280">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-281">语音识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件就像不模拟识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-281">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="bba50-282">识别器使用`compareOptions`如果它适用于输入短语语法规则。</span><span class="sxs-lookup"><span data-stu-id="bba50-282">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="bba50-283">随 Vista 和 Windows 7 的识别器忽略大小写，如果<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>或<xref:System.Globalization.CompareOptions.IgnoreCase>值是否存在。</span><span class="sxs-lookup"><span data-stu-id="bba50-283">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="bba50-284">识别器始终忽略字符宽度，永远不会忽略假名类型。</span><span class="sxs-lookup"><span data-stu-id="bba50-284">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="bba50-285">识别器还会忽略新行和额外的空白区域，并将标点符号视为文字输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-285">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="bba50-286">有关字符宽度和假名类型的详细信息，请参阅<xref:System.Globalization.CompareOptions>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba50-286">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bba50-287">识别器没有加载的语音识别语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-287">The recognizer has no speech recognition grammars loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-288">
            <paramref name="inputText" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-288">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-289">
            <paramref name="inputText" /> 为空字符串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-289">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="bba50-290">
            <paramref name="compareOptions" /> 包含值 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />， <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />，或 <see cref="F:System.Globalization.CompareOptions.StringSort" /> 标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-290">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-291">使用文本代替异步语音识别的音频来模拟输入到语音识别器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-291">Emulates input to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-292">这些方法绕过系统音频输入，并提供到作为识别的文本<xref:System.String>对象或数组的形式<xref:System.Speech.Recognition.RecognizedWordUnit>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-292">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="bba50-293">在测试或调试应用程序或语法时，这可以是有帮助。</span><span class="sxs-lookup"><span data-stu-id="bba50-293">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="bba50-294">例如，可以使用模拟来确定某个词是否在语法中，以及识别字词时返回哪些语义。</span><span class="sxs-lookup"><span data-stu-id="bba50-294">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="bba50-295">使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>方法以在模拟操作过程中禁用到语音识别引擎的音频输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-295">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="bba50-296">语音识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件就像不模拟识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-296">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="bba50-297">当识别器完成异步标识操作时，将引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-297">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="bba50-298">识别器忽略新行和额外的空白区域，并将标点符号视为文字输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-298">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba50-299"><xref:System.Speech.Recognition.RecognitionResult>响应模拟输入到语音识别器生成的对象的值为`null`有关其<xref:System.Speech.Recognition.RecognitionResult.Audio%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-299">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="bba50-300">若要模拟同步识别，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-300">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="bba50-301">标识操作的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-301">The input for the recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-302">使用文本代替异步语音识别的音频来模拟输入到语音识别器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-302">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-303">语音识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件就像不模拟识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-303">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="bba50-304">当识别器完成异步标识操作时，将引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-304">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="bba50-305">随 Vista 和 Windows 7 的识别器忽略大小写和字符宽度，在将语法规则应用到输入短语。</span><span class="sxs-lookup"><span data-stu-id="bba50-305">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="bba50-306">有关这种比较类型的详细信息，请参阅<xref:System.Globalization.CompareOptions>枚举值<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>和<xref:System.Globalization.CompareOptions.IgnoreWidth>。</span><span class="sxs-lookup"><span data-stu-id="bba50-306">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="bba50-307">识别器还忽略新行和额外的空白区域，并将标点符号视为文字输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-307">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-308">下面的代码示例是演示异步模拟的输入、 相关联的识别结果和相关的事件引发的语音识别器的控制台应用程序的一部分。</span><span class="sxs-lookup"><span data-stu-id="bba50-308">The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="bba50-309">该示例生成以下输出。</span><span class="sxs-lookup"><span data-stu-id="bba50-309">The example generates the following output.</span></span>  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHander);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHander(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bba50-310">识别器没有加载的语音识别语法，或者识别器不是完全标识的异步操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-310">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-311">
            <paramref name="inputText" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-311">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-312">
            <paramref name="inputText" /> 为空字符串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-312">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">
          <span data-ttu-id="bba50-313">词单元数组，包含识别操作输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-313">An array of word units that contains the input for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="bba50-314">描述用于模拟识别操作的比较说明类型的枚举值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-314">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-315">使用 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 对象的数组代替异步语音识别的音频来模拟特定字输入到语音识别器，并指定识别器如何处理单词和加载的语音识别语法间的 Unicode 比较。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-315">Emulates input of specific words to the speech recognizer, using an array of <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-316">语音识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件就像不模拟识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-316">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="bba50-317">当识别器完成异步标识操作时，将引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-317">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="bba50-318">识别器使用`compareOptions`如果它适用于输入短语语法规则。</span><span class="sxs-lookup"><span data-stu-id="bba50-318">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="bba50-319">随 Vista 和 Windows 7 的识别器忽略大小写，如果<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>或<xref:System.Globalization.CompareOptions.IgnoreCase>值是否存在。</span><span class="sxs-lookup"><span data-stu-id="bba50-319">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="bba50-320">识别器始终忽略字符宽度，永远不会忽略假名类型。</span><span class="sxs-lookup"><span data-stu-id="bba50-320">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="bba50-321">识别器还忽略新行和额外的空白区域，并将标点符号视为文字输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-321">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="bba50-322">有关字符宽度和假名类型的详细信息，请参阅<xref:System.Globalization.CompareOptions>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba50-322">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bba50-323">识别器没有加载的语音识别语法，或者识别器不是完全标识的异步操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-323">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-324">
            <paramref name="wordUnits" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-324">
              <paramref name="wordUnits" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-325">
            <paramref name="wordUnits" /> 包含一个或多个 <see langword="null" /> 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-325">
              <paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="bba50-326">
            <paramref name="compareOptions" /> 包含值 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />， <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />，或 <see cref="F:System.Globalization.CompareOptions.StringSort" /> 标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-326">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="bba50-327">标识操作的输入相。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-327">The input phrase for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="bba50-328">描述用于模拟识别操作的比较说明类型的枚举值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-328">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-329">使用文本代替异步语音识别的音频来模拟短语输入到语音识别器，并指定识别器如何处理短语和加载的语音识别语法间的 Unicode 比较。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-329">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-330">语音识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件就像不模拟识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-330">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="bba50-331">当识别器完成异步标识操作时，将引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-331">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="bba50-332">识别器使用`compareOptions`如果它适用于输入短语语法规则。</span><span class="sxs-lookup"><span data-stu-id="bba50-332">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="bba50-333">随 Vista 和 Windows 7 的识别器忽略大小写，如果<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>或<xref:System.Globalization.CompareOptions.IgnoreCase>值是否存在。</span><span class="sxs-lookup"><span data-stu-id="bba50-333">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="bba50-334">识别器始终忽略字符宽度，永远不会忽略假名类型。</span><span class="sxs-lookup"><span data-stu-id="bba50-334">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="bba50-335">识别器还忽略新行和额外的空白区域，并将标点符号视为文字输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-335">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="bba50-336">有关字符宽度和假名类型的详细信息，请参阅<xref:System.Globalization.CompareOptions>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba50-336">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bba50-337">识别器没有加载的语音识别语法，或者识别器不是完全标识的异步操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-337">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-338">
            <paramref name="inputText" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-338">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-339">
            <paramref name="inputText" /> 为空字符串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-339">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="bba50-340">
            <paramref name="compareOptions" /> 包含值 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />， <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />，或 <see cref="F:System.Globalization.CompareOptions.StringSort" /> 标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-340">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeCompleted : EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " Usage="member this.EmulateRecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-341">当 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 完成模拟输入的异步标识操作的时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-341">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation of emulated input.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-342">每个<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法开始异步标识操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-342">Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="bba50-343"><xref:System.Speech.Recognition.SpeechRecognitionEngine>引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件时完成异步操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-343">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="bba50-344"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>操作可引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-344">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events.</span></span> <span data-ttu-id="bba50-345"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件是最后这种情况下识别器引发指定的操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-345">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="bba50-346">如果模拟的识别成功，则可以访问使用下面的任一识别结果：</span><span class="sxs-lookup"><span data-stu-id="bba50-346">If emulated recognition was successful, you can access the recognition result using the either of the following:</span></span>  
  
-   <span data-ttu-id="bba50-347"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>中的属性<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs>对象的处理程序中<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-347">The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
-   <span data-ttu-id="bba50-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> 中的属性<xref:System.Speech.Recognition.SpeechRecognizedEventArgs>对象的处理程序中<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="bba50-349">如果不成功，模拟的识别<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>不会引发事件和<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>将为 null。</span><span class="sxs-lookup"><span data-stu-id="bba50-349">If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.</span></span>  
  
 <span data-ttu-id="bba50-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> 派生自 <xref:System.ComponentModel.AsyncCompletedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="bba50-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="bba50-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> 派生自 <xref:System.Speech.Recognition.RecognitionEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="bba50-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="bba50-352">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> 委托时，需要标识将要处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-352">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-353">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-353">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-354">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-354">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-355">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-355">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-356">下面的示例是加载语音识别语法，并演示异步模拟的输入、 相关联的识别结果和相关的事件引发的语音识别器的控制台应用程序的一部分。</span><span class="sxs-lookup"><span data-stu-id="bba50-356">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call mathches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-357">获取或设置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 将在终结识别操作之前，于明确输入末尾接受的无声段间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-357">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of unambiguous input before finalizing a recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-358">安静间隔的持续时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-358">The duration of the interval of silence.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-359">语音识别器识别输入不明确时使用此超时间隔。</span><span class="sxs-lookup"><span data-stu-id="bba50-359">The speech recognizer uses this timeout interval when the recognition input is unambiguous.</span></span> <span data-ttu-id="bba50-360">例如，对于语音识别语法支持的可以识别的"新游戏请"或"新游戏"，"新游戏请"是一个明确的输入，且"新游戏"是不明确输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-360">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="bba50-361">此属性确定语音识别引擎等待的时间增加其他输入在终结识别操作之前。</span><span class="sxs-lookup"><span data-stu-id="bba50-361">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="bba50-362">超时间隔为 0 秒至 10 秒，非独占。</span><span class="sxs-lookup"><span data-stu-id="bba50-362">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="bba50-363">默认值为 150 毫秒。</span><span class="sxs-lookup"><span data-stu-id="bba50-363">The default is 150 milliseconds.</span></span>  
  
 <span data-ttu-id="bba50-364">若要设置不明确的输入的超时间隔，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-364">To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="bba50-365">将属性设置为小于 0 秒或大于 10 秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-365">This property is set to less than 0 seconds or greater than 10 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeoutAmbiguous As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeoutAmbiguous { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeoutAmbiguous : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-366">获取或设置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 将在终结识别操作之前，于二义性输入末尾接受的无声段间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-366">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of ambiguous input before finalizing a recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-367">安静间隔的持续时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-367">The duration of the interval of silence.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-368">语音识别器识别输入不明确时使用此超时间隔。</span><span class="sxs-lookup"><span data-stu-id="bba50-368">The speech recognizer uses this timeout interval when the recognition input is ambiguous.</span></span> <span data-ttu-id="bba50-369">例如，对于语音识别语法支持的可以识别的"新游戏请"或"新游戏"，"新游戏请"是一个明确的输入，且"新游戏"是不明确输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-369">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="bba50-370">此属性确定语音识别引擎等待的时间增加其他输入在终结识别操作之前。</span><span class="sxs-lookup"><span data-stu-id="bba50-370">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="bba50-371">超时间隔为 0 秒至 10 秒，非独占。</span><span class="sxs-lookup"><span data-stu-id="bba50-371">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="bba50-372">默认值为 500 毫秒。</span><span class="sxs-lookup"><span data-stu-id="bba50-372">The default is 500 milliseconds.</span></span>  
  
 <span data-ttu-id="bba50-373">若要设置明确输入的超时间隔，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-373">To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="bba50-374">将属性设置为小于 0 秒或大于 10 秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-374">This property is set to less than 0 seconds or greater than 10 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammars : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-375">获取在此 <see cref="T:System.Speech.Recognition.Grammar" /> 实例中加载的 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-375">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-376">
            <see cref="T:System.Speech.Recognition.Grammar" /> 对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-376">The collection of <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bba50-377">下面的示例将输出到控制台的每个语音识别器当前加载的语音识别语法的信息。</span><span class="sxs-lookup"><span data-stu-id="bba50-377">The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba50-378">复制要避免错误，如果此方法枚举集合的元素时修改该集合的语法集合。</span><span class="sxs-lookup"><span data-stu-id="bba50-378">Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.</span></span>  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan InitialSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.InitialSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-379">获取或设置时间间隔，在此时间间隔内，<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 将在终结识别之前接受仅包含无声段的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-379">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only silence before finalizing recognition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-380">安静间隔的持续时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-380">The duration of the interval of silence.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-381">每个语音识别器有一个算法来区分 silence 和语音。</span><span class="sxs-lookup"><span data-stu-id="bba50-381">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="bba50-382">如果识别器输入初始无声段超时期限内，则静默，识别器完成该识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-382">If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="bba50-383">有关异步标识操作和仿真，识别器将引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，其中<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType>属性是`true`，和<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType>属性是`null`。</span><span class="sxs-lookup"><span data-stu-id="bba50-383">For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="bba50-384">有关同步的识别操作和仿真，识别器返回`null`，而不是有效<xref:System.Speech.Recognition.RecognitionResult>。</span><span class="sxs-lookup"><span data-stu-id="bba50-384">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="bba50-385">如果初始无声段超时间隔设置为 0，识别器不执行初始无声段超时复选。</span><span class="sxs-lookup"><span data-stu-id="bba50-385">If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.</span></span> <span data-ttu-id="bba50-386">超时间隔可以是任何非负值。</span><span class="sxs-lookup"><span data-stu-id="bba50-386">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="bba50-387">默认值为 0 秒。</span><span class="sxs-lookup"><span data-stu-id="bba50-387">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-388">下面的示例显示了一部分演示基本的语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-388">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="bba50-389">该示例设置<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>并<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>的属性<xref:System.Speech.Recognition.SpeechRecognitionEngine>之前启动语音识别。</span><span class="sxs-lookup"><span data-stu-id="bba50-389">The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="bba50-390">语音识别器的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>并<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件输出到控制台，以演示的事件信息如何<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>的属性<xref:System.Speech.Recognition.SpeechRecognitionEngine>属性会影响识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-390">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="bba50-391">该属性已设置为小于 0 秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-391">This property is set to less than 0 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstalledRecognizers () As ReadOnlyCollection(Of RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizerInfo ^&gt; ^ InstalledRecognizers();" />
      <MemberSignature Language="F#" Value="static member InstalledRecognizers : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-392">返回有关当前系统中安装的所有语音识别器的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-392">Returns information for all of the installed speech recognizers on the current system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bba50-393">描述安装的识别器的 <see cref="T:System.Speech.Recognition.RecognizerInfo" /> 对象的只读集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-393">A read-only collection of the <see cref="T:System.Speech.Recognition.RecognizerInfo" /> objects that describe the installed recognizers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-394">若要获取当前的识别器的相关信息，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-394">To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-395">下面的示例显示了一部分演示基本的语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-395">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="bba50-396">该示例使用返回的集合<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法来查找支持英语语言的语音识别器。</span><span class="sxs-lookup"><span data-stu-id="bba50-396">The example uses the collection returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method to find a speech recognizer that supports the English language.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="bba50-397">要加载的语法对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-397">The grammar object to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-398">同步加载 <see cref="T:System.Speech.Recognition.Grammar" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-398">Synchronously loads a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-399">识别器将引发异常，如果<xref:System.Speech.Recognition.Grammar>对象已被加载、 正在以异步方式加载，或无法加载到任何识别器。</span><span class="sxs-lookup"><span data-stu-id="bba50-399">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="bba50-400">无法加载相同<xref:System.Speech.Recognition.Grammar>对象的多个实例<xref:System.Speech.Recognition.SpeechRecognitionEngine>。</span><span class="sxs-lookup"><span data-stu-id="bba50-400">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="bba50-401">相反，创建一个新<xref:System.Speech.Recognition.Grammar>为每个对象<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例。</span><span class="sxs-lookup"><span data-stu-id="bba50-401">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="bba50-402">如果识别器正在运行，应用程序必须使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暂停之前加载、 卸载、 启用，或禁用某个语法语音识别引擎。</span><span class="sxs-lookup"><span data-stu-id="bba50-402">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="bba50-403">当您加载语法时，它是默认情况下启用。</span><span class="sxs-lookup"><span data-stu-id="bba50-403">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="bba50-404">若要禁用已加载的语法，请使用<xref:System.Speech.Recognition.Grammar.Enabled%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-404">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="bba50-405">若要加载<xref:System.Speech.Recognition.Grammar>对象以异步方式，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-405">To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-406">下面的示例显示了一部分演示基本的语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-406">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="bba50-407">此示例将创建<xref:System.Speech.Recognition.DictationGrammar>并将其加载到语音识别器。</span><span class="sxs-lookup"><span data-stu-id="bba50-407">The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-408">
            <paramref name="Grammar" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-408">
              <paramref name="Grammar" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bba50-409">
            <paramref name="Grammar" /> 不在有效状态中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-409">
              <paramref name="Grammar" /> is not in a valid state.</span>
          </span>
        </exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarAsync : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammarAsync grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="bba50-410">加载语音识别语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-410">The speech recognition grammar to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-411">异步加载语音识别语法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-411">Asynchronously loads a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-412">当识别器完成加载<xref:System.Speech.Recognition.Grammar>对象，它会发出<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-412">When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="bba50-413">识别器将引发异常，如果<xref:System.Speech.Recognition.Grammar>对象已被加载、 正在以异步方式加载，或无法加载到任何识别器。</span><span class="sxs-lookup"><span data-stu-id="bba50-413">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="bba50-414">无法加载相同<xref:System.Speech.Recognition.Grammar>对象的多个实例<xref:System.Speech.Recognition.SpeechRecognitionEngine>。</span><span class="sxs-lookup"><span data-stu-id="bba50-414">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="bba50-415">相反，创建一个新<xref:System.Speech.Recognition.Grammar>为每个对象<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例。</span><span class="sxs-lookup"><span data-stu-id="bba50-415">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="bba50-416">如果识别器正在运行，应用程序必须使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暂停之前加载、 卸载、 启用，或禁用某个语法语音识别引擎。</span><span class="sxs-lookup"><span data-stu-id="bba50-416">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="bba50-417">当您加载语法时，它是默认情况下启用。</span><span class="sxs-lookup"><span data-stu-id="bba50-417">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="bba50-418">若要禁用已加载的语法，请使用<xref:System.Speech.Recognition.Grammar.Enabled%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-418">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="bba50-419">若要以同步方式加载语音识别语法，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-419">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-420">
            <paramref name="Grammar" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-420">
              <paramref name="Grammar" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bba50-421">
            <paramref name="Grammar" /> 不在有效状态中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-421">
              <paramref name="Grammar" /> is not in a valid state.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="bba50-422">异步操作已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-422">The asynchronous operation was canceled.</span>
          </span>
        </exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarCompleted : EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " Usage="member this.LoadGrammarCompleted : System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-423">当 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 完成 <see cref="T:System.Speech.Recognition.Grammar" /> 对象的异步加载时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-423">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finishes the asynchronous loading of a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-424">识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法启动异步操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-424">The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="bba50-425"><xref:System.Speech.Recognition.SpeechRecognitionEngine>时完成该操作引发此事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-425">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation.</span></span> <span data-ttu-id="bba50-426">若要获取<xref:System.Speech.Recognition.Grammar>对象的识别器加载，请使用<xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A>关联的属性<xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="bba50-426">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="bba50-427">若要获取当前<xref:System.Speech.Recognition.Grammar>对象的识别器加载后，使用的识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-427">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="bba50-428">如果识别器正在运行，应用程序必须使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暂停之前加载、 卸载、 启用，或禁用某个语法语音识别引擎。</span><span class="sxs-lookup"><span data-stu-id="bba50-428">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="bba50-429">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> 委托时，需要标识将处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-429">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-430">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-430">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-431">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-431">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-432">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-432">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-433">下面的示例创建进程内语音识别器，然后创建两种类型的语法用于识别特定的词和接受自由听写。</span><span class="sxs-lookup"><span data-stu-id="bba50-433">The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="bba50-434">此示例都会构造<xref:System.Speech.Recognition.Grammar>对象从每个已完成的语音识别语法，然后以异步方式加载<xref:System.Speech.Recognition.Grammar>对象添加到<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例。</span><span class="sxs-lookup"><span data-stu-id="bba50-434">The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span> <span data-ttu-id="bba50-435">识别器的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted>并<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件的名称写入控制台<xref:System.Speech.Recognition.Grammar>用于分别执行识别和文本识别结果的对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-435">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAlternates : int with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-436">获取或设置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 为每个识别操作返回的备用识别结果的最大数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-436">Gets or sets the maximum number of alternate recognition results that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> returns for each recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-437">要返回的替换结果的数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-437">The number of alternate results to return.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-438"><xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>的属性<xref:System.Speech.Recognition.RecognitionResult>类中包含的集合<xref:System.Speech.Recognition.RecognizedPhrase>对象表示输入的可能的解释。</span><span class="sxs-lookup"><span data-stu-id="bba50-438">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.</span></span>  
  
 <span data-ttu-id="bba50-439">默认值为<xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A>为 10。</span><span class="sxs-lookup"><span data-stu-id="bba50-439">The default value for <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="bba50-440">
            <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> 设置为小于 0 的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-440">
              <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> is set to a value less than 0.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryRecognizerSetting (settingName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ QueryRecognizerSetting(System::String ^ settingName);" />
      <MemberSignature Language="F#" Value="member this.QueryRecognizerSetting : string -&gt; obj" Usage="speechRecognitionEngine.QueryRecognizerSetting settingName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName">
          <span data-ttu-id="bba50-441">要返回的设置的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-441">The name of the setting to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-442">为识别器返回设置的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-442">Returns the values of settings for the recognizer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bba50-443">设置的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-443">The value of the setting.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-444">识别器设置可以包含字符串、 64 位整数或内存地址数据。</span><span class="sxs-lookup"><span data-stu-id="bba50-444">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="bba50-445">下表介绍了有关 Microsoft Speech API (SAPI) 定义的设置的符合标准的识别器。</span><span class="sxs-lookup"><span data-stu-id="bba50-445">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="bba50-446">以下设置对每个支持所设置的识别器必须具有相同的范围。</span><span class="sxs-lookup"><span data-stu-id="bba50-446">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="bba50-447">SAPI 符合识别器不需要支持这些设置，并且可以支持其他设置。</span><span class="sxs-lookup"><span data-stu-id="bba50-447">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="bba50-448">name</span><span class="sxs-lookup"><span data-stu-id="bba50-448">Name</span></span>|<span data-ttu-id="bba50-449">描述</span><span class="sxs-lookup"><span data-stu-id="bba50-449">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="bba50-450">指定识别器的 CPU 占用率。</span><span class="sxs-lookup"><span data-stu-id="bba50-450">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="bba50-451">范围是从 0 到 100。</span><span class="sxs-lookup"><span data-stu-id="bba50-451">The range is from 0 to 100.</span></span> <span data-ttu-id="bba50-452">默认值为 50。</span><span class="sxs-lookup"><span data-stu-id="bba50-452">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="bba50-453">语音识别器完成识别操作之前，请指示明确输入末尾处的无声段的长度。</span><span class="sxs-lookup"><span data-stu-id="bba50-453">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="bba50-454">范围是从 0 到 10000 毫秒 (ms)。</span><span class="sxs-lookup"><span data-stu-id="bba50-454">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="bba50-455">此设置对应于识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-455">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  <span data-ttu-id="bba50-456">默认值 = 150ms年。</span><span class="sxs-lookup"><span data-stu-id="bba50-456">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="bba50-457">语音识别器完成识别操作之前，请指示二义性输入末尾处的无声段的长度。</span><span class="sxs-lookup"><span data-stu-id="bba50-457">Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="bba50-458">范围是从 0 到 10,000ms。</span><span class="sxs-lookup"><span data-stu-id="bba50-458">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="bba50-459">此设置对应于识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-459">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="bba50-460">默认值为 500 毫秒。</span><span class="sxs-lookup"><span data-stu-id="bba50-460">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="bba50-461">指示修改的声学模型是否为 ON (值 = `1`) 或关闭 (值 = `0`)。</span><span class="sxs-lookup"><span data-stu-id="bba50-461">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="bba50-462">默认值是`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="bba50-462">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="bba50-463">指示是否自动适应为 ON (值 = `1`) 或关闭 (值 = `0`)，并保存在注册表中的设置。</span><span class="sxs-lookup"><span data-stu-id="bba50-463">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="bba50-464">默认值是`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="bba50-464">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="bba50-465">若要为识别器更新设置，请使用其中一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-465">To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-466">下面的示例是一个控制台应用程序的输出数为支持 EN-US 区域设置的识别器定义的设置的值的一部分。</span><span class="sxs-lookup"><span data-stu-id="bba50-466">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="bba50-467">该示例生成以下输出。</span><span class="sxs-lookup"><span data-stu-id="bba50-467">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-468">
            <paramref name="settingName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-468">
              <paramref name="settingName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-469">
            <paramref name="settingName" /> 为空字符串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-469">
              <paramref name="settingName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="bba50-470">不用该名称设置的识别器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-470">The recognizer does not have a setting by that name.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-471">启动同步语音识别操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-471">Starts a synchronous speech recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-472">这些方法执行单一、 同步的识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-472">These methods perform a single, synchronous recognition operation.</span></span> <span data-ttu-id="bba50-473">识别器执行此操作对其已加载并且已启用的语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="bba50-473">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="bba50-474">此方法的调用，过程识别器可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="bba50-474">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="bba50-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="bba50-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="bba50-476">当识别器检测到它可以标识为语音的输入时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-476">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="bba50-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="bba50-478">输入与某个活动的语法创建模糊匹配时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-478">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="bba50-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="bba50-480">当识别器终结识别操作时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-480">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="bba50-481">识别器不会引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件时使用的一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-481">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 <span data-ttu-id="bba50-482"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法返回<xref:System.Speech.Recognition.RecognitionResult>对象，或`null`如果操作不成功或识别器未启用。</span><span class="sxs-lookup"><span data-stu-id="bba50-482">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods return a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful or the recognizer is not enabled.</span></span>  
  
 <span data-ttu-id="bba50-483">同步标识操作可能会出于以下原因失败：</span><span class="sxs-lookup"><span data-stu-id="bba50-483">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="bba50-484">超时间隔过期之前未检测到语音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>属性，或对于`initialSilenceTimeout`参数的<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-484">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties, or for the `initialSilenceTimeout` parameter of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> method.</span></span>  
  
-   <span data-ttu-id="bba50-485">检测到语音识别引擎，但未找到匹配项中的任何加载和已启用<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-485">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="bba50-486">若要修改识别器如何处理语音或相对于识别的无声段的计时，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-486">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="bba50-487"><xref:System.Speech.Recognition.SpeechRecognitionEngine>必须至少一个<xref:System.Speech.Recognition.Grammar>执行识别前加载对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-487">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="bba50-488">若要加载语音识别语法，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-488">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-489">若要执行异步标识，请使用其中一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-489">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize () As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize();" />
      <MemberSignature Language="F#" Value="member this.Recognize : unit -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-490">执行同步语音识别操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-490">Performs a synchronous speech recognition operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bba50-491">输入的标识结果或 <see langword="null" /> ，如果操作不成功或识别器未启用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-491">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-492">此方法执行单个识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-492">This method performs a single recognition operation.</span></span> <span data-ttu-id="bba50-493">识别器执行此操作对其已加载并且已启用的语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="bba50-493">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="bba50-494">此方法的调用，过程识别器可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="bba50-494">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="bba50-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="bba50-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="bba50-496">当识别器检测到它可以标识为语音的输入时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-496">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="bba50-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="bba50-498">输入与某个活动的语法创建模糊匹配时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-498">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="bba50-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="bba50-500">当识别器终结识别操作时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-500">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="bba50-501">识别器不会引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件时使用此方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-501">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="bba50-502"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize>方法将返回<xref:System.Speech.Recognition.RecognitionResult>对象，或`null`如果操作不成功。</span><span class="sxs-lookup"><span data-stu-id="bba50-502">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="bba50-503">同步标识操作可能会出于以下原因失败：</span><span class="sxs-lookup"><span data-stu-id="bba50-503">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="bba50-504">超时间隔过期之前未检测到语音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-504">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="bba50-505">检测到语音识别引擎，但未找到匹配项中的任何加载和已启用<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-505">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="bba50-506">若要执行异步标识，请使用其中一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-506">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-507">下面的示例显示了一部分演示基本的语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-507">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="bba50-508">此示例将创建<xref:System.Speech.Recognition.DictationGrammar>、 将其加载到进程内语音识别器和执行一个识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-508">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize (initialSilenceTimeout As TimeSpan) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize(TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="F#" Value="member this.Recognize : TimeSpan -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize initialSilenceTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout">
          <span data-ttu-id="bba50-509">时间间隔语音识别器接受仅包含在完成标识之前的无声输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-509">The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-510">使用指定初始静音超时执行同步语音识别操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-510">Performs a synchronous speech recognition operation with a specified initial silence timeout period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bba50-511">输入的标识结果或 <see langword="null" /> ，如果操作不成功或识别器未启用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-511">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-512">如果语音识别引擎会检测到语音所指定的时间间隔内`initialSilenceTimeout`自变量，<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29>执行单个识别操作，然后终止。</span><span class="sxs-lookup"><span data-stu-id="bba50-512">If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> performs a single recognition operation and then terminates.</span></span>  <span data-ttu-id="bba50-513">`initialSilenceTimeout`形参取代了识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-513">The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.</span></span>  
  
 <span data-ttu-id="bba50-514">此方法的调用，过程识别器可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="bba50-514">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="bba50-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="bba50-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="bba50-516">当识别器检测到它可以标识为语音的输入时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-516">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="bba50-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="bba50-518">输入与某个活动的语法创建模糊匹配时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-518">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="bba50-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="bba50-520">当识别器终结识别操作时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-520">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="bba50-521">识别器不会引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件时使用此方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-521">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="bba50-522"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize>方法将返回<xref:System.Speech.Recognition.RecognitionResult>对象，或`null`如果操作不成功。</span><span class="sxs-lookup"><span data-stu-id="bba50-522">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="bba50-523">同步标识操作可能会出于以下原因失败：</span><span class="sxs-lookup"><span data-stu-id="bba50-523">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="bba50-524">超时间隔过期之前未检测到语音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或为`initialSilenceTimeout`参数。</span><span class="sxs-lookup"><span data-stu-id="bba50-524">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.</span></span>  
  
-   <span data-ttu-id="bba50-525">检测到语音识别引擎，但未找到匹配项中的任何加载和已启用<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-525">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="bba50-526">若要执行异步标识，请使用其中一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-526">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-527">下面的示例显示了一部分演示基本的语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-527">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="bba50-528">此示例将创建<xref:System.Speech.Recognition.DictationGrammar>、 将其加载到进程内语音识别器和执行一个识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-528">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-529">启动异步语音识别操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-529">Starts an asynchronous speech recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-530">这些方法执行单个或多个异步标识操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-530">These methods perform single or multiple, asynchronous recognition operations.</span></span> <span data-ttu-id="bba50-531">识别器执行其已加载并且已启用的语音识别语法针对每个操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-531">The recognizer performs each operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="bba50-532">此方法的调用，过程识别器可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="bba50-532">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="bba50-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="bba50-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="bba50-534">当识别器检测到它可以标识为语音的输入时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-534">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="bba50-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="bba50-536">输入与某个活动的语法创建模糊匹配时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-536">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="bba50-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="bba50-538">当识别器终结识别操作时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-538">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="bba50-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="bba50-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="bba50-540">时引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>操作完成。</span><span class="sxs-lookup"><span data-stu-id="bba50-540">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="bba50-541">若要检索异步标识操作的结果，请将事件处理程序附加到识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-541">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="bba50-542">识别器引发它成功完成同步或异步识别操作时此事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-542">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="bba50-543">如果不成功，识别<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A>上的属性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>对象，可以访问的处理程序中<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，将为`null`。</span><span class="sxs-lookup"><span data-stu-id="bba50-543">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="bba50-544">异步标识操作可能会出于以下原因失败：</span><span class="sxs-lookup"><span data-stu-id="bba50-544">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="bba50-545">超时间隔过期之前未检测到语音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-545">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="bba50-546">检测到语音识别引擎，但未找到匹配项中的任何加载和已启用<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-546">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
-   <span data-ttu-id="bba50-547"><xref:System.Speech.Recognition.SpeechRecognitionEngine>必须至少一个<xref:System.Speech.Recognition.Grammar>执行识别前加载对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-547">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="bba50-548">若要加载语音识别语法，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-548">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="bba50-549">若要修改识别器如何处理语音或相对于识别的无声段的计时，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-549">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="bba50-550">若要执行同步识别，可以使用其中一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-550">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-551">执行单个异步语音识别操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-551">Performs a single, asynchronous speech recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-552">此方法执行单一、 异步识别操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-552">This method performs a single, asynchronous recognition operation.</span></span> <span data-ttu-id="bba50-553">识别器执行针对其已加载并且已启用的语音识别语法的操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-553">The recognizer performs the operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="bba50-554">此方法的调用，过程识别器可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="bba50-554">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="bba50-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="bba50-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="bba50-556">当识别器检测到它可以标识为语音的输入时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-556">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="bba50-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="bba50-558">输入与某个活动的语法创建模糊匹配时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-558">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="bba50-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="bba50-560">当识别器终结识别操作时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-560">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="bba50-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="bba50-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="bba50-562">时引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>操作完成。</span><span class="sxs-lookup"><span data-stu-id="bba50-562">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="bba50-563">若要检索异步标识操作的结果，请将事件处理程序附加到识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-563">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="bba50-564">识别器引发它成功完成同步或异步识别操作时此事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-564">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="bba50-565">如果不成功，识别<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A>上的属性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>对象，可以访问的处理程序中<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，将为`null`。</span><span class="sxs-lookup"><span data-stu-id="bba50-565">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="bba50-566">若要执行同步识别，可以使用其中一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-566">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-567">下面的示例显示了一部分演示基本的异步语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-567">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="bba50-568">此示例将创建<xref:System.Speech.Recognition.DictationGrammar>，将其加载到进程内语音识别器，并执行一个异步标识操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-568">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation.</span></span> <span data-ttu-id="bba50-569">若要演示的识别器在操作期间引发的事件中包含事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-569">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync (mode As RecognizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync(System::Speech::Recognition::RecognizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : System.Speech.Recognition.RecognizeMode -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="bba50-570">指示是否执行一个或多个识别操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-570">Indicates whether to perform one or multiple recognition operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-571">执行一个或多个异步语音识别操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-571">Performs one or more asynchronous speech recognition operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-572">如果`mode`是<xref:System.Speech.Recognition.RecognizeMode.Multiple>，识别器将继续执行直到异步标识操作<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-572">If `mode` is <xref:System.Speech.Recognition.RecognizeMode.Multiple>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.</span></span>  
  
 <span data-ttu-id="bba50-573">此方法的调用，过程识别器可以引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="bba50-573">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="bba50-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="bba50-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="bba50-575">当识别器检测到它可以标识为语音的输入时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-575">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="bba50-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="bba50-577">输入与某个活动的语法创建模糊匹配时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-577">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="bba50-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="bba50-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="bba50-579">当识别器终结识别操作时引发。</span><span class="sxs-lookup"><span data-stu-id="bba50-579">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="bba50-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="bba50-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="bba50-581">时引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>操作完成。</span><span class="sxs-lookup"><span data-stu-id="bba50-581">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="bba50-582">若要检索异步标识操作的结果，请将事件处理程序附加到识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-582">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="bba50-583">识别器引发它成功完成同步或异步识别操作时此事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-583">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="bba50-584">如果不成功，识别<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A>上的属性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>对象，可以访问的处理程序中<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，将为`null`。</span><span class="sxs-lookup"><span data-stu-id="bba50-584">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="bba50-585">异步标识操作可能会出于以下原因失败：</span><span class="sxs-lookup"><span data-stu-id="bba50-585">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="bba50-586">超时间隔过期之前未检测到语音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-586">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="bba50-587">检测到语音识别引擎，但未找到匹配项中的任何加载和已启用<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-587">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="bba50-588">若要执行同步识别，可以使用其中一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-588">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-589">下面的示例显示了一部分演示基本的异步语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-589">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="bba50-590">此示例将创建<xref:System.Speech.Recognition.DictationGrammar>，将其加载到进程内语音识别器，并执行多个异步标识操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-590">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations.</span></span> <span data-ttu-id="bba50-591">异步操作都会在 30 秒后被取消。</span><span class="sxs-lookup"><span data-stu-id="bba50-591">The asynchronous operations are cancelled after 30 seconds.</span></span> <span data-ttu-id="bba50-592">若要演示的识别器在操作期间引发的事件中包含事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-592">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncCancel : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-593">停止异步标识，而不必等待当前标识该操作完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-593">Terminates asynchronous recognition without waiting for the current recognition operation to complete.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-594">此方法立即完成异步标识。</span><span class="sxs-lookup"><span data-stu-id="bba50-594">This method immediately finalizes asynchronous recognition.</span></span> <span data-ttu-id="bba50-595">如果当前的异步标识操作正在接收输入，输入被截断，并在操作完成中的现有输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-595">If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.</span></span> <span data-ttu-id="bba50-596">识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件的异步操作已取消，并设置<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>的属性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>到`true`。</span><span class="sxs-lookup"><span data-stu-id="bba50-596">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="bba50-597">此方法取消异步操作由发起<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-597">This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="bba50-598">若要停止异步标识，而无需截断输入，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-598">To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-599">下面的示例显示了一部分演示如何使用一个控制台应用程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-599">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span> <span data-ttu-id="bba50-600">该示例创建和加载语音识别语法、 启动继续异步标识操作，并暂停 2 秒之前取消了操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-600">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation.</span></span> <span data-ttu-id="bba50-601">识别器从文件中，接收输入 c:\temp\audioinput\sample.wav。</span><span class="sxs-lookup"><span data-stu-id="bba50-601">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="bba50-602">若要演示的识别器在操作期间引发的事件中包含事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-602">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncStop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncStop();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncStop : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-603">当前标识该操作完成后，停止异步标识。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-603">Stops asynchronous recognition after the current recognition operation completes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-604">此方法完成异步标识，而无需截断输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-604">This method finalizes asynchronous recognition without truncating input.</span></span> <span data-ttu-id="bba50-605">如果当前的异步标识操作正在接收输入，识别器将继续接受输入，直到完成当前标识该操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-605">If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.</span></span> <span data-ttu-id="bba50-606">识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件的异步操作已停止，并设置<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>的属性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>到`true`。</span><span class="sxs-lookup"><span data-stu-id="bba50-606">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="bba50-607">此方法停止由启动异步操作<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-607">This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="bba50-608">若要立即取消与现有的输入的异步标识，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-608">To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-609">下面的示例显示了一部分演示如何使用一个控制台应用程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-609">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span> <span data-ttu-id="bba50-610">该示例创建和加载语音识别语法、 启动继续异步标识操作，并暂停 2 秒之前它将停止该操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-610">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation.</span></span> <span data-ttu-id="bba50-611">识别器从文件中，接收输入 c:\temp\audioinput\sample.wav。</span><span class="sxs-lookup"><span data-stu-id="bba50-611">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="bba50-612">若要演示的识别器在操作期间引发的事件中包含事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-612">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizeCompleted As EventHandler(Of RecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizeCompletedEventArgs ^&gt; ^ RecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.RecognizeCompleted : EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " Usage="member this.RecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-613">当 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 完成异步标识操作的时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-613">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-614"><xref:System.Speech.Recognition.SpeechRecognitionEngine>对象的<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法启动异步标识操作。</span><span class="sxs-lookup"><span data-stu-id="bba50-614">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation.</span></span> <span data-ttu-id="bba50-615">当识别器完成异步操作时，它会发出此事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-615">When the recognizer finalizes the asynchronous operation, it raises this event.</span></span>  
  
 <span data-ttu-id="bba50-616">使用的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，可以访问<xref:System.Speech.Recognition.RecognitionResult>中<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-616">Using the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object.</span></span> <span data-ttu-id="bba50-617">如果不成功，识别<xref:System.Speech.Recognition.RecognitionResult>将为`null`。</span><span class="sxs-lookup"><span data-stu-id="bba50-617">If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`.</span></span> <span data-ttu-id="bba50-618">若要确定是否出现超时或音频输入中的中断导致识别失败，可以访问的属性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>，或<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>。</span><span class="sxs-lookup"><span data-stu-id="bba50-618">To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span></span>  
  
 <span data-ttu-id="bba50-619">有关更多信息，请参见 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> 类。</span><span class="sxs-lookup"><span data-stu-id="bba50-619">See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.</span></span>  
  
 <span data-ttu-id="bba50-620">若要获取最佳拒绝的识别候选项的详细信息，请将附加的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-620">To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.</span></span>  
  
 <span data-ttu-id="bba50-621">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> 委托时，需要标识将处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-621">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-622">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-622">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-623">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-623">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-624">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-624">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-625">下面的示例识别短语，如"爵士乐类别中显示的 artist 列表"或"显示相册 gospel"。</span><span class="sxs-lookup"><span data-stu-id="bba50-625">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="bba50-626">该示例使用的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件显示在控制台中识别的结果有关的信息。</span><span class="sxs-lookup"><span data-stu-id="bba50-626">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event to display information about the results of recognition in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerAudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-627">获取在处理的音频输入中的 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 当前位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-627">Gets the current location of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in the audio input that it is processing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-628">识别器的位置在处理音频的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-628">The position of the recognizer in the audio input that it is processing.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-629">特定于每个语音识别器的音频位置。</span><span class="sxs-lookup"><span data-stu-id="bba50-629">The audio position is specific to each speech recognizer.</span></span> <span data-ttu-id="bba50-630">启用后，建立的输入流的零值。</span><span class="sxs-lookup"><span data-stu-id="bba50-630">The zero value of an input stream is established when it is enabled.</span></span>  
  
 <span data-ttu-id="bba50-631"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>属性引用<xref:System.Speech.Recognition.SpeechRecognitionEngine>其音频输入中的对象的位置。</span><span class="sxs-lookup"><span data-stu-id="bba50-631">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input.</span></span> <span data-ttu-id="bba50-632">与此相反，<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>属性引用其生成的音频流中的输入的设备的位置。</span><span class="sxs-lookup"><span data-stu-id="bba50-632">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="bba50-633">这些位置可以是不同的。</span><span class="sxs-lookup"><span data-stu-id="bba50-633">These positions can be different.</span></span> <span data-ttu-id="bba50-634">例如，如果识别器已收到输入并为具有不还生成识别结果然后的值<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>属性小于的值<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-634">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerInfo : System.Speech.Recognition.RecognizerInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-635">获取有关 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 的当前实例的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-635">Gets information about the current instance of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bba50-636">有关当前语音识别器的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-636">Information about the current speech recognizer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-637">若要获得当前系统的所有安装的语音识别器的信息，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-637">To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-638">下面的示例获取当前进程内语音识别引擎的数据的部分列表。</span><span class="sxs-lookup"><span data-stu-id="bba50-638">The following example gets a partial list of data for the current in-process speech recognition engine.</span></span> <span data-ttu-id="bba50-639">有关详情，请参阅<xref:System.Speech.Recognition.RecognizerInfo>。</span><span class="sxs-lookup"><span data-stu-id="bba50-639">For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberSignature Language="F#" Value="member this.RecognizerUpdateReached : EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " Usage="member this.RecognizerUpdateReached : System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-640">当运行的 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 暂停接受修改时引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-640">Raised when a running <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pauses to accept modifications.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-641">应用程序必须使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暂停正在运行的实例<xref:System.Speech.Recognition.SpeechRecognitionEngine>之前修改其设置或其<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-641">Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="bba50-642"><xref:System.Speech.Recognition.SpeechRecognitionEngine>已准备好接受修改时引发此事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-642">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="bba50-643">例如，虽然<xref:System.Speech.Recognition.SpeechRecognitionEngine>是已暂停，您可以加载、 卸载、 启用和禁用<xref:System.Speech.Recognition.Grammar>对象，并修改的值<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-643">For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span> <span data-ttu-id="bba50-644">有关更多信息，请参见 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-644">For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-645">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> 委托时，需要标识将处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-645">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-646">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-646">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-647">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-647">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-648">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-648">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-649">下面的示例演示的控制台应用程序加载和卸载<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-649">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="bba50-650">应用程序使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法来请求语音识别引擎暂停以便它可以接收更新。</span><span class="sxs-lookup"><span data-stu-id="bba50-650">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="bba50-651">应用程序，然后进行加载或卸载<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-651">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="bba50-652">在每个更新的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件将写入的名称和状态的当前加载<xref:System.Speech.Recognition.Grammar>到控制台的对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-652">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="bba50-653">加载和卸载语法时，为应用程序第一次识别场动物的名称的场动物的名称和水果、 的名称，然后单击水果的名称。</span><span class="sxs-lookup"><span data-stu-id="bba50-653">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-654">请求识别器暂停更新其状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-654">Requests that the recognizer pauses to update its state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-655">使用此方法将更改同步到识别器。</span><span class="sxs-lookup"><span data-stu-id="bba50-655">Use this method to synchronize changes to the recognizer.</span></span> <span data-ttu-id="bba50-656">例如，如果您加载或卸载语音识别语法识别器处理输入时，使用此方法和<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件同步你的应用程序行为的识别器的状态。</span><span class="sxs-lookup"><span data-stu-id="bba50-656">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="bba50-657">调用此方法时，识别器暂停或完成异步操作并生成<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-657">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="bba50-658">一个<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件处理程序然后可以修改在识别操作之间的识别器的状态。</span><span class="sxs-lookup"><span data-stu-id="bba50-658">A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span> <span data-ttu-id="bba50-659">在处理时<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件，识别器暂停，直到返回的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-659">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> events, the recognizer pauses until the event handler returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba50-660">如果识别器的输入更改之前识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件，请求将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="bba50-660">If the input to the recognizer is changed before the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the request is discarded.</span></span>  
  
 <span data-ttu-id="bba50-661">当调用此方法：</span><span class="sxs-lookup"><span data-stu-id="bba50-661">When this method is called:</span></span>  
  
-   <span data-ttu-id="bba50-662">如果识别器不处理输入，识别器将立即生成<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-662">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="bba50-663">如果识别器的处理组成沈默或背景噪音的输入，识别器暂停识别操作并生成<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-663">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="bba50-664">如果识别器的处理不是组成沈默或背景噪音的输入，识别器识别操作完成，然后生成<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-664">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="bba50-665">虽然识别器处理<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件：</span><span class="sxs-lookup"><span data-stu-id="bba50-665">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="bba50-666">识别器不会处理输入和的值<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>属性保持不变。</span><span class="sxs-lookup"><span data-stu-id="bba50-666">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="bba50-667">识别器继续收集输入和的值<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>属性可以更改。</span><span class="sxs-lookup"><span data-stu-id="bba50-667">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property can change.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : unit -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-668">请求识别器暂停更新其状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-668">Requests that the recognizer pauses to update its state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-669">当识别器生成<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件，<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>的属性<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>是`null`。</span><span class="sxs-lookup"><span data-stu-id="bba50-669">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="bba50-670">若要提供的用户令牌，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-670">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="bba50-671">若要指定的音频位置偏移量，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-671">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-672">下面的示例演示的控制台应用程序加载和卸载<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-672">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="bba50-673">应用程序使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法来请求语音识别引擎暂停以便它可以接收更新。</span><span class="sxs-lookup"><span data-stu-id="bba50-673">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="bba50-674">应用程序，然后进行加载或卸载<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-674">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="bba50-675">在每个更新的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件将写入的名称和状态的当前加载<xref:System.Speech.Recognition.Grammar>到控制台的对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-675">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="bba50-676">加载和卸载语法时，为应用程序第一次识别场动物的名称的场动物的名称和水果、 的名称，然后单击水果的名称。</span><span class="sxs-lookup"><span data-stu-id="bba50-676">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate userToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="bba50-677">用户定义信息包含该操作的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-677">User-defined information that contains information for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-678">请求识别器暂停更新其状态并为关联的事件提供用户标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-678">Requests that the recognizer pauses to update its state and provides a user token for the associated event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-679">当识别器生成<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件，<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>的属性<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>包含值的`userToken`参数。</span><span class="sxs-lookup"><span data-stu-id="bba50-679">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="bba50-680">若要指定的音频位置偏移量，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-680">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj * TimeSpan -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate (userToken, audioPositionAheadToRaiseUpdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="bba50-681">用户定义信息包含该操作的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-681">User-defined information that contains information for the operation.</span>
          </span>
        </param>
        <param name="audioPositionAheadToRaiseUpdate">
          <span data-ttu-id="bba50-682">从当前到延迟请求的 <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> 偏移量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-682">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> to delay the request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-683">请求识别器暂停更新其状态并为关联的事件提供偏移量和用户标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-683">Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-684">识别器不会启动之前识别器的识别器更新请求<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>等于当前<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>加上`audioPositionAheadToRaiseUpdate`。</span><span class="sxs-lookup"><span data-stu-id="bba50-684">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span></span>  
  
 <span data-ttu-id="bba50-685">当识别器生成<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件，<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>的属性<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>包含值的`userToken`参数。</span><span class="sxs-lookup"><span data-stu-id="bba50-685">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToAudioStream (audioSource As Stream, audioFormat As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToAudioStream(System::IO::Stream ^ audioSource, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ audioFormat);" />
      <MemberSignature Language="F#" Value="member this.SetInputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechRecognitionEngine.SetInputToAudioStream (audioSource, audioFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource">
          <span data-ttu-id="bba50-686">音频输入流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-686">The audio input stream.</span>
          </span>
        </param>
        <param name="audioFormat">
          <span data-ttu-id="bba50-687">这种音频输入的格式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-687">The format of the audio input.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-688">配置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象以接收来自音频流的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-688">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from an audio stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-689">如果识别器识别操作期间达到输入流的末尾，识别操作完成提供输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-689">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="bba50-690">任何后续识别操作可以生成一个异常，除非您更新到识别器的输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-690">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-691">下面的示例显示了一部分演示基本的语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-691">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="bba50-692">该示例使用从音频文件，example.wav，其中包含短语，输入"测试测试一个两个三个"和"mister cooper"，分隔暂停。</span><span class="sxs-lookup"><span data-stu-id="bba50-692">The example uses input from an audio file, example.wav, that contains the phrases, "testing testing one two three" and "mister cooper", separated by a pause.</span></span> <span data-ttu-id="bba50-693">该示例生成以下输出。</span><span class="sxs-lookup"><span data-stu-id="bba50-693">The example generates the following output.</span></span>  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetInputToDefaultAudioDevice : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-694">配置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象以接收来自默认音频设备的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-694">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from the default audio device.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bba50-695">下面的示例显示了一部分演示基本的语音识别的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-695">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="bba50-696">该示例使用来自默认音频设备，将执行多个异步标识操作和后用户 utters 短语，退出"退出"。</span><span class="sxs-lookup"><span data-stu-id="bba50-696">The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, "exit".</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetInputToNull : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-697">禁用到语音识别器的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-697">Disables the input to the speech recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-698">配置<xref:System.Speech.Recognition.SpeechRecognitionEngine>没有输入时使用的对象<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法，或暂时离线识别引擎中取出时。</span><span class="sxs-lookup"><span data-stu-id="bba50-698">Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveFile : string -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="bba50-699">要作为输入的文件的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-699">The path of the file to use as input.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-700">配置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象以接收从波形音频格式 (.wav) 文件的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-700">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a Waveform audio format (.wav) file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-701">如果识别器识别操作期间达到输入文件的末尾，识别操作完成提供输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-701">If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="bba50-702">任何后续识别操作可以生成一个异常，除非您更新到识别器的输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-702">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-703">下面的示例中的.wav 文件的音频上执行识别，并向控制台写入已识别的文本。</span><span class="sxs-lookup"><span data-stu-id="bba50-703">The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.</span></span>  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveStream (audioSource As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveStream(System::IO::Stream ^ audioSource);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveStream audioSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource">
          <span data-ttu-id="bba50-704">包含音频数据的流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-704">The stream containing the audio data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-705">配置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象以接收来自包含波形音频格式 (.wav) 数据的流的输入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-705">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a stream that contains Waveform audio format (.wav) data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-706">如果识别器识别操作期间达到输入流的末尾，识别操作完成提供输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-706">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="bba50-707">任何后续识别操作可以生成一个异常，除非您更新到识别器的输入。</span><span class="sxs-lookup"><span data-stu-id="bba50-707">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberSignature Language="F#" Value="member this.SpeechDetected : EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " Usage="member this.SpeechDetected : System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-708">当 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 检测它可以标识为语音的输入的时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-708">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects input that it can identify as speech.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-709">每个语音识别器有一个算法来区分 silence 和语音。</span><span class="sxs-lookup"><span data-stu-id="bba50-709">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="bba50-710">当<xref:System.Speech.Recognition.SpeechRecognitionEngine>执行语音识别操作，它会发出<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>时其算法标识为语音的输入事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-710">When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event when its algorithm identifies the input as speech.</span></span> <span data-ttu-id="bba50-711"><xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A>关联的属性<xref:System.Speech.Recognition.SpeechDetectedEventArgs>对象指示的识别器检测到语音的输入流中的位置。</span><span class="sxs-lookup"><span data-stu-id="bba50-711">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="bba50-712"><xref:System.Speech.Recognition.SpeechRecognitionEngine>将引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>之前，它会发出的任何事件<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>，或<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-712">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.</span></span>  
  
 <span data-ttu-id="bba50-713">有关详细信息请参阅<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-713">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="bba50-714">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> 委托时，需要标识将处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-714">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-715">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-715">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-716">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-716">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-717">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-717">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-718">下面的示例是用于选择源和目标城市的航班的控制台应用程序的一部分。</span><span class="sxs-lookup"><span data-stu-id="bba50-718">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="bba50-719">为应用程序识别短语，例如"我想要从迈阿密飞到芝加哥。"</span><span class="sxs-lookup"><span data-stu-id="bba50-719">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="bba50-720">该示例使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>事件报告<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>检测到每个时间语音。</span><span class="sxs-lookup"><span data-stu-id="bba50-720">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberSignature Language="F#" Value="member this.SpeechHypothesized : EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " Usage="member this.SpeechHypothesized : System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-721">当 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 识别了可能是一个语法的多个完整的短语的组件的一个或多个单词的时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-721">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-722"><xref:System.Speech.Recognition.SpeechRecognitionEngine>生成大量<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>事件，因为它会尝试确定输入的短语。</span><span class="sxs-lookup"><span data-stu-id="bba50-722">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> events as it attempts to identify an input phrase.</span></span> <span data-ttu-id="bba50-723">您可以访问的文本中识别短语<xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>的属性<xref:System.Speech.Recognition.SpeechHypothesizedEventArgs>对象的处理程序中<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-723">You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event.</span></span> <span data-ttu-id="bba50-724">通常情况下，处理这些事件是仅用于调试。</span><span class="sxs-lookup"><span data-stu-id="bba50-724">Typically, handling these events is useful only for debugging.</span></span>  
  
 <span data-ttu-id="bba50-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> 派生自 <xref:System.Speech.Recognition.RecognitionEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="bba50-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="bba50-726">有关详细信息请参阅<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性和<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-726">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="bba50-727">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> 委托时，需要标识将处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-727">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-728">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-728">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-729">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-729">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-730">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-730">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-731">下面的示例意识到"Display 艺术家爵士乐类别中的列表"等。</span><span class="sxs-lookup"><span data-stu-id="bba50-731">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="bba50-732">该示例使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>事件以在控制台中显示不完整的短语片段，因为它们被识别。</span><span class="sxs-lookup"><span data-stu-id="bba50-732">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionRejected : EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " Usage="member this.SpeechRecognitionRejected : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-733">当 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 采用不与其加载启用的 <see cref="T:System.Speech.Recognition.Grammar" /> 对象匹配的输入的时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-733">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that does not match any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-734">识别器引发此事件，如果确定，输入不具有足够的置信度与任何不匹配其加载和已启用<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-734">The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="bba50-735"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>的属性<xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>包含已拒绝<xref:System.Speech.Recognition.RecognitionResult>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-735">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="bba50-736">可以使用的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>事件来检索识别<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>的被拒绝和其<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>分数。</span><span class="sxs-lookup"><span data-stu-id="bba50-736">You can use the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span></span>  
  
 <span data-ttu-id="bba50-737">如果使用你的应用程序<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例，可以修改哪些语音在接受或拒绝其中的一个输入的置信度级别<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-737">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="bba50-738">您可以修改为非语音输入使用语音识别的响应方式<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-738">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="bba50-739">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 委托时，需要标识将处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-739">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-740">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-740">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-741">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-741">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-742">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-742">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-743">下面的示例识别短语，如"爵士乐类别中显示的 artist 列表"或"显示相册 gospel"。</span><span class="sxs-lookup"><span data-stu-id="bba50-743">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="bba50-744">该示例使用的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>事件以在控制台中显示的通知时语音输入不能与具有足够的语法的内容与匹配<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>以生成成功的识别。</span><span class="sxs-lookup"><span data-stu-id="bba50-744">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition.</span></span> <span data-ttu-id="bba50-745">该处理程序还显示识别结果<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>由于低置信度得分的被拒绝。</span><span class="sxs-lookup"><span data-stu-id="bba50-745">The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-746">当 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 采用与其加载启用的 <see cref="T:System.Speech.Recognition.Grammar" /> 对象匹配的输入的时候引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-746">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that matches any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-747">可以启动识别操作使用一种<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-747">You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span> <span data-ttu-id="bba50-748">识别器引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件，如果确定输入匹配的其加载一个<xref:System.Speech.Recognition.Grammar>置信度以构成识别足够级别的对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-748">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition.</span></span> <span data-ttu-id="bba50-749"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>的属性<xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>包含接受<xref:System.Speech.Recognition.RecognitionResult>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-749">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="bba50-750">处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件可以获取所识别的短语，以及一系列识别<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>以较低置信度分数。</span><span class="sxs-lookup"><span data-stu-id="bba50-750">Handlers of <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.</span></span>  
  
 <span data-ttu-id="bba50-751">如果使用你的应用程序<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例，可以修改哪些语音在接受或拒绝其中的一个输入的置信度级别<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-751">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  <span data-ttu-id="bba50-752">您可以修改为非语音输入使用语音识别的响应方式<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-752">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="bba50-753">当识别器接收输入相匹配语法<xref:System.Speech.Recognition.Grammar>对象可以引发其<xref:System.Speech.Recognition.Grammar.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-753">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="bba50-754"><xref:System.Speech.Recognition.Grammar>对象的<xref:System.Speech.Recognition.Grammar.SpeechRecognized>在语音识别器之前引发事件<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-754">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="bba50-755">处理程序应始终在执行特定于某个特定的语法的任何任务<xref:System.Speech.Recognition.Grammar.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-755">Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="bba50-756">创建 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> 委托时，需要标识将处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-756">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="bba50-757">若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。</span><span class="sxs-lookup"><span data-stu-id="bba50-757">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="bba50-758">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-758">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="bba50-759">有关事件处理程序委托的详细信息，请参阅[事件和委托](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="bba50-759">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-760">下面的示例是创建语音识别语法，构造一个控制台应用程序的一部分<xref:System.Speech.Recognition.Grammar>对象，并将其加载到<xref:System.Speech.Recognition.SpeechRecognitionEngine>来进行识别。</span><span class="sxs-lookup"><span data-stu-id="bba50-760">The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition.</span></span> <span data-ttu-id="bba50-761">示例演示了语音的输入<xref:System.Speech.Recognition.SpeechRecognitionEngine>，关联的识别结果中，以及通过语音识别器引发的关联的事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-761">The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
 <span data-ttu-id="bba50-762">朗读输入，如"我想要从芝加哥到迈阿密飞入"将触发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-762">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="bba50-763">说到短语"飞 me 从休斯顿到芝加哥"将不会触发<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="bba50-763">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="bba50-764">该示例使用的处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件，以显示已成功识别短语和它们包含在控制台中的语义。</span><span class="sxs-lookup"><span data-stu-id="bba50-764">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberSignature Language="F#" Value="member this.UnloadAllGrammars : unit -&gt; unit" Usage="speechRecognitionEngine.UnloadAllGrammars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bba50-765">从卸载识别器的所有 <see cref="T:System.Speech.Recognition.Grammar" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-765">Unloads all <see cref="T:System.Speech.Recognition.Grammar" /> objects from the recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-766">如果识别器当前正在加载<xref:System.Speech.Recognition.Grammar>以异步方式，此方法将等待，直至<xref:System.Speech.Recognition.Grammar>加载时，它会卸载所有之前<xref:System.Speech.Recognition.Grammar>对象从<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例。</span><span class="sxs-lookup"><span data-stu-id="bba50-766">If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="bba50-767">若要卸载的特定语法，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-767">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-768">下面的示例显示了一部分演示同步加载和卸载的语音识别语法的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-768">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.UnloadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.UnloadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="bba50-769">未加载的语法对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-769">The grammar object to unload.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-770">从指定的 <see cref="T:System.Speech.Recognition.Grammar" /> 实例卸载一个指定的 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-770">Unloads a specified <see cref="T:System.Speech.Recognition.Grammar" /> object from the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-771">如果识别器正在运行，必须使用应用程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暂停<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例之前加载、 卸载、 启用，或禁用<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="bba50-771">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="bba50-772">若要卸载所有<xref:System.Speech.Recognition.Grammar>对象，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-772">To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-773">下面的示例显示了一部分演示同步加载和卸载的语音识别语法的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="bba50-773">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-774">
            <paramref name="Grammar" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-774">
              <paramref name="Grammar" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bba50-775">此语法识别器未加载，或者此识别器当前加载的语法异步。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-775">The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bba50-776">更新为识别器设置的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-776">Updates the value of a setting for the recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-777">识别器设置可以包含字符串、 64 位整数或内存地址数据。</span><span class="sxs-lookup"><span data-stu-id="bba50-777">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="bba50-778">下表介绍了有关 Microsoft Speech API (SAPI) 定义的设置的符合标准的识别器。</span><span class="sxs-lookup"><span data-stu-id="bba50-778">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="bba50-779">以下设置对每个支持所设置的识别器必须具有相同的范围。</span><span class="sxs-lookup"><span data-stu-id="bba50-779">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="bba50-780">SAPI 符合识别器不需要支持这些设置，并且可以支持其他设置。</span><span class="sxs-lookup"><span data-stu-id="bba50-780">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="bba50-781">name</span><span class="sxs-lookup"><span data-stu-id="bba50-781">Name</span></span>|<span data-ttu-id="bba50-782">描述</span><span class="sxs-lookup"><span data-stu-id="bba50-782">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="bba50-783">指定识别器的 CPU 占用率。</span><span class="sxs-lookup"><span data-stu-id="bba50-783">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="bba50-784">范围是从 0 到 100。</span><span class="sxs-lookup"><span data-stu-id="bba50-784">The range is from 0 to 100.</span></span> <span data-ttu-id="bba50-785">默认值为 50。</span><span class="sxs-lookup"><span data-stu-id="bba50-785">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="bba50-786">语音识别器完成识别操作之前，请指示明确输入末尾处的无声段的长度。</span><span class="sxs-lookup"><span data-stu-id="bba50-786">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="bba50-787">范围是从 0 到 10000 毫秒 (ms)。</span><span class="sxs-lookup"><span data-stu-id="bba50-787">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="bba50-788">此设置对应于识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-788">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span> <span data-ttu-id="bba50-789">默认值 = 150ms年。</span><span class="sxs-lookup"><span data-stu-id="bba50-789">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="bba50-790">语音识别器完成识别操作之前，以毫秒 (ms) 为单位的无声段长度指示二义性输入末尾。</span><span class="sxs-lookup"><span data-stu-id="bba50-790">Indicates the length of silence in milliseconds (ms) at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="bba50-791">范围是从 0 到 10,000ms。</span><span class="sxs-lookup"><span data-stu-id="bba50-791">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="bba50-792">此设置对应于识别器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-792">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="bba50-793">默认值为 500 毫秒。</span><span class="sxs-lookup"><span data-stu-id="bba50-793">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="bba50-794">指示修改的声学模型是否为 ON (值 = `1`) 或关闭 (值 = `0`)。</span><span class="sxs-lookup"><span data-stu-id="bba50-794">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="bba50-795">默认值是`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="bba50-795">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="bba50-796">指示是否自动适应为 ON (值 = `1`) 或关闭 (值 = `0`)，并保存在注册表中的设置。</span><span class="sxs-lookup"><span data-stu-id="bba50-796">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="bba50-797">默认值是`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="bba50-797">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="bba50-798">返回一个识别器的设置，请使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bba50-798">To return one of the recognizer's settings, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> method.</span></span>  
  
 <span data-ttu-id="bba50-799">除`PersistedBackgroundAdaptation`，设置使用的属性值<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法仅对当前实例仍然有效<xref:System.Speech.Recognition.SpeechRecognitionEngine>之后该将它们转换为其默认设置。</span><span class="sxs-lookup"><span data-stu-id="bba50-799">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span>  
  
 <span data-ttu-id="bba50-800">您可以修改为非语音输入使用语音识别的响应方式<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="bba50-800">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, int updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * int -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName">
          <span data-ttu-id="bba50-801">设置为更新的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-801">The name of the setting to update.</span>
          </span>
        </param>
        <param name="updatedValue">
          <span data-ttu-id="bba50-802">设置的新建值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-802">The new value for the setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-803">指定的整数值的 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 指定设置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-803">Updates the specified setting for the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> with the specified integer value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-804">除`PersistedBackgroundAdaptation`，设置使用的属性值<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法仅对当前实例仍然有效<xref:System.Speech.Recognition.SpeechRecognitionEngine>之后该将它们转换为其默认设置。</span><span class="sxs-lookup"><span data-stu-id="bba50-804">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="bba50-805">请参阅<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>有关受支持的设置的说明。</span><span class="sxs-lookup"><span data-stu-id="bba50-805">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba50-806">下面的示例是一个控制台应用程序的输出数为支持 EN-US 区域设置的识别器定义的设置的值的一部分。</span><span class="sxs-lookup"><span data-stu-id="bba50-806">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="bba50-807">该示例将更新的置信度级别设置，，然后查询识别器来检查更新后的值。</span><span class="sxs-lookup"><span data-stu-id="bba50-807">The example updates the confidence level settings, and then queries the recognizer to check the updated values.</span></span> <span data-ttu-id="bba50-808">该示例生成以下输出。</span><span class="sxs-lookup"><span data-stu-id="bba50-808">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-809">
            <paramref name="settingName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-809">
              <paramref name="settingName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-810">
            <paramref name="settingName" /> 为空字符串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-810">
              <paramref name="settingName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="bba50-811">不用该名称设置的识别器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-811">The recognizer does not have a setting by that name.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, System::String ^ updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * string -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName">
          <span data-ttu-id="bba50-812">设置为更新的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-812">The name of the setting to update.</span>
          </span>
        </param>
        <param name="updatedValue">
          <span data-ttu-id="bba50-813">设置的新建值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-813">The new value for the setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bba50-814">更新指定字符串值设定的指定语音识别引擎。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-814">Updates the specified speech recognition engine setting with the specified string value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba50-815">除`PersistedBackgroundAdaptation`，设置使用的属性值<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法仅对当前实例仍然有效<xref:System.Speech.Recognition.SpeechRecognitionEngine>之后该将它们转换为其默认设置。</span><span class="sxs-lookup"><span data-stu-id="bba50-815">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="bba50-816">请参阅<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>有关受支持的设置的说明。</span><span class="sxs-lookup"><span data-stu-id="bba50-816">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bba50-817">
            <paramref name="settingName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-817">
              <paramref name="settingName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bba50-818">
            <paramref name="settingName" /> 为空字符串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-818">
              <paramref name="settingName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="bba50-819">不用该名称设置的识别器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bba50-819">The recognizer does not have a setting by that name.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>