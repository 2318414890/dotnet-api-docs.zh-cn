<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="653a138a06a6f44dd5fd94ba82b6a4bf339e421e" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48732694" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fc2be-101">表示一个语义值和选择性地将该值与语音识别语法的组件关联。</span><span class="sxs-lookup"><span data-stu-id="fc2be-101">Represents a semantic value and optionally associates the value with a component of a speech recognition grammar.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc2be-102">使用的<xref:System.Speech.Recognition.SemanticResultValue>和<xref:System.Speech.Recognition.SemanticResultKey>对象，结合<xref:System.Speech.Recognition.GrammarBuilder>并<xref:System.Speech.Recognition.Choices>，是最简单的方法来设计的语义结构<xref:System.Speech.Recognition.Grammar>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-102">Use of <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> objects, in conjunction with <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices>, is the easiest way to design a semantic structure for a <xref:System.Speech.Recognition.Grammar>.</span></span> <span data-ttu-id="fc2be-103">通过获取的实例访问的一个短语的语义信息<xref:System.Speech.Recognition.SemanticValue>，直到<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性上的<xref:System.Speech.Recognition.RecognizedPhrase>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-103">Semantic information for a phrase is accessed by obtaining an instance of <xref:System.Speech.Recognition.SemanticValue>, through the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property on <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fc2be-104">值由<xref:System.Speech.Recognition.SemanticResultValue>对象由定义<xref:System.Object>实例传递给其构造函数。</span><span class="sxs-lookup"><span data-stu-id="fc2be-104">Values managed by <xref:System.Speech.Recognition.SemanticResultValue> objects are defined by <xref:System.Object> instances passed to their constructors.</span></span> <span data-ttu-id="fc2be-105">基础类型的这<xref:System.Object>必须是`bool`， `int`， `float`，或`string`。</span><span class="sxs-lookup"><span data-stu-id="fc2be-105">The underlying type of this <xref:System.Object> must be `bool`, `int`, `float`, or `string`.</span></span> <span data-ttu-id="fc2be-106">任何其他类型将阻止的构造<xref:System.Speech.Recognition.Grammar>实例与<xref:System.Speech.Recognition.SemanticResultValue>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-106">Any other type will prevent construction of a <xref:System.Speech.Recognition.Grammar> instance with the <xref:System.Speech.Recognition.SemanticResultValue>.</span></span>  
  
 <span data-ttu-id="fc2be-107">典型用法<xref:System.Speech.Recognition.SemanticResultValue>实例将该实例关联的可识别组件<xref:System.Speech.Recognition.Grammar>，例如短语，一条规则，或<xref:System.Speech.Recognition.Choices>对象。</span><span class="sxs-lookup"><span data-stu-id="fc2be-107">The typical use of a <xref:System.Speech.Recognition.SemanticResultValue> instance associates the instance with a recognizable component of a <xref:System.Speech.Recognition.Grammar>, such as a phrase, a rule, or a <xref:System.Speech.Recognition.Choices> object.</span></span> <span data-ttu-id="fc2be-108">如果关联的组件使用的识别操作，一部分<xref:System.Speech.Recognition.SemanticResultValue>用于返回短语的语义中定义的值。</span><span class="sxs-lookup"><span data-stu-id="fc2be-108">If the associated component is used as part of a recognition operation, the <xref:System.Speech.Recognition.SemanticResultValue> is used to define a value in the semantics of the returned phrase.</span></span>  
  
 <span data-ttu-id="fc2be-109">有两种基本方法用于将相关联<xref:System.Speech.Recognition.SemanticResultValue>具有的语法元素，具体取决于用于创建构造函数实例<xref:System.Speech.Recognition.SemanticResultValue>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-109">There are two basic methods for associating a <xref:System.Speech.Recognition.SemanticResultValue> instance with a grammar element, depending on the constructor used to create the <xref:System.Speech.Recognition.SemanticResultValue>.</span></span>  
  
-   <span data-ttu-id="fc2be-110">如果只有值 (由的实例指定<xref:System.Object>) 用来构造<xref:System.Speech.Recognition.SemanticResultValue>对象，<xref:System.Speech.Recognition.SemanticResultValue>通过它，除了前面的语法组件关联<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="fc2be-110">If only the value (specified by an instance of <xref:System.Object>) is used to construct a <xref:System.Speech.Recognition.SemanticResultValue> object, the <xref:System.Speech.Recognition.SemanticResultValue> is associated with the grammar component that preceded it, in addition to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
     <span data-ttu-id="fc2be-111">例如，在下面，如果代码片段<xref:System.Speech.Recognition.Grammar>使用此构造<xref:System.Speech.Recognition.GrammarBuilder>实例识别的单词"后台"的值为`true`设置中识别的短语的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-111">For instance, in the code fragment below, if a <xref:System.Speech.Recognition.Grammar> constructed using this <xref:System.Speech.Recognition.GrammarBuilder> instance recognizes the word "background", a value of `true` is set in the recognized phrase semantics.</span></span>  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     <span data-ttu-id="fc2be-112">有关更多信息，请参见 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> 的说明。</span><span class="sxs-lookup"><span data-stu-id="fc2be-112">For more information, see the description of <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.</span></span>  
  
-   <span data-ttu-id="fc2be-113">如果字符串值短语或特定于<xref:System.Speech.Recognition.GrammarBuilder>实例是使用一起<xref:System.Object>，它指定<xref:System.Speech.Recognition.SemanticResultValue>值，值将自动与字符串值的短语相关联或<xref:System.Speech.Recognition.GrammarBuilder>实例。</span><span class="sxs-lookup"><span data-stu-id="fc2be-113">If a string value phrase or specific <xref:System.Speech.Recognition.GrammarBuilder> instance is used, together with a <xref:System.Object> that specifies a <xref:System.Speech.Recognition.SemanticResultValue> value, that value is automatically associated with the string value phrase or the <xref:System.Speech.Recognition.GrammarBuilder> instance.</span></span>  <span data-ttu-id="fc2be-114">如果该短语或<xref:System.Speech.Recognition.GrammarBuilder>对象用于识别的过程中，值将分配给所识别的短语的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-114">If the phrase or <xref:System.Speech.Recognition.GrammarBuilder> object is used in the process of recognition, the value will be assigned to the semantics of the recognized phrase.</span></span>  
  
     <span data-ttu-id="fc2be-115">下面的示例阐释了这一点，并在功能上等效于上述示例中，使用显式调用该<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>和<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-115">The following example illustrates this, and is functionally equivalent to the preceding example, which used explicit calls to <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> and <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.</span></span> <span data-ttu-id="fc2be-116">如果识别逻辑将使用单词"后台"值`true`将添加到可识别的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-116">If the recognition logic uses the word "background", the value `true` will be added to the recognized semantics.</span></span>  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     <span data-ttu-id="fc2be-117">有关详细信息，请参阅的说明<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>和<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-117">For more information, see the description of <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> and <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.</span></span>  
  
 <span data-ttu-id="fc2be-118">若要通过使用<xref:System.Speech.Recognition.Grammar>识别中, 所有<xref:System.Speech.Recognition.SemanticResultValue>实例必须与其中一个相关联<xref:System.Speech.Recognition.SemanticValue>使用的对象<xref:System.Speech.Recognition.Grammar>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-118">To be used by a <xref:System.Speech.Recognition.Grammar> in recognition, all <xref:System.Speech.Recognition.SemanticResultValue> instances must be associated with one of the <xref:System.Speech.Recognition.SemanticValue> objects used by that <xref:System.Speech.Recognition.Grammar>.</span></span> <span data-ttu-id="fc2be-119">这是通过将相关联的语义键<xref:System.Speech.Recognition.SemanticResultValue>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-119">This is done by associating a semantic key with the <xref:System.Speech.Recognition.SemanticResultValue>.</span></span>  
  
 <span data-ttu-id="fc2be-120">语义键可以显式附加到<xref:System.Speech.Recognition.SemanticResultValue>，并使用<xref:System.Speech.Recognition.SemanticResultKey>对象。</span><span class="sxs-lookup"><span data-stu-id="fc2be-120">Semantic keys can be explicitly attached to a <xref:System.Speech.Recognition.SemanticResultValue>, using a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  <span data-ttu-id="fc2be-121"><xref:System.Speech.Recognition.SemanticResultValue> 未显式附加到一个键的实例附加到的默认根键<xref:System.Speech.Recognition.SemanticValue>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-121"><xref:System.Speech.Recognition.SemanticResultValue> instances not explicitly attached to a key are attached to the root key of the default <xref:System.Speech.Recognition.SemanticValue>.</span></span>  
  
 <span data-ttu-id="fc2be-122">之后<xref:System.Speech.Recognition.SemanticResultValue>已用于设置<xref:System.Speech.Recognition.SemanticValue.Value%2A>，无论它标记使用默认根项或通过任何特定<xref:System.Speech.Recognition.SemanticResultKey>、 不能修改该值，或将在识别操作期间出现异常。</span><span class="sxs-lookup"><span data-stu-id="fc2be-122">After a <xref:System.Speech.Recognition.SemanticResultValue> has been used to set the <xref:System.Speech.Recognition.SemanticValue.Value%2A>, whether it is tagged with the default root key or by any particular <xref:System.Speech.Recognition.SemanticResultKey>, that value must not be modified or an exception will occur during recognition operations.</span></span>  
  
 <span data-ttu-id="fc2be-123">下面的示例将导致异常，因为该设置，然后修改根<xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.Grammar>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-123">The following example will cause an exception because it sets and then modifies the root <xref:System.Speech.Recognition.SemanticValue.Value%2A> of a <xref:System.Speech.Recognition.Grammar>.</span></span>  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 <span data-ttu-id="fc2be-124">另一方面，允许在下面的示例代码。</span><span class="sxs-lookup"><span data-stu-id="fc2be-124">On the other hand, the code in the following example is permitted.</span></span> <span data-ttu-id="fc2be-125">尽管它定义的多个实例<xref:System.Speech.Recognition.SemanticResultValue>，它们包含在<xref:System.Speech.Recognition.Choices>对象，并且只有一个将曾经使用的密钥的值设置`bgOrfgText`。</span><span class="sxs-lookup"><span data-stu-id="fc2be-125">Although it defines multiple instances of <xref:System.Speech.Recognition.SemanticResultValue>, they are included in a <xref:System.Speech.Recognition.Choices> object, and only one will ever be used to set the value of the key `bgOrfgText`.</span></span>  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 <span data-ttu-id="fc2be-126">下面的示例返回<xref:System.Speech.Recognition.Grammar>识别命令"设置/更改/Alter 前景/背景...</span><span class="sxs-lookup"><span data-stu-id="fc2be-126">The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command "Set/Change/Alter Foreground/Background …</span></span> <span data-ttu-id="fc2be-127">[颜色列表]"。</span><span class="sxs-lookup"><span data-stu-id="fc2be-127">[color list]".</span></span>  <span data-ttu-id="fc2be-128"><xref:System.Speech.Recognition.SemanticResultValue> 并<xref:System.Speech.Recognition.SemanticResultKey>实例 (与一起<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>对象) 用于定义识别可分析的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-128"><xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.</span></span>  <span data-ttu-id="fc2be-129">已分析的语义将确定哪种颜色请求以及在前台或后台是要修改。</span><span class="sxs-lookup"><span data-stu-id="fc2be-129">The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.</span></span>  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)"><span data-ttu-id="fc2be-130">使用 SemanticResultKey 提取 SemanticResultValue</span><span class="sxs-lookup"><span data-stu-id="fc2be-130">Using a SemanticResultKey to Extract a SemanticResultValue</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fc2be-131">初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="fc2be-131">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SemanticResultValue" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc2be-132">`SemanticResultValue`构造函数支持指定<xref:System.Object>具有基础数据类型的实例`bool`， `int`， `float`，或`string`。</span><span class="sxs-lookup"><span data-stu-id="fc2be-132">The `SemanticResultValue` constructors support specifying an <xref:System.Object> instance with an underlying data type of `bool`, `int`, `float`, or `string`.</span></span>  
  
 <span data-ttu-id="fc2be-133">构造函数可以创建`SemanticResultValue`实例中的两种情况下：</span><span class="sxs-lookup"><span data-stu-id="fc2be-133">A constructor can create a `SemanticResultValue` instance in either of two circumstances:</span></span>  
  
-   <span data-ttu-id="fc2be-134">`SemanticResultValue`使用时，实例必须是显式的语法元素与关联<xref:System.Speech.Recognition.GrammarBuilder>构造<xref:System.Speech.Recognition.Grammar>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-134">The `SemanticResultValue` instance must be explicitly associated with a grammar element when using a <xref:System.Speech.Recognition.GrammarBuilder> to construct a <xref:System.Speech.Recognition.Grammar>.</span></span>  
  
-   <span data-ttu-id="fc2be-135">`SemanticResultValue`已与字符串值短语相关联或<xref:System.Speech.Recognition.GrammarBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="fc2be-135">The `SemanticResultValue` is already associated with a string value phrase or a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fc2be-136">由 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 托管的值。</span><span class="sxs-lookup"><span data-stu-id="fc2be-136">The value managed by <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</span></span> <span data-ttu-id="fc2be-137">必须是类型 <see langword="bool" />、<see langword="int" />、<see langword="float" />，或 <see langword="string" />。</span><span class="sxs-lookup"><span data-stu-id="fc2be-137">Must be of type <see langword="bool" />, <see langword="int" />, <see langword="float" />, or <see langword="string" />.</span></span></param>
        <summary><span data-ttu-id="fc2be-138">使用指定的语义值初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="fc2be-138">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SemanticResultValue" /> class and specifies a semantic value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc2be-139">一个`SemanticResultValue`返回此构造函数不是与任何特定语法元素相关联。</span><span class="sxs-lookup"><span data-stu-id="fc2be-139">A `SemanticResultValue` returned by this constructor is not associated with any particular grammar element.</span></span> <span data-ttu-id="fc2be-140">关联必须进行显式使用的实例`SemanticResultValue`结合<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="fc2be-140">The association must be made explicit by using the instance of `SemanticResultValue` in conjunction with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="fc2be-141">例如，在下面，如果代码片段<xref:System.Speech.Recognition.Grammar>使用此构造<xref:System.Speech.Recognition.GrammarBuilder>实例识别的单词"后台"的值为`true`设置中识别的短语的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-141">For instance, in the code fragment below, if a <xref:System.Speech.Recognition.Grammar> constructed using this <xref:System.Speech.Recognition.GrammarBuilder> instance recognizes the word "background", a value of `true` is set in the recognized phrase semantics.</span></span>  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 <span data-ttu-id="fc2be-142">下面的示例返回<xref:System.Speech.Recognition.Grammar>识别命令"设置/更改/Alter 前景/背景...</span><span class="sxs-lookup"><span data-stu-id="fc2be-142">The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command "Set/Change/Alter Foreground/Background …</span></span> <span data-ttu-id="fc2be-143">[颜色列表]"。</span><span class="sxs-lookup"><span data-stu-id="fc2be-143">[color list]".</span></span> <span data-ttu-id="fc2be-144"><xref:System.Speech.Recognition.SemanticResultValue> 并<xref:System.Speech.Recognition.SemanticResultKey>实例 (与一起<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>对象) 用于定义识别可分析的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-144"><xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.</span></span>  <span data-ttu-id="fc2be-145">已分析的语义将确定哪种颜色请求以及在前台或后台是要修改。</span><span class="sxs-lookup"><span data-stu-id="fc2be-145">The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.</span></span>  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="fc2be-146">要用于识别的语法组件。</span><span class="sxs-lookup"><span data-stu-id="fc2be-146">A grammar component to be used in recognition.</span></span></param>
        <param name="value"><span data-ttu-id="fc2be-147">由 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 托管的值。</span><span class="sxs-lookup"><span data-stu-id="fc2be-147">The value managed by <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</span></span> <span data-ttu-id="fc2be-148">必须是类型 <see langword="bool" />、<see langword="int" />、<see langword="float" />，或 <see langword="string" />。</span><span class="sxs-lookup"><span data-stu-id="fc2be-148">Must be of type <see langword="bool" />, <see langword="int" />, <see langword="float" />, or <see langword="string" />.</span></span></param>
        <summary><span data-ttu-id="fc2be-149">使用 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类和关联语义值的一个新实例。</span><span class="sxs-lookup"><span data-stu-id="fc2be-149">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SemanticResultValue" /> class and associates a semantic value with a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc2be-150">如果由指定的语法元素<xref:System.Speech.Recognition.GrammarBuilder>识别逻辑中使用`value`将设置在已识别的输出的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-150">If the grammar element specified by <xref:System.Speech.Recognition.GrammarBuilder> is used in the recognition logic, `value` will be set in the semantics of the recognized output.</span></span>  
  
 <span data-ttu-id="fc2be-151">如果下面的代码片段中识别逻辑构造<xref:System.Speech.Recognition.GrammarBuilder>实例 (`myGb`) 使用<xref:System.Speech.Recognition.Choices>对象 (`myChoice`) 来标识输入，值`true`添加到可识别的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-151">In the code fragment below, if the recognition logic constructed with the <xref:System.Speech.Recognition.GrammarBuilder> instance (`myGb`) uses the <xref:System.Speech.Recognition.Choices> object (`myChoice`) to identify input, the value `true` is added to the recognized semantics.</span></span>  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 <span data-ttu-id="fc2be-152">作为<xref:System.Speech.Recognition.GrammarBuilder>支持的隐式转换<xref:System.Speech.Recognition.Choices>， `SemanticResultValue`，和<xref:System.Speech.Recognition.SemanticResultKey>，此构造函数可以使用这些对象。</span><span class="sxs-lookup"><span data-stu-id="fc2be-152">As <xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversion for <xref:System.Speech.Recognition.Choices>,  `SemanticResultValue`, and <xref:System.Speech.Recognition.SemanticResultKey>, this constructor can use those objects as well.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc2be-153">下面的示例返回<xref:System.Speech.Recognition.Grammar>识别命令"设置/更改/Alter 前景/背景...</span><span class="sxs-lookup"><span data-stu-id="fc2be-153">The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command "Set/Change/Alter Foreground/Background …</span></span> <span data-ttu-id="fc2be-154">[颜色列表]"。</span><span class="sxs-lookup"><span data-stu-id="fc2be-154">[color list]".</span></span> <span data-ttu-id="fc2be-155"><xref:System.Speech.Recognition.SemanticResultValue> 并<xref:System.Speech.Recognition.SemanticResultKey>实例 (与一起<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>对象) 用于定义识别可分析的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-155"><xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.</span></span>  <span data-ttu-id="fc2be-156">已分析的语义将确定哪种颜色请求以及在前台或后台是要修改。</span><span class="sxs-lookup"><span data-stu-id="fc2be-156">The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.</span></span>  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="fc2be-157">要用于识别的短语。</span><span class="sxs-lookup"><span data-stu-id="fc2be-157">A phrase to be used in recognition.</span></span></param>
        <param name="value"><span data-ttu-id="fc2be-158">由 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 托管的值。</span><span class="sxs-lookup"><span data-stu-id="fc2be-158">The value managed by <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</span></span> <span data-ttu-id="fc2be-159">必须是类型 <see langword="bool" />、<see langword="int" />、<see langword="float" />，或 <see langword="string" />。</span><span class="sxs-lookup"><span data-stu-id="fc2be-159">Must be of type <see langword="bool" />, <see langword="int" />, <see langword="float" />, or <see langword="string" />.</span></span></param>
        <summary><span data-ttu-id="fc2be-160">使用 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象初始化 <see cref="T:System.String" /> 类和关联语义值的一个新实例。</span><span class="sxs-lookup"><span data-stu-id="fc2be-160">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SemanticResultValue" /> class and associates a semantic value with a <see cref="T:System.String" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc2be-161">如果指定的字符串`phrase`识别逻辑中使用`value`将设置在已识别的输出的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-161">If the string specified by `phrase` is used in the recognition logic, `value` will be set in the semantics of the recognized output.</span></span>  
  
 <span data-ttu-id="fc2be-162">在以下代码片段中，如果使用构造识别逻辑<xref:System.Speech.Recognition.GrammarBuilder>实例 (`myGb`) 使用"我抵押"的字符串来标识输入，值`true`将添加到可识别的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-162">In the following code fragment, if the recognition logic constructed with the <xref:System.Speech.Recognition.GrammarBuilder> instance (`myGb`) uses the string "my mortgage" to identify input, the value `true` will be added to the recognized semantics.</span></span>  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 <span data-ttu-id="fc2be-163">下面的示例返回<xref:System.Speech.Recognition.Grammar>识别命令"设置/更改/Alter 前景/背景...</span><span class="sxs-lookup"><span data-stu-id="fc2be-163">The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command "Set/Change/Alter Foreground/Background …</span></span> <span data-ttu-id="fc2be-164">[颜色列表]"。</span><span class="sxs-lookup"><span data-stu-id="fc2be-164">[color list]".</span></span> <span data-ttu-id="fc2be-165"><xref:System.Speech.Recognition.SemanticResultValue> 并<xref:System.Speech.Recognition.SemanticResultKey>实例 (与一起<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>对象) 用于定义识别可分析的语义。</span><span class="sxs-lookup"><span data-stu-id="fc2be-165"><xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.</span></span>  <span data-ttu-id="fc2be-166">已分析的语义将确定哪种颜色请求以及在前台或后台是要修改。</span><span class="sxs-lookup"><span data-stu-id="fc2be-166">The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.</span></span>  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fc2be-167">从 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 实例返回 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 结构的实例。</span><span class="sxs-lookup"><span data-stu-id="fc2be-167">Returns an instance of <see cref="T:System.Speech.Recognition.GrammarBuilder" /> constructed from the current <see cref="T:System.Speech.Recognition.SemanticResultValue" /> instance.</span></span></summary>
        <returns><span data-ttu-id="fc2be-168">从 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 实例返回 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 结构的实例。</span><span class="sxs-lookup"><span data-stu-id="fc2be-168">Returns an instance of <see cref="T:System.Speech.Recognition.GrammarBuilder" /> constructed from the current <see cref="T:System.Speech.Recognition.SemanticResultValue" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc2be-169">利用<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>相当于使用<xref:System.Speech.Recognition.GrammarBuilder>构造函数采用<xref:System.Speech.Recognition.SemanticResultValue>作为参数 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>)。</span><span class="sxs-lookup"><span data-stu-id="fc2be-169">The use of <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> is equivalent to using the <xref:System.Speech.Recognition.GrammarBuilder> constructor that takes a <xref:System.Speech.Recognition.SemanticResultValue> as an argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc2be-170">下面的示例创建<xref:System.Speech.Recognition.Grammar>支持命令来更改背景色的对象。</span><span class="sxs-lookup"><span data-stu-id="fc2be-170">The following example creates <xref:System.Speech.Recognition.Grammar> objects that support commands to change the background color.</span></span>  
  
 <span data-ttu-id="fc2be-171">一个<xref:System.Speech.Recognition.Choices>对象 (`colorChoice`) 使用包含列表的选项的背景颜色填充<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>方法替换<xref:System.Speech.Recognition.GrammarBuilder>实例从获取<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>方法`SemanticResultValue`创建的对象从颜色字符串。</span><span class="sxs-lookup"><span data-stu-id="fc2be-171">A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> method with <xref:System.Speech.Recognition.GrammarBuilder> instances that are obtained from the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the `SemanticResultValue` objects created from color strings.</span></span>  
  
 <span data-ttu-id="fc2be-172">一个<xref:System.Speech.Recognition.GrammarBuilder>然后通过调用获取<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>上<xref:System.Speech.Recognition.SemanticResultKey>实例，将用于密钥中的语义选择`colorChoice`实例。</span><span class="sxs-lookup"><span data-stu-id="fc2be-172">A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in the `colorChoice` instance.</span></span>  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>