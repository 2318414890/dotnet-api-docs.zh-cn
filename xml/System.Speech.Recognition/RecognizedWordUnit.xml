<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f2649b3a25f6265c8e90a862299324fd8788ca3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36608524" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ebdc4-101">提供可识别的语音的原子单元。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ebdc4-101">Provides the atomic unit of recognized speech.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebdc4-102">识别引擎返回的所有结果都构造的<xref:System.Speech.Recognition.RecognizedWordUnit>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="ebdc4-103">数组<xref:System.Speech.Recognition.RecognizedWordUnit>访问通过任何识别操作对象已<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="ebdc4-104">除了提供识别确定性的度量值 (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>)<xref:System.Speech.Recognition.RecognizedWordUnit>实例提供：</span><span class="sxs-lookup"><span data-stu-id="ebdc4-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="ebdc4-105">被识别的单词的规范化并确切 （或词法） 的文本表示形式。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="ebdc4-106">有关详细信息，请参阅<xref:System.Speech.Recognition.ReplacementText>、<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="ebdc4-107">使用受支持的拼音字母，例如国际音标 (IPA) 或通用电话设置 (UPS) 中的字符的发音信息。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="ebdc4-108">有关详细信息，请参阅 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="ebdc4-109">对打印的格式化设置。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-109">Formatting for printing.</span></span> <span data-ttu-id="ebdc4-110">有关详细信息请参阅<xref:System.Speech.Recognition.DisplayAttributes>类并将其<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebdc4-111">下面的示例演示一个实用工具例程 (`stringFromWordArray`)，用来生成字符串。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="ebdc4-112">这些字符串包含词法输出 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)，规范化文本 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，或从国际音标拼音字符 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="ebdc4-113">字符串被设置格式使用<xref:System.Speech.Recognition.DisplayAttributes>获取从对象<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>属性从<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="ebdc4-114"><xref:System.Speech.Recognition.RecognizedWordUnit>从获取对象<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="ebdc4-115">一个无法识别的字符串的正常化的文本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-115">The normalized text for a recognized word.</span>
          </span>
          <span data-ttu-id="ebdc4-116">该值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="confidence">
          <span data-ttu-id="ebdc4-117">0.0 到 1.0 中指示单词标识的确定性的 <see langword="float" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span>
          </span>
        </param>
        <param name="pronunciation">
          <span data-ttu-id="ebdc4-118">一个无法识别的单词的语音拼写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-118">The phonetic spelling of a recognized word.</span>
          </span>
          <span data-ttu-id="ebdc4-119">该值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="lexicalForm">
          <span data-ttu-id="ebdc4-120">一个识别字的非正常化文本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-120">The unnormalized text for a recognized word.</span>
          </span>
          <span data-ttu-id="ebdc4-121">需要使用此参数可能不是 <see langword="null" />， " "或 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="displayAttributes">
          <span data-ttu-id="ebdc4-122">定义使用空白显示识别的词。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-122">Defines the use of white space to display recognized words.</span>
          </span>
        </param>
        <param name="audioPosition">
          <span data-ttu-id="ebdc4-123">音频输入流的已识别的单词的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-123">The location of the recognized word in the audio input stream.</span>
          </span>
          <span data-ttu-id="ebdc4-124">此值可为 <see cref="F:System.TimeSpan.Zero" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span>
          </span>
        </param>
        <param name="audioDuration">
          <span data-ttu-id="ebdc4-125">音频输入的长度对应已识别的单词。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-125">The length of the audio input corresponding to the recognized word.</span>
          </span>
          <span data-ttu-id="ebdc4-126">此值可为 <see cref="F:System.TimeSpan.Zero" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ebdc4-127">初始化 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebdc4-128">如果`text`或`pronunciation`是`null`，""，或<xref:System.String.Empty>和<xref:System.Speech.Recognition.RecognizedWordUnit>使用识别引擎将在识别操作中，生成任何输出中的相应值<xref:System.Speech.Recognition.RecognizedWordUnit>实例。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="ebdc4-129">直接构造<xref:System.Speech.Recognition.RecognizedWordUnit>仅在模拟使用识别操作时，通常使用实例<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法<xref:System.Speech.Recognition.SpeechRecognitionEngine>类和<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>或<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>方法<xref:System.Speech.Recognition.SpeechRecognizer>类。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="ebdc4-130">对于实际的应用程序，请执行不直接构造<xref:System.Speech.Recognition.RecognizedWordUnit>，而是获取它通过<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebdc4-131">下面的示例是仿真的某种程度上精心，新的词都生成输入中，传递到仿真程序中，，然后验证测试。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ebdc4-132">获取识别器分配的值，此值表示已识别的单词与给定输入匹配的可能性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-132">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ebdc4-133">对正确识别单词的确定性的相对度量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-133">A relative measure of the certainty of correct recognition for a word.</span>
          </span>
          <span data-ttu-id="ebdc4-134">该值分别为从 0.0 到 1.0，从低到高置信。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-134">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebdc4-135">置信度评分不能证明 word 已识别出正确的绝对可能性。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-135">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="ebdc4-136">相反，置信度分数提供了一种机制来进行比较的给定输入的多个将识别备用项的相对准确性。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-136">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="ebdc4-137">这简化了将最准确的识别结果返回。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-137">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="ebdc4-138">例如，如果被识别的单词具有 0.8 置信度得分，这并不意味着一词具有正在输入正确的匹配项的 80%的几率。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-138">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="ebdc4-139">这意味着单词是更有可能要比其他结果，确保输入正确的匹配项评分 0.8 小于。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-139">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="ebdc4-140">在其自己上的一个置信度得分没有意义，除非你有要进行比较，从相同的识别操作或从以前的相同输入荣誉的替代结果。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-140">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="ebdc4-141">返回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>到每个识别引擎是相对和唯一。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-141">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="ebdc4-142">没有定义的如何比较两个不同识别引擎之间的置信度值，也不如何<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>的个人<xref:System.Speech.Recognition.RecognizedWordUnit>对象定义<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>的<xref:System.Speech.Recognition.RecognizedPhrase>。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-142">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="ebdc4-143">语音识别引擎可以将一个低置信度得分分配给语音输入中，由于各种原因，包括后台干扰、 inarticulate 语音，或未预料到的单词或单词序列。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-143">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="ebdc4-144">如果你的应用程序正在使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例，你可以修改置信度在哪些语音输入被接受或拒绝的其中一条<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-144">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="ebdc4-145">在共享识别，也就是由管理器的置信度阈值<xref:System.Speech.Recognition.SpeechRecognizer>、 具有用户配置文件相关联并存储在 Windows 注册表中。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-145">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="ebdc4-146">应用程序不应写入属性的共享识别器注册表的更改。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-146">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ebdc4-147">获取用于通过当前 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 实例创建文本输出的格式化信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-147">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ebdc4-148">指定<see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 显示对象的内容的空白使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-148">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebdc4-149"><xref:System.Speech.Recognition.DisplayAttributes>返回对象<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>属性指定要用于给定单词的前导和尾随空格，如果有的话。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-149">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="ebdc4-150">有关如何使用此格式设置信息的详细信息，请参阅<xref:System.Speech.Recognition.DisplayAttributes>枚举。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-150">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebdc4-151">下面的示例演示一个实用工具例程 (`stringFromWordArray`)，用来生成设置的格式字符串中以下三种方式： 词法 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 规范化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，或发音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-151">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="ebdc4-152">从获取的文本输出<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>属性<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象，可从获得<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-152">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ebdc4-153">获取已识别的字符串的非正常化的文本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-153">Gets the unnormalized text of a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ebdc4-154">返回没有任何正常化的无法识别的单词的文本的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-154">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebdc4-155">在大多数情况下返回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>相同。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-155">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="ebdc4-156">但是，识别引擎可能使用语音规范化返回多用户友好或口语文本表示形式之间实现的音频输入。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-156">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="ebdc4-157">语音规范化是指使用的特殊构造或符号来表示书写的语音。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-157">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="ebdc4-158">例如，规范化可以将替换"$1.16"中输出文本的朗读的单词"美元和十六个美分"。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-158">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebdc4-159">下面的示例演示三种格式之一生成文本的实用程序例程： 词法 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 规范化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，和拼音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-159">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="ebdc4-160">从获取的文本输出<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象，可从获得<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-160">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ebdc4-161">获取已识别单词的注音拼写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-161">Gets the phonetic spelling of a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ebdc4-162">支持的语音字母表中的字符组成的字符串，如国际音标 (IPA) 或通用电话集 (UPS)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-162">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebdc4-163">内容<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>指示语音识别引擎用于与为其加载之一的语音输入匹配的发音<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-163">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="ebdc4-164">在语音识别引擎的内部词典识别语法中加载从链接的词典文档中可定义发音<xref:System.Speech.Recognition.Grammar>对象或在加载识别语法中的内联<xref:System.Speech.Recognition.Grammar>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-164">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="ebdc4-165">语音识别引擎还可以创建其发音的词典或语音识别引擎当前有权访问的语法中未定义的常见单词的发音。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-165">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="ebdc4-166">许多基于 Windows 的 Unicode 字体，例如媒体新支持 IPA 字符串的显示。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-166">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="ebdc4-167">有关详细信息，请参阅[国际音标](http://go.microsoft.com/fwlink/?LinkId=58363)。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-167">For more information, see [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebdc4-168">下面的示例演示生成具有三个可能的格式之一的字符串的实用工具例程： 词法 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 规范化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，和拼音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-168">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="ebdc4-169">从获取的文本输出<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象，可从获得<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-169">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ebdc4-170">获取已识别单词的规划化文本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-170">Gets the normalized text for a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ebdc4-171">包含给定输入单词的规范化文本输出的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ebdc4-171">A string that contains the normalized text output for a given input word.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebdc4-172">在大多数情况下返回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>将完全相同。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-172">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="ebdc4-173">但是，识别引擎可能使用语音规范化返回多用户友好或口语文本表示形式之间实现的音频输入。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-173">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="ebdc4-174">语音规范化是指使用的特殊构造或符号来表示书写的语音。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-174">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="ebdc4-175">例如，规范化可以将替换"$1.16"中输出文本的朗读的单词"美元和十六个美分"。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-175">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebdc4-176">下面的示例演示三种格式之一生成的字符串的实用工具例程： 词法 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 规范化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，和拼音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-176">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="ebdc4-177">从获取的文本输出<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象，可从获得<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。</span><span class="sxs-lookup"><span data-stu-id="ebdc4-177">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>