<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db8bbe70a61c7c005c717610d08e20178651bffc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529821" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供可识别的语音的原子单元。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 识别引擎返回的所有结果都构造的<xref:System.Speech.Recognition.RecognizedWordUnit>对象。  
  
 数组<xref:System.Speech.Recognition.RecognizedWordUnit>访问通过任何识别操作对象已<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。  
  
 除了提供识别确定性的度量值 (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>)<xref:System.Speech.Recognition.RecognizedWordUnit>实例提供：  
  
-   被识别的单词的规范化并确切 （或词法） 的文本表示形式。 有关详细信息，请参阅<xref:System.Speech.Recognition.ReplacementText>、<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>。  
  
-   使用受支持的拼音字母，例如国际音标 (IPA) 或通用电话设置 (UPS) 中的字符的发音信息。 有关详细信息，请参阅 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>。  
  
-   对打印的格式化设置。 有关详细信息请参阅<xref:System.Speech.Recognition.DisplayAttributes>类并将其<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>属性。  
  
   
  
## Examples  
 下面的示例演示一个实用工具例程 (`stringFromWordArray`)，用来生成字符串。 这些字符串包含词法输出 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)，规范化文本 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，或从国际音标拼音字符 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 字符串被设置格式使用<xref:System.Speech.Recognition.DisplayAttributes>获取从对象<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>属性从<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象。 <xref:System.Speech.Recognition.RecognizedWordUnit>从获取对象<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">一个无法识别的字符串的正常化的文本。  
  
 该值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</param>
        <param name="confidence">0.0 到 1.0 中指示单词标识的确定性的 <see langword="float" /> 值。</param>
        <param name="pronunciation">一个无法识别的单词的语音拼写。  
  
 该值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</param>
        <param name="lexicalForm">一个识别字的非正常化文本。  
  
 需要使用此参数可能不是 <see langword="null" />， " "或 <see cref="F:System.String.Empty" />。</param>
        <param name="displayAttributes">定义使用空白显示识别的词。</param>
        <param name="audioPosition">音频输入流的已识别的单词的位置。  
  
 此值可为 <see cref="F:System.TimeSpan.Zero" />。</param>
        <param name="audioDuration">音频输入的长度对应已识别的单词。  
  
 此值可为 <see cref="F:System.TimeSpan.Zero" />。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`text`或`pronunciation`是`null`，""，或<xref:System.String.Empty>和<xref:System.Speech.Recognition.RecognizedWordUnit>使用识别引擎将在识别操作中，生成任何输出中的相应值<xref:System.Speech.Recognition.RecognizedWordUnit>实例。  
  
 直接构造<xref:System.Speech.Recognition.RecognizedWordUnit>仅在模拟使用识别操作时，通常使用实例<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法<xref:System.Speech.Recognition.SpeechRecognitionEngine>类和<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>或<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>方法<xref:System.Speech.Recognition.SpeechRecognizer>类。  
  
 对于实际的应用程序，请执行不直接构造<xref:System.Speech.Recognition.RecognizedWordUnit>，而是获取它通过<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。  
  
   
  
## Examples  
 下面的示例是仿真的某种程度上精心，新的词都生成输入中，传递到仿真程序中，，然后验证测试。  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取识别器分配的值，此值表示已识别的单词与给定输入匹配的可能性。</summary>
        <value>对正确识别单词的确定性的相对度量。 该值分别为从 0.0 到 1.0，从低到高置信。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 置信度评分不能证明 word 已识别出正确的绝对可能性。 相反，置信度分数提供了一种机制来进行比较的给定输入的多个将识别备用项的相对准确性。 这简化了将最准确的识别结果返回。 例如，如果被识别的单词具有 0.8 置信度得分，这并不意味着一词具有正在输入正确的匹配项的 80%的几率。  这意味着单词是更有可能要比其他结果，确保输入正确的匹配项评分 0.8 小于。  
  
 在其自己上的一个置信度得分没有意义，除非你有要进行比较，从相同的识别操作或从以前的相同输入荣誉的替代结果。  
  
 返回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>到每个识别引擎是相对和唯一。 没有定义的如何比较两个不同识别引擎之间的置信度值，也不如何<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>的个人<xref:System.Speech.Recognition.RecognizedWordUnit>对象定义<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>的<xref:System.Speech.Recognition.RecognizedPhrase>。  
  
 语音识别引擎可以将一个低置信度得分分配给语音输入中，由于各种原因，包括后台干扰、 inarticulate 语音，或未预料到的单词或单词序列。 如果你的应用程序正在使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例，你可以修改置信度在哪些语音输入被接受或拒绝的其中一条<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。 在共享识别，也就是由管理器的置信度阈值<xref:System.Speech.Recognition.SpeechRecognizer>、 具有用户配置文件相关联并存储在 Windows 注册表中。 应用程序不应写入属性的共享识别器注册表的更改。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于通过当前 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 实例创建文本输出的格式化信息。</summary>
        <value>指定<see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 显示对象的内容的空白使用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.DisplayAttributes>返回对象<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>属性指定要用于给定单词的前导和尾随空格，如果有的话。  
  
 有关如何使用此格式设置信息的详细信息，请参阅<xref:System.Speech.Recognition.DisplayAttributes>枚举。  
  
   
  
## Examples  
 下面的示例演示一个实用工具例程 (`stringFromWordArray`)，用来生成设置的格式字符串中以下三种方式： 词法 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 规范化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，或发音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 从获取的文本输出<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>属性<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象，可从获得<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已识别的字符串的非正常化的文本。</summary>
        <value>返回没有任何正常化的无法识别的单词的文本的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大多数情况下返回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>相同。 但是，识别引擎可能使用语音规范化返回多用户友好或口语文本表示形式之间实现的音频输入。  
  
 语音规范化是指使用的特殊构造或符号来表示书写的语音。 例如，规范化可以将替换"$1.16"中输出文本的朗读的单词"美元和十六个美分"。  
  
   
  
## Examples  
 下面的示例演示三种格式之一生成文本的实用程序例程： 词法 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 规范化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，和拼音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 从获取的文本输出<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象，可从获得<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已识别单词的注音拼写。</summary>
        <value>支持的语音字母表中的字符组成的字符串，如国际音标 (IPA) 或通用电话集 (UPS)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>指示语音识别引擎用于与为其加载之一的语音输入匹配的发音<xref:System.Speech.Recognition.Grammar>对象。 在语音识别引擎的内部词典识别语法中加载从链接的词典文档中可定义发音<xref:System.Speech.Recognition.Grammar>对象或在加载识别语法中的内联<xref:System.Speech.Recognition.Grammar>对象。 语音识别引擎还可以创建其发音的词典或语音识别引擎当前有权访问的语法中未定义的常见单词的发音。  
  
 许多基于 Windows 的 Unicode 字体，例如媒体新支持 IPA 字符串的显示。 有关详细信息，请参阅[国际音标](http://go.microsoft.com/fwlink/?LinkId=58363)。  
  
   
  
## Examples  
 下面的示例演示生成具有三个可能的格式之一的字符串的实用工具例程： 词法 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 规范化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，和拼音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 从获取的文本输出<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象，可从获得<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已识别单词的规划化文本。</summary>
        <value>包含给定输入单词的规范化文本输出的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大多数情况下返回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>将完全相同。 但是，识别引擎可能使用语音规范化返回多用户友好或口语文本表示形式之间实现的音频输入。  
  
 语音规范化是指使用的特殊构造或符号来表示书写的语音。 例如，规范化可以将替换"$1.16"中输出文本的朗读的单词"美元和十六个美分"。  
  
   
  
## Examples  
 下面的示例演示三种格式之一生成的字符串的实用工具例程： 词法 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 规范化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，和拼音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 从获取的文本输出<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>对象，可从获得<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>对象。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>