<Type Name="Timer" FullName="System.Timers.Timer">
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="71237-101">在设定的间隔之后生成事件，带有生成重复事件的选项。</span><span class="sxs-lookup"><span data-stu-id="71237-101">Generates an event after a set interval, with an option to generate recurring events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-102"><xref:System.Timers.Timer>组件是一种基于服务器的计时器引发<xref:System.Timers.Timer.Elapsed>千分之几秒数之后应用程序中的事件<xref:System.Timers.Timer.Interval%2A>属性已过。</span><span class="sxs-lookup"><span data-stu-id="71237-102">The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed.</span></span> <span data-ttu-id="71237-103">你可以配置<xref:System.Timers.Timer>对象来引发事件只需一次或重复使用<xref:System.Timers.Timer.AutoReset%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="71237-103">You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property.</span></span> <span data-ttu-id="71237-104">通常情况下， <xref:System.Timers.Timer> ，使其保持在范围内，只要需要该对象在类级别声明。</span><span class="sxs-lookup"><span data-stu-id="71237-104">Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed.</span></span> <span data-ttu-id="71237-105">然后可处理其<xref:System.Timers.Timer.Elapsed>事件，以便提供常规处理。</span><span class="sxs-lookup"><span data-stu-id="71237-105">You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing.</span></span> <span data-ttu-id="71237-106">例如，假设你有必须保持的关键服务器运行每周 7 天、 每天 24 小时。</span><span class="sxs-lookup"><span data-stu-id="71237-106">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="71237-107">你可以创建使用的服务<xref:System.Timers.Timer>对象以定期检查的服务器，并确保系统处于启动并正在运行。</span><span class="sxs-lookup"><span data-stu-id="71237-107">You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="71237-108">如果系统未响应，该服务可能会尝试以重新启动服务器，或者通知管理员。</span><span class="sxs-lookup"><span data-stu-id="71237-108">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="71237-109"><xref:System.Timers.Timer>类不是适用于所有.NET 实现的版本，如.NET 标准 1.6 和更低版本。</span><span class="sxs-lookup"><span data-stu-id="71237-109">The <xref:System.Timers.Timer> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</span></span>
> <span data-ttu-id="71237-110">在这些情况下，你可以使用<xref:System.Threading.Timer?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="71237-110">In these cases, you can use the <xref:System.Threading.Timer?displayProperty=nameWithType> class instead.</span></span>
  
 <span data-ttu-id="71237-111">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="71237-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="71237-112">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="71237-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="71237-113">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="71237-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="71237-114">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="71237-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="71237-115">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="71237-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="71237-116">基于服务器的<xref:System.Timers.Timer?displayProperty=nameWithType>类专用于在多线程环境中的工作线程。</span><span class="sxs-lookup"><span data-stu-id="71237-116">The server-based <xref:System.Timers.Timer?displayProperty=nameWithType> class is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="71237-117">服务器的计时器可以在线程之间移动来处理引发<xref:System.Timers.Timer.Elapsed>事件，从而导致比 Windows 计时器在时间上引发事件的更准确。</span><span class="sxs-lookup"><span data-stu-id="71237-117">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 <span data-ttu-id="71237-118"><xref:System.Timers.Timer?displayProperty=nameWithType>组件引发<xref:System.Timers.Timer.Elapsed>基于的值 （以毫秒为单位） 的事件<xref:System.Timers.Timer.Interval%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="71237-118">The <xref:System.Timers.Timer?displayProperty=nameWithType> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property.</span></span> <span data-ttu-id="71237-119">你可以处理此事件以执行所需的处理。</span><span class="sxs-lookup"><span data-stu-id="71237-119">You can handle this event to perform the processing you need.</span></span> <span data-ttu-id="71237-120">例如，假设你有一个联机的销售应用程序可连续发布到数据库的销售订单。</span><span class="sxs-lookup"><span data-stu-id="71237-120">For example, suppose that you have an online sales application that continuously posts sales orders to a database.</span></span> <span data-ttu-id="71237-121">编译为传送的说明进行操作的服务进行的订单，而不是单独处理每个订单批处理操作。</span><span class="sxs-lookup"><span data-stu-id="71237-121">The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</span></span> <span data-ttu-id="71237-122">你可以使用<xref:System.Timers.Timer>启动批处理每隔 30 分钟。</span><span class="sxs-lookup"><span data-stu-id="71237-122">You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="71237-123">System.Timers.Timer 类具有相同的系统时钟的分辨率。</span><span class="sxs-lookup"><span data-stu-id="71237-123">The System.Timers.Timer class has the same resolution as the system clock.</span></span> <span data-ttu-id="71237-124">这意味着，<xref:System.Timers.Timer.Elapsed>事件将在系统时钟的分辨率如果定义的间隔触发<xref:System.Timers.Timer.Interval%2A>属性小于系统时钟的分辨率。</span><span class="sxs-lookup"><span data-stu-id="71237-124">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="71237-125">有关更多信息，请参见 <xref:System.Timers.Timer.Interval%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="71237-125">For more information, see the <xref:System.Timers.Timer.Interval%2A> property.</span></span>  
  
 <span data-ttu-id="71237-126">当<xref:System.Timers.Timer.AutoReset%2A>设置为`false`、<xref:System.Timers.Timer?displayProperty=nameWithType>对象引发<xref:System.Timers.Timer.Elapsed>事件一次，第一个之后<xref:System.Timers.Timer.Interval%2A>已过。</span><span class="sxs-lookup"><span data-stu-id="71237-126">When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=nameWithType> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed.</span></span> <span data-ttu-id="71237-127">若要保留引发<xref:System.Timers.Timer.Elapsed>事件定期在定义间隔<xref:System.Timers.Timer.Interval%2A>，将其设置<xref:System.Timers.Timer.AutoReset%2A>到`true`，这是默认值。</span><span class="sxs-lookup"><span data-stu-id="71237-127">To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.</span></span>  
  
 <span data-ttu-id="71237-128"><xref:System.Timers.Timer>组件捕获并禁止显示引发的事件处理程序的所有异常<xref:System.Timers.Timer.Elapsed>事件。</span><span class="sxs-lookup"><span data-stu-id="71237-128">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="71237-129">此行为将发生在.NET framework 的未来版本中的更改。</span><span class="sxs-lookup"><span data-stu-id="71237-129">This behavior is subject to change in future releases of the .NET Framework.</span></span> <span data-ttu-id="71237-130">但请注意，这不为 true 的事件处理程序，以异步方式执行，并包括`await`运算符 （在 C# 中) 或`Await`运算符 （在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="71237-130">Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic).</span></span> <span data-ttu-id="71237-131">如下面的示例所示，这些事件处理程序中引发的异常会传播回调用线程。</span><span class="sxs-lookup"><span data-stu-id="71237-131">Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</span></span> <span data-ttu-id="71237-132">有关异步方法中引发的异常的详细信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="71237-132">For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <span data-ttu-id="71237-133">如果<xref:System.Timers.Timer.SynchronizingObject%2A>属性是`null`、<xref:System.Timers.Timer.Elapsed>上引发事件<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="71237-133">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="71237-134">如果不需要处理<xref:System.Timers.Timer.Elapsed>事件持续时间超过<xref:System.Timers.Timer.Interval%2A>，可能在另一台再次引发此事件<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="71237-134">If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="71237-135">在此情况下，事件处理程序应该是可重入。</span><span class="sxs-lookup"><span data-stu-id="71237-135">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71237-136">事件处理方法可能在一个线程上运行另一个线程调用的同时<xref:System.Timers.Timer.Stop%2A>方法或设置<xref:System.Timers.Timer.Enabled%2A>属性`false`。</span><span class="sxs-lookup"><span data-stu-id="71237-136">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="71237-137">这可能会导致<xref:System.Timers.Timer.Elapsed>后停止计时器引发事件。</span><span class="sxs-lookup"><span data-stu-id="71237-137">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="71237-138">代码示例<xref:System.Timers.Timer.Stop%2A>方法演示一种方法，以避免此争用情况。</span><span class="sxs-lookup"><span data-stu-id="71237-138">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="71237-139">即使<xref:System.Timers.Timer.SynchronizingObject%2A>不`null`，<xref:System.Timers.Timer.Elapsed>事件可能会发生后<xref:System.Timers.Timer.Dispose%2A>或<xref:System.Timers.Timer.Stop%2A>调用方法后或<xref:System.Timers.Timer.Enabled%2A>属性已设置为`false`，因为引发的信号<xref:System.Timers.Timer.Elapsed>事件总是排队等待线程池线程上执行。</span><span class="sxs-lookup"><span data-stu-id="71237-139">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="71237-140">解决此争用条件设置一个标志，通知的事件处理程序是一种方法<xref:System.Timers.Timer.Elapsed>忽略后续的事件的事件。</span><span class="sxs-lookup"><span data-stu-id="71237-140">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="71237-141">如果你使用<xref:System.Timers.Timer?displayProperty=nameWithType>类与用户界面元素，如窗体或控件，而无需将计时器在该用户界面元素上分配的窗体或控件包含<xref:System.Timers.Timer>到<xref:System.Timers.Timer.SynchronizingObject%2A>属性，因此就事件封送到的用户界面线程。</span><span class="sxs-lookup"><span data-stu-id="71237-141">If you use the <xref:System.Timers.Timer?displayProperty=nameWithType> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.</span></span>  
  
 <span data-ttu-id="71237-142">有关默认的实例的属性值的列表<xref:System.Timers.Timer>，请参阅<xref:System.Timers.Timer.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="71237-142">For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="71237-143">请注意，.NET 包含名为的四个类`Timer`，每个的它提供不同的功能：</span><span class="sxs-lookup"><span data-stu-id="71237-143">Be aware that .NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>   
> - <span data-ttu-id="71237-144"><xref:System.Timers.Timer?displayProperty=nameWithType> （本主题）： 按固定的间隔触发事件。</span><span class="sxs-lookup"><span data-stu-id="71237-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (this topic): fires an event at regular intervals.</span></span> <span data-ttu-id="71237-145">类旨在用作基于服务器或多线程环境中; 中的服务组件它没有用户界面，并且不在运行时可见。</span><span class="sxs-lookup"><span data-stu-id="71237-145">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="71237-146"><xref:System.Threading.Timer?displayProperty=nameWithType>： 在固定时间间隔有线程池线程上执行的单个回调方法。</span><span class="sxs-lookup"><span data-stu-id="71237-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="71237-147">当计时器实例化，并且不能更改定义回调方法。</span><span class="sxs-lookup"><span data-stu-id="71237-147">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="71237-148">如<xref:System.Timers.Timer?displayProperty=nameWithType>类，该类适用于使用作为多线程环境中的基于服务器的或服务组件; 它没有用户界面，并且不在运行时可见。</span><span class="sxs-lookup"><span data-stu-id="71237-148">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="71237-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (仅适用于.NET framework): 按固定的间隔触发事件的 Windows 窗体组件。</span><span class="sxs-lookup"><span data-stu-id="71237-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</span></span> <span data-ttu-id="71237-150">组件没有用户界面，并旨在在单线程环境中使用。</span><span class="sxs-lookup"><span data-stu-id="71237-150">The component has no user interface and is designed for use in a single-threaded environment.</span></span>  
> - <span data-ttu-id="71237-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (仅适用于.NET framework): 在按固定间隔执行异步或同步网页回发的 ASP.NET 组件。</span><span class="sxs-lookup"><span data-stu-id="71237-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>  

## Examples  
 <span data-ttu-id="71237-152">下面的示例实例化`System.Timers.Timer`对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000 毫秒），将设置的事件处理程序事件，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="71237-152">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="71237-153">事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。</span><span class="sxs-lookup"><span data-stu-id="71237-153">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="71237-154">任何公共<see langword="static" />此类型的成员都是线程安全。</span><span class="sxs-lookup"><span data-stu-id="71237-154">Any public <see langword="static" /> members of this type are thread safe.</span></span> <span data-ttu-id="71237-155">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="71237-155">Any instance members are not guaranteed to be thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="71237-156">初始化 <see cref="T:System.Timers.Timer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="71237-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71237-157">初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将所有属性设置为初始值。</span><span class="sxs-lookup"><span data-stu-id="71237-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-158">下表显示的实例的初始属性值<xref:System.Timers.Timer>。</span><span class="sxs-lookup"><span data-stu-id="71237-158">The following table shows initial property values for an instance of <xref:System.Timers.Timer>.</span></span>  
  
|<span data-ttu-id="71237-159">Property</span><span class="sxs-lookup"><span data-stu-id="71237-159">Property</span></span>|<span data-ttu-id="71237-160">初始值</span><span class="sxs-lookup"><span data-stu-id="71237-160">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|<span data-ttu-id="71237-161">100 毫秒</span><span class="sxs-lookup"><span data-stu-id="71237-161">100 milliseconds</span></span>|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|<span data-ttu-id="71237-162">空引用（在 Visual Basic 中为 `Nothing`）。</span><span class="sxs-lookup"><span data-stu-id="71237-162">A null reference (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="71237-163">下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="71237-163">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="71237-164">事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。</span><span class="sxs-lookup"><span data-stu-id="71237-164">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval"><span data-ttu-id="71237-165">事件之间经过的时间（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="71237-165">The time, in milliseconds, between events.</span></span> <span data-ttu-id="71237-166">该值必须大于零且小于或等于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="71237-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="71237-167">初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将 <see cref="P:System.Timers.Timer.Interval" /> 属性设置为指定的毫秒数。</span><span class="sxs-lookup"><span data-stu-id="71237-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-168">此构造函数设置<xref:System.Timers.Timer.Interval%2A>属性的新的计时器实例，但不会启用计时器。</span><span class="sxs-lookup"><span data-stu-id="71237-168">This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71237-169">下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="71237-169">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="71237-170">事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。</span><span class="sxs-lookup"><span data-stu-id="71237-170">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71237-171"><paramref name="interval" /> 参数的值小于或等于零，或大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="71237-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71237-172">获取或设置一个布尔值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应只引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件（(<see langword="false" />) 或重复 (<see langword="true" />)）。</span><span class="sxs-lookup"><span data-stu-id="71237-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span></span></summary>
        <value>
          <span data-ttu-id="71237-173">如果 <see cref="T:System.Timers.Timer" /> 应在每次间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；如果它仅在间隔第一次结束后引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="71237-173"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the interval elapses; <see langword="false" /> if it should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once, after the first time the interval elapses.</span></span> <span data-ttu-id="71237-174">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="71237-174">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-175">如果<xref:System.Timers.Timer>时已经启用<xref:System.Timers.Timer.Start%2A>方法被调用时，时间间隔重置。</span><span class="sxs-lookup"><span data-stu-id="71237-175">If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset.</span></span> <span data-ttu-id="71237-176">如果<xref:System.Timers.Timer.AutoReset%2A>是`false`、<xref:System.Timers.Timer.Start%2A>方法必须调用以便再次开始计数。</span><span class="sxs-lookup"><span data-stu-id="71237-176">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="71237-177">将间隔重置会影响<xref:System.Timers.Timer.Elapsed>引发事件。</span><span class="sxs-lookup"><span data-stu-id="71237-177">Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised.</span></span> <span data-ttu-id="71237-178">例如，如果将间隔设置为 5 秒，然后设置<xref:System.Timers.Timer.Enabled%2A>属性`true`，计数开始时间<xref:System.Timers.Timer.Enabled%2A>设置。</span><span class="sxs-lookup"><span data-stu-id="71237-178">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="71237-179">如果为计数时 3 秒、 10 秒重置间隔<xref:System.Timers.Timer.Elapsed>第一次之后的 13 秒引发事件<xref:System.Timers.Timer.Enabled%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="71237-179">If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71237-180">下面的示例创建<xref:System.Timers.Timer>其<xref:System.Timers.Timer.Elapsed>1.5 秒后的事件触发。</span><span class="sxs-lookup"><span data-stu-id="71237-180">The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds.</span></span> <span data-ttu-id="71237-181">其事件处理程序然后显示"Hello World ！"</span><span class="sxs-lookup"><span data-stu-id="71237-181">Its event handler then displays "Hello World!"</span></span> <span data-ttu-id="71237-182">在控制台上。</span><span class="sxs-lookup"><span data-stu-id="71237-182">on the console.</span></span>  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71237-183">开始用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</span><span class="sxs-lookup"><span data-stu-id="71237-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-184">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]设计环境使用此方法来启动一个组件，窗体或由另一个组件使用的初始化。</span><span class="sxs-lookup"><span data-stu-id="71237-184">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="71237-185"><xref:System.Timers.Timer.EndInit%2A>方法初始化已结束。</span><span class="sxs-lookup"><span data-stu-id="71237-185">The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="71237-186">使用<xref:System.Timers.Timer.BeginInit%2A>和<xref:System.Timers.Timer.EndInit%2A>方法阻止控件完全初始化之前使用。</span><span class="sxs-lookup"><span data-stu-id="71237-186">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71237-187">释放由 <see cref="T:System.Timers.Timer" /> 占用的资源。</span><span class="sxs-lookup"><span data-stu-id="71237-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-188"><xref:System.Timers.Timer.Close%2A>方法反过来调用`Dispose`方法。</span><span class="sxs-lookup"><span data-stu-id="71237-188">The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="71237-189">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="71237-189"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="71237-190">释放由当前 <see cref="T:System.Timers.Timer" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="71237-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71237-191">达到间隔时发生。</span><span class="sxs-lookup"><span data-stu-id="71237-191">Occurs when the interval elapses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-192"><xref:System.Timers.Timer.Elapsed>如果引发事件<xref:System.Timers.Timer.Enabled%2A>属性是`true`由定义的时间间隔 （以毫秒为单位）<xref:System.Timers.Timer.Interval%2A>属性经历。</span><span class="sxs-lookup"><span data-stu-id="71237-192">The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses.</span></span> <span data-ttu-id="71237-193">如果<xref:System.Timers.Timer.AutoReset%2A>属性是`true`，由定义的时间间隔重复引发该事件<xref:System.Timers.Timer.Interval%2A>属性; 否则，引发该事件仅一次，第一次<xref:System.Timers.Timer.Interval%2A>值经历。</span><span class="sxs-lookup"><span data-stu-id="71237-193">If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.</span></span>  
  
 <span data-ttu-id="71237-194">如果<xref:System.Timers.Timer.Interval%2A>后设置<xref:System.Timers.Timer>已启动，会重置计数。</span><span class="sxs-lookup"><span data-stu-id="71237-194">If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="71237-195">例如，如果将间隔设置为 5 秒，然后设置<xref:System.Timers.Timer.Enabled%2A>到`true`，计数开始时间<xref:System.Timers.Timer.Enabled%2A>设置。</span><span class="sxs-lookup"><span data-stu-id="71237-195">For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="71237-196">如果为 10 秒计数为 3 秒时重置间隔<xref:System.Timers.Timer.Elapsed>第一次之后的 13 秒引发事件<xref:System.Timers.Timer.Enabled%2A>已设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="71237-196">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="71237-197">如果<xref:System.Timers.Timer.SynchronizingObject%2A>属性是`null`、<xref:System.Timers.Timer.Elapsed>上引发事件<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="71237-197">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="71237-198">如果在处理<xref:System.Timers.Timer.Elapsed>事件持续时间超过<xref:System.Timers.Timer.Interval%2A>，可能在另一台再次引发此事件<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="71237-198">If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="71237-199">在此情况下，事件处理程序应该是可重入。</span><span class="sxs-lookup"><span data-stu-id="71237-199">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71237-200">事件处理方法可能在一个线程上运行另一个线程调用的同时<xref:System.Timers.Timer.Stop%2A>方法或设置<xref:System.Timers.Timer.Enabled%2A>属性`false`。</span><span class="sxs-lookup"><span data-stu-id="71237-200">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="71237-201">这可能会导致<xref:System.Timers.Timer.Elapsed>后停止计时器引发事件。</span><span class="sxs-lookup"><span data-stu-id="71237-201">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="71237-202">代码示例<xref:System.Timers.Timer.Stop%2A>方法演示一种方法，以避免此争用情况。</span><span class="sxs-lookup"><span data-stu-id="71237-202">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="71237-203">即使<xref:System.Timers.Timer.SynchronizingObject%2A>不`null`，<xref:System.Timers.Timer.Elapsed>事件可能会发生后<xref:System.Timers.Timer.Dispose%2A>或<xref:System.Timers.Timer.Stop%2A>调用方法后或<xref:System.Timers.Timer.Enabled%2A>属性已设置为`false`，因为引发的信号<xref:System.Timers.Timer.Elapsed>事件总是排队等待线程池线程上执行。</span><span class="sxs-lookup"><span data-stu-id="71237-203">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="71237-204">解决此争用条件设置一个标志，通知的事件处理程序是一种方法<xref:System.Timers.Timer.Elapsed>忽略后续的事件的事件。</span><span class="sxs-lookup"><span data-stu-id="71237-204">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="71237-205"><xref:System.Timers.Timer>组件捕获并禁止显示引发的事件处理程序的所有异常<xref:System.Timers.Timer.Elapsed>事件。</span><span class="sxs-lookup"><span data-stu-id="71237-205">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="71237-206">此行为将发生在.NET framework 的未来版本中的更改。</span><span class="sxs-lookup"><span data-stu-id="71237-206">This behavior is subject to change in future releases of the .NET Framework.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71237-207">下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="71237-207">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="71237-208">事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。</span><span class="sxs-lookup"><span data-stu-id="71237-208">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71237-209">获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="71237-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value>
          <span data-ttu-id="71237-210">如果 <see cref="T:System.Timers.Timer" /> 应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="71237-210"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="71237-211">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="71237-211">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-212">设置<xref:System.Timers.Timer.Enabled%2A>到`true`等同于调用<xref:System.Timers.Timer.Start%2A>，而设置<xref:System.Timers.Timer.Enabled%2A>到`false`等同于调用<xref:System.Timers.Timer.Stop%2A>。</span><span class="sxs-lookup"><span data-stu-id="71237-212">Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71237-213">若要引发的信号<xref:System.Timers.Timer.Elapsed>事件始终上排队以便执行<xref:System.Threading.ThreadPool>线程。</span><span class="sxs-lookup"><span data-stu-id="71237-213">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="71237-214">这可能会导致<xref:System.Timers.Timer.Elapsed>后引发事件<xref:System.Timers.Timer.Enabled%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="71237-214">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`.</span></span> <span data-ttu-id="71237-215">代码示例<xref:System.Timers.Timer.Stop%2A>方法演示一种方法要解决此争用条件。</span><span class="sxs-lookup"><span data-stu-id="71237-215">The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.</span></span>  
  
 <span data-ttu-id="71237-216">如果<xref:System.Timers.Timer.Enabled%2A>设置为`true`和<xref:System.Timers.Timer.AutoReset%2A>设置为`false`、<xref:System.Timers.Timer>引发<xref:System.Timers.Timer.Elapsed>事件仅后第一次间隔结束。</span><span class="sxs-lookup"><span data-stu-id="71237-216">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span>  
  
 <span data-ttu-id="71237-217">如果间隔后设置<xref:System.Timers.Timer>已启动，会重置计数。</span><span class="sxs-lookup"><span data-stu-id="71237-217">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="71237-218">例如，如果将间隔设置为 5 秒，然后设置<xref:System.Timers.Timer.Enabled%2A>属性`true`，计数开始时间<xref:System.Timers.Timer.Enabled%2A>设置。</span><span class="sxs-lookup"><span data-stu-id="71237-218">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="71237-219">如果为 10 秒计数为 3 秒时重置间隔<xref:System.Timers.Timer.Elapsed>第一次之后的 13 秒引发事件<xref:System.Timers.Timer.Enabled%2A>已设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="71237-219">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71237-220">某些可视化设计器，如在 Microsoft Visual Studio 中，设置<xref:System.Timers.Timer.Enabled%2A>属性`true`时插入一个新<xref:System.Timers.Timer>。</span><span class="sxs-lookup"><span data-stu-id="71237-220">Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71237-221">下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="71237-221">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="71237-222">事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。</span><span class="sxs-lookup"><span data-stu-id="71237-222">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="71237-223">计时器已释放，无法设置此属性。</span><span class="sxs-lookup"><span data-stu-id="71237-223">This property cannot be set because the timer has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71237-224">在定时器启用之前，<see cref="P:System.Timers.Timer.Interval" /> 属性设置为大于 <see cref="F:System.Int32.MaxValue" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="71237-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71237-225">结束用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</span><span class="sxs-lookup"><span data-stu-id="71237-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-226">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]设计环境使用此方法来结束用于窗体或由另一个组件使用的组件的初始化。</span><span class="sxs-lookup"><span data-stu-id="71237-226">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="71237-227"><xref:System.Timers.Timer.BeginInit%2A>方法开始初始化。</span><span class="sxs-lookup"><span data-stu-id="71237-227">The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="71237-228">使用<xref:System.Timers.Timer.BeginInit%2A>和<xref:System.Timers.Timer.EndInit%2A>方法阻止控件完全初始化之前使用。</span><span class="sxs-lookup"><span data-stu-id="71237-228">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71237-229">获取或设置引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="71237-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="71237-230"><see cref="E:System.Timers.Timer.Elapsed" /> 事件之间经过的时间（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="71237-230">The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed" /> events.</span></span> <span data-ttu-id="71237-231">该值必须大于零并小于或等于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="71237-231">The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span> <span data-ttu-id="71237-232">默认值为 100 毫秒。</span><span class="sxs-lookup"><span data-stu-id="71237-232">The default is 100 milliseconds.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-233">你使用<xref:System.Timers.Timer.Interval%2A>属性来确定的频率<xref:System.Timers.Timer.Elapsed>激发事件。</span><span class="sxs-lookup"><span data-stu-id="71237-233">You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired.</span></span> <span data-ttu-id="71237-234">因为<xref:System.Timers.Timer>类取决于系统时钟，它同时具有相同的系统时钟的分辨率。</span><span class="sxs-lookup"><span data-stu-id="71237-234">Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock.</span></span> <span data-ttu-id="71237-235">这意味着，<xref:System.Timers.Timer.Elapsed>事件将在系统时钟的分辨率如果定义的间隔触发<xref:System.Timers.Timer.Interval%2A>属性小于系统时钟的分辨率。</span><span class="sxs-lookup"><span data-stu-id="71237-235">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="71237-236">下面的示例设置<xref:System.Timers.Timer.Interval%2A>到 5 毫秒的属性。</span><span class="sxs-lookup"><span data-stu-id="71237-236">The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds.</span></span> <span data-ttu-id="71237-237">在上运行时[!INCLUDE[win7](~/includes/win7-md.md)]系统的系统时钟的分辨率大约 15 毫秒，事件将触发大约每隔 15 毫秒，而不是每隔 5 毫秒。</span><span class="sxs-lookup"><span data-stu-id="71237-237">When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 <span data-ttu-id="71237-238">下面的代码可用于确定当前系统上的系统时钟的分辨率：</span><span class="sxs-lookup"><span data-stu-id="71237-238">You can use the following code to determine the resolution of the system clock on the current system:</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 <span data-ttu-id="71237-239">如果你的应用需要比提供的更大的分辨率<xref:System.Timers.Timer>类或使用高分辨率的多媒体计时器; 请参阅系统时钟[如何： 使用高分辨率计时器](http://msdn.microsoft.com/library/aa964692.aspx)。</span><span class="sxs-lookup"><span data-stu-id="71237-239">If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](http://msdn.microsoft.com/library/aa964692.aspx).</span></span>  
  
 <span data-ttu-id="71237-240">如果间隔后设置<xref:System.Timers.Timer>已启动，会重置计数。</span><span class="sxs-lookup"><span data-stu-id="71237-240">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="71237-241">例如，如果将间隔设置为 5 秒，然后设置<xref:System.Timers.Timer.Enabled%2A>属性`true`，计数开始时间<xref:System.Timers.Timer.Enabled%2A>设置。</span><span class="sxs-lookup"><span data-stu-id="71237-241">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="71237-242">如果为 10 秒计数为 3 秒时重置间隔<xref:System.Timers.Timer.Elapsed>第一次之后的 13 秒引发事件<xref:System.Timers.Timer.Enabled%2A>已设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="71237-242">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="71237-243">如果<xref:System.Timers.Timer.Enabled%2A>设置为`true`和<xref:System.Timers.Timer.AutoReset%2A>设置为`false`、<xref:System.Timers.Timer>引发<xref:System.Timers.Timer.Elapsed>事件仅后第一次间隔结束。</span><span class="sxs-lookup"><span data-stu-id="71237-243">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="71237-244"><xref:System.Timers.Timer.Enabled%2A> 然后将设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="71237-244"><xref:System.Timers.Timer.Enabled%2A> is then set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71237-245">如果<xref:System.Timers.Timer.Enabled%2A>和<xref:System.Timers.Timer.AutoReset%2A>都设置为`false`，和计时器以前已启用，设置<xref:System.Timers.Timer.Interval%2A>属性会导致<xref:System.Timers.Timer.Elapsed>事件被引发一次，就像<xref:System.Timers.Timer.Enabled%2A>属性必须设置为`true`.</span><span class="sxs-lookup"><span data-stu-id="71237-245">If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`.</span></span> <span data-ttu-id="71237-246">若要将间隔设置而不会引发该事件，可以暂时设置<xref:System.Timers.Timer.Enabled%2A>属性`true`，将其设置<xref:System.Timers.Timer.Interval%2A>属性设置为所需的时间间隔，然后立即设置<xref:System.Timers.Timer.Enabled%2A>属性改回`false`。</span><span class="sxs-lookup"><span data-stu-id="71237-246">To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71237-247">下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="71237-247">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="71237-248">事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。</span><span class="sxs-lookup"><span data-stu-id="71237-248">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="71237-249">间隔小于或等于零。</span><span class="sxs-lookup"><span data-stu-id="71237-249">The interval is less than or equal to zero.</span></span>  
  
 <span data-ttu-id="71237-250">或</span><span class="sxs-lookup"><span data-stu-id="71237-250">-or-</span></span>  
  
 <span data-ttu-id="71237-251">间隔大于 <see cref="F:System.Int32.MaxValue" />，计时器当前已启用。</span><span class="sxs-lookup"><span data-stu-id="71237-251">The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span></span> <span data-ttu-id="71237-252">（如果当前未启用计时器，则在启用它之前不会引发异常。）</span><span class="sxs-lookup"><span data-stu-id="71237-252">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span></span></exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71237-253">获取或设置在设计模式中将 <see cref="T:System.Timers.Timer" /> 绑定到其容器的站点。</span><span class="sxs-lookup"><span data-stu-id="71237-253">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span></span></summary>
        <value><span data-ttu-id="71237-254"><see cref="T:System.ComponentModel.ISite" /> 界面，此界面表示将 <see cref="T:System.Timers.Timer" /> 对象绑定到其容器的站点。</span><span class="sxs-lookup"><span data-stu-id="71237-254">An <see cref="T:System.ComponentModel.ISite" /> interface representing the site that binds the <see cref="T:System.Timers.Timer" /> object to its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-255">站点绑定<xref:System.ComponentModel.Component>到<xref:System.ComponentModel.Container>和启用它们之间的通信，以及提供有关要管理其组件的容器的一种方法。</span><span class="sxs-lookup"><span data-stu-id="71237-255">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71237-256">通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="true" /> 开始引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="71237-256">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-257">如果<xref:System.Timers.Timer.Start%2A>称为和<xref:System.Timers.Timer.AutoReset%2A>设置为`false`、<xref:System.Timers.Timer>引发<xref:System.Timers.Timer.Elapsed>事件仅后第一次间隔结束。</span><span class="sxs-lookup"><span data-stu-id="71237-257">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="71237-258">如果<xref:System.Timers.Timer.Start%2A>称为和<xref:System.Timers.Timer.AutoReset%2A>是`true`、<xref:System.Timers.Timer>引发<xref:System.Timers.Timer.Elapsed>事件第一个时间间隔和经过继续在指定的时间间隔引发事件。</span><span class="sxs-lookup"><span data-stu-id="71237-258">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.</span></span>  
  
 <span data-ttu-id="71237-259">你还可以通过设置启动计时<xref:System.Timers.Timer.Enabled%2A>到`true`。</span><span class="sxs-lookup"><span data-stu-id="71237-259">You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71237-260">如果<xref:System.Timers.Timer.AutoReset%2A>是`false`、<xref:System.Timers.Timer.Start%2A>方法必须调用以便再次开始计数。</span><span class="sxs-lookup"><span data-stu-id="71237-260">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="71237-261">调用<xref:System.Timers.Timer.Start%2A>方法计时器处于启用状态时不起作用。</span><span class="sxs-lookup"><span data-stu-id="71237-261">A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="71237-262">创建 <see cref="T:System.Timers.Timer" />，使其时间间隔等于或大于 <see cref="F:System.Int32.MaxValue" /> + 1，或将其时间间隔设置为小于零。</span><span class="sxs-lookup"><span data-stu-id="71237-262">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="71237-263">通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="false" /> 停止引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="71237-263">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-264">您也可以通过设置终止计时<xref:System.Timers.Timer.Enabled%2A>到`false`。</span><span class="sxs-lookup"><span data-stu-id="71237-264">You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71237-265">信号以引发<xref:System.Timers.Timer.Elapsed>事件始终上排队以便执行<xref:System.Threading.ThreadPool>线程，因此事件处理方法可能会运行在一个线程在同一时间调用<xref:System.Timers.Timer.Stop%2A>方法在另一个线程上运行。</span><span class="sxs-lookup"><span data-stu-id="71237-265">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread.</span></span> <span data-ttu-id="71237-266">这可能会导致<xref:System.Timers.Timer.Elapsed>后引发事件<xref:System.Timers.Timer.Stop%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="71237-266">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called.</span></span> <span data-ttu-id="71237-267">下一节中的代码示例演示一个方法，若要解决此争用条件。</span><span class="sxs-lookup"><span data-stu-id="71237-267">The code example in the next section shows one way to work around this race condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71237-268">下面的示例实例化`System.Timers.Timer`对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000 毫秒），将设置的事件处理程序事件，并启动计时器。</span><span class="sxs-lookup"><span data-stu-id="71237-268">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="71237-269">事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。</span><span class="sxs-lookup"><span data-stu-id="71237-269">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span> <span data-ttu-id="71237-270">当用户按 Enter 键时，在应用程序调用<xref:System.Timers.Timer.Stop%2A>之前终止应用程序的方法。</span><span class="sxs-lookup"><span data-stu-id="71237-270">When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 <span data-ttu-id="71237-271">下面的代码示例演示一种方法，以防止调用的线程<xref:System.Timers.Timer.Stop%2A>从一直持续到当前正在执行的方法<xref:System.Timers.Timer.Elapsed>事件即结束，并且还可防止两个<xref:System.Timers.Timer.Elapsed>从执行在同一个事件处理程序的事件时间 （通常称为可重入性）。</span><span class="sxs-lookup"><span data-stu-id="71237-271">The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).</span></span>  
  
 <span data-ttu-id="71237-272">此示例执行 100 次测试运行。</span><span class="sxs-lookup"><span data-stu-id="71237-272">The example executes 100 test runs.</span></span> <span data-ttu-id="71237-273">每次运行测试时，计时器启动 150 毫秒为单位的间隔。</span><span class="sxs-lookup"><span data-stu-id="71237-273">Each time the test is run, the timer is started with an interval of 150 milliseconds.</span></span> <span data-ttu-id="71237-274">事件处理程序使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法来模拟随机变化长度从 50 到 200 毫秒的任务。</span><span class="sxs-lookup"><span data-stu-id="71237-274">The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</span></span> <span data-ttu-id="71237-275">测试方法还可启动的控制线程等待一秒，然后停止计时器。</span><span class="sxs-lookup"><span data-stu-id="71237-275">The test method also starts a control thread that waits for a second and then stops the timer.</span></span> <span data-ttu-id="71237-276">如果控制线程停止计时器时正在处理的事件，控制线程必须等待，直到该事件在继续之前完成。</span><span class="sxs-lookup"><span data-stu-id="71237-276">If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</span></span>  
  
 <span data-ttu-id="71237-277"><xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>以避免重新进入并阻止控制线程继续执行事件结束前使用方法重载。</span><span class="sxs-lookup"><span data-stu-id="71237-277">The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</span></span> <span data-ttu-id="71237-278">事件处理程序使用<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>方法将控件设置变量为 1，但前提是当前值为零。</span><span class="sxs-lookup"><span data-stu-id="71237-278">The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero.</span></span> <span data-ttu-id="71237-279">这是一个原子操作。</span><span class="sxs-lookup"><span data-stu-id="71237-279">This is an atomic operation.</span></span> <span data-ttu-id="71237-280">如果返回值为零，控制变量已设置为 1 和事件处理程序在处理。</span><span class="sxs-lookup"><span data-stu-id="71237-280">If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</span></span> <span data-ttu-id="71237-281">如果返回值为非零，则只被丢弃事件以避免重新进入。</span><span class="sxs-lookup"><span data-stu-id="71237-281">If the return value is non-zero, the event is simply discarded to avoid reentrancy.</span></span> <span data-ttu-id="71237-282">(如果它是执行每个事件，所需<xref:System.Threading.Monitor>类将是更好的方法来同步的事件。)事件处理程序结束时，它设置的控制变量返回零。</span><span class="sxs-lookup"><span data-stu-id="71237-282">(If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</span></span> <span data-ttu-id="71237-283">该示例记录的执行，而被丢弃由于可重入性及后发生的事件总数<xref:System.Timers.Timer.Stop%2A>调用了方法。</span><span class="sxs-lookup"><span data-stu-id="71237-283">The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.</span></span>  
  
 <span data-ttu-id="71237-284">控制线程使用<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>方法用于设置控件的变量为-1 （减 1)，但前提是当前值为零。</span><span class="sxs-lookup"><span data-stu-id="71237-284">The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero.</span></span> <span data-ttu-id="71237-285">如果该原子操作返回非零，当前正在执行事件。</span><span class="sxs-lookup"><span data-stu-id="71237-285">If the atomic operation returns non-zero, an event is currently executing.</span></span> <span data-ttu-id="71237-286">控制线程等待并重试。</span><span class="sxs-lookup"><span data-stu-id="71237-286">The control thread waits and tries again.</span></span> <span data-ttu-id="71237-287">该示例记录的控制线程必须等待事件完成的次数。</span><span class="sxs-lookup"><span data-stu-id="71237-287">The example records the number of times the control thread had to wait for an event to finish.</span></span>  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="71237-288">获取或设置对象，该对象用于在间隔过后封送发出的事件处理程序调用。</span><span class="sxs-lookup"><span data-stu-id="71237-288">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span></span></summary>
        <value><span data-ttu-id="71237-289"><see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它表示对象，该对象用于在间隔过后封送发出的事件处理程序调用。</span><span class="sxs-lookup"><span data-stu-id="71237-289">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</span></span> <span data-ttu-id="71237-290">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="71237-290">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71237-291">当<xref:System.Timers.Timer.SynchronizingObject%2A>是`null`，处理的方法<xref:System.Timers.Timer.Elapsed>事件时在系统线程池中的线程上调用。</span><span class="sxs-lookup"><span data-stu-id="71237-291">When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool.</span></span> <span data-ttu-id="71237-292">系统线程池的详细信息，请参阅<xref:System.Threading.ThreadPool>。</span><span class="sxs-lookup"><span data-stu-id="71237-292">For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="71237-293">当<xref:System.Timers.Timer.Elapsed>由可视化的 Windows 窗体组件，如按钮，可能会引发异常或只是结果可能无法通过系统线程池访问组件处理事件。</span><span class="sxs-lookup"><span data-stu-id="71237-293">When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</span></span> <span data-ttu-id="71237-294">通过设置来避免这种效果<xref:System.Timers.Timer.SynchronizingObject%2A>到 Windows 窗体组件时，这将导致处理的方法<xref:System.Timers.Timer.Elapsed>事件创建该组件在同一线程上调用。</span><span class="sxs-lookup"><span data-stu-id="71237-294">Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71237-295">即使<xref:System.Timers.Timer.SynchronizingObject%2A>属性不是`null`，<xref:System.Timers.Timer.Elapsed>事件可能会发生后<xref:System.Timers.Timer.Dispose%2A>或<xref:System.Timers.Timer.Stop%2A>调用方法后或<xref:System.Timers.Timer.Enabled%2A>属性已设置为`false`，因为引发的信号<xref:System.Timers.Timer.Elapsed>事件总是排队等待线程池线程上执行。</span><span class="sxs-lookup"><span data-stu-id="71237-295">Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="71237-296">解决此争用条件设置一个标志，通知的事件处理程序是一种方法<xref:System.Timers.Timer.Elapsed>忽略后续的事件的事件。</span><span class="sxs-lookup"><span data-stu-id="71237-296">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="71237-297">如果<xref:System.Timers.Timer>在 Windows 窗体设计器中，在 Visual Studio 内使用<xref:System.Timers.Timer.SynchronizingObject%2A>自动设置为包含的控件<xref:System.Timers.Timer>。</span><span class="sxs-lookup"><span data-stu-id="71237-297">If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>.</span></span> <span data-ttu-id="71237-298">例如，如果你将放置<xref:System.Timers.Timer>的设计器上`Form1`(其继承自<xref:System.Windows.Forms.Form>)，则<xref:System.Timers.Timer.SynchronizingObject%2A>属性<xref:System.Timers.Timer>设置为的实例`Form1`。</span><span class="sxs-lookup"><span data-stu-id="71237-298">For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71237-299">下面的示例是一个非常简单的文本文件编辑器作为服务的 Windows 窗体应用。</span><span class="sxs-lookup"><span data-stu-id="71237-299">The following example is a Windows Forms app that serves as a very simple text file editor.</span></span> <span data-ttu-id="71237-300">当尚未保存的文本的文本框中时，应用程序要求用户在一分钟的时间间隔他或她是否要保存的文本框中的内容。</span><span class="sxs-lookup"><span data-stu-id="71237-300">When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</span></span>  <span data-ttu-id="71237-301">若要这样做，<xref:System.Timers.Timer.Interval%2A>属性设置为一分钟 （60,000 毫秒为单位），和<xref:System.Timers.Timer.SynchronizingObject%2A>属性设置为<xref:System.Windows.Forms.Form>对象。</span><span class="sxs-lookup"><span data-stu-id="71237-301">To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.</span></span>  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 <span data-ttu-id="71237-302">该示例需要将以下控件添加到窗体：</span><span class="sxs-lookup"><span data-stu-id="71237-302">The example requires that you add the following controls to the form:</span></span>  
  
-   <span data-ttu-id="71237-303">A<xref:System.Windows.Forms.TextBox>控件名为`TextBox1`（其默认名称）。</span><span class="sxs-lookup"><span data-stu-id="71237-303">A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).</span></span>  
  
-   <span data-ttu-id="71237-304">A<xref:System.Windows.Forms.Button>控件名为`Button1`（其默认名称）。</span><span class="sxs-lookup"><span data-stu-id="71237-304">A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).</span></span>  
  
-   <span data-ttu-id="71237-305">A<xref:System.Windows.Forms.SaveFileDialog>控件名为`SaveSaveFileDialog1`（其默认名称）。</span><span class="sxs-lookup"><span data-stu-id="71237-305">A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>