<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="618b69c9a4d91151391fe5e2c79054e0441f4aec" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530801" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>在设定的间隔之后生成事件，带有生成重复事件的选项。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer>组件是一种基于服务器的计时器引发<xref:System.Timers.Timer.Elapsed>千分之几秒数之后应用程序中的事件<xref:System.Timers.Timer.Interval%2A>属性已过。 你可以配置<xref:System.Timers.Timer>对象来引发事件只需一次或重复使用<xref:System.Timers.Timer.AutoReset%2A>属性。 通常情况下， <xref:System.Timers.Timer> ，使其保持在范围内，只要需要该对象在类级别声明。 然后可处理其<xref:System.Timers.Timer.Elapsed>事件，以便提供常规处理。 例如，假设你有必须保持的关键服务器运行每周 7 天、 每天 24 小时。 你可以创建使用的服务<xref:System.Timers.Timer>对象以定期检查的服务器，并确保系统处于启动并正在运行。 如果系统未响应，该服务可能会尝试以重新启动服务器，或者通知管理员。  
  
> [!IMPORTANT]
> <xref:System.Timers.Timer>类不是适用于所有.NET 实现的版本，如.NET 标准 1.6 和更低版本。
> 在这些情况下，你可以使用<xref:System.Threading.Timer?displayProperty=nameWithType>类。
  
 此类型实现<xref:System.IDisposable>接口。 在使用完类型后，您应直接或间接释放类型。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。 若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。  
  
 基于服务器的<xref:System.Timers.Timer?displayProperty=nameWithType>类专用于在多线程环境中的工作线程。 服务器的计时器可以在线程之间移动来处理引发<xref:System.Timers.Timer.Elapsed>事件，从而导致比 Windows 计时器在时间上引发事件的更准确。  
  
 <xref:System.Timers.Timer?displayProperty=nameWithType>组件引发<xref:System.Timers.Timer.Elapsed>基于的值 （以毫秒为单位） 的事件<xref:System.Timers.Timer.Interval%2A>属性。 你可以处理此事件以执行所需的处理。 例如，假设你有一个联机的销售应用程序可连续发布到数据库的销售订单。 编译为传送的说明进行操作的服务进行的订单，而不是单独处理每个订单批处理操作。 你可以使用<xref:System.Timers.Timer>启动批处理每隔 30 分钟。  
  
> [!IMPORTANT]
>  System.Timers.Timer 类具有相同的系统时钟的分辨率。 这意味着，<xref:System.Timers.Timer.Elapsed>事件将在系统时钟的分辨率如果定义的间隔触发<xref:System.Timers.Timer.Interval%2A>属性小于系统时钟的分辨率。 有关更多信息，请参见 <xref:System.Timers.Timer.Interval%2A> 属性。  
  
 当<xref:System.Timers.Timer.AutoReset%2A>设置为`false`、<xref:System.Timers.Timer?displayProperty=nameWithType>对象引发<xref:System.Timers.Timer.Elapsed>事件一次，第一个之后<xref:System.Timers.Timer.Interval%2A>已过。 若要保留引发<xref:System.Timers.Timer.Elapsed>事件定期在定义间隔<xref:System.Timers.Timer.Interval%2A>，将其设置<xref:System.Timers.Timer.AutoReset%2A>到`true`，这是默认值。  
  
 <xref:System.Timers.Timer>组件捕获并禁止显示引发的事件处理程序的所有异常<xref:System.Timers.Timer.Elapsed>事件。 此行为将发生在.NET framework 的未来版本中的更改。 但请注意，这不为 true 的事件处理程序，以异步方式执行，并包括`await`运算符 （在 C# 中) 或`Await`运算符 （在 Visual Basic 中)。 如下面的示例所示，这些事件处理程序中引发的异常会传播回调用线程。 有关异步方法中引发的异常的详细信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 如果<xref:System.Timers.Timer.SynchronizingObject%2A>属性是`null`、<xref:System.Timers.Timer.Elapsed>上引发事件<xref:System.Threading.ThreadPool>线程。 如果不需要处理<xref:System.Timers.Timer.Elapsed>事件持续时间超过<xref:System.Timers.Timer.Interval%2A>，可能在另一台再次引发此事件<xref:System.Threading.ThreadPool>线程。 在此情况下，事件处理程序应该是可重入。  
  
> [!NOTE]
>  事件处理方法可能在一个线程上运行另一个线程调用的同时<xref:System.Timers.Timer.Stop%2A>方法或设置<xref:System.Timers.Timer.Enabled%2A>属性`false`。 这可能会导致<xref:System.Timers.Timer.Elapsed>后停止计时器引发事件。 代码示例<xref:System.Timers.Timer.Stop%2A>方法演示一种方法，以避免此争用情况。  
  
 即使<xref:System.Timers.Timer.SynchronizingObject%2A>不`null`，<xref:System.Timers.Timer.Elapsed>事件可能会发生后<xref:System.Timers.Timer.Dispose%2A>或<xref:System.Timers.Timer.Stop%2A>调用方法后或<xref:System.Timers.Timer.Enabled%2A>属性已设置为`false`，因为引发的信号<xref:System.Timers.Timer.Elapsed>事件总是排队等待线程池线程上执行。 解决此争用条件设置一个标志，通知的事件处理程序是一种方法<xref:System.Timers.Timer.Elapsed>忽略后续的事件的事件。  
  
 如果你使用<xref:System.Timers.Timer?displayProperty=nameWithType>类与用户界面元素，如窗体或控件，而无需将计时器在该用户界面元素上分配的窗体或控件包含<xref:System.Timers.Timer>到<xref:System.Timers.Timer.SynchronizingObject%2A>属性，因此就事件封送到的用户界面线程。  
  
 有关默认的实例的属性值的列表<xref:System.Timers.Timer>，请参阅<xref:System.Timers.Timer.%23ctor%2A>构造函数。  
  
> [!TIP]
>  请注意，.NET 包含名为的四个类`Timer`，每个的它提供不同的功能：  
>   
> - <xref:System.Timers.Timer?displayProperty=nameWithType> （本主题）： 按固定的间隔触发事件。 类旨在用作基于服务器或多线程环境中; 中的服务组件它没有用户界面，并且不在运行时可见。  
> - <xref:System.Threading.Timer?displayProperty=nameWithType>： 在固定时间间隔有线程池线程上执行的单个回调方法。 当计时器实例化，并且不能更改定义回调方法。 如<xref:System.Timers.Timer?displayProperty=nameWithType>类，该类适用于使用作为多线程环境中的基于服务器的或服务组件; 它没有用户界面，并且不在运行时可见。  
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (仅适用于.NET framework): 按固定的间隔触发事件的 Windows 窗体组件。 组件没有用户界面，并旨在在单线程环境中使用。  
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (仅适用于.NET framework): 在按固定间隔执行异步或同步网页回发的 ASP.NET 组件。  

## Examples  
 下面的示例实例化`System.Timers.Timer`对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000 毫秒），将设置的事件处理程序事件，并启动计时器。 事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>任何公共<see langword="static" />此类型的成员都是线程安全。 但不保证所有实例成员都是线程安全的。</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将所有属性设置为初始值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示的实例的初始属性值<xref:System.Timers.Timer>。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100 毫秒|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|空引用（在 Visual Basic 中为 `Nothing`）。|  
  
   
  
## Examples  
 下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。 事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">事件之间经过的时间（以毫秒为单位）。 该值必须大于零且小于或等于 <see cref="F:System.Int32.MaxValue" />。</param>
        <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将 <see cref="P:System.Timers.Timer.Interval" /> 属性设置为指定的毫秒数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数设置<xref:System.Timers.Timer.Interval%2A>属性的新的计时器实例，但不会启用计时器。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。 事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="interval" /> 参数的值小于或等于零，或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个布尔值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应只引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件（(<see langword="false" />) 或重复 (<see langword="true" />)）。</summary>
        <value>
          如果 <see cref="T:System.Timers.Timer" /> 应在每次间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；如果它仅在间隔第一次结束后引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Timers.Timer>时已经启用<xref:System.Timers.Timer.Start%2A>方法被调用时，时间间隔重置。 如果<xref:System.Timers.Timer.AutoReset%2A>是`false`、<xref:System.Timers.Timer.Start%2A>方法必须调用以便再次开始计数。  
  
 将间隔重置会影响<xref:System.Timers.Timer.Elapsed>引发事件。 例如，如果将间隔设置为 5 秒，然后设置<xref:System.Timers.Timer.Enabled%2A>属性`true`，计数开始时间<xref:System.Timers.Timer.Enabled%2A>设置。 如果为计数时 3 秒、 10 秒重置间隔<xref:System.Timers.Timer.Elapsed>第一次之后的 13 秒引发事件<xref:System.Timers.Timer.Enabled%2A>属性设置为`true`。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Timers.Timer>其<xref:System.Timers.Timer.Elapsed>1.5 秒后的事件触发。 其事件处理程序然后显示"Hello World ！" 在控制台上。  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>开始用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]设计环境使用此方法来启动一个组件，窗体或由另一个组件使用的初始化。 <xref:System.Timers.Timer.EndInit%2A>方法初始化已结束。 使用<xref:System.Timers.Timer.BeginInit%2A>和<xref:System.Timers.Timer.EndInit%2A>方法阻止控件完全初始化之前使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Timers.Timer" /> 占用的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Close%2A>方法反过来调用`Dispose`方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由当前 <see cref="T:System.Timers.Timer" /> 使用的所有资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>达到间隔时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Elapsed>如果引发事件<xref:System.Timers.Timer.Enabled%2A>属性是`true`由定义的时间间隔 （以毫秒为单位）<xref:System.Timers.Timer.Interval%2A>属性经历。 如果<xref:System.Timers.Timer.AutoReset%2A>属性是`true`，由定义的时间间隔重复引发该事件<xref:System.Timers.Timer.Interval%2A>属性; 否则，引发该事件仅一次，第一次<xref:System.Timers.Timer.Interval%2A>值经历。  
  
 如果<xref:System.Timers.Timer.Interval%2A>后设置<xref:System.Timers.Timer>已启动，会重置计数。 例如，如果将间隔设置为 5 秒，然后设置<xref:System.Timers.Timer.Enabled%2A>到`true`，计数开始时间<xref:System.Timers.Timer.Enabled%2A>设置。 如果为 10 秒计数为 3 秒时重置间隔<xref:System.Timers.Timer.Elapsed>第一次之后的 13 秒引发事件<xref:System.Timers.Timer.Enabled%2A>已设置为`true`。  
  
 如果<xref:System.Timers.Timer.SynchronizingObject%2A>属性是`null`、<xref:System.Timers.Timer.Elapsed>上引发事件<xref:System.Threading.ThreadPool>线程。 如果在处理<xref:System.Timers.Timer.Elapsed>事件持续时间超过<xref:System.Timers.Timer.Interval%2A>，可能在另一台再次引发此事件<xref:System.Threading.ThreadPool>线程。 在此情况下，事件处理程序应该是可重入。  
  
> [!NOTE]
>  事件处理方法可能在一个线程上运行另一个线程调用的同时<xref:System.Timers.Timer.Stop%2A>方法或设置<xref:System.Timers.Timer.Enabled%2A>属性`false`。 这可能会导致<xref:System.Timers.Timer.Elapsed>后停止计时器引发事件。 代码示例<xref:System.Timers.Timer.Stop%2A>方法演示一种方法，以避免此争用情况。  
  
 即使<xref:System.Timers.Timer.SynchronizingObject%2A>不`null`，<xref:System.Timers.Timer.Elapsed>事件可能会发生后<xref:System.Timers.Timer.Dispose%2A>或<xref:System.Timers.Timer.Stop%2A>调用方法后或<xref:System.Timers.Timer.Enabled%2A>属性已设置为`false`，因为引发的信号<xref:System.Timers.Timer.Elapsed>事件总是排队等待线程池线程上执行。 解决此争用条件设置一个标志，通知的事件处理程序是一种方法<xref:System.Timers.Timer.Elapsed>忽略后续的事件的事件。  
  
 <xref:System.Timers.Timer>组件捕获并禁止显示引发的事件处理程序的所有异常<xref:System.Timers.Timer.Elapsed>事件。 此行为将发生在.NET framework 的未来版本中的更改。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。 事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
        <value>
          如果 <see cref="T:System.Timers.Timer" /> 应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置<xref:System.Timers.Timer.Enabled%2A>到`true`等同于调用<xref:System.Timers.Timer.Start%2A>，而设置<xref:System.Timers.Timer.Enabled%2A>到`false`等同于调用<xref:System.Timers.Timer.Stop%2A>。  
  
> [!NOTE]
>  若要引发的信号<xref:System.Timers.Timer.Elapsed>事件始终上排队以便执行<xref:System.Threading.ThreadPool>线程。 这可能会导致<xref:System.Timers.Timer.Elapsed>后引发事件<xref:System.Timers.Timer.Enabled%2A>属性设置为`false`。 代码示例<xref:System.Timers.Timer.Stop%2A>方法演示一种方法要解决此争用条件。  
  
 如果<xref:System.Timers.Timer.Enabled%2A>设置为`true`和<xref:System.Timers.Timer.AutoReset%2A>设置为`false`、<xref:System.Timers.Timer>引发<xref:System.Timers.Timer.Elapsed>事件仅后第一次间隔结束。  
  
 如果间隔后设置<xref:System.Timers.Timer>已启动，会重置计数。 例如，如果将间隔设置为 5 秒，然后设置<xref:System.Timers.Timer.Enabled%2A>属性`true`，计数开始时间<xref:System.Timers.Timer.Enabled%2A>设置。 如果为 10 秒计数为 3 秒时重置间隔<xref:System.Timers.Timer.Elapsed>第一次之后的 13 秒引发事件<xref:System.Timers.Timer.Enabled%2A>已设置为`true`。  
  
> [!NOTE]
>  某些可视化设计器，如在 Microsoft Visual Studio 中，设置<xref:System.Timers.Timer.Enabled%2A>属性`true`时插入一个新<xref:System.Timers.Timer>。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。 事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">计时器已释放，无法设置此属性。</exception>
        <exception cref="T:System.ArgumentException">在定时器启用之前，<see cref="P:System.Timers.Timer.Interval" /> 属性设置为大于 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>结束用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]设计环境使用此方法来结束用于窗体或由另一个组件使用的组件的初始化。 <xref:System.Timers.Timer.BeginInit%2A>方法开始初始化。 使用<xref:System.Timers.Timer.BeginInit%2A>和<xref:System.Timers.Timer.EndInit%2A>方法阻止控件完全初始化之前使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔（以毫秒为单位）。</summary>
        <value>
          <see cref="E:System.Timers.Timer.Elapsed" /> 事件之间经过的时间（以毫秒为单位）。 该值必须大于零并小于或等于 <see cref="F:System.Int32.MaxValue" />。 默认值为 100 毫秒。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你使用<xref:System.Timers.Timer.Interval%2A>属性来确定的频率<xref:System.Timers.Timer.Elapsed>激发事件。 因为<xref:System.Timers.Timer>类取决于系统时钟，它同时具有相同的系统时钟的分辨率。 这意味着，<xref:System.Timers.Timer.Elapsed>事件将在系统时钟的分辨率如果定义的间隔触发<xref:System.Timers.Timer.Interval%2A>属性小于系统时钟的分辨率。 下面的示例设置<xref:System.Timers.Timer.Interval%2A>到 5 毫秒的属性。 在上运行时[!INCLUDE[win7](~/includes/win7-md.md)]系统的系统时钟的分辨率大约 15 毫秒，事件将触发大约每隔 15 毫秒，而不是每隔 5 毫秒。  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 下面的代码可用于确定当前系统上的系统时钟的分辨率：  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 如果你的应用需要比提供的更大的分辨率<xref:System.Timers.Timer>类或使用高分辨率的多媒体计时器; 请参阅系统时钟[如何： 使用高分辨率计时器](http://msdn.microsoft.com/library/aa964692.aspx)。  
  
 如果间隔后设置<xref:System.Timers.Timer>已启动，会重置计数。 例如，如果将间隔设置为 5 秒，然后设置<xref:System.Timers.Timer.Enabled%2A>属性`true`，计数开始时间<xref:System.Timers.Timer.Enabled%2A>设置。 如果为 10 秒计数为 3 秒时重置间隔<xref:System.Timers.Timer.Elapsed>第一次之后的 13 秒引发事件<xref:System.Timers.Timer.Enabled%2A>已设置为`true`。  
  
 如果<xref:System.Timers.Timer.Enabled%2A>设置为`true`和<xref:System.Timers.Timer.AutoReset%2A>设置为`false`、<xref:System.Timers.Timer>引发<xref:System.Timers.Timer.Elapsed>事件仅后第一次间隔结束。 <xref:System.Timers.Timer.Enabled%2A> 然后将设置为`false`。  
  
> [!NOTE]
>  如果<xref:System.Timers.Timer.Enabled%2A>和<xref:System.Timers.Timer.AutoReset%2A>都设置为`false`，和计时器以前已启用，设置<xref:System.Timers.Timer.Interval%2A>属性会导致<xref:System.Timers.Timer.Elapsed>事件被引发一次，就像<xref:System.Timers.Timer.Enabled%2A>属性必须设置为`true`. 若要将间隔设置而不会引发该事件，可以暂时设置<xref:System.Timers.Timer.Enabled%2A>属性`true`，将其设置<xref:System.Timers.Timer.Interval%2A>属性设置为所需的时间间隔，然后立即设置<xref:System.Timers.Timer.Enabled%2A>属性改回`false`。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.Timers.Timer>对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置的事件处理程序事件，并启动计时器。 事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">间隔小于或等于零。  
  
 或  
  
 间隔大于 <see cref="F:System.Int32.MaxValue" />，计时器当前已启用。 （如果当前未启用计时器，则在启用它之前不会引发异常。）</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在设计模式中将 <see cref="T:System.Timers.Timer" /> 绑定到其容器的站点。</summary>
        <value>
          <see cref="T:System.ComponentModel.ISite" /> 界面，此界面表示将 <see cref="T:System.Timers.Timer" /> 对象绑定到其容器的站点。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 站点绑定<xref:System.ComponentModel.Component>到<xref:System.ComponentModel.Container>和启用它们之间的通信，以及提供有关要管理其组件的容器的一种方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="true" /> 开始引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Timers.Timer.Start%2A>称为和<xref:System.Timers.Timer.AutoReset%2A>设置为`false`、<xref:System.Timers.Timer>引发<xref:System.Timers.Timer.Elapsed>事件仅后第一次间隔结束。 如果<xref:System.Timers.Timer.Start%2A>称为和<xref:System.Timers.Timer.AutoReset%2A>是`true`、<xref:System.Timers.Timer>引发<xref:System.Timers.Timer.Elapsed>事件第一个时间间隔和经过继续在指定的时间间隔引发事件。  
  
 你还可以通过设置启动计时<xref:System.Timers.Timer.Enabled%2A>到`true`。  
  
> [!NOTE]
>  如果<xref:System.Timers.Timer.AutoReset%2A>是`false`、<xref:System.Timers.Timer.Start%2A>方法必须调用以便再次开始计数。  
  
 调用<xref:System.Timers.Timer.Start%2A>方法计时器处于启用状态时不起作用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">创建 <see cref="T:System.Timers.Timer" />，使其时间间隔等于或大于 <see cref="F:System.Int32.MaxValue" /> + 1，或将其时间间隔设置为小于零。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="false" /> 停止引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以通过设置终止计时<xref:System.Timers.Timer.Enabled%2A>到`false`。  
  
> [!NOTE]
>  信号以引发<xref:System.Timers.Timer.Elapsed>事件始终上排队以便执行<xref:System.Threading.ThreadPool>线程，因此事件处理方法可能会运行在一个线程在同一时间调用<xref:System.Timers.Timer.Stop%2A>方法在另一个线程上运行。 这可能会导致<xref:System.Timers.Timer.Elapsed>后引发事件<xref:System.Timers.Timer.Stop%2A>调用方法。 下一节中的代码示例演示一个方法，若要解决此争用条件。  
  
   
  
## Examples  
 下面的示例实例化`System.Timers.Timer`对象激发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000 毫秒），将设置的事件处理程序事件，并启动计时器。 事件处理程序显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。 当用户按 Enter 键时，在应用程序调用<xref:System.Timers.Timer.Stop%2A>之前终止应用程序的方法。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 下面的代码示例演示一种方法，以防止调用的线程<xref:System.Timers.Timer.Stop%2A>从一直持续到当前正在执行的方法<xref:System.Timers.Timer.Elapsed>事件即结束，并且还可防止两个<xref:System.Timers.Timer.Elapsed>从执行在同一个事件处理程序的事件时间 （通常称为可重入性）。  
  
 此示例执行 100 次测试运行。 每次运行测试时，计时器启动 150 毫秒为单位的间隔。 事件处理程序使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法来模拟随机变化长度从 50 到 200 毫秒的任务。 测试方法还可启动的控制线程等待一秒，然后停止计时器。 如果控制线程停止计时器时正在处理的事件，控制线程必须等待，直到该事件在继续之前完成。  
  
 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>以避免重新进入并阻止控制线程继续执行事件结束前使用方法重载。 事件处理程序使用<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>方法将控件设置变量为 1，但前提是当前值为零。 这是一个原子操作。 如果返回值为零，控制变量已设置为 1 和事件处理程序在处理。 如果返回值为非零，则只被丢弃事件以避免重新进入。 (如果它是执行每个事件，所需<xref:System.Threading.Monitor>类将是更好的方法来同步的事件。)事件处理程序结束时，它设置的控制变量返回零。 该示例记录的执行，而被丢弃由于可重入性及后发生的事件总数<xref:System.Timers.Timer.Stop%2A>调用了方法。  
  
 控制线程使用<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>方法用于设置控件的变量为-1 （减 1)，但前提是当前值为零。 如果该原子操作返回非零，当前正在执行事件。 控制线程等待并重试。 该示例记录的控制线程必须等待事件完成的次数。  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置对象，该对象用于在间隔过后封送发出的事件处理程序调用。</summary>
        <value>
          <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它表示对象，该对象用于在间隔过后封送发出的事件处理程序调用。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Timers.Timer.SynchronizingObject%2A>是`null`，处理的方法<xref:System.Timers.Timer.Elapsed>事件时在系统线程池中的线程上调用。 系统线程池的详细信息，请参阅<xref:System.Threading.ThreadPool>。  
  
 当<xref:System.Timers.Timer.Elapsed>由可视化的 Windows 窗体组件，如按钮，可能会引发异常或只是结果可能无法通过系统线程池访问组件处理事件。 通过设置来避免这种效果<xref:System.Timers.Timer.SynchronizingObject%2A>到 Windows 窗体组件时，这将导致处理的方法<xref:System.Timers.Timer.Elapsed>事件创建该组件在同一线程上调用。  
  
> [!NOTE]
>  即使<xref:System.Timers.Timer.SynchronizingObject%2A>属性不是`null`，<xref:System.Timers.Timer.Elapsed>事件可能会发生后<xref:System.Timers.Timer.Dispose%2A>或<xref:System.Timers.Timer.Stop%2A>调用方法后或<xref:System.Timers.Timer.Enabled%2A>属性已设置为`false`，因为引发的信号<xref:System.Timers.Timer.Elapsed>事件总是排队等待线程池线程上执行。 解决此争用条件设置一个标志，通知的事件处理程序是一种方法<xref:System.Timers.Timer.Elapsed>忽略后续的事件的事件。  
  
 如果<xref:System.Timers.Timer>在 Windows 窗体设计器中，在 Visual Studio 内使用<xref:System.Timers.Timer.SynchronizingObject%2A>自动设置为包含的控件<xref:System.Timers.Timer>。 例如，如果你将放置<xref:System.Timers.Timer>的设计器上`Form1`(其继承自<xref:System.Windows.Forms.Form>)，则<xref:System.Timers.Timer.SynchronizingObject%2A>属性<xref:System.Timers.Timer>设置为的实例`Form1`。  
  
   
  
## Examples  
 下面的示例是一个非常简单的文本文件编辑器作为服务的 Windows 窗体应用。 当尚未保存的文本的文本框中时，应用程序要求用户在一分钟的时间间隔他或她是否要保存的文本框中的内容。  若要这样做，<xref:System.Timers.Timer.Interval%2A>属性设置为一分钟 （60,000 毫秒为单位），和<xref:System.Timers.Timer.SynchronizingObject%2A>属性设置为<xref:System.Windows.Forms.Form>对象。  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 该示例需要将以下控件添加到窗体：  
  
-   A<xref:System.Windows.Forms.TextBox>控件名为`TextBox1`（其默认名称）。  
  
-   A<xref:System.Windows.Forms.Button>控件名为`Button1`（其默认名称）。  
  
-   A<xref:System.Windows.Forms.SaveFileDialog>控件名为`SaveSaveFileDialog1`（其默认名称）。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>