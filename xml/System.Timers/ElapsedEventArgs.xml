<Type Name="ElapsedEventArgs" FullName="System.Timers.ElapsedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc4aa878a43a638247c2e558af003df8868ad560" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37608986" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ElapsedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Timers.ElapsedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ElapsedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ElapsedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Timers.Timer.Elapsed" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例实例化<xref:System.Timers.Timer>对象，它会触发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置该事件的事件处理程序，启动计时器。 事件处理程序中显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SignalTime">
      <MemberSignature Language="C#" Value="public DateTime SignalTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime SignalTime" />
      <MemberSignature Language="DocId" Value="P:System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignalTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime SignalTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.SignalTime : DateTime" Usage="System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件时获取日期/时间。</summary>
        <value>引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>上引发事件<xref:System.Threading.ThreadPool>线程，因此事件处理方法可能会运行上一个线程在同一时间调用<xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType>方法在另一个线程上运行。 这可能会导致<xref:System.Timers.Timer.Elapsed>事件引发之后<xref:System.Timers.Timer.Stop%2A>调用方法。 不能只是通过比较禁止此争用条件<xref:System.Timers.ElapsedEventArgs.SignalTime%2A>与时间的属性时<xref:System.Timers.Timer.Stop%2A>调用方法，因为事件处理方法，可能已经正在执行时<xref:System.Timers.Timer.Stop%2A>方法调用时，或可能开始之间执行时<xref:System.Timers.Timer.Stop%2A>调用方法时保存的停止时间的时刻。 如果阻止调用线程至关重要<xref:System.Timers.Timer.Stop%2A>方法的同时仍在执行事件处理方法，继续使用更强大的同步机制，如<xref:System.Threading.Monitor>类或<xref:System.Threading.Interlocked.CompareExchange%2A>方法。 使用的代码<xref:System.Threading.Interlocked.CompareExchange%2A>的示例中可以找到方法<xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.Timers.Timer>对象，它会触发其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每两秒 （2000年毫秒），将设置该事件的事件处理程序，启动计时器。 事件处理程序中显示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>属性将引发此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.Stop" />
      </Docs>
    </Member>
  </Members>
</Type>