<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MessageEncoder.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d29ca2946851c8b42bbcd21a50aa193fea105db5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d29ca2946851c8b42bbcd21a50aa193fea105db5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>The encoder is the component that is used to write messages to a stream and to read messages from a stream.</source>
          <target state="translated">编码器是用于将消息写入到流中并从流中读取消息的组件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> is a base class that provides implementations that support a Multipurpose Internet Mail Extensions (MIME) content type and message version, and defines the interface for the serialization and deserialization of messages according to that content type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> 是一个基类，可提供支持多用途 Internet 邮件扩展 (MIME) 内容类型和消息版本的实现，并可根据该内容类型定义对消息进行序列化和反序列化的接口。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>Use it as a base class for writing your own custom encoder.</source>
          <target state="translated">将其作为基类，用于编写您自己的自定义编码器。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>Use this class if you want to implement a custom message encoder.</source>
          <target state="translated">如果希望实现自定义消息编码器，请使用此类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>To implement your own custom message encoder, you must provide custom implementations of the following abstract base classes:</source>
          <target state="translated">若要实现自己的自定义消息编码器，您必须提供下列抽象基类的自定义实现：</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>Override the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoderFactory.Encoder%2A&gt;</ph> to return an instance of your custom <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph>.</source>
          <target state="translated">重写 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoderFactory.Encoder%2A&gt;</ph> 以返回自定义 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> 的实例。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>Then wire up your custom <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoderFactory&gt;</ph> to the binding element stack used to configure the service or client by overriding the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory%2A&gt;</ph> method to return an instance of this factory.</source>
          <target state="translated">然后通过重写 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoderFactory&gt;</ph> 方法返回此工厂的实例，将自定义 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory%2A&gt;</ph> 连接到用于配置服务或客户端的绑定元素堆栈。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>The task of converting between the in-memory representation of a message and an XML Information Set (Infoset) representation that can be written to a stream is encapsulated within the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> class, which most commonly serves as a factory for XML readers and XML writers that support specific types of XML encodings.</source>
          <target state="translated">在消息的内存表示形式和可以写入流中的 XML 信息集 (Infoset) 表示形式之间进行转换的任务被包装到 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> 类中，该类通常作为支持特定类型 XML 编码的 XML 读取器和 XML 编写器的工厂。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>The key methods on <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> are <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> 的主要方法包括 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%2A&gt;</ph> 和 <ph id="ph3">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%2A&gt;</ph> takes a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object and writes it into a <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%2A&gt;</ph> 采用 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> 对象，并将其写入到 <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%2A&gt;</ph> takes a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object and a maximum header size and returns a <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%2A&gt;</ph> 采用 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 对象以及最大标头大小，并返回一个 <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>The following code shows an example of a class that is derived from <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph>.</source>
          <target state="translated">下面的代码演示一个派生自 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> 的类的示例。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.MessageEncoder" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.MessageEncoder" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.BeginWriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream,System.AsyncCallback,System.Object)">
          <source>The message.</source>
          <target state="translated">消息。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.BeginWriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream,System.AsyncCallback,System.Object)">
          <source>The stream.</source>
          <target state="translated">流。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.BeginWriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream,System.AsyncCallback,System.Object)">
          <source>The callback.</source>
          <target state="translated">回调。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.BeginWriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream,System.AsyncCallback,System.Object)">
          <source>The state.</source>
          <target state="translated">状态。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.BeginWriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream,System.AsyncCallback,System.Object)">
          <source>Starts the writing of message for the message encoder with specified message, stream, callback and state.</source>
          <target state="translated">为有指定的消息、流、恢复和状态的消息编码器，启动消息写入。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.BeginWriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream,System.AsyncCallback,System.Object)">
          <source>The asynchronous result of the operation.</source>
          <target state="translated">异步操作的结果。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
          <source>When overridden in a derived class, gets the MIME content type used by the encoder.</source>
          <target state="translated">在派生类中重写时，获取编码器使用的 MIME 内容类型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
          <source>The content type that is supported by the message encoder.</source>
          <target state="translated">受消息编码器支持的内容类型。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
          <source>The content type is a Multipurpose Internet Mail Exchange (MIME) header that appears at the beginning of a MIME message as well as within the separate body parts.</source>
          <target state="translated">该内容类型是显示在 MIME 消息的开头处以及独立正文部分中的多用途 Internet 邮件扩展 (MIME) 标头。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
          <source>Content-type headers are used to specify the media type and subtype of data in the body of a message and to fully specify the media type and subtype of data in the body of a message and to specify the character encoding (optional) of the data.</source>
          <target state="translated">内容类型标头用于指定消息正文中数据的媒体类型和子类型、完全指定消息正文中数据的媒体类型和子类型，以及指定数据的字符编码（可选）。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
          <source>An example of a MIME content type that can be supported: "application/soap+xml; charset=’utf8’".</source>
          <target state="translated">举例说明一种 MIME 内容可以支持的类型:"application/soap + xml;charset = 'utf8'"。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
          <source>A grammar that details the syntax of the content-type header is described in <bpt id="p1">[</bpt>RFC 2045<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95945)</ept>, Section 5.1.</source>
          <target state="translated">中所述语法的详细信息的内容类型标头的语法是<bpt id="p1">[</bpt>RFC 2045<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95945)</ept>，第 5.1 节。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
          <source><bpt id="p1">[</bpt>RFC 2046<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95944)</ept> provides detailed information on MIME media types and their parameters.</source>
          <target state="translated"><bpt id="p1">[</bpt>RFC 2046<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95944)</ept> MIME 媒体类型和其参数提供的详细的信息。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.EndWriteMessage(System.IAsyncResult)">
          <source>The result of the operation.</source>
          <target state="translated">操作的结果。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.EndWriteMessage(System.IAsyncResult)">
          <source>Ends the writing of messages for the message encoder.</source>
          <target state="translated">关闭消息编码器的消息写入。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
          <source>The typed object for which the method is querying.</source>
          <target state="translated">方法正在查询的类型化对象。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
          <source>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</source>
          <target state="translated">从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
          <source>The typed object <ph id="ph1">&lt;paramref name="T" /&gt;</ph> requested if it is present or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if it is not.</source>
          <target state="translated">如果存在，则为所请求的类型化对象 <ph id="ph1">&lt;paramref name="T" /&gt;</ph>，如果不存在，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
          <source>Use this to request a typed object such as an interface for setting properties or getting status from the appropriate layer in the channel stack.</source>
          <target state="translated">使用此方法可请求从通道堆栈的适当层返回一个类型化对象，如用于设置属性或获取状态的接口。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
          <source>If a layer supports returning the requested object, it returns it.</source>
          <target state="translated">如果某个层支持返回所请求的对象，则该层会返回对象。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
          <source>If not, it delegates the call down to the next layer in the stack.</source>
          <target state="translated">如果不支持，则该层会将调用委托给堆栈中的下一层。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
          <source>If it gets to the bottom of the stack and no channel layer supported the requested object, then the method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果到达堆栈底部仍然没有通道层支持所请求的对象，则该方法返回 <ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
          <source>The message-level content-type being tested.</source>
          <target state="translated">所测试的消息级内容类型。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
          <source>Returns a value that indicates whether a specified message-level content-type value is supported by the message encoder.</source>
          <target state="translated">返回一个值，该值指示消息编码器是否支持指定的消息级内容类型值。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message-level content-type specified is supported; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果支持指定的消息级内容类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
          <source>This method is used to determine whether the message encoder can be used to read a particular style of message, based on its content-type.</source>
          <target state="translated">此方法用于根据消息编码器的内容类型来确定消息编码器是否可用于读取特定样式的消息。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
          <source>The information in the <ph id="ph1">&lt;xref:System.Net.Mime.ContentType&gt;</ph> class is used to describe the data that is contained in a message and is used to determine if there is a content-type match.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Mime.ContentType&gt;</ph> 类中的信息用于描述消息中包含的数据，还用于确定是否有匹配的内容类型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
          <source>A grammar that details the syntax of the content-type header is described in <bpt id="p1">[</bpt>RFC 2045<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95945)</ept> Section 5.1.</source>
          <target state="translated">中所述语法的详细信息的内容类型标头的语法是<bpt id="p1">[</bpt>RFC 2045<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95945)</ept>第 5.1 节。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
          <source><bpt id="p1">[</bpt>RFC 2046<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95944)</ept> provides detailed information on Multipurpose Internet Mail Extensions (MIME) media types and their parameters.</source>
          <target state="translated"><bpt id="p1">[</bpt>RFC 2046<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95944)</ept>多用途 Internet 邮件扩展 (MIME) 媒体类型和其参数提供的详细的信息。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
          <source>The following code example shows how to override this method to handle different content types with the same media type.</source>
          <target state="translated">下面的代码示例演示如何重写此方法来处理具有相同媒体类型的不同内容类型。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
          <source>When overridden in a derived class, gets the media type value that is used by the encoder.</source>
          <target state="translated">在派生类中重写时，获取编码器使用的媒体类型值。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
          <source>The media type that is supported by the message encoder.</source>
          <target state="translated">受消息编码器支持的媒体类型。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
          <source>The media type is part of the content-type header.</source>
          <target state="translated">该媒体类型为内容类型标头的一部分。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
          <source>The following code shows how to implement the <ph id="ph1">`MediaType`</ph> property.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">`MediaType`</ph> 属性。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
          <source>When overridden in a derived class, gets the message version value that is used by the encoder.</source>
          <target state="translated">在派生类中重写时，获取编码器使用的消息版本值。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.MessageVersion" /&gt;</ph> that is used by the encoder.</source>
          <target state="translated">编码器使用的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.MessageVersion" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
          <source>Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange.</source>
          <target state="translated">指定与消息及其交换相关联的 SOAP 和 WS-Addressing 的版本。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
          <source>If SOAP versions are not to be used, this property should be overridden to return <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageVersion.None%2A&gt;</ph>.</source>
          <target state="translated">如果不使用 SOAP 版本，则应重写此属性以返回 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageVersion.None%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
          <source>The following code shows how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.MessageVersion%2A&gt;</ph> property.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.MessageVersion%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>When overridden in a derived class, reads a message from a specified stream.</source>
          <target state="translated">在派生类中重写时，从指定的流中读取一条消息。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> of type <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> that provides the buffer from which the message is deserialized.</source>
          <target state="translated">一个类型为 <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>，它提供从中反序列化消息的缓冲区。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.BufferManager" /&gt;</ph> that manages the buffer from which the message is deserialized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.BufferManager" /&gt;</ph>，管理从中反序列化消息的缓冲区。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
          <source>When overridden in a derived class, reads a message from a specified buffer.</source>
          <target state="translated">在派生类中重写时，从指定的缓冲区中读取一条消息。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> that is read from the buffer specified.</source>
          <target state="translated">从指定的缓冲区中读取的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object from which the message is read.</source>
          <target state="translated">从中读取消息的 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
          <source>The maximum size of the headers that can be read from the message.</source>
          <target state="translated">可从消息中读取的标头的最大大小。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
          <source>When overridden in a derived class, reads a message from a specified stream.</source>
          <target state="translated">在派生类中重写时，从指定的流中读取一条消息。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> that is read from the stream specified.</source>
          <target state="translated">从指定的流中读取的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> of type <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> that provides the buffer from which the message is deserialized.</source>
          <target state="translated">一个类型为 <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>，它提供从中反序列化消息的缓冲区。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.BufferManager" /&gt;</ph> that manages the buffer from which the message is deserialized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.BufferManager" /&gt;</ph>，管理从中反序列化消息的缓冲区。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
          <source>The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</source>
          <target state="translated">多用途 Internet 邮件扩展 (MIME) 消息级内容类型。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
          <source>When overridden in a derived class, reads a message from a specified stream.</source>
          <target state="translated">在派生类中重写时，从指定的流中读取一条消息。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> that is read from the stream specified.</source>
          <target state="translated">从指定的流中读取的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
          <source>The following code example shows how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%28System.ArraySegment%7BSystem.Byte%7D%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.String%29&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%28System.ArraySegment%7BSystem.Byte%7D%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.String%29&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object from which the message is read.</source>
          <target state="translated">从中读取消息的 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
          <source>The maximum size of the headers that can be read from the message.</source>
          <target state="translated">可从消息中读取的标头的最大大小。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
          <source>The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</source>
          <target state="translated">多用途 Internet 邮件扩展 (MIME) 消息级内容类型。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
          <source>When overridden in a derived class, reads a message from a specified stream.</source>
          <target state="translated">在派生类中重写时，从指定的流中读取一条消息。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> that is read from the stream specified.</source>
          <target state="translated">从指定的流中读取的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
          <source>The following code example shows how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%28System.IO.Stream%2CSystem.Int32%2CSystem.String%29&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%28System.IO.Stream%2CSystem.Int32%2CSystem.String%29&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ToString">
          <source>Returns the content type that is used by the message encoder.</source>
          <target state="translated">返回消息编码器使用的内容类型。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.ToString">
          <source>The content type that is used by the message encoder.</source>
          <target state="translated">消息编码器使用的内容类型。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.MessageEncoder">
          <source>When overridden in a derived class, writes a message to a specified stream or buffer.</source>
          <target state="translated">在派生类中重写时，将消息写入指定的流或缓冲区。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> to write to the <bpt id="p1">&lt;c&gt;</bpt>stream<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要写入 <bpt id="p1">&lt;c&gt;</bpt>stream<ept id="p1">&lt;/c&gt;</ept> 的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object to which the <bpt id="p1">&lt;c&gt;</bpt>message<ept id="p1">&lt;/c&gt;</ept> is written.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>message<ept id="p1">&lt;/c&gt;</ept> 要写入的 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
          <source>When overridden in a derived class, writes a message to a specified stream.</source>
          <target state="translated">在派生类中重写时，将消息写入指定的流中。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
          <source>The following code shows how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.IO.Stream%29&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.IO.Stream%29&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> to write to the message buffer.</source>
          <target state="translated">要写入消息缓冲区的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
          <source>The maximum message size that can be written.</source>
          <target state="translated">可写入的最大消息大小。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.BufferManager" /&gt;</ph> that manages the buffer to which the message is written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.BufferManager" /&gt;</ph>，管理将消息写入到的缓冲区。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
          <source>Writes a message less than a specified size to a byte array buffer.</source>
          <target state="translated">将小于指定大小的消息写入字节数组缓冲区。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> of type <ph id="ph2">&lt;see langword="byte" /&gt;</ph> that provides the buffer to which the message is serialized.</source>
          <target state="translated">一个类型为 <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 的 <ph id="ph2">&lt;see langword="byte" /&gt;</ph>，它提供将消息序列化到的缓冲区。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
          <source>This method calls the abstract method <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.Int32%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.Int32%29&gt;</ph> with <ph id="ph2">`messageOffset`</ph> = 0.</source>
          <target state="translated">此方法调用抽象方法 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.Int32%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.Int32%29&gt;</ph>，其中 <ph id="ph2">`messageOffset`</ph> = 0。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> to write to the message buffer.</source>
          <target state="translated">要写入消息缓冲区的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
          <source>The maximum message size that can be written.</source>
          <target state="translated">可写入的最大消息大小。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.BufferManager" /&gt;</ph> that manages the buffer to which the message is written.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.BufferManager" /&gt;</ph>，管理将消息写入到的缓冲区。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
          <source>The offset of the segment that begins from the start of the byte array that provides the buffer.</source>
          <target state="translated">从提供缓冲区的字节数组开头开始的段的偏移量。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
          <source>When overridden in a derived class, writes a message of less than a specified size to a byte array buffer at the specified offset.</source>
          <target state="translated">在派生类中重写时，将小于指定大小的消息按指定的偏移量写入字节数组缓冲区。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> of type <ph id="ph2">&lt;see langword="byte" /&gt;</ph> that provides the buffer to which the message is serialized.</source>
          <target state="translated">一个类型为 <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 的 <ph id="ph2">&lt;see langword="byte" /&gt;</ph>，它提供将消息序列化到的缓冲区。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
          <source>This method is called by <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.Int32%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.Int32%29&gt;</ph>.</source>
          <target state="translated">此方法由 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.Int32%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.Int32%29&gt;</ph> 调用。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
          <source>The following code shows how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.Int32%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.Int32%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.Int32%29&gt;</ph> 方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>