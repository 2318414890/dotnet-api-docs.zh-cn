<Type Name="PropertyExpression" FullName="System.Web.UI.WebControls.Expressions.PropertyExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="738d3342e9113481195e9244788a88f7010d41df" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36585478" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type PropertyExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个方法，用于依据 <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> 集合中的参数创建 <see langword="Where" /> 子句。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.PropertyExpression>类用于<xref:System.Web.UI.WebControls.QueryExtender>控件添加到数据字段中的筛选器数据。 <xref:System.Web.UI.WebControls.Expressions.PropertyExpression>类将为指定的值的列的属性值进行比较。 例如，你可以比较布尔值赋给数据库中的产品表不再使用的列中的值。  
  
 <xref:System.Web.UI.WebControls.Expressions.PropertyExpression>类创建的每个参数的值并将相应的属性的等号 （= =） 比较<xref:System.Linq.IQueryable>数据对象。 如果你提供多个参数，使用逻辑组合这些参数`AND`运算符。 包含空值的参数不会添加到`Where`子句。  
  
   
  
## Examples  
 下面的示例演示如何搜索的 Products 表为产品的 AdventureWorks 数据库其`MakeFlag`属性 （布尔值列） 设置为`true`。 布尔值参数设置复选框。 从返回查询的结果<xref:System.Web.UI.WebControls.LinqDataSource>控件显示在<xref:System.Web.UI.WebControls.GridView>控件。  
  
 此代码示例是一个更大的示例中提供的一部分[演练： 筛选数据的网页使用声明性语法](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)。  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="propertyExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">要用于查询的对象。</param>
        <summary>使用指定的 <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> 数据源对象应用一个 <see cref="T:System.Linq.IQueryable" /> 对象。</summary>
        <returns>应用了表达式的对象的实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将合并指定<xref:System.Linq.IQueryable>对象中的表达式<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>使用逻辑进行收集`AND`运算符。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>