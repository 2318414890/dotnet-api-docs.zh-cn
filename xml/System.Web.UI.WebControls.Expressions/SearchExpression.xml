<Type Name="SearchExpression" FullName="System.Web.UI.WebControls.Expressions.SearchExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="578aa6ccbccd13f2cdc7b6c9443da8edd6a97a94" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32087350" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SearchExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SearchExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.SearchExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class SearchExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class SearchExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供了在一个或多个字段中搜索字符串值，并将其与指定字符串值进行比较的一种方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.QueryExtender>控件在网页中的筛选器数据的功能提供通过使用<xref:System.Web.UI.WebControls.Expressions.SearchExpression>类。 <xref:System.Web.UI.WebControls.Expressions.SearchExpression>类比较中的字段或为你提供的值的字段指定的字符串。 表达式执行"开头为"、"包含"结尾为"搜索。 必须指定值<xref:System.Web.UI.WebControls.Expressions.SearchExpression.SearchType%2A>和<xref:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields%2A>以指示你想要执行的搜索和您想要搜索的数据字段的类型的属性。 如果你在中使用 LINQ 提供程序<xref:System.Web.UI.WebControls.QueryExtender>控件支持区分大小写，则可以使用<xref:System.Web.UI.WebControls.Expressions.SearchExpression.ComparisonType%2A>属性来启用或不区分大小写。  
  
 要搜索的值可以由[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]控件。 若要指定此参数，将设置<xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A>属性<xref:System.Web.UI.WebControls.ControlParameter>类<xref:System.Web.UI.WebControls.Expressions.SearchExpression>对象的 id[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]控件。 例如，如果在文本框中，输入要搜索的值<xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A>属性必须设置为在文本框控件的 ID。 你可以使用<xref:System.Web.UI.WebControls.Expressions.SearchExpression>与其他表达式结合使用的类，<xref:System.Web.UI.WebControls.QueryExtender>支持，如<xref:System.Web.UI.WebControls.Expressions.RangeExpression>筛选器。 例如，你可以搜索包含字符串"tea"和定价介于 100 和 200 之间的产品名称。  
  
   
  
## Examples  
 下面的示例演示如何在其中指定的字符串开头的产品的 AdventureWorks 数据库的 Products 表中搜索名称列`SearchTextBox`控件。 从返回的结果<xref:System.Web.UI.WebControls.LinqDataSource>控件显示在<xref:System.Web.UI.WebControls.GridView>控件。  
  
 此代码示例是一个更大的示例中提供的一部分[演练： 筛选数据的网页使用声明性语法](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)。  
  
  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.InvalidOperationException">
      <see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 属性为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）</exception>
    <altmember cref="T:System.Web.UI.WebControls.QueryExtender" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SearchExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.SearchExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SearchExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.Expressions.SearchExpression" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparisonType">
      <MemberSignature Language="C#" Value="public StringComparison ComparisonType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.StringComparison ComparisonType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.SearchExpression.ComparisonType" />
      <MemberSignature Language="VB.NET" Value="Public Property ComparisonType As StringComparison" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property StringComparison ComparisonType { StringComparison get(); void set(StringComparison value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparison</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要执行的字符串比较的类型。</summary>
        <value>要执行的字符串比较的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使您能够使用<xref:System.StringComparison>枚举来指定如何执行搜索。 <xref:System.StringComparison>枚举用于指定字符串比较是否使用当前区域性或固定区域性，以及其是否使用文本或序号排序规则。 如果数据提供程序，<xref:System.Web.UI.WebControls.QueryExtender>使用支持区分大小写，可以使用比较类型属性之一来启用或不区分大小写。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataFields">
      <MemberSignature Language="C#" Value="public string DataFields { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFields" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFields As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFields { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取并设置要搜索的单个字段或以逗号分隔的字段列表。</summary>
        <value>要搜索的一个或多个字段。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.SearchExpression>类中指定的表中的一个或多个数据字段执行搜索。 必须指定至少一个数据字段<xref:System.Web.UI.WebControls.Expressions.SearchExpression>实例。 如果指定多个数据字段，请使用逗号分隔的字段。  
  
   
  
## Examples  
 下面的示例演示如何在具有指定字符串开头的名称的产品的 AdventureWorks 数据库的 Products 表中搜索的名称和 ProductNumber 数据字段。 此代码示例摘自[演练： 筛选数据的网页使用声明性语法](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)。  
  
```  
<asp:SearchExpression SearchType="StartsWith"   
      DataFields="Name","ProductNumber" >  
  <asp:ControlParameter ControlID="SearchTextBox" />  
</asp:SearchExpression>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.SearchExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">要使用的对象。</param>
        <summary>基于 <see cref="T:System.Web.UI.WebControls.Expressions.SearchExpression" /> 对象将 <see cref="T:System.Linq.IQueryable" /> 对象应用于指定的 <see cref="T:System.Web.UI.WebControls.Expressions.SearchType" /> 对象。</summary>
        <returns>应用了 <see cref="T:System.Linq.IQueryable" /> 的 <see cref="T:System.Web.UI.WebControls.Expressions.SearchExpression" /> 对象的实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的计算结果中使用的参数的集合<xref:System.Web.UI.WebControls.Expressions.SearchExpression>对象，并将表达式应用于<xref:System.Linq.IQueryable>对象。 如果指定了多个数据字段，`AND`运算符应用于数据字段。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SearchType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Expressions.SearchType SearchType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Expressions.SearchType SearchType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.SearchExpression.SearchType" />
      <MemberSignature Language="VB.NET" Value="Public Property SearchType As SearchType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Expressions::SearchType SearchType { System::Web::UI::WebControls::Expressions::SearchType get(); void set(System::Web::UI::WebControls::Expressions::SearchType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Expressions.SearchType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.Expressions.SearchType" /> 值，该值确定在字符串中的何处进行搜索。</summary>
        <value>要执行的搜索的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.SearchType>属性使用<xref:System.Web.UI.WebControls.Expressions.SearchType>枚举，其中包含要使用的实例中的搜索类型<xref:System.Web.UI.WebControls.Expressions.SearchExpression>类。  
  
 下表列出可能的枚举值。  
  
|枚举|描述|  
|-----------------|-----------------|  
|<xref:System.Web.UI.WebControls.Expressions.SearchType.StartsWith>|指示在字段中的任意位置开始的搜索。|  
|<xref:System.Web.UI.WebControls.Expressions.SearchType.Contains>|指示在字段的开头开始搜索。|  
|<xref:System.Web.UI.WebControls.Expressions.SearchType.EndsWith>|指示搜索的字段的末尾。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>