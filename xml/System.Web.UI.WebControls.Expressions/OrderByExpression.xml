<Type Name="OrderByExpression" FullName="System.Web.UI.WebControls.Expressions.OrderByExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e19ed0b09564e1291919b59b5ca82c7a36e08e48" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36386146" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OrderByExpression : System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OrderByExpression extends System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.OrderByExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class OrderByExpression&#xA;Inherits DataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class OrderByExpression : System::Web::UI::WebControls::Expressions::DataSourceExpression" />
  <TypeSignature Language="F#" Value="type OrderByExpression = class&#xA;    inherit DataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.DataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "ThenByExpressions")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供将排序表达式应用于 <see cref="T:System.Linq.IQueryable" /> 对象的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.OrderByExpression>中使用类<xref:System.Web.UI.WebControls.QueryExtender>控件的数据按升序或降序排序。 元素类型的默认比较器执行排序。  
  
 <xref:System.Web.UI.WebControls.QueryExtender>控件支持各种选项，可用于筛选数据。 你使用的筛选器选项后，你可以使用<xref:System.Web.UI.WebControls.Expressions.OrderByExpression>对象对数据进行排序。  
  
 指定要作为排序依据使用的数据字段<xref:System.Web.UI.WebControls.Expressions.OrderByExpression.DataField%2A>属性。 使用指定的排序方向<xref:System.Web.UI.WebControls.Expressions.OrderByExpression.Direction%2A>属性。 后<xref:System.Web.UI.WebControls.Expressions.OrderByExpression>对象已应用于数据源，则可以使用<xref:System.Web.UI.WebControls.Expressions.ThenBy>表达式对另一个数据字段执行后续排序。  
  
   
  
## Examples  
 下面的示例演示如何搜索中指定的字符串开头的名称的产品的 AdventureWorks 数据库的 Products 表`SearchTextBox`文本框。 <xref:System.Web.UI.WebControls.Expressions.OrderByExpression>对象对数据按降序排序的 ListPrice 数据字段，然后按升序排序的产品 ID 字段进行排序。 从返回查询的结果<xref:System.Web.UI.WebControls.LinqDataSource>控件显示在<xref:System.Web.UI.WebControls.GridView>控件。  
  
 此代码示例是一个更大的示例中提供的一部分[演练： 筛选数据的网页使用声明性语法](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)。  
  
  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.InvalidOperationException">
      <see cref="P:System.Web.UI.WebControls.Expressions.OrderByExpression.DataField" /> 属性为 <see langword="null" />。</exception>
    <altmember cref="T:System.Web.UI.WebControls.QueryExtender" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OrderByExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.OrderByExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OrderByExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.Expressions.OrderByExpression" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.OrderByExpression.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.UI.WebControls.Expressions.OrderByExpression.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要作为排序依据的 <see cref="T:System.Linq.IQueryable" /> 对象的属性。</summary>
        <value>要作为排序依据的 <see cref="T:System.Linq.IQueryable" /> 数据源对象的属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.OrderByExpression>对象对数据字段中的数据进行排序。 通过使用，可以对不同的数据字段执行后续排序操作<xref:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何按降序顺序中的 ListPrice 字段，然后按升序排列的产品 ID 字段的数据进行排序。 此代码示例是一个更大的示例中提供的一部分[演练： 筛选数据的网页使用声明性语法](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)。  
  
```  
<asp:OrderByExpression DataField="ListPrice"   
    Direction="Descending">  
  <asp:ThenBy DataField="ProductID" Direction="Ascending"/>  
</asp:OrderByExpression>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SortDirection Direction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SortDirection Direction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.OrderByExpression.Direction" />
      <MemberSignature Language="VB.NET" Value="Public Property Direction As SortDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SortDirection Direction { System::Web::UI::WebControls::SortDirection get(); void set(System::Web::UI::WebControls::SortDirection value); };" />
      <MemberSignature Language="F#" Value="member this.Direction : System.Web.UI.WebControls.SortDirection with get, set" Usage="System.Web.UI.WebControls.Expressions.OrderByExpression.Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SortDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取和设置 <see cref="T:System.Linq.IQueryable" /> 数据源对象的排序方向。</summary>
        <value>数据源对象的排序方向。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.OrderByExpression>中使用类<xref:System.Web.UI.WebControls.QueryExtender>控件的数据按升序或降序排序。 使用指定的排序操作的方向<xref:System.Web.UI.WebControls.Expressions.OrderByExpression.Direction%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何按降序顺序中的 ListPrice 字段，然后按升序顺序中的产品 id 字段的数据进行排序。 此代码示例摘自[演练： 筛选数据的网页使用声明性语法](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)。  
  
```  
<asp:OrderByExpression DataField="ListPrice"   
    Direction="Descending">  
  <asp:ThenBy DataField="ProductID" Direction="Ascending"/>  
</asp:OrderByExpression>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.OrderByExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="orderByExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">指定要应用排序的数据源。</param>
        <summary>基于 <see cref="T:System.Linq.IQueryable" /> 值和 <see cref="P:System.Web.UI.WebControls.Expressions.OrderByExpression.DataField" /> 值将排序表达式应用于 <see cref="P:System.Web.UI.WebControls.Expressions.OrderByExpression.Direction" /> 对象。</summary>
        <returns>应用了表达式的数据源的实例。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThenByExpressions">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Web.UI.WebControls.Expressions.ThenBy&gt; ThenByExpressions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Web.UI.WebControls.Expressions.ThenBy&gt; ThenByExpressions" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThenByExpressions As Collection(Of ThenBy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Web::UI::WebControls::Expressions::ThenBy ^&gt; ^ ThenByExpressions { System::Collections::ObjectModel::Collection&lt;System::Web::UI::WebControls::Expressions::ThenBy ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThenByExpressions : System.Collections.ObjectModel.Collection&lt;System.Web.UI.WebControls.Expressions.ThenBy&gt;" Usage="System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Web.UI.WebControls.Expressions.ThenBy&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在将 <see cref="T:System.Web.UI.WebControls.Expressions.ThenBy" /> 值应用于数据源之后应用的 <see cref="T:System.Web.UI.WebControls.Expressions.OrderByExpression" /> 表达式的集合。</summary>
        <value>要在将 <see cref="T:System.Web.UI.WebControls.Expressions.ThenBy" /> 应用于数据源之后应用的 <see cref="T:System.Web.UI.WebControls.Expressions.OrderByExpression" /> 表达式的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 后一种操作执行使用<xref:System.Web.UI.WebControls.Expressions.OrderByExpression>中<xref:System.Web.UI.WebControls.QueryExtender>控制，可以使用执行操作的后续排序<xref:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何按降序排序的 ListPrice 字段，然后按升序顺序使用的产品 ID 字段的数据进行排序<xref:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions%2A>。 此代码示例是一个更大的示例中提供的一部分[演练： 筛选数据的网页使用声明性语法](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)。  
  
```  
<asp:OrderByExpression DataField="ListPrice"   
    Direction="Descending">  
  <asp:ThenBy DataField="ProductID" Direction="Ascending"/>  
</asp:OrderByExpression>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>