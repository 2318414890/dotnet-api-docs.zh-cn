<Type Name="DragEventArgs" FullName="System.Windows.Forms.DragEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b6e1ab65b7ea413bf34641f75f6f1cef0e35f265" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39979259" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DragEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DragEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DragEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DragEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DragEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为 <see cref="E:System.Windows.Forms.Control.DragDrop" />、<see cref="E:System.Windows.Forms.Control.DragEnter" /> 或 <see cref="E:System.Windows.Forms.Control.DragOver" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.DragDrop>用户通过将对象拖到控件上方，然后，通过释放鼠标按钮，将它放到控件上完成拖放操作时发生事件。 <xref:System.Windows.Forms.Control.DragEnter>当用户在拖动鼠标的对象的同时移动鼠标指针拖动到控件上的发生的事件。 <xref:System.Windows.Forms.Control.DragOver>用户拖动鼠标的对象时将鼠标指针移到控件上方时发生事件。  
  
 一个<xref:System.Windows.Forms.DragEventArgs>对象指定与此事件关联的任何数据; SHIFT、 CTRL 和 ALT 键的当前状态; 鼠标指针; 的位置，以及源和目标的拖动事件允许拖放效果。  
  
 有关事件模型的信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的示例演示两个之间拖放操作<xref:System.Windows.Forms.ListBox>控件。 此示例调用<xref:System.Windows.Forms.Control.DoDragDrop%2A>当拖动操作开始时的方法。 如果已移动鼠标拖动操作启动多个<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>鼠标位置在从<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定要在拖动的项的索引`MouseDown`事件。  
  
 示例还演示如何使用自定义光标拖放操作。 该示例假定两个光标文件`3dwarro.cur`和`3dwno.cur`、 存在于应用程序目录，用于自定义拖动和不可拖动光标，分别。 如果将使用自定义光标`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>检查。 在中设置自定义光标<xref:System.Windows.Forms.Control.GiveFeedback>事件处理程序。  
  
 键盘状态进行评估<xref:System.Windows.Forms.Control.DragOver>事件处理程序的权利`ListBox`，以确定拖动操作将是根据 SHIFT、 CTRL、 ALT 或 CTRL + ALT 键的状态。 中的位置`ListBox`期间还确定发生下拉`DragOver`事件。 如果要删除的数据不是`String`，则<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>设置为<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最后，在显示状态的下拉`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要删除的权利的数据`ListBox`在中确定<xref:System.Windows.Forms.Control.DragDrop>事件处理程序和`String`值中的适当位置添加`ListBox`。 如果拖动操作移动边界以外的窗体，则在取消拖放操作<xref:System.Windows.Forms.Control.QueryContinueDrag>事件处理程序。  
  
 这段代码摘录演示了如何使用<xref:System.Windows.Forms.DragEventArgs>类。 请参阅<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的代码示例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 下面的示例演示如何<xref:System.Windows.Forms.DragEventArgs>源和拖放操作的目标之间传递。 在此示例中，<xref:System.Windows.Forms.ListBox>控件是数据源和<xref:System.Windows.Forms.RichTextBox>控件是目标。 该示例假定<xref:System.Windows.Forms.ListBox>控件填充有效的文件名的列表。 当用户拖动一个从显示的文件名<xref:System.Windows.Forms.ListBox>控件拖动到<xref:System.Windows.Forms.RichTextBox>控件，在文件名中所引用的文件打开。  
  
 在启动操作<xref:System.Windows.Forms.ListBox>控件的鼠标按下事件。 在中<xref:System.Windows.Forms.RichTextBox.DragEnter>事件处理程序，该示例使用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>方法以验证数据的格式，<xref:System.Windows.Forms.RichTextBox>控件可以显示，然后设置<xref:System.Windows.Forms.DragDropEffects>属性来指定该数据应从源代码管理复制到目标控件。 最后，<xref:System.Windows.Forms.RichTextBox>控件的拖放事件处理程序使用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法来检索要打开的文件名。  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DragDropEffects" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragOver" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.IDataObject data, int32 keyState, int32 x, int32 y, valuetype System.Windows.Forms.DragDropEffects allowedEffect, valuetype System.Windows.Forms.DragDropEffects effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As IDataObject, keyState As Integer, x As Integer, y As Integer, allowedEffect As DragDropEffects, effect As DragDropEffects)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DragEventArgs(System::Windows::Forms::IDataObject ^ data, int keyState, int x, int y, System::Windows::Forms::DragDropEffects allowedEffect, System::Windows::Forms::DragDropEffects effect);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DragEventArgs : System.Windows.Forms.IDataObject * int * int * int * System.Windows.Forms.DragDropEffects * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragEventArgs" Usage="new System.Windows.Forms.DragEventArgs (data, keyState, x, y, allowedEffect, effect)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="System.Windows.Forms.IDataObject" />
        <Parameter Name="keyState" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="allowedEffect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">与此事件关联的数据。</param>
        <param name="keyState">Shift、Ctrl 和 Alt 键的当前状态。</param>
        <param name="x">鼠标光标的 X 坐标（以像素为单位）。</param>
        <param name="y">鼠标光标的 Y 坐标（以像素为单位）。</param>
        <param name="allowedEffect">
          <see cref="T:System.Windows.Forms.DragDropEffects" /> 值之一。</param>
        <param name="effect">
          <see cref="T:System.Windows.Forms.DragDropEffects" /> 值之一。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.DragEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="AllowedEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects AllowedEffect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects AllowedEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedEffect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects AllowedEffect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedEffect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取拖动事件的发起方（或源）所允许的拖放操作。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DragDropEffects" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当控件通过调用来启动拖放操作<xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType>方法，它指定可允许该操作的效果。 例如，当您将文件从一个源，如果文件是只读的 （或者从只读存储媒体，如 CD），源将指示可以复制但不是传输到目标文件。  
  
 然后再尝试对拖动的数据执行操作，则应检查此属性以确保允许此操作。  
  
   
  
## Examples  
 下面的示例演示两个之间拖放操作<xref:System.Windows.Forms.ListBox>控件。 此示例调用<xref:System.Windows.Forms.Control.DoDragDrop%2A>当拖动操作开始时的方法。 如果已移动鼠标拖动操作启动多个<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>鼠标位置在从<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定要在拖动的项的索引`MouseDown`事件。  
  
 示例还演示如何使用自定义光标拖放操作。 该示例假定两个光标文件`3dwarro.cur`和`3dwno.cur`、 存在于应用程序目录，用于自定义拖动和不可拖动光标，分别。 如果将使用自定义光标`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>检查。 在中设置自定义光标<xref:System.Windows.Forms.Control.GiveFeedback>事件处理程序。  
  
 键盘状态进行评估<xref:System.Windows.Forms.Control.DragOver>事件处理程序的权利`ListBox`，以确定拖动操作将是根据 SHIFT、 CTRL、 ALT 或 CTRL + ALT 键的状态。 中的位置`ListBox`期间还确定发生下拉`DragOver`事件。 如果要删除的数据不是`String`，则<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>设置为<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最后，在显示状态的下拉`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要删除的权利的数据`ListBox`在中确定<xref:System.Windows.Forms.Control.DragDrop>事件处理程序和`String`值中的适当位置添加`ListBox`。 如果拖动操作移动边界以外的窗体，则在取消拖放操作<xref:System.Windows.Forms.Control.QueryContinueDrag>事件处理程序。  
  
 这段代码摘录演示了如何使用<xref:System.Windows.Forms.DragEventArgs>类。 请参阅<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的代码示例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IDataObject Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IDataObject Data" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As IDataObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IDataObject ^ Data { System::Windows::Forms::IDataObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Windows.Forms.IDataObject" Usage="System.Windows.Forms.DragEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IDataObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.IDataObject" />，它包含与此事件关联的数据。</summary>
        <value>与此事件关联的数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在事件处理程序的正文中，可以使用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>方法，以确定数据是否与将数据拖动到该控件的格式要求相匹配。 此外可以指定您是否要尝试转换数据以满足格式要求。 如果拖动的数据满足格式要求，使用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法来检索数据。  
  
   
  
## Examples  
 下面的示例演示两个之间拖放操作<xref:System.Windows.Forms.ListBox>控件。 此示例调用<xref:System.Windows.Forms.Control.DoDragDrop%2A>当拖动操作开始时的方法。 如果已移动鼠标拖动操作启动多个<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>鼠标位置在从<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定要在拖动的项的索引`MouseDown`事件。  
  
 示例还演示如何使用自定义光标拖放操作。 该示例假定两个光标文件`3dwarro.cur`和`3dwno.cur`、 存在于应用程序目录，用于自定义拖动和不可拖动光标，分别。 如果将使用自定义光标`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>检查。 在中设置自定义光标<xref:System.Windows.Forms.Control.GiveFeedback>事件处理程序。  
  
 键盘状态进行评估<xref:System.Windows.Forms.Control.DragOver>事件处理程序的权利`ListBox`，以确定拖动操作将是根据 SHIFT、 CTRL、 ALT 或 CTRL + ALT 键的状态。 中的位置`ListBox`期间还确定发生下拉`DragOver`事件。 如果要删除的数据不是`String`，则<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>设置为<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最后，在显示状态的下拉`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要删除的权利的数据`ListBox`在中确定<xref:System.Windows.Forms.Control.DragDrop>事件处理程序和`String`值中的适当位置添加`ListBox`。 如果拖动操作移动边界以外的窗体，则在取消拖放操作<xref:System.Windows.Forms.Control.QueryContinueDrag>事件处理程序。  
  
 这段代码摘录演示了如何使用<xref:System.Windows.Forms.DragEventArgs>类。 请参阅<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的代码示例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); void set(System::Windows::Forms::DragDropEffects value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects with get, set" Usage="System.Windows.Forms.DragEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置拖放操作中目标放置效果。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DragDropEffects" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，应用的效果确定鼠标光标拖放操作的目标。 这很有用，则会发生该操作上向用户提供反馈。 例如，如果将文件拖动源中，按下 CTRL 键，则指定<xref:System.Windows.Forms.DragDropEffects.Copy?displayProperty=nameWithType>以指示目标会尝试执行复制操作。  
  
 若要使用自定义光标拖放操作，请参阅<xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示两个之间拖放操作<xref:System.Windows.Forms.ListBox>控件。 此示例调用<xref:System.Windows.Forms.Control.DoDragDrop%2A>当拖动操作开始时的方法。 如果已移动鼠标拖动操作启动多个<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>鼠标位置在从<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定要在拖动的项的索引`MouseDown`事件。  
  
 示例还演示如何使用自定义光标拖放操作。 该示例假定两个光标文件`3dwarro.cur`和`3dwno.cur`、 存在于应用程序目录，用于自定义拖动和不可拖动光标，分别。 如果将使用自定义光标`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>检查。 在中设置自定义光标<xref:System.Windows.Forms.Control.GiveFeedback>事件处理程序。  
  
 键盘状态进行评估<xref:System.Windows.Forms.Control.DragOver>事件处理程序的权利`ListBox`，以确定拖动操作将是根据 SHIFT、 CTRL、 ALT 或 CTRL + ALT 键的状态。 中的位置`ListBox`期间还确定发生下拉`DragOver`事件。 如果要删除的数据不是`String`，则<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>设置为<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最后，在显示状态的下拉`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要删除的权利的数据`ListBox`在中确定<xref:System.Windows.Forms.Control.DragDrop>事件处理程序和`String`值中的适当位置添加`ListBox`。 如果拖动操作移动边界以外的窗体，则在取消拖放操作<xref:System.Windows.Forms.Control.QueryContinueDrag>事件处理程序。  
  
 这段代码摘录演示了如何使用<xref:System.Windows.Forms.DragEventArgs>类。 请参阅<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的代码示例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="KeyState">
      <MemberSignature Language="C#" Value="public int KeyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyState As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyState { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyState : int" Usage="System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Shift、Ctrl 和 Alt 键的当前状态以及鼠标按钮的状态。</summary>
        <value>Shift、Ctrl、Alt 键以及鼠标按钮的当前状态。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以依赖于特定键的状态的拖放操作的效果。 例如，您可能决定具体取决于是否在拖放操作过程中按 CTRL 或 SHIFT 键的数据复制或移动。  
  
 在中设置的位<xref:System.Windows.Forms.DragEventArgs.KeyState%2A>属性标识的密钥或在操作期间按下鼠标按钮。 例如，如果按下鼠标左键时，第一位<xref:System.Windows.Forms.DragEventArgs.KeyState%2A>属性设置。 按位 AND 运算符可用于测试给定键的状态。  
  
 下表列出了用于指定事件的值。  
  
|“值”|键|  
|-----------|---------|  
|1 （位 0）|鼠标左按钮。|  
|2 （位 1）|鼠标右按钮。|  
|4 （位 2）|Shift 键。|  
|8 （3 位）|CTRL 键。|  
|16 （4 位）|鼠标中键。|  
|32 （5 位）|Alt 键。|  
  
   
  
## Examples  
 下面的示例演示两个之间拖放操作<xref:System.Windows.Forms.ListBox>控件。 此示例调用<xref:System.Windows.Forms.Control.DoDragDrop%2A>当拖动操作开始时的方法。 如果已移动鼠标拖动操作启动多个<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>鼠标位置在从<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定要在拖动的项的索引`MouseDown`事件。  
  
 示例还演示如何使用自定义光标拖放操作。 该示例假定两个光标文件`3dwarro.cur`和`3dwno.cur`、 存在于应用程序目录，用于自定义拖动和不可拖动光标，分别。 如果将使用自定义光标`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>检查。 在中设置自定义光标<xref:System.Windows.Forms.Control.GiveFeedback>事件处理程序。  
  
 键盘状态进行评估<xref:System.Windows.Forms.Control.DragOver>事件处理程序的权利`ListBox`，以确定拖动操作将是根据 SHIFT、 CTRL、 ALT 或 CTRL + ALT 键的状态。 中的位置`ListBox`期间还确定发生下拉`DragOver`事件。 如果要删除的数据不是`String`，则<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>设置为<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最后，在显示状态的下拉`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要删除的权利的数据`ListBox`在中确定<xref:System.Windows.Forms.Control.DragDrop>事件处理程序和`String`值中的适当位置添加`ListBox`。 如果拖动操作移动边界以外的窗体，则在取消拖放操作<xref:System.Windows.Forms.Control.QueryContinueDrag>事件处理程序。  
  
 这段代码摘录演示了如何使用<xref:System.Windows.Forms.DragEventArgs>类。 请参阅<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的代码示例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberSignature Language="F#" Value="member this.X : int" Usage="System.Windows.Forms.DragEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取鼠标指针在屏幕坐标系中的 x 坐标。</summary>
        <value>鼠标指针的 X 坐标（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示两个之间拖放操作<xref:System.Windows.Forms.ListBox>控件。 此示例调用<xref:System.Windows.Forms.Control.DoDragDrop%2A>当拖动操作开始时的方法。 如果已移动鼠标拖动操作启动多个<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>鼠标位置在从<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定要在拖动的项的索引`MouseDown`事件。  
  
 示例还演示如何使用自定义光标拖放操作。 该示例假定两个光标文件`3dwarro.cur`和`3dwno.cur`、 存在于应用程序目录，用于自定义拖动和不可拖动光标，分别。 如果将使用自定义光标`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>检查。 在中设置自定义光标<xref:System.Windows.Forms.Control.GiveFeedback>事件处理程序。  
  
 键盘状态进行评估<xref:System.Windows.Forms.Control.DragOver>事件处理程序的权利`ListBox`，以确定拖动操作将是根据 SHIFT、 CTRL、 ALT 或 CTRL + ALT 键的状态。 中的位置`ListBox`期间还确定发生下拉`DragOver`事件。 如果要删除的数据不是`String`，则<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>设置为<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最后，在显示状态的下拉`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要删除的权利的数据`ListBox`在中确定<xref:System.Windows.Forms.Control.DragDrop>事件处理程序和`String`值中的适当位置添加`ListBox`。 如果拖动操作移动边界以外的窗体，则在取消拖放操作<xref:System.Windows.Forms.Control.QueryContinueDrag>事件处理程序。  
  
 这段代码摘录演示了如何使用<xref:System.Windows.Forms.DragEventArgs>类。 请参阅<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的代码示例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Y : int" Usage="System.Windows.Forms.DragEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取鼠标指针在屏幕坐标系中的 y 坐标。</summary>
        <value>鼠标指针的 Y 坐标（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示两个之间拖放操作<xref:System.Windows.Forms.ListBox>控件。 此示例调用<xref:System.Windows.Forms.Control.DoDragDrop%2A>当拖动操作开始时的方法。 如果已移动鼠标拖动操作启动多个<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>鼠标位置在从<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定要在拖动的项的索引`MouseDown`事件。  
  
 示例还演示如何使用自定义光标拖放操作。 该示例假定两个光标文件`3dwarro.cur`和`3dwno.cur`、 存在于应用程序目录，用于自定义拖动和不可拖动光标，分别。 如果将使用自定义光标`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>检查。 在中设置自定义光标<xref:System.Windows.Forms.Control.GiveFeedback>事件处理程序。  
  
 键盘状态进行评估<xref:System.Windows.Forms.Control.DragOver>事件处理程序的权利`ListBox`，以确定拖动操作将是根据 SHIFT、 CTRL、 ALT 或 CTRL + ALT 键的状态。 中的位置`ListBox`期间还确定发生下拉`DragOver`事件。 如果要删除的数据不是`String`，则<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>设置为<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最后，在显示状态的下拉`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要删除的权利的数据`ListBox`在中确定<xref:System.Windows.Forms.Control.DragDrop>事件处理程序和`String`值中的适当位置添加`ListBox`。 如果拖动操作移动边界以外的窗体，则在取消拖放操作<xref:System.Windows.Forms.Control.QueryContinueDrag>事件处理程序。  
  
 这段代码摘录演示了如何使用<xref:System.Windows.Forms.DragEventArgs>类。 请参阅<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的代码示例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.X" />
      </Docs>
    </Member>
  </Members>
</Type>