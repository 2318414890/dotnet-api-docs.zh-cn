<Type Name="TreeNodeCollection" FullName="System.Windows.Forms.TreeNodeCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7ea72866fa6ba5ec062f2aeeefba74f13d41179e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37506908" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TreeNodeCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeNodeCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type TreeNodeCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 <see cref="T:System.Windows.Forms.TreeNode" /> 对象集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>， <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>，和<xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>方法，可以添加和从集合中删除每个树节点。  
  
> [!NOTE]
>  不支持枚举集合和删除节点。  
  
 此外可以使用<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>方法来添加或从集合中移除所有树节点。  
  
 类不能继承自<xref:System.Windows.Forms.TreeNodeCollection>类。  
  
   
  
## Examples  
 下面的代码示例显示的客户信息<xref:System.Windows.Forms.TreeView>控件。 根树节点显示客户名称和子树节点显示分配给每个客户的订单号。 在此示例中，有 15 个订单显示 1,000 名客户。 重新绘制的<xref:System.Windows.Forms.TreeView>通过使用抑制<xref:System.Windows.Forms.TreeView.BeginUpdate%2A>和<xref:System.Windows.Forms.TreeView.EndUpdate%2A>方法和等待<xref:System.Windows.Forms.Cursor>显示时<xref:System.Windows.Forms.TreeView>创建和绘制<xref:System.Windows.Forms.TreeNode>对象。 此示例要求具有`Customer`对象，可以保留一系列`Order`对象。 它还需要创建的实例<xref:System.Windows.Forms.TreeView>对的 control 权限<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TreeView" />
    <altmember cref="T:System.Windows.Forms.TreeNode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在集合中添加新的树节点。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <see cref="T:System.Windows.Forms.TreeNode" /> 显示的标签文本。</param>
        <summary>将具有指定标签文本的新树节点添加到当前树节点集合的末尾。</summary>
        <returns>表示添加到集合中的树节点的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
 若要删除<xref:System.Windows.Forms.TreeNode>之前添加，请使用<xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>， <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>，或<xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>方法。  
  
   
  
## Examples  
 下面的代码示例显示的客户信息<xref:System.Windows.Forms.TreeView>控件。 根树节点显示客户名称和子树节点显示分配给每个客户的订单号。 在此示例中，有 15 个订单显示 1,000 名客户。 重新绘制的<xref:System.Windows.Forms.TreeView>通过使用抑制<xref:System.Windows.Forms.TreeView.BeginUpdate%2A>和<xref:System.Windows.Forms.TreeView.EndUpdate%2A>方法和等待<xref:System.Windows.Forms.Cursor>显示时<xref:System.Windows.Forms.TreeView>创建和绘制<xref:System.Windows.Forms.TreeNode>对象。 此示例要求具有`Customer`对象，可以保留一系列`Order`对象。 它还需要创建的实例<xref:System.Windows.Forms.TreeView>对的 control 权限<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.Forms.TreeNode -&gt; int&#xA;override this.Add : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.Add node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">要添加到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</param>
        <summary>将先前创建的树节点添加到树节点集合的末尾。</summary>
        <returns>添加到树节点集合中的 <see cref="T:System.Windows.Forms.TreeNode" /> 的从零开始的索引值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此版本的<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>方法，可添加之前创建<xref:System.Windows.Forms.TreeNode>到树节点集合的末尾的对象。  
  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
 若要删除<xref:System.Windows.Forms.TreeNode>之前添加，请使用<xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>， <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>，或<xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>方法。  
  
> [!NOTE]
>  一个<xref:System.Windows.Forms.TreeNode>可以分配给一个<xref:System.Windows.Forms.TreeView>控件一次。 若要添加到新的树视图控件的树节点，您必须首先将其删除其他树视图中或将其克隆。  
  
   
  
## Examples  
 下面的代码示例显示的客户信息<xref:System.Windows.Forms.TreeView>控件。 根树节点显示客户名称和子树节点显示分配给每个客户的订单号。 在此示例中，有 15 个订单显示 1,000 名客户。 重新绘制的<xref:System.Windows.Forms.TreeView>通过使用抑制<xref:System.Windows.Forms.TreeView.BeginUpdate%2A>和<xref:System.Windows.Forms.TreeView.EndUpdate%2A>方法和等待<xref:System.Windows.Forms.Cursor>显示时<xref:System.Windows.Forms.TreeView>创建和绘制<xref:System.Windows.Forms.TreeNode>对象。 此示例要求具有`Customer`对象，可以保留一系列`Order`对象。 它还需要创建的实例<xref:System.Windows.Forms.TreeView>对的 control 权限<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="node" /> 目前分配给了另一个 <see cref="T:System.Windows.Forms.TreeView" />。</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <summary>创建具有指定键和文本的新树节点，并将其添加到集合中。</summary>
        <returns>已添加到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <param name="imageIndex">要在树节点中显示的图像的索引。</param>
        <summary>创建具有指定键、文本和图像的树节点，并将其添加到集合中。</summary>
        <returns>已添加到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 `imageIndex`参数引用中的图像<xref:System.Windows.Forms.TreeView.ImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 树节点添加到集合的末尾。 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <param name="imageKey">要在树节点中显示的图像。</param>
        <summary>创建具有指定键、文本和图像的树节点，并将其添加到集合中。</summary>
        <returns>已添加到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 树节点添加到集合的末尾。 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
 `imageKey`参数引用中的图像<xref:System.Windows.Forms.TreeView.ImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <param name="imageIndex">要在树节点中显示的图像的索引。</param>
        <param name="selectedImageIndex">处于选定状态时要在树节点中显示的图像的索引。</param>
        <summary>创建具有指定键、文本和图像的树节点，并将其添加到集合中。</summary>
        <returns>已添加到集合中的树节点。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 树节点添加到集合的末尾。 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
 `imageIndex`参数引用中的图像<xref:System.Windows.Forms.TreeView.ImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 `selectedImageIndex`参数引用中的图像<xref:System.Windows.Forms.TreeView.StateImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <param name="imageKey">要在树节点中显示的图像的键。</param>
        <param name="selectedImageKey">节点处于选定状态时要显示的图像的键。</param>
        <summary>创建具有指定键、文本和图像的树节点，并将其添加到集合中。</summary>
        <returns>已添加到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 树节点添加到集合的末尾。 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
 `imageKey`参数引用中的图像<xref:System.Windows.Forms.TreeView.ImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 `selectedImageKey`参数引用中的图像<xref:System.Windows.Forms.TreeView.StateImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.TreeNode[] nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.TreeNode[] nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (nodes As TreeNode())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ nodes);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : System.Windows.Forms.TreeNode[] -&gt; unit&#xA;override this.AddRange : System.Windows.Forms.TreeNode[] -&gt; unit" Usage="treeNodeCollection.AddRange nodes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="nodes">表示要添加到集合中的树节点的 <see cref="T:System.Windows.Forms.TreeNode" /> 对象数组。</param>
        <summary>将先前创建的一组树节点添加到集合中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode>中所含对象`nodes`数组追加到集合的末尾。  
  
 可以使用<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法来快速以前添加的组创建<xref:System.Windows.Forms.TreeNode>而不是手动添加每个集合的对象<xref:System.Windows.Forms.TreeNode>集合使用<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>方法。  
  
 若要删除<xref:System.Windows.Forms.TreeNode>之前添加，请使用<xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>， <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>，或<xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>方法。  
  
   
  
## Examples  
 下面的代码示例副本<xref:System.Windows.Forms.TreeNodeCollection>从<xref:System.Windows.Forms.TreeView>到临时<xref:System.Array>，然后将该数组的内容添加到另一个<xref:System.Windows.Forms.TreeView>使用<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法。 <xref:System.Windows.Forms.TreeNodeCollection>从源<xref:System.Windows.Forms.TreeView>清除使用<xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>方法。 此示例需要您有两个<xref:System.Windows.Forms.TreeView>控件，另一个使用一系列<xref:System.Windows.Forms.TreeNode>对象。  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nodes" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="nodes" /> 是另一 <see cref="T:System.Windows.Forms.TreeView" /> 的子级。</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="treeNodeCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从集合中删除所有树节点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于清除树节点在树视图中的整个集合。  
  
 若要从集合中移除的每个树节点，请使用<xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>或<xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>方法。  
  
 若要添加新<xref:System.Windows.Forms.TreeNode>对象到集合中，使用<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>， <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>，或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
   
  
## Examples  
 下面的代码示例副本<xref:System.Windows.Forms.TreeNodeCollection>从<xref:System.Windows.Forms.TreeView>到临时<xref:System.Array>，然后将该数组的内容添加到另一个<xref:System.Windows.Forms.TreeView>使用<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法。 <xref:System.Windows.Forms.TreeNodeCollection>从源<xref:System.Windows.Forms.TreeView>清除使用<xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>方法。 此示例需要您有两个<xref:System.Windows.Forms.TreeView>控件，另一个使用一系列<xref:System.Windows.Forms.TreeNode>对象。  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (node As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.TreeNode -&gt; bool" Usage="treeNodeCollection.Contains node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">要在集合中查找的 <see cref="T:System.Windows.Forms.TreeNode" />。</param>
        <summary>确定指定的树节点是否为集合的成员。</summary>
        <returns>如果 <see cref="T:System.Windows.Forms.TreeNode" /> 是集合的成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可确定是否<xref:System.Windows.Forms.TreeNode>是之前尝试执行操作的集合的成员<xref:System.Windows.Forms.TreeNode>。 可以使用此方法以确认<xref:System.Windows.Forms.TreeNode>已添加到或仍是集合的成员。  
  
 此方法所需量是时间的节点集合的大小成正比，因此你可能想要避免使用较大的集合。  
  
 此方法的引用相等性检查。 不能用于确定集合中是否为节点的等效项不同。  
  
> [!NOTE]
>  引用相等性要求的隐含意义是，派生的不能自定义此方法的行为<xref:System.Windows.Forms.TreeNode>类型通过重写<xref:System.Object.Equals%2A>方法的<xref:System.Windows.Forms.TreeNode>类。  
  
   
  
## Examples  
 下面的代码示例确定指定<xref:System.Windows.Forms.TreeNode>内<xref:System.Windows.Forms.TreeNodeCollection>，然后枚举集合。 此示例要求具有<xref:System.Windows.Forms.Form>与<xref:System.Windows.Forms.TreeView>具有<xref:System.Windows.Forms.TreeNodeCollection>，其中包含<xref:System.Windows.Forms.TreeNode>名为`myTreeNode2`。  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="treeNodeCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要搜索的 <see cref="T:System.Windows.Forms.TreeNode" /> 的名称。</param>
        <summary>确定集合是否包含具有指定键的树节点。</summary>
        <returns>如果集合包含具有指定键的 <see cref="T:System.Windows.Forms.TreeNode" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 密钥的比较不区分大小写。 如果`key`参数是`null`或空字符串，<xref:System.Windows.Forms.TreeNodeCollection.Item%2A>属性返回`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="treeNodeCollection.CopyTo (dest, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">目标数组。</param>
        <param name="index">目标数组中的索引，存储从此处开始。</param>
        <summary>将整个集合复制到现有数组中，从该数组内的指定位置开始复制。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示的数字<xref:System.Windows.Forms.TreeNode>中的对象<xref:System.Windows.Forms.TreeNodeCollection>，将复制到集合中的内容<xref:System.Object>数组，并显示列表中的树节点<xref:System.Windows.Forms.Label>控件。 此示例要求具有<xref:System.Windows.Forms.TreeView>上至少有一个<xref:System.Windows.Forms.TreeNode>在其<xref:System.Windows.Forms.TreeNodeCollection>，和一个<xref:System.Windows.Forms.Label>上控制<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取集合中 <see cref="T:System.Windows.Forms.TreeNode" /> 对象的总数。</summary>
        <value>集合中的 <see cref="T:System.Windows.Forms.TreeNode" /> 对象的总数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNodeCollection.Count%2A>属性包含的数<xref:System.Windows.Forms.TreeNode>分配给集合的对象。 可以使用<xref:System.Windows.Forms.TreeNodeCollection.Count%2A>属性值作为一个循环来循环访问集合的上限。  
  
> [!NOTE]
>  集合的索引值是一个从零开始的索引，因为必须减一循环变量。 如果不考虑为此，您会超过上限的集合和 throw<xref:System.IndexOutOfRangeException>异常。  
  
   
  
## Examples  
 下面的代码示例显示的数字<xref:System.Windows.Forms.TreeNode>中的对象<xref:System.Windows.Forms.TreeNodeCollection>，将复制到集合中的内容<xref:System.Object>数组，并显示列表中的树节点<xref:System.Windows.Forms.Label>控件。 此示例要求具有<xref:System.Windows.Forms.TreeView>上至少有一个<xref:System.Windows.Forms.TreeNode>在其<xref:System.Windows.Forms.TreeNodeCollection>，和一个<xref:System.Windows.Forms.Label>上控制<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As TreeNode()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberSignature Language="F#" Value="member this.Find : string * bool -&gt; System.Windows.Forms.TreeNode[]" Usage="treeNodeCollection.Find (key, searchAllChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">要搜索的树节点的名称。</param>
        <param name="searchAllChildren">如果搜索树节点的子节点，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>查找具有指定键的树节点，可以选择搜索子节点。</summary>
        <returns>一个 <see cref="T:System.Windows.Forms.TreeNode" /> 对象的数组，这些对象的 <see cref="P:System.Windows.Forms.TreeNode.Name" /> 属性与指定的键匹配。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 密钥的比较不区分大小写。 如果`key`参数是`null`或空字符串，或没有匹配项，<xref:System.Windows.Forms.TreeNodeCollection.Item%2A>属性返回一个空数组`.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="treeNodeCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回可用于循环访问树节点集合的枚举数。</summary>
        <returns>表示树节点集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例确定指定<xref:System.Windows.Forms.TreeNode>内<xref:System.Windows.Forms.TreeNodeCollection>，然后枚举集合。 此示例要求具有<xref:System.Windows.Forms.Form>与<xref:System.Windows.Forms.TreeView>具有<xref:System.Windows.Forms.TreeNodeCollection>，其中包含<xref:System.Windows.Forms.TreeNode>名为`myTreeNode2`。  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.IndexOf node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">要在集合中查找的 <see cref="T:System.Windows.Forms.TreeNode" />。</param>
        <summary>返回集合中指定树节点的索引。</summary>
        <returns>树节点集合中项的从零开始的索引；否则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法所需量是时间的节点集合的大小成正比，因此你可能想要避免使用较大的集合。  
  
 此方法的引用相等性检查。 不能使用它来检索集合中的等效但不同节点的索引。  
  
> [!NOTE]
>  引用相等性要求的隐含意义是，派生的不能自定义此方法的行为<xref:System.Windows.Forms.TreeNode>类型通过重写<xref:System.Object.Equals%2A>方法的<xref:System.Windows.Forms.TreeNode>类。  
  
   
  
## Examples  
 下面的代码示例确定指定<xref:System.Windows.Forms.TreeNode>内<xref:System.Windows.Forms.TreeNodeCollection>，然后枚举集合。 此示例要求具有<xref:System.Windows.Forms.Form>与<xref:System.Windows.Forms.TreeView>具有<xref:System.Windows.Forms.TreeNodeCollection>，其中包含<xref:System.Windows.Forms.TreeNode>名为`myTreeNode2`。  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#2)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#2)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="treeNodeCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要搜索的树节点的名称。</param>
        <summary>返回具有指定键的首个树节点的索引。</summary>
        <returns>如果找到具有指定键的首个树节点，则为该节点从零开始的索引；否则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.TreeNodeCollection.IndexOfKey%2A>项的调用，最后一个索引将首先，检查的键的匹配项，但如果没有匹配项，则搜索开始的集合的开始处返回。  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 密钥的比较不区分大小写。 如果`key`是`null`或空字符串，<xref:System.Windows.Forms.TreeNodeCollection.Item%2A>属性将返回-1。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将集合中的一项插入指定位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">集合中要插入节点的位置。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <summary>创建具有指定文本的树节点，并将其插入指定索引处。</summary>
        <returns>已插入到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.TreeView.Sorted%2A>属性设置为`true`，则`index`参数值将被忽略。 <xref:System.Windows.Forms.TreeNode>插入到树视图和<xref:System.Windows.Forms.TreeView>将重新排序。  
  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>或<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Insert (index As Integer, node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * System.Windows.Forms.TreeNode -&gt; unit&#xA;override this.Insert : int * System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Insert (index, node)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">集合中要插入树节点的索引位置。</param>
        <param name="node">要插入到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</param>
        <summary>在树节点集合中的指定位置插入现有树节点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.TreeView.Sorted%2A?displayProperty=nameWithType>属性设置为`true`，则`index`参数值将被忽略。 <xref:System.Windows.Forms.TreeNode>插入到树视图中，和<xref:System.Windows.Forms.TreeView>重新排序。  
  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>或<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法。  
  
 若要删除<xref:System.Windows.Forms.TreeNode>之前添加，请使用<xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>， <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>，或<xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>方法。  
  
> [!NOTE]
>  一个<xref:System.Windows.Forms.TreeNode>可以分配给一个<xref:System.Windows.Forms.TreeView>控件一次。 若要添加到新的树视图控件的树节点，您必须首先将其删除其他树视图中或将其克隆。  
  
   
  
## Examples  
 下面的代码示例中删除选定的树节点从一个<xref:System.Windows.Forms.TreeView>并将其添加到另一个中，如果这两个树节点集合不是只读的。 时<xref:System.Windows.Forms.Button>单击时，<xref:System.Windows.Forms.TreeNode>由此<xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType>属性删除从一个<xref:System.Windows.Forms.TreeView>使用<xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>方法并添加到其他<xref:System.Windows.Forms.TreeView>使用<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。 此示例要求具有<xref:System.Windows.Forms.Form>包含两个<xref:System.Windows.Forms.TreeView>控件和一个<xref:System.Windows.Forms.Button>。 <xref:System.Windows.Forms.TreeView>应名为控件`treeView1`和`treeView2`。  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="node" /> 目前分配给了另一个 <see cref="T:System.Windows.Forms.TreeView" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">集合中要插入节点的位置。</param>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <summary>创建具有指定文本和键的树节点，并将其插入集合中。</summary>
        <returns>已插入到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.TreeView.Sorted%2A>属性设置为`true`，则`index`参数值将被忽略。 <xref:System.Windows.Forms.TreeNode>插入到树视图和<xref:System.Windows.Forms.TreeView>将重新排序。  
  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>或<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法。  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">集合中要插入节点的位置。</param>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <param name="imageIndex">要在树节点中显示的图像的索引。</param>
        <summary>创建具有指定键、文本和图像的树节点，并将其插入集合中的指定索引处。</summary>
        <returns>已插入到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.TreeView.Sorted%2A>属性设置为`true`，则`index`参数值将被忽略。 <xref:System.Windows.Forms.TreeNode>插入到树视图和<xref:System.Windows.Forms.TreeView>将重新排序。  
  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>或<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法。  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 `imageIndex`参数引用中的图像<xref:System.Windows.Forms.TreeView.ImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">集合中要插入节点的位置。</param>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <param name="imageKey">要在树节点中显示的图像的键。</param>
        <summary>创建具有指定键、文本和图像的树节点，并将其插入集合中的指定索引处。</summary>
        <returns>已插入到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.TreeView.Sorted%2A>属性设置为`true`，则`index`参数值将被忽略。 <xref:System.Windows.Forms.TreeNode>插入到树视图和<xref:System.Windows.Forms.TreeView>将重新排序。  
  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>或<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法。  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 `imageKey`参数引用中的图像<xref:System.Windows.Forms.TreeView.ImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">集合中要插入节点的位置。</param>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <param name="imageIndex">要在树节点中显示的图像的索引。</param>
        <param name="selectedImageIndex">处于选定状态时要在树节点中显示的图像的索引。</param>
        <summary>创建具有指定键、文本和图像的树节点，并将其插入集合中的指定索引处。</summary>
        <returns>已插入到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.TreeView.Sorted%2A>属性设置为`true`，则`index`参数值将被忽略。 <xref:System.Windows.Forms.TreeNode>插入到树视图和<xref:System.Windows.Forms.TreeView>将重新排序。  
  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>或<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法。  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 `imageIndex`参数引用中的图像<xref:System.Windows.Forms.TreeView.ImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 `selectedimageIndex`参数引用中的图像<xref:System.Windows.Forms.TreeView.StateImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">集合中要插入节点的位置。</param>
        <param name="key">树节点的名称。</param>
        <param name="text">要在树节点中显示的文本。</param>
        <param name="imageKey">要在树节点中显示的图像的键。</param>
        <param name="selectedImageKey">处于选定状态时要在树节点中显示的图像的键。</param>
        <summary>创建具有指定键、文本和图像的树节点，并将其插入集合中的指定索引处。</summary>
        <returns>已插入到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.TreeView.Sorted%2A>属性设置为`true`，则`index`参数值将被忽略。 <xref:System.Windows.Forms.TreeNode>插入到树视图和<xref:System.Windows.Forms.TreeView>将重新排序。  
  
 您还可以添加新<xref:System.Windows.Forms.TreeNode>通过使用集合的对象<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>或<xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>方法。  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 `imageKey`参数引用中的图像<xref:System.Windows.Forms.TreeView.ImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 `selectedimageKey`参数引用中的图像<xref:System.Windows.Forms.TreeView.StateImageList%2A>的父对象<xref:System.Windows.Forms.TreeView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示集合是否为只读。</summary>
        <value>如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例中删除选定的树节点从一个<xref:System.Windows.Forms.TreeView>并将其添加到另一个中，如果这两个树节点集合不是只读的。 时<xref:System.Windows.Forms.Button>单击时，<xref:System.Windows.Forms.TreeNode>由此<xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType>属性删除从一个<xref:System.Windows.Forms.TreeView>使用<xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>方法并添加到其他<xref:System.Windows.Forms.TreeView>使用<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。 此示例要求具有<xref:System.Windows.Forms.Form>包含两个<xref:System.Windows.Forms.TreeView>控件和一个<xref:System.Windows.Forms.Button>。 <xref:System.Windows.Forms.TreeView>应名为控件`treeView1`和`treeView2`。  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取或设置集合中的树节点。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[int] { System::Windows::Forms::TreeNode ^ get(int index); void set(int index, System::Windows::Forms::TreeNode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.TreeNode with get, set" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">集合中 <see cref="T:System.Windows.Forms.TreeNode" /> 的索引位置。</param>
        <summary>获取或设置位于集合中指定索引位置处的 <see cref="T:System.Windows.Forms.TreeNode" />。</summary>
        <value>位于集合中指定索引位置的 <see cref="T:System.Windows.Forms.TreeNode" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要将分配<xref:System.Windows.Forms.TreeNode>对象到特定位置，或从其检索<xref:System.Windows.Forms.TreeNodeCollection>，可以引用具有特定索引值的集合对象。 索引值<xref:System.Windows.Forms.TreeNodeCollection>是从零开始的索引。  
  
   
  
## Examples  
 下面的代码示例中删除第一个<xref:System.Windows.Forms.TreeNode>从<xref:System.Windows.Forms.TreeView>如果其<xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType>属性设置为"Node0"。 当<xref:System.Windows.Forms.Button>单击时，第一个<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeView>使用删除<xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>方法。 此示例要求您已创建<xref:System.Windows.Forms.TreeView>和一个<xref:System.Windows.Forms.Button>上<xref:System.Windows.Forms.Form>。 第一个<xref:System.Windows.Forms.TreeNode>在您<xref:System.Windows.Forms.TreeView>应具有 text 属性的"Node0。"  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 值小于 0 或大于集合中的树节点数。</exception>
        <altmember cref="P:System.Windows.Forms.TreeNodeCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[System::String ^] { System::Windows::Forms::TreeNode ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.TreeNode" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要从集合中检索的 <see cref="T:System.Windows.Forms.TreeNode" /> 的名称。</param>
        <summary>获取集合中具有指定键的树节点。</summary>
        <value>具有指定键的 <see cref="T:System.Windows.Forms.TreeNode" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 密钥的比较不区分大小写。 如果`key`参数是`null`或空字符串，<xref:System.Windows.Forms.TreeNodeCollection.Item%2A>属性返回`null`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Remove node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">要移除的 <see cref="T:System.Windows.Forms.TreeNode" />。</param>
        <summary>从树节点集合中移除指定的树节点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.TreeNode>已从树节点集合，所有后续的树节点将上移集合中的一个位置。  
  
 您还可以删除<xref:System.Windows.Forms.TreeNode>通过使用前面添加<xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>方法。  
  
> [!NOTE]
>  不支持枚举集合和删除节点。  
  
 若要添加新<xref:System.Windows.Forms.TreeNode>对象到集合中，使用<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>， <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>，或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
   
  
## Examples  
 下面的代码示例中删除选定的树节点从一个<xref:System.Windows.Forms.TreeView>并将其添加到另一个中，如果这两个树节点集合不是只读的。 时<xref:System.Windows.Forms.Button>单击时，<xref:System.Windows.Forms.TreeNode>由此<xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType>属性删除从一个<xref:System.Windows.Forms.TreeView>使用<xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>方法并添加到其他<xref:System.Windows.Forms.TreeView>使用<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。 此示例要求具有<xref:System.Windows.Forms.Form>包含两个<xref:System.Windows.Forms.TreeView>控件和一个<xref:System.Windows.Forms.Button>。 <xref:System.Windows.Forms.TreeView>应名为控件`treeView1`和`treeView2`。  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="treeNodeCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要移除的 <see cref="T:System.Windows.Forms.TreeNode" /> 的索引。</param>
        <summary>从树节点集合的指定索引处移除树节点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.TreeNode>已从树节点集合，所有后续的树节点将上移集合中的一个位置。  
  
 您还可以删除<xref:System.Windows.Forms.TreeNode>通过使用前面添加<xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>或<xref:System.Windows.Forms.TreeNodeCollection.Clear%2A>方法。  
  
> [!NOTE]
>  不支持枚举集合和删除节点。  
  
 若要添加新<xref:System.Windows.Forms.TreeNode>对象到集合中，使用<xref:System.Windows.Forms.TreeNodeCollection.Add%2A>， <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>，或<xref:System.Windows.Forms.TreeNodeCollection.Insert%2A>方法。  
  
   
  
## Examples  
 下面的代码示例中删除第一个<xref:System.Windows.Forms.TreeNode>从<xref:System.Windows.Forms.TreeView>如果其<xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType>属性设置为"Node0"。 当<xref:System.Windows.Forms.Button>单击时，第一个<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeView>使用删除<xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>方法。 此示例要求您已创建<xref:System.Windows.Forms.TreeView>和一个<xref:System.Windows.Forms.Button>上<xref:System.Windows.Forms.Form>。 第一个<xref:System.Windows.Forms.TreeNode>在您<xref:System.Windows.Forms.TreeView>应具有 text 属性的"Node0。"  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="treeNodeCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要从集合中移除的树节点的名称。</param>
        <summary>从集合中移除具有指定键的树节点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A>属性对应的键<xref:System.Windows.Forms.TreeNode>中<xref:System.Windows.Forms.TreeNodeCollection>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.TreeNodeCollection.System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
        <value>在所有情况下均为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.TreeNodeCollection.System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取可用于同步对集合的访问的对象。</summary>
        <value>可用于同步对 <see cref="T:System.Windows.Forms.TreeNodeCollection" /> 的访问的对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (node As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ node) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">要添加到树节点集合的对象。</param>
        <summary>将对象添加到树节点集合的末尾。</summary>
        <returns>添加到树节点集合中的 <see cref="T:System.Windows.Forms.TreeNode" /> 的索引值，此索引值从零开始。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`node`不是<xref:System.Windows.Forms.TreeNodeCollection>，则<xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Add%2A>方法将使用返回的字符串<xref:System.Windows.Forms.TreeNode.ToString%2A>方法<xref:System.Windows.Forms.TreeNode>类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="node" /> 目前分配给了另一 <see cref="T:System.Windows.Forms.TreeView" /> 控件。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="node" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (node As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ node) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">要在集合中查找的对象。</param>
        <summary>确定指定的树节点是否为集合的成员。</summary>
        <returns>如果 <paramref name="node" /> 是该集合的成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`node`不是<xref:System.Windows.Forms.TreeNode>，则<xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Contains%2A>方法将返回`false`。 因此，不能传入字符串以确定集合是否包含具有作为字符串的值的节点及其<xref:System.Windows.Forms.TreeNode.Text%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (node As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ node) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">要在集合中查找的 <see cref="T:System.Windows.Forms.TreeNode" />。</param>
        <summary>返回集合中指定树节点的索引。</summary>
        <returns>树节点集合中项的从零开始的索引；否则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`node`不是<xref:System.Windows.Forms.TreeNode>，则<xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23IndexOf%2A>方法返回-1。 因此，不能传入一个字符串来查找具有作为字符串的值的节点及其<xref:System.Windows.Forms.TreeNode.Text%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, node As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ node) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">集合中要插入树节点的索引位置。</param>
        <param name="node">要插入到集合中的 <see cref="T:System.Windows.Forms.TreeNode" />。</param>
        <summary>在树节点集合中的指定位置插入现有树节点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.TreeView.Sorted%2A>属性设置为`true`，则`index`参数将被忽略。 <xref:System.Windows.Forms.TreeNode>插入到树视图和<xref:System.Web.UI.WebControls.TreeView>将重新排序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="node" /> 目前分配给了另一 <see cref="T:System.Windows.Forms.TreeView" />。  -或-  <paramref name="node" /> 不为 <see cref="T:System.Windows.Forms.TreeNode" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.TreeNodeCollection.System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示树节点集合是否具有固定大小。</summary>
        <value>在所有情况下均为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">从零开始的索引，在此位置获取或设置项。</param>
        <summary>获取或设置集合中指定索引处的树节点。</summary>
        <value>
          <see cref="T:System.Windows.Forms.TreeNode" /> 中指定索引处的 <see cref="T:System.Windows.Forms.TreeNodeCollection" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">设置的值不是一个 <see cref="T:System.Windows.Forms.TreeNode" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (node As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ node) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">要从该集合中移除的 <see cref="T:System.Windows.Forms.TreeNode" />。</param>
        <summary>从树节点集合中移除指定的树节点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能在要删除具有作为字符串的值的节点的字符串中传递其<xref:System.Windows.Forms.TreeNode.Text%2A>属性。  
  
 当<xref:System.Windows.Forms.TreeNode>已从树节点集合，所有后续的树节点将上移集合中的一个位置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>