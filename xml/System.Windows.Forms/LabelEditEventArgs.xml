<Type Name="LabelEditEventArgs" FullName="System.Windows.Forms.LabelEditEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7cb4d3529a026276f59648aeeed3276ddf8d270c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519366" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LabelEditEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.LabelEditEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LabelEditEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LabelEditEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供有关 <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> 和 <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> 事件的数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.LabelEditEventArgs>指定的索引和标题<xref:System.Windows.Forms.ListViewItem>和标题后用户编辑。 此类还提供<xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A>属性。 你可以使用此属性在<xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType>事件处理程序来防止用户编辑的标签。 你还可以使用它在<xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>事件处理程序来还原此更改，请返回标签到其原始值。 当你想要提交更改之前验证用户输入，这非常有用。  
  
> [!NOTE]
>  因为<xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>事件发生之前标签编辑也会提交，调用<xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType>处理程序中为此事件的方法将排序使用的原始值的项。  
  
   
  
## Examples  
 下面的代码示例演示如何处理<xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType>事件以及如何使用<xref:System.Windows.Forms.LabelEditEventArgs.Item%2A>和<xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A>属性。 若要运行该示例，请将以下代码粘贴在窗体包含<xref:System.Windows.Forms.ListView>控件名为`ListView1`并且填充了至少 3 项。 确保所有事件都都使用其事件处理方法关联。  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListView" />
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
    <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs item" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Windows.Forms.ListViewItem" /> 的从零开始的索引，包含要编辑的标签。</param>
        <summary>使用要编辑的 <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> 的指定索引初始化 <see cref="T:System.Windows.Forms.ListViewItem" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数引发<xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType>或<xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>在运行时指定中的特定列表项事件<xref:System.Windows.Forms.ListView>编辑。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item, string label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item, string label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer, label As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item, System::String ^ label);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int * string -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs (item, label)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Windows.Forms.ListViewItem" /> 的从零开始的索引，包含要编辑的标签。</param>
        <param name="label">分配给 <see cref="T:System.Windows.Forms.ListViewItem" /> 标签的新文本。</param>
        <summary>使用正在被编辑的 <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> 的指定索引和 <see cref="T:System.Windows.Forms.ListViewItem" /> 标签的新文本初始化 <see cref="T:System.Windows.Forms.ListViewItem" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数引发<xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType>或<xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>在运行时列表中指定项的事件<xref:System.Windows.Forms.ListView>编辑。 构造函数还可以指定的标签与关联的新文本<xref:System.Windows.Forms.ListViewItem>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property CancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancelEdit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelEdit : bool with get, set" Usage="System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否应取消对 <see cref="T:System.Windows.Forms.ListViewItem" /> 的标签所作的更改。</summary>
        <value>如果应取消 <see cref="T:System.Windows.Forms.ListViewItem" /> 标签的编辑操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此属性可取消的标签所作的更改<xref:System.Windows.Forms.ListViewItem>并且将其恢复到其原始文本。 使用此属性以防止项的标题更改为一个值，不满足你的应用程序的要求。  
  
   
  
## Examples  
 下面的代码示例演示如何处理<xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType>事件以及如何使用<xref:System.Windows.Forms.LabelEditEventArgs.Item%2A>和<xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A>属性。 若要运行该示例，将一个窗体，其中包含 ListView 控件名为 ListView1 并且填充了至少 3 项粘贴下面的代码。 确保所有事件都都使用其事件处理方法关联。  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public int Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Item" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Item { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Item : int" Usage="System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.ListViewItem" />（它包含要编辑的标签）的从零开始的索引。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewItem" /> 的从零开始的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何处理<xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType>事件以及如何使用<xref:System.Windows.Forms.LabelEditEventArgs.Item%2A>和<xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A>属性。 若要运行该示例，将一个窗体，其中包含 ListView 控件名为 ListView1 并且填充了至少 3 项粘贴下面的代码。 确保所有事件都都使用其事件处理方法关联。  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Label : string" Usage="System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取分配给 <see cref="T:System.Windows.Forms.ListViewItem" /> 的标签的新文本。</summary>
        <value>要与 <see cref="T:System.Windows.Forms.ListViewItem" /> 关联的新文本，如果文本未更改，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#463](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#463)]
 [!code-vb[System.Windows.Forms.EventExamples#463](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#463)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>