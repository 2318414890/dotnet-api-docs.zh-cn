<Type Name="KeyPressEventArgs" FullName="System.Windows.Forms.KeyPressEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dffe3a90d9e36ff28b69e6f18be491d69a6e7afb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519513" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyPressEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyPressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyPressEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyPressEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.KeyPressEventArgs>指定当用户按下某个键时组成的字符。 例如，当用户按下 SHIFT + K、<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>属性返回大写的 k。  
  
 A<xref:System.Windows.Forms.Control.KeyPress>事件在用户按下某个键时发生。 与紧密相关的两个事件<xref:System.Windows.Forms.Control.KeyPress>事件<xref:System.Windows.Forms.Control.KeyUp>和<xref:System.Windows.Forms.Control.KeyDown>。 <xref:System.Windows.Forms.Control.KeyDown>事件之前每<xref:System.Windows.Forms.Control.KeyPress>事件时用户按下某个键，和一个<xref:System.Windows.Forms.Control.KeyUp>用户释放某个键时发生事件。 当用户按住某个键时，重复<xref:System.Windows.Forms.Control.KeyDown>和<xref:System.Windows.Forms.Control.KeyPress>字符重复每次发生的事件。 一个<xref:System.Windows.Forms.Control.KeyUp>下达时生成事件。  
  
 与每个<xref:System.Windows.Forms.Control.KeyPress>事件，<xref:System.Windows.Forms.KeyPressEventArgs>被传递。 A<xref:System.Windows.Forms.KeyEventArgs>传递与每个<xref:System.Windows.Forms.Control.KeyDown>和<xref:System.Windows.Forms.Control.KeyUp>事件。 A<xref:System.Windows.Forms.KeyEventArgs>指定任何修改键 （CTRL、 shift 键或 ALT） 是否已与另一个键一起按下。 (也可以通过获取此修饰符信息<xref:System.Windows.Forms.Control.ModifierKeys%2A>属性<xref:System.Windows.Forms.Control>类。)  
  
 设置<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>到`true`取消`KeyPress`事件。 这可防止处理键按键控件。  
  
> [!NOTE]
>  某些控件将在处理某些击键<xref:System.Windows.Forms.Control.KeyDown>。 例如，<xref:System.Windows.Forms.RichTextBox>处理 Enter 键之前<xref:System.Windows.Forms.Control.KeyPress>调用。 在这种情况下，您无法取消<xref:System.Windows.Forms.Control.KeyPress>事件，并且必须取消从键击<xref:System.Windows.Forms.Control.KeyDown>相反。  
  
 有关事件模型的信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Forms.KeyPressEventArgs>如您按下键计数并在每次按键后显示结果。 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> 然后设置为 true，以防止操作系统从进一步处理密钥。 该示例假定的窗体具有<xref:System.Windows.Forms.TextBox>在其上放置。  
  
 [!code-cpp[Classic KeyPressEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic KeyPressEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic KeyPressEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  
  
 你必须创建此类的新实例。 您还必须设置事件处理程序。 你可以构造函数中执行此为您的类。  
  
 [!code-cpp[Classic KeyPressEventArgs Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic KeyPressEventArgs Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]
 [!code-vb[Classic KeyPressEventArgs Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  
  
 当控件中引发指定的事件时，会调用附加的方法和应用程序可以执行代码，以响应事件。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
    <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyPressEventArgs (char keyChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char keyChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyPressEventArgs(char keyChar);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyPressEventArgs : char -&gt; System.Windows.Forms.KeyPressEventArgs" Usage="new System.Windows.Forms.KeyPressEventArgs keyChar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="keyChar">与用户按下的键相对应的 ASCII 字符。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=nameWithType>属性来获取修改键的当前状态。  
  
   
  
## Examples  
 下面的示例显示一个消息框，显示 SHIFT 键的当前状态。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否处理过 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件。</summary>
        <value>如果处理过事件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不处理该事件，则将发送到默认处理操作系统中。 设置<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>到`true`取消`KeyPress`事件。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.Forms.TextBox>控件。 `keypressed`方法使用<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>属性检查是否按下 ENTER 键。 如果按 ENTER 键，<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>属性设置为`true`，表示此事件处理。  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyChar">
      <MemberSignature Language="C#" Value="public char KeyChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char KeyChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char KeyChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.KeyChar : char with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与按下的键对应的字符。</summary>
        <value>撰写的 ASCII 字符。 例如，如果用户按下 Shift + K，则该属性返回一个大写的 K。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>属性在运行时和修改在运行时的特殊情况下的键击示例击键。 例如，你可以使用<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>若要在用户输入邮政编码时，请禁用非数字按键，更改按键所有字母都改为在数据输入字段中，大写，或监视键盘或特定组合键其他密钥输入的设备。  
  
 你可以获取或设置以下项：  
  
-   a 到 z、 A 到 Z。  
  
-   CTRL。  
  
-   标点符号。  
  
-   数字键，同时横跨顶部的键盘和数字键盘上。  
  
-   输入。  
  
 无法获取或设置以下项：  
  
-   TAB 键。  
  
-   INSERT 和 DELETE。  
  
-   主页。  
  
-   结束日期。  
  
-   PAGE UP 和 PAGE down 键。  
  
-   F1 F2。  
  
-   ALT。  
  
-   箭头键。  
  
> [!NOTE]
>  有关如何检测到任何上面提到的非字符键的信息，请参阅<xref:System.Windows.Forms.KeyEventArgs>类。  
  
-  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.Forms.TextBox>控件。 `keypressed`方法使用<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>属性检查是否按下 ENTER 键。 如果按 ENTER 键，<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>属性设置为`true`，表示此事件处理。  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>