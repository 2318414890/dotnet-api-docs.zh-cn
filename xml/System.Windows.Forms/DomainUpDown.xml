<Type Name="DomainUpDown" FullName="System.Windows.Forms.DomainUpDown">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a284b348033c02016079e5488931c0b5af98d8e0" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32694164" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DomainUpDown : System.Windows.Forms.UpDownBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DomainUpDown extends System.Windows.Forms.UpDownBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DomainUpDown" />
  <TypeSignature Language="VB.NET" Value="Public Class DomainUpDown&#xA;Inherits UpDownBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class DomainUpDown : System::Windows::Forms::UpDownBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.UpDownBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedItem")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedItemChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示显示字符串值的 Windows 数字显示框（也称为 up-down 控件）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.DomainUpDown>控件将显示从选择的单个字符串值<xref:System.Object>通过单击向上或向下按钮的控件集合。 用户也可以输入文本在控件中，除非<xref:System.Windows.Forms.UpDownBase.ReadOnly%2A>属性设置为`true`（中键入的字符串必须匹配要接受的集合中的项）。 选择项目时，将其转换为字符串值，以便它可以在数字显示框中显示。  
  
 若要创建要在中显示的对象集合<xref:System.Windows.Forms.DomainUpDown>控件，你可以添加或删除项单独使用<xref:System.Collections.ArrayList.Add%2A>和<xref:System.Collections.ArrayList.Remove%2A>方法。 这可以通过中调用事件处理程序，如<xref:System.Windows.Forms.Control.Click>的按钮的事件。 可以通过设置按字母顺序排序的对象集合<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性`true`。 当<xref:System.Windows.Forms.DomainUpDown.Wrap%2A>属性设置为`true`，如果滚过上一次，或在集合中，第一个对象，则列表将分别启动通过与第一个或最后一个对象，似乎将在连续的列表。  
  
 当<xref:System.Windows.Forms.DomainUpDown.UpButton%2A>或<xref:System.Windows.Forms.DomainUpDown.DownButton%2A>方法调用，在代码或通过单击向上或向下按钮，<xref:System.Windows.Forms.DomainUpDown.UpdateEditText%2A>调用来更新控件使用新的字符串。 如果<xref:System.Windows.Forms.UpDownBase.UserEdit%2A>设置为`true`，与之前更新控件的文本显示集合中的值之一匹配的字符串。  
  
 从.NET Framework 4.6，开始<xref:System.Windows.Forms.DomainUpDown>将基于时 app.config 文件包含以下条目系统 DPI 设置调整控件的大小：  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
  
```  
  
   
  
## Examples  
 下面的代码示例创建并初始化<xref:System.Windows.Forms.DomainUpDown>控件。 该示例允许你设置它的一些属性并创建在数字显示框中显示的字符串的集合。 代码假定<xref:System.Windows.Forms.TextBox>， <xref:System.Windows.Forms.CheckBox>，和<xref:System.Windows.Forms.Button>已实例化窗体上。 该示例还假定你已在类级别声明作为名为 32 位有符号整数的一个成员变量`myCounter`。 你可以在文本框中输入字符串并将其添加到<xref:System.Windows.Forms.DomainUpDown.Items%2A>集合时单击该按钮。 通过单击复选框，您可以切换<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性和观察中的项的集合在数字显示框中的差异。  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.UpDownBase" />
    <altmember cref="T:System.Windows.Forms.NumericUpDown" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DomainUpDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DomainUpDown();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.DomainUpDown" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建并初始化<xref:System.Windows.Forms.DomainUpDown>控件。 该示例可以设置其属性的部分，并在数字显示框 （也称为 up-down 控件） 中创建显示的字符串的集合。 代码假定<xref:System.Windows.Forms.TextBox>， <xref:System.Windows.Forms.CheckBox>，和<xref:System.Windows.Forms.Button>已实例化窗体上。 该示例还假定你已在类级别声明作为名为 32 位有符号整数的一个成员变量`myCounter`。 你可以在文本框中输入字符串并将其添加到<xref:System.Windows.Forms.DomainUpDown.Items%2A>集合时单击该按钮。 通过单击复选框，您可以切换<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性和观察中的项的集合在数字显示框中的差异。  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UpDownBase" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:System.Windows.Forms.DomainUpDown" /> 控件创建一个新的辅助功能对象。</summary>
        <returns>控件的新 <see cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownAccessibleObject" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不显式调用 <xref:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance%2A> 方法，则在引用 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 属性时将会调用此方法。  
  
> [!NOTE]
>  要获取或设置 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 属性，必须添加对与 .NET Framework 一起安装的 Accessibility 程序集的引用。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" />在派生类中，不应调用基类的<see cref="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DownButton">
      <MemberSignature Language="C#" Value="public override void DownButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DownButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.DownButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub DownButton ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void DownButton();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>显示对象集合中的下一项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你移动通过中的项集合<xref:System.Windows.Forms.DomainUpDown>控件使用向下按钮，则最终将到达集合中的最后一项。 如果继续，和<xref:System.Windows.Forms.DomainUpDown.Wrap%2A>设置为`true`，列表将从集合中的第一项重新开始，似乎是连续。 当使用向上按钮的集合中移动时，也会发生此行为。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DomainUpDown/DomainUpDownItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As DomainUpDown.DomainUpDownItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DomainUpDown::DomainUpDownItemCollection ^ Items { System::Windows::Forms::DomainUpDown::DomainUpDownItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DomainUpDown+DomainUpDownItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>分配给数字显示框（也称为 up-down 控件）的对象集合。</summary>
        <value>包含一个 <see cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" /> 集合的 <see cref="T:System.Object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Object>集合可以生成并提供给<xref:System.Windows.Forms.DomainUpDown>两种方式的控制。 你可以向集合添加项，通过使用<xref:System.Collections.ArrayList.Add%2A>或<xref:System.Collections.ArrayList.Insert%2A>方法。  
  
   
  
## Examples  
 下面的代码示例创建并初始化<xref:System.Windows.Forms.DomainUpDown>控件。 该示例允许你设置它的一些属性并创建在数字显示框中显示的字符串的集合。 代码假定<xref:System.Windows.Forms.TextBox>， <xref:System.Windows.Forms.CheckBox>，和<xref:System.Windows.Forms.Button>已实例化窗体上。 该示例还假定你已在类级别声明作为名为 32 位有符号整数的一个成员变量`myCounter`。 你可以在文本框中输入字符串并将其添加到<xref:System.Windows.Forms.DomainUpDown.Items%2A>集合时单击该按钮。 通过单击复选框，您可以切换<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性和观察中的项的集合在数字显示框中的差异。  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.Items" />
        <altmember cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected override void OnChanged (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChanged(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChanged (source As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChanged(System::Object ^ source, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">事件源。</param>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedItemChanged">
      <MemberSignature Language="C#" Value="protected void OnSelectedItemChanged (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnSelectedItemChanged(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnSelectedItemChanged (source As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnSelectedItemChanged(System::Object ^ source, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">事件源。</param>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例创建并初始化<xref:System.Windows.Forms.DomainUpDown>控件。 该示例可以设置其属性的部分，并在数字显示框 （也称为 up-down 控件） 中创建显示的字符串的集合。 代码假定<xref:System.Windows.Forms.TextBox>， <xref:System.Windows.Forms.CheckBox>，和<xref:System.Windows.Forms.Button>已实例化窗体上。 该示例还假定你已在类级别声明作为名为 32 位有符号整数的一个成员变量`myCounter`。 你可以在文本框中输入字符串并将其添加到<xref:System.Windows.Forms.DomainUpDown.Items%2A>集合时单击该按钮。 通过单击复选框，您可以切换<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性和观察中的项的集合在数字显示框中的差异。  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
        <altmember cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextBoxKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnTextBoxKeyPress (object source, System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextBoxKeyPress(object source, class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextBoxKeyPress (source As Object, e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextBoxKeyPress(System::Object ^ source, System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="source">事件源。</param>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.KeyPressEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.UpDownBase.ReadOnly%2A>属性设置为`true`、<xref:System.Windows.Forms.DomainUpDown>控件选择上字符开头的列表项。 如果集合中的多个项以开头的相同字符，<xref:System.Windows.Forms.DomainUpDown>控件选择开头键入的字符，从当前所选位置起的下一项。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DomainUpDown" /> 控件的内容和它的边缘之间的间距。</summary>
        <value>
          在所有情况下均为 <see cref="F:System.Windows.Forms.Padding.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 即使你设置<xref:System.Windows.Forms.DomainUpDown.Padding%2A>属性，它将具有的值<xref:System.Windows.Forms.Padding.Empty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DomainUpDown.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DomainUpDown.Padding" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectedIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置选定项的索引值。</summary>
        <value>选定项的从零开始的索引值。 默认值为 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A>属性在数字显示框 （也称为 up-down 控件） 中当前所选集合中包含的项的索引值。 收集项可以是已重新分配新的索引值，如果<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性已更改，不再`false`到`true`。 为集合重新已按字母顺序排序的项将分配一个新的索引值。  
  
> [!NOTE]
>  如果用户已在数字显示框中，进入某个项，或如果已不选定任何项，<xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A>值将默认值，则为-1。  
  
   
  
## Examples  
 下面的代码示例创建并初始化<xref:System.Windows.Forms.DomainUpDown>控件。 该示例允许你设置它的一些属性并创建在数字显示框中显示的字符串的集合。 代码假定<xref:System.Windows.Forms.TextBox>， <xref:System.Windows.Forms.CheckBox>，和<xref:System.Windows.Forms.Button>已实例化窗体上。 该示例还假定你已在类级别声明作为名为 32 位有符号整数的一个成员变量`myCounter`。 你可以在文本框中输入字符串并将其添加到<xref:System.Windows.Forms.DomainUpDown.Items%2A>集合时单击该按钮。 通过单击复选框，您可以切换<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性和观察中的项的集合在数字显示框中的差异。  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">分配的值小于默认值 -1。  
  
 或  
  
 分配的值大于 <see cref="P:System.Windows.Forms.DomainUpDown.Items" /> 数。</exception>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置基于集合中选定项的索引值的选定项。</summary>
        <value>基于 <see cref="P:System.Windows.Forms.DomainUpDown.SelectedIndex" /> 值的选定项。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当设置此属性时，验证的值为某一项在集合中，与<xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A>属性设置为适当的索引值。  
  
   
  
## Examples  
 下面的代码示例创建并初始化<xref:System.Windows.Forms.DomainUpDown>控件。 该示例可以设置其属性的部分，并在数字显示框 （也称为 up-down 控件） 中创建显示的字符串的集合。 代码假定<xref:System.Windows.Forms.TextBox>， <xref:System.Windows.Forms.CheckBox>，和<xref:System.Windows.Forms.Button>已实例化窗体上。 该示例还假定你已在类级别声明作为名为 32 位有符号整数的一个成员变量`myCounter`。 你可以在文本框中输入字符串并将其添加到<xref:System.Windows.Forms.DomainUpDown.Items%2A>集合时单击该按钮。 通过单击复选框，您可以切换<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性和观察中的项的集合在数字显示框中的差异。  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedItemChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedItemChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedItemChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedItemChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在更改 <see cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" /> 属性后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关<xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged>事件发生，<xref:System.Windows.Forms.DomainUpDown.SelectedItem%2A>由用户键入一个新的值也可以单击该控件的向上或向下按钮，可以在代码中，更改属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.DomainUpDown>名为`DomainUpDown1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#381](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#381)]
 [!code-vb[System.Windows.Forms.EventExamples#381](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#381)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示项集合是否排序。</summary>
        <value>
          如果对项集合排序，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>设置为`true`，按字母顺序排序集合。  
  
   
  
## Examples  
 下面的代码示例创建并初始化<xref:System.Windows.Forms.DomainUpDown>控件。 该示例可以设置其属性的部分，并在数字显示框 （也称为 up-down 控件） 中创建显示的字符串的集合。 代码假定<xref:System.Windows.Forms.TextBox>， <xref:System.Windows.Forms.CheckBox>，和<xref:System.Windows.Forms.Button>已实例化窗体上。 该示例还假定你已在类级别声明作为名为 32 位有符号整数的一个成员变量`myCounter`。 你可以在文本框中输入字符串并将其添加到<xref:System.Windows.Forms.DomainUpDown.Items%2A>集合时单击该按钮。 通过单击复选框，您可以切换<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性和观察中的项的集合在数字显示框中的差异。  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示 <see cref="T:System.Windows.Forms.DomainUpDown" /> 控件的字符串。</summary>
        <returns>表示当前 <see cref="T:System.Windows.Forms.DomainUpDown" /> 的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回字符串包括类型和值<xref:System.Collections.ArrayList.Count%2A>和<xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpButton">
      <MemberSignature Language="C#" Value="public override void UpButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.UpButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub UpButton ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void UpButton();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>显示集合中的上一项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你移动通过中的项集合<xref:System.Windows.Forms.DomainUpDown>控件使用向上按钮，则最终将到达集合中的第一项。 如果继续，和<xref:System.Windows.Forms.DomainUpDown.Wrap%2A>设置为`true`，列表将从集合中的最后一项重新开始，似乎是连续。 当使用向下按钮的集合中移动时，也会发生此行为。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
      </Docs>
    </Member>
    <Member MemberName="UpdateEditText">
      <MemberSignature Language="C#" Value="protected override void UpdateEditText ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UpdateEditText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.UpdateEditText" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub UpdateEditText ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void UpdateEditText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>更新数字显示框（也称为 up-down 控件）中的文本以显示选定项。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.UpDownBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public bool Wrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Wrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Wrap" />
      <MemberSignature Language="VB.NET" Value="Public Property Wrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Wrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如果用户继续滚动时超过了列表的末尾，项的集合是否继续第一项或最后一项。</summary>
        <value>
          如果用户到达集合的开始或末尾时列表重新开始，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.DomainUpDown.Wrap%2A>属性设置为`true`，如果访问集合中的最后一项并继续，则列表将从头开始使用第一项，似乎是连续。 此行为按相反的顺序也适用。  
  
   
  
## Examples  
 下面的代码示例创建并初始化<xref:System.Windows.Forms.DomainUpDown>控件。 该示例可以设置其属性的部分，并在数字显示框 （也称为 up-down 控件） 中创建显示的字符串的集合。 代码假定<xref:System.Windows.Forms.TextBox>， <xref:System.Windows.Forms.CheckBox>，和<xref:System.Windows.Forms.Button>已实例化窗体上。 该示例还假定你已在类级别声明作为名为 32 位有符号整数的一个成员变量`myCounter`。 你可以在文本框中输入字符串并将其添加到<xref:System.Windows.Forms.DomainUpDown.Items%2A>集合时单击该按钮。 通过单击复选框，您可以切换<xref:System.Windows.Forms.DomainUpDown.Sorted%2A>属性和观察中的项的集合在数字显示框中的差异。  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
      </Docs>
    </Member>
  </Members>
</Type>