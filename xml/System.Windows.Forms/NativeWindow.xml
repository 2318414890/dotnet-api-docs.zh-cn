<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4a3ca7cdea7a8179f3cad217bcd84e9c7f3aad2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="892da-101">提供窗口句柄和窗口过程的低级封装。</span>
      <span class="sxs-lookup">
        <span data-stu-id="892da-101">Provides a low-level encapsulation of a window handle and a window procedure.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-102">此类自动管理窗口类创建和注册。</span><span class="sxs-lookup"><span data-stu-id="892da-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="892da-103">窗口句柄与相关联时，窗口未进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="892da-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="892da-104">若要确保正确执行垃圾回收，句柄必须要么销毁手动使用<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>或释放使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。</span><span class="sxs-lookup"><span data-stu-id="892da-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="892da-105"><xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>处理 WM_NCDESTROY 消息时调用方法。</span><span class="sxs-lookup"><span data-stu-id="892da-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="892da-106">这意味着某些情况下，当在不需要手动调用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>，但很好的做法，若要这样做。</span><span class="sxs-lookup"><span data-stu-id="892da-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="892da-107"><xref:System.Windows.Forms.NativeWindow>类提供下列属性和方法来管理句柄： <xref:System.Windows.Forms.NativeWindow.Handle%2A>， <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>， <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>， <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>，和<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。</span><span class="sxs-lookup"><span data-stu-id="892da-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="892da-108">下面的代码示例演示在窗口过程，和具有特定操作系统窗口类名称创建的窗口中的截获操作系统窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="892da-109">该示例创建两个继承的类<xref:System.Windows.Forms.NativeWindow>，实现此目的。</span><span class="sxs-lookup"><span data-stu-id="892da-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="892da-110">`MyNativeWindowListener`类挂钩到传递到构造函数中，窗体的窗口过程，并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来截获`WM_ACTIVATEAPP`窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="892da-111">类演示如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>和<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法来标识的窗口句柄<xref:System.Windows.Forms.NativeWindow>将使用。</span><span class="sxs-lookup"><span data-stu-id="892da-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="892da-112">句柄是否分配基于<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="892da-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="892da-113">当`WM_ACTIVATEAPP`收到窗口消息时，类调用`form1.ApplicationActivated`方法。</span><span class="sxs-lookup"><span data-stu-id="892da-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="892da-114">`MyNativeWindow`类创建一个具有新窗口<xref:System.Windows.Forms.CreateParams.ClassName%2A>设置为`BUTTON`。</span><span class="sxs-lookup"><span data-stu-id="892da-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="892da-115">类演示如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法和重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来接收的截距窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="892da-116">直接调用方调用非托管的代码。</span>
      <span class="sxs-lookup">
        <span data-stu-id="892da-116">for the immediate caller to call unmanaged code.</span>
      </span>
      <span data-ttu-id="892da-117">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="892da-117">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      </span>
    </permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="892da-118">初始化 <see cref="T:System.Windows.Forms.NativeWindow" /> 类的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-118">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-119">这是默认<xref:System.Windows.Forms.NativeWindow.%23ctor%2A>由编译器提供的构造函数。</span><span class="sxs-lookup"><span data-stu-id="892da-119">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="892da-120"><xref:System.Windows.Forms.NativeWindow>类还具有静态构造函数初始化应用程序的全域性消息处理程序和哈希表。</span><span class="sxs-lookup"><span data-stu-id="892da-120">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="892da-121">分配给此窗口的句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-121">The handle to assign to this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="892da-122">将句柄分配给此窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-122">Assigns a handle to this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> 截获发送到的窗口消息`handle`参数。</span><span class="sxs-lookup"><span data-stu-id="892da-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="892da-124">使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>重置为默认窗口过程的句柄的窗口过程。</span><span class="sxs-lookup"><span data-stu-id="892da-124">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="892da-125"><xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>方法调用<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法，则指示的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性已更改。</span><span class="sxs-lookup"><span data-stu-id="892da-125">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="892da-126">要分配的句柄不能在不同的应用程序进程。</span><span class="sxs-lookup"><span data-stu-id="892da-126">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="892da-127">下面的代码示例演示在窗口过程的截获操作系统窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-127">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="892da-128">该示例创建一个继承自的类<xref:System.Windows.Forms.NativeWindow>来实现此目的。</span><span class="sxs-lookup"><span data-stu-id="892da-128">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="892da-129">`MyNativeWindowListener`类挂钩到传递到构造函数中，窗体的窗口过程，并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来截获`WM_ACTIVATEAPP`窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-129">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="892da-130">类演示如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>和<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法来标识的窗口处理<xref:System.Windows.Forms.NativeWindow>将使用。</span><span class="sxs-lookup"><span data-stu-id="892da-130">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="892da-131">句柄被分配基于<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="892da-131">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="892da-132">当`WM_ACTIVATEAPP`收到窗口消息时，类调用`form1.ApplicationActivated`方法。</span><span class="sxs-lookup"><span data-stu-id="892da-132">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="892da-133">此代码摘自中所示的示例<xref:System.Windows.Forms.NativeWindow>类概述。</span><span class="sxs-lookup"><span data-stu-id="892da-133">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="892da-134">为了简洁起见，不显示某些代码。</span><span class="sxs-lookup"><span data-stu-id="892da-134">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="892da-135">请参阅<xref:System.Windows.Forms.NativeWindow>为完整的代码清单。</span><span class="sxs-lookup"><span data-stu-id="892da-135">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="892da-136">此窗口已经具有一个句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-136">This window already has a handle.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="892da-137">未能检索关联的本机窗口的窗口过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-137">The windows procedure for the associated native window could not be retrieved.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">
          <span data-ttu-id="892da-138">
            <see cref="T:System.Windows.Forms.CreateParams" />，指定当前窗口的创建参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-138">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="892da-139">使用指定的创建参数创建一个窗口及其句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-139">Creates a window and its handle with the specified creation parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-140">`cp`参数指定的值传递给本机 Win32`CreateWindowEx`方法来创建一个窗口，其句柄。</span><span class="sxs-lookup"><span data-stu-id="892da-140">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="892da-141">当<xref:System.Windows.Forms.CreateParams.ClassName%2A>字段不是`null`，继承自指定类的新创建的窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="892da-141">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="892da-142">例如，如果<xref:System.Windows.Forms.CreateParams.ClassName%2A>设置为`BUTTON`，新创建的窗口基于 Win32`BUTTON`窗口类。</span><span class="sxs-lookup"><span data-stu-id="892da-142">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="892da-143"><xref:System.Windows.Forms.CreateParams.Param%2A>属性<xref:System.Windows.Forms.CreateParams.ClassName%2A>对象必须是`null`或引用已声明为结构类的实例。</span><span class="sxs-lookup"><span data-stu-id="892da-143">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="892da-144">此代码摘自中所示的示例<xref:System.Windows.Forms.NativeWindow>类概述。</span><span class="sxs-lookup"><span data-stu-id="892da-144">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="892da-145">为了简洁起见，不显示某些代码。</span><span class="sxs-lookup"><span data-stu-id="892da-145">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="892da-146">请参阅<xref:System.Windows.Forms.NativeWindow>为完整的代码清单。</span><span class="sxs-lookup"><span data-stu-id="892da-146">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="892da-147">提供的类名称已注册到操作系统。</span><span class="sxs-lookup"><span data-stu-id="892da-147">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="892da-148">下面的代码示例演示如何创建一个窗口具有特定操作系统窗口类名称。</span><span class="sxs-lookup"><span data-stu-id="892da-148">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="892da-149">该示例创建一个继承自的类<xref:System.Windows.Forms.NativeWindow>来实现此目的。</span><span class="sxs-lookup"><span data-stu-id="892da-149">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="892da-150">`MyNativeWindow`类创建一个具有新窗口<xref:System.Windows.Forms.CreateParams.ClassName%2A>设置为`BUTTON`。</span><span class="sxs-lookup"><span data-stu-id="892da-150">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="892da-151">这将创建一个 Win32 按钮窗口。</span><span class="sxs-lookup"><span data-stu-id="892da-151">This creates a Win32 button window.</span></span> <span data-ttu-id="892da-152">位置和大小的按钮设置，以及指定其他的窗口样式。</span><span class="sxs-lookup"><span data-stu-id="892da-152">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="892da-153">类演示如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来接收的截距窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-153">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="892da-154">尽管该示例将查找 WM_ACTIVATEAPP 消息，这可以替换为在一个真正的程序中特定于创建的类型的窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-154">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="892da-155">某些控件类型将其窗口消息发送到而不是窗口的窗口父级。</span><span class="sxs-lookup"><span data-stu-id="892da-155">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="892da-156">请参阅 Windows 平台 SDK 的详细信息。</span><span class="sxs-lookup"><span data-stu-id="892da-156">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="892da-157">尝试创建本机窗口时操作系统资源不足。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-157">The operating system ran out of resources when trying to create the native window.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="892da-158">本机 Win32 API 未能创建指定窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-158">The native Win32 API could not create the specified window.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="892da-159">当前本机窗口的句柄已赋值；即 <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> 属性不等于 <see cref="F:System.IntPtr.Zero" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-159">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="892da-160">若要创建顶级窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-160">to create a top-level window.</span>
          </span>
          <span data-ttu-id="892da-161">如果窗口样式不是子节点或窗口不具有父级时才需要此权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-161">This permission is only demanded if the window style is not a child or if the window does not have a parent.</span>
          </span>
          <span data-ttu-id="892da-162">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-162">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="892da-163">当前所处理的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-163">The message that is currently being processed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="892da-164">调用与此窗口关联的默认窗口过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-164">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-165">通常，你仅可以调用<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>方法时您截获窗口消息，并且想要处理消息的默认窗口过程。</span><span class="sxs-lookup"><span data-stu-id="892da-165">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="892da-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 不应调用以将窗口消息发送到窗口中;调用 Win32`SendMessage`函数。</span><span class="sxs-lookup"><span data-stu-id="892da-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="892da-167">它是错误调用<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>时<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性为 0。</span><span class="sxs-lookup"><span data-stu-id="892da-167">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="892da-168">重写此方法在派生类实现通用自定义消息处理特定的本机窗口或.NET Windows 窗体<see cref="T:System.Windows.Forms.Control" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="892da-168">Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />.</span>
            </span>
            <span data-ttu-id="892da-169">之前、 之后还是而不是调用此方法，用于执行标准的消息处理的基类实现，可以执行自定义处理。</span>
            <span class="sxs-lookup">
              <span data-stu-id="892da-169">Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.</span>
            </span>
            <span data-ttu-id="892da-170">与此相反，添加将自定义消息处理中的应用程序可以通过实现<see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />方法<see cref="T:System.Windows.Forms.Application" />类。</span>
            <span class="sxs-lookup">
              <span data-stu-id="892da-170">In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="892da-171">销毁此窗口及其句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-171">Destroys the window and its handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-172">此方法销毁与关联的窗口<xref:System.Windows.Forms.NativeWindow.Handle%2A>，设置<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性为 0，并调用<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法，以反映更改。</span><span class="sxs-lookup"><span data-stu-id="892da-172">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="892da-173">通常，你仅可以调用<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>完成后使用本机窗口。</span><span class="sxs-lookup"><span data-stu-id="892da-173">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="892da-174"><xref:System.Windows.Forms.NativeWindow>类自动将销毁关联的窗口并释放其资源以响应 WM_DESTROY 消息。</span><span class="sxs-lookup"><span data-stu-id="892da-174">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="892da-175">释放与此窗口相关联的资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-175">Releases the resources associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-176"><xref:System.Windows.Forms.NativeWindow.Finalize%2A>方法移除当前与关联的 Win32 派生类<xref:System.Windows.Forms.NativeWindow>实例，释放该句柄，并将 WM_CLOSE 消息发送到关联的窗口。</span><span class="sxs-lookup"><span data-stu-id="892da-176">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="892da-177">窗口的句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-177">A handle to a window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="892da-178">检索与指定句柄相关联的窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-178">Retrieves the window associated with the specified handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="892da-179">与指定句柄相关联的 <see cref="T:System.Windows.Forms.NativeWindow" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-179">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span>
          </span>
          <span data-ttu-id="892da-180">当句柄没有关联窗口时，此方法将返回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-180">This method returns <see langword="null" /> when the handle does not have an associated window.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-181">如果您收到来自另一种方法的句柄，则使用此方法来检索与句柄关联的窗口。</span><span class="sxs-lookup"><span data-stu-id="892da-181">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="892da-182">句柄必须已拥有的另一个<xref:System.Windows.Forms.NativeWindow>在当前进程; 否则为`null`返回。</span><span class="sxs-lookup"><span data-stu-id="892da-182">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="892da-183">获取此窗口的句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-183">Gets the handle for this window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="892da-184">如果成功，则为一个 <see cref="T:System.IntPtr" />（表示关联的本机 Win32 窗口的句柄）；否则为 0（如果窗口没有任何关联句柄）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-184">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-185">在调用需要窗口或控件的句柄的 Windows API 方法时，请使用此方法。</span><span class="sxs-lookup"><span data-stu-id="892da-185">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="892da-186">下面的代码示例演示如何创建一个窗口具有特定操作系统窗口类名称。</span><span class="sxs-lookup"><span data-stu-id="892da-186">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="892da-187">该示例创建一个继承自的类<xref:System.Windows.Forms.NativeWindow>来实现此目的。</span><span class="sxs-lookup"><span data-stu-id="892da-187">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="892da-188">该示例还演示如何重写<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法时获得通知<xref:System.Windows.Forms.NativeWindow.Handle%2A>更改。</span><span class="sxs-lookup"><span data-stu-id="892da-188">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="892da-189">`MyNativeWindow`类创建一个具有新窗口<xref:System.Windows.Forms.CreateParams.ClassName%2A>设置为按钮。</span><span class="sxs-lookup"><span data-stu-id="892da-189">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="892da-190">这将创建一个 Win32 按钮窗口。</span><span class="sxs-lookup"><span data-stu-id="892da-190">This creates a Win32 button window.</span></span> <span data-ttu-id="892da-191">位置和大小的按钮设置，以及指定其他的窗口样式。</span><span class="sxs-lookup"><span data-stu-id="892da-191">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="892da-192">类演示如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来接收的截距窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-192">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="892da-193">尽管该示例将查找 WM_ACTIVATEAPP 消息，这无法替换为在一个真正的程序中特定于创建的类型的窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-193">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="892da-194">某些控件类型将其窗口消息发送到而不是窗口的窗口父级。</span><span class="sxs-lookup"><span data-stu-id="892da-194">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="892da-195">请参阅 Windows 平台 SDK 的详细信息。</span><span class="sxs-lookup"><span data-stu-id="892da-195">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="892da-196">指定当更改窗口句柄时所调用的通知方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-196">Specifies a notification method that is called when the handle for a window is changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-197">调用此方法时的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性已更改。</span><span class="sxs-lookup"><span data-stu-id="892da-197">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="892da-198">下面的代码示例演示如何创建一个窗口具有特定操作系统窗口类名称。</span><span class="sxs-lookup"><span data-stu-id="892da-198">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="892da-199">该示例创建一个继承自的类<xref:System.Windows.Forms.NativeWindow>来实现此目的。</span><span class="sxs-lookup"><span data-stu-id="892da-199">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="892da-200">该示例还演示如何重写<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法时获得通知<xref:System.Windows.Forms.NativeWindow.Handle%2A>更改。</span><span class="sxs-lookup"><span data-stu-id="892da-200">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="892da-201">`MyNativeWindow`类创建一个具有新窗口<xref:System.Windows.Forms.CreateParams.ClassName%2A>设置为`BUTTON`。</span><span class="sxs-lookup"><span data-stu-id="892da-201">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="892da-202">这将创建一个 Win32 按钮窗口。</span><span class="sxs-lookup"><span data-stu-id="892da-202">This creates a Win32 button window.</span></span> <span data-ttu-id="892da-203">位置和大小的按钮设置，以及指定其他的窗口样式。</span><span class="sxs-lookup"><span data-stu-id="892da-203">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="892da-204">类演示如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来接收的截距窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-204">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="892da-205">尽管该示例将查找 WM_ACTIVATEAPP 消息，这可以替换为在一个真正的程序中特定于创建的类型的窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-205">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="892da-206">此代码摘自中所示的示例<xref:System.Windows.Forms.NativeWindow>类概述。</span><span class="sxs-lookup"><span data-stu-id="892da-206">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="892da-207">为了简洁起见，不显示某些代码。</span><span class="sxs-lookup"><span data-stu-id="892da-207">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="892da-208">请参阅<xref:System.Windows.Forms.NativeWindow>为完整的代码清单。</span><span class="sxs-lookup"><span data-stu-id="892da-208">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="892da-209">某些控件类型将其窗口消息发送到而不是窗口的窗口父级。</span><span class="sxs-lookup"><span data-stu-id="892da-209">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="892da-210">请参阅 Windows 平台 SDK 的详细信息。</span><span class="sxs-lookup"><span data-stu-id="892da-210">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="892da-211">重写此方法来跟踪的窗口句柄对所做的更改。</span>
            <span class="sxs-lookup">
              <span data-stu-id="892da-211">Override this method to track changes that are made to the window handle.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="892da-212">
            <see cref="T:System.Exception" />，指定未处理的线程异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-212">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="892da-213">当在派生类中被重写时，管理未处理的线程异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-213">When overridden in a derived class, manages an unhandled thread exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-214">通常情况下，<xref:System.Windows.Forms.Application.OnThreadException%2A>处理线程异常。</span><span class="sxs-lookup"><span data-stu-id="892da-214">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="892da-215">释放与此窗口相关联的句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-215">Releases the handle associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-216">此方法不会销毁的窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="892da-216">This method does not destroy the window handle.</span></span> <span data-ttu-id="892da-217">相反，它将句柄的窗口过程设置为默认窗口过程。</span><span class="sxs-lookup"><span data-stu-id="892da-217">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="892da-218">它将设置<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性为 0，并调用<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>以反映更改。</span><span class="sxs-lookup"><span data-stu-id="892da-218">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="892da-219">如果它收到指示 Windows 已销毁句柄的本机 Win32 WM_NCDESTROY 消息，窗口将自动调用此方法。</span><span class="sxs-lookup"><span data-stu-id="892da-219">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="892da-220">下面的代码示例演示在窗口过程的截获操作系统窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-220">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="892da-221">该示例创建一个继承自的类<xref:System.Windows.Forms.NativeWindow>来实现此目的。</span><span class="sxs-lookup"><span data-stu-id="892da-221">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="892da-222">`MyNativeWindowListener`类挂钩到传递到构造函数中，窗体的窗口过程，并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来截获`WM_ACTIVATEAPP`窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-222">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="892da-223">类演示如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>和<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法来标识的窗口句柄<xref:System.Windows.Forms.NativeWindow>将使用。</span><span class="sxs-lookup"><span data-stu-id="892da-223">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="892da-224">句柄是否分配基于<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="892da-224">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="892da-225">当`WM_ACTIVATEAPP`收到窗口消息时，类调用`form1.ApplicationActivated`方法。</span><span class="sxs-lookup"><span data-stu-id="892da-225">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="892da-226">此代码摘自中所示的示例<xref:System.Windows.Forms.NativeWindow>类概述。</span><span class="sxs-lookup"><span data-stu-id="892da-226">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="892da-227">为了简洁起见，不显示某些代码。</span><span class="sxs-lookup"><span data-stu-id="892da-227">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="892da-228">请参阅<xref:System.Windows.Forms.NativeWindow>为完整的代码清单。</span><span class="sxs-lookup"><span data-stu-id="892da-228">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="892da-229">与当前 Windows 消息相关联的 <see cref="T:System.Windows.Forms.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-229">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="892da-230">调用与此窗口关联的默认窗口过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="892da-230">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="892da-231">窗口消息发送到窗口的句柄时，调用此方法。</span><span class="sxs-lookup"><span data-stu-id="892da-231">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="892da-232">下面的代码示例演示在窗口过程的截获操作系统窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-232">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="892da-233">该示例创建一个继承自的类<xref:System.Windows.Forms.NativeWindow>来实现此目的。</span><span class="sxs-lookup"><span data-stu-id="892da-233">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="892da-234">`MyNativeWindowListener`类挂钩到传递到构造函数中，窗体的窗口过程，并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来截获`WM_ACTIVATEAPP`窗口消息。</span><span class="sxs-lookup"><span data-stu-id="892da-234">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="892da-235">类演示如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>和<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法来标识的窗口句柄<xref:System.Windows.Forms.NativeWindow>将使用。</span><span class="sxs-lookup"><span data-stu-id="892da-235">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="892da-236">句柄被分配基于<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="892da-236">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="892da-237">当`WM_ACTIVATEAPP`收到窗口消息时，类调用`form1.ApplicationActivated`方法。</span><span class="sxs-lookup"><span data-stu-id="892da-237">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="892da-238">此代码摘自中所示的示例<xref:System.Windows.Forms.NativeWindow>类概述。</span><span class="sxs-lookup"><span data-stu-id="892da-238">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="892da-239">为了简洁起见，不显示某些代码。</span><span class="sxs-lookup"><span data-stu-id="892da-239">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="892da-240">请参阅<xref:System.Windows.Forms.NativeWindow>为完整的代码清单。</span><span class="sxs-lookup"><span data-stu-id="892da-240">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="892da-241">重写此方法以实现特定的消息处理。</span>
            <span class="sxs-lookup">
              <span data-stu-id="892da-241">Override this method to implement specific message processing.</span>
            </span>
            <span data-ttu-id="892da-242">调用<c>基。WndProc</c>的未经处理的消息。</span>
            <span class="sxs-lookup">
              <span data-stu-id="892da-242">Call <c>base.WndProc</c> for unhandled messages.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>