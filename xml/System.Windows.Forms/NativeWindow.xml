<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f08773771fb4a10a7de82ed774e9bbcb32dbf4e" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39979282" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供窗口句柄和窗口过程的低级封装。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类自动管理窗口类创建和注册。  
  
 与窗口句柄相关联时，窗口未进行垃圾回收。 若要确保正确执行垃圾回收，句柄必须要么销毁使用手动<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>或释放使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> WM_NCDESTROY 消息处理时调用方法。 这意味着，某些情况下，在此操作时不需要手动调用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>，但它是很好的做法执行此操作。  
  
 <xref:System.Windows.Forms.NativeWindow>类提供了下列属性和方法，用于管理句柄： <xref:System.Windows.Forms.NativeWindow.Handle%2A>， <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>， <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>， <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>，并<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。  
  
   
  
## Examples  
 下面的代码示例演示在窗口过程，并具有特定操作系统窗口类名称创建一个窗口截获操作系统窗口消息。 该示例创建两个继承的类<xref:System.Windows.Forms.NativeWindow>，实现此目的。  
  
 `MyNativeWindowListener`类传递到构造函数，该窗体的窗口过程挂钩，并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法以截获`WM_ACTIVATEAPP`窗口消息。 类演示的使用情况<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>并<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法来标识的窗口句柄<xref:System.Windows.Forms.NativeWindow>将使用。 该句柄已分配基于<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。 当`WM_ACTIVATEAPP`接收窗口消息，则类调用`form1.ApplicationActivated`方法。  
  
 `MyNativeWindow`类创建一个具有新窗口<xref:System.Windows.Forms.CreateParams.ClassName%2A>设置为`BUTTON`。 类演示了如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法和重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来接收的截距窗口消息。  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">直接调用方调用非托管的代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.NativeWindow" /> 类的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是默认的<xref:System.Windows.Forms.NativeWindow.%23ctor%2A>由编译器提供的构造函数。 <xref:System.Windows.Forms.NativeWindow>类还具有静态构造函数初始化应用程序的全域性消息处理程序和哈希表。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">分配给此窗口的句柄。</param>
        <summary>将句柄分配给此窗口。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 截获窗口消息发送到`handle`参数。 使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>重置为默认窗口过程的句柄的窗口过程。  
  
 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>方法调用<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法，以指明的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性已更改。  
  
> [!NOTE]
>  要分配的句柄不能在不同的应用程序的进程中。  
  
   
  
## Examples  
 下面的代码示例演示在窗口过程中的截获操作系统窗口消息。 该示例创建一个类继承自<xref:System.Windows.Forms.NativeWindow>来实现此目的。  
  
 `MyNativeWindowListener`类传递到构造函数，该窗体的窗口过程挂钩，并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来截获`WM_ACTIVATEAPP`窗口消息。 类演示如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>并<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法来标识在哪个窗口处理<xref:System.Windows.Forms.NativeWindow>将使用。 根据分配句柄<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。 当`WM_ACTIVATEAPP`接收窗口消息，则类调用`form1.ApplicationActivated`方法。  
  
 此代码是一段摘录所示示例<xref:System.Windows.Forms.NativeWindow>类概述。 为了简洁起见，不显示一些代码。 请参阅<xref:System.Windows.Forms.NativeWindow>有关整个代码列表。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">此窗口已经具有一个句柄。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">未能检索关联的本机窗口的窗口过程。</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">
          <see cref="T:System.Windows.Forms.CreateParams" />，指定当前窗口的创建参数。</param>
        <summary>使用指定的创建参数创建一个窗口及其句柄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cp`参数指定的值传递给本机 Win32`CreateWindowEx`方法来创建一个窗口，其句柄。  
  
 当<xref:System.Windows.Forms.CreateParams.ClassName%2A>字段不是`null`，从指定的类继承的新创建的窗口句柄。 例如，如果<xref:System.Windows.Forms.CreateParams.ClassName%2A>设置为`BUTTON`，新创建的窗口基于 Win32`BUTTON`窗口类。 <xref:System.Windows.Forms.CreateParams.Param%2A>的属性<xref:System.Windows.Forms.CreateParams.ClassName%2A>对象必须是`null`或引用声明为结构类的实例。  
  
 此代码是一段摘录所示示例<xref:System.Windows.Forms.NativeWindow>类概述。 为了简洁起见，不显示一些代码。 请参阅<xref:System.Windows.Forms.NativeWindow>有关整个代码列表。  
  
> [!NOTE]
>  提供的类名称已注册到操作系统。  
  
   
  
## Examples  
 下面的代码示例演示如何使用特定操作系统窗口类名称创建一个窗口。 该示例创建一个类继承自<xref:System.Windows.Forms.NativeWindow>来实现此目的。  
  
 `MyNativeWindow`类创建一个具有新窗口<xref:System.Windows.Forms.CreateParams.ClassName%2A>设置为`BUTTON`。 这将创建一个 Win32 按钮窗口。 位置和大小的按钮的设置，以及指定其他窗口样式。 类演示如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，并替代<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来接收的截距窗口消息。 尽管该示例将查找 WM_ACTIVATEAPP 消息，这可以替换为实际程序中特定于创建的类型的窗口消息。  
  
> [!NOTE]
>  某些控件类型将其窗口消息发送到而不是窗口的窗口父级。 请参阅 Windows Platform SDK 的详细信息。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">尝试创建本机窗口时操作系统资源不足。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">本机 Win32 API 未能创建指定窗口。</exception>
        <exception cref="T:System.InvalidOperationException">当前本机窗口的句柄已赋值；即 <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> 属性不等于 <see cref="F:System.IntPtr.Zero" />。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">若要创建一个顶级窗口。 如果窗口样式不是子级或窗口不具有父级时才需要此权限。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">当前所处理的消息。</param>
        <summary>调用与此窗口关联的默认窗口过程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，只能调用<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>方法时您截获窗口消息，并且想要以处理消息的默认窗口过程。 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 不应调用将窗口消息发送到窗口;调用 Win32`SendMessage`函数。  
  
 它是调用错误<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>时<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性为 0。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写此方法在派生类来实现通用的自定义消息处理特定的本机窗口或.NET Windows 窗体中<see cref="T:System.Windows.Forms.Control" />。之前、 之后还是而不是调用此方法，后者将执行标准的消息处理的基类实现，可以执行自定义处理。与此相反，添加将自定义消息处理的应用程序可通过以下方式<see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />方法的<see cref="T:System.Windows.Forms.Application" />类。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>销毁此窗口及其句柄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法会破坏与关联的窗口<xref:System.Windows.Forms.NativeWindow.Handle%2A>，设置<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性设置为 0，并调用<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法，以反映更改。 通常情况下，只能调用<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>完成后使用本机窗口。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow>类会自动将销毁关联的窗口并释放其资源以响应 WM_DESTROY 消息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放与此窗口相关联的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.Finalize%2A>方法移除当前与关联的 Win32 派生类<xref:System.Windows.Forms.NativeWindow>实例，释放句柄，并将 WM_CLOSE 消息发送到关联的窗口。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">窗口的句柄。</param>
        <summary>检索与指定句柄相关联的窗口。</summary>
        <returns>与指定句柄相关联的 <see cref="T:System.Windows.Forms.NativeWindow" />。 当句柄没有关联窗口时，此方法将返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您收到来自另一种方法的句柄，则使用此方法来检索与该句柄关联的窗口。 必须已由另一个拥有句柄<xref:System.Windows.Forms.NativeWindow>在当前进程; 否则为`null`返回。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此窗口的句柄。</summary>
        <value>如果成功，则为一个 <see cref="T:System.IntPtr" />（表示关联的本机 Win32 窗口的句柄）；否则为 0（如果窗口没有任何关联句柄）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用 Windows API 要求使用句柄的窗口或控件的方法时，请使用此方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用特定操作系统窗口类名称创建一个窗口。 该示例创建一个类继承自<xref:System.Windows.Forms.NativeWindow>来实现此目的。 该示例还演示如何重写<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法时通知<xref:System.Windows.Forms.NativeWindow.Handle%2A>更改。  
  
 `MyNativeWindow`类创建一个具有新窗口<xref:System.Windows.Forms.CreateParams.ClassName%2A>将设置为按钮。 这将创建一个 Win32 按钮窗口。 位置和大小的按钮的设置，以及指定其他窗口样式。 类演示如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，并替代<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来接收的截距窗口消息。 尽管该示例将查找 WM_ACTIVATEAPP 消息，这可替换为实际程序中特定于创建的类型的窗口消息。  
  
> [!NOTE]
>  某些控件类型将其窗口消息发送到而不是窗口的窗口父级。 请参阅 Windows Platform SDK 的详细信息。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定当更改窗口句柄时所调用的通知方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法时的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性已更改。  
  
   
  
## Examples  
 下面的代码示例演示如何使用特定操作系统窗口类名称创建一个窗口。 该示例创建一个类继承自<xref:System.Windows.Forms.NativeWindow>来实现此目的。 该示例还演示如何重写<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法时通知<xref:System.Windows.Forms.NativeWindow.Handle%2A>更改。  
  
 `MyNativeWindow`类创建一个具有新窗口<xref:System.Windows.Forms.CreateParams.ClassName%2A>设置为`BUTTON`。 这将创建一个 Win32 按钮窗口。 位置和大小的按钮的设置，以及指定其他窗口样式。 类演示如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，并替代<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来接收的截距窗口消息。 尽管该示例将查找 WM_ACTIVATEAPP 消息，这可以替换为实际程序中特定于创建的类型的窗口消息。  
  
 此代码是一段摘录所示示例<xref:System.Windows.Forms.NativeWindow>类概述。 为了简洁起见，不显示一些代码。 请参阅<xref:System.Windows.Forms.NativeWindow>有关整个代码列表。  
  
> [!NOTE]
>  某些控件类型将其窗口消息发送到而不是窗口的窗口父级。 请参阅 Windows Platform SDK 的详细信息。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写此方法来跟踪到的窗口句柄所做的更改。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Exception" />，指定未处理的线程异常。</param>
        <summary>当在派生类中被重写时，管理未处理的线程异常。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，<xref:System.Windows.Forms.Application.OnThreadException%2A>处理线程异常。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放与此窗口相关联的句柄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会销毁窗口句柄。 相反，它将该句柄的窗口过程设置为默认窗口过程。 它会设置<xref:System.Windows.Forms.NativeWindow.Handle%2A>属性设置为 0，并调用<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>以反映更改。  
  
 如果收到指示 Windows 已销毁该句柄的本机 Win32 WM_NCDESTROY 消息，窗口会自动调用此方法。  
  
   
  
## Examples  
 下面的代码示例演示在窗口过程中的截获操作系统窗口消息。 该示例创建一个类继承自<xref:System.Windows.Forms.NativeWindow>来实现此目的。  
  
 `MyNativeWindowListener`类传递到构造函数，该窗体的窗口过程挂钩，并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法来截获`WM_ACTIVATEAPP`窗口消息。 类演示如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>并<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法来标识的窗口句柄<xref:System.Windows.Forms.NativeWindow>将使用。 该句柄已分配基于<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。 当`WM_ACTIVATEAPP`接收窗口消息，则类调用`form1.ApplicationActivated`方法。  
  
 此代码是一段摘录所示示例<xref:System.Windows.Forms.NativeWindow>类概述。 为了简洁起见，不显示一些代码。 请参阅<xref:System.Windows.Forms.NativeWindow>有关整个代码列表。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">与当前 Windows 消息相关联的 <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>调用与此窗口关联的默认窗口过程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 窗口消息发送到窗口的句柄时，调用此方法。  
  
   
  
## Examples  
 下面的代码示例演示在窗口过程中的截获操作系统窗口消息。 该示例创建一个类继承自<xref:System.Windows.Forms.NativeWindow>来实现此目的。  
  
 `MyNativeWindowListener`类传递到构造函数，该窗体的窗口过程挂钩，并重写<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法以截获`WM_ACTIVATEAPP`窗口消息。 类演示如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>并<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法来标识的窗口句柄<xref:System.Windows.Forms.NativeWindow>将使用。 根据分配句柄<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。 当`WM_ACTIVATEAPP`接收窗口消息，则类调用`form1.ApplicationActivated`方法。  
  
 此代码是一段摘录所示示例<xref:System.Windows.Forms.NativeWindow>类概述。 为了简洁起见，不显示一些代码。 请参阅<xref:System.Windows.Forms.NativeWindow>有关整个代码列表。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写此方法以实现特定的消息处理。调用<c>基。WndProc</c>的未处理的消息。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>