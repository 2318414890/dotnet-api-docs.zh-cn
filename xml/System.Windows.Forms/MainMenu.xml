<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f5f81c79d8f7f83115c235c09520ef2bef521600" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56390021" /></Metadata><TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MainMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class MainMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MainMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type MainMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示窗体的菜单结构。 尽管 <see cref="T:System.Windows.Forms.MenuStrip" /> 替换了早期版本的 <see cref="T:System.Windows.Forms.MainMenu" /> 控件并添加了功能；但是也可选择保留 <see cref="T:System.Windows.Forms.MainMenu" /> 以备向后兼容和将来使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MainMenu>控件表示窗体菜单结构的容器。 组成一个菜单<xref:System.Windows.Forms.MenuItem>代表菜单结构中的各个菜单命令的对象。 每个<xref:System.Windows.Forms.MenuItem>可以是你的应用程序的命令或其他子菜单项将父菜单。 若要将绑定<xref:System.Windows.Forms.MainMenu>到<xref:System.Windows.Forms.Form>，将显示它，将分配<xref:System.Windows.Forms.MainMenu>到<xref:System.Windows.Forms.Form.Menu%2A>属性<xref:System.Windows.Forms.Form>。  
  
 对于必须支持多种语言的应用程序，可以使用<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>属性来显示菜单从右到左，以支持阿拉伯语等语言的文本。  
  
 您可以创建不同<xref:System.Windows.Forms.MainMenu>对象来表示不同的菜单结构的窗体。 如果你想要重复使用包含在特定的菜单结构<xref:System.Windows.Forms.MainMenu>，可以使用其<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法来创建副本。 菜单结构的副本后，你可以为新菜单结构进行适当的修改。  
  
> [!NOTE]
>  剪切和粘贴的菜单项从一个窗体设计器中的另一个可能无法按预期将粘贴到窗体是否定义没有任何菜单项。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.MainMenu>，将分配两个<xref:System.Windows.Forms.MenuItem>对象添加到<xref:System.Windows.Forms.MainMenu>并将其绑定到窗体。 此示例要求具有<xref:System.Windows.Forms.Form>创建名为`Form1`。  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
    <altmember cref="P:System.Windows.Forms.Form.Menu" />
    <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
    <altmember cref="T:System.Windows.Forms.MenuStrip" />
    <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
    <related type="Article" href="https://msdn.microsoft.com/library/e361bf98-eed8-4ed3-9dfb-5a2e865e3ce6">MenuStrip 控件（Windows 窗体）</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.MainMenu" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化没有任何指定菜单项的 <see cref="T:System.Windows.Forms.MainMenu" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此版本的构造函数创建<xref:System.Windows.Forms.MainMenu>而不指定任何<xref:System.Windows.Forms.MenuItem>对象。 若要添加到控件的菜单项使用此构造函数接受一个数组的另一个版本<xref:System.Windows.Forms.MenuItem>对象作为其参数或使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法的<xref:System.Windows.Forms.Menu.MenuItems%2A>属性。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.MainMenu>，将分配两个<xref:System.Windows.Forms.MenuItem>对象添加到<xref:System.Windows.Forms.MainMenu>并将其绑定到窗体。 此示例要求具有<xref:System.Windows.Forms.Form>创建名为`Form1`。  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="P:System.Windows.Forms.Form.Menu" />
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.ComponentModel.IContainer -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">一个 <see cref="T:System.ComponentModel.IContainer" />，它表示 <see cref="T:System.Windows.Forms.MainMenu" /> 的容器。</param>
        <summary>使用指定的容器初始化 <see cref="T:System.Windows.Forms.MainMenu" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">将添加到 <see cref="T:System.Windows.Forms.MenuItem" /> 的一组 <see cref="T:System.Windows.Forms.MainMenu" /> 对象。</param>
        <summary>使用一组指定的 <see cref="T:System.Windows.Forms.MainMenu" /> 对象初始化 <see cref="T:System.Windows.Forms.MenuItem" /> 的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此构造函数分配的数组<xref:System.Windows.Forms.MenuItem>对象添加到<xref:System.Windows.Forms.MainMenu>时创建。 之后<xref:System.Windows.Forms.MainMenu>已创建可以添加其他<xref:System.Windows.Forms.MenuItem>对象添加到<xref:System.Windows.Forms.MainMenu>使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法<xref:System.Windows.Forms.Menu.MenuItems%2A>属性。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.MainMenu>，并将分配两个<xref:System.Windows.Forms.MenuItem>对象添加到<xref:System.Windows.Forms.MainMenu>使用此版本的构造函数。 该示例然后绑定<xref:System.Windows.Forms.MainMenu>到<xref:System.Windows.Forms.Form>。 此示例要求具有<xref:System.Windows.Forms.Form>创建名为`Form1`。  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MainMenu ^ CloneMenu();" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="mainMenu.CloneMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个新 <see cref="T:System.Windows.Forms.MainMenu" />，它是当前 <see cref="T:System.Windows.Forms.MainMenu" /> 的副本。</summary>
        <returns>表示克隆菜单的 <see cref="T:System.Windows.Forms.MainMenu" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此方法创建一份存储中的菜单结构<xref:System.Windows.Forms.MainMenu>。 可以使用此方法以重用存储中的菜单结构<xref:System.Windows.Forms.MainMenu>作为一个新的基础<xref:System.Windows.Forms.MainMenu>。 例如，如果你想要创建的菜单结构具有相同的菜单项与现有<xref:System.Windows.Forms.MainMenu>但也有其他<xref:System.Windows.Forms.MenuItem>对象添加到它，可以使用<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法来创建一份原始<xref:System.Windows.Forms.MainMenu>和然后添加新<xref:System.Windows.Forms.MenuItem>克隆的对象<xref:System.Windows.Forms.MainMenu>。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.MainMenu.GetForm%2A>方法，以确定如果<xref:System.Windows.Forms.MainMenu>当前父级设置为窗体。 如果在示例中调用代码设<xref:System.Windows.Forms.MainMenu.GetForm%2A>不会返回`null`，此代码然后克隆的菜单结构<xref:System.Windows.Forms.MainMenu>使用<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法。 代码随后设置<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>属性设置为 true 的新副本<xref:System.Windows.Forms.MainMenu>若要创建<xref:System.Windows.Forms.MainMenu>可用于支持从右到左的文本的语言。 此示例要求具有<xref:System.Windows.Forms.MainMenu>创建名为`mainMenu1`。  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MainMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当主菜单折叠时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何将此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.MainMenu.Collapse>事件。 此报告可帮助您了解事件发生的并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑更换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或将消息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.MainMenu>名为`MainMenu1`。 然后，确保事件处理程序相关联<xref:System.Windows.Forms.MainMenu.Collapse>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#483](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#483)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#483)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateMenuHandle : unit -&gt; nativeint" Usage="mainMenu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 Menu 的新句柄。</summary>
        <returns>如果该方法成功，则为菜单的句柄；否则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="mainMenu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
        <summary>处置由 <see cref="T:System.Windows.Forms.MainMenu" /> 占用的资源（内存除外）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.Windows.Forms.MainMenu.Dispose%2A> 后，应调用 <xref:System.Windows.Forms.MainMenu>。 
  <xref:System.Windows.Forms.MainMenu.Dispose%2A> 方法使 <xref:System.Windows.Forms.MainMenu> 处于不可用状态。 在调用<xref:System.Windows.Forms.MainMenu.Dispose%2A>，必须释放对所有引用<xref:System.Windows.Forms.MainMenu>以便可以通过垃圾回收回收其占用的内存。  
  
> [!NOTE]
>  每次释放对 <xref:System.Windows.Forms.MainMenu.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Windows.Forms.MainMenu>。 否则为资源<xref:System.Windows.Forms.MainMenu>是使用之前，不会释放垃圾回收调用<xref:System.Windows.Forms.MainMenu>对象的析构函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.GetForm" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ GetForm();" />
      <MemberSignature Language="F#" Value="member this.GetForm : unit -&gt; System.Windows.Forms.Form" Usage="mainMenu.GetForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取包含该控件的 <see cref="T:System.Windows.Forms.Form" />。</summary>
        <returns>一个 <see cref="T:System.Windows.Forms.Form" />，它是该控件的容器。 如果 <see cref="T:System.Windows.Forms.MainMenu" /> 当前没有在窗体上寄宿，则返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可确定是否为特定<xref:System.Windows.Forms.MainMenu>父级设置为窗体。 该属性通常是时使用多个<xref:System.Windows.Forms.MainMenu>在窗体上使用对象，需要确定哪一个当前使用的窗体。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.MainMenu.GetForm%2A>方法，以确定如果<xref:System.Windows.Forms.MainMenu>当前父级设置为窗体。 如果在示例中调用代码设<xref:System.Windows.Forms.MainMenu.GetForm%2A>不会返回`null`，此代码然后克隆的菜单结构<xref:System.Windows.Forms.MainMenu>使用<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法。 代码随后设置<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>属性设置为 true 的新副本<xref:System.Windows.Forms.MainMenu>若要创建<xref:System.Windows.Forms.MainMenu>可用于支持从右到左的文本的语言。 此示例要求具有<xref:System.Windows.Forms.MainMenu>创建名为`mainMenu1`。  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="mainMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.MainMenu.Collapse" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MainMenu.OnCollapse%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />方法，以便已注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件显示的文本是否从右向左显示。</summary>
        <value><see cref="T:System.Windows.Forms.RightToLeft" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可为菜单以支持从右到左书写的语言。 当此属性设置为`RightToLeft.Yes`，将从右到左而不是从左到右的方法的默认显示菜单项文本。  
  
> [!NOTE]
>  有关如何启用从右到左对齐方式会影响 Windows 窗体控件的详细信息，请参阅<xref:System.Windows.Forms.Control.RightToLeft%2A>属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.MainMenu.GetForm%2A>方法，以确定如果<xref:System.Windows.Forms.MainMenu>当前父级设置为窗体。 如果在示例中调用代码设<xref:System.Windows.Forms.MainMenu.GetForm%2A>不会返回`null`，此代码然后克隆的菜单结构<xref:System.Windows.Forms.MainMenu>使用<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法。 然后，示例代码设置<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>属性设置为`RightToLeft.Yes`上的新副本<xref:System.Windows.Forms.MainMenu>若要创建<xref:System.Windows.Forms.MainMenu>可用于支持从右到左的文本的语言。 此示例要求具有<xref:System.Windows.Forms.MainMenu>创建名为`mainMenu1`。  
  
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配给该属性的值不是 <see cref="T:System.Windows.Forms.RightToLeft" /> 枚举的有效成员。</exception>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="mainMenu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示 <see cref="T:System.Windows.Forms.MainMenu" /> 的字符串。</summary>
        <returns>表示当前 <see cref="T:System.Windows.Forms.MainMenu" /> 的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回字符串包括类型和返回的字符串<xref:System.Windows.Forms.Form.ToString%2A>方法如果<xref:System.Windows.Forms.MainMenu>分配给窗体。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>