<Type Name="LayoutEventArgs" FullName="System.Windows.Forms.LayoutEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d0e686ce6ce1e8dd69f36aeaf144a208a1daf56d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="40000407" /></Metadata><TypeSignature Language="C#" Value="public sealed class LayoutEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LayoutEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.LayoutEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LayoutEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LayoutEventArgs sealed : EventArgs" />
  <TypeSignature Language="F#" Value="type LayoutEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Windows.Forms.Control.Layout" /> 事件提供数据。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更改应用于控件如调整大小，显示或隐藏子控件和添加或移除子控件对其控件所需布局及其子控件。 一个<xref:System.Windows.Forms.LayoutEventArgs>指定已更改的子控件并将其受影响的属性。 例如，如果控件变得可见自上次的布局操作，<xref:System.Windows.Forms.Control.Visible%2A>属性受到影响。  
  
 <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A>并<xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>属性设置为`null`如果未不提供任何值<xref:System.Windows.Forms.Control.PerformLayout%2A>调用方法。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>并<xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A>属性作为<xref:System.Windows.Forms.LayoutEventHandler>参数来协调的 Windows 窗体和使用各种属性更改为同时在 Windows 窗体及其控件和控件的大小。  
  
 [!code-cpp[LayoutEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/LayoutEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[LayoutEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/LayoutEventArgs/CS/form1.cs#1)]
 [!code-vb[LayoutEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/LayoutEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.LayoutEventHandler" />
    <altmember cref="P:System.Windows.Forms.LayoutEventArgs.AffectedProperty" />
    <altmember cref="P:System.Windows.Forms.LayoutEventArgs.AffectedControl" />
    <altmember cref="E:System.Windows.Forms.Control.Layout" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.LayoutEventArgs" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LayoutEventArgs (System.ComponentModel.IComponent affectedComponent, string affectedProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IComponent affectedComponent, string affectedProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LayoutEventArgs.#ctor(System.ComponentModel.IComponent,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (affectedComponent As IComponent, affectedProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LayoutEventArgs(System::ComponentModel::IComponent ^ affectedComponent, System::String ^ affectedProperty);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LayoutEventArgs : System.ComponentModel.IComponent * string -&gt; System.Windows.Forms.LayoutEventArgs" Usage="new System.Windows.Forms.LayoutEventArgs (affectedComponent, affectedProperty)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="affectedComponent" Type="System.ComponentModel.IComponent" />
        <Parameter Name="affectedProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="affectedComponent">受此布局更改影响的 <see cref="T:System.ComponentModel.Component" />。</param>
        <param name="affectedProperty">受此布局更改影响的属性。</param>
        <summary>使用指定的组件和受影响的属性初始化 <see cref="T:System.Windows.Forms.LayoutEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Component" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LayoutEventArgs (System.Windows.Forms.Control affectedControl, string affectedProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control affectedControl, string affectedProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LayoutEventArgs.#ctor(System.Windows.Forms.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (affectedControl As Control, affectedProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LayoutEventArgs(System::Windows::Forms::Control ^ affectedControl, System::String ^ affectedProperty);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LayoutEventArgs : System.Windows.Forms.Control * string -&gt; System.Windows.Forms.LayoutEventArgs" Usage="new System.Windows.Forms.LayoutEventArgs (affectedControl, affectedProperty)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="affectedControl" Type="System.Windows.Forms.Control" />
        <Parameter Name="affectedProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="affectedControl">受此布局更改影响的 <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="affectedProperty">受此布局更改影响的属性。</param>
        <summary>用指定的控件和受影响的属性初始化 <see cref="T:System.Windows.Forms.LayoutEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AffectedComponent">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent AffectedComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent AffectedComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LayoutEventArgs.AffectedComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AffectedComponent As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ AffectedComponent { System::ComponentModel::IComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AffectedComponent : System.ComponentModel.IComponent" Usage="System.Windows.Forms.LayoutEventArgs.AffectedComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取受此布局更改影响的 <see cref="T:System.ComponentModel.Component" />。</summary>
        <value>一个 <see cref="T:System.ComponentModel.IComponent" />，表示受此布局更改影响的 <see cref="T:System.ComponentModel.Component" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何将此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.Control.Layout?displayProperty=nameWithType>事件。 此报告可帮助您了解事件发生的并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑更换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或将消息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含继承的类型的实例的项目<xref:System.Windows.Forms.Control>，如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。 然后该实例命名`Control1`，并确保事件处理程序相关联<xref:System.Windows.Forms.Control.Layout?displayProperty=nameWithType>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#51)]
 [!code-vb[System.Windows.Forms.EventExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#51)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AffectedControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control AffectedControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control AffectedControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LayoutEventArgs.AffectedControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AffectedControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ AffectedControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AffectedControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.LayoutEventArgs.AffectedControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取受此更改影响的控件。</summary>
        <value>受此更改影响的子 <see cref="T:System.Windows.Forms.Control" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A>属性设置为`null`如果未不提供任何值<xref:System.Windows.Forms.Control.PerformLayout%2A>调用方法。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>并<xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A>属性作为<xref:System.Windows.Forms.LayoutEventHandler>参数来协调的 Windows 窗体和使用各种属性更改为同时在 Windows 窗体及其控件和控件的大小。  
  
 [!code-cpp[LayoutEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/LayoutEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[LayoutEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/LayoutEventArgs/CS/form1.cs#1)]
 [!code-vb[LayoutEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/LayoutEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.LayoutEventArgs.AffectedProperty" />
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.Windows.Forms.LayoutEventHandler" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
      </Docs>
    </Member>
    <Member MemberName="AffectedProperty">
      <MemberSignature Language="C#" Value="public string AffectedProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AffectedProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LayoutEventArgs.AffectedProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AffectedProperty As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AffectedProperty { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AffectedProperty : string" Usage="System.Windows.Forms.LayoutEventArgs.AffectedProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取受此更改影响的属性。</summary>
        <value>受此更改影响的属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果子控件可见自后已过去的布局操作，<xref:System.Windows.Forms.Control.Visible%2A>属性受到影响。 <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>属性设置为`null`如果未不提供任何值<xref:System.Windows.Forms.Control.PerformLayout%2A>调用方法。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>并<xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A>属性作为<xref:System.Windows.Forms.LayoutEventHandler>参数来协调的 Windows 窗体和使用各种属性更改为同时在 Windows 窗体及其控件和控件的大小。  
  
 [!code-cpp[LayoutEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/LayoutEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[LayoutEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/LayoutEventArgs/CS/form1.cs#1)]
 [!code-vb[LayoutEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/LayoutEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.Windows.Forms.LayoutEventHandler" />
        <altmember cref="P:System.Windows.Forms.LayoutEventArgs.AffectedControl" />
      </Docs>
    </Member>
  </Members>
</Type>