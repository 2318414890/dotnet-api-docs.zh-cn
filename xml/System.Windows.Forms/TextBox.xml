<Type Name="TextBox" FullName="System.Windows.Forms.TextBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2baef4d787e3cd15a620e5329fa67f1a1023a826" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30650561" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class TextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextBox : System::Windows::Forms::TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.TextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 Windows 文本框控件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与<xref:System.Windows.Forms.TextBox>控件，用户可以在应用程序中输入文本。 此控件具有标准 Windows 文本框控件，包括多行编辑和密码字符屏蔽中找不到的其他功能。  
  
 通常情况下，<xref:System.Windows.Forms.TextBox>控件用于显示，或者接受作为输入，单个文本行。 你可以使用<xref:System.Windows.Forms.TextBoxBase.Multiline%2A>和<xref:System.Windows.Forms.TextBox.ScrollBars%2A>属性，以启用要输入或显示的文本的多个行。 设置<xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>和<xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>属性设置为`true`以启用更高版本中为多行的文本操作<xref:System.Windows.Forms.TextBox>控件。  
  
> [!NOTE]
>  必须设置<xref:System.Windows.Forms.TextBoxBase.Multiline%2A>属性`true`调整高度<xref:System.Windows.Forms.TextBox>控件。 你可以通过设置调整高度<xref:System.Windows.Forms.Control.Size%2A>属性。  
  
 你可以限制的文本输入到量<xref:System.Windows.Forms.TextBox>通过设置<xref:System.Windows.Forms.TextBoxBase.MaxLength%2A>到特定数量的字符的属性。 <xref:System.Windows.Forms.TextBox> 控件还可以用来接受密码和其他敏感信息。 你可以使用<xref:System.Windows.Forms.TextBox.PasswordChar%2A>属性设置为单线条版本的控件中输入掩码字符。 使用<xref:System.Windows.Forms.TextBox.CharacterCasing%2A>属性，使用户能够仅键入大写形式，并仅大小写或到大写和小写字符的组合<xref:System.Windows.Forms.TextBox>控件。  
  
 窗口的内容滚动<xref:System.Windows.Forms.TextBox>之前光标 （脱字号） 控件的可见区域内，你可以使用<xref:System.Windows.Forms.TextBoxBase.ScrollToCaret%2A>方法。 若要在文本框中选择一个文本范围，可以使用<xref:System.Windows.Forms.TextBoxBase.Select%2A>方法。  
  
 若要从输入中限制文本<xref:System.Windows.Forms.TextBox>控件，你可以创建的事件处理程序<xref:System.Windows.Forms.Control.KeyDown>若要验证输入控件中的每个字符的事件。 你也可以限制中的数据的所有条目<xref:System.Windows.Forms.TextBox>通过设置<xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A>属性`true`。  
  
> [!NOTE]
>  大多数功能的<xref:System.Windows.Forms.TextBox>控件继承自<xref:System.Windows.Forms.TextBoxBase>类。  
>   
>  使用<xref:System.Windows.Forms.TextBox>启用了视觉样式的控件将导致代理项字体的不正确处理。  
  
   
  
## Examples  
 下面的代码示例创建多行<xref:System.Windows.Forms.TextBox>带垂直滚动条的控件。 此示例使用<xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>， <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>，和<xref:System.Windows.Forms.Control.Dock%2A>属性，以使多行文本框控件可用于创建文本文档。  
  
 [!code-csharp[Classic TextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TextBoxBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.TextBox" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 父容器控件定义的颜色和字体设置<xref:System.Windows.Forms.TextBox>。  
  
   
  
## Examples  
 下面的代码示例创建的新实例<xref:System.Windows.Forms.TextBox>控制并将字符串分配给控件的<xref:System.Windows.Forms.TextBoxBase.Text%2A>属性。  
  
 [!code-cpp[Classic TextBox.TextBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.TextBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.TextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.TextBox Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.TextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.TextBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptsReturn">
      <MemberSignature Language="C#" Value="public bool AcceptsReturn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsReturn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AcceptsReturn" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsReturn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsReturn { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在多行 <see cref="T:System.Windows.Forms.TextBox" /> 控件中按 Enter 键时，是在控件中创建一行新文本还是激活窗体的默认按钮。</summary>
        <value>
          如果按 Enter 键时在多行版本的控件中创建一行新文本，则为 <see langword="true" />；如果按 Enter 键时激活窗体的默认按钮，则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性的值是`false`，用户必须按 CTRL + ENTER 以在多行中创建一个新行<xref:System.Windows.Forms.TextBox>控件。 如果没有窗体的默认按钮，ENTER 键将总是在控件中，而不考虑此属性的值创建新的一行文本。  
  
   
  
## Examples  
 下面的代码示例创建多行<xref:System.Windows.Forms.TextBox>带垂直滚动条的控件。 此示例使用<xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>， <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>，和<xref:System.Windows.Forms.TextBoxBase.WordWrap%2A>属性，以使多行文本框控件可用于创建文本文档。  
  
 [!code-cpp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteCustomSource">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoCompleteStringCollection AutoCompleteCustomSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AutoCompleteStringCollection AutoCompleteCustomSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCompleteCustomSource As AutoCompleteStringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoCompleteStringCollection ^ AutoCompleteCustomSource { System::Windows::Forms::AutoCompleteStringCollection ^ get(); void set(System::Windows::Forms::AutoCompleteStringCollection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoCompleteStringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个自定义 <see cref="T:System.Collections.Specialized.StringCollection" />，以便在 <see cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" /> 属性被设置为 <see langword="CustomSource" /> 时使用。</summary>
        <value>一个与 <see cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" /> 一起使用的 <see cref="T:System.Collections.Specialized.StringCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>， <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>，和<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性以创建<xref:System.Windows.Forms.TextBox>，通过比较输入于维护的源中的所有字符串的前缀的前缀来自动完成输入的字符串。 这可用于<xref:System.Windows.Forms.TextBox>在其中 Url、 地址、 文件名称或命令将经常输入的控件。  
  
 使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>属性是可选的但您必须设置<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性`CustomSource`才能使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>。  
  
 必须使用<xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>和<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性组合在一起。  
  
> [!NOTE]
>  操作系统可能会限制可以同时显示的自定义字符串的数量。  
  
   
  
## Examples  
 下面的代码示例演示如何将集合的自动完成自定义源用作<xref:System.Windows.Forms.TextBox>控件。 此示例将执行下列操作：  
  
-   使用<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性来启用<xref:System.Windows.Forms.TextBox>控件能够接受其自动完成行为的自定义源。  
  
-   使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>属性设置的值的自定义列表。  
  
-   使用<xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>属性来设置自动完成候选项的显示方式。  
  
 [!code-csharp[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/cs/form1.cs#10)]
 [!code-vb[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/vb/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" />
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteMode" />
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoCompleteMode AutoCompleteMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoCompleteMode AutoCompleteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AutoCompleteMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCompleteMode As AutoCompleteMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoCompleteMode AutoCompleteMode { System::Windows::Forms::AutoCompleteMode get(); void set(System::Windows::Forms::AutoCompleteMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoCompleteMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个选项，该选项控制自动完成应用于 <see cref="T:System.Windows.Forms.TextBox" /> 的方式。</summary>
        <value>
          <see cref="T:System.Windows.Forms.AutoCompleteMode" /> 的值之一。 以下为这些值。  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.Append" />  
 将最可能的候选字符串的其余部分追加到现有的字符，并突出显示追加的字符。  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.Suggest" />  
 显示与编辑控件关联的辅助下拉列表。 此下拉列表填充了一个或多个建议完成字符串。  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.SuggestAppend" />  
 追加 <see langword="Suggest" /> 和 <see langword="Append" /> 选项。  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.None" />  
 禁用自动完成 这是默认设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>， <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>，和<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性以创建<xref:System.Windows.Forms.TextBox>，通过比较输入于维护的源中的所有字符串的前缀的前缀来自动完成输入的字符串。 这可用于<xref:System.Windows.Forms.TextBox>在其中 Url、 地址、 文件名称或命令将经常输入的控件。  
  
 使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>属性是可选的但您必须设置<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性`CustomSource`才能使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>。  
  
 必须使用<xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>和<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性组合在一起。  
  
> [!NOTE]
>  操作系统可能会限制可以同时显示的自定义字符串的数量。  
  
   
  
## Examples  
 下面的代码示例演示如何将集合的自动完成自定义源用作<xref:System.Windows.Forms.TextBox>控件。 此示例将执行下列操作：  
  
-   使用<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性来启用<xref:System.Windows.Forms.TextBox>控件能够接受其自动完成行为的自定义源。  
  
-   使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>属性设置的值的自定义列表。  
  
-   使用<xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>属性来设置自动完成候选项的显示方式。  
  
 [!code-csharp[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/cs/form1.cs#10)]
 [!code-vb[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/vb/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的值不是 <see cref="T:System.Windows.Forms.AutoCompleteMode" /> 值之一。</exception>
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" />
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteSource">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoCompleteSource AutoCompleteSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoCompleteSource AutoCompleteSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AutoCompleteSource" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCompleteSource As AutoCompleteSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoCompleteSource AutoCompleteSource { System::Windows::Forms::AutoCompleteSource get(); void set(System::Windows::Forms::AutoCompleteSource value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TextBoxAutoCompleteSourceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoCompleteSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定用于自动完成的完整字符串的源。</summary>
        <value>
          <see cref="T:System.Windows.Forms.AutoCompleteSource" /> 的值之一。 这些选项为 <see langword="AllSystemSources" />、<see langword="AllUrl" />、<see langword="FileSystem" />、<see langword="HistoryList" />、<see langword="RecentlyUsedList" />、<see langword="CustomSource" /> 和 <see langword="None" />。 默认值为 <see langword="None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>， <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>，和<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性以创建<xref:System.Windows.Forms.TextBox>，通过比较输入于维护的源中的所有字符串的前缀的前缀来自动完成输入的字符串。 这可用于<xref:System.Windows.Forms.TextBox>在其中 Url、 地址、 文件名称或命令将经常输入的控件。  
  
 使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>属性是可选的但您必须设置<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性`CustomSource`才能使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>。  
  
 必须使用<xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>和<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性组合在一起。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> 不能在多行<xref:System.Windows.Forms.TextBox>控件。  
  
> [!NOTE]
>  操作系统可能会限制可以在一次显示的自定义字符串的数量。  
  
   
  
## Examples  
 下面的代码示例演示如何将集合的自动完成自定义源用作<xref:System.Windows.Forms.TextBox>控件。 此示例将执行下列操作：  
  
-   使用<xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A>属性来启用<xref:System.Windows.Forms.TextBox>控件能够接受其自动完成行为的自定义源。  
  
-   使用<xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>属性设置的值的自定义列表。  
  
-   使用<xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>属性来设置自动完成候选项的显示方式。  
  
 [!code-csharp[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/cs/form1.cs#10)]
 [!code-vb[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/vb/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的值不是 <see cref="T:System.Windows.Forms.AutoCompleteSource" /> 值之一。</exception>
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteMode" />
      </Docs>
    </Member>
    <Member MemberName="CharacterCasing">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CharacterCasing CharacterCasing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.CharacterCasing CharacterCasing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.CharacterCasing" />
      <MemberSignature Language="VB.NET" Value="Public Property CharacterCasing As CharacterCasing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CharacterCasing CharacterCasing { System::Windows::Forms::CharacterCasing get(); void set(System::Windows::Forms::CharacterCasing value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CharacterCasing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.TextBox" /> 控件是否在字符键入时修改其大小写格式。</summary>
        <value>
          <see cref="T:System.Windows.Forms.CharacterCasing" /> 枚举值中的一个值，它指定 <see cref="T:System.Windows.Forms.TextBox" /> 控件是否修改字符的大小写格式。 默认值为 <see langword="CharacterCasing.Normal" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Windows.Forms.TextBox.CharacterCasing%2A>属性可以更改为按你的应用程序所需的字符的大小写。 例如，您无法更改输入中的所有字符的大小写<xref:System.Windows.Forms.TextBox>控件，用于输入密码用于大写或小写，以强制实施密码策略。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.TextBox>用于接受密码的控件。 此示例使用<xref:System.Windows.Forms.TextBox.CharacterCasing%2A>属性以更改到类型化的所有字符小写，与<xref:System.Windows.Forms.TextBoxBase.MaxLength%2A>属性将密码长度限制为八个字符。 此示例还使用<xref:System.Windows.Forms.TextBox.TextAlign%2A>属性到中心中的密码<xref:System.Windows.Forms.TextBox>控件。  
  
 [!code-cpp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配给该属性的值不在该枚举的有效值范围内。</exception>
        <altmember cref="T:System.Windows.Forms.CharacterCasing" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取创建控件句柄时所需要的创建参数。</summary>
        <value>
          <see cref="T:System.Windows.Forms.CreateParams" />，包含创建控件的句柄时所需的创建参数。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Windows.Forms.TextBox" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法称为由公共`Dispose`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。  
  
 当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Windows.Forms.TextBox> 引用的、由任何托管对象持有的全部资源。 此方法调用每个引用对象的 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 在重写<see langword="Dispose(Boolean)" />，请注意不要引用在以前调用之前释放对象<see langword="Dispose" />。 有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
 有关详细信息<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[重写 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">键的一个值。</param>
        <summary>确定指定的键是输入键还是需要预处理的特殊键。</summary>
        <returns>
          如果指定的键是输入键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextBox.IsInputKey%2A>方法返回`true`时`keyData`包括<xref:System.Windows.Forms.Keys.Return>值和<xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>属性是`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示此控件是否为多行 <see cref="T:System.Windows.Forms.TextBox" /> 控件。</summary>
        <value>
          如果该控件是多行 <see cref="T:System.Windows.Forms.TextBox" /> 控件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> 不能在多行<xref:System.Windows.Forms.TextBox>控件。  
  
 字体更改时，不显示任何已定义的缩进。 若要获取缩进，设置<xref:System.Windows.Forms.TextBox.Multiline%2A>到`true`并重写而不会调用基类，以便不调用 SETMARGINS WM_SETFONT。  
  
   
  
## Examples  
 下面的代码示例创建多行<xref:System.Windows.Forms.TextBox>带垂直滚动条的控件。 此示例使用<xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>， <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>，和<xref:System.Windows.Forms.TextBoxBase.WordWrap%2A>属性，以使多行文本框控件可用于创建文本文档。  
  
 [!code-cpp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.TextBox.OnBackColorChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.TextBox.OnBackColorChanged(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.TextBox.OnBackColorChanged(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.FontChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.TextBox.OnFontChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.TextBox.OnFontChanged(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.TextBox.OnFontChanged(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.GotFocus" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户选择中的文本<xref:System.Windows.Forms.TextBox>控件，控件将保存所选内容。 当<xref:System.Windows.Forms.TextBox>控件获得焦点时，所选内容等同于时<xref:System.Windows.Forms.TextBox>失去焦点。 当<xref:System.Windows.Forms.TextBox>获得焦点时第一次，选定的整个文本。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.TextBox.OnGotFocus%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">事件数据。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.HandleCreated" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.TextBox.OnHandleDestroyed%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.TextBox.OnHandleDestroyed(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.TextBox.OnHandleDestroyed(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.TextBox.TextAlignChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.TextBox.OnTextAlignChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TextBox.TextAlignChanged" />
        <altmember cref="P:System.Windows.Forms.TextBox.TextAlign" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置字符，该字符用于屏蔽单行 <see cref="T:System.Windows.Forms.TextBox" /> 控件中的密码字符。</summary>
        <value>用于屏蔽在单行 <see cref="T:System.Windows.Forms.TextBox" /> 控件中输入的字符的字符。 如果不想让控件在字符键入时将它们屏蔽，请将此属性值设置为 0（字符值）。 默认值等于 0（字符值）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>属性的优先级高于<xref:System.Windows.Forms.TextBox.PasswordChar%2A>属性。 每当<xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>设置为`true`、 使用默认系统的密码字符和任何字符集<xref:System.Windows.Forms.TextBox.PasswordChar%2A>将被忽略。  
  
 当<xref:System.Windows.Forms.TextBox.PasswordChar%2A>属性设置，则无法执行使用键盘控件中的剪切和复制操作。  
  
> [!IMPORTANT]
>  当<xref:System.Windows.Forms.TextBox>处于密码模式，因为<xref:System.Windows.Forms.TextBox.PasswordChar%2A>， <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>，或<xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A>是`true`、<xref:System.Windows.Forms.TextBox>处于受限模式。 在此模式下，<xref:System.Windows.Forms.ImeMode>被禁用，但是当前<xref:System.Windows.Forms.ImeMode>进行缓存以便它可以还原如果<xref:System.Windows.Forms.TextBox>变为不受限制。 切换<xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A>是一个常用方案。 <xref:System.Windows.Forms.ImeMode>控件处于受限模式中被隐藏。 从设计器的角度看，<xref:System.Windows.Forms.ImeMode>显示值是实际值。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.TextBox>用于接受密码的控件。 此示例使用<xref:System.Windows.Forms.TextBox.CharacterCasing%2A>属性以更改所有字符类型化为小写和<xref:System.Windows.Forms.TextBoxBase.MaxLength%2A>属性将密码长度限制为八个字符。 此示例还使用<xref:System.Windows.Forms.TextBox.TextAlign%2A>属性到中心中的密码<xref:System.Windows.Forms.TextBox>控件。  
  
 [!code-cpp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public void Paste (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Paste(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.Paste(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Paste (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Paste(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要替换的文本。</param>
        <summary>将选定文本设置为指定文本，但不清除撤消缓冲区。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与设置不同<xref:System.Windows.Forms.TextBoxBase.SelectedText%2A>，<xref:System.Windows.Forms.TextBox.Paste%2A>不会影响剪贴板。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message m, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; m, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef m As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % m, System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="m">通过引用传递的 <see cref="T:System.Windows.Forms.Message" />，它表示要处理的窗口消息。</param>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> 值之一，它表示要处理的快捷键。</param>
        <summary>处理命令键。</summary>
        <returns>
          如果命令键已由控件处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 4.6.1 中的新增功能。 在以前版本中的 Ctrl A 快捷键<xref:System.Windows.Forms.TextBox>无法选择所有文本时<xref:System.Windows.Forms.TextBoxBase.ShortcutsEnabled%2A>和<xref:System.Windows.Forms.TextBox.Multiline%2A>属性均设置为`true.`。 此方法使 Ctrl A 快捷键以选择所有文本时<xref:System.Windows.Forms.TextBoxBase.ShortcutsEnabled%2A>和<xref:System.Windows.Forms.TextBox.Multiline%2A>属性都设置为 `true.`  
  
 面向.NET Framework 版本 4.0 到 4.6 应用程序可以充分利用此方法，通过添加以下`<runtime>`app.config 文件的部分：  
  
```xml  
<AppContextSwitchOverrides value = "Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=false" />  
```  
  
 面向.NET framework 4.6.1 或更高版本可以应用程序选择退出此行为将添加到以下`<runtime>`app.config 文件的部分：  
  
```xml  
<AppContextSwitchOverrides value = "Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=true" />  
```  
  
> [!NOTE]
>  如果 app.config 文件已包含`AppContextSwitchOverrides`密钥，将新的密钥值合并到现有的密钥。 例如 `<AppContextSwitchOverrides value = "oldKey=oldValue;Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=false" />`。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ScrollBars ScrollBars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ScrollBars ScrollBars" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.ScrollBars" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollBars As ScrollBars" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ScrollBars ScrollBars { System::Windows::Forms::ScrollBars get(); void set(System::Windows::Forms::ScrollBars value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置哪些滚动条应出现在多行 <see cref="T:System.Windows.Forms.TextBox" /> 控件中。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ScrollBars" /> 枚举值之一，它指示多行 <see cref="T:System.Windows.Forms.TextBox" /> 控件显示时是不带滚动条、带有水平滚动条、带有垂直滚动条还是同时带有这两种滚动条。 默认值为 <see langword="ScrollBars.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会显示水平滚动条如果<xref:System.Windows.Forms.TextBoxBase.WordWrap%2A>属性设置为`true`，而不考虑的值的<xref:System.Windows.Forms.TextBox.ScrollBars%2A>属性。  
  
   
  
## Examples  
 下面的代码示例创建多行<xref:System.Windows.Forms.TextBox>带垂直滚动条的控件。 此示例还使用<xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>， <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>，和<xref:System.Windows.Forms.TextBoxBase.WordWrap%2A>属性以使多行<xref:System.Windows.Forms.TextBox>控件可用于创建文本文档。  
  
 [!code-cpp[Classic TextBox.ScrollBars Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.ScrollBars Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.ScrollBars Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.ScrollBars Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.ScrollBars Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.ScrollBars Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配给该属性的值不在该枚举的有效值范围内。</exception>
        <altmember cref="T:System.Windows.Forms.ScrollBars" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此控件关联的文本。</summary>
        <value>与该控件关联的文本。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.TextBox" /> 控件中文本的对齐方式。</summary>
        <value>
          <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 枚举值之一，指定控件中文本的对齐方式。 默认值为 <see langword="HorizontalAlignment.Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此属性中对齐文本<xref:System.Windows.Forms.TextBox>以匹配窗体上的文本的布局。 例如，如果你的控件位于窗体右侧上，你可以设置<xref:System.Windows.Forms.Label.TextAlign%2A>属性`HorizontalAlignment.Right`，并且将与控件而不是默认左对齐方式的右侧对齐文本。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.TextBox>用于接受密码的控件。 此示例使用<xref:System.Windows.Forms.TextBox.CharacterCasing%2A>属性以更改到类型化的所有字符小写，与<xref:System.Windows.Forms.TextBoxBase.MaxLength%2A>属性将密码长度限制为八个字符。 此示例还使用<xref:System.Windows.Forms.TextBox.TextAlign%2A>属性到中心中的密码<xref:System.Windows.Forms.TextBox>控件。  
  
 [!code-cpp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配给该属性的值不在该枚举的有效值范围内。</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Windows.Forms.TextBox.TextAlign" /> 属性的值更改后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.TextBox.TextAlignChanged>事件。 此报表有助于您了解发生的事件，并可以帮助您进行调试时。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.TextBox>名为`TextBox1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.TextBox.TextAlignChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#249](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#249)]
 [!code-vb[System.Windows.Forms.EventExamples#249](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#249)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.TextBox.TextAlign" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Forms.TextBox" /> 控件中的文本是否作为默认密码字符显示。</summary>
        <value>
          如果 <see cref="T:System.Windows.Forms.TextBox" /> 控件中的文本应该以默认的密码字符显示，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>属性的优先级高于<xref:System.Windows.Forms.TextBox.PasswordChar%2A>属性。 每当<xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>设置为`true`、 使用默认系统的密码字符和任何字符集<xref:System.Windows.Forms.TextBox.PasswordChar%2A>将被忽略。  
  
> [!IMPORTANT]
>  当<xref:System.Windows.Forms.TextBox>处于密码模式，因为<xref:System.Windows.Forms.TextBox.PasswordChar%2A>， <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>，或<xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A>是`true`、<xref:System.Windows.Forms.TextBox>处于受限模式。 在此模式下，<xref:System.Windows.Forms.ImeMode>被禁用，但是当前<xref:System.Windows.Forms.ImeMode>进行缓存以便它可以还原如果<xref:System.Windows.Forms.TextBox>变为不受限制。 切换<xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A>是一个常用方案。 <xref:System.Windows.Forms.ImeMode>控件处于受限模式中被隐藏。 从设计器的角度看，<xref:System.Windows.Forms.ImeMode>显示值是实际值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">一个 Windows 消息对象。</param>
        <summary>处理 Windows 消息。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>