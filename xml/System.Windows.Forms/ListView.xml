<Type Name="ListView" FullName="System.Windows.Forms.ListView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1e72770b5a826b4b618ee58512f64684e24b11fa" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519434" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListView" />
  <TypeSignature Language="VB.NET" Value="Public Class ListView&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListView : System::Windows::Forms::Control" />
  <TypeSignature Language="F#" Value="type ListView = class&#xA;    inherit Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a Windows list view control, which displays a collection of items that can be displayed using one of four different views.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.ListView>控件使你可以显示的项文本和图标来标识的项的类型，（可选） 使用的项的列表。 例如，Windows 资源管理器的文件列表中是类似的外观与<xref:System.Windows.Forms.ListView>控件。 它显示的文件和文件夹的树中当前选定的列表。 每个文件和文件夹显示以帮助识别文件或文件夹的类型与其关联的图标。 <xref:System.Windows.Forms.ListViewItem>类表示中的项<xref:System.Windows.Forms.ListView>控件。 可以在五种不同视图之一显示列表中显示的项。 作为大图标、 小图标，或垂直列表中的小图标，可以显示项。 项也可以具有子项，其中包含与父项相关的信息。 详细信息视图，可标识要显示在子项中的信息的列标题以网格显示项及其子项。 磁贴视图中，有一定的限制如下所述，可以为包含大图标旁边的文本信息的磁贴显示项及其子项。 <xref:System.Windows.Forms.ListView> 支持单个或多个所选内容。 多重选择功能允许用户的方式类似于的项列表中选择<xref:System.Windows.Forms.ListBox>控件。 此外，用户可以激活所选的项目来执行的任务。 例如，可以使用<xref:System.Windows.Forms.ListView>控件来显示的应用程序可以打开并使用的文件列表。 用户可以选择要打开，然后双击它们来激活项，并在应用程序中打开文件的文件。 <xref:System.Windows.Forms.ListView>还可以显示复选框，使用<xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性，以允许用户以检查他们想要对执行操作的项。 你可以使用<xref:System.Windows.Forms.ListView>各种不同的方式的控制。 控件可以用于显示从应用程序、 数据库或文本文件的信息。 <xref:System.Windows.Forms.ListView>还可用于获取从用户，例如选择要处理的文件集的信息。  
  
 <xref:System.Windows.Forms.ListView> 提供了大量提供灵活地外观和行为的属性。 <xref:System.Windows.Forms.ListView.View%2A>属性允许您更改项的显示方式。 <xref:System.Windows.Forms.ListView.LargeImageList%2A>， <xref:System.Windows.Forms.ListView.SmallImageList%2A>，和<xref:System.Windows.Forms.ListView.StateImageList%2A>属性允许你指定<xref:System.Windows.Forms.ImageList>对象包含的项，和的情况下显示的图像<xref:System.Windows.Forms.ListView.StateImageList%2A>，是对应的复选框时，所显示<xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性设置为`true`。 若要确定选中了哪些项，可以使用<xref:System.Windows.Forms.ListView.CheckedItems%2A>属性来访问<xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>集合。 <xref:System.Windows.Forms.ListView.Columns%2A>属性可以访问<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>，它用于存储的列标头时，所显示<xref:System.Windows.Forms.ListView.View%2A>的控件属性设置为<xref:System.Windows.Forms.View.Details>。 添加项目，从删除<xref:System.Windows.Forms.ListView>通过<xref:System.Windows.Forms.ListView.Items%2A>属性。 <xref:System.Windows.Forms.ListView.Items%2A>属性允许你访问<xref:System.Windows.Forms.ListView.ListViewItemCollection>的控件，它提供用于操作控件中的项的方法。 如果你想要允许用户编辑项的文本，则可以使用<xref:System.Windows.Forms.ListView.LabelEdit%2A>属性。 当控件包含大量的项时，它通常是便于用户若要查看在已排序的列表。 你可以使用<xref:System.Windows.Forms.ListView.Sorting%2A>属性以按字母顺序的项进行排序。 你可以完全自定义的外观<xref:System.Windows.Forms.ListView>控件。 若要执行此操作，将设置<xref:System.Windows.Forms.ListView.OwnerDraw%2A>属性`true`并处理一个或多个以下事件： <xref:System.Windows.Forms.ListView.DrawItem>， <xref:System.Windows.Forms.ListView.DrawSubItem>， <xref:System.Windows.Forms.ListView.DrawColumnHeader>。  
  
 许多属性的<xref:System.Windows.Forms.ListView>控件时使用<xref:System.Windows.Forms.ListView.View%2A>的控件属性设置为<xref:System.Windows.Forms.View.Details>。 <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>属性允许的用户你<xref:System.Windows.Forms.ListView>控件在运行时重新配置的列的顺序。 <xref:System.Windows.Forms.ListView.FullRowSelect%2A>属性使项和选择而不是不仅仅是项及其子项。 若要在以标识中项及其子项的边界的详细信息视图中显示网格线<xref:System.Windows.Forms.ListView>，你可以使用<xref:System.Windows.Forms.ListView.GridLines%2A>属性。 <xref:System.Windows.Forms.ListView.HeaderStyle%2A>属性允许你指定的列标题以显示类型。  
  
 A<xref:System.Windows.Forms.ListView>控件可以操作在虚拟模式下，其中<xref:System.Windows.Forms.ListViewItem>对象动态生成，而不是存储在<xref:System.Windows.Forms.ListView.Items%2A>集合。 这可用于处理非常大的列表或列表频繁更改其内容。 若要启用虚拟模式，设置<xref:System.Windows.Forms.ListView.VirtualMode%2A>属性`true`并处理<xref:System.Windows.Forms.ListView.RetrieveVirtualItem>， <xref:System.Windows.Forms.ListView.CacheVirtualItems>，和<xref:System.Windows.Forms.ListView.SearchForVirtualItem>事件。  
  
 除了可用于许多属性<xref:System.Windows.Forms.ListView>控制，一些方法和事件，你的应用程序可以将用于为提供其他功能<xref:System.Windows.Forms.ListView>。 <xref:System.Windows.Forms.ListView.BeginUpdate%2A>和<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法使您能够提高性能，当你将添加到多个项<xref:System.Windows.Forms.ListView>通过防止控件重新绘制某一项添加每次。 如果你<xref:System.Windows.Forms.ListView>控件显示的项及其子项，你可能想要在用户右击子项下提供功能。 若要确定其被单击的项，可以使用<xref:System.Windows.Forms.ListView.GetItemAt%2A>方法。 时执行验证的项在用户已编辑了它们后，你可能想要向用户若要更改显示的特定项。 <xref:System.Windows.Forms.ListView.EnsureVisible%2A>可以调用方法来确保特定的项在控件的可见区域。  
  
 如果<xref:System.Windows.Forms.ListView.LabelEdit%2A>属性设置为`true`，你可以执行任务，例如验证正在编辑之前和之后更改通过创建的事件处理程序的文本的文本<xref:System.Windows.Forms.ListView.BeforeLabelEdit>和<xref:System.Windows.Forms.ListView.AfterLabelEdit>事件。 若要执行任务，例如打开文件或显示对话框可编辑中显示的项<xref:System.Windows.Forms.ListView>，你可以创建的事件处理程序<xref:System.Windows.Forms.ListView.ItemActivate>事件。 如果你允许用户中的项进行排序<xref:System.Windows.Forms.ListView>当他们单击列标题，可以创建的事件处理程序<xref:System.Windows.Forms.ListView.ColumnClick>事件以执行排序。 当<xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性设置为`true`，你可以确定项的复选状态的更改发生时通过处理<xref:System.Windows.Forms.ListView.ItemCheck>事件。  
  
 您还可以设置的背景图像<xref:System.Windows.Forms.ListView>与<xref:System.Windows.Forms.Control.BackgroundImage%2A>属性。 你的应用程序必须具有<xref:System.STAThreadAttribute>上其`Main`方法以正确显示的背景图像<xref:System.Windows.Forms.ListView>控件。 此外，如果<xref:System.Windows.Forms.ListView>具有背景图像的控件承载在 Internet Explorer 中，指定为一个依赖程序集应用程序清单文件中以确保显示的属性的背景图像的 comctl32.dll 版本 6.0。  
  
> [!NOTE]
>  设置<xref:System.Windows.Forms.Control.Cursor%2A>属性<xref:System.Windows.Forms.ListView>控件中的光标外观产生任何影响[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]版本 1.1 和更早版本。  
  
 Windows XP 和 Windows Server 2003 提供增强的三个功能<xref:System.Windows.Forms.ListView>控制在你的应用程序调用<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法： 平铺视图、 分组和插入标记。  
  
 磁贴视图可以通过显示大图标旁边的项和子项的文本来平衡图形和文本信息。 设置<xref:System.Windows.Forms.ListView.View%2A>属性<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>若要启用此行为。  
  
 分组功能允许您以可视方式分组到相关的类别的项。 使用<xref:System.Windows.Forms.ListView.Groups%2A>属性来添加<xref:System.Windows.Forms.ListViewGroup>对象添加到<xref:System.Windows.Forms.ListView>控制当你想要启用此功能。 若要暂时禁用该功能，设置<xref:System.Windows.Forms.ListView.ShowGroups%2A>属性`false`。  
  
 插入标记功能可以提供拖放项重新定位的视觉反馈指示放置位置。 使用<xref:System.Windows.Forms.ListViewInsertionMark>对象通过检索<xref:System.Windows.Forms.ListView.InsertionMark%2A>属性显示插入标记。  
  
 这些功能是仅在 Windows XP 和 Windows Server 2003 中可用。 在早期的操作系统上与这些功能相关的代码不起、 磁贴视图显示大图标视图中，为和不显示插入标记和组。 在某些情况下，你可能想要编写代码来确定这些功能是否可用，并提供备用功能，它们都不可用时。 这些功能由同一个库提供操作系统主题功能提供。 若要检查此库的可用性，请调用<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法重载并传入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
 下表显示的一些<xref:System.Windows.Forms.ListView>成员以及它们是在中有效的视图。  
  
|ListView 成员|视图|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> 属性|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> 属性|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> 方法|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> 属性|<xref:System.Windows.Forms.View.Details> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem>事件|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> 方法|<xref:System.Windows.Forms.View.Details>、<xref:System.Windows.Forms.View.List> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> 方法|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> 方法|<xref:System.Windows.Forms.View.Details> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> 属性|除之外的所有视图 <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> 属性|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> 属性|<xref:System.Windows.Forms.View.LargeIcon>、<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.Tile>|  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件：  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="T:System.Windows.Forms.ImageList" />
    <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ListView" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件：  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ItemActivation Activation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ItemActivation Activation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Activation" />
      <MemberSignature Language="VB.NET" Value="Public Property Activation As ItemActivation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ItemActivation Activation { System::Windows::Forms::ItemActivation get(); void set(System::Windows::Forms::ItemActivation value); };" />
      <MemberSignature Language="F#" Value="member this.Activation : System.Windows.Forms.ItemActivation with get, set" Usage="System.Windows.Forms.ListView.Activation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemActivation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of action the user must take to activate an item.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ItemActivation" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.ItemActivation.Standard" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Activation%2A>属性允许你指定用户将如何激活中的项<xref:System.Windows.Forms.ListView>控件。 激活中的项<xref:System.Windows.Forms.ListView>不同于只需选择一个项。 当激活某个项时，通常的事件处理程序中执行某个操作<xref:System.Windows.Forms.ListView.ItemActivate>事件。 例如，在激活一项时你可能打开文件或显示一个对话框框，让要对其进行编辑的项。 通常情况下，要激活它的用户双击一个项。 如果<xref:System.Windows.Forms.ListView.Activation%2A>属性设置为<xref:System.Windows.Forms.ItemActivation.OneClick>，单击项一次激活它。 设置<xref:System.Windows.Forms.ListView.Activation%2A>属性<xref:System.Windows.Forms.ItemActivation.TwoClick>与标准双击不同，因为两次单击可以具有任何它们之间的持续时间。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.ListView.Activation%2A>属性设置为<xref:System.Windows.Forms.ItemActivation.OneClick>或<xref:System.Windows.Forms.ItemActivation.TwoClick>，标签编辑将不允许的值无论<xref:System.Windows.Forms.ListView.LabelEdit%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ItemActivation" /> members.</exception>
        <altmember cref="T:System.Windows.Forms.ItemActivation" />
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler AfterLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ AfterLabelEdit;" />
      <MemberSignature Language="F#" Value="member this.AfterLabelEdit : System.Windows.Forms.LabelEditEventHandler " Usage="member this.AfterLabelEdit : System.Windows.Forms.LabelEditEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the label for an item is edited by the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.AfterLabelEdit>事件发生时在用户完成修改项的文本。 用户键入项的新字符串传递给该事件，并且事件处理程序可以拒绝此更改。 如果事件处理程序拒绝更改，文本将恢复为文本中，因为其用户开始编辑项之前。  
  
> [!NOTE]
>  因为<xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>事件发生之前标签编辑也会提交，调用<xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType>处理程序中为此事件的方法将排序使用的原始值的项。  
  
 为了使<xref:System.Windows.Forms.ListView.AfterLabelEdit>事件被引发<xref:System.Windows.Forms.ListView.LabelEdit%2A>属性<xref:System.Windows.Forms.ListView>控件必须设置为`true`。  
  
 你可以创建的事件处理程序<xref:System.Windows.Forms.ListView.BeforeLabelEdit>事件以执行任务之前用户编辑项的文本。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView.AfterLabelEdit>事件将限制为在字母表中的字符的新编辑的标签。 该示例使用<xref:System.Text.ASCIIEncoding>类来获取新标签的每个字符的 ASCII 字符代码。 如果该字符表示数字的 ASCII 代码之间处于，新的标签不能应用于项中。 此示例需要你已创建了<xref:System.Windows.Forms.ListView>控件在窗体和添加到它的项。 该示例还要求你已连接<xref:System.Windows.Forms.ListView.AfterLabelEdit>到事件处理程序的代码示例中定义的事件。 若要使用<xref:System.Text.ASCIIEncoding>类，你的文件必须包含<xref:System.Text>命名空间。  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ListViewAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As ListViewAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewAlignment Alignment { System::Windows::Forms::ListViewAlignment get(); void set(System::Windows::Forms::ListViewAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.Alignment : System.Windows.Forms.ListViewAlignment with get, set" Usage="System.Windows.Forms.ListView.Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the alignment of items in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewAlignment" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.ListViewAlignment.Top" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Alignment%2A>属性仅会影响对齐时<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。  
  
> [!NOTE]
>  此属性不起作用与<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.List>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ListViewAlignment" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
      </Docs>
    </Member>
    <Member MemberName="AllowColumnReorder">
      <MemberSignature Language="C#" Value="public bool AllowColumnReorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowColumnReorder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowColumnReorder As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowColumnReorder { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowColumnReorder : bool with get, set" Usage="System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user can drag column headers to reorder columns in the control.</summary>
        <value>
          <see langword="true" /> 如果允许拖放列重新排序;否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值设置<xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>属性无任何效果，除非<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Details>。 可以使用此属性以允许用户在运行时重新列定位控件中。 当<xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>属性设置为`true`，用户可以放置控件以满足你的应用程序在其需求的方式显示项及其子项中的列。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件：  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrangeIcons">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Arranges items in the control when they are displayed as icons.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons();" />
      <MemberSignature Language="F#" Value="member this.ArrangeIcons : unit -&gt; unit" Usage="listView.ArrangeIcons " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arranges items in the control when they are displayed as icons based on the value of the <see cref="P:System.Windows.Forms.ListView.Alignment" /> property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法仅有用<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。 调用此版本的<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法排列基于值的项<xref:System.Windows.Forms.ListView.Alignment%2A>属性。 要使项对齐基于一个值，不同于<xref:System.Windows.Forms.ListView.Alignment%2A>属性，使用其他版本的<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons (System.Windows.Forms.ListViewAlignment value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons(valuetype System.Windows.Forms.ListViewAlignment value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons (value As ListViewAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons(System::Windows::Forms::ListViewAlignment value);" />
      <MemberSignature Language="F#" Value="member this.ArrangeIcons : System.Windows.Forms.ListViewAlignment -&gt; unit" Usage="listView.ArrangeIcons value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListViewAlignment" />
      </Parameters>
      <Docs>
        <param name="value">One of the <see cref="T:System.Windows.Forms.ListViewAlignment" /> values.</param>
        <summary>Arranges items in the control when they are displayed as icons with a specified alignment setting.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法仅有用<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。 此版本的<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法排列中的图标<xref:System.Windows.Forms.ListView>基于<xref:System.Windows.Forms.ListViewAlignment>中指定的值`value`参数。 调用此方法不会更改的值<xref:System.Windows.Forms.ListView.Alignment%2A>的控件属性。 此方法用于排列在使用不同的值的控件上的图标<xref:System.Windows.Forms.ListView.Alignment%2A>属性。 要使项对齐基于值<xref:System.Windows.Forms.ListView.Alignment%2A>属性，使用其他版本的<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The value specified in the <paramref name="value" /> parameter is not a member of the <see cref="T:System.Windows.Forms.ListViewAlignment" /> enumeration.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoArrange">
      <MemberSignature Language="C#" Value="public bool AutoArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AutoArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoArrange : bool with get, set" Usage="System.Windows.Forms.ListView.AutoArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether icons are automatically kept arranged.</summary>
        <value>
          <see langword="true" /> 如果图标是否自动进行排列和对齐到网格;否则为<see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.AutoArrange%2A>仅属性中的项的排列<xref:System.Windows.Forms.ListView>控制<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。 若要更改中的项的对齐方式<xref:System.Windows.Forms.ListView>控制，请使用<xref:System.Windows.Forms.ListView.Alignment%2A>属性。 你可以使用<xref:System.Windows.Forms.ListView.AutoArrange%2A>以确保中的所有项你<xref:System.Windows.Forms.ListView>自动排列控件以避免在运行时的重叠。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumn (columnIndex As Integer, headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumn(int columnIndex, System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumn : int * System.Windows.Forms.ColumnHeaderAutoResizeStyle -&gt; unit" Usage="listView.AutoResizeColumn (columnIndex, headerAutoResize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The zero-based index of the column to resize.</param>
        <param name="headerAutoResize">One of the <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> values.</param>
        <summary>Resizes the width of the given column as indicated by the resize style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法才会生效一次<xref:System.Windows.Forms.ListView>和包含<xref:System.Windows.Forms.Form>已构造和<xref:System.Windows.Forms.ListView>列标题和列填充有一些项。 如果新项添加到<xref:System.Windows.Forms.ListView>，列不会调整大小，除非<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>会再次调用。  
  
   
  
## Examples  
 下面的示例初始化<xref:System.Windows.Forms.ListView>详细信息视图中和自动调整大小的列使用<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>方法。 若要运行此示例，请将此代码粘贴到 Windows 窗体和调用`InitializeResizingListView`从窗体的构造函数的方法或<xref:System.Windows.Forms.Form.Load>事件处理程序。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is greater than 0 when <see cref="P:System.Windows.Forms.ListView.Columns" /> is <see langword="null" />  -or-  <paramref name="columnIndex" /> is less than 0 or greater than the number of columns set.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="headerAutoResize" /> is not a member of the <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> enumeration.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumns(System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumns (headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumns(System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumns : System.Windows.Forms.ColumnHeaderAutoResizeStyle -&gt; unit" Usage="listView.AutoResizeColumns headerAutoResize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="headerAutoResize">One of the <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> values.</param>
        <summary>Resizes the width of the columns as indicated by the resize style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法才会生效一次<xref:System.Windows.Forms.ListView>和包含<xref:System.Windows.Forms.Form>已构造和<xref:System.Windows.Forms.ListView>列标题和列填充有一些项。 如果新项添加到<xref:System.Windows.Forms.ListView>，列不会调整大小，除非<xref:System.Windows.Forms.ListView.AutoResizeColumns%2A>会再次调用。  
  
   
  
## Examples  
 下面的代码示例演示如何初始化<xref:System.Windows.Forms.ListView>详细信息视图和自动调整大小使用的列中<xref:System.Windows.Forms.ListView.AutoResizeColumns%2A>方法。 若要运行此示例，请将此代码粘贴到 Windows 窗体和调用`InitializeResizingListView2`从窗体的构造函数的方法或<xref:System.Windows.Forms.Form.Load>事件处理程序。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> is called with a value other than <see cref="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.None" /> when <see cref="P:System.Windows.Forms.ListView.View" /> is not set to <see cref="F:System.Windows.Forms.View.Details" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListView.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color.</summary>
        <value>
          <see cref="T:System.Drawing.Color" />的背景。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an <see cref="T:System.Windows.Forms.ImageLayout" /> value.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性不起作用的背景图像的布局<xref:System.Windows.Forms.ListView>控件，因此它不会显示在设计器或 intellisense。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ImageLayout" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.ListView.BackgroundImageLayout" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageTiled">
      <MemberSignature Language="C#" Value="public bool BackgroundImageTiled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BackgroundImageTiled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberSignature Language="VB.NET" Value="Public Property BackgroundImageTiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BackgroundImageTiled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageTiled : bool with get, set" Usage="System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the background image of the <see cref="T:System.Windows.Forms.ListView" /> should be tiled.</summary>
        <value>
          <see langword="true" /> 如果的背景图像<see cref="T:System.Windows.Forms.ListView" />平铺; 否则为应为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.BackgroundImageTiled%2A>属性返回`false`如果未设置图像。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ BeforeLabelEdit;" />
      <MemberSignature Language="F#" Value="member this.BeforeLabelEdit : System.Windows.Forms.LabelEditEventHandler " Usage="member this.BeforeLabelEdit : System.Windows.Forms.LabelEditEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user starts editing the label of an item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.BeforeLabelEdit>事件发生时在用户开始修改项的文本。 如果事件处理程序取消此事件，则用户无法编辑文本。 你可以使用此事件来防止用户编辑中的特定项<xref:System.Windows.Forms.ListView>控件。 如果<xref:System.Windows.Forms.ListView.LabelEdit%2A>属性<xref:System.Windows.Forms.ListView>控件设置为`false`、<xref:System.Windows.Forms.ListView.BeforeLabelEdit>不会引发事件; 若要编辑项标签的所有用户尝试将自动被都拒绝。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何处理<xref:System.Windows.Forms.ListView.BeforeLabelEdit>事件以及如何使用<xref:System.Windows.Forms.LabelEditEventArgs.Item%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A?displayProperty=nameWithType>属性。 若要运行该示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>控件名为`ListView1`并且填充了至少三个项。 请确保在示例中的事件处理程序与其事件相关联。  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberSignature Language="F#" Value="member this.BeginUpdate : unit -&gt; unit" Usage="listView.BeginUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prevents the control from drawing until the <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> method is called.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 添加到多个项的首选的方法<xref:System.Windows.Forms.ListView>是使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A>方法<xref:System.Windows.Forms.ListView.ListViewItemCollection>(通过访问<xref:System.Windows.Forms.ListView.Items%2A>属性<xref:System.Windows.Forms.ListView>)。 这使您可以向单个操作中的列表添加项的数组。 但是，如果你想要添加项时使用一个<xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A>方法<xref:System.Windows.Forms.ListView.ListViewItemCollection>类，可以使用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>方法，以防止重新绘制控件<xref:System.Windows.Forms.ListView>某一项添加每次。 当你已完成的任务将项添加到控件时，调用<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法，以使<xref:System.Windows.Forms.ListView>重绘窗体。 这种方法添加项可以防止闪烁的绘制<xref:System.Windows.Forms.ListView>大量项添加到控件时。  
  
 如果<xref:System.Windows.Forms.ListView.BeginUpdate%2A>调用一次以上，<xref:System.Windows.Forms.ListView.EndUpdate%2A>必须调用的等效次数。 上次调用直到<xref:System.Windows.Forms.ListView.EndUpdate%2A><xref:System.Windows.Forms.ListView>不会重新绘制。 除此之外，多次调用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>不起作用。  
  
   
  
## Examples  
 下面的代码示例演示如何初始化<xref:System.Windows.Forms.ListView>控件，以包含复选框。 它还演示如何使用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>和<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法。 若要运行此示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>名为`ListView1`。 调用`InititalizeListView`从窗体的构造函数的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.EndUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderStyle : System.Windows.Forms.BorderStyle with get, set" Usage="System.Windows.Forms.ListView.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border style of the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.BorderStyle" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Windows.Forms.ListView.BorderStyle%2A>属性可以更改的边框样式<xref:System.Windows.Forms.ListView>控件的窗体上其他控件的边框样式设置相匹配。 例如，如果没有任何其他控件在窗体上显示一个边框，你可以设置<xref:System.Windows.Forms.ListView.BorderStyle%2A>属性<xref:System.Windows.Forms.ListView>控制转移到<xref:System.Windows.Forms.BorderStyle.None>以匹配其他控件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.BorderStyle" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CacheVirtualItems">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.CacheVirtualItems" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CacheVirtualItems As CacheVirtualItemsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::CacheVirtualItemsEventHandler ^ CacheVirtualItems;" />
      <MemberSignature Language="F#" Value="member this.CacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventHandler " Usage="member this.CacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CacheVirtualItemsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the contents of the display area for a <see cref="T:System.Windows.Forms.ListView" /> in virtual mode has changed, and the <see cref="T:System.Windows.Forms.ListView" /> determines that a new range of items is needed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 才会发生此事件时<xref:System.Windows.Forms.ListView.VirtualMode%2A>是`true`。 处理此事件允许<xref:System.Windows.Forms.ListView>可更新项信息保存在缓存中，因此很容易获得。 这可以提高大型列表或列表的项的计算费用较高的性能。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序检查以确保缓存刷新在真正必要的然后重新生成缓存。 此代码示例摘自更大的示例为提供<xref:System.Windows.Forms.ListView.VirtualMode%2A>属性。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckBoxes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckBoxes : bool with get, set" Usage="System.Windows.Forms.ListView.CheckBoxes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a check box appears next to each item in the control.</summary>
        <value>
          <see langword="true" /> 如果在每个项旁边会出现一个复选框<see cref="T:System.Windows.Forms.ListView" />控件的指针; 否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性允许您在列表中显示每个项旁的复选框。 这使你的应用程序，以显示的项列表 (和子项如果<xref:System.Windows.Forms.ListView.View%2A>属性设置为`View.Details`) 用户可以选择通过单击复选框。 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性提供了一个方法来选择多个项<xref:System.Windows.Forms.ListView>而无需使用 CTRL 键的控件。 具体取决于你的应用程序，使用复选框来选择项，而不是标准多个选择方法可能会为用户更容易。 即使<xref:System.Windows.Forms.ListView.MultiSelect%2A>属性<xref:System.Windows.Forms.ListView>控件设置为`false`，仍可显示复选框，并向用户提供多重选择功能。 如果你想要选择多个项还仍想要允许用户从执行你的应用程序中的某个操作的列表中选择多个项，此功能会很有用。  
  
 若要确定当已选中项，创建的事件处理程序<xref:System.Windows.Forms.ListView.ItemCheck>事件。 若要获取的签入的所有项目<xref:System.Windows.Forms.ListView>，使用<xref:System.Windows.Forms.ListView.CheckedItems%2A>属性来访问<xref:System.Windows.Forms.ListView.CheckedIndexCollection>控件。 若要获取已签入的所有项的索引<xref:System.Windows.Forms.ListView>，使用<xref:System.Windows.Forms.ListView.CheckedIndices%2A>属性。  
  
 如果<xref:System.Windows.Forms.ImageList>中指定<xref:System.Windows.Forms.ListView.StateImageList%2A>属性、 0 和 1 中的索引位置处图像<xref:System.Windows.Forms.ImageList>而不是复选框显示。 索引位置 0 处的映像显示而不是未选中的复选框，和中的索引位置 1 的映像显示而不是已选中的复选框。  
  
> [!NOTE]
>  当设置此属性为`true`、<xref:System.Windows.Forms.ListView.ItemCheck>事件发生。  
>   
>  不是复选框时，所显示<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Tile>。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="P:System.Windows.Forms.ListView.MultiSelect" />
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedIndices As ListView.CheckedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedIndexCollection ^ CheckedIndices { System::Windows::Forms::ListView::CheckedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CheckedIndices : System.Windows.Forms.ListView.CheckedIndexCollection" Usage="System.Windows.Forms.ListView.CheckedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the indexes of the currently checked items in the control.</summary>
        <value>A<see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />包含当前选中项的索引。 如果当前未不选中任何项，一个空<see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />返回。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性才有用<xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性<xref:System.Windows.Forms.ListView>控件设置为`true`。 <xref:System.Windows.Forms.ListView.CheckedIndices%2A>属性返回一个集合包含中的索引位置<xref:System.Windows.Forms.ListView.ListViewItemCollection>已签入控制的所有项。 有关如何操作集合中的项的详细信息，请参阅<xref:System.Windows.Forms.ListView.CheckedIndexCollection>。  
  
 如果你想要获取的签入的项集合<xref:System.Windows.Forms.ListView>控件，而不是已检查，使用的项的索引位置<xref:System.Windows.Forms.ListView.CheckedItems%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedItems" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedListViewItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedListViewItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedItems As ListView.CheckedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedListViewItemCollection ^ CheckedItems { System::Windows::Forms::ListView::CheckedListViewItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CheckedItems : System.Windows.Forms.ListView.CheckedListViewItemCollection" Usage="System.Windows.Forms.ListView.CheckedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the currently checked items in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> ，其中包含当前选中的项。 如果当前未不选中任何项，一个空<see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />返回。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性才有用<xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性<xref:System.Windows.Forms.ListView>控件设置为`true`。 <xref:System.Windows.Forms.ListView.CheckedItems%2A>属性返回一个集合，其中包含已签入控制的所有项。 有关如何操作集合中的项的详细信息，请参阅<xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>。  
  
 如果你想要获取的集合中的索引位置<xref:System.Windows.Forms.ListView.ListViewItemCollection>签入的项<xref:System.Windows.Forms.ListView>控件，而不是已检查，使用的项<xref:System.Windows.Forms.ListView.CheckedIndices%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何检查<xref:System.Windows.Forms.ListView>用于处理<xref:System.Windows.Forms.ListView.ItemChecked>事件。 该示例使用<xref:System.Windows.Forms.ListView.CheckedItems%2A>属性项是选中或取消选中每次计算新价格。 若要运行此示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>名为`ListView1`和<xref:System.Windows.Forms.TextBox>名为`Textbox1`。 调用`InititalizeListView`从窗体的构造函数的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="listView.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all items and columns from the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此方法以删除所有项目和中的列<xref:System.Windows.Forms.ListView>而无需调用各个控件`Clear`方法从<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>和<xref:System.Windows.Forms.ListView.ListViewItemCollection>类。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.Clear%2A>方法并不会清除<xref:System.Windows.Forms.ListView.Groups%2A>指定的<xref:System.Windows.Forms.ListView>控件。 若要清除<xref:System.Windows.Forms.ListView.Groups%2A>调用<xref:System.Windows.Forms.ListViewGroupCollection.Clear%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Windows.Forms.ListView.Clear%2A>和<xref:System.Windows.Forms.ListViewItem.Selected%2A?displayProperty=nameWithType>成员。 若要运行此示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>名为`ListView1`和一个按钮，位于名为窗体的底部`Button1`。 调用`InitializeListView`从窗体的构造函数的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="ColumnClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnClickEventHandler ColumnClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnClickEventHandler ColumnClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnClick As ColumnClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnClickEventHandler ^ ColumnClick;" />
      <MemberSignature Language="F#" Value="member this.ColumnClick : System.Windows.Forms.ColumnClickEventHandler " Usage="member this.ColumnClick : System.Windows.Forms.ColumnClickEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks a column header within the list view control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnClick>事件发生在用户单击中的项的详细信息视图中的列标头之一时<xref:System.Windows.Forms.ListView>控件 (时<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Details>)。 <xref:System.Windows.Forms.ListView.ColumnClick>事件通常用于中的项进行排序<xref:System.Windows.Forms.ListView>使用所单击的列与列进行排序。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例创建一个包含窗体<xref:System.Windows.Forms.ListView>控件项中的列时进行手动排序<xref:System.Windows.Forms.ListView>控件被单击。 该示例定义一个名为类`ListViewItemComparer`实现<xref:System.Collections.IComparer?displayProperty=nameWithType>接口执行<xref:System.Windows.Forms.ListViewItem>比较。 该示例创建的实例`ListViewItemComparer`并使用它来设置<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性<xref:System.Windows.Forms.ListView>控件。 <xref:System.Windows.Forms.ListView.Sort%2A>方法调用<xref:System.Windows.Forms.ListView.ColumnClick>事件处理程序使用中定义的方法`ListViewItemComparer`来执行的项，基于所单击的列排序。  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnReordered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnReordered As ColumnReorderedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnReorderedEventHandler ^ ColumnReordered;" />
      <MemberSignature Language="F#" Value="member this.ColumnReordered : System.Windows.Forms.ColumnReorderedEventHandler " Usage="member this.ColumnReordered : System.Windows.Forms.ColumnReorderedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnReorderedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the column header order is changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnReordered>事件是可取消的事件，并且可以通过处理该事件并设置取消<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性`true`。 但是，如果取消了该事件，<xref:System.Windows.Forms.ColumnReorderedEventArgs.NewDisplayIndex%2A>的<xref:System.Windows.Forms.ColumnReorderedEventArgs>不会更改为<xref:System.Windows.Forms.ColumnReorderedEventArgs.OldDisplayIndex%2A>值。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.ColumnReordered>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.ColumnReordered>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#467](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#467)]
 [!code-vb[System.Windows.Forms.EventExamples#467](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#467)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ColumnHeaderCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ColumnHeaderCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As ListView.ColumnHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ColumnHeaderCollection ^ Columns { System::Windows::Forms::ListView::ColumnHeaderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Columns : System.Windows.Forms.ListView.ColumnHeaderCollection" Usage="System.Windows.Forms.ListView.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ColumnHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of all column headers that appear in the control.</summary>
        <value>A<see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />表示列标题时出现<see cref="P:System.Windows.Forms.ListView.View" />属性设置为<see cref="F:System.Windows.Forms.View.Details" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Columns%2A>属性返回一个集合包含<xref:System.Windows.Forms.ColumnHeader>中显示的对象<xref:System.Windows.Forms.ListView>控件。 <xref:System.Windows.Forms.ColumnHeader> 对象定义中显示的列<xref:System.Windows.Forms.ListView>控制<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Details>。 每一列用于显示中每个项的子项信息<xref:System.Windows.Forms.ListView>。 有关如何操作集合中的项的详细信息，请参阅<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>。  
  
> [!NOTE]
>  如果你<xref:System.Windows.Forms.ListView>控件没有指定任何列标题和你设置<xref:System.Windows.Forms.ListView.View%2A>属性<xref:System.Windows.Forms.View.Details>、<xref:System.Windows.Forms.ListView>控件将不显示任何项。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanged As ColumnWidthChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangedEventHandler ^ ColumnWidthChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventHandler " Usage="member this.ColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the width of a column is successfully changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果列的宽度更改已取消在不会发生此事件<xref:System.Windows.Forms.ListView.ColumnWidthChanging>事件  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.ColumnWidthChanged>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.ColumnWidthChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#468](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#468)]
 [!code-vb[System.Windows.Forms.EventExamples#468](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#468)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanging">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanging As ColumnWidthChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangingEventHandler ^ ColumnWidthChanging;" />
      <MemberSignature Language="F#" Value="member this.ColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventHandler " Usage="member this.ColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the width of a column is changing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件可以检查新的列宽度<xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType>属性，并取消事件，如果你选择通过设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性`true`。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何处理<xref:System.Windows.Forms.ListView.ColumnWidthChanging>事件。 它还演示了<xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType>和<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>成员。 若要运行此示例，请将代码粘贴到 Windows 窗体。 调用`InitializeListView1`从窗体的构造函数或<xref:System.Windows.Forms.Form.Load>事件处理程序。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateHandle : unit -&gt; unit" Usage="listView.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a handle for the control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.ListView.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is not relevant for this class.</summary>
        <value>在所有情况下均为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.ListView.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default size of the control.</summary>
        <value>控件的默认 <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="listView.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.ListView" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Windows.Forms.ListView.Dispose%2A>方法时不再需要该组件。 此方法中删除组件从其容器 （如果该组件具有站点） 并触发释放事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoubleBuffered : bool with get, set" Usage="System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</summary>
        <value>如果应使用双缓冲绘制控件的图面，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColumnHeader">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawColumnHeader" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawColumnHeader As DrawListViewColumnHeaderEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewColumnHeaderEventHandler ^ DrawColumnHeader;" />
      <MemberSignature Language="F#" Value="member this.DrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventHandler " Usage="member this.DrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewColumnHeaderEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the details view of a <see cref="T:System.Windows.Forms.ListView" /> is drawn and the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件可让你自定义的外观<xref:System.Windows.Forms.ListView>使用所有者描述的控件。 引发该事件时，才<xref:System.Windows.Forms.ListView.OwnerDraw%2A>属性设置为`true`和<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>。 每个列标题控件中可能发生此事件。 所有者描述的详细信息，请参阅<xref:System.Windows.Forms.ListView.OwnerDraw%2A>属性参考主题。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例提供的实现<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件处理程序。 有关完整示例，包括的实现<xref:System.Windows.Forms.ListView.DrawSubItem>事件处理程序，请参阅<xref:System.Windows.Forms.ListView.OwnerDraw%2A>参考主题。  
  
 [!code-csharp[ListViewOwnerDraw#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#5)]
 [!code-vb[ListViewOwnerDraw#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawListViewItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawListViewItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawListViewItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a <see cref="T:System.Windows.Forms.ListView" /> is drawn and the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件可让你自定义的外观<xref:System.Windows.Forms.ListView>使用所有者描述的控件。 引发该事件时，才<xref:System.Windows.Forms.ListView.OwnerDraw%2A>属性设置为`true`。 有关所有者描述的详细信息，请参阅<xref:System.Windows.Forms.ListView.OwnerDraw%2A>属性参考主题。  
  
 <xref:System.Windows.Forms.ListView.DrawItem>事件可以针对每个发生<xref:System.Windows.Forms.ListView>项。 当<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>、<xref:System.Windows.Forms.ListView.DrawSubItem>和<xref:System.Windows.Forms.ListView.DrawColumnHeader>也会发生事件。 在这种情况下，你可以处理<xref:System.Windows.Forms.ListView.DrawItem>事件来绘制所有项，如 background，常见的元素，并处理<xref:System.Windows.Forms.ListView.DrawSubItem>事件以便都绘制为各个子项，如文本值的元素。 此外可以在中绘制所有项<xref:System.Windows.Forms.ListView>控制只使用一个的两个事件，尽管这可能是不太方便。 若要绘制的详细信息视图中列标题，你必须处理<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件。  
  
> [!NOTE]
>  由于在基础的 Win32 控件中，一个 bug<xref:System.Windows.Forms.ListView.DrawItem>同时发生的事件<xref:System.Windows.Forms.ListView.DrawSubItem>当鼠标指针移过行的详细信息视图中的每一行的事件，导致的任何内容中绘制<xref:System.Windows.Forms.ListView.DrawSubItem>事件处理程序绘制自定义背景中绘制转移<xref:System.Windows.Forms.ListView.DrawItem>事件处理程序。 请参阅中的示例<xref:System.Windows.Forms.ListView.OwnerDraw%2A>额外事件发生时使每行一种解决方法的参考主题。 备用解决方法是将所有自定义绘制代码放入<xref:System.Windows.Forms.ListView.DrawSubItem>事件处理程序并绘制整个项 （包括子项） 的背景时，才<xref:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex%2A?displayProperty=nameWithType>值为 0。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例提供的实现<xref:System.Windows.Forms.ListView.DrawItem>事件处理程序。 有关完整示例，请参阅<xref:System.Windows.Forms.ListView.OwnerDraw%2A>参考主题。  
  
 [!code-csharp[ListViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#3)]
 [!code-vb[ListViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawSubItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawSubItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawSubItem As DrawListViewSubItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewSubItemEventHandler ^ DrawSubItem;" />
      <MemberSignature Language="F#" Value="member this.DrawSubItem : System.Windows.Forms.DrawListViewSubItemEventHandler " Usage="member this.DrawSubItem : System.Windows.Forms.DrawListViewSubItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewSubItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the details view of a <see cref="T:System.Windows.Forms.ListView" /> is drawn and the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件可让你自定义的外观<xref:System.Windows.Forms.ListView>使用所有者描述的控件。 引发该事件时，才<xref:System.Windows.Forms.ListView.OwnerDraw%2A>属性设置为`true`和<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>。 所有者描述的详细信息，请参阅<xref:System.Windows.Forms.ListView.OwnerDraw%2A>属性参考主题。  
  
> [!NOTE]
>  子项信息通常出现在磁贴视图，以及详细信息视图中，但在磁贴视图中，它必须绘制的处理程序中<xref:System.Windows.Forms.ListView.DrawItem>事件。  
  
 <xref:System.Windows.Forms.ListView.DrawSubItem>事件可以针对每个发生<xref:System.Windows.Forms.ListView>子项。 你可以处理<xref:System.Windows.Forms.ListView.DrawItem>事件来绘制所有子项，如 background，常见的元素，并处理<xref:System.Windows.Forms.ListView.DrawSubItem>事件以便都绘制为各个子项，如文本值的元素。 此外可以在中绘制所有项<xref:System.Windows.Forms.ListView>控制只使用一个的两个事件，尽管这可能是不太方便。 若要绘制的详细信息视图中列标题，你必须处理<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.DrawSubItem>事件不会发生，无任何子项<xref:System.Windows.Forms.ColumnHeader>对象已添加到<xref:System.Windows.Forms.ListView.Columns%2A>集合。 另请注意，每个的第一个子项<xref:System.Windows.Forms.ListViewItem>对象表示的父项本身，并且将显示在第一列。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例提供的实现<xref:System.Windows.Forms.ListView.DrawSubItem>事件处理程序。 有关完整示例，请参阅<xref:System.Windows.Forms.ListView.OwnerDraw%2A>参考主题。  
  
 [!code-csharp[ListViewOwnerDraw#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#4)]
 [!code-vb[ListViewOwnerDraw#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberSignature Language="F#" Value="member this.EndUpdate : unit -&gt; unit" Usage="listView.EndUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resumes drawing of the list view control after drawing is suspended by the <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 添加到多个项的首选的方法<xref:System.Windows.Forms.ListView>是使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A>方法<xref:System.Windows.Forms.ListView.ListViewItemCollection>(通过访问<xref:System.Windows.Forms.ListView.Items%2A>属性<xref:System.Windows.Forms.ListView>)。 这使您可以向单个操作中的列表添加项的数组。 但是，如果你想要添加项时使用一个<xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A>方法<xref:System.Windows.Forms.ListView.ListViewItemCollection>类，可以使用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>方法，以防止重新绘制控件<xref:System.Windows.Forms.ListView>每次添加一个项。 完成向控件添加项的任务后，请调用<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法，以使<xref:System.Windows.Forms.ListView>重绘窗体。 这种方法添加项可以防止闪烁的绘制<xref:System.Windows.Forms.ListView>大量的项添加到控件时。  
  
 如果<xref:System.Windows.Forms.ListView.BeginUpdate%2A>调用一次以上，<xref:System.Windows.Forms.ListView.EndUpdate%2A>必须调用的等效次数。 上次调用直到<xref:System.Windows.Forms.ListView.EndUpdate%2A><xref:System.Windows.Forms.ListView>不会重新绘制。 除此之外，多次调用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>不起作用。  
  
   
  
## Examples  
 下面的代码示例演示如何初始化<xref:System.Windows.Forms.ListView>控件，以包含复选框。 它还演示如何使用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>和<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法。 若要运行此示例，请将以下代码粘贴到一个窗体包含<xref:System.Windows.Forms.ListView>名为`ListView1`。 调用`InititalizeListView`从窗体的构造函数的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.BeginUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureVisible (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnsureVisible(int index);" />
      <MemberSignature Language="F#" Value="member this.EnsureVisible : int -&gt; unit" Usage="listView.EnsureVisible index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the item to scroll into view.</param>
        <summary>Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此方法以确保特定的项是在内可见<xref:System.Windows.Forms.ListView>控件。 中的项在执行验证时<xref:System.Windows.Forms.ListView>，可以调用<xref:System.Windows.Forms.ListView.EnsureVisible%2A>方法，以确保失败验证项目会显示在<xref:System.Windows.Forms.ListView>控制选项可允许用户在项上执行更改。 如果你想要确保项可见位于可视区域的上方<xref:System.Windows.Forms.ListView>控制，请调用<xref:System.Windows.Forms.ListView.EnsureVisible%2A>方法将滚动控件的内容，直到它控件的可视区域中的第一个项。 如果该项是下方的可视区域<xref:System.Windows.Forms.ListView>控制，请调用<xref:System.Windows.Forms.ListView.EnsureVisible%2A>方法将会滚动的内容<xref:System.Windows.Forms.ListView>控制到相应项的控件的可视区域的最后一项。  
  
 若要确定某个项的显示区域的顶部是否位于<xref:System.Windows.Forms.ListView>控制，请使用<xref:System.Windows.Forms.ListView.TopItem%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.TopItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindItemWithText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> with that begins with the given text value.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.FindItemWithText : string -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindItemWithText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to search for.</param>
        <summary>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</summary>
        <returns>The first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 搜索不区分大小写。  
  
 `text`参数可以指定所需的匹配文本的子字符串。 此外，此方法将返回具有指定文本开头的第一个项。 例如，如果<xref:System.Windows.Forms.ListView>包含两个列表项-设置为"尖括号"和第二个项的文本的第一个项的文本设置为"bracket"-调用<xref:System.Windows.Forms.ListView.FindItemWithText%2A>传递`brack`作为参数将返回其文本是"bracket"的项。  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A>方法返回`null`如果列表为空或没有匹配项。  
  
   
  
## Examples  
 下面的代码示例演示<xref:System.Windows.Forms.ListView.FindItemWithText%2A>方法。 若要运行此示例，请将以下代码粘贴到 Windows 窗体和调用`InitializeFindListView`从窗体的构造函数的方法或<xref:System.Windows.Forms.Form.Load>事件处理程序。 单击此按钮以查看方法调用的结果。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindItemWithText : string * bool * int -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindItemWithText (text, includeSubItemsInSearch, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The text to search for.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> to include subitems in the search; otherwise, <see langword="false" />.</param>
        <param name="startIndex">The index of the item at which to start the search.</param>
        <summary>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> or <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, if indicated, that begins with the specified text value. The search starts at the specified index.</summary>
        <returns>The first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 搜索不区分大小写。  
  
 `text`参数可以指定所需的匹配文本的子字符串。 此外，此方法将返回具有指定文本开头的第一个项。 例如，如果<xref:System.Windows.Forms.ListView>包含两个列表项-设置为"尖括号"和第二个项的文本的第一个项的文本设置为"bracket"-调用<xref:System.Windows.Forms.ListView.FindItemWithText%2A>传递"b 机架"参数将返回的项的文本是"bracket"。  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A>方法返回`null`如果列表为空或没有匹配项。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is less 0 or more than the number items in the <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex, bool isPrefixSearch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer, isPrefixSearch As Boolean) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="F#" Value="member this.FindItemWithText : string * bool * int * bool -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindItemWithText (text, includeSubItemsInSearch, startIndex, isPrefixSearch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="isPrefixSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to search for.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> to include subitems in the search; otherwise, <see langword="false" />.</param>
        <param name="startIndex">The index of the item at which to start the search.</param>
        <param name="isPrefixSearch">
          <see langword="true" /> to allow partial matches; otherwise, <see langword="false" />.</param>
        <summary>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> or <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, if indicated, that begins with the specified text value. The search starts at the specified index.</summary>
        <returns>The first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A>方法返回`null`如果列表为空或没有匹配项。  
  
 搜索不区分大小写。  
  
 `text`参数可以指定所需的匹配文本的子字符串。 此方法将返回以指定的文本开头的第一项，除非`false`传入`isPrefixSearch`。 例如，如果<xref:System.Windows.Forms.ListView>包含两个列表项-设置为"尖括号"和第二个项的文本的第一个项的文本设置为"bracket"-调用<xref:System.Windows.Forms.ListView.FindItemWithText%2A>传递"b 机架"作为搜索文本将返回项的文本是"bracket"。 如果`isPrefixSearch`设置为`false`，此调用将返回`null`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is less than 0 or more than the number of items in the <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindNearestItem">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Finds the next item from a given point, searching in the specified direction.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint dir, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint dir, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.FindNearestItem : System.Windows.Forms.SearchDirectionHint * System.Drawing.Point -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindNearestItem (dir, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="dir">One of the <see cref="T:System.Windows.Forms.SearchDirectionHint" /> values.</param>
        <param name="point">The point at which to begin searching.</param>
        <summary>Finds the next item from the given point, searching in the specified direction</summary>
        <returns>The <see cref="T:System.Windows.Forms.ListViewItem" /> that is closest to the given point, searching in the specified direction.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A>方法返回`null`如果在给定的方向中不找到任何项。 标识最近的项而异，运行应用程序的操作系统和将会影响结果<xref:System.Windows.Forms.ListView.FindNearestItem%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> is set to a value other than <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint searchDirection, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNearestItem (searchDirection As SearchDirectionHint, x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.FindNearestItem : System.Windows.Forms.SearchDirectionHint * int * int -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindNearestItem (searchDirection, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchDirection" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="searchDirection">One of the <see cref="T:System.Windows.Forms.SearchDirectionHint" /> values.</param>
        <param name="x">The x-coordinate for the point at which to begin searching.</param>
        <param name="y">The y-coordinate for the point at which to begin searching.</param>
        <summary>Finds the next item from the given x- and y-coordinates, searching in the specified direction.</summary>
        <returns>The <see cref="T:System.Windows.Forms.ListViewItem" /> that is closest to the given coordinates, searching in the specified direction.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A>方法返回`null`如果在给定的方向中不找到任何项。 标识最近的项而异，运行应用程序的操作系统和将会影响结果<xref:System.Windows.Forms.ListView.FindNearestItem%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> is set to a value other than <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FocusedItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FocusedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem FocusedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FocusedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusedItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ FocusedItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusedItem : System.Windows.Forms.ListViewItem with get, set" Usage="System.Windows.Forms.ListView.FocusedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the item in the control that currently has focus.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewItem" /> ，表示具有焦点的项或<see langword="null" />如果任何项不具有焦点<see cref="T:System.Windows.Forms.ListView" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FocusedItem%2A>属性返回<xref:System.Windows.Forms.ListViewItem>，表示当前正在显示的聚焦框的项<xref:System.Windows.Forms.ListView>控件。 因为<xref:System.Windows.Forms.ListView>控件具有不与它显示的项不直接编辑区域时<xref:System.Windows.Forms.ListView>控件有焦点中的项<xref:System.Windows.Forms.ListView>显示焦点标线放置在其项文本两侧。 通常情况下，最后选择的项在<xref:System.Windows.Forms.ListView>控件是具有焦点的项。 虽然项目可能显示焦点标线，但实际上它可能不是中的选定的项<xref:System.Windows.Forms.ListView>。 使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>或<xref:System.Windows.Forms.ListView.SelectedIndices%2A>属性来获取中的选定的项<xref:System.Windows.Forms.ListView>控件，<xref:System.Windows.Forms.ListView.FocusedItem%2A>不一定选择属性。 你可以使用<xref:System.Windows.Forms.ListView.FocusedItem%2A>属性来确定哪一项上一次单击在<xref:System.Windows.Forms.ListView>控件，而不考虑所选内容状态。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListView.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> ，它是前景颜色。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FullRowSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property FullRowSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullRowSelect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FullRowSelect : bool with get, set" Usage="System.Windows.Forms.ListView.FullRowSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether clicking an item selects all its subitems.</summary>
        <value>
          <see langword="true" /> 如果将该项目，其所有子项; 单击某项选择<see langword="false" />如果单击某项选择项本身。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FullRowSelect%2A>属性无任何效果，除非<xref:System.Windows.Forms.ListView.View%2A>属性<xref:System.Windows.Forms.ListView>控件设置为<xref:System.Windows.Forms.View.Details>。 <xref:System.Windows.Forms.ListView.FullRowSelect%2A>属性通常是时使用<xref:System.Windows.Forms.ListView>具有许多子项和它的显示项务必要能够项文本是不可见由于水平滚动的控件的内容时，将显示所选的项目。  
  
> [!NOTE]
>  当<xref:System.Windows.Forms.ListView.FullRowSelect%2A>设置为`true`的工具提示<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>不会显示; 仅父级的工具提示<xref:System.Windows.Forms.ListViewItem>显示。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="F:System.Windows.Forms.View.Details" />
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem GetItemAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem GetItemAt(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemAt (x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ GetItemAt(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.GetItemAt : int * int -&gt; System.Windows.Forms.ListViewItem" Usage="listView.GetItemAt (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate of the location to search for an item (expressed in client coordinates).</param>
        <param name="y">The y-coordinate of the location to search for an item (expressed in client coordinates).</param>
        <summary>Retrieves the item at the specified location.</summary>
        <returns>A <see cref="T:System.Windows.Forms.ListViewItem" /> that represents the item at the specified position. If there is no item at the specified location, the method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.GetItemAt%2A>方法可让你确定哪一项位于中的客户端区域的特定位置<xref:System.Windows.Forms.ListView>控件。 用户单击或右击子项时，可以使用此方法 (时<xref:System.Windows.Forms.ListView.View%2A>属性设置为`View.Details`) 并且你想要确定哪一项拥有在用户单击鼠标时根据鼠标坐标被单击该子项.  
  
> [!NOTE]
>  当<xref:System.Windows.Forms.ListView.FullRowSelect%2A>属性值是`false`，仅当指定的位置是否在父项 （当控件处于详细信息模式，将显示在第一列） 的边界内时，此方法返回一个项。 必须设置<xref:System.Windows.Forms.ListView.FullRowSelect%2A>属性`true`若要使用此方法，给定位置的边界内的子项中检索项。 你还可以使用<xref:System.Windows.Forms.ListView.HitTest%2A>方法来检索有关特定位置处的项的详细的信息。  
  
 若要执行拖放项内的重定位<xref:System.Windows.Forms.ListView>，你可能想要使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType>方法而不是<xref:System.Windows.Forms.ListView.GetItemAt%2A>方法。 <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType>方法找到最近的项而不考虑鼠标指针所在的位置。 <xref:System.Windows.Forms.ListView.GetItemAt%2A>方法，另一方面，返回`null`如果在指定的位置没有项。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListViewInsertionMark>类支持仅在 Windows XP 和 Windows Server 2003 上，当你的应用程序调用<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Windows.Forms.PictureBox>和<xref:System.Windows.Forms.ListView>控件。 <xref:System.Windows.Forms.PictureBox>通过设置初始化<xref:System.Windows.Forms.PictureBox.BorderStyle%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.PictureBox.SizeMode%2A?displayProperty=nameWithType>属性使用<xref:System.Windows.Forms.BorderStyle>和<xref:System.Windows.Forms.PictureBoxSizeMode>枚举，分别。 <xref:System.Windows.Forms.ListView>填入示例目录中的图片。 <xref:System.Windows.Forms.ListView.GetItemAt%2A>时处理，方法在中使用<xref:System.Windows.Forms.ListView>控件的<xref:System.Windows.Forms.Control.MouseDown>事件，以确定是否选择了某个项。 如果选择了某个项，事件处理程序将显示所选的文件通过设置<xref:System.Windows.Forms.PictureBox.Image%2A?displayProperty=nameWithType>属性。 该示例需要位于 C:\documents and Settings\All Users\Documents\My 收藏 \ 示例图片目录中的 JPG 文件存在。 若要运行此示例，请将代码粘贴到窗体并调用`InitializePictureBox`和`PopulateListView`窗体的构造函数中的方法或`Load`方法。 确保所有事件都都其事件处理程序关联。  
  
 [!code-cpp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetItemRect">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retrieves the bounding rectangle for an item within the control.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemRect : int -&gt; System.Drawing.Rectangle" Usage="listView.GetItemRect index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the item within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> whose bounding rectangle you want to return.</param>
        <summary>Retrieves the bounding rectangle for a specific item within the list view control.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounding rectangle of the specified <see cref="T:System.Windows.Forms.ListViewItem" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的此版本的绑定矩形<xref:System.Windows.Forms.ListView.GetItemRect%2A>方法表示整个项，包括图标、 项文本和子项文本。 若要指定项的特定部分的边框，请使用其他版本的<xref:System.Windows.Forms.ListView.GetItemRect%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index, System.Windows.Forms.ItemBoundsPortion portion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index, valuetype System.Windows.Forms.ItemBoundsPortion portion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32,System.Windows.Forms.ItemBoundsPortion)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer, portion As ItemBoundsPortion) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index, System::Windows::Forms::ItemBoundsPortion portion);" />
      <MemberSignature Language="F#" Value="member this.GetItemRect : int * System.Windows.Forms.ItemBoundsPortion -&gt; System.Drawing.Rectangle" Usage="listView.GetItemRect (index, portion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="portion" Type="System.Windows.Forms.ItemBoundsPortion" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the item within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> whose bounding rectangle you want to return.</param>
        <param name="portion">One of the <see cref="T:System.Windows.Forms.ItemBoundsPortion" /> values that represents a portion of the <see cref="T:System.Windows.Forms.ListViewItem" /> for which to retrieve the bounding rectangle.</param>
        <summary>Retrieves the specified portion of the bounding rectangle for a specific item within the list view control.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounding rectangle for the specified portion of the specified <see cref="T:System.Windows.Forms.ListViewItem" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的此版本的绑定矩形<xref:System.Windows.Forms.ListView.GetItemRect%2A>方法表示仅在指定的项的部分`portion`参数。 若要返回整个项的边框，使用其他版本的<xref:System.Windows.Forms.ListView.GetItemRect%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ItemBoundsPortion" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public bool GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.GridLines" />
      <MemberSignature Language="VB.NET" Value="Public Property GridLines As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GridLines { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.GridLines : bool with get, set" Usage="System.Windows.Forms.ListView.GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether grid lines appear between the rows and columns containing the items and subitems in the control.</summary>
        <value>
          <see langword="true" /> 如果项和子项; 周围绘制网格线否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.GridLines%2A>属性无任何效果，除非<xref:System.Windows.Forms.ListView.View%2A>属性<xref:System.Windows.Forms.ListView>控件设置为<xref:System.Windows.Forms.View.Details>。 <xref:System.Windows.Forms.ListView.GridLines%2A>属性使你可以显示线，以识别的行和列中显示<xref:System.Windows.Forms.ListView>控制当显示项和及其子项。 显示网格线不提供能够调整行和列大小为应用程序，如 Microsoft excel。 只有列可调整大小，如果显示列标题，通过将鼠标指针移到要调整大小的列的右侧，然后单击并拖动直到列所需的大小。 网格线功能用于控件的用户提供项和子项周围的可视边界。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewGroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewGroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Groups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Groups As ListViewGroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewGroupCollection ^ Groups { System::Windows::Forms::ListViewGroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Windows.Forms.ListViewGroupCollection" Usage="System.Windows.Forms.ListView.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of <see cref="T:System.Windows.Forms.ListViewGroup" /> objects assigned to the control.</summary>
        <value>A<see cref="T:System.Windows.Forms.ListViewGroupCollection" />包含中的所有组<see cref="T:System.Windows.Forms.ListView" />控件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>分组功能允许你创建的逻辑上相关 visual 组<xref:System.Windows.Forms.ListView>项。 每个组由文本标题后跟一条横线和分配给该组的项组成。 你可以将左、 右或控件的中心标头文本对齐。 分配给任何组<xref:System.Windows.Forms.ListView>控件显示每当<xref:System.Windows.Forms.ListView.View%2A>属性设置为值<xref:System.Windows.Forms.View.List?displayProperty=nameWithType>。  
  
 <xref:System.Windows.Forms.ListView> 组可帮助你查找到它们正在寻找通过将项隔离成有用的类别的项的用户。 你可以创建任何所需的类别。 一个典型方法是基于对列表进行排序的方式的项进行分组。 例如，可以按项目名称的首字母分组的项，按字母顺序或如类型或通过单击详细信息视图中的列标题的列表进行排序时的日期的子项列表进行排序时。 Windows 资源管理器使用此类型的分组。  
  
 若要使用分组功能，添加一个或多个<xref:System.Windows.Forms.ListViewGroup>对象添加到<xref:System.Windows.Forms.ListView.Groups%2A>集合<xref:System.Windows.Forms.ListView>控件。 在中设置组标题文本和标头的对齐方式<xref:System.Windows.Forms.ListViewGroup.%23ctor%2A>构造函数，或将其设置使用<xref:System.Windows.Forms.ListViewGroup.Header%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.ListViewGroup.HeaderAlignment%2A?displayProperty=nameWithType>属性。  
  
 若要暂时禁用分组功能，设置<xref:System.Windows.Forms.ListView.ShowGroups%2A>属性`false`。  
  
 你可以向组分配一个项，通过指定中的组<xref:System.Windows.Forms.ListViewItem.%23ctor%2A>构造函数，通过设置<xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType>属性，或通过直接添加到项<xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType>组的集合。 所有项应都分配到组，才会显示它们。 未分配给组的任何项将显示在默认组中，具有标头标签"DefaultGroup{0}"。 中不包含默认组<xref:System.Windows.Forms.ListView.Groups%2A>集合，而且不能更改。 它是主要适用于调试以确保所有项已正确都添加到组。  
  
 项一次只能是一个组中。 你可以更改通过设置项所属组<xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType>属性在运行时或通过将其添加到<xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType>另一个组，这会自动删除它从以前的组的集合。  
  
 使用组时，插入标记功能被禁用。 这是因为分组功能通过组成员身份的项排序，而插入标记功能则用于与拖放中重新定位<xref:System.Windows.Forms.ListView>不排序其项的控件。  
  
 <xref:System.Windows.Forms.ListView> 当你的应用程序调用时，组是仅在 Windows XP 和 Windows Server 2003 上可用<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 在早期的操作系统上与组相关的任何代码有影响，并且组将不会出现。 因此，取决于分组功能的任何代码可能无法正常工作。  
  
 你可能想要编写代码来确定分组功能是否可用，并不可用时提供备用的功能。 例如，你可能想要提供替代的排序不支持按组排序的操作系统上运行时。  
  
 由同一个库提供操作系统主题功能提供分组功能。 若要检查此库的可用性，请调用<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法重载并传入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView>分组功能，以便按的详细信息视图中的子项值组织的项。 这种形式是分组的类似于在 Windows 资源管理器中使用的分组。 在示例中，动态创建组。 对于每个子项列中，为每个唯一子项值创建一个组。 父项列中，为每个唯一的初始字母创建一个组。 单击列标题对项排序到为该列创建的组。 再次单击相同的列标题反转组的顺序。  
  
 [!code-cpp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CPP/listviewgroupsexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CS/listviewgroupsexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/VB/listviewgroupsexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.ShowGroups" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ColumnHeaderStyle HeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ColumnHeaderStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HeaderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderStyle As ColumnHeaderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ColumnHeaderStyle HeaderStyle { System::Windows::Forms::ColumnHeaderStyle get(); void set(System::Windows::Forms::ColumnHeaderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.HeaderStyle : System.Windows.Forms.ColumnHeaderStyle with get, set" Usage="System.Windows.Forms.ListView.HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnHeaderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the column header style.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A>属性允许你指定的类型时要显示的列标题<xref:System.Windows.Forms.ListView.View%2A>属性<xref:System.Windows.Forms.ListView>控件设置为<xref:System.Windows.Forms.View.Details>和<xref:System.Windows.Forms.ListView>控件具有<xref:System.Windows.Forms.ColumnHeader>中指定的对象<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>. <xref:System.Windows.Forms.ColumnHeader> 对象定义中显示的列<xref:System.Windows.Forms.ListView>控件。 每一列用于显示中每个项的子项信息<xref:System.Windows.Forms.ListView>。  
  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A>属性允许你指定是否列标题是否可见或它们是否可见，是否将用作可单击的按钮。 如果<xref:System.Windows.Forms.ListView.HeaderStyle%2A>属性设置为<xref:System.Windows.Forms.ColumnHeaderStyle.None?displayProperty=nameWithType>，不显示列标题，尽管项及其子项的<xref:System.Windows.Forms.ListView>仍列中排列控件。 如果<xref:System.Windows.Forms.ListView.HeaderStyle%2A>属性设置为<xref:System.Windows.Forms.ColumnHeaderStyle.Clickable?displayProperty=nameWithType>，列标题的作用像用户可以单击来执行操作，如排序中的项的按钮<xref:System.Windows.Forms.ListView>控制在所单击的列作为键使用的项。 你可以在处理程序中实现此行为<xref:System.Windows.Forms.ListView.ColumnClick>事件。 如果<xref:System.Windows.Forms.ListView.HeaderStyle%2A>属性设置为<xref:System.Windows.Forms.ColumnHeaderStyle.Nonclickable?displayProperty=nameWithType>，列标题显示，但不能单击。  
  
   
  
## Examples  
 下面的代码示例演示<xref:System.Windows.Forms.ListView>这样要选择多个项。 该示例演示了如何设置<xref:System.Windows.Forms.ListView.HideSelection%2A>和<xref:System.Windows.Forms.ListView.HeaderStyle%2A>属性。 它还演示了<xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>，<xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType>属性。 若要运行此示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>对象名为`ListView1`和<xref:System.Windows.Forms.TextBox>名为`TextBox1`。 调用`InitializeListView`从窗体的构造函数的方法或<xref:System.Windows.Forms.Form.Load>事件处理程序。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> values.</exception>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnHeaderStyle" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HideSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HideSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HideSelection { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HideSelection : bool with get, set" Usage="System.Windows.Forms.ListView.HideSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the selected item in the control remains highlighted when the control loses focus.</summary>
        <value>
          <see langword="true" /> 当控件失去焦点，则时，如果未显示所选的项将突出显示<see langword="false" />如果所选的项目仍出现突出显示，当控件失去焦点。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当此属性设置为`false`中, 选择的项<xref:System.Windows.Forms.ListView>控件仍会突出显示颜色由操作系统指定的当前选择颜色不同的颜色时<xref:System.Windows.Forms.ListView>控件失去焦点。 此属性可用于保留时在用户单击窗体上一个不同的控件，或将移动到不同的窗口由可见用户选定的项。  
  
> [!NOTE]
>  如果你担心你的应用程序的可访问性，建议你设置<xref:System.Windows.Forms.ListView.HideSelection%2A>属性`false`。  
  
   
  
## Examples  
 下面的代码示例演示<xref:System.Windows.Forms.ListView>这样要选择多个项。 该示例演示了如何设置<xref:System.Windows.Forms.ListView.HideSelection%2A>和<xref:System.Windows.Forms.ListView.HeaderStyle%2A>属性。 它还演示了<xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>， <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType>属性。 若要运行此示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>对象名为`ListView1`和<xref:System.Windows.Forms.TextBox>名为`TextBox1`。 调用`InitializeListView`从窗体的构造函数的方法或<xref:System.Windows.Forms.Form.Load>事件处理程序。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Provides item information, given an x- and y-coordinate.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.HitTest : System.Drawing.Point -&gt; System.Windows.Forms.ListViewHitTestInfo" Usage="listView.HitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">The <see cref="T:System.Drawing.Point" /> at which to retrieve the item information. The coordinates are relative to the upper-left corner of the control.</param>
        <summary>Provides item information, given a point.</summary>
        <returns>The item information, given a point.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法来确定是否在点被某个项或子项和项中点所在的位置，如于标签或图像的区域。 如果坐标位于外部的控件，返回<xref:System.Windows.Forms.ListViewHitTestInfo>对象具有<xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A>为"None"; 的属性和<xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A>和<xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A>属性设置为`null`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The point contains coordinates that are less than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (x As Integer, y As Integer) As ListViewHitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.HitTest : int * int -&gt; System.Windows.Forms.ListViewHitTestInfo" Usage="listView.HitTest (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate at which to retrieve the item information. The coordinate is relative to the upper-left corner of the control.</param>
        <param name="y">The y-coordinate at which to retrieve the item information. The coordinate is relative to the upper-left corner of the control.</param>
        <summary>Provides item information, given x- and y-coordinates.</summary>
        <returns>The item information, given x- and y- coordinates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法来确定点是否属于某个项或子项，以及在项目中点所在的位置，如于标签或图像的区域。 如果坐标位于外部的控件，返回<xref:System.Windows.Forms.ListViewHitTestInfo>对象具有<xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A>为"None"; 的属性和<xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A>和<xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A>属性设置为`null`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView.HitTest%2A>方法来确定的位置中的鼠标事件<xref:System.Windows.Forms.ListView>。 若要运行此示例，请将其粘贴到 Windows 窗体包含<xref:System.Windows.Forms.ListView>名为`listView1`填充有一些项。 将关联<xref:System.Windows.Forms.Control.MouseDown>事件`listView1`与`listView1_MouseDown`在此示例中的方法。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The x- or y-coordinate is less than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HotTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property HotTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HotTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HotTracking : bool with get, set" Usage="System.Windows.Forms.ListView.HotTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the text of an item or subitem has the appearance of a hyperlink when the mouse pointer passes over it.</summary>
        <value>
          <see langword="true" /> 如果将项文本具有超链接的外观，当鼠标移过;否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 启用热跟踪清除<xref:System.Windows.Forms.ListView.Activation%2A>属性设置为<xref:System.Windows.Forms.ItemActivation.OneClick>和<xref:System.Windows.Forms.ListView.HoverSelection%2A>属性设置为`true`。 此外，只有已启用热跟踪时，不允许运行时间标签编辑。  
  
   
  
## Examples  
 下面的代码示例演示<xref:System.Windows.Forms.ListView>与启用的热跟踪。 若要运行此示例，请将以下代码粘贴到 Windows 窗体和调用`InitializeHotTrackingListView`从窗体的构造函数的方法或<xref:System.Windows.Forms.Form.Load>事件处理程序。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverSelection">
      <MemberSignature Language="C#" Value="public bool HoverSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HoverSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HoverSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HoverSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HoverSelection { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HoverSelection : bool with get, set" Usage="System.Windows.Forms.ListView.HoverSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether an item is automatically selected when the mouse pointer remains over the item for a few seconds.</summary>
        <value>
          <see langword="true" /> 如果自动选定该项当鼠标指针悬停;否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当此属性设置为`true`，用户可以指向中的项<xref:System.Windows.Forms.ListView>控件以选择的项目。 可以选择多个项目 (时<xref:System.Windows.Forms.ListView.MultiSelect%2A>属性设置为 true) 通过在指向每个项时按住 CTRL 键。 你可以使用此功能为你的应用程序中选择项目的用户提供更简单的方法<xref:System.Windows.Forms.ListView>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionMark">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewInsertionMark InsertionMark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewInsertionMark InsertionMark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.InsertionMark" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertionMark As ListViewInsertionMark" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewInsertionMark ^ InsertionMark { System::Windows::Forms::ListViewInsertionMark ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertionMark : System.Windows.Forms.ListViewInsertionMark" Usage="System.Windows.Forms.ListView.InsertionMark" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewInsertionMark</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object used to indicate the expected drop location when an item is dragged within a <see cref="T:System.Windows.Forms.ListView" /> control.</summary>
        <value>A<see cref="T:System.Windows.Forms.ListViewInsertionMark" />表示插入标记的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>插入标记功能使您可以直观地指示拖放操作中的预期的放置位置时某一项拖动到新位置。 此功能时才起作用<xref:System.Windows.Forms.ListView.AutoArrange%2A>属性设置为`true`以及何时<xref:System.Windows.Forms.ListView>控件不会自动对项。 若要防止自动排序<xref:System.Windows.Forms.ListView.Sorting%2A>属性必须设置为<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>和<xref:System.Windows.Forms.ListView.View%2A>属性必须设置为<xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>， <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>，或<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>。 此外，插入标记功能可能不具有可见<xref:System.Windows.Forms.ListView>分组功能，因为通过组成员身份对项进行分组功能排列。  
  
 <xref:System.Windows.Forms.ListViewInsertionMark>类通常在处理程序中使用<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType>事件来更新插入标记的位置，如某一项拖动。 处理程序中还使用它<xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType>事件以在正确的位置插入拖动的项。 有关详细信息，请参阅<xref:System.Windows.Forms.ListViewInsertionMark>和[如何： 在 Windows 窗体 ListView 控件中显示插入标记](~/docs/framework/winforms/controls/how-to-display-an-insertion-mark-in-a-windows-forms-listview-control.md)。  
  
> [!NOTE]
>  插入标记功能则仅在 Windows XP 和 Windows Server 2003 上可用的当你的应用程序调用<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 在早期的操作系统中，与插入标记相关的任何代码都不会有影响，并且插入标记也不会出现。 因此，取决于插入标记功能的任何代码可能无法正常工作。 你可能想要编写代码来确定此功能是否可用，并不可用时提供备用的功能。 例如，你可能想要绕过实现拖放项重新定位时不支持插入标记的操作系统上运行的所有代码。  
>   
>  插入标记功能由同一个库提供操作系统主题功能提供。 若要检查此库的可用性，请调用<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法重载并传入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView>插入标记功能。 本示例实现拖放项重新排序操作使用标准的拖动事件。 插入标记的位置更新处理程序中<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在此处理程序，鼠标指针的位置进行比较到中点的最近的项，然后使用结果来确定向左或向右的项是否显示插入标记。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="listView.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
        <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
        <returns>
          <see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemActivate">
      <MemberSignature Language="C#" Value="public event EventHandler ItemActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemActivate" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemActivate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemActivate As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ItemActivate;" />
      <MemberSignature Language="F#" Value="member this.ItemActivate : EventHandler " Usage="member this.ItemActivate : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an item is activated.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ItemActivate>事件发生时用户激活中的一个或多个项<xref:System.Windows.Forms.ListView>控件。 用户可以通过激活某项单击或双击，具体取决于值<xref:System.Windows.Forms.ListView.Activation%2A>属性，或键盘。 从事件处理程序中<xref:System.Windows.Forms.ListView.ItemActivate>事件，你可以引用<xref:System.Windows.Forms.ListView.SelectedItems%2A>或<xref:System.Windows.Forms.ListView.SelectedIndices%2A>属性访问集合中的选定项<xref:System.Windows.Forms.ListView>以确定正在激活的项。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.ItemActivate>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.ItemActivate>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#473](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#473)]
 [!code-vb[System.Windows.Forms.EventExamples#473](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#473)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCheck As ItemCheckEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckEventHandler ^ ItemCheck;" />
      <MemberSignature Language="F#" Value="member this.ItemCheck : System.Windows.Forms.ItemCheckEventHandler " Usage="member this.ItemCheck : System.Windows.Forms.ItemCheckEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the check state of an item changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性必须设置为 true 顺序显示在每个项旁边的复选框<xref:System.Windows.Forms.ListView>控件。 <xref:System.Windows.Forms.ListView.ItemCheck>项的复选状态更改时或当事件发生<xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性设置为`true`。 你可以创建的事件处理程序<xref:System.Windows.Forms.ListView.ItemCheck>事件以执行任务，例如更改每次签入项时的项的图标或另一个应用程序特定任务的状态<xref:System.Windows.Forms.ListView>控件。  
  
> [!NOTE]
>  如果窗口句柄尚未创建时<xref:System.Windows.Forms.ListView.ItemCheck>引发事件，事件将被延迟。 （当显示窗体） 创建的窗口句柄后, 任何延迟<xref:System.Windows.Forms.ListView.ItemCheck>会引发事件。 有关详细信息，请参阅<xref:System.Windows.Forms.Control.HandleCreated>。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何检查<xref:System.Windows.Forms.ListView>处理控件<xref:System.Windows.Forms.ListView.ItemCheck>事件。 该方法使用<xref:System.Windows.Forms.ItemCheckEventArgs.CurrentValue%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.ItemCheckEventArgs.Index%2A?displayProperty=nameWithType>属性来检索并计算选定的菜单项的价格。 若要运行此示例，请将以下代码粘贴到一个窗体包含`ListView`名为`ListView1`和`TextBox`名为`Textbox1`。 调用`InititalizeListView`从窗体的构造函数的方法或`Load`方法。 确保<xref:System.Windows.Forms.ListView.ItemCheck>事件是与在此示例中的事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemChecked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckedEventHandler ItemChecked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckedEventHandler ItemChecked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemChecked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemChecked As ItemCheckedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckedEventHandler ^ ItemChecked;" />
      <MemberSignature Language="F#" Value="member this.ItemChecked : System.Windows.Forms.ItemCheckedEventHandler " Usage="member this.ItemChecked : System.Windows.Forms.ItemCheckedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the checked state of an item changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件是类似于<xref:System.Windows.Forms.ListView.ItemCheck>事件，但选中项之后，将引发。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.ItemChecked>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 另一个示例，请参阅<xref:System.Windows.Forms.ListView.ItemCheck>事件。 代码存在适用的事件处理程序附加到如果<xref:System.Windows.Forms.ListView.ItemChecked>事件。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.ItemChecked>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#475](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#475)]
 [!code-vb[System.Windows.Forms.EventExamples#475](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#475)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDrag As ItemDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemDragEventHandler ^ ItemDrag;" />
      <MemberSignature Language="F#" Value="member this.ItemDrag : System.Windows.Forms.ItemDragEventHandler " Usage="member this.ItemDrag : System.Windows.Forms.ItemDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user begins dragging an item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ItemDrag>事件发生在用户开始拖动项时。 通常的事件处理程序<xref:System.Windows.Forms.ListView.ItemDrag>事件执行的任务通过调用拖动<xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType>方法。 你可以使用此事件来执行将项拖入和移出你的应用程序所必需的任务<xref:System.Windows.Forms.ListView>控件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.ItemDrag>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.ItemDrag>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#476](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#476)]
 [!code-vb[System.Windows.Forms.EventExamples#476](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#476)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemMouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemMouseHover As ListViewItemMouseHoverEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemMouseHoverEventHandler ^ ItemMouseHover;" />
      <MemberSignature Language="F#" Value="member this.ItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventHandler " Usage="member this.ItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse hovers over an item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.ItemMouseHover>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.ItemMouseHover>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#477](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#477)]
 [!code-vb[System.Windows.Forms.EventExamples#477](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#477)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ListViewItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ListViewItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListView.ListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ListViewItemCollection ^ Items { System::Windows::Forms::ListView::ListViewItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.ListView.ListViewItemCollection" Usage="System.Windows.Forms.ListView.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection containing all items in the control.</summary>
        <value>A<see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />其中包含中的所有项<see cref="T:System.Windows.Forms.ListView" />控件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.ListView.ListViewItemCollection>返回此属性，你可以将项添加、 删除项，并获取项的计数。 可以使用集合中的项执行的任务的详细信息，请参阅<xref:System.Windows.Forms.ListView.ListViewItemCollection>类参考主题。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="ItemSelectionChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemSelectionChanged As ListViewItemSelectionChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemSelectionChangedEventHandler ^ ItemSelectionChanged;" />
      <MemberSignature Language="F#" Value="member this.ItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventHandler " Usage="member this.ItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemSelectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the selection state of an item changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在虚拟模式下，<xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged>多个项的选择状态发生更改时，将发生事件。  
  
 <xref:System.Windows.Forms.ListView.ItemSelectionChanged>项状态是否从所选以取消选择或取消选定更改发生的事件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.ItemSelectionChanged>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.ItemSelectionChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#478](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#478)]
 [!code-vb[System.Windows.Forms.EventExamples#478](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#478)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelEdit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LabelEdit : bool with get, set" Usage="System.Windows.Forms.ListView.LabelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user can edit the labels of items in the control.</summary>
        <value>
          <see langword="true" /> 如果用户在运行时; 可以编辑项标签否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.ListView.LabelEdit%2A>属性设置为`true`，用户能够修改项的文本，通过单击项文本以选中它，然后单击再次要放置到的标签文本的项文本编辑模式。 然后，用户可以修改或替换项的文本标签。 你可以使用<xref:System.Windows.Forms.ListView.BeforeLabelEdit>和<xref:System.Windows.Forms.ListView.AfterLabelEdit>事件以执行任务之前和之后用户编辑项的文本。 无法修改的子项的文本，如果此属性设置为`true`。 若要更改的子项的文本，你可以在它们双击控件中的子项时向用户显示一个对话框。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.ListView.Activation%2A>属性设置为<xref:System.Windows.Forms.ItemActivation.OneClick>或<xref:System.Windows.Forms.ItemActivation.TwoClick>，标签编辑将不允许的值无论<xref:System.Windows.Forms.ListView.LabelEdit%2A>属性。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="LabelWrap">
      <MemberSignature Language="C#" Value="public bool LabelWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelWrap { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LabelWrap : bool with get, set" Usage="System.Windows.Forms.ListView.LabelWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether item labels wrap when items are displayed in the control as icons.</summary>
        <value>
          <see langword="true" /> 如果当项作为图标; 显示时，项标签换行否则为<see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.ListView.LabelWrap%2A>属性设置为`true`，在项文本换到下一行文本，如果需要。 如果文本的长度超过两个行文本，则文本将缩短。 如果用户选择的项，则显示所有项文本。 如果<xref:System.Windows.Forms.ListView.LabelWrap%2A>属性设置为`false`，所有项文本都显示在单独的行。 显示整个项文本时<xref:System.Windows.Forms.ListView.LabelWrap%2A>设置为`false`。 此属性是时才使用<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="LargeImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList LargeImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList LargeImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LargeImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property LargeImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ LargeImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LargeImageList : System.Windows.Forms.ImageList with get, set" Usage="System.Windows.Forms.ListView.LargeImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> to use when displaying items as large icons in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" />包含时要使用的图标<see cref="P:System.Windows.Forms.ListView.View" />属性设置为<see cref="F:System.Windows.Forms.View.LargeIcon" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.LargeImageList%2A>属性允许你指定<xref:System.Windows.Forms.ImageList>包含图标显示项目大图标时要使用的对象 (当<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.LargeIcon>)。 <xref:System.Windows.Forms.ListView>控件可以接受任何图形格式<xref:System.Windows.Forms.ImageList>控件支持时显示图标。 <xref:System.Windows.Forms.ListView>控件并不局限于.ico 文件。 一次<xref:System.Windows.Forms.ImageList>分配给<xref:System.Windows.Forms.ListView.LargeImageList%2A>属性，可以设置<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>每个属性<xref:System.Windows.Forms.ListViewItem>中<xref:System.Windows.Forms.ListView>控件中的相应图像的索引位置到<xref:System.Windows.Forms.ImageList>。 图标的大小<xref:System.Windows.Forms.ListView.LargeImageList%2A>指定<xref:System.Windows.Forms.ImageList.ImageSize%2A>。  
  
 因为只有一个索引可以为指定<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType>属性，<xref:System.Windows.Forms.ImageList>中指定的对象<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性应具有相同的索引位置的显示的图像。 例如，如果<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>属性<xref:System.Windows.Forms.ListViewItem>设置为 0，用于小型和大型图标的图像，应保持在相同的索引位置中<xref:System.Windows.Forms.ImageList>中指定的对象<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。  
  
> [!NOTE]
>  图像指定了密钥，仍需要将映像的小型和大型版本放在其各自的图像列表相同的索引位置处。 当视图之间切换，一个列表中的映像的索引位置用于在其他列表中，而不考虑指定的密钥值找到该图像。  
  
 若要设置<xref:System.Windows.Forms.ImageList>显示带小图标的项时要使用 (以外的所有视图模式<xref:System.Windows.Forms.View.LargeIcon>)，使用<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 如果你想要使用映像来显示项状态，请使用<xref:System.Windows.Forms.ListView.StateImageList%2A>属性。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="ListViewItemSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer ListViewItemSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer ListViewItemSorter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberSignature Language="VB.NET" Value="Public Property ListViewItemSorter As IComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IComparer ^ ListViewItemSorter { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ListViewItemSorter : System.Collections.IComparer with get, set" Usage="System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the sorting comparer for the control.</summary>
        <value>
          <see cref="T:System.Collections.IComparer" /> ，它表示控件的排序比较器。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性允许你指定的对象，执行中的项排序<xref:System.Windows.Forms.ListView>控制<xref:System.Windows.Forms.ListView.Sort%2A>调用方法或项目添加到列表中时。 请注意，项不是自动排序其标签文本的更改时。  
  
 指定的对象必须实现的类的实例<xref:System.Collections.IComparer>接口，具有一个方法调用<xref:System.Collections.Comparer.Compare%2A?displayProperty=nameWithType>。  
  
 此属性可用于提供自定义排序，例如，在详细信息视图中单击列标题。 若要执行此操作，创建一个类以实现<xref:System.Collections.IComparer>接口，并提供接受要作为排序依据的列的索引的构造函数。 然后，你可以实现的处理程序<xref:System.Windows.Forms.ListView.ColumnClick>创建使用所单击的列的索引此类的实例的事件。 当你将设置<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性的新实例，<xref:System.Windows.Forms.ListView>控件进行自动排序使用指定的对象。 后续调用<xref:System.Windows.Forms.ListView.Sort%2A>方法使用相同的对象。  
  
> [!NOTE]
>  当你设置的值<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性，<xref:System.Windows.Forms.ListView.Sort%2A>自动调用方法。  
  
   
  
## Examples  
 下面的代码示例创建一个包含窗体<xref:System.Windows.Forms.ListView>控件项中的列时进行手动排序<xref:System.Windows.Forms.ListView>控件被单击。 该示例定义一个名为类`ListViewItemComparer`实现<xref:System.Collections.IComparer?displayProperty=nameWithType>接口执行<xref:System.Windows.Forms.ListViewItem>比较。 该示例创建的实例`ListViewItemComparer`并使用它来设置<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性<xref:System.Windows.Forms.ListView>控件。 <xref:System.Windows.Forms.ListView.Sort%2A>方法调用<xref:System.Windows.Forms.ListView.ColumnClick>事件处理程序使用中定义的方法`ListViewItemComparer`来执行的项，基于所单击的列排序。  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.MultiSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiSelect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MultiSelect : bool with get, set" Usage="System.Windows.Forms.ListView.MultiSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether multiple items can be selected.</summary>
        <value>
          <see langword="true" /> 如果控件中的多个项可以选择; 一次否则为<see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.ListView.MultiSelect%2A>属性设置为`true`，可以在中选择多个项<xref:System.Windows.Forms.ListView>控件。 若要选择多个项，用户必须按住 CTRL 键同时单击选择的项。 通过单击选择的第一个项，然后在按住 SHIFT 键，单击以选择的最后一项，则可以选择连续的项。 你可以使用多重选择功能选择中的多个项目<xref:System.Windows.Forms.ListView>控制，执行对选择的所有项的操作。 例如，用户可以选择多个项，然后右键单击选定的项以显示显示一组可以对所选项目执行的任务的快捷菜单。  
  
 若要确定哪些项选择中<xref:System.Windows.Forms.ListView>控制，请使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>属性。 <xref:System.Windows.Forms.ListView.SelectedItems%2A>属性允许你访问<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>包含选定项的列表。 如果您希望的索引位置中<xref:System.Windows.Forms.ListView.ListViewItemCollection>而不是项，你可以使用<xref:System.Windows.Forms.ListView.SelectedIndices%2A>属性来访问<xref:System.Windows.Forms.ListView.SelectedIndexCollection>。  
  
 如果您不想要允许进行多选中的<xref:System.Windows.Forms.ListView>，但仍想要为用户提供一种选择，可以通过设置显示复选框的多个项目的方法<xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性`true`。  
  
   
  
## Examples  
 下面的代码示例演示<xref:System.Windows.Forms.ListView>这样要选择多个项。 该示例演示了如何设置<xref:System.Windows.Forms.ListView.HideSelection%2A>和<xref:System.Windows.Forms.ListView.HeaderStyle%2A>属性。 若要运行此示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>对象名为`ListView1`和<xref:System.Windows.Forms.TextBox>名为`TextBox1`。 调用`InitializeListView`从窗体的构造函数的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit&#xA;override this.OnAfterLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit" Usage="listView.OnAfterLabelEdit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnAfterLabelEdit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView.AfterLabelEdit>事件将限制为在字母表中的字符的新编辑的标签。 该示例使用<xref:System.Text.ASCIIEncoding>类来获取新标签的每个字符的 ASCII 字符代码。 如果该字符表示数字的 ASCII 代码之间处于，新的标签不能应用于项中。 此示例需要你已创建了<xref:System.Windows.Forms.ListView>控件在窗体和添加到它的项。 该示例还要求你已连接<xref:System.Windows.Forms.ListView.AfterLabelEdit>到事件处理程序的代码示例中定义的事件。 若要使用<xref:System.Text.ASCIIEncoding>类，你的文件必须包含<xref:System.Text>命名空间。  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackgroundImageChanged : EventArgs -&gt; unit" Usage="listView.OnBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnBackgroundImageChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBeforeLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit&#xA;override this.OnBeforeLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit" Usage="listView.OnBeforeLabelEdit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnBeforeLabelEdit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCacheVirtualItems">
      <MemberSignature Language="C#" Value="protected virtual void OnCacheVirtualItems (System.Windows.Forms.CacheVirtualItemsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCacheVirtualItems(class System.Windows.Forms.CacheVirtualItemsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCacheVirtualItems (e As CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCacheVirtualItems(System::Windows::Forms::CacheVirtualItemsEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventArgs -&gt; unit&#xA;override this.OnCacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventArgs -&gt; unit" Usage="listView.OnCacheVirtualItems e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.CacheVirtualItemsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.CacheVirtualItemsEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnCacheVirtualItems%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnClick (System.Windows.Forms.ColumnClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnClick(class System.Windows.Forms.ColumnClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnClick (e As ColumnClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnClick(System::Windows::Forms::ColumnClickEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnClick : System.Windows.Forms.ColumnClickEventArgs -&gt; unit&#xA;override this.OnColumnClick : System.Windows.Forms.ColumnClickEventArgs -&gt; unit" Usage="listView.OnColumnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ColumnClickEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnColumnClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例创建一个包含窗体<xref:System.Windows.Forms.ListView>控件项中的列时进行手动排序<xref:System.Windows.Forms.ListView>控件被单击。 该示例定义一个名为类`ListViewItemComparer`实现<xref:System.Collections.IComparer?displayProperty=nameWithType>接口执行<xref:System.Windows.Forms.ListViewItem>比较。 该示例创建的实例`ListViewItemComparer`并使用它来设置<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性<xref:System.Windows.Forms.ListView>控件。 <xref:System.Windows.Forms.ListView.Sort%2A>方法调用<xref:System.Windows.Forms.ListView.ColumnClick>事件处理程序使用中定义的方法`ListViewItemComparer`来执行的项，基于所单击的列排序。  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Forms.ColumnReorderedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnReordered(class System.Windows.Forms.ColumnReorderedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnReordered (e As ColumnReorderedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnReordered(System::Windows::Forms::ColumnReorderedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnReordered : System.Windows.Forms.ColumnReorderedEventArgs -&gt; unit&#xA;override this.OnColumnReordered : System.Windows.Forms.ColumnReorderedEventArgs -&gt; unit" Usage="listView.OnColumnReordered e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnReorderedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnReordered" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnColumnReordered%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.ColumnWidthChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.ColumnWidthChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanged (e As ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanged(System::Windows::Forms::ColumnWidthChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventArgs -&gt; unit&#xA;override this.OnColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventArgs -&gt; unit" Usage="listView.OnColumnWidthChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ColumnWidthChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnColumnWidthChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanging (System.Windows.Forms.ColumnWidthChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanging(class System.Windows.Forms.ColumnWidthChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanging (e As ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanging(System::Windows::Forms::ColumnWidthChangingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventArgs -&gt; unit&#xA;override this.OnColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventArgs -&gt; unit" Usage="listView.OnColumnWidthChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ColumnWidthChangingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnWidthChanging>事件才会发生拖动功能，"拖动时显示窗口内容"选项中，如果该窗口的完整被禁用。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnColumnWidthChanging%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawColumnHeader">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawColumnHeader (System.Windows.Forms.DrawListViewColumnHeaderEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawColumnHeader(class System.Windows.Forms.DrawListViewColumnHeaderEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawColumnHeader (e As DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawColumnHeader(System::Windows::Forms::DrawListViewColumnHeaderEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventArgs -&gt; unit&#xA;override this.OnDrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventArgs -&gt; unit" Usage="listView.OnDrawColumnHeader e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnDrawColumnHeader%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawListViewItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawListViewItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawListViewItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawListViewItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawListViewItemEventArgs -&gt; unit" Usage="listView.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnDrawItem%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawSubItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawSubItem (System.Windows.Forms.DrawListViewSubItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawSubItem(class System.Windows.Forms.DrawListViewSubItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawSubItem (e As DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawSubItem(System::Windows::Forms::DrawListViewSubItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawSubItem : System.Windows.Forms.DrawListViewSubItemEventArgs -&gt; unit&#xA;override this.OnDrawSubItem : System.Windows.Forms.DrawListViewSubItemEventArgs -&gt; unit" Usage="listView.OnDrawSubItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewSubItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnDrawSubItem%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="listView.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see langword="FontChanged" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="listView.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="listView.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnItemActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemActivate (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemActivate(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemActivate : EventArgs -&gt; unit&#xA;override this.OnItemActivate : EventArgs -&gt; unit" Usage="listView.OnItemActivate e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemActivate" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemActivate%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCheck (ice As ItemCheckEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCheck(System::Windows::Forms::ItemCheckEventArgs ^ ice);" />
      <MemberSignature Language="F#" Value="abstract member OnItemCheck : System.Windows.Forms.ItemCheckEventArgs -&gt; unit&#xA;override this.OnItemCheck : System.Windows.Forms.ItemCheckEventArgs -&gt; unit" Usage="listView.OnItemCheck ice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">An <see cref="T:System.Windows.Forms.ItemCheckEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemCheck%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemCheck" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChecked">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChecked (System.Windows.Forms.ItemCheckedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChecked(class System.Windows.Forms.ItemCheckedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemChecked (e As ItemCheckedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemChecked(System::Windows::Forms::ItemCheckedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemChecked : System.Windows.Forms.ItemCheckedEventArgs -&gt; unit&#xA;override this.OnItemChecked : System.Windows.Forms.ItemCheckedEventArgs -&gt; unit" Usage="listView.OnItemChecked e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemCheckedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.ItemCheckedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemChecked" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemChecked%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDrag (e As ItemDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDrag(System::Windows::Forms::ItemDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemDrag : System.Windows.Forms.ItemDragEventArgs -&gt; unit&#xA;override this.OnItemDrag : System.Windows.Forms.ItemDragEventArgs -&gt; unit" Usage="listView.OnItemDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.ItemDragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemDrag" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemDrag%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemDrag" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnItemMouseHover (System.Windows.Forms.ListViewItemMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemMouseHover(class System.Windows.Forms.ListViewItemMouseHoverEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemMouseHover (e As ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemMouseHover(System::Windows::Forms::ListViewItemMouseHoverEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventArgs -&gt; unit&#xA;override this.OnItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventArgs -&gt; unit" Usage="listView.OnItemMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemMouseHover" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemMouseHover%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemSelectionChanged (System.Windows.Forms.ListViewItemSelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemSelectionChanged(class System.Windows.Forms.ListViewItemSelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemSelectionChanged (e As ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemSelectionChanged(System::Windows::Forms::ListViewItemSelectionChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventArgs -&gt; unit&#xA;override this.OnItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventArgs -&gt; unit" Usage="listView.OnItemSelectionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemSelectionChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseHover(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseHover : EventArgs -&gt; unit" Usage="listView.OnMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseHover" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListView.OnMouseHover%2A>时鼠标悬停在调用方法<xref:System.Windows.Forms.ListViewItem>，该方法将引发<xref:System.Windows.Forms.ListView.ItemMouseHover>事件。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnMouseHover%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeave : EventArgs -&gt; unit" Usage="listView.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnParentChanged : EventArgs -&gt; unit" Usage="listView.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnResize : EventArgs -&gt; unit" Usage="listView.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRetrieveVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnRetrieveVirtualItem (System.Windows.Forms.RetrieveVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRetrieveVirtualItem(class System.Windows.Forms.RetrieveVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRetrieveVirtualItem (e As RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRetrieveVirtualItem(System::Windows::Forms::RetrieveVirtualItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventArgs -&gt; unit&#xA;override this.OnRetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventArgs -&gt; unit" Usage="listView.OnRetrieveVirtualItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.RetrieveVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.RetrieveVirtualItemEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnRetrieveVirtualItem%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftLayoutChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRightToLeftLayoutChanged : EventArgs -&gt; unit&#xA;override this.OnRightToLeftLayoutChanged : EventArgs -&gt; unit" Usage="listView.OnRightToLeftLayoutChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSearchForVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnSearchForVirtualItem (System.Windows.Forms.SearchForVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSearchForVirtualItem(class System.Windows.Forms.SearchForVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSearchForVirtualItem (e As SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSearchForVirtualItem(System::Windows::Forms::SearchForVirtualItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventArgs -&gt; unit&#xA;override this.OnSearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventArgs -&gt; unit" Usage="listView.OnSearchForVirtualItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.SearchForVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.SearchForVirtualItemEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnSearchForVirtualItem%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectedIndexChanged : EventArgs -&gt; unit&#xA;override this.OnSelectedIndexChanged : EventArgs -&gt; unit" Usage="listView.OnSelectedIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnSelectedIndexChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSystemColorsChanged : EventArgs -&gt; unit" Usage="listView.OnSystemColorsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVirtualItemsSelectionRangeChanged (System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVirtualItemsSelectionRangeChanged(class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVirtualItemsSelectionRangeChanged (e As ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVirtualItemsSelectionRangeChanged(System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnVirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs -&gt; unit&#xA;override this.OnVirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs -&gt; unit" Usage="listView.OnVirtualItemsSelectionRangeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OwnerDraw : bool with get, set" Usage="System.Windows.Forms.ListView.OwnerDraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ListView" /> control is drawn by the operating system or by code that you provide.</summary>
        <value>
          <see langword="true" /> 如果<see cref="T:System.Windows.Forms.ListView" />提供; 的代码绘制控件<see langword="false" />如果<see cref="T:System.Windows.Forms.ListView" />由操作系统绘制控件。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.ListView>通常由操作系统绘制控件。 若要自定义的外观<xref:System.Windows.Forms.ListView>项、 子项和列标题集<xref:System.Windows.Forms.ListView.OwnerDraw%2A>属性`true`和提供的一个或多个以下事件处理程序： <xref:System.Windows.Forms.ListView.DrawItem>， <xref:System.Windows.Forms.ListView.DrawSubItem>， <xref:System.Windows.Forms.ListView.DrawColumnHeader>。 这称为所有者描述。 当<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>，所有三个事件发生; 否则为仅<xref:System.Windows.Forms.ListView.DrawItem>事件发生。  
  
> [!NOTE]
>  子项信息通常出现在磁贴视图，以及详细信息视图中，但在磁贴视图中，它必须绘制的处理程序中<xref:System.Windows.Forms.ListView.DrawItem>事件。 <xref:System.Windows.Forms.ListView.DrawSubItem>事件不会发生，无任何子项<xref:System.Windows.Forms.ColumnHeader>对象已添加到<xref:System.Windows.Forms.ListView.Columns%2A>集合。 另请注意，每个的第一个子项<xref:System.Windows.Forms.ListViewItem>对象表示的父项本身，并且将显示在第一列。  
  
 在详细信息视图中，你可以处理<xref:System.Windows.Forms.ListView.DrawItem>事件来绘制所有子项，如 background，常见的元素，并处理<xref:System.Windows.Forms.ListView.DrawSubItem>事件以便都绘制为各个子项，如文本值的元素。 此外可以在中绘制所有项<xref:System.Windows.Forms.ListView>控制只使用一个的两个事件，尽管这可能是不太方便。 若要绘制的详细信息视图中列标题，你必须处理<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件。  
  
> [!NOTE]
>  为了避免在所有者绘制，重写时，图形闪烁问题<xref:System.Windows.Forms.ListView>控件并设置<xref:System.Windows.Forms.ListView.DoubleBuffered%2A>属性`true`。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何提供自定义方式绘制<xref:System.Windows.Forms.ListView>控件。 <xref:System.Windows.Forms.ListView>在示例中的控件具有渐变背景。 与负值子项具有红色的前景色和背景为黑色。  
  
 处理程序<xref:System.Windows.Forms.ListView.DrawItem>事件绘制整个项的背景。 处理程序<xref:System.Windows.Forms.ListView.DrawSubItem>事件绘制的文本值以及文本和背景具有负值的子项。 处理程序<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件绘制每个列标题。  
  
 A<xref:System.Windows.Forms.ContextMenu>组件提供一种方法的详细信息视图和列表视图之间切换。 在列表视图中，仅<xref:System.Windows.Forms.ListView.DrawItem>引发事件。 在这种情况下，文本和背景均在<xref:System.Windows.Forms.ListView.DrawItem>事件处理程序。  
  
 [!code-csharp[ListViewOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#1)]
 [!code-vb[ListViewOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.ListView.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the space between the <see cref="T:System.Windows.Forms.ListView" /> control and its contents.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> ，它指定之间的空间<see cref="T:System.Windows.Forms.ListView" />控制和其内容。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ListView.Padding" /> property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Windows.Forms.ListView" /> control is painted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>由操作系统绘制控件或由所有者描述，因此<xref:System.Windows.Forms.ListView.Paint>永远不会引发事件。 有关所有者描述的详细信息，请参阅<xref:System.Windows.Forms.ListView.OwnerDraw%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RealizeProperties">
      <MemberSignature Language="C#" Value="protected void RealizeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RealizeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RealizeProperties" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RealizeProperties ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RealizeProperties();" />
      <MemberSignature Language="F#" Value="member this.RealizeProperties : unit -&gt; unit" Usage="listView.RealizeProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes the properties of the <see cref="T:System.Windows.Forms.ListView" /> control that manage the appearance of the control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawItems">
      <MemberSignature Language="C#" Value="public void RedrawItems (int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedrawItems(int32 startIndex, int32 endIndex, bool invalidateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedrawItems (startIndex As Integer, endIndex As Integer, invalidateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RedrawItems(int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="F#" Value="member this.RedrawItems : int * int * bool -&gt; unit" Usage="listView.RedrawItems (startIndex, endIndex, invalidateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
        <Parameter Name="invalidateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startIndex">The index for the first item in the range to be redrawn.</param>
        <param name="endIndex">The index for the last item of the range to be redrawn.</param>
        <param name="invalidateOnly">
          <see langword="true" /> to invalidate the range of items; <see langword="false" /> to invalidate and repaint the items.</param>
        <summary>Forces a range of <see cref="T:System.Windows.Forms.ListViewItem" /> objects to be redrawn.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.RedrawItems%2A>方法可以是是否使用<xref:System.Windows.Forms.ListView>处于虚拟模式或常规模式。  
  
 如果<xref:System.Windows.Forms.ListView.BeginUpdate%2A>到调用之前调用方法<xref:System.Windows.Forms.ListView.RedrawItems%2A>，将不会进行重绘。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> or <paramref name="endIndex" /> is less than 0, greater than or equal to the number of items in the <see cref="T:System.Windows.Forms.ListView" /> or, if in virtual mode, greater than the value of <see cref="P:System.Windows.Forms.ListView.VirtualListSize" />.  -or-  The given <paramref name="startIndex" /> is greater than the <paramref name="endIndex." /></exception>
      </Docs>
    </Member>
    <Member MemberName="RetrieveVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RetrieveVirtualItem As RetrieveVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::RetrieveVirtualItemEventHandler ^ RetrieveVirtualItem;" />
      <MemberSignature Language="F#" Value="member this.RetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventHandler " Usage="member this.RetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RetrieveVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and requires a <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.ListView>对象处于虚拟模式时，它会创建<xref:System.Windows.Forms.ListViewItem>对象，而使用非动态<xref:System.Windows.Forms.ListView.Items%2A>集合。 必须在创建对象时，将引发此事件<xref:System.Windows.Forms.ListViewItem>对象。 此事件的处理程序应创建相应<xref:System.Windows.Forms.ListViewItem>或从缓存中检索它，并将其传回传递<xref:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item%2A>属性。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示了此事件的处理程序。 在此示例中，listView1 需要每个<xref:System.Windows.Forms.ListViewItem>以显示其索引的平方。 此代码示例摘自更大的示例为提供<xref:System.Windows.Forms.ListView.VirtualMode%2A>属性。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item" /> property is not set to an item when the <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> event is handled.</exception>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeftLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RightToLeftLayout { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeftLayout : bool with get, set" Usage="System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control is laid out from right to left.</summary>
        <value>
          <see langword="true" /> 若要指示<see cref="T:System.Windows.Forms.ListView" />控件是否布局为从右向左; 否则为<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>属性以用于国际应用程序是从右到左阅读的语言。 如果你设置<xref:System.Windows.Forms.ListView>和<xref:System.Windows.Forms.RightToLeft>为 true 控件的内容和文本将布局为从右向左。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.RightToLeftLayoutChanged : EventHandler " Usage="member this.RightToLeftLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ListView.RightToLeftLayout" /> property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#462](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#462)]
 [!code-vb[System.Windows.Forms.EventExamples#462](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#462)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Scrollable" />
      <MemberSignature Language="VB.NET" Value="Public Property Scrollable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Scrollable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Scrollable : bool with get, set" Usage="System.Windows.Forms.ListView.Scrollable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a scroll bar is added to the control when there is not enough room to display all items.</summary>
        <value>
          <see langword="true" /> 如果添加到必要时允许用户查看所有项，则控件的滚动条否则为<see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当此属性设置为`true`、<xref:System.Windows.Forms.ListView>显示垂直滚动条用于项的数目超过控件的客户端区域的大小。 你可以使用此属性以确保用户可以访问所提供的所有项<xref:System.Windows.Forms.ListView>控件。  
  
> [!NOTE]
>  在新版[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]之前 2.0 版中，列标题不正确绘制时将此属性设置为`false`和调整大小以使其更大的控件。 若要解决此问题，请将此属性设置为`true`中<xref:System.Windows.Forms.Form.ResizeBegin>事件处理程序并将其设置回`false`中<xref:System.Windows.Forms.Form.ResizeEnd>事件处理程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SearchForVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SearchForVirtualItem As SearchForVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::SearchForVirtualItemEventHandler ^ SearchForVirtualItem;" />
      <MemberSignature Language="F#" Value="member this.SearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventHandler " Usage="member this.SearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SearchForVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and a search is taking place.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件发生时<xref:System.Windows.Forms.ListView>处于虚拟模式和<xref:System.Windows.Forms.ListView.FindNearestItem%2A>或<xref:System.Windows.Forms.ListView.FindItemWithText%2A>调用方法。 处理此事件时，你应计算从提供的项列表的哪一项<xref:System.Windows.Forms.ListView.Items%2A>属性匹配搜索条件和组<xref:System.Windows.Forms.SearchForVirtualItemEventArgs.Index%2A?displayProperty=nameWithType>的索引的属性<xref:System.Windows.Forms.ListViewItem>。 如果未提供某个项，<xref:System.Windows.Forms.ListView.FindNearestItem%2A>和<xref:System.Windows.Forms.ListView.FindItemWithText%2A>将返回`null`。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，搜索与指定的整数的前一万方块列表中返回的最接近的匹配项。 此代码示例摘自更大的示例为提供<xref:System.Windows.Forms.ListView.VirtualMode%2A>属性。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#4)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedIndexChanged : EventHandler " Usage="member this.SelectedIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> collection changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A>集合每当更改<xref:System.Windows.Forms.ListViewItem.Selected%2A>属性<xref:System.Windows.Forms.ListViewItem>更改。 属性更改可以以编程方式发生，或当用户选择某一项或清除选择的项。 当用户选择一个项，而无需按 ctrl 键，可执行多个所选内容时，控件首先会清除以前的选择。 在这种情况下，为每个以前选择的项的一次，一次新选定的项，将发生此事件。  
  
 若要确定哪些项选择中<xref:System.Windows.Forms.ListView>控制，请使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>属性来访问<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>。 你可以创建的事件处理程序此事件以对中的选定项的更改时执行任务<xref:System.Windows.Forms.ListView>控件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>属性，<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件，<xref:System.Windows.Forms.ListView.HeaderStyle%2A>成员和<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>类。 若要运行此示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>对象名为`ListView1`和<xref:System.Windows.Forms.TextBox>名为`TextBox1`。 调用`InitializeListView`从窗体的构造函数的方法或`Load`方法。 此示例需要该事件处理程序与正确关联<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
        <altmember cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListView.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListView::SelectedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndices : System.Windows.Forms.ListView.SelectedIndexCollection" Usage="System.Windows.Forms.ListView.SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the indexes of the selected items in the control.</summary>
        <value>A<see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />包含所选的项的索引。 如果当前不选定任何项，一个空<see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />返回。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A>属性将不会包含任何索引，如果此属性访问之前<xref:System.Windows.Forms.ListView>创建句柄，这通常发生时<xref:System.Windows.Forms.ListView>以窗体显示为最初加载。 你可以检查以查看是否与创建句柄<xref:System.Windows.Forms.Control.IsHandleCreated%2A>属性。 当<xref:System.Windows.Forms.ListView.MultiSelect%2A>属性设置为`true`，此属性返回一个包含在中选择的所有项的索引的集合<xref:System.Windows.Forms.ListView>。 对于单选择<xref:System.Windows.Forms.ListView>，此属性返回一个包含单个元素包含在唯一选定的项的索引的集合<xref:System.Windows.Forms.ListView>。 可以使用集合中的项执行的任务的详细信息，请参阅<xref:System.Windows.Forms.ListView.SelectedIndexCollection>。  
  
 如果你想要获取在中选择的项的集合<xref:System.Windows.Forms.ListView>控件，而不是选择，使用的项的索引位置<xref:System.Windows.Forms.ListView.SelectedItems%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView.SelectedIndices%2A>， <xref:System.Windows.Forms.ListView.SelectedIndexChanged>，和<xref:System.Windows.Forms.ListView.HeaderStyle%2A>成员和<xref:System.Windows.Forms.ListView.SelectedIndexCollection>类。 若要运行此示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>对象名为`ListView1`和<xref:System.Windows.Forms.TextBox>名为`TextBox1`。 调用`InitializeListView`从窗体的构造函数的方法或`Load`方法。 此示例需要事件处理程序是与正确关联<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView1#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView1#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedListViewItemCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedListViewItemCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListView.SelectedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedListViewItemCollection ^ SelectedItems { System::Windows::Forms::ListView::SelectedListViewItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItems : System.Windows.Forms.ListView.SelectedListViewItemCollection" Usage="System.Windows.Forms.ListView.SelectedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the items that are selected in the control.</summary>
        <value>A<see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />其中包含在控件中选定项。 如果当前不选定任何项，一个空<see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />返回。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedItems%2A>属性将不会包含任何项，如果此属性访问之前<xref:System.Windows.Forms.ListView>创建句柄，这通常发生时<xref:System.Windows.Forms.ListView>以窗体显示为最初加载。 你可以检查以查看是否与创建句柄<xref:System.Windows.Forms.Control.IsHandleCreated%2A>属性。 当<xref:System.Windows.Forms.ListView.MultiSelect%2A>属性设置为`true`，此属性返回一个包含在中选择的项的集合<xref:System.Windows.Forms.ListView>。 对于单选择<xref:System.Windows.Forms.ListView>，此属性返回一个包含在唯一选定的项的集合<xref:System.Windows.Forms.ListView>。 可以使用集合中的项执行的任务的详细信息，请参阅<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>。  
  
 如果你想要获取的集合中的索引位置<xref:System.Windows.Forms.ListView.ListViewItemCollection>中选定的项<xref:System.Windows.Forms.ListView>控件，而不是选定的项，使用<xref:System.Windows.Forms.ListView.SelectedIndices%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>，<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件，和<xref:System.Windows.Forms.ListView.HeaderStyle%2A>成员和<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>类。 若要运行此示例，请将以下代码粘贴到一个包含窗体<xref:System.Windows.Forms.ListView>对象名为`ListView1`和<xref:System.Windows.Forms.TextBox>名为`TextBox1`。 调用`InitializeListView`从窗体的构造函数的方法或`Load`方法。 此示例需要事件处理程序是与正确关联<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ShowGroups">
      <MemberSignature Language="C#" Value="public bool ShowGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowGroups" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowGroups As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowGroups { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowGroups : bool with get, set" Usage="System.Windows.Forms.ListView.ShowGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether items are displayed in groups.</summary>
        <value>
          <see langword="true" /> 若要显示组; 中的项否则为<see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 分配给任何组<xref:System.Windows.Forms.ListView>控件显示每当<xref:System.Windows.Forms.ListView.View%2A>属性设置为值<xref:System.Windows.Forms.View.List>。 <xref:System.Windows.Forms.ListView>分组功能允许你创建的逻辑上相关 visual 组<xref:System.Windows.Forms.ListView>在 Windows XP 和 Windows Server 2003 上的项。 若要启用此功能，你的应用程序必须调用<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 有关更多信息，请参见 <xref:System.Windows.Forms.ListView.Groups%2A> 属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Groups" />
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="ShowItemToolTips">
      <MemberSignature Language="C#" Value="public bool ShowItemToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowItemToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowItemToolTips As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowItemToolTips { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowItemToolTips : bool with get, set" Usage="System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether ToolTips are shown for the <see cref="T:System.Windows.Forms.ListViewItem" /> objects contained in the <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <value>
          <see langword="true" /> 如果<see cref="T:System.Windows.Forms.ListViewItem" />工具提示应显示; 否则为<see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListView.ShowItemToolTips%2A>属性设置为`true`、 任何<xref:System.Windows.Forms.ListViewItem>具有工具提示都显示它; 否则，将不会显示。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView.ShowItemToolTips%2A>和<xref:System.Windows.Forms.ListViewItem.ToolTipText%2A?displayProperty=nameWithType>属性。 若要运行此示例，请将代码粘贴到 Windows 窗体和调用`InitializeItemsWithToolTips`从窗体的构造函数或<xref:System.Windows.Forms.Form.Load>事件处理程序。  
  
 [!code-csharp[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList SmallImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList SmallImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SmallImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property SmallImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ SmallImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SmallImageList : System.Windows.Forms.ImageList with get, set" Usage="System.Windows.Forms.ListView.SmallImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> to use when displaying items as small icons in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" />包含时要使用的图标<see cref="P:System.Windows.Forms.ListView.View" />属性设置为<see cref="F:System.Windows.Forms.View.SmallIcon" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SmallImageList%2A>属性允许你指定<xref:System.Windows.Forms.ImageList>包含图标显示带小图标的项时要使用的对象 (当<xref:System.Windows.Forms.ListView.View%2A>属性设置为任何值<xref:System.Windows.Forms.View.LargeIcon>)。 <xref:System.Windows.Forms.ListView>控件可以接受任何图形格式<xref:System.Windows.Forms.ImageList>控件支持时显示图标。 <xref:System.Windows.Forms.ListView>控件并不局限于.ico 文件。 一次<xref:System.Windows.Forms.ImageList>分配给<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性，可以设置<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>每个属性<xref:System.Windows.Forms.ListViewItem>中<xref:System.Windows.Forms.ListView>控件中的相应图像的索引位置到<xref:System.Windows.Forms.ImageList>。 图标的大小<xref:System.Windows.Forms.ListView.SmallImageList%2A>指定<xref:System.Windows.Forms.ImageList.ImageSize%2A>属性。  
  
 因为只有一个索引可以为指定<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType>属性，<xref:System.Windows.Forms.ImageList>中指定的对象<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性应具有相同的索引位置的显示的图像。 例如，如果<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>属性<xref:System.Windows.Forms.ListViewItem>设置为 0，用于小型和大型图标的图像，应保持在相同的索引位置中<xref:System.Windows.Forms.ImageList>中指定的对象<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。  
  
> [!NOTE]
>  图像指定了密钥，仍需要将映像的小型和大型版本放在其各自的图像列表相同的索引位置处。 当视图之间切换，一个列表中的映像的索引位置用于在其他列表中，而不考虑指定的密钥值找到该图像。  
  
 若要设置<xref:System.Windows.Forms.ImageList>显示大图标的项目时要使用 (当<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.LargeIcon>)，使用<xref:System.Windows.Forms.ListView.LargeImageList%2A>属性。 如果你想要使用映像来显示项状态，请使用<xref:System.Windows.Forms.ListView.StateImageList%2A>属性。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; unit" Usage="listView.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sorts the items of the list view.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常项进行排序使用<xref:System.Windows.Forms.ListView.Sorting%2A>属性，用于对基于项文本的项排序。 若要自定义排序顺序，必须编写一个实现类<xref:System.Collections.IComparer>接口，并设置<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>该类的对象的属性。 这很有用，例如，如果你想要通过子项文本的项进行排序。 有关执行手动排序的项的详细信息，请参阅示例<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性。  
  
 如果<xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType>属性设置为值<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>或如果<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性设置，则添加项时自动排序列表。 标签文本更改时，项不会自动排序。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder Sorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder Sorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Sorting" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorting As SortOrder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::SortOrder Sorting { System::Windows::Forms::SortOrder get(); void set(System::Windows::Forms::SortOrder value); };" />
      <MemberSignature Language="F#" Value="member this.Sorting : System.Windows.Forms.SortOrder with get, set" Usage="System.Windows.Forms.ListView.Sorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the sort order for items in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.SortOrder" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.SortOrder.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Sorting%2A>属性允许你指定是否在中的排序项<xref:System.Windows.Forms.ListView>控件。 默认情况下，执行任何排序。 当<xref:System.Windows.Forms.ListView.Sorting%2A>属性设置为<xref:System.Windows.Forms.SortOrder.Ascending>或<xref:System.Windows.Forms.SortOrder.Descending>中的项<xref:System.Windows.Forms.ListView>自动按升序按字母顺序排序 (当属性设置为<xref:System.Windows.Forms.SortOrder.Ascending>) 或降序按字母顺序排列 (时属性设置为<xref:System.Windows.Forms.SortOrder.Descending>)。 你可以使用此属性中显示的项自动进行排序你<xref:System.Windows.Forms.ListView>控件使用户更轻松地查找项，有大量的项时。  
  
 如果你想要执行你自己项的排序，而不使用<xref:System.Windows.Forms.ListView.Sorting%2A>属性，请使用<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性结合<xref:System.Windows.Forms.ListView.Sort%2A>方法。  
  
 如果<xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType>属性设置为值<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>或如果<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>属性设置，则自动排序列表添加项时。 标签文本更改时，项不会自动排序。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.SortOrder" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.SortOrder" />
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.StateImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property StateImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ StateImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StateImageList : System.Windows.Forms.ImageList with get, set" Usage="System.Windows.Forms.ListView.StateImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> associated with application-defined states in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" />包含一组可以用于指示某一项应用程序定义的状态的状态图像。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.StateImageList%2A>属性允许你指定<xref:System.Windows.Forms.ImageList>，其中包含要使用来表示特定于应用程序状态中的项的图像<xref:System.Windows.Forms.ListView>控件。 状态图像显示项的图标左侧。 状态图像，如 checked 和 unchecked 复选框，可用于指示应用程序定义的项状态。 状态图像是可见的所有视图中<xref:System.Windows.Forms.ListView>控件。  
  
 如果<xref:System.Windows.Forms.ImageList>中指定<xref:System.Windows.Forms.ListView.StateImageList%2A>属性和<xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性设置为`true`，0 和 1 中的索引位置处的映像<xref:System.Windows.Forms.ImageList>而不是复选框显示。 索引位置 0 处的映像显示而不是未选中的复选框，和中的索引位置 1 的映像显示而不是已选中的复选框。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.ListView.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is not relevant for this class.</summary>
        <value>要在中显示的文本<see cref="T:System.Windows.Forms.ListView" />控件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.ListView.Text" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size TileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size TileSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property TileSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size TileSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.TileSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.ListView.TileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size of the tiles shown in tile view.</summary>
        <value>A <see cref="T:System.Drawing.Size" /> ，包含新的磁贴大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大小的磁贴时此属性控制<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>。 设置此属性可用于防止自动换行子项文本太长时间才能显示在单独的行时。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView>平铺功能。 在示例中，磁贴视图显示表示书籍的项。 每个项都显示为磁贴其中包含一本书、 标题、 author 和发布年的图标。 有关示例代码正常工作，必须包含此示例所在的目录中名为 Book.ico 的图标文件。 若要查看不带图标视图中，注释掉的行与相关的平铺<xref:System.Windows.Forms.ImageList>对象。  
  
 [!code-cpp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CPP/listviewtilingexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CS/listviewtilingexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/VB/listviewtilingexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="TopItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem TopItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem TopItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TopItem" />
      <MemberSignature Language="VB.NET" Value="Public Property TopItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ TopItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TopItem : System.Windows.Forms.ListViewItem with get, set" Usage="System.Windows.Forms.ListView.TopItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the first visible item in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewItem" /> ，表示控件中的第一个可见项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最初，用零 (0) 的索引位置的项位于顶部<xref:System.Windows.Forms.ListView>控件。 如果<xref:System.Windows.Forms.ListView>滚动控件内容、 不同的项可以在控件的顶部。 此属性可用于指示或确定哪一项是可见的顶部<xref:System.Windows.Forms.ListView>控件。 值<xref:System.Windows.Forms.ListView.TopItem%2A>属性将不始终保持不变，根据所需的顶级项在列表视图中的位置。  
  
 在中可见的项的数目<xref:System.Windows.Forms.ListView>控件在任何时间取决于该列表视图的高度和其包含的项的大小。 如果项超过列表视图的高度，项将继续到多个页，用户可以滚动浏览。 如果你设置<xref:System.Windows.Forms.ListView.TopItem%2A>的最后一页中的项的属性<xref:System.Windows.Forms.ListView>，项将自动滚动到视图; 但是，<xref:System.Windows.Forms.ListView.TopItem%2A>将设置为实际顶部的项的最后一页。  
  
 若要确保特定的项在控件的可见区域 （但不是一定在最顶部的位置），使用<xref:System.Windows.Forms.ListView.EnsureVisible%2A>方法。  
  
> [!NOTE]
>  设置此属性未包含任何时生效<xref:System.Windows.Forms.ListView.Scrollable%2A>属性值是`false`。  
>   
>  设置此属性的版本中不支持[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]早于 2.0 版。  
  
   
  
## Examples  
 下面的代码示例演示如何重置的样式<xref:System.Windows.Forms.ListViewItem>使用的对象的子项<xref:System.Windows.Forms.ListView.TopItem%2A>属性和<xref:System.Windows.Forms.ListViewItem.ListViewSubItem.ResetStyle%2A?displayProperty=nameWithType>方法。 若要运行该示例，请将以下代码粘贴到包含名为的按钮的窗体`Button1`并调用`InitializeListView`窗体的构造函数中的方法或<xref:System.Windows.Forms.Form.Load>事件处理程序。  
  
 [!code-cpp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.LargeIcon" />,  <see cref="F:System.Windows.Forms.View.SmallIcon" />, or <see cref="F:System.Windows.Forms.View.Tile" />.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="listView.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the <see cref="T:System.Windows.Forms.ListView" /> control.</summary>
        <returns>A string that states the control type, the count of items in the <see cref="T:System.Windows.Forms.ListView" /> control, and the type of the first item in the <see cref="T:System.Windows.Forms.ListView" />, if the count is not 0.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateExtendedStyles">
      <MemberSignature Language="C#" Value="protected void UpdateExtendedStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateExtendedStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.UpdateExtendedStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateExtendedStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateExtendedStyles();" />
      <MemberSignature Language="F#" Value="member this.UpdateExtendedStyles : unit -&gt; unit" Usage="listView.UpdateExtendedStyles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the extended styles applied to the list view control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Windows.Forms.ListView.UpdateExtendedStyles%2A>方法在派生类重写使用的扩展的样式中<xref:System.Windows.Forms.ListView>控件。 如果调用此方法，则应确保上设置属性的扩展的样式<xref:System.Windows.Forms.ListView>控件将在你的控件的派生版本中使用。  
  
 以下是扩展将样式应用于属性<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.Activation%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.HoverSelection%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.AllowColumnReorder" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
        <altmember cref="P:System.Windows.Forms.ListView.FullRowSelect" />
        <altmember cref="P:System.Windows.Forms.ListView.GridLines" />
        <altmember cref="P:System.Windows.Forms.ListView.HoverSelection" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleStateImageBehavior">
      <MemberSignature Language="C#" Value="public bool UseCompatibleStateImageBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleStateImageBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleStateImageBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleStateImageBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleStateImageBehavior : bool with get, set" Usage="System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ListView" /> uses state image behavior that is compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 or the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0.</summary>
        <value>
          <see langword="true" /> 如果状态图像行为与兼容 [！INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1;<see langword="false" />行为是否与兼容 [！INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更改为<xref:System.Windows.Forms.ListView>中控制[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]2.0 启用自定义状态图像以设置，以指示项是否选中或取消选中或处于不确定状态。 此功能，不带[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]2.0 具有不同的行为与.NET Framework 1.1。 如果你已创建的应用程序依赖于中的行为[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]1.1，请确保<xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A>属性设置为`true`，这是默认值。 为了充分利用自定义状态图像，请将设置<xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A>到`false`。  
  
> [!NOTE]
>  如果你使用[!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)]设计器中，<xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A>属性将设置为`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.View View { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.View View" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.View" />
      <MemberSignature Language="VB.NET" Value="Public Property View As View" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::View View { System::Windows::Forms::View get(); void set(System::Windows::Forms::View value); };" />
      <MemberSignature Language="F#" Value="member this.View : System.Windows.Forms.View with get, set" Usage="System.Windows.Forms.ListView.View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets how items are displayed in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.View" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.View.LargeIcon" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.View%2A>属性允许你指定的一种显示<xref:System.Windows.Forms.ListView>控件用于显示项。 你可以设置<xref:System.Windows.Forms.ListView.View%2A>属性，以显示与大或小图标的每个项或显示垂直列表中的项。 最丰富的选项为详细信息视图，该对话框可以查看不仅的项，但为每个项指定任何子项。 与垂直列出每个项的子项中包含列标题的列显示每个项的情况下，每个项显示在网格中。 详细信息视图是向用户显示数据库信息的理想方式。 对于 Windows XP 和 Windows Server 2003，还可以作为平衡通过显示大图标以及你选择的子项信息的图形和文本信息的磁贴中显示项。 若要启用磁贴视图，你的应用程序必须调用<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 小型图像视图右侧的图标显示的图标和文本信息与每个项。 大图像视图将显示一个图标和图标下方的文本信息与每个项。 通过指定的图像列表的图标大小<xref:System.Windows.Forms.ImageList.ImageSize%2A>属性<xref:System.Windows.Forms.ImageList>为<xref:System.Windows.Forms.ListView.SmallImageList%2A>或<xref:System.Windows.Forms.ListView.LargeImageList%2A>属性。  
  
> [!NOTE]
>  如果使用的小型和大型图标视图中，使用多个图像列表，<xref:System.Windows.Forms.ListView>控件，你应将放置小型和大型位于同一个映像的版本索引在其各自的图像列表的位置。 当视图之间切换，一个列表中的映像的索引位置用于在其他列表中，而不考虑指定的密钥值找到该图像。  
  
 中的属性的大多数<xref:System.Windows.Forms.ListView>控制影响如何在不同的视图的行为，或显示。 一些会影响的项的视图的属性才有用<xref:System.Windows.Forms.ListView.View%2A>属性设置为特定值，而有些则是在所有视图很有用。 例如，属性，如<xref:System.Windows.Forms.ListView.GridLines%2A>和<xref:System.Windows.Forms.ListView.FullRowSelect%2A>时才有用<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>，虽然<xref:System.Windows.Forms.ListView.MultiSelect%2A>和<xref:System.Windows.Forms.ListView.CheckBoxes%2A>属性可在所有视图中。  
  
 下表显示的一些<xref:System.Windows.Forms.ListView>成员以及它们是在中有效的视图。  
  
|ListView 成员|视图|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> 属性|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> 属性|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> 方法|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.CheckBoxes%2A>|除之外的所有视图 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> 属性|<xref:System.Windows.Forms.View.Details> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem>事件|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> 方法|<xref:System.Windows.Forms.View.Details>、<xref:System.Windows.Forms.View.List> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> 方法|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> 方法|<xref:System.Windows.Forms.View.Details> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> 属性|除之外的所有视图 <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> 属性|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> 属性|<xref:System.Windows.Forms.View.LargeIcon>、<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.Tile>|  
  
 你可以使用<xref:System.Windows.Forms.ListView.View%2A>属性来提供应用程序中数据的不同视图或锁定的特定视图，利用该视图的优点。 例如，<xref:System.Windows.Forms.ListView.View%2A>属性通常设置为<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>因为详细信息视图提供了多种查看在其他视图中不可用的选项。  
  
> [!NOTE]
>  如果你<xref:System.Windows.Forms.ListView>控件没有指定任何列标题和你设置<xref:System.Windows.Forms.ListView.View%2A>属性<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>、<xref:System.Windows.Forms.ListView>控件将不显示任何项。 如果你<xref:System.Windows.Forms.ListView>控件没有指定任何列标题和你设置<xref:System.Windows.Forms.ListView.View%2A>属性<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>、<xref:System.Windows.Forms.ListView>控件将不显示任何子项。  
  
 磁贴视图右侧的向左和文本信息显示大图标与每个项。 文本信息包含跟子项的项标签。 默认情况下，会显示仅的第一个子项，它对应于项的标签。 若要显示其他子项，你必须添加<xref:System.Windows.Forms.ColumnHeader>对象添加到<xref:System.Windows.Forms.ListView.Columns%2A>集合。 磁贴中的每个子项对应于列标题。 若要控制显示哪些子项和它们的显示顺序，必须设置<xref:System.Windows.Forms.ListViewItem.ListViewSubItem.Name%2A?displayProperty=nameWithType>每个项的属性和<xref:System.Windows.Forms.ColumnHeader.Name%2A?displayProperty=nameWithType>属性的每个标头。 然后可以添加、 删除和重新排列中的标头<xref:System.Windows.Forms.ListView.Columns%2A>集合以获得所需的结果。  
  
 若要控制平铺视图中的图块的大小，设置<xref:System.Windows.Forms.ListView.TileSize%2A>属性。 这可用于子项文本太长，单个行时防止自动换行。  
  
 磁贴视图的示例，请参阅<xref:System.Windows.Forms.ListView.TileSize%2A>属性。  
  
> [!NOTE]
>  虽然详细信息视图中仅显示列，但没有列标题的子项将不会显示在详细信息视图或磁贴视图中。  
  
 当你的应用程序调用时，磁贴视图是仅在 Windows XP 和 Windows Server 2003 上可用<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 在早期的操作系统上，任何与磁贴视图相关的代码都不起作用，且 <xref:System.Windows.Forms.ListView> 控件将显示在大图标视图中。 因此，取决于磁贴视图的任何代码可能无法正常工作。  
  
 你可能想要编写代码来确定磁贴视图是否可用，并不可用时提供备用的功能。 例如，当使用所有者描述的外观进行自定义<xref:System.Windows.Forms.ListView>磁贴视图中的项，你可能想要使用绘图代码适用于大图标视图磁贴视图不支持的操作系统上运行时。  
  
 平铺视图功能是由同一个库提供操作系统主题功能提供。 若要检查此库的可用性，请调用<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法重载并传入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.ListView>有三个控件<xref:System.Windows.Forms.ListViewItem>指定的对象和三个<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>为每个项指定的对象。 此示例还创建<xref:System.Windows.Forms.ColumnHeader>对象详细信息视图中显示子项。 两个<xref:System.Windows.Forms.ImageList>还在代码示例中提供的映像中创建对象<xref:System.Windows.Forms.ListViewItem>对象。 这些<xref:System.Windows.Forms.ImageList>对象添加到<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>属性。 该示例使用以下属性创建<xref:System.Windows.Forms.ListView>控件。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 此示例需要你已添加到代码<xref:System.Windows.Forms.Form>和调用中的示例构造函数或窗体上的另一种方法创建的方法。 该示例还要求映像名为`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位于根目录下的驱动器 c。  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.View" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.View" />
        <altmember cref="P:System.Windows.Forms.ListView.TileSize" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="VirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VirtualItemsSelectionRangeChanged As ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventHandler ^ VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="F#" Value="member this.VirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler " Usage="member this.VirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and the selection state of a range of items has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListView>不位于虚拟模式下，<xref:System.Windows.Forms.ListView.ItemSelectionChanged>事件发生一次。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ListView>名为`ListView1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#482](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#482)]
 [!code-vb[System.Windows.Forms.EventExamples#482](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#482)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="VirtualListSize">
      <MemberSignature Language="C#" Value="public int VirtualListSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualListSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualListSize" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualListSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualListSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.VirtualListSize : int with get, set" Usage="System.Windows.Forms.ListView.VirtualListSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of <see cref="T:System.Windows.Forms.ListViewItem" /> objects contained in the list when in virtual mode.</summary>
        <value>数<see cref="T:System.Windows.Forms.ListViewItem" />中所含对象<see cref="T:System.Windows.Forms.ListView" />处于虚拟模式时。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 获取或设置<xref:System.Windows.Forms.ListView.VirtualListSize%2A>属性时<xref:System.Windows.Forms.ListView.VirtualMode%2A>设置为`false`将产生任何影响<xref:System.Windows.Forms.ListView>。  
  
 如果<xref:System.Windows.Forms.ListView.VirtualMode%2A>设置为`true`，和<xref:System.Windows.Forms.ListView.VirtualListSize%2A>属性大于 0，则必须处理<xref:System.Windows.Forms.ListView.RetrieveVirtualItem>事件，并提供一个有效<xref:System.Windows.Forms.ListViewItem>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> is set to a value less than 0.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> is set to <see langword="true" />, <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> is greater than 0, and <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> is not handled.</exception>
        <altmember cref="P:System.Windows.Forms.ListView.VirtualMode" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool VirtualMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMode : bool with get, set" Usage="System.Windows.Forms.ListView.VirtualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether you have provided your own data-management operations for the <see cref="T:System.Windows.Forms.ListView" /> control.</summary>
        <value>
          <see langword="true" /> 如果<see cref="T:System.Windows.Forms.ListView" />使用数据管理操作，提供; 否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置<xref:System.Windows.Forms.ListView.VirtualMode%2A>属性`true`放入<xref:System.Windows.Forms.ListView>置于虚拟模式。 在虚拟模式下，普通<xref:System.Windows.Forms.ListView.Items%2A>集合是未使用。 相反，<xref:System.Windows.Forms.ListViewItem>对象作为动态创建<xref:System.Windows.Forms.ListView>需要它们。  
  
 虚拟模式可以是在许多情况下有用。 如果<xref:System.Windows.Forms.ListView>必须从已在内存中，非常大集合填充对象创建<xref:System.Windows.Forms.ListViewItem>对象的每一项可以是一种浪费。 虚拟模式下，在创建了所需项。 在其他情况下，值<xref:System.Windows.Forms.ListViewItem>对象可能需要通常情况下，重新计算，对整个集合也这样做会产生不可接受的性能。 虚拟模式下，在计算中所需的项目。  
  
 若要使用的虚拟模式，你必须处理<xref:System.Windows.Forms.ListView.RetrieveVirtualItem>事件，每次引发<xref:System.Windows.Forms.ListView>需要一项。 此事件处理程序应创建<xref:System.Windows.Forms.ListViewItem>所属的指定索引处的对象。 此外，<xref:System.Windows.Forms.ListView.VirtualListSize%2A>属性必须设置为虚拟列表的大小。  
  
 处理<xref:System.Windows.Forms.ListView.SearchForVirtualItem>事件使在虚拟模式中搜索。 如果不处理此事件，<xref:System.Windows.Forms.ListView.FindItemWithText%2A>和<xref:System.Windows.Forms.ListView.FindNearestItem%2A>方法将返回`null`。  
  
 你可以处理<xref:System.Windows.Forms.ListView.CacheVirtualItems>事件以维护的缓存<xref:System.Windows.Forms.ListViewItem>对象。 如果计算或查找，可创建<xref:System.Windows.Forms.ListViewItem>对象是占用大量资源，维护缓存可以提高性能。  
  
 如果<xref:System.Windows.Forms.ListView.View%2A>属性设置为<xref:System.Windows.Forms.View.Tile>，值将自动更改为<xref:System.Windows.Forms.View.LargeIcon>时<xref:System.Windows.Forms.ListView.VirtualMode%2A>设置为`true`。  
  
 在虚拟模式下，<xref:System.Windows.Forms.ListView.Items%2A>禁用收集。 尝试访问它相对于<xref:System.InvalidOperationException>。 这同样适用的<xref:System.Windows.Forms.ListView.CheckedItems%2A>集合和<xref:System.Windows.Forms.ListView.SelectedItems%2A>集合。 如果你想要检索的所选的或已选中的项，使用<xref:System.Windows.Forms.ListView.SelectedIndices%2A>和<xref:System.Windows.Forms.ListView.CheckedIndices%2A>集合相反。  
  
   
  
## Examples  
 此示例演示了一个简单<xref:System.Windows.Forms.ListView>其内容是首先一万个平方值。 它处理搜索，并使用缓存来提高性能。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> is set to <see langword="true" /> and one of the following conditions exist:  -   <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> is greater than 0 and <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> is not handled.  -or-  -   <see cref="P:System.Windows.Forms.ListView.Items" />, <see cref="P:System.Windows.Forms.ListView.CheckedItems" />, or <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> contains items.  -or-  -   Edits are made to <see cref="P:System.Windows.Forms.ListView.Items" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="listView.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
        <summary>Overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>