<Type Name="ContextMenu" FullName="System.Windows.Forms.ContextMenu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32a273f5bb7f99ebc8a00e3b264698b541cfb0b9" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37514617" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ContextMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContextMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ContextMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class ContextMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContextMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type ContextMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Popup")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示快捷菜单。 尽管 <see cref="T:System.Windows.Forms.ContextMenuStrip" /> 替换了早期版本的 <see cref="T:System.Windows.Forms.ContextMenu" /> 控件并添加了功能；但是也可选择保留 <see cref="T:System.Windows.Forms.ContextMenu" /> 以备向后兼容和将来使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ContextMenu>类表示当用户单击鼠标右键按钮在控件或窗体区域上可显示的快捷菜单。 快捷菜单通常用于组合不同的菜单项从<xref:System.Windows.Forms.MainMenu>窗体，可用于提供在应用程序上下文的用户。 例如，可以使用分配给一个快捷方式菜单<xref:System.Windows.Forms.TextBox>要查找的控件或复制并粘贴文本的剪贴板功能中的文本的文本的字体更改为提供菜单项控件。 您还可以显示新<xref:System.Windows.Forms.MenuItem>快捷菜单中的对象，并不位于<xref:System.Windows.Forms.MainMenu>提供特定情况下不适合用于的命令<xref:System.Windows.Forms.MainMenu>显示。  
  
 通常情况下，当用户单击鼠标右键按钮在控件或窗体本身显示快捷菜单。 可见的控件和<xref:System.Windows.Forms.Form>具有<xref:System.Windows.Forms.Control.ContextMenu%2A>绑定属性<xref:System.Windows.Forms.ContextMenu>显示快捷菜单的控件的类。 可以使用多个控件<xref:System.Windows.Forms.ContextMenu>。 可以使用<xref:System.Windows.Forms.ContextMenu.SourceControl%2A>属性来确定哪个控件上一次显示的快捷菜单，以便执行任务特定于控件或修改的控件显示的快捷菜单。  
  
 您可能想要知道显示快捷菜单时若要设置的复选标记，禁用项，并向用户显示菜单前执行其他菜单任务。 您可以处理<xref:System.Windows.Forms.ContextMenu.Popup>事件以确定快捷方式菜单显示时。  
  
> [!NOTE]
>  以重复使用<xref:System.Windows.Forms.MenuItem>中显示的对象<xref:System.Windows.Forms.MainMenu>用于<xref:System.Windows.Forms.ContextMenu>，必须创建一份菜单使用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法<xref:System.Windows.Forms.MenuItem>类。 您还可以合并到单个的菜单项和及其子菜单项<xref:System.Windows.Forms.MenuItem>对象使用<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法的<xref:System.Windows.Forms.MenuItem>类。  
  
   
  
## Examples  
 下面的代码示例创建的事件处理程序<xref:System.Windows.Forms.ContextMenu.Popup>事件的<xref:System.Windows.Forms.ContextMenu>。 事件处理程序中的代码确定两个控件中的哪<xref:System.Windows.Forms.PictureBox>名为`pictureBox1`和一个<xref:System.Windows.Forms.TextBox>名为`textBox1`是显示的快捷菜单的控件。 具体取决于哪个控件导致<xref:System.Windows.Forms.ContextMenu>若要显示其快捷菜单，该控件添加相应<xref:System.Windows.Forms.MenuItem>对象添加到<xref:System.Windows.Forms.ContextMenu>。 此示例要求您具有的实例<xref:System.Windows.Forms.ContextMenu>类，名为`contextMenu1`、 窗体中定义。 此示例还要求你有<xref:System.Windows.Forms.TextBox>并<xref:System.Windows.Forms.PictureBox>添加到窗体，并<xref:System.Windows.Forms.Control.ContextMenu%2A>这些控件的属性设置为`contextMenu1`。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="T:System.Windows.Forms.MainMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.ContextMenu" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化没有任何指定菜单项的 <see cref="T:System.Windows.Forms.ContextMenu" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在使用此版本的构造函数，可以添加到菜单项<xref:System.Windows.Forms.ContextMenu>通过使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法的<xref:System.Windows.Forms.Menu.MenuItemCollection>类。 您可以访问<xref:System.Windows.Forms.Menu.MenuItemCollection>通过<xref:System.Windows.Forms.Menu.MenuItems%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu (System.Windows.Forms.MenuItem[] menuItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] menuItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (menuItems As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ menuItems);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ContextMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.ContextMenu" Usage="new System.Windows.Forms.ContextMenu menuItems" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="menuItems" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="menuItems">
          <see cref="T:System.Windows.Forms.MenuItem" /> 对象的数组，这些对象表示要添加到快捷菜单的菜单项。</param>
        <summary>使用一组指定的 <see cref="T:System.Windows.Forms.ContextMenu" /> 对象初始化 <see cref="T:System.Windows.Forms.MenuItem" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此版本的构造函数创建<xref:System.Windows.Forms.ContextMenu>具有创建它时指定其菜单项。 在使用此版本的构造函数，可以添加附加的菜单项<xref:System.Windows.Forms.ContextMenu>通过使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法的<xref:System.Windows.Forms.Menu.MenuItemCollection>类。 您可以访问<xref:System.Windows.Forms.Menu.MenuItemCollection>通过<xref:System.Windows.Forms.Menu.MenuItems%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何构造快捷菜单和使用<xref:System.Windows.Forms.ContextMenu.Show%2A>方法。 若要运行该示例，请在包含名为 Button1 的按钮的窗体中粘贴以下代码。 请确保所有事件都都具有其事件处理方法关联。  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当快捷菜单折叠时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何将此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.ContextMenu.Collapse>事件。 此报告可帮助您了解事件发生的并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑更换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或将消息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.ContextMenu>名为`ContextMenu1`。 然后，确保事件处理程序相关联<xref:System.Windows.Forms.ContextMenu.Collapse>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#170)]
 [!code-vb[System.Windows.Forms.EventExamples#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="contextMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ContextMenu.Collapse" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="contextMenu.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ContextMenu.Popup" /> 事件</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在快捷菜单显示之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此事件来初始化<xref:System.Windows.Forms.MenuItem>对象才会显示。 例如，如果您使用<xref:System.Windows.Forms.ContextMenu>这三种<xref:System.Windows.Forms.TextBox>控制，并且您想要禁用某些菜单项在<xref:System.Windows.Forms.ContextMenu>具体取决于<xref:System.Windows.Forms.TextBox>是显示的快捷菜单，可以创建此事件的事件处理程序。 可以使用<xref:System.Windows.Forms.ContextMenu.SourceControl%2A>属性来确定哪些<xref:System.Windows.Forms.TextBox>即将显示<xref:System.Windows.Forms.ContextMenu>并禁用相应<xref:System.Windows.Forms.MenuItem>对象。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例创建的事件处理程序<xref:System.Windows.Forms.ContextMenu.Popup>事件的<xref:System.Windows.Forms.ContextMenu>。 事件处理程序中的代码确定两个控件中的哪<xref:System.Windows.Forms.PictureBox>名为`pictureBox1`和一个<xref:System.Windows.Forms.TextBox>名为`textBox1`是显示的快捷菜单的控件。 具体取决于哪个控件导致<xref:System.Windows.Forms.ContextMenu>若要显示其快捷菜单，该控件添加相应<xref:System.Windows.Forms.MenuItem>对象添加到<xref:System.Windows.Forms.ContextMenu>。 此示例要求您具有的实例<xref:System.Windows.Forms.ContextMenu>类，名为`contextMenu1`、 窗体中定义。 此示例还要求你有<xref:System.Windows.Forms.TextBox>并<xref:System.Windows.Forms.PictureBox>添加到窗体，并<xref:System.Windows.Forms.Control.ContextMenu%2A>这些控件的属性设置为`contextMenu1`。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData, System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData, class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys,System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData, System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys * System.Windows.Forms.Control -&gt; bool" Usage="contextMenu.ProcessCmdKey (msg, keyData, control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="msg">通过引用传递的 <see cref="T:System.Windows.Forms.Message" />，表示要处理的窗口消息。</param>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> 值之一，表示要处理的键。</param>
        <param name="control">命令键应用到的控件。</param>
        <summary>处理命令键。</summary>
        <returns>如果字符已由控件处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在消息处理命令键的预处理过程中调用此方法。 命令键是始终优先于常规输入键的键。 命令键的示例包括加速器和菜单快捷方式。 该方法必须返回`true`以指示它已处理命令键，或`false`以指示密钥不是命令键。 当控件承载在 Windows 窗体应用程序或作为 ActiveX 控件时，只能调用此方法。  
  
 <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A>方法首先确定控件是否有<xref:System.Windows.Forms.ContextMenu>，以及如果是这样，启用<xref:System.Windows.Forms.ContextMenu>来处理命令键。 如果命令键不为菜单快捷方式，该控件具有一个父级，该密钥传递给父级的<xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A>方法。 实际效果是该密钥"弹出"的控件层次结构的命令。 用户按下的键，除了密钥数据还指示哪些，如果有，同时按下修改键作为键相同的时间。 修改键包括 SHIFT、 CTRL 和 ALT 键。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">直接调用方调用非托管的代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />派生类中的方法，控件应返回<see langword="true" />以指示它已处理该键。不会处理由控件调用的基类的结果的密钥<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />方法应返回。控件将很少，如果有过，需要重写此方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示由控件显示的文本是否从右向左显示。</summary>
        <value>
          <see cref="T:System.Windows.Forms.RightToLeft" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可为菜单以支持从右到左书写的语言。 当此属性设置为`RightToLeft.Yes`，从右到左而不是从左到右的方法的默认显示菜单项文本。  
  
> [!NOTE]
>  有关如何启用从右到左对齐方式会影响 Windows 窗体控件的详细信息，请参阅<xref:System.Windows.Forms.Control.RightToLeft%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配给该属性的值不是 <see cref="T:System.Windows.Forms.RightToLeft" /> 枚举的有效成员。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Show">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在指定位置显示快捷菜单。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point -&gt; unit" Usage="contextMenu.Show (control, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="control">一个 <see cref="T:System.Windows.Forms.Control" />，它指定与此快捷菜单相关联的控件。</param>
        <param name="pos">一个 <see cref="T:System.Drawing.Point" />，它指定要显示菜单的位置的坐标。 相对于 <c>control</c> 参数中指定的控件的工作区坐标来指定这些坐标。</param>
        <summary>在指定位置显示快捷菜单。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，<xref:System.Windows.Forms.ContextMenu>当用户单击鼠标右键控件或窗体区域上的显示的<xref:System.Windows.Forms.ContextMenu>绑定到。 此方法可用于手动的特定位置显示快捷菜单，并将其绑定到特定控件。 此方法不返回，直到关闭菜单。  
  
   
  
## Examples  
 下面的代码示例演示如何构造快捷菜单和使用<xref:System.Windows.Forms.ContextMenu.Show%2A>方法。 若要运行该示例，请在包含名为 Button1 的按钮的窗体中粘贴以下代码。 请确保所有事件都都具有其事件处理方法关联。  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">控件的句柄不存在或控件不可见。</exception>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos, System.Windows.Forms.LeftRightAlignment alignment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos, valuetype System.Windows.Forms.LeftRightAlignment alignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos, System::Windows::Forms::LeftRightAlignment alignment);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point * System.Windows.Forms.LeftRightAlignment -&gt; unit" Usage="contextMenu.Show (control, pos, alignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
        <Parameter Name="alignment" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="control">一个 <see cref="T:System.Windows.Forms.Control" />，它指定与此快捷菜单相关联的控件。</param>
        <param name="pos">一个 <see cref="T:System.Drawing.Point" />，它指定要显示菜单的位置的坐标。 相对于 <c>control</c> 参数中指定的控件的工作区坐标来指定这些坐标。</param>
        <param name="alignment">
          <see cref="T:System.Windows.Forms.LeftRightAlignment" />，它指定相对于 <c>pos</c> 参数的控件的对齐方式。</param>
        <summary>在指定的位置使用指定的对齐方式显示快捷菜单。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control SourceControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control SourceControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ SourceControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前显示快捷菜单的控件。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.Control" />，它代表当前显示快捷菜单的控件。 如果没有控件显示快捷菜单，则该属性返回 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性，可确定该控件当前显示在中定义的快捷菜单<xref:System.Windows.Forms.ContextMenu>。 如果当前未显示的快捷菜单，可以使用此属性来确定哪个控件上一次显示的快捷菜单。 可以使用此属性在<xref:System.Windows.Forms.ContextMenu.Popup>事件，以确保该控件显示的适当菜单项。 此外可以使用此属性将传递给执行快捷方式菜单中显示的菜单命令相关联的任务的方法对控件的引用。 由于<xref:System.Windows.Forms.Form>类继承自<xref:System.Windows.Forms.Control>，你还可以使用此属性，如果<xref:System.Windows.Forms.ContextMenu>与窗体相关联。  
  
   
  
## Examples  
 下面的代码示例创建的事件处理程序<xref:System.Windows.Forms.ContextMenu.Popup>事件的<xref:System.Windows.Forms.ContextMenu>。 事件处理程序中的代码确定两个控件中的哪<xref:System.Windows.Forms.PictureBox>名为`pictureBox1`和一个<xref:System.Windows.Forms.TextBox>名为`textBox1`是显示的快捷菜单的控件。 具体取决于哪个控件导致<xref:System.Windows.Forms.ContextMenu>若要显示其快捷菜单，该控件添加相应<xref:System.Windows.Forms.MenuItem>对象添加到<xref:System.Windows.Forms.ContextMenu>。 此示例要求您具有的实例<xref:System.Windows.Forms.ContextMenu>类，名为`contextMenu1`、 窗体中定义。 此示例还要求你有<xref:System.Windows.Forms.TextBox>并<xref:System.Windows.Forms.PictureBox>添加到窗体，并<xref:System.Windows.Forms.Control.ContextMenu%2A>这些控件的属性设置为`contextMenu1`。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>