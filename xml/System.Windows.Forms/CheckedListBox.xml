<Type Name="CheckedListBox" FullName="System.Windows.Forms.CheckedListBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d2ba0042838fdb654d01656bb60fa077b0072088" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30641501" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CheckedListBox : System.Windows.Forms.ListBox" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CheckedListBox extends System.Windows.Forms.ListBox" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.CheckedListBox" />
  <TypeSignature Language="VB.NET" Value="Public Class CheckedListBox&#xA;Inherits ListBox" />
  <TypeSignature Language="C++ CLI" Value="public ref class CheckedListBox : System::Windows::Forms::ListBox" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ListBox</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.LookupBindingProperties</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>显示一个 <see cref="T:System.Windows.Forms.ListBox" />，其中在每项的左边显示一个复选框。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此控件显示的用户可以通过使用键盘或滚动条控件右侧导航的项的列表。 用户可以通过将放入复选标记一个或多个项和已选中的项可以导航与<xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>和<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>。  
  
 若要在运行时将对象添加到列表，分配的对象引用与数组<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>方法。 然后，该列表显示每个对象的默认字符串值。 你可以将各个项添加到该列表与<xref:System.Windows.Forms.CheckedListBox.ObjectCollection.Add%2A>方法。  
  
 <xref:System.Windows.Forms.CheckedListBox>对象支持通过三种状态<xref:System.Windows.Forms.CheckState>枚举： <xref:System.Windows.Forms.CheckState.Checked>， <xref:System.Windows.Forms.CheckState.Indeterminate>，和<xref:System.Windows.Forms.CheckState.Unchecked>。 必须设置的状态的<xref:System.Windows.Forms.CheckState.Indeterminate>在代码中的用户界面因为<xref:System.Windows.Forms.CheckedListBox>不提供一种机制来这样做。  
  
 如果<xref:System.Windows.Forms.ListBox.UseTabStops%2A>是`true`、<xref:System.Windows.Forms.CheckedListBox>将识别并展开在项的文本中，创建列的制表符字符数。 这些选项卡停止预设了并不能更改。 若要使用自定义选项卡停止，设置<xref:System.Windows.Forms.ListBox.UseTabStops%2A>到`false`，将其设置<xref:System.Windows.Forms.ListBox.UseCustomTabOffsets%2A>到`true`，并添加到自定义值<xref:System.Windows.Forms.ListBox.CustomTabOffsets%2A>集合。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.CheckedListBox.UseCompatibleTextRendering%2A>属性是`false`、<xref:System.Windows.Forms.ListBox.CustomTabOffsets%2A>将忽略属性，并将其替换为标准的制表位偏移量。  
  
 <xref:System.Windows.Forms.CheckedListBox>类支持以下三个索引的集合：  
  
|集合|封装类|  
|----------------|-------------------------|  
|中包含的所有项<xref:System.Windows.Forms.CheckedListBox>控件。|<xref:System.Windows.Forms.CheckedListBox.ObjectCollection>|  
|已选中项 （包括处于不确定状态的项），该部分项目包含在<xref:System.Windows.Forms.CheckedListBox>控件。|<xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>|  
|检查索引，它是项集合中的索引子集。 这些索引在选中或不确定状态中指定项。|<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>|  
  
 以下三个表是三个索引集合的示例，<xref:System.Windows.Forms.CheckedListBox>类支持。  
  
 第一个表提供的控件 （包含在控件中的所有项） 中的项的索引集合的示例。  
  
|索引|项|检查状态|  
|-----------|----------|-----------------|  
|0|对象 1|<xref:System.Windows.Forms.CheckState.Unchecked>|  
|1|对象 2|<xref:System.Windows.Forms.CheckState.Checked>|  
|2|对象 3|<xref:System.Windows.Forms.CheckState.Unchecked>|  
|3|对象 4|<xref:System.Windows.Forms.CheckState.Indeterminate>|  
|4|对象 5|<xref:System.Windows.Forms.CheckState.Checked>|  
  
 第二个表提供了已选中项的索引集合的示例。  
  
|索引|项|  
|-----------|----------|  
|0|对象 2|  
|1|对象 4|  
|2|对象 5|  
  
 第三个表提供了选中项的索引的索引集合的示例。  
  
|索引|项的索引|  
|-----------|-------------------|  
|0|1|  
|1|3|  
|2|4|  
  
   
  
## Examples  
 下面的示例演示如何使用方法、 属性和集合的<xref:System.Windows.Forms.CheckedListBox>。 这是准备好运行一次，你已将它复制到你的项目的完整示例。 可以检查和取消选中项、 使用文本框中添加项和您在一次单击保存按钮，清除已选中的项。  
  
 [!code-cpp[Classic CheckedListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckedListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckedListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckedListBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckedListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckedListBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListBox" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CheckedListBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CheckedListBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.CheckedListBox" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Windows.Forms.CheckedListBox>使用<xref:System.Windows.Forms.Control.SetStyle%2A>和`ResizeRedraw`值<xref:System.Windows.Forms.ControlStyles>指定控件在调整大小时重绘。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckedListBox.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CheckedListBox/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.CheckedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedIndices As CheckedListBox.CheckedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CheckedListBox::CheckedIndexCollection ^ CheckedIndices { System::Windows::Forms::CheckedListBox::CheckedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckedListBox+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>该 <see cref="T:System.Windows.Forms.CheckedListBox" /> 中选中索引的集合。</summary>
        <value>
          <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection" /> 的 <see cref="T:System.Windows.Forms.CheckedListBox" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 选中的索引的集合是中的所有项的集合中的索引子集<xref:System.Windows.Forms.CheckedListBox>控件。 这些索引在选中或不确定状态中指定项。  
  
   
  
## Examples  
 下面的示例枚举中的已选中的项<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>若要查看内容检查项的状态处于。 该示例演示如何使用<xref:System.Windows.Forms.CheckedListBox.CheckedIndices%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>，和<xref:System.Windows.Forms.CheckedListBox.CheckedItems%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>。  
  
 第一个循环使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>方法以获取<xref:System.Windows.Forms.CheckState>的每个选中的项，给定项的索引。 第二个循环也使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>，但使用<xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType>方法来检索项的索引。  
  
 [!code-cpp[CheckedListBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#2)]
 [!code-csharp[CheckedListBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#2)]
 [!code-vb[CheckedListBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckedListBox.CheckedItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CheckedListBox/CheckedItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.CheckedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedItems As CheckedListBox.CheckedItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CheckedListBox::CheckedItemCollection ^ CheckedItems { System::Windows::Forms::CheckedListBox::CheckedItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckedListBox+CheckedItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>该 <see cref="T:System.Windows.Forms.CheckedListBox" /> 中选中项的集合。</summary>
        <value>
          <see cref="T:System.Windows.Forms.CheckedListBox.CheckedItemCollection" /> 的 <see cref="T:System.Windows.Forms.CheckedListBox" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 集合是中的对象的子集<xref:System.Windows.Forms.CheckedListBox.Items%2A>的项集合，表示只有<xref:System.Windows.Forms.CheckState?displayProperty=nameWithType>是`Checked`或`Indeterminate`。 此集合中的索引都按升序。  
  
   
  
## Examples  
 下面的示例枚举中的已选中的项<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>若要查看内容检查项的状态处于。 该示例演示如何使用<xref:System.Windows.Forms.CheckedListBox.CheckedIndices%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>，和<xref:System.Windows.Forms.CheckedListBox.CheckedItems%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>。  
  
 第一个循环使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>方法以获取<xref:System.Windows.Forms.CheckState>的每个选中的项，给定项的索引。 第二个循环也使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>，但使用<xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType>方法来检索项的索引。  
  
 若要运行此示例，请执行以下步骤：  
  
1.  创建新的 Windows 窗体应用程序。  
  
2.  添加<xref:System.Windows.Forms.CheckedListBox>和<xref:System.Windows.Forms.Button>到窗体。  
  
3.  将该按钮命名`WhatIsChecked`，添加的处理程序其<xref:System.Windows.Forms.Control.Click>事件，并在以下处理程序的主体中的代码中的副本。  
  
4.  某些将项添加到<xref:System.Windows.Forms.CheckedListBox>。  
  
5.  运行示例，并检查某些列表框中的复选框。  
  
6.  单击按钮。  
  
     你将看到一系列的消息框，指示签入的项。  
  
 [!code-cpp[CheckedListBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#2)]
 [!code-csharp[CheckedListBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#2)]
 [!code-vb[CheckedListBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CheckedListBox.CheckedItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="CheckOnClick">
      <MemberSignature Language="C#" Value="public bool CheckOnClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckOnClick" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.CheckOnClick" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckOnClick As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckOnClick { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当选定项时是否应切换复选框。</summary>
        <value>
          如果立即应用选中标记，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A> 指示是否应切换复选框，每当选择项。 默认行为是更改在第一次单击，选择，然后再次单击以应用复选标记的用户。 在某些情况下，但是，你可能更喜欢具有项检查，只要单击它。  
  
   
  
## Examples  
 下面的代码示例演示如何初始化<xref:System.Windows.Forms.CheckedListBox>通过设置<xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A>， <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A>，和<xref:System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes%2A>属性。 该示例填充<xref:System.Windows.Forms.CheckedListBox>带控件和集<xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A>到<xref:System.Windows.Forms.Control.Name%2A?displayProperty=nameWithType>的控件属性。  
  
 若要运行该示例，请将以下代码粘贴在窗体包含<xref:System.Windows.Forms.CheckedListBox>名为`CheckedListBox1`并调用`InitializeCheckListBox`从窗体的构造函数或负载方法的方法。  
  
 [!code-cpp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户单击 <see cref="T:System.Windows.Forms.CheckedListBox" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.Click>事件传递<xref:System.EventArgs>给其事件处理程序中，因此它仅指示发生了单击操作。 如果需要更具体的鼠标信息 （如按钮、 单击、 鼠标轮旋转或位置的数），使用<xref:System.Windows.Forms.Control.MouseDown>和<xref:System.Windows.Forms.Control.MouseUp>事件，将传递<xref:System.Windows.Forms.MouseEventArgs>到事件处理程序。  
  
 由用户的操作系统的鼠标设置确定一次双击。 用户可以调整可以传递期间双击鼠标按钮点击之间的时间量。 <xref:System.Windows.Forms.CheckedListBox.Click>每次用户双击控件时引发事件。 例如，如果你有的事件处理方法<xref:System.Windows.Forms.CheckedListBox.Click>和<xref:System.Windows.Forms.Control.DoubleClick>事件的窗体中，双击窗体，这两个事件处理方法调用时引发事件。 如果用户双击控件不支持<xref:System.Windows.Forms.Control.DoubleClick>事件，<xref:System.Windows.Forms.CheckedListBox.Click>事件，可能会引发两次。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.CheckedListBox.Click>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.CheckedListBox>名为`CheckedListBox1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.CheckedListBox.Click>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#157)]
 [!code-vb[System.Windows.Forms.EventExamples#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:System.Windows.Forms.CheckedListBox" /> 控件创建一个新的辅助功能对象。</summary>
        <returns>控件的新 <see cref="T:System.Windows.Forms.AccessibleObject" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不显式调用 <xref:System.Windows.Forms.CheckedListBox.CreateAccessibilityInstance%2A> 方法，则在引用 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 属性时将会调用此方法。  
  
> [!NOTE]
>  要获取或设置<xref:System.Windows.Forms.Control.AccessibilityObject%2A>属性，必须添加对引用`Accessibility`随.NET Framework 一起安装的程序集。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.CheckedListBox.CreateAccessibilityInstance" />在派生类中，不应调用基类的<see cref="M:System.Windows.Forms.CheckedListBox.CreateAccessibilityInstance" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateItemCollection">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.ListBox.ObjectCollection CreateItemCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.ListBox/ObjectCollection CreateItemCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.CreateItemCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateItemCollection () As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::ListBox::ObjectCollection ^ CreateItemCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建项集合的新实例。</summary>
        <returns>表示新项集合的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.CreateItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取创建控件句柄时所需要的创建参数。</summary>
        <value>包含所需参数的 <see cref="T:System.Windows.Forms.CreateParams" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.CreateParams%2A>属性不应重写，用于调整派生控件的属性。 属性，如<xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>， <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType>应设置在控件中的相应属性如<xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>，<xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>。 <xref:System.Windows.Forms.CreateParams>包装标准 Windows 控件类或设置样式不是由 Windows 窗体命名空间时才应扩展。 有关创建控制参数的详细信息，请参阅`CreateWindow`和`CreateWindowEx`函数和`CREATESTRUCT`Windows 平台 SDK 参考中的结构文档位于 MSDN 库http://msdn.microsoft.com/library。  
  
   
  
## Examples  
 下面的代码示例扩展<xref:System.Windows.Forms.Control.CreateParams%2A>属性<xref:System.Windows.Forms.Button>派生类。 <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType>属性更改，这将导致按钮以显示<xref:System.Drawing.Icon>而非<xref:System.Drawing.Image>。 此示例要求你拥有从继承的类<xref:System.Windows.Forms.Button>类。  
  
 [!code-cpp[CreateParams#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CreateParams/CPP/createparams.cpp#3)]
 [!code-csharp[CreateParams#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CreateParams/CS/createparams.cs#3)]
 [!code-vb[CreateParams#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CreateParams/VB/createparams.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>在重写<see cref="P:System.Windows.Forms.Control.CreateParams" />属性在派生类中，使用基类的<see cref="P:System.Windows.Forms.Control.CreateParams" />属性来扩展的基实现。 否则，你必须提供所有实现。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的数据源。</summary>
        <value>表示数据来源的对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataSourceChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DataSourceChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.CheckedListBox.DataSource" /> 属性更改时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayMember">
      <MemberSignature Language="C#" Value="public string DisplayMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayMember" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.DisplayMember" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayMember As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayMember { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个字符串，该字符串指定要显示其内容的列表框中所含对象的属性。</summary>
        <value>指定列表框中所含对象的属性名的字符串。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下<xref:System.Windows.Forms.CheckedListBox>显示其包含的项的默认字符串。 但是，<xref:System.Windows.Forms.CheckedListBox>可以显示不同类型的对象，并且你可能想要通过指定更改显示的字符串<xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A>属性。 如果指定的属性不存在，或值<xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A>属性为空字符串 ("")，该对象的结果<xref:System.Windows.Forms.ListBox.ToString%2A>改为显示方法。  
  
 如果的新值<xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A>不能设置，维护以前的值。  
  
   
  
## Examples  
 下面的代码示例演示如何初始化<xref:System.Windows.Forms.CheckedListBox>通过设置<xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A>， <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A>，和<xref:System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes%2A>属性。 该示例填充<xref:System.Windows.Forms.CheckedListBox>带控件和集<xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A>到<xref:System.Windows.Forms.Control.Name%2A?displayProperty=nameWithType>的控件属性。  
  
 若要运行该示例，请将以下代码粘贴在窗体包含<xref:System.Windows.Forms.CheckedListBox>名为`CheckedListBox1`并调用`InitializeCheckListBox`从窗体的构造函数或负载方法的方法。  
  
 [!code-cpp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayMemberChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DisplayMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DisplayMemberChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.DisplayMemberChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DisplayMemberChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DisplayMemberChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.CheckedListBox.DisplayMember" /> 属性更改时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在所有者绘制的 <see cref="T:System.Windows.Forms.CheckedListBox" /> 的可视方位更改时发生。 此事件与此类无关。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件由一个所有者绘制<xref:System.Windows.Forms.CheckedListBox>。 引发事件时，才<xref:System.Windows.Forms.CheckedListBox.DrawMode%2A>属性设置为<xref:System.Windows.Forms.DrawMode.OwnerDrawFixed?displayProperty=nameWithType>或<xref:System.Windows.Forms.DrawMode.OwnerDrawVariable?displayProperty=nameWithType>。 你可以使用此事件来执行绘制项所需的任务<xref:System.Windows.Forms.CheckedListBox>。 如果你拥有一个可变大小的项 (即，<xref:System.Windows.Forms.CheckedListBox.DrawMode%2A>设置为<xref:System.Windows.Forms.DrawMode.OwnerDrawVariable?displayProperty=nameWithType>)，则<xref:System.Windows.Forms.CheckedListBox.MeasureItem>绘制项之前，将引发事件。 你可以创建的事件处理程序<xref:System.Windows.Forms.CheckedListBox.MeasureItem>事件，以指定要绘制事件处理程序中的项的大小<xref:System.Windows.Forms.CheckedListBox.DrawItem>事件。  
  
 此事件与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.DrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.DrawMode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DrawMode As DrawMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DrawMode DrawMode { System::Windows::Forms::DrawMode get(); void set(System::Windows::Forms::DrawMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值表示 <see cref="T:System.Windows.Forms.CheckedListBox" /> 的绘制元素的模式。 此属性与此类无关。</summary>
        <value>通常为 <see langword="Normal" /> 的 <see cref="T:System.Windows.Forms.DrawMode" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemChecked">
      <MemberSignature Language="C#" Value="public bool GetItemChecked (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetItemChecked(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.GetItemChecked(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemChecked (index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetItemChecked(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">项的索引。</param>
        <summary>返回指示指定项是否选中的值。</summary>
        <returns>
          如果选中该项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.GetItemChecked%2A> 返回`true`如果的值<xref:System.Windows.Forms.CheckState>是`Checked`或`Indeterminate`项。 若要确定项处于特定状态，请使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定的 <paramref name="index" /> 小于零。  
  
 或  
  
 指定的 <paramref name="index" /> 大于或等于列表中项的计数。</exception>
        <altmember cref="M:System.Windows.Forms.CheckedListBox.GetItemCheckState(System.Int32)" />
        <altmember cref="T:System.Windows.Forms.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="GetItemCheckState">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckState GetItemCheckState (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.CheckState GetItemCheckState(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.GetItemCheckState(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemCheckState (index As Integer) As CheckState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::CheckState GetItemCheckState(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要获取其选中值的项的索引。</param>
        <summary>返回指示当前项的复选状态的值。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.CheckState" /> 值之一。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>方法能够获取<xref:System.Windows.Forms.CheckState>项，为索引提供了值。 如果你永远不会设置一个项的复选状态`Indeterminate`，然后使用<xref:System.Windows.Forms.CheckedListBox.GetItemChecked%2A>方法。  
  
   
  
## Examples  
 下面的示例枚举中的已选中的项<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>若要查看内容检查项的状态处于。 该示例演示如何使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>方法来设置项的复选状态。 该示例还演示了如何使用<xref:System.Windows.Forms.CheckedListBox.CheckedIndices%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>和<xref:System.Windows.Forms.CheckedListBox.CheckedItems%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>。  
  
 第一个循环使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>方法以获取<xref:System.Windows.Forms.CheckState>的每个选中的项，给定项的索引。 第二个循环也使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>，但使用<xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType>方法来检索项的索引。  
  
 [!code-cpp[CheckedListBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#2)]
 [!code-csharp[CheckedListBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#2)]
 [!code-vb[CheckedListBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零。  
  
 或  
  
 指定的 <paramref name="index" /> 大于或等于列表中项的计数。</exception>
        <altmember cref="M:System.Windows.Forms.CheckedListBox.GetItemChecked(System.Int32)" />
        <altmember cref="T:System.Windows.Forms.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.ItemCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCheck As ItemCheckEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckEventHandler ^ ItemCheck;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当某项的选中状态更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 直到会被更新的复选状态后<xref:System.Windows.Forms.CheckedListBox.ItemCheck>事件发生。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.CheckedListBox.ItemCheck>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.CheckedListBox>名为`CheckedListBox1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.CheckedListBox.ItemCheck>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#156)]
 [!code-vb[System.Windows.Forms.EventExamples#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public override int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.ItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ItemHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ItemHeight { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取项区域的高度。</summary>
        <value>项区域的高度（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此测量值基于字体高度加上一个小边距来提供项周围的空白区域。  
  
 当字体更改为 9.75 点 Arial"g"、"y"等字符的扩展部分不正确显示。 若要纠正此问题，派生类从<xref:System.Windows.Forms.CheckedListBox>，并重写<xref:System.Windows.Forms.CheckedListBox.ItemHeight%2A>返回`base.ItemHeight+2`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckedListBox.ObjectCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CheckedListBox/ObjectCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As CheckedListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CheckedListBox::ObjectCollection ^ Items { System::Windows::Forms::CheckedListBox::ObjectCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckedListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该 <see cref="T:System.Windows.Forms.CheckedListBox" /> 中项的集合。</summary>
        <value>代表 <see cref="T:System.Windows.Forms.CheckedListBox.ObjectCollection" /> 中的项的 <see cref="T:System.Windows.Forms.CheckedListBox" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.Items%2A>属性使您能够获取对当前存储中的项列表的引用<xref:System.Windows.Forms.CheckedListBox>控件。 通过此引用，可以将项添加、 删除项，并获取集合中项的计数。 可以使用项集合执行的任务的详细信息，请参阅<xref:System.Windows.Forms.CheckedListBox.ObjectCollection>类参考主题。  
  
   
  
## Examples  
 下面的示例枚举中的已选中的项<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>若要查看内容检查项的状态处于。 该示例使用<xref:System.Windows.Forms.CheckedListBox.Items%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.ObjectCollection>要检索其索引的项使用<xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType>方法。 该示例还演示了如何使用<xref:System.Windows.Forms.CheckedListBox.CheckedIndices%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.CheckedIndexCollection>，和<xref:System.Windows.Forms.CheckedListBox.CheckedItems%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.CheckedItemCollection>。  
  
 第一个循环使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>方法以获取<xref:System.Windows.Forms.CheckState>的每个选中的项，给定项的索引。 第二个循环也使用<xref:System.Windows.Forms.CheckedListBox.GetItemCheckState%2A>，但使用<xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A?displayProperty=nameWithType>方法来检索项的索引。  
  
 [!code-cpp[CheckedListBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#2)]
 [!code-csharp[CheckedListBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#2)]
 [!code-vb[CheckedListBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckedListBox.CheckedItems" />
        <altmember cref="P:System.Windows.Forms.CheckedListBox.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>创建所有者描述的 <see cref="T:System.Windows.Forms.ListBox" /> 和确定列表项的大小时发生。 此事件与此类无关。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以创建的事件处理程序以指定的项的大小，绘制之前此事件<xref:System.Windows.Forms.CheckedListBox.DrawItem>事件。 引发事件时，才<xref:System.Windows.Forms.CheckedListBox.DrawMode%2A>属性设置为<xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>。  
  
 最大高度<xref:System.Windows.Forms.ListBox>项是 255 像素。  
  
 此事件与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户使用鼠标单击 <see cref="T:System.Windows.Forms.CheckedListBox" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.CheckedListBox.MouseClick>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.CheckedListBox>名为`CheckedListBox1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.CheckedListBox.MouseClick>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#158)]
 [!code-vb[System.Windows.Forms.EventExamples#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected override void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClick(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.CheckedListBox.Click" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.OnClick%2A>方法选择或清除复选框单击的项。 如果<xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A>属性设置为`true`，复选框切换从单击项的选中或清除状态第一个时间。 否则，仅当已选定了项，则会切换复选框。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckedListBox.OnClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.CheckedListBox.OnClick(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.CheckedListBox.OnClick(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected override void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">具有细节信息的 <see cref="T:System.Windows.Forms.DrawItemEventArgs" /> 对象</param>
        <summary>引发 <see cref="E:System.Windows.Forms.CheckedListBox.DrawItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckedListBox.OnDrawItem%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Windows.Forms.CheckedListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.CheckedListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.FontChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckedListBox.OnFontChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.CheckedListBox.OnFontChanged(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.CheckedListBox.OnFontChanged(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.HandleCreated" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckedListBox.OnHandleCreated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.CheckedListBox.OnHandleCreated(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.CheckedListBox.OnHandleCreated(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCheck (ice As ItemCheckEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCheck(System::Windows::Forms::ItemCheckEventArgs ^ ice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">包含事件数据的 <see cref="T:System.Windows.Forms.ItemCheckEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.CheckedListBox.ItemCheck" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckedListBox.OnItemCheck%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.CheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.CheckedListBox.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">所引发的 <see cref="T:System.Windows.Forms.KeyPressEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果按空格键和<xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A>属性未设置为<xref:System.Windows.Forms.SelectionMode.None?displayProperty=nameWithType>、<xref:System.Windows.Forms.CheckedListBox.OnKeyPress%2A>方法会切换当前所选的项的复选状态。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckedListBox.OnKeyPress%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.CheckedListBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.CheckedListBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected override void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.MeasureItemEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.CheckedListBox.MeasureItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckedListBox.OnMeasureItem%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Windows.Forms.CheckedListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.CheckedListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListBox.SelectedIndexChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.CheckedListBox" /> 内的边距。 此属性与此类无关。</summary>
        <value>表示控件的内部间距特征的 <see cref="T:System.Windows.Forms.Padding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值时控件接收<xref:System.Windows.Forms.Control.Padding%2A>规范的合理即将 Windows 用户界面指南。 一些调整可能仍有必要为特定应用程序。  
  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="protected override void RefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.RefreshItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItems();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>再次分析所有 <see cref="T:System.Windows.Forms.CheckedListBox" /> 项，并获取这些项的新的文本字符串。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.SelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.SelectionMode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectionMode As SelectionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::SelectionMode SelectionMode { System::Windows::Forms::SelectionMode get(); void set(System::Windows::Forms::SelectionMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定选择模式的值。</summary>
        <value>
          <see cref="T:System.Windows.Forms.SelectionMode" /> 的 <see langword="One" /> 或 <see langword="None" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A>属性确定是否可以选择列表框中的一项或可以选择任何项。 有关<xref:System.Windows.Forms.CheckedListBox>不支持多个选择的对象。 可以将模式设置为一项或没有任何项。  
  
   
  
## Examples  
 下面的代码示例演示如何初始化<xref:System.Windows.Forms.CheckedListBox>通过设置<xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A>可允许在要选择的列表中的一个项。  
  
 若要运行该示例，请将以下代码粘贴在窗体包含<xref:System.Windows.Forms.CheckedListBox>名为`CheckedListBox1`并调用`InitializeCheckListBox`从窗体的构造函数或负载方法的方法。  
  
 [!code-cpp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">尝试分配一个值，该值不是 <see langword="One" /> 或 <see langword="None" /> 的 <see cref="T:System.Windows.Forms.SelectionMode" /> 值。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">尝试给控件分配 <see cref="T:System.Windows.Forms.SelectionMode" /> 的 <see langword="MultiExtended" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.SelectionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetItemChecked">
      <MemberSignature Language="C#" Value="public void SetItemChecked (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetItemChecked(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.SetItemChecked(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetItemChecked (index As Integer, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetItemChecked(int index, bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">要为其设置复选状态的项的索引。</param>
        <param name="value">
          若要将该项设置为选中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>将指定索引处的项的 <see cref="T:System.Windows.Forms.CheckState" /> 设置为 <see langword="Checked" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值时`true`传递时，此方法设置<xref:System.Windows.Forms.CheckState>值赋给`Checked`。 值为`false`设置<xref:System.Windows.Forms.CheckState>到`Unchecked`。  
  
   
  
## Examples  
 下面的示例枚举中的项<xref:System.Windows.Forms.CheckedListBox>并检查列表中的每个其他项。 该示例演示如何使用<xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A>和<xref:System.Windows.Forms.CheckedListBox.SetItemChecked%2A>方法来设置项的复选状态。 要检查的每个其他项<xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A>调用来设置<xref:System.Windows.Forms.CheckState>到`Indeterminate`，虽然<xref:System.Windows.Forms.CheckedListBox.SetItemChecked%2A>上要设置为选中的状态的其他项调用`Checked`。  
  
 该示例还演示了如何使用<xref:System.Windows.Forms.CheckedListBox.Items%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.ObjectCollection>获取<xref:System.Windows.Forms.ListBox.ObjectCollection.Count%2A>的项。  
  
 [!code-cpp[CheckedListBox#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#3)]
 [!code-csharp[CheckedListBox#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#3)]
 [!code-vb[CheckedListBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定的 index 小于零。  
  
 或  
  
 该索引大于列表中项的计数。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetItemCheckState">
      <MemberSignature Language="C#" Value="public void SetItemCheckState (int index, System.Windows.Forms.CheckState value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetItemCheckState(int32 index, valuetype System.Windows.Forms.CheckState value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.SetItemCheckState(System.Int32,System.Windows.Forms.CheckState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetItemCheckState (index As Integer, value As CheckState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetItemCheckState(int index, System::Windows::Forms::CheckState value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Windows.Forms.CheckState" />
      </Parameters>
      <Docs>
        <param name="index">要为其设置状态的项的索引。</param>
        <param name="value">
          <see cref="T:System.Windows.Forms.CheckState" /> 值之一。</param>
        <summary>设置指定索引处的项的复选状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A> 方法引发 <xref:System.Windows.Forms.CheckedListBox.ItemCheck> 事件。  
  
 项其<xref:System.Windows.Forms.CheckState>设置为`Indeterminate`显示带有复选标记中该复选框，但框为灰显，指示选中的项不确定状态。  
  
   
  
## Examples  
 下面的示例枚举中的项<xref:System.Windows.Forms.CheckedListBox>并检查列表中的每个其他项。 该示例演示如何使用<xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A>和<xref:System.Windows.Forms.CheckedListBox.SetItemChecked%2A>方法来设置项的复选状态。 要检查的每个其他项<xref:System.Windows.Forms.CheckedListBox.SetItemCheckState%2A>调用来设置<xref:System.Windows.Forms.CheckState>到`Indeterminate`，虽然<xref:System.Windows.Forms.CheckedListBox.SetItemChecked%2A>上要设置为选中的状态的其他项调用`Checked`。  
  
 该示例还演示了如何使用<xref:System.Windows.Forms.CheckedListBox.Items%2A>属性来获取<xref:System.Windows.Forms.CheckedListBox.ObjectCollection>获取<xref:System.Windows.Forms.ListBox.ObjectCollection.Count%2A>的项。  
  
 [!code-cpp[CheckedListBox#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CheckedListBox/CPP/source.cpp#3)]
 [!code-csharp[CheckedListBox#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CheckedListBox/CS/source.cs#3)]
 [!code-vb[CheckedListBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CheckedListBox/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零。  
  
 或  
  
 <paramref name="index" /> 大于或等于列表中的项的计数。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="value" /> 不是 <see cref="T:System.Windows.Forms.CheckState" /> 值中的一个。</exception>
        <altmember cref="T:System.Windows.Forms.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="ThreeDCheckBoxes">
      <MemberSignature Language="C#" Value="public bool ThreeDCheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ThreeDCheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeDCheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ThreeDCheckBoxes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示复选框是否有 <see langword="Flat" /> 或 <see langword="Normal" /> 的 <see cref="T:System.Windows.Forms.ButtonState" />。</summary>
        <value>
          如果复选框为平面外观，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何初始化<xref:System.Windows.Forms.CheckedListBox>通过设置<xref:System.Windows.Forms.CheckedListBox.CheckOnClick%2A>， <xref:System.Windows.Forms.CheckedListBox.SelectionMode%2A>，和<xref:System.Windows.Forms.CheckedListBox.ThreeDCheckBoxes%2A>属性。 该示例填充<xref:System.Windows.Forms.CheckedListBox>带控件和集<xref:System.Windows.Forms.CheckedListBox.DisplayMember%2A>到<xref:System.Windows.Forms.Control.Name%2A?displayProperty=nameWithType>的控件属性。  
  
 若要运行该示例，请将以下代码粘贴在窗体包含<xref:System.Windows.Forms.CheckedListBox>名为`CheckedListBox1`并调用`InitializeCheckListBox`从窗体的构造函数或负载方法的方法。  
  
 [!code-cpp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.PropertyGridExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PropertyGridExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ButtonState" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="public bool UseCompatibleTextRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleTextRendering { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定是使用 <see cref="T:System.Drawing.Graphics" /> 类 ([!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]) 还是 <see cref="T:System.Windows.Forms.TextRenderer" /> 类 ([!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]) 呈现文本。</summary>
        <value>
          <see langword="true" /> 如果<see cref="T:System.Drawing.Graphics" />应使用类来执行兼容版本 1.0 和 1.1 文本呈现。 .NET framework 中;否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `UseCompatibleTextRendering`属性旨在提供 visual Windows 窗体控件之间的兼容性，呈现文本使用<xref:System.Windows.Forms.TextRenderer>类和[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]和[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]应用程序执行自定义文本呈现使用<xref:System.Drawing.Graphics>类。 在大多数情况下，如果你的应用程序不正在升级从[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]或[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]，因此，建议你停`UseCompatibleTextRendering`设置的默认值为`false`。  
  
 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]基于<xref:System.Windows.Forms.TextRenderer>类中引入了[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]为了提高性能，使文本效果更好，并提高的国际字体支持。 在早期版本的[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]基于<xref:System.Drawing.Graphics>类用于执行所有文本呈现。 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 计算字符间距和自动换行从的不同[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]。 在 Windows 窗体应用程序中使用<xref:System.Drawing.Graphics>类呈现文本中，这可能会导致使用的控件的文本<xref:System.Windows.Forms.TextRenderer>显示不同于应用程序中的其他文本。 若要解决此不兼容性，你可以设置`UseCompatibleTextRendering`属性`true`对特定的控件。 若要设置`UseCompatibleTextRendering`到`true`应用程序中的所有受支持控件，调用<xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A?displayProperty=nameWithType>方法的参数替换`true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(System.Boolean)" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      </Docs>
    </Member>
    <Member MemberName="ValueMember">
      <MemberSignature Language="C#" Value="public string ValueMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValueMember" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckedListBox.ValueMember" />
      <MemberSignature Language="VB.NET" Value="Public Property ValueMember As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ValueMember { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个字符串，该字符串指定要从中取值的数据源的属性。</summary>
        <value>一个指定要从中取值的数据源的属性的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定的内容<xref:System.Windows.Forms.CheckedListBox.ValueMember%2A>在将数据绑定的情况下的属性。  
  
 您可以清除<xref:System.Windows.Forms.CheckedListBox.ValueMember%2A>属性通过将属性设置为空字符串 ("") 或`null`。  
  
 设置新<xref:System.Windows.Forms.CheckedListBox.ValueMember%2A>属性引发<xref:System.Windows.Forms.CheckedListBox.ValueMemberChanged>和<xref:System.Windows.Forms.ListControl.SelectedValueChanged>事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在由 <see cref="P:System.Windows.Forms.CheckedListBox.DataSource" /> 属性指定的对象上无法找到指定的属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueMemberChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ValueMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ValueMemberChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckedListBox.ValueMemberChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ValueMemberChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ValueMemberChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.CheckedListBox.ValueMember" /> 属性更改时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WmReflectCommand">
      <MemberSignature Language="C#" Value="protected override void WmReflectCommand (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WmReflectCommand(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.WmReflectCommand(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WmReflectCommand (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WmReflectCommand(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">顶级窗口发送到 <see cref="T:System.Windows.Forms.Message" /> 控件的 <see cref="T:System.Windows.Forms.CheckedListBox" />。</param>
        <summary>处理 <see cref="T:System.Windows.Forms.CheckedListBox" /> 控件从顶级窗口中接收的命令消息。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckedListBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">要处理的 Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>处理 Windows 消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Windows.Forms.Control.WndProc%2A>方法以处理操作系统消息中标识<xref:System.Windows.Forms.Message>结构。 在此示例中了解另一个应用程序变为活动状态，以便处理 WM_ACTIVATEAPP 操作系统消息。 请参阅平台 SDK 文档参考位于 MSDN 库http://msdn.microsoft.com/library以了解可用<xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>， <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType>值。 可以在 MSDN 库中也是可用平台 SDK （核心 SDK 部分） 下载中包含的 Windows.h 标头文件中找到实际的常量值http://msdn.microsoft.com/library。  
  
 [!code-cpp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>