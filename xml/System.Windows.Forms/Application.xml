<Type Name="Application" FullName="System.Windows.Forms.Application">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="23cf5709c7b9981a55cf02267bf0f36cec7fa6ac" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Application" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Application extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Application" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Application" />
  <TypeSignature Language="C++ CLI" Value="public ref class Application sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="da226-101">提供 <see langword="static" /> 方法和属性以管理应用程序，例如启动和停止应用程序、处理 Windows 消息的方法和获取应用程序信息的属性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="da226-101">Provides <see langword="static" /> methods and properties to manage an application, such as methods to start and stop an application, to process Windows messages, and properties to get information about an application.</span>
      </span>
      <span data-ttu-id="da226-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="da226-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-103"><xref:System.Windows.Forms.Application>类具有方法用于启动和停止应用程序和线程，并处理 Windows 消息，如下所示：</span><span class="sxs-lookup"><span data-stu-id="da226-103">The <xref:System.Windows.Forms.Application> class has methods to start and stop applications and threads, and to process Windows messages, as follows:</span></span>  
  
-   <span data-ttu-id="da226-104"><xref:System.Windows.Forms.Application.Run%2A> 在当前线程上启动应用程序消息循环和 （可选） 使窗体可见。</span><span class="sxs-lookup"><span data-stu-id="da226-104"><xref:System.Windows.Forms.Application.Run%2A> starts an application message loop on the current thread and, optionally, makes a form visible.</span></span>  
  
-   <span data-ttu-id="da226-105"><xref:System.Windows.Forms.Application.Exit%2A> 或<xref:System.Windows.Forms.Application.ExitThread%2A>停止消息循环。</span><span class="sxs-lookup"><span data-stu-id="da226-105"><xref:System.Windows.Forms.Application.Exit%2A> or <xref:System.Windows.Forms.Application.ExitThread%2A> stops a message loop.</span></span>  
  
-   <span data-ttu-id="da226-106"><xref:System.Windows.Forms.Application.DoEvents%2A> 你的程序时在循环中处理消息。</span><span class="sxs-lookup"><span data-stu-id="da226-106"><xref:System.Windows.Forms.Application.DoEvents%2A> processes messages while your program is in a loop.</span></span>  
  
-   <span data-ttu-id="da226-107"><xref:System.Windows.Forms.Application.AddMessageFilter%2A> 将消息筛选器添加到应用程序消息泵来监视 Windows 消息。</span><span class="sxs-lookup"><span data-stu-id="da226-107"><xref:System.Windows.Forms.Application.AddMessageFilter%2A> adds a message filter to the application message pump to monitor Windows messages.</span></span>  
  
-   <span data-ttu-id="da226-108"><xref:System.Windows.Forms.IMessageFilter> 允许您停止来自引发的事件或在调用事件处理程序之前执行特殊操作。</span><span class="sxs-lookup"><span data-stu-id="da226-108"><xref:System.Windows.Forms.IMessageFilter> lets you stop an event from being raised or perform special operations before invoking an event handler.</span></span>  
  
 <span data-ttu-id="da226-109">此类具有<xref:System.Windows.Forms.Application.CurrentCulture%2A>和<xref:System.Windows.Forms.Application.CurrentInputLanguage%2A>属性要获取或设置区域性当前线程的信息。</span><span class="sxs-lookup"><span data-stu-id="da226-109">This class has <xref:System.Windows.Forms.Application.CurrentCulture%2A> and <xref:System.Windows.Forms.Application.CurrentInputLanguage%2A> properties to get or set culture information for the current thread.</span></span>  
  
 <span data-ttu-id="da226-110">无法创建此类的实例。</span><span class="sxs-lookup"><span data-stu-id="da226-110">You cannot create an instance of this class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-111">下面的代码示例列出窗体上一个列表框中的数字。</span><span class="sxs-lookup"><span data-stu-id="da226-111">The following code example lists numbers in a list box on a form.</span></span> <span data-ttu-id="da226-112">每次你单击`button1`，应用程序列表中添加另一个数。</span><span class="sxs-lookup"><span data-stu-id="da226-112">Each time you click `button1`, the application adds another number to the list.</span></span>  
  
 <span data-ttu-id="da226-113">`Main`方法调用<xref:System.Windows.Forms.Application.Run%2A>启动该应用程序，这将创建窗体，`listBox1`和`button1`。</span><span class="sxs-lookup"><span data-stu-id="da226-113">The `Main` method calls <xref:System.Windows.Forms.Application.Run%2A> to start the application, which creates the form, `listBox1` and `button1`.</span></span> <span data-ttu-id="da226-114">当用户单击`button1`、`button1_Click`方法显示<xref:System.Windows.Forms.MessageBox>。</span><span class="sxs-lookup"><span data-stu-id="da226-114">When the user clicks `button1`, the `button1_Click` method displays a <xref:System.Windows.Forms.MessageBox>.</span></span> <span data-ttu-id="da226-115">如果用户单击`No`上<xref:System.Windows.Forms.MessageBox>、`button1_Click`方法向列表添加一个数字。</span><span class="sxs-lookup"><span data-stu-id="da226-115">If the user clicks `No` on the <xref:System.Windows.Forms.MessageBox>, the `button1_Click` method adds a number to the list.</span></span> <span data-ttu-id="da226-116">如果用户单击`Yes`，应用程序调用<xref:System.Windows.Forms.Application.Exit%2A>来处理队列中的所有剩余消息，然后退出。</span><span class="sxs-lookup"><span data-stu-id="da226-116">If the user clicks `Yes`, the application calls <xref:System.Windows.Forms.Application.Exit%2A> to process all remaining messages in the queue and then to quit.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="da226-117">调用<xref:System.Windows.Forms.Application.Exit%2A>在部分信任环境中将失败。</span><span class="sxs-lookup"><span data-stu-id="da226-117">The call to <xref:System.Windows.Forms.Application.Exit%2A> will fail in partial trust.</span></span>  
  
 [!code-cpp[Classic Application Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application Example/CS/source.cs#1)]
 [!code-vb[Classic Application Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMessageFilter">
      <MemberSignature Language="C#" Value="public static void AddMessageFilter (System.Windows.Forms.IMessageFilter value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMessageFilter(class System.Windows.Forms.IMessageFilter value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMessageFilter (value As IMessageFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMessageFilter(System::Windows::Forms::IMessageFilter ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.IMessageFilter" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da226-118">要安装的 <see cref="T:System.Windows.Forms.IMessageFilter" /> 接口的实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-118">The implementation of the <see cref="T:System.Windows.Forms.IMessageFilter" /> interface you want to install.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-119">添加消息筛选器以便在向目标传送 Windows 消息时监视这些消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-119">Adds a message filter to monitor Windows messages as they are routed to their destinations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-120">若要防止引发特定事件或执行特殊操作事件传递到事件处理程序前，请使用消息筛选器。</span><span class="sxs-lookup"><span data-stu-id="da226-120">Use a message filter to prevent specific events from being raised or to perform special operations for an event before it is passed to an event handler.</span></span> <span data-ttu-id="da226-121">消息筛选器是唯一的特定线程。</span><span class="sxs-lookup"><span data-stu-id="da226-121">Message filters are unique to a specific thread.</span></span>  
  
 <span data-ttu-id="da226-122">若要防止消息被调度，`value`将传递给此方法的参数实例必须重写<xref:System.Windows.Forms.IMessageFilter.PreFilterMessage%2A>方法替换为代码来处理该消息。</span><span class="sxs-lookup"><span data-stu-id="da226-122">To prevent a message from being dispatched, the `value` parameter instance that you pass to this method must override the <xref:System.Windows.Forms.IMessageFilter.PreFilterMessage%2A> method with the code to handle the message.</span></span> <span data-ttu-id="da226-123">该方法必须返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="da226-123">The method must return `false`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="da226-124">将消息筛选器添加到应用程序的消息泵会降低性能。</span><span class="sxs-lookup"><span data-stu-id="da226-124">Adding message filters to the message pump for an application can degrade performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-125">下面的代码示例创建消息筛选器调用`TestMessageFilter`。</span><span class="sxs-lookup"><span data-stu-id="da226-125">The following code example creates a message filter called `TestMessageFilter`.</span></span> <span data-ttu-id="da226-126">此筛选器会阻止与鼠标左键相关的所有消息。</span><span class="sxs-lookup"><span data-stu-id="da226-126">This filter blocks all messages relating to the left mouse button.</span></span> <span data-ttu-id="da226-127">你可以使用消息筛选器之前，必须提供的实现<xref:System.Windows.Forms.IMessageFilter>接口。</span><span class="sxs-lookup"><span data-stu-id="da226-127">Before you can use a message filter, you must provide an implementation for the <xref:System.Windows.Forms.IMessageFilter> interface.</span></span>  
  
 [!code-cpp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CS/source.cs#1)]
 [!code-vb[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="da226-128">直接调用方调用非托管的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-128">for the immediate caller to call unmanaged code.</span>
          </span>
          <span data-ttu-id="da226-129">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-129">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="AllowQuit">
      <MemberSignature Language="C#" Value="public static bool AllowQuit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AllowQuit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.AllowQuit" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AllowQuit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AllowQuit { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-130">获取指示调用方能否退出该应用程序的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-130">Gets a value indicating whether the caller can quit this application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-131">如果调用方能够退出该应用程序，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-131">
              <see langword="true" /> if the caller can quit this application; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-132">此属性返回`false`如果从调用<xref:System.Windows.Forms.Control>在 Web 浏览器内承载。</span><span class="sxs-lookup"><span data-stu-id="da226-132">This property returns `false` if it is called from a <xref:System.Windows.Forms.Control> being hosted within a Web browser.</span></span> <span data-ttu-id="da226-133">因此，<xref:System.Windows.Forms.Control>无法退出<xref:System.Windows.Forms.Application>。</span><span class="sxs-lookup"><span data-stu-id="da226-133">Thus, the <xref:System.Windows.Forms.Control> cannot quit the <xref:System.Windows.Forms.Application>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationExit">
      <MemberSignature Language="C#" Value="public static event EventHandler ApplicationExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ApplicationExit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.ApplicationExit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ApplicationExit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ ApplicationExit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-134">在应用程序即将关闭时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-134">Occurs when the application is about to shut down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-135">必须将附加到的事件处理程序<xref:System.Windows.Forms.Application.Exit%2A>事件以执行未经处理，所需任务的应用程序停止运行前。</span><span class="sxs-lookup"><span data-stu-id="da226-135">You must attach the event handlers to the <xref:System.Windows.Forms.Application.Exit%2A> event to perform unhandled, required tasks before the application stops running.</span></span> <span data-ttu-id="da226-136">你可以关闭打开的此应用程序或释放的垃圾回收未回收的对象文件。</span><span class="sxs-lookup"><span data-stu-id="da226-136">You can close files opened by this application, or dispose of objects that garbage collection did not reclaim.</span></span>  
  
 <span data-ttu-id="da226-137">由于这是一个静态事件，则必须分离附加到此事件中任何事件处理程序<xref:System.Windows.Forms.Application.ApplicationExit>本身的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-137">Because this is a static event, you must detach any event handlers attached to this event in the <xref:System.Windows.Forms.Application.ApplicationExit> event handler itself.</span></span> <span data-ttu-id="da226-138">如果未分离这些处理程序，它们将保留附加在该事件，继续占用的内存。</span><span class="sxs-lookup"><span data-stu-id="da226-138">If you do not detach these handlers, they will remain attached to the event and continue to consume memory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-139">下面的代码示例显示两个窗体，并退出应用程序，这两个窗体关闭时。</span><span class="sxs-lookup"><span data-stu-id="da226-139">The following code example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="da226-140">当应用程序启动和退出时，将记住每个窗体的位置。</span><span class="sxs-lookup"><span data-stu-id="da226-140">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="da226-141">此示例演示如何使用<xref:System.Windows.Forms.Application.ApplicationExit>事件，以了解在窗体位置应保存到文件，以及时`FileStream`应关闭。</span><span class="sxs-lookup"><span data-stu-id="da226-141">This example demonstrates using the <xref:System.Windows.Forms.Application.ApplicationExit> event to know when the form positions should be persisted to the file, and when the `FileStream` should be closed.</span></span>  
  
 <span data-ttu-id="da226-142">类`MyApplicationContext`继承自<xref:System.Windows.Forms.ApplicationContext>和跟踪时每个窗体已关闭，并在它们都时退出当前线程。</span><span class="sxs-lookup"><span data-stu-id="da226-142">The class `MyApplicationContext` inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track of when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="da226-143">关闭时，该类会记住每个窗体的位置。</span><span class="sxs-lookup"><span data-stu-id="da226-143">The class remembers the position of each form when it is closed.</span></span> <span data-ttu-id="da226-144">当<xref:System.Windows.Forms.Application.ApplicationExit>事件发生时，类将写入文件的每个用户的位置。</span><span class="sxs-lookup"><span data-stu-id="da226-144">When the <xref:System.Windows.Forms.Application.ApplicationExit> event occurs, the class writes the positions of each for the user to the file.</span></span> <span data-ttu-id="da226-145">窗体位置数据存储在文件标题为`appdata.txt`，它在由位置创建<xref:System.Windows.Forms.Application.UserAppDataPath%2A>。</span><span class="sxs-lookup"><span data-stu-id="da226-145">The form position data is stored in a file titled `appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="da226-146">`Main`方法调用`Application.Run(context)`启动应用程序提供<xref:System.Windows.Forms.ApplicationContext>。</span><span class="sxs-lookup"><span data-stu-id="da226-146">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="da226-147">此代码摘自中所示的示例<xref:System.Windows.Forms.ApplicationContext>类概述。</span><span class="sxs-lookup"><span data-stu-id="da226-147">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.ApplicationContext> class overview.</span></span> <span data-ttu-id="da226-148">请参阅<xref:System.Windows.Forms.ApplicationContext>为完整的代码清单。</span><span class="sxs-lookup"><span data-stu-id="da226-148">See <xref:System.Windows.Forms.ApplicationContext> for the whole code listing.</span></span>  
  
 [!code-cpp[Application#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#5)]
 [!code-csharp[Application#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#5)]
 [!code-vb[Application#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="CommonAppDataPath">
      <MemberSignature Language="C#" Value="public static string CommonAppDataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CommonAppDataPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CommonAppDataPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CommonAppDataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CommonAppDataPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-149">获取所有用户共享的应用程序数据的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-149">Gets the path for the application data that is shared among all users.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-150">所有用户共享的应用程序数据的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-150">The path for the application data that is shared among all users.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-151">如果路径不存在，将创建一个采用以下格式：</span><span class="sxs-lookup"><span data-stu-id="da226-151">If a path does not exist, one is created in the following format:</span></span>  
  
 <span data-ttu-id="da226-152">*基路径*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="da226-152">*Base Path*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>  
  
 <span data-ttu-id="da226-153"><xref:System.Windows.Forms.Application.ProductVersion%2A> 第一个如下所示，以查看是否有包含主可执行文件的程序集`AssemblyInformationalVersion`在其上的属性。</span><span class="sxs-lookup"><span data-stu-id="da226-153"><xref:System.Windows.Forms.Application.ProductVersion%2A> first looks to see if the assembly containing the main executable has the `AssemblyInformationalVersion` attribute on it.</span></span> <span data-ttu-id="da226-154">如果存在此属性，它同时用于<xref:System.Windows.Forms.Application.ProductVersion%2A>和<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>。</span><span class="sxs-lookup"><span data-stu-id="da226-154">If this attribute exists, it is used for both <xref:System.Windows.Forms.Application.ProductVersion%2A> and <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>.</span></span> <span data-ttu-id="da226-155">如果此属性不存在，这两个属性使用的可执行文件的版本。</span><span class="sxs-lookup"><span data-stu-id="da226-155">If this attribute does not exist, both properties use the version of the executable file instead.</span></span>  
  
 <span data-ttu-id="da226-156">则路径将会不同，具体取决于是否使用部署 Windows 窗体应用程序[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="da226-156">The path will be different depending on whether the Windows Forms application is deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]<span data-ttu-id="da226-157"> 应用程序存储在每个用户应用程序缓存中 C:\Documents and Settings\\*用户名*目录。</span><span class="sxs-lookup"><span data-stu-id="da226-157"> applications are stored in a per-user application cache in the C:\Documents and Settings\\*username* directory.</span></span> <span data-ttu-id="da226-158">有关详细信息，请参阅[访问本地数据和 ClickOnce 应用程序中的远程数据](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)。</span><span class="sxs-lookup"><span data-stu-id="da226-158">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.CommonAppDataRegistry" />
      </Docs>
    </Member>
    <Member MemberName="CommonAppDataRegistry">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.RegistryKey CommonAppDataRegistry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Win32.RegistryKey CommonAppDataRegistry" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CommonAppDataRegistry" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CommonAppDataRegistry As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Win32::RegistryKey ^ CommonAppDataRegistry { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-159">获取所有用户共享的应用程序数据的注册表项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-159">Gets the registry key for the application data that is shared among all users.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-160">一个 <see cref="T:Microsoft.Win32.RegistryKey" />，它表示所有用户共享的应用程序数据的注册表项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-160">A <see cref="T:Microsoft.Win32.RegistryKey" /> representing the registry key of the application data that is shared among all users.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-161">如果不存在该键，则将它创建采用以下格式：</span><span class="sxs-lookup"><span data-stu-id="da226-161">If the key does not exist, it is created in the following format:</span></span>  
  
 <span data-ttu-id="da226-162">LocalMachine\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="da226-162">LocalMachine\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompanyName">
      <MemberSignature Language="C#" Value="public static string CompanyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CompanyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CompanyName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompanyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CompanyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-163">获取与该应用程序关联的公司名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-163">Gets the company name associated with the application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-164">公司名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-164">The company name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da226-165">下面的代码示例获取此属性，并在文本框中显示其值。</span><span class="sxs-lookup"><span data-stu-id="da226-165">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="da226-166">该示例需要`textBox1`已放在窗体上。</span><span class="sxs-lookup"><span data-stu-id="da226-166">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.CompanyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.CompanyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.CompanyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.CompanyName Example/CS/source.cs#1)]
 [!code-vb[Classic Application.CompanyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.CompanyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.ProductName" />
        <altmember cref="P:System.Windows.Forms.Application.ProductVersion" />
        <altmember cref="T:System.Reflection.AssemblyCompanyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-167">获取或设置当前线程的区域性信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-167">Gets or sets the culture information for the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-168">一个 <see cref="T:System.Globalization.CultureInfo" />，它代表当前线程的区域性信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-168">A <see cref="T:System.Globalization.CultureInfo" /> representing the culture information for the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da226-169">下面的代码示例获取此属性，并在文本框中显示其值。</span><span class="sxs-lookup"><span data-stu-id="da226-169">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="da226-170">该示例需要`textBox1`已放在窗体上。</span><span class="sxs-lookup"><span data-stu-id="da226-170">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.CurrentCulture Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.CurrentCulture Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.CurrentCulture Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.CurrentCulture Example/CS/source.cs#1)]
 [!code-vb[Classic Application.CurrentCulture Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.CurrentCulture Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="da226-171">若要将此属性设置的所有窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-171">for all windows to set this property.</span>
          </span>
          <span data-ttu-id="da226-172">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-172">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Forms.InputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage CurrentInputLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage CurrentInputLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CurrentInputLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentInputLanguage As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguage ^ CurrentInputLanguage { System::Windows::Forms::InputLanguage ^ get(); void set(System::Windows::Forms::InputLanguage ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-173">获取或设置当前线程的当前输入语言。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-173">Gets or sets the current input language for the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-174">一个 <see cref="T:System.Windows.Forms.InputLanguage" />，它代表当前线程的当前输入语言。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-174">An <see cref="T:System.Windows.Forms.InputLanguage" /> representing the current input language for the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da226-175">下面的代码示例获取此属性，并在文本框中显示其值。</span><span class="sxs-lookup"><span data-stu-id="da226-175">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="da226-176">该示例需要`textBox1`已放在窗体上。</span><span class="sxs-lookup"><span data-stu-id="da226-176">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.CurrentInputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.CurrentInputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.CurrentInputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.CurrentInputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic Application.CurrentInputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.CurrentInputLanguage Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="da226-177">直接调用方调用非托管的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-177">for the immediate caller to call unmanaged code.</span>
          </span>
          <span data-ttu-id="da226-178">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-178">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Windows.Forms.InputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public static void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DoEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da226-179">处理当前在消息队列中的所有 Windows 消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-179">Processes all Windows messages currently in the message queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-180">运行 Windows 窗体时，它会创建新的表单，然后等待事件处理。</span><span class="sxs-lookup"><span data-stu-id="da226-180">When you run a Windows Form, it creates the new form, which then waits for events to handle.</span></span> <span data-ttu-id="da226-181">在每次窗体处理事件，它将处理所有与该事件关联的代码。</span><span class="sxs-lookup"><span data-stu-id="da226-181">Each time the form handles an event, it processes all the code associated with that event.</span></span> <span data-ttu-id="da226-182">在队列中等待所有其他事件。</span><span class="sxs-lookup"><span data-stu-id="da226-182">All other events wait in the queue.</span></span> <span data-ttu-id="da226-183">而你的代码来处理该事件，你的应用程序未响应。</span><span class="sxs-lookup"><span data-stu-id="da226-183">While your code handles the event, your application does not respond.</span></span> <span data-ttu-id="da226-184">例如，如果另一个窗口拖到顶部，也无法重新绘制窗口。</span><span class="sxs-lookup"><span data-stu-id="da226-184">For example, the window does not repaint if another window is dragged on top.</span></span>  
  
 <span data-ttu-id="da226-185">如果调用<xref:System.Windows.Forms.Application.DoEvents%2A>在代码中，你的应用程序可以处理其他事件。</span><span class="sxs-lookup"><span data-stu-id="da226-185">If you call <xref:System.Windows.Forms.Application.DoEvents%2A> in your code, your application can handle the other events.</span></span> <span data-ttu-id="da226-186">例如，如果你拥有将数据添加到窗体<xref:System.Windows.Forms.ListBox>并添加<xref:System.Windows.Forms.Application.DoEvents%2A>到代码中，你的窗体可重新绘制在另一个窗口拖到它。</span><span class="sxs-lookup"><span data-stu-id="da226-186">For example, if you have a form that adds data to a <xref:System.Windows.Forms.ListBox> and add <xref:System.Windows.Forms.Application.DoEvents%2A> to your code, your form repaints when another window is dragged over it.</span></span> <span data-ttu-id="da226-187">如果你删除<xref:System.Windows.Forms.Application.DoEvents%2A>从代码中，你的窗体不会重新绘制按钮的 click 事件处理程序完成之前执行。</span><span class="sxs-lookup"><span data-stu-id="da226-187">If you remove <xref:System.Windows.Forms.Application.DoEvents%2A> from your code, your form will not repaint until the click event handler of the button is finished executing.</span></span> <span data-ttu-id="da226-188">有关消息传送的详细信息，请参阅[Windows 窗体中的用户输入](~/docs/framework/winforms/user-input-in-windows-forms.md)。</span><span class="sxs-lookup"><span data-stu-id="da226-188">For more information on messaging, see [User Input in Windows Forms](~/docs/framework/winforms/user-input-in-windows-forms.md).</span></span>  
  
 <span data-ttu-id="da226-189">与 Visual Basic 6.0 中，不同<xref:System.Windows.Forms.Application.DoEvents%2A>未调用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="da226-189">Unlike Visual Basic 6.0, the <xref:System.Windows.Forms.Application.DoEvents%2A> method does not call the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="da226-190">通常情况下，在处理消息循环中使用此方法。</span><span class="sxs-lookup"><span data-stu-id="da226-190">Typically, you use this method in a loop to process messages.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="da226-191">调用此方法会导致在处理所有等待窗口消息时要挂起当前线程。</span><span class="sxs-lookup"><span data-stu-id="da226-191">Calling this method causes the current thread to be suspended while all waiting window messages are processed.</span></span> <span data-ttu-id="da226-192">如果消息导致要触发的事件，可能执行应用程序代码的其他方面。</span><span class="sxs-lookup"><span data-stu-id="da226-192">If a message causes an event to be triggered, then other areas of your application code may execute.</span></span> <span data-ttu-id="da226-193">这会导致你的应用程序来展示难以调试的意外的行为。</span><span class="sxs-lookup"><span data-stu-id="da226-193">This can cause your application to exhibit unexpected behaviors that are difficult to debug.</span></span> <span data-ttu-id="da226-194">通常，如果你执行的操作或需要较长时间的计算，则更可取的方法执行新线程上的那些操作。</span><span class="sxs-lookup"><span data-stu-id="da226-194">If you perform operations or computations that take a long time, it is often preferable to perform those operations on a new thread.</span></span> <span data-ttu-id="da226-195">有关异步编程的详细信息，请参阅[异步编程模型 (APM)](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)。</span><span class="sxs-lookup"><span data-stu-id="da226-195">For more information about asynchronous programming, see [Asynchronous Programming Model (APM)](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-196">下面的代码示例演示如何使用<xref:System.Windows.Forms.Application.DoEvents%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="da226-196">The following code example demonstrates using the <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span> <span data-ttu-id="da226-197">该示例运行时，用户可选择从图形文件<xref:System.Windows.Forms.OpenFileDialog>。</span><span class="sxs-lookup"><span data-stu-id="da226-197">When the example runs, a user can select graphics files from an <xref:System.Windows.Forms.OpenFileDialog>.</span></span> <span data-ttu-id="da226-198">所选的文件将显示在窗体中。</span><span class="sxs-lookup"><span data-stu-id="da226-198">The selected files are displayed in the form.</span></span> <span data-ttu-id="da226-199"><xref:System.Windows.Forms.Application.DoEvents%2A>方法会强行重绘的每个图形文件在打开的窗体。</span><span class="sxs-lookup"><span data-stu-id="da226-199">The <xref:System.Windows.Forms.Application.DoEvents%2A> method forces a repaint of the form for each graphics file opened.</span></span> <span data-ttu-id="da226-200">若要运行此示例中，粘贴以下代码中一个窗体包含<xref:System.Windows.Forms.PictureBox>名为`PictureBox1`、<xref:System.Windows.Forms.OpenFileDialog>名为`OpenFileDialog1`，和一个名为的按钮`fileButton`。</span><span class="sxs-lookup"><span data-stu-id="da226-200">To run this example, paste the following code in a form containing a <xref:System.Windows.Forms.PictureBox> named `PictureBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, and a button named `fileButton`.</span></span> <span data-ttu-id="da226-201">调用`InitializePictureBox`和`InitializeOpenFileDialog`从窗体的构造函数的方法或`Load`方法。</span><span class="sxs-lookup"><span data-stu-id="da226-201">Call the `InitializePictureBox` and `InitializeOpenFileDialog` methods from the form's constructor or `Load` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="da226-202">在[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]，如果你添加<xref:System.Windows.Forms.OpenFileDialog>到窗体中通过拖动操作，则将需要修改以下`InitializeOpenFileDialog`通过删除创建的新实例的行的方法<xref:System.Windows.Forms.OpenFileDialog>。</span><span class="sxs-lookup"><span data-stu-id="da226-202">In [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)], if you add an <xref:System.Windows.Forms.OpenFileDialog> to your form by using a drag operation, you will have to modify the following `InitializeOpenFileDialog` method by removing the line that creates a new instance of <xref:System.Windows.Forms.OpenFileDialog>.</span></span>  
  
 <span data-ttu-id="da226-203">该示例还要求<xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType>事件<xref:System.Windows.Forms.Button>控件和<xref:System.Windows.Forms.FileDialog.FileOk>事件<xref:System.Windows.Forms.OpenFileDialog>连接到示例中定义的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-203">The example also requires that the <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> event of the <xref:System.Windows.Forms.Button> control and the <xref:System.Windows.Forms.FileDialog.FileOk> event of the <xref:System.Windows.Forms.OpenFileDialog> are connected to the event handlers defined in the example.</span></span> <span data-ttu-id="da226-204">当运行示例时，显示对话框中单击的按钮。</span><span class="sxs-lookup"><span data-stu-id="da226-204">When the example is running, display the dialog box by clicking the button.</span></span>  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.Run" />
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="public static void EnableVisualStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableVisualStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableVisualStyles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableVisualStyles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da226-205">启用应用程序的可视样式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-205">Enables visual styles for the application.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-206">此方法使应用程序的可视样式。</span><span class="sxs-lookup"><span data-stu-id="da226-206">This method enables visual styles for the application.</span></span> <span data-ttu-id="da226-207">了可视样式的颜色、 字体和窗体操作系统主题其他可视元素。</span><span class="sxs-lookup"><span data-stu-id="da226-207">Visual styles are the colors, fonts, and other visual elements that form an operating system theme.</span></span> <span data-ttu-id="da226-208">如果控件和操作系统支持，将以视觉样式绘制控件。</span><span class="sxs-lookup"><span data-stu-id="da226-208">Controls will draw with visual styles if the control and the operating system support it.</span></span> <span data-ttu-id="da226-209">产生任何影响，<xref:System.Windows.Forms.Application.EnableVisualStyles>必须在创建应用程序; 中的任何控件之前调用通常情况下，<xref:System.Windows.Forms.Application.EnableVisualStyles>是中的第一个行`Main`函数。</span><span class="sxs-lookup"><span data-stu-id="da226-209">To have an effect, <xref:System.Windows.Forms.Application.EnableVisualStyles> must be called before creating any controls in the application; typically, <xref:System.Windows.Forms.Application.EnableVisualStyles> is the first line in the `Main` function.</span></span> <span data-ttu-id="da226-210">启用视觉样式，在调用时不需要单独清单<xref:System.Windows.Forms.Application.EnableVisualStyles>。</span><span class="sxs-lookup"><span data-stu-id="da226-210">A separate manifest is not required to enable visual styles when calling <xref:System.Windows.Forms.Application.EnableVisualStyles>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="da226-211">在.NET Framework 2.0 中之前,`FlatStyle`的某些控件，例如派生的控件的属性<xref:System.Windows.Forms.ButtonBase>，必须设置为<xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType>顺序以视觉样式绘制的控件。</span><span class="sxs-lookup"><span data-stu-id="da226-211">Prior to the .NET Framework 2.0, the `FlatStyle` property of some controls, such as controls that derive from <xref:System.Windows.Forms.ButtonBase>, had to be set to <xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType> in order for the controls to be drawn with visual styles.</span></span> <span data-ttu-id="da226-212">在使用.NET Framework 2.0 编写的应用程序，这是不再有必要。</span><span class="sxs-lookup"><span data-stu-id="da226-212">In applications written with the .NET Framework 2.0, this is no longer necessary.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="da226-213">此方法不起作用的 Internet Explorer 中承载的控件。</span><span class="sxs-lookup"><span data-stu-id="da226-213">This method will have no effect for controls hosted in Internet Explorer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-214">下面的代码示例演示如何调用<xref:System.Windows.Forms.Application.EnableVisualStyles%2A>中`Main`函数，以使应用程序的可视样式。</span><span class="sxs-lookup"><span data-stu-id="da226-214">The following code example demonstrates calling <xref:System.Windows.Forms.Application.EnableVisualStyles%2A> in the `Main` function to enable visual styles for the application.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Application.EnableVisualStyles#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Application.EnableVisualStyles/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Application.EnableVisualStyles#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Application.EnableVisualStyles/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Application.EnableVisualStyles#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Application.EnableVisualStyles/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.RenderWithVisualStyles" />
        <altmember cref="P:System.Windows.Forms.Application.VisualStyleState" />
        <altmember cref="T:System.Windows.Forms.FlatStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterThreadModal">
      <MemberSignature Language="C#" Value="public static event EventHandler EnterThreadModal;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnterThreadModal" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.EnterThreadModal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event EnterThreadModal As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ EnterThreadModal;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-215">当应用程序即将进入模式状态时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-215">Occurs when the application is about to enter a modal state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="da226-216">由于这是一个静态事件，则必须在你的应用程序将被释放，或会导致内存泄漏时分离事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-216">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-217">下面的代码示例演示如何使用此成员。</span><span class="sxs-lookup"><span data-stu-id="da226-217">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="da226-218">在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.Application.EnterThreadModal>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-218">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.EnterThreadModal> event.</span></span> <span data-ttu-id="da226-219">此报告可帮助您了解当发生事件，并可以帮助您进行调试。</span><span class="sxs-lookup"><span data-stu-id="da226-219">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="da226-220">若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="da226-220">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="da226-221">要运行此代码示例，将其粘贴到 Windows 窗体，并确保与事件处理程序<xref:System.Windows.Forms.Application.EnterThreadModal>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-221">To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the <xref:System.Windows.Forms.Application.EnterThreadModal> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#3)]
 [!code-vb[System.Windows.Forms.EventExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="da226-222">需要<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />侦听事件的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-222">Requires <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> permission to listen to the event.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ExecutablePath">
      <MemberSignature Language="C#" Value="public static string ExecutablePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ExecutablePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.ExecutablePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ExecutablePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ExecutablePath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-223">获取启动了应用程序的可执行文件的路径，包括可执行文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-223">Gets the path for the executable file that started the application, including the executable name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-224">启动了应用程序的可执行文件的路径和可执行文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-224">The path and executable name for the executable file that started the application.</span>
          </span>
          <span data-ttu-id="da226-225">取决于是否使用 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 部署 Windows 窗体应用程序，此路径将会不同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-225">This path will be different depending on whether the Windows Forms application is deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span>
          </span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]<span data-ttu-id="da226-226"> 应用程序存储在每个用户应用程序缓存中 C:\Documents and Settings\\*用户名*目录。</span><span class="sxs-lookup"><span data-stu-id="da226-226"> applications are stored in a per-user application cache in the C:\Documents and Settings\\*username* directory.</span></span><span data-ttu-id="da226-227">有关详细信息，请参阅[访问本地数据和 ClickOnce 应用程序中的远程数据](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)。</span><span class="sxs-lookup"><span data-stu-id="da226-227">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="da226-228">用于获取路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-228">for getting the path.</span>
          </span>
          <span data-ttu-id="da226-229">关联的枚举： <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-229">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da226-230">通知所有消息泵必须终止，并且在处理了消息以后关闭所有应用程序窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-230">Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da226-231">通知所有消息泵必须终止，并且在处理了消息以后关闭所有应用程序窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-231">Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-232"><xref:System.Windows.Forms.Application.Exit%2A>方法所有线程上停止所有正在运行消息循环，并关闭应用程序的所有窗口。</span><span class="sxs-lookup"><span data-stu-id="da226-232">The <xref:System.Windows.Forms.Application.Exit%2A> method stops all running message loops on all threads and closes all windows of the application.</span></span> <span data-ttu-id="da226-233">此方法不一定强制退出该应用程序。</span><span class="sxs-lookup"><span data-stu-id="da226-233">This method does not necessarily force the application to exit.</span></span> <span data-ttu-id="da226-234"><xref:System.Windows.Forms.Application.Exit%2A>方法通常从调用中使用消息循环，并强制<xref:System.Windows.Forms.Application.Run%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="da226-234">The <xref:System.Windows.Forms.Application.Exit%2A> method is typically called from within a message loop, and forces <xref:System.Windows.Forms.Application.Run%2A> to return.</span></span> <span data-ttu-id="da226-235">若要退出当前线程的消息循环，请调用<xref:System.Windows.Forms.Application.ExitThread%2A>。</span><span class="sxs-lookup"><span data-stu-id="da226-235">To exit a message loop for the current thread only, call <xref:System.Windows.Forms.Application.ExitThread%2A>.</span></span>  
  
 <span data-ttu-id="da226-236"><xref:System.Windows.Forms.Application.Exit%2A> 可引发以下事件并执行关联的条件操作：</span><span class="sxs-lookup"><span data-stu-id="da226-236"><xref:System.Windows.Forms.Application.Exit%2A> raises the following events and performs the associated conditional actions:</span></span>  
  
-   <span data-ttu-id="da226-237">A<xref:System.Windows.Forms.Form.FormClosing>为表示由每个窗体中引发事件<xref:System.Windows.Forms.Application.OpenForms%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="da226-237">A <xref:System.Windows.Forms.Form.FormClosing> event is raised for every form represented by the <xref:System.Windows.Forms.Application.OpenForms%2A> property.</span></span> <span data-ttu-id="da226-238">此事件可取消通过设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性其<xref:System.Windows.Forms.FormClosingEventArgs>参数`true`。</span><span class="sxs-lookup"><span data-stu-id="da226-238">This event can be canceled by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of their <xref:System.Windows.Forms.FormClosingEventArgs> parameter to `true`.</span></span>  
  
-   <span data-ttu-id="da226-239">如果一个或多个处理程序将取消该事件，然后<xref:System.Windows.Forms.Application.Exit%2A>返回而无需进一步操作。</span><span class="sxs-lookup"><span data-stu-id="da226-239">If one of more of the handlers cancels the event, then <xref:System.Windows.Forms.Application.Exit%2A> returns without further action.</span></span> <span data-ttu-id="da226-240">否则为<xref:System.Windows.Forms.Form.FormClosed>对于每个打开的窗体，将引发事件，然后关闭所有正在运行的消息循环和窗体。</span><span class="sxs-lookup"><span data-stu-id="da226-240">Otherwise, a <xref:System.Windows.Forms.Form.FormClosed> event is raised for every open form, then all running message loops and forms are closed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="da226-241"><xref:System.Windows.Forms.Application.Exit%2A>方法不会引发<xref:System.Windows.Forms.Form.Closed>和<xref:System.Windows.Forms.Form.Closing>起已过时的事件[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="da226-241">The <xref:System.Windows.Forms.Application.Exit%2A> method does not raise the <xref:System.Windows.Forms.Form.Closed> and <xref:System.Windows.Forms.Form.Closing> events, which are obsolete as of [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-242">下面的代码示例列出窗体上一个列表框中的数字。</span><span class="sxs-lookup"><span data-stu-id="da226-242">The following code example lists numbers in a list box on a form.</span></span> <span data-ttu-id="da226-243">每次你单击`button1`，应用程序列表中添加另一个数。</span><span class="sxs-lookup"><span data-stu-id="da226-243">Each time you click `button1`, the application adds another number to the list.</span></span>  
  
 <span data-ttu-id="da226-244">`Main`方法调用<xref:System.Windows.Forms.Application.Run%2A>启动该应用程序，这将创建窗体， `listBox1`，和`button1`。</span><span class="sxs-lookup"><span data-stu-id="da226-244">The `Main` method calls <xref:System.Windows.Forms.Application.Run%2A> to start the application, which creates the form, `listBox1`, and `button1`.</span></span> <span data-ttu-id="da226-245">当用户单击`button1`、`button1_Click`方法添加到列表框中，一到三个数字并显示<xref:System.Windows.Forms.MessageBox>。</span><span class="sxs-lookup"><span data-stu-id="da226-245">When the user clicks `button1`, the `button1_Click` method adds numbers one to three to the list box, and displays a <xref:System.Windows.Forms.MessageBox>.</span></span> <span data-ttu-id="da226-246">如果用户单击**否**上<xref:System.Windows.Forms.MessageBox>、`button1_Click`方法向列表添加另一个数。</span><span class="sxs-lookup"><span data-stu-id="da226-246">If the user clicks **No** on the <xref:System.Windows.Forms.MessageBox>, the `button1_Click` method adds another number to the list.</span></span> <span data-ttu-id="da226-247">如果用户单击**是**，应用程序调用<xref:System.Windows.Forms.Application.Exit%2A>，来处理队列中的所有剩余消息，然后退出。</span><span class="sxs-lookup"><span data-stu-id="da226-247">If the user clicks **Yes**, the application calls <xref:System.Windows.Forms.Application.Exit%2A>, to process all remaining messages in the queue and then to quit.</span></span>  
  
 <span data-ttu-id="da226-248">该示例需要`listBox1`和`button1`已实例化并已放置在窗体上。</span><span class="sxs-lookup"><span data-stu-id="da226-248">The example requires that `listBox1` and `button1` have been instantiated and placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.Exit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.Exit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.Exit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.Exit Example/CS/source.cs#1)]
 [!code-vb[Classic Application.Exit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.Exit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="da226-249">直接调用方调用非托管的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-249">for the immediate caller to call unmanaged code.</span>
          </span>
          <span data-ttu-id="da226-250">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-250">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.Run" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
        <altmember cref="E:System.Windows.Forms.Form.Closed" />
        <altmember cref="E:System.Windows.Forms.Form.Closing" />
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Exit(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="da226-251">返回应用程序中的任何 <see cref="T:System.Windows.Forms.Form" /> 是否已取消退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-251">Returns whether any <see cref="T:System.Windows.Forms.Form" /> within the application cancelled the exit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-252">通知所有消息泵必须终止，并且在处理了消息以后关闭所有应用程序窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-252">Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityException">
          <span data-ttu-id="da226-253">提供许可以终止正在运行的应用程序线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-253">For permission to terminate a running application thread.</span>
          </span>
          <span data-ttu-id="da226-254">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-254">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="ExitThread">
      <MemberSignature Language="C#" Value="public static void ExitThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.ExitThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitThread ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitThread();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da226-255">退出当前线程上的消息循环，并关闭该线程上的所有窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-255">Exits the message loop on the current thread and closes all windows on the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-256">使用此方法退出当前线程的消息循环。</span><span class="sxs-lookup"><span data-stu-id="da226-256">Use this method to exit the message loop of the current thread.</span></span> <span data-ttu-id="da226-257">此方法会导致调用<xref:System.Windows.Forms.Application.Run%2A>当前线程在可以返回。</span><span class="sxs-lookup"><span data-stu-id="da226-257">This method causes the call to <xref:System.Windows.Forms.Application.Run%2A> for the current thread to return.</span></span> <span data-ttu-id="da226-258">若要退出整个应用程序，请调用<xref:System.Windows.Forms.Application.Exit%2A>。</span><span class="sxs-lookup"><span data-stu-id="da226-258">To exit the entire application, call <xref:System.Windows.Forms.Application.Exit%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="da226-259">直接调用方调用非托管的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-259">for the immediate caller to call unmanaged code.</span>
          </span>
          <span data-ttu-id="da226-260">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-260">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="FilterMessage">
      <MemberSignature Language="C#" Value="public static bool FilterMessage (ref System.Windows.Forms.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool FilterMessage(valuetype System.Windows.Forms.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.FilterMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FilterMessage (ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool FilterMessage(System::Windows::Forms::Message % message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="da226-261">要筛选的 Windows 事件消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-261">The Windows event message to filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-262">对窗口消息运行任何筛选器，并返回修改后的消息的副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-262">Runs any filters against a window message, and returns a copy of the modified message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da226-263">如果已处理筛选，则为 <see langword="True" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-263">
              <see langword="True" /> if the filters were processed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Idle">
      <MemberSignature Language="C#" Value="public static event EventHandler Idle;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Idle" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.Idle" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event Idle As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ Idle;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-264">当应用程序完成处理并即将进入空闲状态时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-264">Occurs when the application finishes processing and is about to enter the idle state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-265">如果你有必须执行的任务的线程进入空闲状态之前，将它们附加到此事件。</span><span class="sxs-lookup"><span data-stu-id="da226-265">If you have tasks that you must perform before the thread becomes idle, attach them to this event.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="da226-266">由于这是一个静态事件，则必须在你的应用程序将被释放，或会导致内存泄漏时分离事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-266">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-267">下面的代码示例演示如何使用此成员。</span><span class="sxs-lookup"><span data-stu-id="da226-267">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="da226-268">在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.Application.Idle>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-268">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.Idle> event.</span></span> <span data-ttu-id="da226-269">此报告可帮助您了解当发生事件，并可以帮助您进行调试。</span><span class="sxs-lookup"><span data-stu-id="da226-269">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="da226-270">若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="da226-270">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="da226-271">若要运行此代码示例，将其粘贴到 Windows 窗体，并确保该事件处理程序与关联<xref:System.Windows.Forms.Application.Idle>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-271">To run the example code, paste it into a Windows Form and make sure that the event handler is associated with the <xref:System.Windows.Forms.Application.Idle> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#2)]
 [!code-vb[System.Windows.Forms.EventExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaveThreadModal">
      <MemberSignature Language="C#" Value="public static event EventHandler LeaveThreadModal;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LeaveThreadModal" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.LeaveThreadModal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event LeaveThreadModal As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ LeaveThreadModal;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-272">当应用程序即将退出模式状态时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-272">Occurs when the application is about to leave a modal state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="da226-273">由于这是一个静态事件，则必须在你的应用程序将被释放，或会导致内存泄漏时分离事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-273">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-274">下面的代码示例演示如何使用此成员。</span><span class="sxs-lookup"><span data-stu-id="da226-274">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="da226-275">在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.Application.LeaveThreadModal>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-275">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.LeaveThreadModal> event.</span></span> <span data-ttu-id="da226-276">此报告可帮助您了解当发生事件，并可以帮助您进行调试。</span><span class="sxs-lookup"><span data-stu-id="da226-276">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="da226-277">若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="da226-277">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="da226-278">要运行此代码示例，将其粘贴到 Windows 窗体，并确保与事件处理程序<xref:System.Windows.Forms.Application.LeaveThreadModal>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-278">To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the <xref:System.Windows.Forms.Application.LeaveThreadModal> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#4)]
 [!code-vb[System.Windows.Forms.EventExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalUserAppDataPath">
      <MemberSignature Language="C#" Value="public static string LocalUserAppDataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string LocalUserAppDataPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.LocalUserAppDataPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LocalUserAppDataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ LocalUserAppDataPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-279">获取本地、非漫游用户的应用程序数据的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-279">Gets the path for the application data of a local, non-roaming user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-280">本地、非漫游用户的应用程序数据的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-280">The path for the application data of a local, non-roaming user.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-281">本地用户是指其用户配置文件存储在用户登录的系统上。</span><span class="sxs-lookup"><span data-stu-id="da226-281">A local user is one whose user profile is stored on the system on which the user logged on.</span></span> <span data-ttu-id="da226-282">如果路径不存在，将创建一个采用以下格式：</span><span class="sxs-lookup"><span data-stu-id="da226-282">If a path does not exist, one is created in the following format:</span></span>  
  
 <span data-ttu-id="da226-283">*基路径*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="da226-283">*Base Path*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>   
  
 <span data-ttu-id="da226-284">典型的基路径是 C:\Documents and Settings\\*用户名*settings\application Data。</span><span class="sxs-lookup"><span data-stu-id="da226-284">A typical base path is C:\Documents and Settings\\*username*\Local Settings\Application Data.</span></span> <span data-ttu-id="da226-285">此路径将会不同，但是，如果通过使用部署 Windows 窗体应用程序[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="da226-285">This path will be different, however, if the Windows Forms application is deployed by using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]<span data-ttu-id="da226-286"> 创建其自己独立于所有其他应用程序的应用程序数据目录。</span><span class="sxs-lookup"><span data-stu-id="da226-286"> creates its own application data directory that is isolated from all other applications.</span></span> <span data-ttu-id="da226-287">有关详细信息，请参阅[访问本地数据和 ClickOnce 应用程序中的远程数据](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)。</span><span class="sxs-lookup"><span data-stu-id="da226-287">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-288">下面的代码示例显示两个窗体，并退出应用程序，这两个窗体关闭时。</span><span class="sxs-lookup"><span data-stu-id="da226-288">The following code example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="da226-289">当应用程序启动和退出时，将记住每个窗体的位置。</span><span class="sxs-lookup"><span data-stu-id="da226-289">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="da226-290">虽然此示例演示如何使用<xref:System.Windows.Forms.Application.UserAppDataPath%2A>属性来存储应用程序数据的用户，<xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>可以改为使用。</span><span class="sxs-lookup"><span data-stu-id="da226-290">Although this example demonstrates using the <xref:System.Windows.Forms.Application.UserAppDataPath%2A> property to store application data for the user, the <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> can be used instead.</span></span>  
  
 <span data-ttu-id="da226-291">`MyApplicationContext`类继承自<xref:System.Windows.Forms.ApplicationContext>每个窗体已关闭，并在它们都时退出当前线程时保持跟踪。</span><span class="sxs-lookup"><span data-stu-id="da226-291">The `MyApplicationContext` class inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="da226-292">该类存储了用户的每个窗体的位置。</span><span class="sxs-lookup"><span data-stu-id="da226-292">The class stores the positions of each form for the user.</span></span> <span data-ttu-id="da226-293">窗体位置数据存储在文件标题为`Appdata.txt`，它在由位置创建<xref:System.Windows.Forms.Application.UserAppDataPath%2A>。</span><span class="sxs-lookup"><span data-stu-id="da226-293">The form position data is stored in a file titled `Appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="da226-294">`Main`方法调用`Application.Run(context)`启动应用程序提供<xref:System.Windows.Forms.ApplicationContext>。</span><span class="sxs-lookup"><span data-stu-id="da226-294">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="da226-295">此代码摘自中所示的示例<xref:System.Windows.Forms.ApplicationContext>类概述。</span><span class="sxs-lookup"><span data-stu-id="da226-295">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.ApplicationContext> class overview.</span></span> <span data-ttu-id="da226-296">为了简洁起见，不显示某些代码。</span><span class="sxs-lookup"><span data-stu-id="da226-296">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="da226-297">请参阅<xref:System.Windows.Forms.ApplicationContext>为完整的代码清单。</span><span class="sxs-lookup"><span data-stu-id="da226-297">See <xref:System.Windows.Forms.ApplicationContext> for the whole code listing.</span></span>  
  
 [!code-cpp[Application#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#5)]
 [!code-csharp[Application#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#5)]
 [!code-vb[Application#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MessageLoop">
      <MemberSignature Language="C#" Value="public static bool MessageLoop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool MessageLoop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.MessageLoop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MessageLoop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool MessageLoop { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-298">获取指示该线程上是否存在消息循环的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-298">Gets a value indicating whether a message loop exists on this thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-299">如果存在消息循环，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-299">
              <see langword="true" /> if a message loop exists; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-300">此属性在其他环境，如非托管应用程序中承载 Windows 窗体时将始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="da226-300">When hosting Windows Forms in other environments, such as unmanaged applications, this property will always return `false`.</span></span> <span data-ttu-id="da226-301">使用<xref:System.Windows.Forms.Application.RegisterMessageLoop%2A>以指示 Windows 窗体的宿主环境如果仍有活动的消息循环。</span><span class="sxs-lookup"><span data-stu-id="da226-301">Use <xref:System.Windows.Forms.Application.RegisterMessageLoop%2A> to instruct Windows Forms if the hosting environment still has an active message loop.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OleRequired">
      <MemberSignature Language="C#" Value="public static System.Threading.ApartmentState OleRequired ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.ApartmentState OleRequired() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.OleRequired" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OleRequired () As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::ApartmentState OleRequired();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da226-302">初始化当前线程上的 OLE。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-302">Initializes OLE on the current thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da226-303">
            <see cref="T:System.Threading.ApartmentState" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-303">One of the <see cref="T:System.Threading.ApartmentState" /> values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-304">在调用任何之前调用此方法`Microsoft.Win32`需要 OLE 的方法。</span><span class="sxs-lookup"><span data-stu-id="da226-304">Call this method before calling any `Microsoft.Win32` method that requires OLE.</span></span> <span data-ttu-id="da226-305"><xref:System.Windows.Forms.Application.OleRequired%2A> 首先检查是否已在当前线程上初始化 OLE。</span><span class="sxs-lookup"><span data-stu-id="da226-305"><xref:System.Windows.Forms.Application.OleRequired%2A> first checks to see if OLE has been initialized on the current thread.</span></span> <span data-ttu-id="da226-306">如果没有，则初始化线程的 OLE。</span><span class="sxs-lookup"><span data-stu-id="da226-306">If not, it initializes the thread for OLE.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="da226-307">除非线程直接调用 OLE 方法，你不需要调用此方法。</span><span class="sxs-lookup"><span data-stu-id="da226-307">Unless a thread calls OLE methods directly, you do not need to call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="public static void OnThreadException (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void OnThreadException(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub OnThreadException (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void OnThreadException(Exception ^ t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t">
          <span data-ttu-id="da226-308">一个 <see cref="T:System.Exception" />，它代表所引发的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-308">An <see cref="T:System.Exception" /> that represents the exception that was thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-309">引发 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-309">Raises the <see cref="E:System.Windows.Forms.Application.ThreadException" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-310">调用<xref:System.Windows.Forms.Application.OnThreadException%2A>以引发异常，处理的应用程序，则将暂停。</span><span class="sxs-lookup"><span data-stu-id="da226-310">Call <xref:System.Windows.Forms.Application.OnThreadException%2A> to raise an exception that will halt processing of the application.</span></span>  
  
 <span data-ttu-id="da226-311"><xref:System.Windows.Forms.Application>类具有<xref:System.Windows.Forms.Application.ThreadException>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-311">The <xref:System.Windows.Forms.Application> class has a <xref:System.Windows.Forms.Application.ThreadException> event.</span></span> <span data-ttu-id="da226-312">可以将事件处理程序附加到此事件来执行的未处理异常所需的任何自定义处理。</span><span class="sxs-lookup"><span data-stu-id="da226-312">You can attach an event handler to this event to do whatever custom processing you need for unhandled exceptions.</span></span> <span data-ttu-id="da226-313">如果你不会附加一个事件处理程序即<xref:System.Windows.Forms.Application.OnThreadException%2A>将执行默认行为，其中包括显示一个对话框，通知用户已被错误。</span><span class="sxs-lookup"><span data-stu-id="da226-313">If you do not attach an event handler, <xref:System.Windows.Forms.Application.OnThreadException%2A> will execute the default behavior, which involves displaying a dialog box to inform the user that there has been an error.</span></span>  
  
 <span data-ttu-id="da226-314"><xref:System.Windows.Forms.Application.OnThreadException%2A> 仅在线程拥有的 Windows 窗体上实现默认的发生的未经处理异常的异常行为。</span><span class="sxs-lookup"><span data-stu-id="da226-314"><xref:System.Windows.Forms.Application.OnThreadException%2A> only implements default exception behavior for unhandled exceptions that occur on threads owned by Windows Forms.</span></span> <span data-ttu-id="da226-315">由其他线程上未经处理的异常处理<xref:System.AppDomain.UnhandledException>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-315">Unhandled exceptions on other threads are handled by the <xref:System.AppDomain.UnhandledException> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-316">获取为应用程序所有的已打开窗体的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-316">Gets a collection of open forms owned by the application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-317">包含属于此应用程序的所有当前打开窗体的 <see cref="T:System.Windows.Forms.FormCollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-317">A <see cref="T:System.Windows.Forms.FormCollection" /> containing all the currently open forms owned by this application.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-318"><xref:System.Windows.Forms.Application.OpenForms%2A>属性表示拥有的应用程序的窗体的只读集合。</span><span class="sxs-lookup"><span data-stu-id="da226-318">The <xref:System.Windows.Forms.Application.OpenForms%2A> property represents a read-only collection of forms owned by the application.</span></span> <span data-ttu-id="da226-319">可以搜索此集合，按索引位置或通过<xref:System.Windows.Forms.Control.Name%2A>的<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="da226-319">This collection can be searched by index position or by the <xref:System.Windows.Forms.Control.Name%2A> of the <xref:System.Windows.Forms.Form>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="da226-320">按照定义，调用方必须有权访问所有窗口，<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />枚举。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-320">Caller must have permission to access all windows, as defined by the <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /> value of the <see cref="T:System.Security.Permissions.UIPermissionWindow" /> enumeration.</span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="T:System.Windows.Forms.FormCollection" />
      </Docs>
    </Member>
    <Member MemberName="ProductName">
      <MemberSignature Language="C#" Value="public static string ProductName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ProductName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.ProductName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ProductName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ProductName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-321">获取与该应用程序关联的产品名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-321">Gets the product name associated with this application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-322">产品名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-322">The product name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-323">`ProductName` 将取自于包含当前应用程序的主窗体的程序集的元数据。</span><span class="sxs-lookup"><span data-stu-id="da226-323">`ProductName` is taken from the metadata of the assembly containing the main form of the current application.</span></span> <span data-ttu-id="da226-324">你可以将其设置通过设置<xref:System.Reflection.AssemblyProductAttribute>内程序集清单。</span><span class="sxs-lookup"><span data-stu-id="da226-324">You can set it by setting <xref:System.Reflection.AssemblyProductAttribute> inside of your assembly manifest.</span></span> <span data-ttu-id="da226-325">有关详细信息，请参阅[程序集清单](~/docs/framework/app-domains/assembly-manifest.md)。</span><span class="sxs-lookup"><span data-stu-id="da226-325">For more information, see [Assembly Manifest](~/docs/framework/app-domains/assembly-manifest.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-326">下面的代码示例获取此属性，并在文本框中显示其值。</span><span class="sxs-lookup"><span data-stu-id="da226-326">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="da226-327">该示例需要`textBox1`已放在窗体上。</span><span class="sxs-lookup"><span data-stu-id="da226-327">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.ProductName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ProductName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ProductName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ProductName Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ProductName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ProductName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.ProductVersion" />
        <altmember cref="P:System.Windows.Forms.Application.CompanyName" />
        <altmember cref="T:System.Reflection.AssemblyProductAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ProductVersion">
      <MemberSignature Language="C#" Value="public static string ProductVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ProductVersion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.ProductVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ProductVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ProductVersion { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-328">获取与该应用程序关联的产品版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-328">Gets the product version associated with this application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-329">产品版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-329">The product version.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-330">通常情况下，版本号将显示为*主要数*。*版本号*。*内部版本号*。*专用部件号*。</span><span class="sxs-lookup"><span data-stu-id="da226-330">Typically, a version number displays as *major number*.*minor number*.*build number*.*private part number*.</span></span> <span data-ttu-id="da226-331">通过设置你的程序集清单中的程序集版本可以显式将其设置。</span><span class="sxs-lookup"><span data-stu-id="da226-331">You can set it explicitly by setting the assembly version within your assembly manifest.</span></span> <span data-ttu-id="da226-332">有关详细信息，请参阅[程序集清单](~/docs/framework/app-domains/assembly-manifest.md)。</span><span class="sxs-lookup"><span data-stu-id="da226-332">For more information, see [Assembly Manifest](~/docs/framework/app-domains/assembly-manifest.md).</span></span>  
  
 <span data-ttu-id="da226-333"><xref:System.Windows.Forms.Application.ProductVersion%2A> 第一个如下所示，以查看是否有包含主可执行文件的程序集`AssemblyInformationalVersion`在其上的属性。</span><span class="sxs-lookup"><span data-stu-id="da226-333"><xref:System.Windows.Forms.Application.ProductVersion%2A> first looks to see if the assembly containing the main executable has the `AssemblyInformationalVersion` attribute on it.</span></span> <span data-ttu-id="da226-334">如果存在此属性，它同时用于<xref:System.Windows.Forms.Application.ProductVersion%2A>和<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>。</span><span class="sxs-lookup"><span data-stu-id="da226-334">If this attribute exists, it is used for both <xref:System.Windows.Forms.Application.ProductVersion%2A> and <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>.</span></span> <span data-ttu-id="da226-335">如果此属性不存在，这两个属性使用的可执行文件的版本。</span><span class="sxs-lookup"><span data-stu-id="da226-335">If this attribute does not exist, both properties use the version of the executable file instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-336">下面的代码示例获取此属性，并在文本框中显示其值。</span><span class="sxs-lookup"><span data-stu-id="da226-336">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="da226-337">该示例需要`textBox1`已放在窗体上。</span><span class="sxs-lookup"><span data-stu-id="da226-337">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.ProductVersion Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ProductVersion Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ProductVersion Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ProductVersion Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ProductVersion Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ProductVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.ProductName" />
        <altmember cref="P:System.Windows.Forms.Application.CompanyName" />
        <altmember cref="T:System.Reflection.AssemblyVersionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RaiseIdle">
      <MemberSignature Language="C#" Value="public static void RaiseIdle (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseIdle(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.RaiseIdle(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RaiseIdle (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RaiseIdle(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="da226-338">要传递给 <see cref="T:System.EventArgs" /> 事件的 <see cref="E:System.Windows.Forms.Application.Idle" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-338">The <see cref="T:System.EventArgs" /> objects to pass to the <see cref="E:System.Windows.Forms.Application.Idle" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-339">在宿主方案中引发 <see cref="E:System.Windows.Forms.Application.Idle" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-339">Raises the <see cref="E:System.Windows.Forms.Application.Idle" /> event in hosted scenarios.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-340">在另一个环境，如非托管应用程序中承载 Windows 窗体时使用此方法。</span><span class="sxs-lookup"><span data-stu-id="da226-340">This method is used when hosting Windows Forms in another environment, such as an unmanaged application.</span></span> <span data-ttu-id="da226-341">应调用<xref:System.Windows.Forms.Application.RaiseIdle%2A>在宿主应用程序进入空闲状态。</span><span class="sxs-lookup"><span data-stu-id="da226-341">You should call <xref:System.Windows.Forms.Application.RaiseIdle%2A> when the hosting application enters an idle state.</span></span> <span data-ttu-id="da226-342">这样，某些 Windows 窗体控件和组件进行重要后台工作时用户未与应用程序交互。</span><span class="sxs-lookup"><span data-stu-id="da226-342">This enables some Windows Forms controls and components to do important background work while the user is not interacting with the application.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Application.Idle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterMessageLoop">
      <MemberSignature Language="C#" Value="public static void RegisterMessageLoop (System.Windows.Forms.Application.MessageLoopCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterMessageLoop(class System.Windows.Forms.Application/MessageLoopCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterMessageLoop (callback As Application.MessageLoopCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterMessageLoop(System::Windows::Forms::Application::MessageLoopCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Windows.Forms.Application+MessageLoopCallback" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="da226-343">当 Windows 窗体需要检查宿主环境是否仍在发送消息时，所要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-343">The method to call when Windows Forms needs to check if the hosting environment is still sending messages.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-344">注册一个回调以检查消息循环是否正在宿主环境中运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-344">Registers a callback for checking whether the message loop is running in hosted environments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-345">在另一个环境，如非托管应用程序中承载 Windows 窗体时使用此方法。</span><span class="sxs-lookup"><span data-stu-id="da226-345">This method is used when hosting Windows Forms in another environment, such as an unmanaged application.</span></span> <span data-ttu-id="da226-346">在托管环境中，<xref:System.Windows.Forms.Application.MessageLoop%2A>属性将始终返回 false，如果 Windows 窗体不处理消息。</span><span class="sxs-lookup"><span data-stu-id="da226-346">In hosted environments, the <xref:System.Windows.Forms.Application.MessageLoop%2A> property will always return false if Windows Forms is not processing messages.</span></span> <span data-ttu-id="da226-347">使用此回调来告诉 Windows 窗体的宿主环境仍在处理消息。</span><span class="sxs-lookup"><span data-stu-id="da226-347">Use this callback to tell Windows Forms if the hosting environment is still processing messages.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Application.MessageLoopCallback" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMessageFilter">
      <MemberSignature Language="C#" Value="public static void RemoveMessageFilter (System.Windows.Forms.IMessageFilter value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMessageFilter(class System.Windows.Forms.IMessageFilter value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.RemoveMessageFilter(System.Windows.Forms.IMessageFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMessageFilter (value As IMessageFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMessageFilter(System::Windows::Forms::IMessageFilter ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.IMessageFilter" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da226-348">要从应用程序移除的 <see cref="T:System.Windows.Forms.IMessageFilter" /> 的实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-348">The implementation of the <see cref="T:System.Windows.Forms.IMessageFilter" /> to remove from the application.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-349">从应用程序的消息泵移除一个消息筛选器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-349">Removes a message filter from the message pump of the application.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-350">当你不再想要捕获 Windows 消息之前被发送时，你可以删除消息筛选器。</span><span class="sxs-lookup"><span data-stu-id="da226-350">You can remove a message filter when you no longer want to capture Windows messages before they are dispatched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-351">你可以使用消息筛选器之前，必须提供的实现<xref:System.Windows.Forms.IMessageFilter>接口。</span><span class="sxs-lookup"><span data-stu-id="da226-351">Before you can use a message filter, you must provide an implementation for the <xref:System.Windows.Forms.IMessageFilter> interface.</span></span> <span data-ttu-id="da226-352">下面的类创建消息筛选器调用`TestMessageFilter`。</span><span class="sxs-lookup"><span data-stu-id="da226-352">The following class creates a message filter called `TestMessageFilter`.</span></span> <span data-ttu-id="da226-353">此筛选器会阻止与鼠标左键相关的所有消息。</span><span class="sxs-lookup"><span data-stu-id="da226-353">This filter blocks all messages relating to the left mouse button.</span></span>  
  
 [!code-cpp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CS/source.cs#1)]
 [!code-vb[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderWithVisualStyles">
      <MemberSignature Language="C#" Value="public static bool RenderWithVisualStyles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RenderWithVisualStyles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.RenderWithVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RenderWithVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RenderWithVisualStyles { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-354">获取指定当前应用程序是否使用可视样式绘制控件的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-354">Gets a value specifying whether the current application is drawing controls with visual styles.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-355">如果在应用程序窗口的工作区为控件启用了可视样式，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-355">
              <see langword="true" /> if visual styles are enabled for controls in the client area of application windows; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-356">如果您正在绘制的自定义控件，则使用此属性来确定是否要绘制控件带或不带可视样式，以使其外观与应用程序中其他控件一致。</span><span class="sxs-lookup"><span data-stu-id="da226-356">If you are drawing a custom control, use this property to decide whether to draw the control with or without visual styles, so that its appearance is consistent with other controls in the application.</span></span>  
  
 <span data-ttu-id="da226-357">下表显示的四个条件必须存在的<xref:System.Windows.Forms.Application.RenderWithVisualStyles%2A>返回`true`。</span><span class="sxs-lookup"><span data-stu-id="da226-357">The following table shows the four conditions that must exist for <xref:System.Windows.Forms.Application.RenderWithVisualStyles%2A> to return `true`.</span></span>  
  
|<span data-ttu-id="da226-358">条件</span><span class="sxs-lookup"><span data-stu-id="da226-358">Condition</span></span>|<span data-ttu-id="da226-359">描述</span><span class="sxs-lookup"><span data-stu-id="da226-359">Description</span></span>|  
|---------------|-----------------|  
|<span data-ttu-id="da226-360">操作系统支持视觉样式</span><span class="sxs-lookup"><span data-stu-id="da226-360">The operating system supports visual styles</span></span>|<span data-ttu-id="da226-361">若要单独验证这种情况，请使用 <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsSupportedByOS%2A> 类的 <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> 属性。</span><span class="sxs-lookup"><span data-stu-id="da226-361">To verify this condition separately, use the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsSupportedByOS%2A> property of the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> class.</span></span>|  
|<span data-ttu-id="da226-362">用户已启用在操作系统中的视觉样式</span><span class="sxs-lookup"><span data-stu-id="da226-362">The user has enabled visual styles in the operating system</span></span>|<span data-ttu-id="da226-363">若要单独验证这种情况，请使用 <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsEnabledByUser%2A> 类的 <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> 属性。</span><span class="sxs-lookup"><span data-stu-id="da226-363">To verify this condition separately, use the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsEnabledByUser%2A> property of the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> class.</span></span>|  
|<span data-ttu-id="da226-364">应用程序中启用了可视样式</span><span class="sxs-lookup"><span data-stu-id="da226-364">Visual styles are enabled in the application</span></span>|<span data-ttu-id="da226-365">可以通过调用 <xref:System.Windows.Forms.Application.EnableVisualStyles> 方法或使用指定用 ComCtl32.dll 版本 6 或更高版本绘制控件的应用程序清单来启用应用程序中的视觉样式。</span><span class="sxs-lookup"><span data-stu-id="da226-365">Visual styles can be enabled in an application by calling the <xref:System.Windows.Forms.Application.EnableVisualStyles> method or by using an application manifest that specifies that ComCtl32.dll version 6 or later will be used to draw controls.</span></span>|  
|<span data-ttu-id="da226-366">正在使用可视样式绘制应用程序窗口的工作区</span><span class="sxs-lookup"><span data-stu-id="da226-366">Visual styles are being used to draw the client area of application windows</span></span>|<span data-ttu-id="da226-367">若要单独验证这种情况，请使用 <xref:System.Windows.Forms.Application> 类的 <xref:System.Windows.Forms.Application.VisualStyleState%2A> 属性，验证它是否具有 <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAreaEnabled?displayProperty=nameWithType> 或 <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAndNonClientAreasEnabled?displayProperty=nameWithType> 值。</span><span class="sxs-lookup"><span data-stu-id="da226-367">To verify this condition separately, use the <xref:System.Windows.Forms.Application.VisualStyleState%2A> property of the <xref:System.Windows.Forms.Application> class and verify that it has the value <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAreaEnabled?displayProperty=nameWithType> or <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAndNonClientAreasEnabled?displayProperty=nameWithType>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public static void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Restart();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da226-368">关闭应用程序并立即启动一个新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-368">Shuts down the application and starts a new instance immediately.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-369">调用的最常见原因`Restart`是启动新版本的应用程序已通过下载[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]使用`Update`或`UpdateAsync`方法。</span><span class="sxs-lookup"><span data-stu-id="da226-369">The most common reason for calling `Restart` is to start a new version of the application that you have downloaded through [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] using the `Update` or `UpdateAsync` method.</span></span>  
  
 <span data-ttu-id="da226-370">应用程序将重新启动它们首次运行所在的上下文中。</span><span class="sxs-lookup"><span data-stu-id="da226-370">Applications are restarted in the context in which they were initially run.</span></span> <span data-ttu-id="da226-371">如果你的应用程序已开始使用直接指向应用程序的主可执行文件的 URL，它将重新启动使用相同的 URL。</span><span class="sxs-lookup"><span data-stu-id="da226-371">If your application was started using a URL pointing directly to the application's main executable file, it will be restarted using the same URL.</span></span> <span data-ttu-id="da226-372">如果你的应用程序[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]应用程序中，它将重新启动使用[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="da226-372">If your application is a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application, it will be restarted using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span>  
  
 <span data-ttu-id="da226-373">如果你的应用程序时它第一次执行了最初提供的命令行选项<xref:System.Windows.Forms.Application.Restart%2A>将启动应用程序再次使用相同的选项。</span><span class="sxs-lookup"><span data-stu-id="da226-373">If your application was originally supplied command-line options when it first executed, <xref:System.Windows.Forms.Application.Restart%2A> will launch the application again with the same options.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="da226-374">您的代码不是 Windows 窗体应用程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-374">Your code is not a Windows Forms application.</span>
          </span>
          <span data-ttu-id="da226-375">不能在此上下文中调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-375">You cannot call this method in this context.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="da226-376">需要<see cref="M:System.Security.Permissions.SecurityPermission.IsUnrestricted" />权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-376">Requires <see cref="M:System.Security.Permissions.SecurityPermission.IsUnrestricted" /> permission.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da226-377">在当前线程上开始运行标准应用程序消息循环。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-377">Begins running a standard application message loop on the current thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da226-378">在没有窗体的情况下，在当前线程上开始运行标准应用程序消息循环。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-378">Begins running a standard application message loop on the current thread, without a form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-379">在基于 Win32 的或 Windows 窗体应用程序消息循环是处理用户事件，如点击鼠标和键盘键击代码中的例程。</span><span class="sxs-lookup"><span data-stu-id="da226-379">In a Win32-based or Windows Forms application, a message loop is a routine in code that processes user events, such as mouse clicks and keyboard strokes.</span></span> <span data-ttu-id="da226-380">每个正在运行的基于 Windows 的应用程序需要调用主消息循环活动的消息循环。</span><span class="sxs-lookup"><span data-stu-id="da226-380">Every running Windows-based application requires an active message loop, called the main message loop.</span></span> <span data-ttu-id="da226-381">当关闭主消息循环时，应用程序退出。</span><span class="sxs-lookup"><span data-stu-id="da226-381">When the main message loop is closed, the application exits.</span></span> <span data-ttu-id="da226-382">在 Windows 窗体，将关闭此循环时<xref:System.Windows.Forms.Application.Exit%2A>调用方法时，或当<xref:System.Windows.Forms.Application.ExitThread%2A>运行主消息循环的线程上调用方法。</span><span class="sxs-lookup"><span data-stu-id="da226-382">In Windows Forms, this loop is closed when the <xref:System.Windows.Forms.Application.Exit%2A> method is called, or when the <xref:System.Windows.Forms.Application.ExitThread%2A> method is called on the thread that is running the main message loop.</span></span>  
  
 <span data-ttu-id="da226-383">大多数 Windows 窗体开发人员将不需要使用此版本的方法。</span><span class="sxs-lookup"><span data-stu-id="da226-383">Most Windows Forms developers will not need to use this version of the method.</span></span> <span data-ttu-id="da226-384">应使用<xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.Form%29>重载，以使用主窗体中，启动应用程序，以便在应用程序终止时关闭主窗体。</span><span class="sxs-lookup"><span data-stu-id="da226-384">You should use the <xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.Form%29> overload to start an application with a main form, so that the application terminates when the main form is closed.</span></span> <span data-ttu-id="da226-385">对于所有其他情况下，使用<xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.ApplicationContext%29>重载，该产品支持提供<xref:System.Windows.Forms.ApplicationContext>更好地控制应用程序的生存期的对象。</span><span class="sxs-lookup"><span data-stu-id="da226-385">For all other situations, use the <xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.ApplicationContext%29> overload, which supports supplying an <xref:System.Windows.Forms.ApplicationContext> object for better control over the lifetime of the application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="da226-386">主消息循环已在此线程上运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-386">A main message loop is already running on this thread.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Windows.Forms.ApplicationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Windows.Forms.ApplicationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Run(System.Windows.Forms.ApplicationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (context As ApplicationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Windows::Forms::ApplicationContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.ApplicationContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="da226-387">一个 <see cref="T:System.Windows.Forms.ApplicationContext" />，应用程序将在其中运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-387">An <see cref="T:System.Windows.Forms.ApplicationContext" /> in which the application is run.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-388">在特定的 <see cref="T:System.Windows.Forms.ApplicationContext" /> 中，在当前线程上开始运行标准应用程序消息循环。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-388">Begins running a standard application message loop on the current thread, with an <see cref="T:System.Windows.Forms.ApplicationContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-389">消息循环运行，直到<xref:System.Windows.Forms.Application.Exit%2A>或<xref:System.Windows.Forms.Application.ExitThread%2A>称为或<xref:System.Windows.Forms.Application.ThreadExit>上下文对象上引发事件。</span><span class="sxs-lookup"><span data-stu-id="da226-389">The message loop runs until <xref:System.Windows.Forms.Application.Exit%2A> or <xref:System.Windows.Forms.Application.ExitThread%2A> is called or the <xref:System.Windows.Forms.Application.ThreadExit> event is raised on the context object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-390">此示例显示两个窗体，并退出应用程序，这两个窗体关闭时。</span><span class="sxs-lookup"><span data-stu-id="da226-390">The example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="da226-391">当应用程序启动和退出时，将记住每个窗体的位置。</span><span class="sxs-lookup"><span data-stu-id="da226-391">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="da226-392">此示例演示如何使用<xref:System.Windows.Forms.ApplicationContext>，连同`Application.Run(context)`方法，以显示多个窗体应用程序启动时。</span><span class="sxs-lookup"><span data-stu-id="da226-392">This example demonstrates how to use an <xref:System.Windows.Forms.ApplicationContext>, along with the `Application.Run(context)` method, to display multiple forms when the application starts.</span></span>  
  
 <span data-ttu-id="da226-393">类`MyApplicationContext`继承自<xref:System.Windows.Forms.ApplicationContext>每个窗体已关闭，并在它们都时退出当前线程时保持跟踪。</span><span class="sxs-lookup"><span data-stu-id="da226-393">The class `MyApplicationContext` inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="da226-394">该类存储了用户的每个窗体的位置。</span><span class="sxs-lookup"><span data-stu-id="da226-394">The class stores the positions of each form for the user.</span></span> <span data-ttu-id="da226-395">窗体位置数据存储在文件标题为`Appdata.txt`，它在由位置创建<xref:System.Windows.Forms.Application.UserAppDataPath%2A>。</span><span class="sxs-lookup"><span data-stu-id="da226-395">The form position data is stored in a file titled `Appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="da226-396">`Main`方法调用`Application.Run(context)`启动应用程序提供<xref:System.Windows.Forms.ApplicationContext>。</span><span class="sxs-lookup"><span data-stu-id="da226-396">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="da226-397">代码`AppForm1`和`AppForm2`起见不显示窗体。</span><span class="sxs-lookup"><span data-stu-id="da226-397">The code for the `AppForm1` and `AppForm2` forms is not shown for the purpose of brevity.</span></span> <span data-ttu-id="da226-398">请参阅<xref:System.Windows.Forms.ApplicationContext>类概述为完整的代码清单。</span><span class="sxs-lookup"><span data-stu-id="da226-398">See the <xref:System.Windows.Forms.ApplicationContext> class overview for the whole code listing.</span></span>  
  
 [!code-cpp[Application#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#2)]
 [!code-csharp[Application#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#2)]
 [!code-vb[Application#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="da226-399">主消息循环已在此线程上运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-399">A main message loop is already running on this thread.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Windows.Forms.Form mainForm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Windows.Forms.Form mainForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Run(System.Windows.Forms.Form)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (mainForm As Form)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Windows::Forms::Form ^ mainForm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mainForm" Type="System.Windows.Forms.Form" />
      </Parameters>
      <Docs>
        <param name="mainForm">
          <span data-ttu-id="da226-400">一个 <see cref="T:System.Windows.Forms.Form" />，它代表要使之可见的窗体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-400">A <see cref="T:System.Windows.Forms.Form" /> that represents the form to make visible.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-401">在当前线程上开始运行标准应用程序消息循环，并使指定窗体可见。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-401">Begins running a standard application message loop on the current thread, and makes the specified form visible.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-402">通常情况下，应用程序的主函数调用此方法，并将应用程序的主窗口传递给它。</span><span class="sxs-lookup"><span data-stu-id="da226-402">Typically, the main function of an application calls this method and passes to it the main window of the application.</span></span>  
  
 <span data-ttu-id="da226-403">此方法将添加到事件处理程序`mainForm`参数<xref:System.Windows.Forms.Form.Closed>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-403">This method adds an event handler to the `mainForm` parameter for the <xref:System.Windows.Forms.Form.Closed> event.</span></span> <span data-ttu-id="da226-404">事件处理程序调用<xref:System.Windows.Forms.Application.ExitThread%2A>清理应用程序。</span><span class="sxs-lookup"><span data-stu-id="da226-404">The event handler calls <xref:System.Windows.Forms.Application.ExitThread%2A> to clean up the application.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="da226-405"><xref:System.Windows.Forms.Control.Dispose%2A>方法<xref:System.Windows.Forms.Form>类将在此方法返回之前调用。</span><span class="sxs-lookup"><span data-stu-id="da226-405">The <xref:System.Windows.Forms.Control.Dispose%2A> method of the <xref:System.Windows.Forms.Form> class will be called prior to the return of this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-406">下面的代码示例列出窗体上一个列表框中的数字。</span><span class="sxs-lookup"><span data-stu-id="da226-406">The following code example lists numbers in a list box on a form.</span></span> <span data-ttu-id="da226-407">每次你单击`button1`，应用程序列表中添加另一个数。</span><span class="sxs-lookup"><span data-stu-id="da226-407">Each time you click `button1`, the application adds another number to the list.</span></span>  
  
 <span data-ttu-id="da226-408">`Main`方法调用<xref:System.Windows.Forms.Application.Run%2A>启动该应用程序，这将创建窗体， `listBox1`，和`button1`。</span><span class="sxs-lookup"><span data-stu-id="da226-408">The `Main` method calls <xref:System.Windows.Forms.Application.Run%2A> to start the application, which creates the form, `listBox1`, and `button1`.</span></span> <span data-ttu-id="da226-409">当用户单击`button1`、`button1_Click`方法添加到列表框中，一到三个数字并显示<xref:System.Windows.Forms.MessageBox>。</span><span class="sxs-lookup"><span data-stu-id="da226-409">When the user clicks `button1`, the `button1_Click` method adds numbers one to three to the list box, and displays a <xref:System.Windows.Forms.MessageBox>.</span></span> <span data-ttu-id="da226-410">如果用户单击**否**上<xref:System.Windows.Forms.MessageBox>、`button1_Click`方法向列表添加另一个数。</span><span class="sxs-lookup"><span data-stu-id="da226-410">If the user clicks **No** on the <xref:System.Windows.Forms.MessageBox>, the `button1_Click` method adds another number to the list.</span></span> <span data-ttu-id="da226-411">如果用户单击**是**，应用程序调用<xref:System.Windows.Forms.Application.Exit%2A>来处理队列中的所有剩余消息，然后退出。</span><span class="sxs-lookup"><span data-stu-id="da226-411">If the user clicks **Yes**, the application calls <xref:System.Windows.Forms.Application.Exit%2A> to process all remaining messages in the queue and then to quit.</span></span>  
  
 <span data-ttu-id="da226-412">该示例需要`listBox1`和`button1`已创建并已放置在窗体上。</span><span class="sxs-lookup"><span data-stu-id="da226-412">The example requires that `listBox1` and `button1` have been created and placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.Exit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.Exit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.Exit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.Exit Example/CS/source.cs#1)]
 [!code-vb[Classic Application.Exit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.Exit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="da226-413">主消息循环已在当前线程上运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-413">A main message loop is already running on the current thread.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="SafeTopLevelCaptionFormat">
      <MemberSignature Language="C#" Value="public static string SafeTopLevelCaptionFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string SafeTopLevelCaptionFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.SafeTopLevelCaptionFormat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SafeTopLevelCaptionFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ SafeTopLevelCaptionFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-414">获取或设置当顶级窗口标题与版权警告标志一起显示时，要应用于顶级窗口标题的格式字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-414">Gets or sets the format string to apply to top-level window captions when they are displayed with a warning banner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-415">要应用于顶级窗口标题的格式字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-415">The format string to apply to top-level window captions.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="da226-416">若要将此属性设置的所有窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-416">for all windows to set this property.</span>
          </span>
          <span data-ttu-id="da226-417">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-417">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetCompatibleTextRenderingDefault">
      <MemberSignature Language="C#" Value="public static void SetCompatibleTextRenderingDefault (bool defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCompatibleTextRenderingDefault(bool defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCompatibleTextRenderingDefault (defaultValue As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCompatibleTextRenderingDefault(bool defaultValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="da226-418">用于新控件的默认值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-418">The default value to use for new controls.</span>
          </span>
          <span data-ttu-id="da226-419">如果为 <see langword="true" />，则支持 <c>UseCompatibleTextRendering</c> 的新控件使用基于 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 的 <see cref="T:System.Drawing.Graphics" /> 类进行文本呈现；如果为 <see langword="false" />，则新控件使用基于 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 的 <see cref="T:System.Windows.Forms.TextRenderer" /> 类。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-419">If <see langword="true" />, new controls that support <c>UseCompatibleTextRendering</c> use the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] based <see cref="T:System.Drawing.Graphics" /> class for text rendering; if <see langword="false" />, new controls use the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] based <see cref="T:System.Windows.Forms.TextRenderer" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-420">将某些控件上定义的 <c>UseCompatibleTextRendering</c> 属性设置为应用程序范围内的默认值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-420">Sets the application-wide default for the <c>UseCompatibleTextRendering</c> property defined on certain controls.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-421">某些 Windows 窗体控件可以呈现使用其文本<xref:System.Windows.Forms.TextRenderer>类，基于[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]图形库或<xref:System.Drawing.Graphics>类，基于[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]图形库。</span><span class="sxs-lookup"><span data-stu-id="da226-421">Certain Windows Forms controls can render their text using either the <xref:System.Windows.Forms.TextRenderer> class, which is based on the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] graphics library, or the <xref:System.Drawing.Graphics> class, which is based on the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] graphics library.</span></span> <span data-ttu-id="da226-422">此更改为了[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]因性能和本地化问题[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="da226-422">This change was made in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] because of performance and localization issues with [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)].</span></span> <span data-ttu-id="da226-423">使用<xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A>设置的默认值`UseCompatibleTextRendering`支持它的控件的属性。</span><span class="sxs-lookup"><span data-stu-id="da226-423">Use <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> to set the default value of the `UseCompatibleTextRendering` property for controls that support it.</span></span>  
  
 <span data-ttu-id="da226-424">`UseCompatibleTextRendering`属性旨在提供 visual Windows 窗体控件之间的兼容性，呈现文本使用<xref:System.Windows.Forms.TextRenderer>类和[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]和[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]应用程序执行自定义文本呈现使用<xref:System.Drawing.Graphics>类。</span><span class="sxs-lookup"><span data-stu-id="da226-424">The `UseCompatibleTextRendering` property is intended to provide visual compatibility between Windows Forms controls that render text using the <xref:System.Windows.Forms.TextRenderer> class and [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] and [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)] applications that perform custom text rendering using the <xref:System.Drawing.Graphics> class.</span></span> <span data-ttu-id="da226-425">在大多数情况下，如果你的应用程序不正在升级从[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]或[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]，因此，建议你停`UseCompatibleTextRendering`设置的默认值为`false`。</span><span class="sxs-lookup"><span data-stu-id="da226-425">In most cases, if your application is not being upgraded from [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] or [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], it is recommended that you leave `UseCompatibleTextRendering` set to the default value of `false`.</span></span>  
  
 <span data-ttu-id="da226-426">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]基于<xref:System.Windows.Forms.TextRenderer>类中引入了[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]为了提高性能，使文本效果更好，并提高的国际字体支持。</span><span class="sxs-lookup"><span data-stu-id="da226-426">The [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] based <xref:System.Windows.Forms.TextRenderer> class was introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] to improve performance, make text look better, and improve support for international fonts.</span></span> <span data-ttu-id="da226-427">在早期版本的[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]基于<xref:System.Drawing.Graphics>类用于执行所有文本呈现。</span><span class="sxs-lookup"><span data-stu-id="da226-427">In earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] based <xref:System.Drawing.Graphics> class was used to perform all text rendering.</span></span> [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]<span data-ttu-id="da226-428"> 计算字符间距和自动换行从的不同[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="da226-428"> calculates character spacing and word wrapping differently from [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)].</span></span> <span data-ttu-id="da226-429">在 Windows 窗体应用程序中使用<xref:System.Drawing.Graphics>类呈现文本中，这可能会导致使用的控件的文本<xref:System.Windows.Forms.TextRenderer>显示不同于应用程序中的其他文本。</span><span class="sxs-lookup"><span data-stu-id="da226-429">In a Windows Forms application that uses the <xref:System.Drawing.Graphics> class to render text, this could cause the text for controls that use <xref:System.Windows.Forms.TextRenderer> to appear different from the other text in the application.</span></span> <span data-ttu-id="da226-430">若要解决此不兼容性，你可以设置`UseCompatibleTextRendering`属性`true`。</span><span class="sxs-lookup"><span data-stu-id="da226-430">To resolve this incompatibility, you can set the `UseCompatibleTextRendering` property to `true`.</span></span> <span data-ttu-id="da226-431">若要设置`UseCompatibleTextRendering`到`true`应用程序中的所有受支持控件，调用<xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A>方法的参数替换`true`。</span><span class="sxs-lookup"><span data-stu-id="da226-431">To set `UseCompatibleTextRendering` to `true` for all supported controls in the application, call the <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> method with a parameter of `true`.</span></span>  
  
 <span data-ttu-id="da226-432">如果在另一个应用程序，如 Internet Explorer 中承载 Windows 窗体代码，应永远不会调用此方法。</span><span class="sxs-lookup"><span data-stu-id="da226-432">You should never call this method if your Windows Forms code is hosted in another application, such as Internet Explorer.</span></span> <span data-ttu-id="da226-433">只能在独立的 Windows 窗体应用程序中调用此方法。</span><span class="sxs-lookup"><span data-stu-id="da226-433">Only call this method in stand-alone Windows Forms applications.</span></span>  
  
   
  
## Examples  
  
> [!IMPORTANT]
>  <span data-ttu-id="da226-434">若要设置的默认值为`UseCompatibleTextRendering`中[!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]或更高版本，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="da226-434">To set the default value for `UseCompatibleTextRendering` in [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] or later, see <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="da226-435">在[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]或更高版本，对的调用<xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A>在 Program.cs 文件中自动生成。</span><span class="sxs-lookup"><span data-stu-id="da226-435">In [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] or later, a call to <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> is automatically generated in the Program.cs file.</span></span> <span data-ttu-id="da226-436">若要更改文本呈现默认值，请修改生成的代码。</span><span class="sxs-lookup"><span data-stu-id="da226-436">To change the text rendering default, modify the generated code.</span></span>  
  
```scr  
static class Program  
{  
    /// <summary>  
    /// The main entry point for the application.  
    /// </summary>  
    [STAThread]  
    static void Main()  
    {  
        Application.EnableVisualStyles();  
        Application.SetCompatibleTextRenderingDefault(false);  
        Application.Run(new Form1());  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="da226-437">您只能在 Windows 窗体应用程序创建第一个窗口之前调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-437">You can only call this method before the first window is created by your Windows Forms application.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Forms.ButtonBase.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.CheckedListBox.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.GroupBox.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.Label.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.PropertyGrid.UseCompatibleTextRendering" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
        <altmember cref="M:System.Drawing.Text.PrivateFontCollection.AddMemoryFont(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SetSuspendState">
      <MemberSignature Language="C#" Value="public static bool SetSuspendState (System.Windows.Forms.PowerState state, bool force, bool disableWakeEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetSuspendState(valuetype System.Windows.Forms.PowerState state, bool force, bool disableWakeEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetSuspendState(System.Windows.Forms.PowerState,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetSuspendState (state As PowerState, force As Boolean, disableWakeEvent As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetSuspendState(System::Windows::Forms::PowerState state, bool force, bool disableWakeEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Forms.PowerState" />
        <Parameter Name="force" Type="System.Boolean" />
        <Parameter Name="disableWakeEvent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="da226-438">指示要转换到的目标电源活动模式的 <see cref="T:System.Windows.Forms.PowerState" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-438">A <see cref="T:System.Windows.Forms.PowerState" /> indicating the power activity mode to which to transition.</span>
          </span>
        </param>
        <param name="force">
          <span data-ttu-id="da226-439">若要立即强制挂起模式，则为 <see langword="true" />；若要使 Windows 向每个应用程序发送挂起请求，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-439">
              <see langword="true" /> to force the suspended mode immediately; <see langword="false" /> to cause Windows to send a suspend request to every application.</span>
          </span>
        </param>
        <param name="disableWakeEvent">
          <span data-ttu-id="da226-440">值为 <see langword="true" /> 时可在发生唤醒事件时禁止将系统的电源状态恢复为活动状态；值为 <see langword="false" /> 时可在发生唤醒事件时允许将系统的电源状态恢复为活动状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-440">
              <see langword="true" /> to disable restoring the system's power status to active on a wake event, <see langword="false" /> to enable restoring the system's power status to active on a wake event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-441">挂起系统或使系统休眠，或者请求系统挂起或休眠。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-441">Suspends or hibernates the system, or requests that the system be suspended or hibernated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da226-442">如果正在挂起该系统，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-442">
              <see langword="true" /> if the system is being suspended, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-443">如果应用程序不响应的挂起请求在 20 秒内，Windows 将确定它处于非响应状态，并且，应用程序可以被置于休眠模式或终止。</span><span class="sxs-lookup"><span data-stu-id="da226-443">If an application does not respond to a suspend request within 20 seconds, Windows determines that it is in a non-responsive state, and that the application can either be put to sleep or terminated.</span></span> <span data-ttu-id="da226-444">一旦应用程序响应的挂起请求，但是，它可能需要它需要清理资源，并关闭活动进程的任意时间。</span><span class="sxs-lookup"><span data-stu-id="da226-444">Once an application responds to a suspend request, however, it can take whatever time it needs to clean up resources and shut down active processes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.PowerState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetUnhandledExceptionMode">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da226-445">指示应用程序如何响应未经处理的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-445">Instructs the application how to respond to unhandled exceptions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da226-446">下面的代码示例设置 Windows 窗体线程和其他线程发生的异常的异常发生的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-446">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="da226-447">它将设置<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>以便所有异常都处理应用程序，而不考虑应用程序的用户配置文件中的设置。</span><span class="sxs-lookup"><span data-stu-id="da226-447">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="da226-448">它使用<xref:System.Windows.Forms.Application.ThreadException>事件来处理 UI 线程异常和<xref:System.AppDomain.UnhandledException>事件来处理非 UI 线程异常。</span><span class="sxs-lookup"><span data-stu-id="da226-448">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="da226-449">由于<xref:System.AppDomain.UnhandledException>无法防止应用程序终止，则只需将错误记录中在终止之前应用程序事件日志。</span><span class="sxs-lookup"><span data-stu-id="da226-449">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="da226-450">此示例假定你已经定义了两个<xref:System.Windows.Forms.Button>控件，`button1`和`button2`，在你<xref:System.Windows.Forms.Form>类。</span><span class="sxs-lookup"><span data-stu-id="da226-450">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetUnhandledExceptionMode">
      <MemberSignature Language="C#" Value="public static void SetUnhandledExceptionMode (System.Windows.Forms.UnhandledExceptionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetUnhandledExceptionMode(valuetype System.Windows.Forms.UnhandledExceptionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetUnhandledExceptionMode (mode As UnhandledExceptionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.UnhandledExceptionMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="da226-451">一个 <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> 值，描述在引发未捕获的异常时应用程序的行为方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-451">An <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> value describing how the application should behave if an exception is thrown without being caught.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-452">指示应用程序如何响应未经处理的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-452">Instructs the application how to respond to unhandled exceptions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-453">它通常不是可行捕捉所有由 Windows 窗体引发的异常。</span><span class="sxs-lookup"><span data-stu-id="da226-453">It is often not feasible to catch all of the exceptions thrown by Windows Forms.</span></span> <span data-ttu-id="da226-454">使用此方法，你可以指示是否应捕获所有未经处理由 Windows 窗体组件引发的异常并继续运行，或它是否应将它们公开给用户并暂停执行你的应用程序。</span><span class="sxs-lookup"><span data-stu-id="da226-454">Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.</span></span>  
  
 <span data-ttu-id="da226-455">调用<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>实例化你的应用程序使用的主窗体之前<xref:System.Windows.Forms.Application.Run%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="da226-455">Call <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> before you instantiate the main form of your application using the <xref:System.Windows.Forms.Application.Run%2A> method.</span></span>  
  
 <span data-ttu-id="da226-456">若要捕获不创建的线程中出现的异常和由 Windows 窗体，拥有使用<xref:System.AppDomain.UnhandledException>事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-456">To catch exceptions that occur in threads not created and owned by Windows Forms, use the <xref:System.AppDomain.UnhandledException> event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-457">下面的代码示例设置 Windows 窗体线程和其他线程发生的异常的异常发生的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-457">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="da226-458">它将设置<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>以便所有异常都处理应用程序，而不考虑应用程序的用户配置文件中的设置。</span><span class="sxs-lookup"><span data-stu-id="da226-458">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="da226-459">它使用<xref:System.Windows.Forms.Application.ThreadException>事件来处理 UI 线程异常和<xref:System.AppDomain.UnhandledException>事件来处理非 UI 线程异常。</span><span class="sxs-lookup"><span data-stu-id="da226-459">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="da226-460">由于<xref:System.AppDomain.UnhandledException>无法防止应用程序终止，则只需将错误记录中在终止之前应用程序事件日志。</span><span class="sxs-lookup"><span data-stu-id="da226-460">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="da226-461">此示例假定你已经定义了两个<xref:System.Windows.Forms.Button>控件，`button1`和`button2`，在你<xref:System.Windows.Forms.Form>类。</span><span class="sxs-lookup"><span data-stu-id="da226-461">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="da226-462">在应用程序创建其第一个窗口后，您将无法设置异常模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-462">You cannot set the exception mode after the application has created its first window.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Forms.UnhandledExceptionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetUnhandledExceptionMode">
      <MemberSignature Language="C#" Value="public static void SetUnhandledExceptionMode (System.Windows.Forms.UnhandledExceptionMode mode, bool threadScope);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetUnhandledExceptionMode(valuetype System.Windows.Forms.UnhandledExceptionMode mode, bool threadScope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetUnhandledExceptionMode (mode As UnhandledExceptionMode, threadScope As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode mode, bool threadScope);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.UnhandledExceptionMode" />
        <Parameter Name="threadScope" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="da226-463">一个 <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> 值，描述在引发未捕获的异常时应用程序的行为方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-463">An <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> value describing how the application should behave if an exception is thrown without being caught.</span>
          </span>
        </param>
        <param name="threadScope">
          <span data-ttu-id="da226-464">如果设置线程异常模式，为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-464">
              <see langword="true" /> to set the thread exception mode; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da226-465">指示应用程序如何响应未经处理的异常，同时可选择应用特定于线程的行为。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-465">Instructs the application how to respond to unhandled exceptions, optionally applying thread-specific behavior.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-466">它通常不是可行捕捉所有由 Windows 窗体引发的异常。</span><span class="sxs-lookup"><span data-stu-id="da226-466">It is often not feasible to catch all of the exceptions thrown by Windows Forms.</span></span> <span data-ttu-id="da226-467">使用此方法，你可以指示是否应捕获所有未经处理由 Windows 窗体组件引发的异常并继续运行，或它是否应将它们公开给用户并暂停执行你的应用程序。</span><span class="sxs-lookup"><span data-stu-id="da226-467">Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.</span></span>  
  
 <span data-ttu-id="da226-468">调用<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>实例化你的应用程序使用的主窗体之前<xref:System.Windows.Forms.Application.Run%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="da226-468">Call <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> before you instantiate the main form of your application using the <xref:System.Windows.Forms.Application.Run%2A> method.</span></span>  
  
 <span data-ttu-id="da226-469">当`threadScope`是`true`，设置线程异常模式。</span><span class="sxs-lookup"><span data-stu-id="da226-469">When `threadScope` is `true`, the thread exception mode is set.</span></span> <span data-ttu-id="da226-470">如果此线程异常模式重写应用程序异常模式`mode`未设置为<xref:System.Windows.Forms.UnhandledExceptionMode.Automatic>。</span><span class="sxs-lookup"><span data-stu-id="da226-470">The thread exception mode overrides the application exception mode if `mode` is not set to <xref:System.Windows.Forms.UnhandledExceptionMode.Automatic>.</span></span>  
  
 <span data-ttu-id="da226-471">当`threadScope`是`false`，应用程序异常模式设置。</span><span class="sxs-lookup"><span data-stu-id="da226-471">When `threadScope` is `false`, the application exception mode is set.</span></span> <span data-ttu-id="da226-472">应用程序异常模式适用于具有的所有线程<xref:System.Windows.Forms.UnhandledExceptionMode.Automatic>模式。</span><span class="sxs-lookup"><span data-stu-id="da226-472">The application exception mode is used for all threads that have the <xref:System.Windows.Forms.UnhandledExceptionMode.Automatic> mode.</span></span> <span data-ttu-id="da226-473">设置应用程序异常模式不会影响当前线程的设置。</span><span class="sxs-lookup"><span data-stu-id="da226-473">Setting the application exception mode does not affect the setting of the current thread.</span></span>  
  
 <span data-ttu-id="da226-474">若要捕获不创建的线程中出现的异常和由 Windows 窗体，拥有使用<xref:System.AppDomain.UnhandledException>事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-474">To catch exceptions that occur in threads not created and owned by Windows Forms, use the <xref:System.AppDomain.UnhandledException> event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-475">下面的代码示例设置 Windows 窗体线程和其他线程发生的异常的异常发生的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-475">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="da226-476">它将设置<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>以便所有异常都处理应用程序，而不考虑应用程序的用户配置文件中的设置。</span><span class="sxs-lookup"><span data-stu-id="da226-476">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="da226-477">它使用<xref:System.Windows.Forms.Application.ThreadException>事件来处理 UI 线程异常和<xref:System.AppDomain.UnhandledException>事件来处理非 UI 线程异常。</span><span class="sxs-lookup"><span data-stu-id="da226-477">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="da226-478">由于<xref:System.AppDomain.UnhandledException>无法防止应用程序终止，则只需将错误记录中在终止之前应用程序事件日志。</span><span class="sxs-lookup"><span data-stu-id="da226-478">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="da226-479">此示例假定你已经定义了两个<xref:System.Windows.Forms.Button>控件，`button1`和`button2`，在你<xref:System.Windows.Forms.Form>类。</span><span class="sxs-lookup"><span data-stu-id="da226-479">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="da226-480">在应用程序创建其第一个窗口后，您将无法设置异常模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-480">You cannot set the exception mode after the application has created its first window.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="StartupPath">
      <MemberSignature Language="C#" Value="public static string StartupPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string StartupPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.StartupPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property StartupPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ StartupPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-481">获取启动了应用程序的可执行文件的路径，不包括可执行文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-481">Gets the path for the executable file that started the application, not including the executable name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-482">启动了应用程序的可执行文件的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-482">The path for the executable file that started the application.</span>
          </span>
          <span data-ttu-id="da226-483">取决于是否使用 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 部署 Windows 窗体应用程序，此路径将会不同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-483">This path will be different depending on whether the Windows Forms application is deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span>
          </span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]<span data-ttu-id="da226-484"> 应用程序存储在每个用户应用程序缓存中 C:\Documents and Settings\\*用户名*目录。</span><span class="sxs-lookup"><span data-stu-id="da226-484"> applications are stored in a per-user application cache in the C:\Documents and Settings\\*username* directory.</span></span><span data-ttu-id="da226-485">有关详细信息，请参阅[访问本地数据和 ClickOnce 应用程序中的远程数据](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)。</span><span class="sxs-lookup"><span data-stu-id="da226-485">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da226-486">下面的代码示例获取此属性，并在文本框中显示其值。</span><span class="sxs-lookup"><span data-stu-id="da226-486">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="da226-487">该示例需要`textBox1`已放在窗体上。</span><span class="sxs-lookup"><span data-stu-id="da226-487">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.StartupPath Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.StartupPath Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.StartupPath Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.StartupPath Example/CS/source.cs#1)]
 [!code-vb[Classic Application.StartupPath Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.StartupPath Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="da226-488">用于获取路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-488">for getting the path.</span>
          </span>
          <span data-ttu-id="da226-489">关联的枚举： <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-489">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ThreadException">
      <MemberSignature Language="C#" Value="public static event System.Threading.ThreadExceptionEventHandler ThreadException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Threading.ThreadExceptionEventHandler ThreadException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.ThreadException" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ThreadException As ThreadExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Threading::ThreadExceptionEventHandler ^ ThreadException;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-490">在发生未捕获线程异常时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-490">Occurs when an untrapped thread exception is thrown.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-491">此事件允许 Windows 窗体应用程序与 Windows 窗体线程中发生的句柄否则为未经处理的异常。</span><span class="sxs-lookup"><span data-stu-id="da226-491">This event allows your Windows Forms application to handle otherwise unhandled exceptions that occur in Windows Forms threads.</span></span> <span data-ttu-id="da226-492">附加到事件处理程序<xref:System.Windows.Forms.Application.ThreadException>事件来处理这些例外情况，这将使你的应用程序处于未知状态。</span><span class="sxs-lookup"><span data-stu-id="da226-492">Attach your event handlers to the <xref:System.Windows.Forms.Application.ThreadException> event to deal with these exceptions, which will leave your application in an unknown state.</span></span> <span data-ttu-id="da226-493">如果可能，应由结构化异常处理块处理异常。</span><span class="sxs-lookup"><span data-stu-id="da226-493">Where possible, exceptions should be handled by a structured exception handling block.</span></span>  
  
 <span data-ttu-id="da226-494">你可以更改是否通过设置情况下，使用 Windows 窗体线程的未处理异常的此回调<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>。</span><span class="sxs-lookup"><span data-stu-id="da226-494">You can change whether this callback is used for unhandled Windows Forms thread exceptions by setting <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>.</span></span> <span data-ttu-id="da226-495">若要捕获不创建的线程中出现的异常和由 Windows 窗体，拥有使用<xref:System.AppDomain.UnhandledException>事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-495">To catch exceptions that occur in threads not created and owned by Windows Forms, use the <xref:System.AppDomain.UnhandledException> event handler.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="da226-496">若要确保此事件没有激活会丢失，必须附加处理程序，然后才能调用<xref:System.Windows.Application.Run%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="da226-496">To guarantee that no activations of this event are missed, you must attach a handler before you call <xref:System.Windows.Application.Run%2A?displayProperty=nameWithType>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="da226-497">由于这是一个静态事件，则必须在你的应用程序将被释放，或会导致内存泄漏时分离事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-497">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-498">下面的代码示例设置 Windows 窗体线程和其他线程发生的异常的异常发生的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-498">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="da226-499">它将设置<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>以便所有异常都处理应用程序，而不考虑应用程序的用户配置文件中的设置。</span><span class="sxs-lookup"><span data-stu-id="da226-499">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="da226-500">它使用<xref:System.Windows.Forms.Application.ThreadException>事件来处理 UI 线程异常和<xref:System.AppDomain.UnhandledException>事件来处理非 UI 线程异常。</span><span class="sxs-lookup"><span data-stu-id="da226-500">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="da226-501">由于<xref:System.AppDomain.UnhandledException>无法防止应用程序终止，则只需将错误记录中在终止之前应用程序事件日志。</span><span class="sxs-lookup"><span data-stu-id="da226-501">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="da226-502">此示例假定你已经定义了两个<xref:System.Windows.Forms.Button>控件，`button1`和`button2`，在你<xref:System.Windows.Forms.Form>类。</span><span class="sxs-lookup"><span data-stu-id="da226-502">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="da226-503">直接调用方调用非托管的代码时此事件添加处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-503">for the immediate caller to call unmanaged code when adding a handler to this event.</span>
          </span>
          <span data-ttu-id="da226-504">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-504">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ThreadExit">
      <MemberSignature Language="C#" Value="public static event EventHandler ThreadExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ThreadExit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.ThreadExit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ThreadExit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ ThreadExit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-505">在某线程即将关闭时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-505">Occurs when a thread is about to shut down.</span>
          </span>
          <span data-ttu-id="da226-506">当应用程序的主线程即将关闭时，首先引发该事件，随后是 <see cref="E:System.Windows.Forms.Application.ApplicationExit" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-506">When the main thread for an application is about to be shut down, this event is raised first, followed by an <see cref="E:System.Windows.Forms.Application.ApplicationExit" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-507">必须将附加到的事件处理程序<xref:System.Windows.Forms.Application.ThreadExit>事件以执行任何未处理的、 所需任务的线程停止运行前。</span><span class="sxs-lookup"><span data-stu-id="da226-507">You must attach the event handlers to the <xref:System.Windows.Forms.Application.ThreadExit> event to perform any unhandled, required tasks before the thread stops running.</span></span> <span data-ttu-id="da226-508">关闭打开的此线程或释放的垃圾回收器未回收的对象文件。</span><span class="sxs-lookup"><span data-stu-id="da226-508">Close files opened by this thread, or dispose of objects that the garbage collector did not reclaim.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="da226-509">由于这是一个静态事件，则必须在你的应用程序将被释放，或会导致内存泄漏时分离事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-509">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-510">下面的代码示例演示如何使用此成员。</span><span class="sxs-lookup"><span data-stu-id="da226-510">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="da226-511">在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.Application.ThreadExit>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-511">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.ThreadExit> event.</span></span> <span data-ttu-id="da226-512">此报告可帮助您了解当发生事件，并可以帮助您进行调试。</span><span class="sxs-lookup"><span data-stu-id="da226-512">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="da226-513">若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="da226-513">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="da226-514">要运行此代码示例，将其粘贴到 Windows 窗体，并确保与事件处理程序<xref:System.Windows.Forms.Application.ThreadExit>事件。</span><span class="sxs-lookup"><span data-stu-id="da226-514">To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the <xref:System.Windows.Forms.Application.ThreadExit> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#6)]
 [!code-vb[System.Windows.Forms.EventExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterMessageLoop">
      <MemberSignature Language="C#" Value="public static void UnregisterMessageLoop ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterMessageLoop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.UnregisterMessageLoop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterMessageLoop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterMessageLoop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da226-515">注销使用 <see cref="M:System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)" /> 发出的消息循环回调。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-515">Unregisters the message loop callback made with <see cref="M:System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserAppDataPath">
      <MemberSignature Language="C#" Value="public static string UserAppDataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string UserAppDataPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UserAppDataPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserAppDataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ UserAppDataPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-516">获取用户的应用程序数据的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-516">Gets the path for the application data of a user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-517">用户的应用程序数据的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-517">The path for the application data of a user.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-518">如果路径不存在，将创建一个采用以下格式：</span><span class="sxs-lookup"><span data-stu-id="da226-518">If a path does not exist, one is created in the following format:</span></span>  
  
 <span data-ttu-id="da226-519">*基路径*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="da226-519">*Base Path*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>  
  
 <span data-ttu-id="da226-520">此路径中存储的数据是启用的漫游用户配置文件的一部分。</span><span class="sxs-lookup"><span data-stu-id="da226-520">Data stored in this path is part of user profile that is enabled for roaming.</span></span> <span data-ttu-id="da226-521">漫游用户在网络中的多个计算机上工作。</span><span class="sxs-lookup"><span data-stu-id="da226-521">A roaming user works on more than one computer in a network.</span></span> <span data-ttu-id="da226-522">漫游用户的用户配置文件保留在网络上的服务器上，并在用户登录时加载到系统。</span><span class="sxs-lookup"><span data-stu-id="da226-522">The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on.</span></span> <span data-ttu-id="da226-523">用户配置文件才会考虑让漫游时，操作系统必须支持漫游配置文件，并且必须启用。</span><span class="sxs-lookup"><span data-stu-id="da226-523">For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.</span></span>  
  
 <span data-ttu-id="da226-524">典型的基路径是 C:\Documents and Settings\\*用户名*\Application 数据。</span><span class="sxs-lookup"><span data-stu-id="da226-524">A typical base path is C:\Documents and Settings\\*username*\Application Data.</span></span> <span data-ttu-id="da226-525">此路径将会不同，但是，如果通过使用部署 Windows 窗体应用程序[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="da226-525">This path will be different, however, if the Windows Forms application is deployed by using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]<span data-ttu-id="da226-526"> 创建其自己独立于所有其他应用程序的应用程序数据目录。</span><span class="sxs-lookup"><span data-stu-id="da226-526"> creates its own application data directory that is isolated from all other applications.</span></span> <span data-ttu-id="da226-527">有关详细信息，请参阅[访问本地数据和 ClickOnce 应用程序中的远程数据](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)。</span><span class="sxs-lookup"><span data-stu-id="da226-527">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-528">下面的代码示例显示两个窗体，并退出应用程序，这两个窗体关闭时。</span><span class="sxs-lookup"><span data-stu-id="da226-528">The following code example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="da226-529">当应用程序启动和退出时，将记住每个窗体的位置。</span><span class="sxs-lookup"><span data-stu-id="da226-529">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="da226-530">此示例演示如何使用<xref:System.Windows.Forms.Application.UserAppDataPath%2A>属性来存储用户的应用程序数据。</span><span class="sxs-lookup"><span data-stu-id="da226-530">This example demonstrates using the <xref:System.Windows.Forms.Application.UserAppDataPath%2A> property to store application data for the user.</span></span>  
  
 <span data-ttu-id="da226-531">类`MyApplicationContext`继承自<xref:System.Windows.Forms.ApplicationContext>每个窗体已关闭，并在它们都时退出当前线程时保持跟踪。</span><span class="sxs-lookup"><span data-stu-id="da226-531">The class `MyApplicationContext` inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="da226-532">该类存储了用户的每个窗体的位置。</span><span class="sxs-lookup"><span data-stu-id="da226-532">The class stores the positions of each form for the user.</span></span> <span data-ttu-id="da226-533">窗体位置数据存储在文件标题为`Appdata.txt`，它在由位置创建<xref:System.Windows.Forms.Application.UserAppDataPath%2A>。</span><span class="sxs-lookup"><span data-stu-id="da226-533">The form position data is stored in a file titled `Appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="da226-534">`Main`方法调用`Application.Run(context)`启动应用程序提供<xref:System.Windows.Forms.ApplicationContext>。</span><span class="sxs-lookup"><span data-stu-id="da226-534">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="da226-535">此代码摘自中所示的示例<xref:System.Windows.Forms.ApplicationContext>类概述。</span><span class="sxs-lookup"><span data-stu-id="da226-535">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.ApplicationContext> class overview.</span></span> <span data-ttu-id="da226-536">为了简洁起见，不显示某些代码。</span><span class="sxs-lookup"><span data-stu-id="da226-536">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="da226-537">请参阅<xref:System.Windows.Forms.ApplicationContext>为完整的代码清单。</span><span class="sxs-lookup"><span data-stu-id="da226-537">See <xref:System.Windows.Forms.ApplicationContext> for the whole code listing.</span></span>  
  
 [!code-cpp[Application#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#5)]
 [!code-csharp[Application#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#5)]
 [!code-vb[Application#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.UserAppDataRegistry" />
      </Docs>
    </Member>
    <Member MemberName="UserAppDataRegistry">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.RegistryKey UserAppDataRegistry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Win32.RegistryKey UserAppDataRegistry" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UserAppDataRegistry" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserAppDataRegistry As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Win32::RegistryKey ^ UserAppDataRegistry { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-538">获取用户的应用程序数据的注册表项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-538">Gets the registry key for the application data of a user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-539">一个 <see cref="T:Microsoft.Win32.RegistryKey" />，它表示特定于用户的应用程序数据的注册表项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-539">A <see cref="T:Microsoft.Win32.RegistryKey" /> representing the registry key for the application data specific to the user.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-540">如果不存在该键，则将它创建采用以下格式：</span><span class="sxs-lookup"><span data-stu-id="da226-540">If the key does not exist, it is created in the following format:</span></span>  
  
 <span data-ttu-id="da226-541">CurrentUser\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="da226-541">CurrentUser\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>   
  
 <span data-ttu-id="da226-542">数据存储在此项是启用的漫游用户配置文件的一部分。</span><span class="sxs-lookup"><span data-stu-id="da226-542">Data stored in this key is part of user profile that is enabled for roaming.</span></span> <span data-ttu-id="da226-543">漫游用户在网络中的多个计算机上工作。</span><span class="sxs-lookup"><span data-stu-id="da226-543">A roaming user works on more than one computer in a network.</span></span> <span data-ttu-id="da226-544">漫游用户的用户配置文件保留在网络上的服务器上，并在用户登录时加载到系统。</span><span class="sxs-lookup"><span data-stu-id="da226-544">The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on.</span></span> <span data-ttu-id="da226-545">用户配置文件才会考虑让漫游时，操作系统必须支持漫游配置文件，并且必须启用。</span><span class="sxs-lookup"><span data-stu-id="da226-545">For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.SystemInformation" />
      </Docs>
    </Member>
    <Member MemberName="UseWaitCursor">
      <MemberSignature Language="C#" Value="public static bool UseWaitCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseWaitCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UseWaitCursor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property UseWaitCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool UseWaitCursor { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-546">获取或设置是否对应用程序的所有打开窗体使用等待光标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-546">Gets or sets whether the wait cursor is used for all open forms of the application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-547">如果等待光标用于所有打开的窗体，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-547">
              <see langword="true" /> is the wait cursor is used for all open forms; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-548">当此属性设置为`true`、<xref:System.Windows.Forms.Control.UseWaitCursor%2A>的应用程序中的所有打开窗体的属性将设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="da226-548">When this property is set to `true`, the <xref:System.Windows.Forms.Control.UseWaitCursor%2A> property of all open forms in the application will be set to `true`.</span></span> <span data-ttu-id="da226-549">此属性将设置在所有窗体上之前，不会返回此调用。</span><span class="sxs-lookup"><span data-stu-id="da226-549">This call will not return until this property has been set on all forms.</span></span> <span data-ttu-id="da226-550">当你有一个长时间运行的操作，并想要在所有应用程序窗体中指示该操作仍在处理时，请使用此属性。</span><span class="sxs-lookup"><span data-stu-id="da226-550">Use this property when you have a long-running operation, and want to indicate in all application forms that the operation is still processing.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStyleState">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.VisualStyles.VisualStyleState VisualStyleState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.VisualStyles.VisualStyleState VisualStyleState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.VisualStyleState" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property VisualStyleState As VisualStyleState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::VisualStyles::VisualStyleState VisualStyleState { System::Windows::Forms::VisualStyles::VisualStyleState get(); void set(System::Windows::Forms::VisualStyles::VisualStyleState value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.VisualStyles.VisualStyleState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da226-551">获取指定可视样式如何应用于应用程序窗口的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-551">Gets a value that specifies how visual styles are applied to application windows.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da226-552">
            <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleState" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="da226-552">A bitwise combination of the <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleState" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da226-553">这<xref:System.Windows.Forms.Application.VisualStyleState%2A>属性确定在客户端区域或应用程序窗口非工作区中是否启用了可视样式。</span><span class="sxs-lookup"><span data-stu-id="da226-553">This <xref:System.Windows.Forms.Application.VisualStyleState%2A> property determines whether visual styles are enabled in client areas or nonclient areas of application windows.</span></span> <span data-ttu-id="da226-554">通常情况下，应在主窗体的构造函数中设置此属性或<xref:System.Windows.Forms.Form.Load>事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="da226-554">Generally, this property should be set within the main form's constructor or <xref:System.Windows.Forms.Form.Load> event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da226-555">下面的代码示例设置<xref:System.Windows.Forms.Application.VisualStyleState%2A>属性之一<xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType>值内<xref:System.Windows.Forms.Control.Click>事件处理程序<xref:System.Windows.Forms.Button>控件。</span><span class="sxs-lookup"><span data-stu-id="da226-555">The following code example sets the <xref:System.Windows.Forms.Application.VisualStyleState%2A> property to one of the <xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType> values within the <xref:System.Windows.Forms.Control.Click> event handler for a <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="da226-556">此代码示例摘自更大的示例为提供<xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="da226-556">This code example is part of a larger example provided for the <xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType> enumeration.</span></span>  
  
 [!code-cpp[System.Windows.Forms.VisualStyles.VisualStyleState#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.VisualStyles.VisualStyleState/cpp/visualstylestate.cpp#10)]
 [!code-csharp[System.Windows.Forms.VisualStyles.VisualStyleState#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.VisualStyles.VisualStyleState/CS/visualstylestate.cs#10)]
 [!code-vb[System.Windows.Forms.VisualStyles.VisualStyleState#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.VisualStyles.VisualStyleState/VB/visualstylestate.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>