<Type Name="MaskedTextBox" FullName="System.Windows.Forms.MaskedTextBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24e38e05d0c7c80d1a179add901f5793853879d8" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32089873" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MaskedTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaskedTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MaskedTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class MaskedTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MaskedTextBox : System::Windows::Forms::TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("MaskInputRejected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Mask")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使用掩码区分正确的和不正确的用户输入。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox>类是一个增强型<xref:System.Windows.Forms.TextBox>支持的声明性语法用于接受或拒绝用户输入的控件。 使用<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>属性，你可以指定以下输入而无需编写任何自定义验证逻辑应用程序中：  
  
-   必需的输入的字符。  
  
-   可选的输入的字符。  
  
-   需掩码; 中的给定位置的输入类型例如，一个数字或字母或字母数字字符。  
  
-   屏蔽文本，显示或字符应直接在<xref:System.Windows.Forms.MaskedTextBox>; 例如，在该电话号码或在价格的货币符号的连字符 （-）。  
  
-   对输入字符; 特殊处理例如，若要转换为大写的字母字符。  
  
 当<xref:System.Windows.Forms.MaskedTextBox>控件显示在运行时，它表示为一系列的提示字符和可选的原义字符的掩码。 表示的必需或可选的输入，每个可编辑掩码位置还会显示一个提示字符。 例如，数字符号 （#） 通常用于以占位符形式的数字字符输入。 你可以使用<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>属性指定自定义的提示字符。 <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A>属性确定用户能否看到的提示字符当控件失去输入焦点。  
  
 如在掩蔽的文本框中输入的用户类型，有效的输入的字符将按顺序其各自的提示字符。 如果用户键入无效的输入的字符，没有可以代替会发生，但如果改为发出播放提示音<xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A>属性设置为`true`，和<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>引发事件。 你可以通过处理此事件来提供您自己自定义错误的逻辑。  
  
 原义字符在当前的插入点时，用户将具有多个选项：  
  
-   如果类型提示字符以外的字符，文本将自动跳过，并输入的字符将应用到下一个可编辑位置表示下一步的提示字符。  
  
-   如果提示字符为类型化和<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>属性为 true 时，输入将覆盖的提示字符和插入点将被移动到掩码中的下一个位置。  
  
-   由于始终是这种情况，可以使用箭头键导航到上一或下一个位置。  
  
 你可以使用<xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A>属性以验证是否用户是否输入了所有必需的输入。 <xref:System.Windows.Forms.MaskedTextBox.Text%2A>属性将始终检索按照掩码设置格式的用户的输入和<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>属性。  
  
 <xref:System.Windows.Forms.MaskedTextBox>控件实际上将推迟到的所有掩码处理<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>指定类<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>属性。 此标准的提供程序支持除外代理项的所有 Unicode 字符和垂直组合字符;但是，<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>属性可以用于限制输入连接到字符集 a 到 z、 A 到 Z 和 0-9。  
  
 掩码并不一定能保证用户的输入将表示对于给定的类型; 有效的值例如，-9 无法输入的年龄的年数。 你可以验证用户的输入通过分配到的值的类型的实例表示有效的值<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>属性。 你可以检测用户是否删除焦点从<xref:System.Windows.Forms.MaskedTextBox>时监视包含无效值<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件。 如果类型验证成功，表示的值的对象将通过<xref:System.Windows.Forms.TypeValidationEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.TypeValidationEventArgs>参数。  
  
 与<xref:System.Windows.Forms.TextBox>控件，不能使用几个常见的键盘快捷方式<xref:System.Windows.Forms.MaskedTextBox>。 具体而言，CTRL-R （右对齐文本），CTRL-L （左对齐文本），并且 CTRL-L （center 文本） 产生任何影响。  
  
## <a name="compatibility-with-visual-basic-60"></a>使用 Visual Basic 6.0 的兼容性  
 <xref:System.Windows.Forms.MaskedTextBox> 旨在保留大多数 Visual Basic 6.0 中的 Masked Edit 控件功能。 下表列出 Masked Edit 控件上的公共属性并对它们的等效项事件类上<xref:System.Windows.Forms.MaskedTextBox>。  
  
|掩码的编辑控件 (Visual Basic 6.0) 属性|等效 MaskedTextBox ([!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]) 属性|  
|-------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|  
|`AllowPrompt` 属性|<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>|  
|`AutoTab` 属性|无|  
|`ClipMode` 属性|<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>|  
|`ClipText` 属性|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (当<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>设置为<xref:System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals>)|  
|`Format` 属性|无|  
|`FormattedText` 属性|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (当<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>设置为<xref:System.Windows.Forms.MaskFormat.IncludePromptAndLiterals>)|  
|`Mask` 属性|<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>|  
|`PromptChar` 属性|<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>|  
|`PromptInclude` 属性|<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>|  
|`ValidationError`事件|<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>|  
  
> [!CAUTION]
>  <xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置或撤消的功能。 但是，这些功能与关联的成员时已保留了与兼容<xref:System.Windows.Forms.TextBoxBase>基类，其实现不执行任何操作。  
  
   
  
## Examples  
 下面的代码示例初始化<xref:System.Windows.Forms.MaskedTextBox>接受日期，并使用这两个<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>和<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>无效输入向用户发出警报的事件。  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
    <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>使用默认值初始化 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值<xref:System.Windows.Forms.MaskedTextBox.%23ctor>构造函数集<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>为空掩码，由字符串"<>"表示的属性。 Null 掩码将接受作为输入的字符的任意组合。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (System.ComponentModel.MaskedTextProvider maskedTextProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MaskedTextProvider maskedTextProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::ComponentModel::MaskedTextProvider ^ maskedTextProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maskedTextProvider" Type="System.ComponentModel.MaskedTextProvider" />
      </Parameters>
      <Docs>
        <param name="maskedTextProvider">从 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类派生的一个自定义掩码语言提供程序。</param>
        <summary>使用指定的自定义掩码语言提供程序初始化 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maskedTextProvider`参数定义使用的屏蔽语言<xref:System.Windows.Forms.MaskedTextBox>。 它负责分析掩码，并确定用户输入是否符合当前的掩码位置。 可以派生新类从<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>定义您自己的自定义屏蔽语言，并使用<xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29>构造函数替换标准<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>。  
  
 如果你想要使用默认值屏蔽语言并提供输入的掩码，你不需要使用此构造函数。 相反，你可以使用<xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29>构造函数或使用默认构造函数将<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="maskedTextProvider" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mask As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::String ^ mask);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">一个 <see cref="T:System.String" />，表示输入掩码。 <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> 属性的初始值。</param>
        <summary>使用指定的输入掩码初始化 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29>构造函数使用标准<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>输入`mask`来分析用户输入并<xref:System.Windows.Forms.MaskedTextBox>。  
  
 如果将分配到一个新的掩码<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>属性，它将重写此构造函数设置的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mask" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定将如何针对多行配置处理 Tab 键。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此属性。</summary>
        <value>
          在所有情况下均为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A>属性继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置，不支持此属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTabChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AcceptsTabChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AcceptsTabChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AcceptsTabChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AcceptsTabChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" /> 属性的值更改后发生。 此事件不是由 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 引发的。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged>事件继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置，不支持此事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPromptAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPromptAsInput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 是否可以作为有效数据由用户输入。</summary>
        <value>
          如果用户可以向控件中输入提示字符，该值为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 即使<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>是`true`，才能被接受的提示字符必须是有效的掩码中的当前位置。 例如，如果<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>是"*"，并且当前掩码中的位置需要用户输入一个数字，输入一个星号 (\*) 将失败并且会导致<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件发生。  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>属性优先于<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property AsciiOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsciiOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控件是否接受 ASCII 字符集以外的字符。</summary>
        <value>
          如果仅接受 ASCII，该值为 <see langword="true" />；如果 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控件可以接受任意 Unicode 字符，则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`true`，<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>限制用户输入的字符 a-z 和 A-Z。 不允许使用 ASCII 控制字符。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      </Docs>
    </Member>
    <Member MemberName="BeepOnError">
      <MemberSignature Language="C#" Value="public bool BeepOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BeepOnError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property BeepOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BeepOnError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示掩码文本框控件是否每当用户键入了它拒绝的字符时都发出系统提示音。</summary>
        <value>
          如果 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控件应当在输入无效时发出提示音，该值为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>如果仍将发生事件<xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A>属性设置为`true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUndo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanUndo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanUndo { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示用户能否撤消上一个操作。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此属性。</summary>
        <value>
          在所有情况下均为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.CanUndo%2A>属性继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>不支持撤消功能，此属性始终是否具有值`false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="ClearUndo">
      <MemberSignature Language="C#" Value="public void ClearUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearUndo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearUndo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从该文本框的撤消缓冲区中清除关于最近操作的信息。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ClearUndo%2A>方法继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，<xref:System.Windows.Forms.MaskedTextBox>不支持撤消功能。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为该控件创建句柄。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取创建控件句柄时所需要的创建参数。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.CreateParams" />，它表示创建控件时所需的信息。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与掩码文本框关联的区域性信息。</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" />，表示 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 支持的区域性。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.Forms.MaskedTextBox.Culture" /> 设置为 <see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="CutCopyMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat CutCopyMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat CutCopyMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property CutCopyMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat CutCopyMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值决定是否将原义字符和提示字符复制到剪贴板中。</summary>
        <value>
          <see cref="T:System.Windows.Forms.MaskFormat" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>属性确定文本，在中的选择<xref:System.Windows.Forms.MaskedTextBox>控制，如果它是复制到剪贴板，或通过检索解释<xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>属性。 具体地说，它决定原义字符和 / 或提示字符是否包括访问所选的文本时。 如果提示字符被排除，它们将转换为复制的字符串中的空格。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>属性有用途类似如何与<xref:System.Windows.Forms.MaskedTextBox.Text%2A>解释属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">用无效的 <see cref="T:System.Windows.Forms.MaskFormat" /> 值设置的属性。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在执行类型验证时使用的 <see cref="T:System.IFormatProvider" />。</summary>
        <value>一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> 确定哪些符号时，用于货币、 日期和其他特定于区域性的掩码占位符类型验证发生，并且该控件具有非 null<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public override char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">查找距离最近的字符的位置。</param>
        <summary>检索控件内距离指定位置最近的字符。</summary>
        <returns>位于指定位置的字符。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">要搜索的位置。</param>
        <summary>检索距离指定位置最近的字符索引。</summary>
        <returns>位于指定位置的从零开始的字符索引。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexFromLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexFromLine (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexFromLine(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexFromLine (lineNumber As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexFromLine(int lineNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">未使用此参数。</param>
        <summary>检索给定行第一个字符的索引。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此方法。</summary>
        <returns>此方法将始终返回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine%2A>方法继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置，不支持此方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexOfCurrentLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexOfCurrentLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexOfCurrentLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexOfCurrentLine () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexOfCurrentLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索当前行的第一个字符的索引。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此方法。</summary>
        <returns>此方法将始终返回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine%2A>方法继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置，不支持此方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">未使用此参数。</param>
        <summary>从控件文本内的指定字符位置检索行号。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此方法。</summary>
        <returns>此方法将始终返回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex%2A>方法继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置，不支持此方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要检索其位置的字符索引。</param>
        <summary>检索控件内指定字符索引处的位置。</summary>
        <returns>控件的矩形工作区内指定字符的位置。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HidePromptOnLeave">
      <MemberSignature Language="C#" Value="public bool HidePromptOnLeave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidePromptOnLeave" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberSignature Language="VB.NET" Value="Public Property HidePromptOnLeave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HidePromptOnLeave { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当掩码文本框失去焦点时，输入掩码中的提示字符是否隐藏。</summary>
        <value>
          如果当 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 没有焦点时 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 隐藏，该值为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="InsertKeyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.InsertKeyMode InsertKeyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.InsertKeyMode InsertKeyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertKeyMode As InsertKeyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::InsertKeyMode InsertKeyMode { System::Windows::Forms::InsertKeyMode get(); void set(System::Windows::Forms::InsertKeyMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InsertKeyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置掩码文本框控件的文本插入模式。</summary>
        <value>指示当前插入模式的 <see cref="T:System.Windows.Forms.InsertKeyMode" /> 值。 默认值为 <see cref="F:System.Windows.Forms.InsertKeyMode.Default" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>属性控制的字符插入行为<xref:System.Windows.Forms.MaskedTextBox>控件。 此属性的状态由定义<xref:System.Windows.Forms.InsertKeyMode>枚举，它可以是始终在、 始终关闭，或者设置为依据的用户的键盘设置。 此属性取代键盘的插入模式。 例如，如果键盘设置若要覆盖，但<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>设置为`Insert`、<xref:System.Windows.Forms.MaskedTextBox>将在插入模式下操作。 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>属性将访问的 true 插入模式<xref:System.Windows.Forms.MaskedTextBox>。  
  
 如果更改<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>的值更改<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>，<xref:System.Windows.Forms.MaskedTextBox>将引发<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>事件。  
  
 如果未应用蒙板的设置，则此属性无效。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">设置此属性时提供了一个无效的 <see cref="T:System.Windows.Forms.InsertKeyMode" /> 值。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> 值之一。</param>
        <summary>确定指定的键是输入键还是需要预处理的特殊键。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteMode">
      <MemberSignature Language="C#" Value="public bool IsOverwriteMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOverwriteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOverwriteMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOverwriteMode { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指定新的用户输入是否覆盖现有输入。</summary>
        <value>
          如果当用户输入新字符时 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 将覆盖现有字符，该值为 <see langword="true" />；如果 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 将前移现有字符，该值为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> 将考虑在内的值<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>属性和用户的键盘的状态。 如果<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>设置为<xref:System.Windows.Forms.InsertKeyMode.Insert>或<xref:System.Windows.Forms.InsertKeyMode.Overwrite>，<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>将返回`false`或`true`分别。 如果<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>设置为<xref:System.Windows.Forms.InsertKeyMode.Default>，它将返回插入密钥的状态。  
  
 当<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>是`false`，<xref:System.Windows.Forms.MaskedTextBox>将拒绝为无效输入将导致违反了掩码中的任意位置的任何字符。 具体地说，如果插入一个字符可能导致要移至其中它将不能掩码位置的字符将拒绝插入该字符。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler IsOverwriteModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler IsOverwriteModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsOverwriteModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ IsOverwriteModeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在插入模式更改后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>后的值，将引发事件<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>属性更改。  
  
 此事件需要正确地将数据绑定到<xref:System.Windows.Forms.MaskedTextBox>控件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.MaskedTextBox>名为`MaskedTextBox1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#484](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#484)]
 [!code-vb[System.Windows.Forms.EventExamples#484](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#484)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public string[] Lines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Lines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberSignature Language="VB.NET" Value="Public Property Lines As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Lines { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置多行配置中的文本行。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此属性。</summary>
        <value>只包含单行的 <see cref="T:System.String" /> 类型数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Lines%2A>属性继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置，不支持此属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberSignature Language="VB.NET" Value="Public Property Mask As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Mask { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置运行时使用的输入掩码。</summary>
        <value>一个 <see cref="T:System.String" />，表示当前掩码。 默认值是允许任何输入的空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 为默认属性<xref:System.Windows.Forms.MaskedTextBox>类。  
  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 必须是一个字符串组成一个或多个屏蔽元素中下, 表中所示。 使用的屏蔽语言<xref:System.Windows.Forms.MaskedTextBox>定义由其关联<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>。 标准提供程序指定基于使用的 Visual Basic 6.0 中 Masked Edit 控件的屏蔽语言，并且应该是用户从该平台迁移到非常熟悉。  
  
|屏蔽元素|描述|  
|---------------------|-----------------|  
|0|数字，所需。 此元素将接受任何单个数字 0 到 9 之间。|  
|9|数字或空格，可选。|  
|#|数字或空格，可选。 如果此位置为空掩码中，它将呈现为一个空格<xref:System.Windows.Forms.MaskedTextBox.Text%2A>属性。 加号 （+） 和减号 （-） 允许符号。|  
|L|字母，必选。 将输入限制为 ASCII 字母 a-z 和 A-Z。 此掩码元素等效于 [zA-A-Z] 正则表达式中。|  
|?|字母，可选。 将输入限制为 ASCII 字母 a-z 和 A-Z。 此掩码元素等效于 [zA-A-Z]？ 在正则表达式。|  
|&|字符、 要求。 如果<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>属性设置为 true，此元素的行为与"L"元素类似。|  
|C|字符，可选。 任何非控制字符。 如果<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>属性设置为`true`，此元素的行为类似"？"元素。|  
|包含当前请求的 URL 的|字母数字、 要求。 如果<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>属性设置为`true`，它将接受的唯一字符是 ASCII 字母 a-z 和 A-Z。 此掩码元素的行为与"a"元素类似。|  
|a|字母数字，可选。 如果<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>属性设置为`true`，它将接受的唯一字符是 ASCII 字母 a-z 和 A-Z。 此掩码元素的行为与"A"元素类似。|  
|.|小数点占位符。 使用的实际显示字符将是适合的格式提供程序，小数点符号，由该控件的<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>属性。|  
|,|千位占位符。 使用的实际显示字符将数千个适合于格式提供程序，由该控件的占位符<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>属性。|  
|:|时间分隔符。 确定由该控件的使用的实际显示字符将是适合的格式提供程序，时间符号<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>属性。|  
|/|日期分隔符。 使用的实际显示字符将是适合于格式提供程序，日期符号，由该控件的<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>属性。|  
|$|货币符号。 显示的实际字符由控件的将是适合于格式提供程序的货币符号<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>属性。|  
|\<|转换为小写。 将转换为小写后面的所有字符。|  
|>|转换为大写。 将转换为大写后面的所有字符。|  
|&#124;|禁用以前 shift 向上或向下移动。|  
|\|转义。 掩码字符，将其转换为原义进行转义。 "\\\\"是反斜杠的转义序列。|  
|所有其他字符|文本。 所有非掩码元素将显示为本身内<xref:System.Windows.Forms.MaskedTextBox>。 文本始终在运行时，占用掩码中的静态位置，无法移动或删除用户。|  
  
 如果更改掩码时<xref:System.Windows.Forms.MaskedTextBox>已包含用户输入筛选由以前的掩码，<xref:System.Windows.Forms.MaskedTextBox>将尝试迁移到新的掩码定义该输入。 如果失败，则会清除现有输入。 将分配一个零长度字符串作为掩码将会保留控件中的任何现有数据。 与零长度掩码一起使用时<xref:System.Windows.Forms.MaskedTextBox>的行为方式类似的单行<xref:System.Windows.Forms.TextBox>控件。  
  
 小数点 （.）、 分之几 （，）、 时间 （:）、 日期 （/），而货币 （$） 符号默认为由应用程序的区域性定义时，显示这些符号中。 你可以强制使用显示的另一个区域性符号<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>属性。  
  
 在运行时的字符插入到掩码受<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>属性。 用户可以通过使用左边距和右边的箭头键或鼠标光标浏览掩码，可以通过输入空格忽略掩码中的可选位置。  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.MaskedTextBox> 支持除代理项的所有 Unicode 字符和垂直组合的字符。  
  
 下表显示了示例掩码。  
  
|掩码|行为|  
|----------|--------------|  
|`00/00/0000`|国际日期格式的日期 （天、 月份、 年）。 "/"字符是一个逻辑日期分隔符，并将向用户显示为适合于应用程序的当前区域性的日期分隔符。|  
|`00->L<LL-0000`|三个字母月份缩写的显示带有两个小写字母后跟一个初始大写字母的美国格式的日期 （日、 月份缩写和年）。|  
|`(999)-000-0000`|美国境内电话号码，可选的区域代码。 如果不希望用户输入的可选字符，它们可以输入空间，或将鼠标指针放在由第一个 0 表示掩码中的位置直接。|  
|`$999,999.00`|0 到 999999 的范围中的货币值。 货币、 千位和十进制字符将替换为在运行时它们特定于区域性的等效项。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">提供给 <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> 属性的字符串不是一个有效掩码。 无效掩码包括含不可打印字符的掩码。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MaskChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MaskChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MaskChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在输入掩码更改后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskChanged>后的值，将引发事件<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>属性更改。 如果也会引发此事件<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>间接如改变了成员<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>， <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>， <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>，和<xref:System.Windows.Forms.MaskedTextBox.Culture%2A>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.MaskedTextBox.MaskChanged>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.MaskedTextBox>名为`MaskedTextBox1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.MaskedTextBox.MaskChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#485](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#485)]
 [!code-vb[System.Windows.Forms.EventExamples#485](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#485)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示所有必需的输入是否都已输入到输入掩码中。</summary>
        <value>
          如果所有的必需输入均已输入到掩码中，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> 检查仅必需的输入的元素。 若要确定是否已填充所有必选和可选的输入的元素，使用<xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A>属性改为。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="MaskedTextProvider">
      <MemberSignature Language="C#" Value="public System.ComponentModel.MaskedTextProvider MaskedTextProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.MaskedTextProvider MaskedTextProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskedTextProvider As MaskedTextProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::MaskedTextProvider ^ MaskedTextProvider { System::ComponentModel::MaskedTextProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.MaskedTextProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与掩码文本框控件的此实例关联的掩码提供程序的复本。</summary>
        <value>
          <see cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" /> 类型的掩码语言提供程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>属性都定义掩码分析引擎和使用的屏蔽语言<xref:System.Windows.Forms.MaskedTextBox>控件。 默认的提供程序<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>类; 但是，自定义提供程序可以指定使用<xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29>构造函数。  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> 不能直接设置。 但是，将设置的属性中的一些<xref:System.Windows.Forms.MaskedTextBox>-如<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>， <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>， <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>，和<xref:System.Windows.Forms.MaskedTextBox.Culture%2A>-可能导致在内部创建的新<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskFull { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示所有必需和可选的输入是否都已输入到输入掩码中。</summary>
        <value>
          如果所有的必需和可选输入均已输入，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A>中的属性<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件处理程序来确定用户的输入被拒绝，因为有没有剩余输入掩码中。 若要确定是否已输入仅必需的输入的元素，使用<xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A>属性。  
  
   
  
## Examples  
 下面的代码示例处理<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件，并使用<xref:System.Windows.Forms.ToolTip>用户发出警报，如果尝试在所有输入数据掩码中的位置已使用。  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="MaskInputRejected">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskInputRejected As MaskInputRejectedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MaskInputRejectedEventHandler ^ MaskInputRejected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskInputRejectedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户的输入或者分配的字符与输入掩码的对应格式元素不匹配时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 是的默认事件<xref:System.Windows.Forms.MaskedTextBox>类。  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>字符会拒绝输入掩码时发生事件。 输入的掩码，由表示<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>属性，通过与控件关联的掩码的文本框提供程序来进行解释<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>属性。 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 在以下情况下将引发：  
  
-   输入的字符不匹配的对应格式元素。 例如，用户输入一个字母字符时是必需的一个数字。 这可能是最常见的原因，将引发此事件的原因。  
  
-   用户尝试输入掩码结尾之外的无关字符或者因为已填充掩码或当前插入符号位置已移到末尾处显示的输入的掩码字符串。  
  
-   粘贴操作插入与它关联的格式的元素，不匹配的字符或者如果<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>属性是`false`，则将现有字符切换到它们不匹配其格式元素的新位置。  
  
-   在剪切的操作将现有字符左移，和一个或多个字符与它们关联新格式的元素不匹配。  
  
-   为进行了赋值<xref:System.Windows.Forms.MaskedTextBox.Text%2A>导致一个或多个掩码冲突的属性和分配的字符串。  
  
 如果字符串已分配给控件导致<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>发生，该字符串的任何部分将出现在<xref:System.Windows.Forms.MaskedTextBox>。  
  
 默认处理<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>将播放提示音声音如果<xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A>属性设置为`true`。 实现自定义错误处理，例如，在需要时移动到下一步的用户输入控件的掩码已满，或显示自定义错误对话框或工具提示，如果输入的字符无效，通常处理此事件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.MaskedTextBox>名为`MaskedTextBox1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#486](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#486)]
 [!code-vb[System.Windows.Forms.EventExamples#486](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#486)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.Windows.Forms.MaskInputRejectedEventArgs" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用户可在文本框控件中键入或粘贴的最大字符数。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此属性。</summary>
        <value>此属性始终返回 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请参阅<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>属性和<xref:System.Windows.Forms.MaskInputRejectedEventArgs.Position%2A>中的属性<xref:System.Windows.Forms.MaskInputRejectedEventArgs>有关如何确定中的字符串的最大长度信息的类<xref:System.Windows.Forms.MaskedTextBox>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskInputRejectedEventArgs.Position" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示它是否为多行文本框控件。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不完全支持此属性。</summary>
        <value>此属性始终返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A>属性继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置、 不完全支持此属性; 不能设置为和始终解析为`false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="MultilineChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultilineChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultilineChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultilineChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MultilineChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.MaskedTextBox.Multiline" /> 属性的值更改时通常发生该事件；但是 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不会引发该事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MultilineChanged>事件继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置，此事件中未实现<xref:System.Windows.Forms.MaskedTextBox>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>当 <see cref="P:System.Windows.Forms.Control.BackColor" /> 属性的值更改时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.HandleCreated" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsOverwriteModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsOverwriteModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsOverwriteModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsOverwriteModeChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.KeyPressEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.KeyUp" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMaskChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMaskChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMaskChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMaskChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMaskChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnMaskChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnMultilineChanged">
      <MemberSignature Language="C#" Value="protected override void OnMultilineChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMultilineChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMultilineChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMultilineChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>通常引发 <see cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" /> 事件，但对 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 禁用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.OnMultilineChanged%2A>方法继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置、 重写此方法以不执行任何操作。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.TextChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnTextChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.Validating" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A>方法使要针对验证的输入的字符串<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>属性，如果<xref:System.Type>已为此属性指定。 然后将也引发<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件。  
  
> [!NOTE]
>  若要确保与基于文本的控件保持一致，时发生验证，则即使<xref:System.Windows.Forms.MaskedTextBox>是只读的 (其<xref:System.Windows.Forms.MaskedTextBox.ReadOnly%2A>属性设置为`true`)。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">分析输入字符串的过程中出现异常。</exception>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要取代用户输入而显示的字符。</summary>
        <value>用作密码字符的 <see cref="T:System.Char" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于敏感的用户输入，它是常见的做法隐藏用户输入的实际信息。 如果<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>属性设置为非 null 字符，<xref:System.Windows.Forms.MaskedTextBox>将显示到控件的所有输入此字符。 此属性设置为`null`将禁用此功能。  
  
 如果你想要使用在 COMCTL32.dll，使用中定义的操作系统提供密码字符<xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>属性改为。 如果这两个<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>和<xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>激活属性，后者将优先。  
  
> [!IMPORTANT]
>  作为一种安全措施，<xref:System.Windows.Forms.MaskedTextBox>控件禁用对受密码保护的字符串的剪切和复制操作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置此属性时指定的字符不是有效的密码字符，是否有效由 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 类的 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 方法确定。</exception>
        <exception cref="T:System.InvalidOperationException">指定的密码字符与当前提示字符 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 相同。 这两者之间必须存在差异。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">通过引用传递的 <see cref="T:System.Windows.Forms.Message" />，它表示要处理的窗口消息。</param>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> 值之一，它表示要处理的快捷键。</param>
        <summary>处理命令键。</summary>
        <returns>
          如果命令键已由控件处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">通过引用传递的 <see cref="T:System.Windows.Forms.Message" />，它表示要处理的窗口消息。</param>
        <summary>重写该方法的基实现以处理输入语言更改。</summary>
        <returns>
          如果消息已由控件处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> 重写其基控件实现的<xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A>能够正确处理用户输入字符时，字符事件使用输入法编辑器 (IME)，如用于输入日语、 简体中文、 和其他复杂的非拉丁脚本。 <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> 检测到它收到 WM_IME_CHAR 消息并禁止显示它们以防在控件中显示这些字符后会发生任何 WM_CHAR 消息。 如果你从该控件派生，并重写此消息，则应重复此行为，如果你想要使用 Ime 你新控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PromptChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PromptChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('_')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于表示 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 中缺少用户输入的字符。</summary>
        <value>用于提示用户进行输入的字符。 默认为下划线 (_)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> 将显示在<xref:System.Windows.Forms.MaskedTextBox>用户尚未填写任何掩码位置。  
  
 使用<xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A>属性以指定是否显示提示时<xref:System.Windows.Forms.MaskedTextBox>不具有焦点。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置此属性时指定的字符不是有效的提示字符，是否有效由 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 类的 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 方法确定。</exception>
        <exception cref="T:System.InvalidOperationException">指定的提示字符与当前密码字符 <see cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" /> 相同。 这两者之间必须存在差异。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示文本框中的文本是否为只读。</summary>
        <value>
          如果文本为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectInputOnFirstFailure">
      <MemberSignature Language="C#" Value="public bool RejectInputOnFirstFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RejectInputOnFirstFailure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberSignature Language="VB.NET" Value="Public Property RejectInputOnFirstFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RejectInputOnFirstFailure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当遇到第一个无效字符时，是否应停止对用户输入的分析。</summary>
        <value>
          如果输入字符串的处理应当在首次出现分析错误时终止，该值为 <see langword="true" />；如果处理应忽略所有错误，则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有时，用户将输入有几个字符到<xref:System.Windows.Forms.MaskedTextBox>在单个的输入操作中，通常通过复制并粘贴字符串。 如果整个字符串只包含有效字符，根据在输入掩码中，其粘贴位置整个操作将会成功。 但是，在分析时出错的行为<xref:System.Windows.Forms.MaskedTextBox>取决于值<xref:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure%2A>、，如下所示：  
  
-   如果此属性为`true`，那么输入字符串的处理在无效的字符处停止。 将忽略所有后续字符。 单个<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>引发事件。  
  
-   如果此属性为`false`，那么将拒绝的无效字符，但继续分析输入字符串中的下一个字符。 A<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>对输入字符串中每个无效字符引发事件。  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>，<xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>和<xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>属性也会影响用户输入的解释。  
  
 如果<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>属性是`false`，然后插入点右侧输入掩码中已经存在的任何字符将被移置开接受的字符数。 这种位置变化可能会导致其他分析错误。  
  
 可以通过设置以编程方式模拟粘贴操作<xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnPrompt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnPrompt { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定应如何处理与提示字符匹配的输入字符。</summary>
        <value>
          如果输入的提示字符会导致掩码中的当前可编辑位置被重置，则为 <see langword="true" />；否则为 <see langword="false" />，以指示要将提示字符作为正常输入字符进行处理。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox>可以将两种类别的字符-空格字符和提示字符-专门。 通常情况下，将对照掩码并测试每个输入的字符接受或拒绝。 假设<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>属性设置为非`null`，然后设置<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>属性`true`将导致对提示字符特殊处理。 当用户输入到掩码的提示字符时，它会导致要清除的当前掩码字符位置和当前位置，以推进到下一个可编辑的字符。  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> 将优先于<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>属性下, 表中所示。  
  
|ResetOnPrompt 值|AllowPromptAsInput 值|产生的行为|  
|-------------------------|------------------------------|------------------------|  
|`true`|`true`|可以输入提示字符，它将导致当前的掩码位置，要重置。 这是默认设置。|  
|`true`|`false`|可以输入提示字符，它将导致当前的掩码位置，要重置。|  
|`false`|`true`|提示字符被处理为标准的输入字符。|  
|`false`|`false`|提示字符无效，引发<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件。|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定应如何处理空白输入字符。</summary>
        <value>
          如果空白输入字符将导致重置掩码中的当前可编辑位置，则为 <see langword="true" />；否则为 <see langword="false" />，以指示要将其作为正常输入字符进行处理。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox>可以将两种类别的字符-空格字符和提示字符-专门。 通常情况下，将对照掩码并测试每个输入的字符接受或拒绝。 设置<xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>属性`true`将导致要清除的当前掩码字符位置和当前位置，以推进到下一个可编辑的字符。  
  
 字符输入的类型将确定是否屏蔽引擎将向前移动到掩码中的下一个字符或保留在当前位置并等待匹配的字符。 如果输入的字符是空格，并且与掩码中当前的非可编辑字符不匹配，屏蔽引擎将向前跳至掩码中的下一个字符。 如果输入的字符不是一个空格，并且与掩码中当前的非可编辑字符不匹配，屏蔽引擎将保留在掩码当前位置，并尝试匹配对其下一步输入的字符。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ScrollToCaret">
      <MemberSignature Language="C#" Value="public void ScrollToCaret ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollToCaret() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ScrollToCaret" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollToCaret ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollToCaret();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将控件内容滚动到当前插入符号位置。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ScrollToCaret%2A>方法继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，因为<xref:System.Windows.Forms.MaskedTextBox>控件不支持多行配置、 重写此方法以不执行任何操作。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控件中当前选择的内容。</summary>
        <value>
          <see cref="T:System.String" /> 类型的当前选定文本。 如果当前没有选定任何文本，此属性将解析为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根据控件的格式设置属性，如格式化选择使用此属性检索<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>， <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>，<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>和<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>。 选择使用此属性设置的行为类似于粘贴操作： 根据掩码，匹配每个字符和<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>个无效字符引发事件。 如果<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>是`true`，设置时允许原义字符和提示字符<xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>，并且将以无提示方式删除，除非它们不与掩码冲突。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipLiterals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipLiterals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否允许用户重新输入原义字符值。</summary>
        <value>
          <see langword="true" /> 允许重新输入原义字符；否则 <see langword="false" /> 阻止用户覆盖原义字符。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 输入的掩码通常包含文本。 当用户输入到字符<xref:System.Windows.Forms.MaskedTextBox>在运行时，当前的字符位置将有时落在原义。 <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>属性描述如何为下一个字符的用户输入处理的方式，，如下所示：  
  
-   如果此属性为`true`，用户可以不必要地输入相同的字符与该文本中的当前的位置，或者可以输入下一个可编辑的字符，从而从当前位置跳至该位置。  
  
-   如果此属性为`false`，用户可以只需输入下一个可编辑的字符。 如果掩码中的下一个位置将不接受文本的字符 (例如，用户类型"/"和下一个位置仅接受数字)，则控件将引发<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件。  
  
 例如，在"90/90/0000"日期输入掩码中，正斜杠字符都是文本。 假定用户输入两个数字，"11"，掩码的当前位置位于第一个正斜杠 （/） 原义字符。 如果<xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>是`true`，那么用户具有有效的以下选项：  
  
-   用户可以输入"/"字符。 这会导致正移至下一个字符，即在此示例中的第四个位置，9 屏蔽元素的位置。  
  
-   用户可以输入下一个可编辑的字符，它在此示例是数字。 该数字将通过验证，当前的位置会自动移动到第五个位置，即 0 屏蔽元素。  
  
 如果<xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>是`false`，然后允许仅输入有效的数据，这样在此示例具有一个数字。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前显示给用户的文本。</summary>
        <value>一个 <see cref="T:System.String" />，包含控件当前显示的文本。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 是的默认绑定属性<xref:System.Windows.Forms.MaskedTextBox>类。  
  
 使用此属性检索到的字符串的格式根据控件的格式设置属性，如<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>和<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>。  
  
 你可以将字符串分配有原义字符的无<xref:System.Windows.Forms.MaskedTextBox.Text%2A>的值决定<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>， <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>，和<xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>。  
  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 是的默认绑定属性<xref:System.Windows.Forms.MaskedTextBox>。  
  
 <xref:System.Windows.Forms.MaskedTextBox> 将引发<xref:System.Windows.Forms.Control.TextChanged>格式化的文本值发生更改时的事件。 不同的属性可能或可能不会导致此值可更改。 例如，更改<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>属性不会引发<xref:System.Windows.Forms.Control.TextChanged>事件，但更改<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>属性将。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Windows.Forms.MaskedTextBox.Text%2A>属性。  
  
 [!code-vb[TestMaskedTextBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TestMaskedTextBox/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置掩码文本框控件中文本的对齐方式。</summary>
        <value>
          <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 枚举值之一，指定文本相对于控件的对齐方式。 默认值为 <see cref="F:System.Windows.Forms.HorizontalAlignment.Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A>属性对齐内显示的文本<xref:System.Windows.Forms.MaskedTextBox>以匹配窗体上的可视元素的布局。 例如，如果你的控件位于窗体右侧上，你可以设置<xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A>属性<xref:System.Windows.Forms.HorizontalAlignment.Right>，并且将与控件而不是默认左对齐方式的右侧对齐文本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">赋给该属性的值不是 <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 类型。</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.AutoSize" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当文本对齐方式更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>后引发事件<xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A>属性更改。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在示例中，事件处理程序报告的匹配项<xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>事件。 此报告可帮助您了解当发生事件，并可以帮助您进行调试。 若要报告或频繁发生的事件上多个事件，请考虑替换<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>与<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或追加到一个多行消息<xref:System.Windows.Forms.TextBox>。  
  
 若要运行此代码示例，请将其粘贴到包含类型的实例的项目<xref:System.Windows.Forms.MaskedTextBox>名为`MaskedTextBox1`。 然后，确保与事件处理程序<xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#487](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#487)]
 [!code-vb[System.Windows.Forms.EventExamples#487](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#487)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取显示的文本的长度。</summary>
        <value>一个 Int32，表示 <see cref="P:System.Windows.Forms.MaskedTextBox.Text" /> 属性中的字符个数。 <see cref="P:System.Windows.Forms.MaskedTextBox.TextLength" /> 会采用 <see cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" /> 等属性，这意味着返回结果可能因控件是否有焦点而不同。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat TextMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat TextMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TextMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat TextMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值决定原义字符和提示字符是否包括在格式化字符串中。</summary>
        <value>
          <see cref="T:System.Windows.Forms.MaskFormat" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>属性确定如何处理掩码中的文本，并提示字符时生成的格式化的字符串。 更具体地说，它决定原义字符和 / 或提示字符是否包括在<xref:System.Windows.Forms.MaskedTextBox.Text%2A>属性。 如果提示字符被排除，它们将转换为格式字符串中的空格。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>属性有用途类似如何与<xref:System.Windows.Forms.MaskedTextBox.Text%2A>解释属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">用无效的 <see cref="T:System.Windows.Forms.MaskFormat" /> 值设置的属性。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示当前掩码文本框的字符串。 此方法重写 <see cref="M:System.Windows.Forms.TextBoxBase.ToString" />。</summary>
        <returns>一个 <see cref="T:System.String" />，包含有关当前 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 的信息。 该字符串包含类型、输入字符串的简化视图以及格式化后的输入字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此版本的<xref:System.Windows.Forms.MaskedTextBox.ToString%2A>方法调用此方法的基类实现<xref:System.Windows.Forms.TextBoxBase.ToString%2A?displayProperty=nameWithType>，然后在处理后追加的输入的字符串，由屏蔽。 此方法负责兑现 alter 格式的字符串，有以下例外的外观的属性：  
  
-   返回的字符串始终包括提示和文本的字符，而不考虑的值<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>属性。  
  
-   密码字符被忽略，以便将返回实际用户键入的字符。 换而言之的值<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>和<xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>属性会被忽略。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="TypeValidationCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeValidationCompleted As TypeValidationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TypeValidationEventHandler ^ TypeValidationCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TypeValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 已使用 <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" /> 属性完成了对当前值的分析时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox>控件 （可选） 验证针对定义的类型的用户输入其<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType>属性。 当此属性不是`null`，发生以下一系列事件：  
  
1.  验证序列开始时以下项之一：  
  
    -   <xref:System.Windows.Forms.MaskedTextBox> 控件失去焦点。  
  
    -   <xref:System.Windows.Forms.MaskedTextBox.Text%2A>检索属性。  
  
    -   调用 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> 方法。  
  
2.  任何这些事件导致调用`Parse`与指定的类型的方法<xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A>属性。 `Parse` 负责格式化的输入字符串转换为目标类型。 成功转换相当于成功验证。  
  
3.  后`Parse`返回时，<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>引发事件。 此事件的事件处理程序最常实现来执行类型或蒙板验证处理。 它接收<xref:System.Windows.Forms.TypeValidationEventArgs>参数，其中包含信息有关的转换; 例如，<xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A>成员指示转换是否成功。  
  
4.  之后的事件处理程序<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件返回，该标准的验证事件， <xref:System.Windows.Forms.Control.Validating>，将引发。 可实现一个处理程序来执行标准的验证，可能包括取消事件。  
  
5.  如果在步骤 3 中未取消事件，则标准控件的验证事件<xref:System.Windows.Forms.Control.Validated>引发。  
  
 如果<xref:System.Windows.Forms.TypeValidationEventArgs.Cancel%2A>属性设置为`true`中<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件处理程序，将取消事件与<xref:System.Windows.Forms.MaskedTextBox>控件将保留焦点，除非后续<xref:System.Windows.Forms.Control.Validating>事件设置它的版本<xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType>属性返回到`false`。  
  
   
  
## Examples  
 下面的代码示例尝试分析为一个有效的用户的输入<xref:System.DateTime>对象。 如果失败，<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件处理程序为用户显示一条错误消息。 如果值为一个有效<xref:System.DateTime>，代码将验证提供的日期不是在今天的日期之前。 此代码示例要求你的 Windows 窗体项目包含<xref:System.Windows.Forms.MaskedTextBox>控件名为`MaskedTextBox1`和<xref:System.Windows.Forms.ToolTip>控件名为`ToolTip1`。  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="T:System.Windows.Forms.TypeValidationEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public void Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Undo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Undo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>撤消文本框中的上一个编辑操作。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Undo%2A>方法继承自基类<xref:System.Windows.Forms.TextBoxBase>类。 但是，<xref:System.Windows.Forms.MaskedTextBox>不支持撤消功能。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否应使用操作系统提供的密码字符。</summary>
        <value>
          如果应将系统密码用作提示字符，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>属性确定用户提供的输入是否应显示在<xref:System.Windows.Forms.MaskedTextBox>作为密码字符由操作系统定义的多个匹配项。 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> 功能类似于<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>属性，而不是使用为提示，程序员提供的字符，但<xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>使用由操作系统定义的提示。 此属性的优先级高于<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>。  
  
> [!IMPORTANT]
>  作为一种安全措施，<xref:System.Windows.Forms.MaskedTextBox>控件禁用对受密码保护的字符串的剪切和复制操作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定的密码字符与当前提示字符 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 相同。 这两者之间必须存在差异。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public object ValidateText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateText () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将用户输入字符串转换为验证类型的一个实例。</summary>
        <returns>如果成功，则为由 <see cref="T:System.Object" /> 属性指定的类型的 <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />；否则将返回 <see langword="null" /> 以指示转换失败。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A>方法尝试将格式化的字符串中包含转换<xref:System.Windows.Forms.MaskedTextBox.Text%2A>指向由指定类型的实例的属性<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>属性。 提示字符将忽略在格式化字符串，但文本处理的当前值根据<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>属性。  
  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> 引发<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件后，将尝试转换，无论其是否成功。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">分析输入字符串的过程中出现异常。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ValidatingType">
      <MemberSignature Language="C#" Value="public Type ValidatingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValidatingType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ValidatingType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于验证用户输入的数据的数据类型。</summary>
        <value>表示在验证中使用的数据类型的 <see cref="T:System.Type" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 掩码并在本身不能保证用户的输入将表示对于给定的类型有效的值。 下面的 C# 代码演示一个掩码：  
  
```  
maskedTextBox1.Mask = "99/99/9999";  
```  
  
 下面的 Visual Basic 代码演示一个掩码：  
  
 `MaskedTextBox1.Mask = "99/99/9999"`  
  
 此掩码可以要求用户输入八位，但无法验证用户在正常范围内; 中，输入月份、 日期和年份值就而言掩码，"2003 年 12 月 20 日"和"70/90/0000"是同样有效。  
  
 你可以使用<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>以验证用户输入的数据是否处于正确的范围内，在最前面所述的情况下，为其分配的实例<xref:System.DateTime>类型。 在控件中的当前文本将为用户离开控件时，请验证。 你可以确定通过监视数据是否未通过验证<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件。 <xref:System.Windows.Forms.MaskedTextBox> 将仅对其执行检查<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>如果<xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A>是`true`。  
  
 如果你想要使用自己的自定义数据类型与<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>，必须实现一个静态`Parse`采用字符串作为参数的方法。 必须有一个或两个以下签名实现此方法：  
  
 `public static Object Parse(string)`  
  
 `public static Object Parse(string, IFormatProvider)`  
  
   
  
## Examples  
 下面的代码示例尝试分析为一个有效的用户的输入<xref:System.DateTime>。 如果失败，<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件处理程序为用户显示一条错误消息。 如果值为一个有效<xref:System.DateTime>，该代码执行其他检查，以确保提供的日期不是在今天的日期之前。 此代码示例要求你的 Windows 窗体项目包含<xref:System.Windows.Forms.MaskedTextBox>控件名为`MaskedTextBox1`和<xref:System.Windows.Forms.ToolTip>控件名为`ToolTip1`。  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">要处理的 Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>处理 Windows 消息。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="WordWrap">
      <MemberSignature Language="C#" Value="public bool WordWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WordWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property WordWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WordWrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，它指示必要时多行文本框控件是否自动换行到下一行的起始处。 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 不支持此属性。</summary>
        <value>
          <see cref="P:System.Windows.Forms.MaskedTextBox.WordWrap" /> 属性总是返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为<xref:System.Windows.Forms.MaskedTextBox>不支持多个行的输入，<xref:System.Windows.Forms.MaskedTextBox.WordWrap%2A>忽略属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
  </Members>
</Type>